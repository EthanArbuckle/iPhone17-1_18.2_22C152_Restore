double TType1PSFont::GetORUTransform(uint64_t a1, uint64_t a2)
{
  double result;

  *(void *)&result = 0x10000;
  *(_OWORD *)a2 = xmmword_1B53FFAE0;
  *(void *)(a2 + 16) = 0;
  return result;
}

uint64_t TParsingContext::SetPGFontType(const char **this)
{
  int Integer = TParsingContext::GetInteger(this);
  if (*((_DWORD *)this + 88) != 4 || Integer != 0) {
    TParsingContext::ParseError((TParsingContext *)4);
  }
  uint64_t result = (*((uint64_t (**)(const char **, uint64_t))*this + 10))(this, 1000);
  if ((result & 1) == 0) {
    TParsingContext::ParseError((TParsingContext *)1);
  }
  *((_WORD *)this[86] + 1) = 1;
  return result;
}

uint64_t TParsingContext::SetCDevProc(const char **this)
{
  uint64_t CDevProc = TParsingContext::GetCDevProc(this);
  uint64_t result = (*((uint64_t (**)(const char **, uint64_t))*this + 42))(this, CDevProc);
  if ((result & 1) == 0) {
    TParsingContext::ParseError((TParsingContext *)1);
  }
  return result;
}

uint64_t TParsingContext::SetCharOffsets(TParsingContext *this)
{
  *((_DWORD *)this + 124) = 2;
  BinaryString = TParsingContext::GetBinaryString((const char **)this, &v6, &v5, &v4);
  *((_DWORD *)this + 124) = 0;
  uint64_t result = (*(uint64_t (**)(TParsingContext *, const char *, void))(*(void *)this + 408))(this, BinaryString, *((void *)this + 63));
  if ((result & 1) == 0) {
    TParsingContext::ParseError((TParsingContext *)1);
  }
  return result;
}

uint64_t TParsingContext::SetPGFArray(TParsingContext *this)
{
  if (!(*(unsigned int (**)(TParsingContext *, uint64_t))(*(void *)this + 392))(this, 0xFFFFFFFFLL)) {
    goto LABEL_8;
  }
  uint64_t v2 = 0;
  while (1)
  {
    int Token = TParsingContext::GetToken(this);
    if (Token == 6) {
      break;
    }
    if (Token == 2)
    {
      int v4 = (*(uint64_t (**)(TParsingContext *, uint64_t, void))(*(void *)this + 400))(this, v2, *((void *)this + 31));
      uint64_t v2 = (v2 + 1);
      if (!v4) {
        goto LABEL_8;
      }
    }
  }
  uint64_t result = (*(uint64_t (**)(TParsingContext *, uint64_t))(*(void *)this + 392))(this, v2);
  if ((result & 1) == 0) {
LABEL_8:
  }
    TParsingContext::ParseError((TParsingContext *)1);
  return result;
}

uint64_t TParsingContext::SetSubsVector(TParsingContext *this)
{
  Stringint Token = TParsingContext::GetStringToken(this);
  uint64_t result = (*(uint64_t (**)(TParsingContext *, void, uint64_t))(*(void *)this + 368))(this, *((unsigned int *)this + 48), StringToken);
  if ((result & 1) == 0) {
    TParsingContext::ParseError((TParsingContext *)1);
  }
  return result;
}

uint64_t TParsingContext::SetFDepVector(TParsingContext **this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int Token = TParsingContext::GetToken((TParsingContext *)this);
  if (Token != 4)
  {
    if (Token != 5) {
      TParsingContext::ParseError((TParsingContext *)4);
    }
    if ((*((unsigned int (**)(TParsingContext **, uint64_t))*this + 47))(this, 0xFFFFFFFFLL))
    {
      uint64_t v4 = 0;
      while (1)
      {
        int v5 = TParsingContext::GetToken((TParsingContext *)this);
        if (v5 == 6) {
          break;
        }
        if (v5 == 2)
        {
          char v6 = (*((uint64_t (**)(TParsingContext **, uint64_t, TParsingContext *))*this + 48))(this, v4, this[31]);
          uint64_t v4 = (v4 + 1);
          if ((v6 & 1) == 0) {
            goto LABEL_20;
          }
        }
      }
      uint64_t result = (*((uint64_t (**)(TParsingContext **, uint64_t))*this + 47))(this, v4);
      if (result) {
        return result;
      }
    }
LABEL_20:
    TParsingContext::ParseError((TParsingContext *)1);
  }
  uint64_t v7 = TParsingContext::InterpretInteger(this[31], v3);
  if (!(*((unsigned int (**)(TParsingContext **, uint64_t))*this + 47))(this, v7)) {
    goto LABEL_20;
  }
  do
    TParsingContext::SkipTo((TParsingContext *)this, 15);
  while (strcmp((const char *)this[31], "dup"));
  while (1)
  {
    while (1)
    {
      int v8 = TParsingContext::GetToken((TParsingContext *)this);
      if (v8 != 4) {
        break;
      }
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v28 = v11;
      long long v29 = v11;
      long long v26 = v11;
      long long v27 = v11;
      long long v24 = v11;
      long long v25 = v11;
      *(_OWORD *)__dst = v11;
      long long v23 = v11;
      uint64_t v12 = TParsingContext::InterpretInteger(this[31], v9);
      TParsingContext::GetToken((TParsingContext *)this);
      strlcpy(__dst, (const char *)this[31], 0x80uLL);
      int v13 = TParsingContext::GetToken((TParsingContext *)this);
      v15 = this[31];
      if (v13 == 15 && !strcmp((const char *)this[31], "findfont"))
      {
        if (((*((uint64_t (**)(TParsingContext **, uint64_t, char *))*this + 48))(this, v12, __dst) & 1) == 0) {
          goto LABEL_20;
        }
      }
      else
      {
        BOOL v16 = TParsingContext::InterpretBoolean(v15, v14);
        uint64_t Integer = TParsingContext::GetInteger((const char **)this);
        BinaryString = TParsingContext::GetBinaryString((const char **)this, &v21, &v20, &v19);
        if (((*((uint64_t (**)(TParsingContext **, uint64_t, char *, BOOL, uint64_t, const char *, TParsingContext *))*this
               + 60))(this, v12, __dst, v16, Integer, BinaryString, this[63]) & 1) == 0)goto LABEL_20;
      }
    }
    if (v8 == 15)
    {
      uint64_t result = strcmp((const char *)this[31], "def");
      if (!result) {
        return result;
      }
    }
  }
}

uint64_t TParsingContext::SetMDFV(const char **this)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (TParsingContext::GetToken((TParsingContext *)this) != 5) {
    goto LABEL_20;
  }
  if (!(*((unsigned int (**)(const char **, uint64_t))*this + 56))(this, 0xFFFFFFFFLL)) {
    goto LABEL_21;
  }
  for (uint64_t i = 0; ; uint64_t i = (i + 1))
  {
    int Token = TParsingContext::GetToken((TParsingContext *)this);
    if (Token != 5) {
      break;
    }
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __dst[6] = v4;
    __dst[7] = v4;
    __dst[4] = v4;
    __dst[5] = v4;
    __dst[2] = v4;
    __dst[3] = v4;
    __dst[0] = v4;
    __dst[1] = v4;
    long long v18 = v4;
    long long v19 = v4;
    long long v16 = v4;
    long long v17 = v4;
    long long v14 = v4;
    long long v15 = v4;
    *(_OWORD *)uint64_t v12 = v4;
    long long v13 = v4;
    if (TParsingContext::GetToken((TParsingContext *)this) != 2) {
      goto LABEL_20;
    }
    strlcpy((char *)__dst, this[31], 0x80uLL);
    if (TParsingContext::GetToken((TParsingContext *)this) != 2) {
      goto LABEL_20;
    }
    strlcpy(v12, this[31], 0x80uLL);
    v11[0] = 0xAAAAAAAAAAAAAAAALL;
    v11[1] = 0xAAAAAAAAAAAAAAAALL;
    TParsingContext::DoFontBBox((TParsingContext *)this, v11);
    if (TParsingContext::GetToken((TParsingContext *)this) != 5) {
      goto LABEL_20;
    }
    if (!(*((unsigned int (**)(const char **, uint64_t, _OWORD *, char *, void *))*this + 57))(this, i, __dst, v12, v11))goto LABEL_21; {
    uint64_t v5 = 0;
    }
    while (1)
    {
      int v6 = TParsingContext::GetToken((TParsingContext *)this);
      if (v6 != 2) {
        break;
      }
      char v7 = (*((uint64_t (**)(const char **, uint64_t, const char *))*this + 58))(this, v5, this[31]);
      uint64_t v5 = (v5 + 1);
      if ((v7 & 1) == 0) {
        goto LABEL_21;
      }
    }
    if (v6 != 6) {
      goto LABEL_20;
    }
    memset(v10, 170, sizeof(v10));
    TParsingContext::DoFontMatrix((TParsingContext *)this, (TFractMatrix *)v10);
    uint64_t CDevProc = TParsingContext::GetCDevProc(this);
    if (((*((uint64_t (**)(const char **, uint64_t, void *, uint64_t))*this + 59))(this, v5, v10, CDevProc) & 1) == 0) {
      goto LABEL_21;
    }
    if (TParsingContext::GetToken((TParsingContext *)this) != 6) {
      goto LABEL_20;
    }
  }
  if (Token != 6) {
LABEL_20:
  }
    TParsingContext::ParseError((TParsingContext *)4);
  uint64_t result = (*((uint64_t (**)(const char **, uint64_t))*this + 56))(this, i);
  if ((result & 1) == 0) {
LABEL_21:
  }
    TParsingContext::ParseError((TParsingContext *)1);
  return result;
}

uint64_t TParsingContext::BlendStemSnap(TParsingContext *this, int **a2, unsigned int a3, unsigned __int16 *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
  v22 = (TParsingContext *)0xAAAAAAAAAAAAAAAALL;
  TParseOpenCloseGetTokenScope::TParseOpenCloseGetTokenScope((TParseOpenCloseGetTokenScope *)&v21, this);
  uint64_t Token = TParsingContext::GetToken(v22);
  LODWORD(v21) = Token;
  if (Token == 5)
  {
    uint64_t v9 = 0;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v25 = v10;
    long long v26 = v10;
    *(_OWORD *)long long v23 = v10;
    long long v24 = v10;
    do
    {
      if (v9 == 12)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DD4440;
        exception[2] = 4;
      }
      if (TParsingContext::GetOpenFixedArray((TParsingContext **)this, v23, a3) != a3)
      {
        long long v19 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v19 = &unk_1F0DD4440;
        v19[2] = 4;
      }
      if (a3)
      {
        long long v11 = v23;
        uint64_t v12 = a2;
        uint64_t v13 = a3;
        do
        {
          int v15 = *v11++;
          int v14 = v15;
          uint64_t v16 = (uint64_t)*v12++;
          *(_DWORD *)(v16 + 4 * v9) = v14;
          --v13;
        }
        while (v13);
      }
      uint64_t Token = TParsingContext::GetToken(v22);
      ++v9;
      LODWORD(v21) = Token;
    }
    while (Token == 5);
  }
  else
  {
    LODWORD(v9) = 0;
  }
  uint64_t result = TParseOpenCloseGetTokenScope::Close(Token);
  if (v9 < *a4)
  {
    unsigned int v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)unsigned int v20 = &unk_1F0DD4440;
    v20[2] = 4;
  }
  *a4 = v9;
  return result;
}

uint64_t TParsingContext::DoBFChar(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 360);
  if (v1)
  {
    uint64_t v2 = this;
    do
    {
      uint64_t Integer = TParsingContext::GetInteger((const char **)v2);
      if (*(_DWORD *)(v2 + 356) == 3)
      {
        long long v4 = *(char **)(v2 + 248);
        uint64_t v5 = ((int)(strchr(v4, 62) - v4) >> 1);
      }
      else
      {
        uint64_t v5 = 1;
      }
      int Token = TParsingContext::GetToken((TParsingContext *)v2);
      switch(Token)
      {
        case 2:
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v2 + 760))(v2, Integer, v5, *(void *)(v2 + 248));
          if ((this & 1) == 0) {
            goto LABEL_16;
          }
          break;
        case 3:
          uint64_t v9 = strtol_l(*(const char **)(v2 + 248), 0, 16, 0);
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v2 + 752))(v2, Integer, v5, v9);
          if ((this & 1) == 0) {
            goto LABEL_16;
          }
          break;
        case 4:
          uint64_t v8 = TParsingContext::InterpretInteger(*(TParsingContext **)(v2 + 248), v7);
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v2 + 752))(v2, Integer, v5, v8);
          if ((this & 1) == 0) {
LABEL_16:
          }
            TParsingContext::ParseError((TParsingContext *)1);
          break;
        default:
          TParsingContext::ParseError((TParsingContext *)4);
      }
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t TParsingContext::DoBFRange(uint64_t this)
{
  int v1 = *(_DWORD *)(this + 360);
  if (v1)
  {
    uint64_t v2 = this;
    do
    {
      uint64_t Integer = TParsingContext::GetInteger((const char **)v2);
      if (*(_DWORD *)(v2 + 356) == 3)
      {
        long long v4 = *(char **)(v2 + 248);
        uint64_t v5 = ((int)(strchr(v4, 62) - v4) >> 1);
      }
      else
      {
        uint64_t v5 = 1;
      }
      uint64_t v6 = TParsingContext::GetInteger((const char **)v2);
      if (*(_DWORD *)(v2 + 356) == 3)
      {
        char v7 = *(char **)(v2 + 248);
        uint64_t v8 = ((int)(strchr(v7, 62) - v7) >> 1);
      }
      else
      {
        uint64_t v8 = 1;
      }
      int Token = TParsingContext::GetToken((TParsingContext *)v2);
      switch(Token)
      {
        case 3:
          uint64_t v12 = strtol_l(*(const char **)(v2 + 248), 0, 16, 0);
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v2 + 736))(v2, Integer, v5, v6, v8, v12);
          if ((this & 1) == 0) {
            goto LABEL_21;
          }
          break;
        case 4:
          uint64_t v13 = TParsingContext::InterpretInteger(*(TParsingContext **)(v2 + 248), v10);
          this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v2 + 736))(v2, Integer, v5, v6, v8, v13);
          if ((this & 1) == 0) {
            goto LABEL_21;
          }
          break;
        case 5:
          uint64_t v11 = 0;
          while (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v2 + 744))(v2, Integer, v5, v6, v8, v11, *(void *)(v2 + 248)) & 1) != 0)
          {
            this = TParsingContext::GetToken((TParsingContext *)v2);
            uint64_t v11 = (v11 + 1);
            if (this == 6) {
              goto LABEL_19;
            }
          }
LABEL_21:
          TParsingContext::ParseError((TParsingContext *)1);
        default:
          TParsingContext::ParseError((TParsingContext *)4);
      }
LABEL_19:
      --v1;
    }
    while (v1);
  }
  return this;
}

uint64_t TParsingContext::DoCIDChar(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    uint64_t Integer = TParsingContext::GetInteger((const char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      long long v4 = *(char **)(v1 + 248);
      uint64_t v5 = ((int)(strchr(v4, 62) - v4) >> 1);
    }
    else
    {
      uint64_t v5 = 1;
    }
    uint64_t v6 = TParsingContext::GetInteger((const char **)v1);
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v1 + 664))(v1, Integer, v5, v6);
    if ((this & 1) == 0) {
      TParsingContext::ParseError((TParsingContext *)1);
    }
  }
  return this;
}

uint64_t TParsingContext::DoCIDRange(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    uint64_t Integer = TParsingContext::GetInteger((const char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      long long v4 = *(char **)(v1 + 248);
      uint64_t v5 = ((int)(strchr(v4, 62) - v4) >> 1);
    }
    else
    {
      uint64_t v5 = 1;
    }
    uint64_t v6 = TParsingContext::GetInteger((const char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      char v7 = *(char **)(v1 + 248);
      uint64_t v8 = ((int)(strchr(v7, 62) - v7) >> 1);
    }
    else
    {
      uint64_t v8 = 1;
    }
    uint64_t v9 = TParsingContext::GetInteger((const char **)v1);
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v1 + 656))(v1, Integer, v5, v6, v8, v9);
    if ((this & 1) == 0) {
      TParsingContext::ParseError((TParsingContext *)1);
    }
  }
  return this;
}

uint64_t TParsingContext::DoCodeSpaceRange(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    uint64_t Integer = TParsingContext::GetInteger((const char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      long long v4 = *(char **)(v1 + 248);
      uint64_t v5 = ((int)(strchr(v4, 62) - v4) >> 1);
    }
    else
    {
      uint64_t v5 = 1;
    }
    uint64_t v6 = TParsingContext::GetInteger((const char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      char v7 = *(char **)(v1 + 248);
      uint64_t v8 = ((int)(strchr(v7, 62) - v7) >> 1);
    }
    else
    {
      uint64_t v8 = 1;
    }
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v1 + 688))(v1, Integer, v5, v6, v8);
    if ((this & 1) == 0) {
      TParsingContext::ParseError((TParsingContext *)1);
    }
  }
  return this;
}

uint64_t TParsingContext::DoNotDefChar(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    uint64_t Integer = TParsingContext::GetInteger((const char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      long long v4 = *(char **)(v1 + 248);
      uint64_t v5 = ((int)(strchr(v4, 62) - v4) >> 1);
    }
    else
    {
      uint64_t v5 = 1;
    }
    if (TParsingContext::GetToken((TParsingContext *)v1) != 4) {
      TParsingContext::ParseError((TParsingContext *)4);
    }
    uint64_t v7 = TParsingContext::InterpretInteger(*(TParsingContext **)(v1 + 248), v6);
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v1 + 672))(v1, Integer, v5, v7);
    if ((this & 1) == 0) {
      TParsingContext::ParseError((TParsingContext *)1);
    }
  }
  return this;
}

uint64_t TParsingContext::DoNotDefRange(uint64_t this)
{
  uint64_t v1 = this;
  int v2 = *(_DWORD *)(this + 360) + 1;
  while (--v2)
  {
    uint64_t Integer = TParsingContext::GetInteger((const char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      long long v4 = *(char **)(v1 + 248);
      uint64_t v5 = ((int)(strchr(v4, 62) - v4) >> 1);
    }
    else
    {
      uint64_t v5 = 1;
    }
    uint64_t v6 = TParsingContext::GetInteger((const char **)v1);
    if (*(_DWORD *)(v1 + 356) == 3)
    {
      uint64_t v7 = *(char **)(v1 + 248);
      uint64_t v8 = ((int)(strchr(v7, 62) - v7) >> 1);
    }
    else
    {
      uint64_t v8 = 1;
    }
    uint64_t v9 = TParsingContext::GetInteger((const char **)v1);
    this = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v1 + 680))(v1, Integer, v5, v6, v8, v9);
    if ((this & 1) == 0) {
      TParsingContext::ParseError((TParsingContext *)1);
    }
  }
  return this;
}

uint64_t TParsingContext::DoUseMatrix(TParsingContext *this)
{
  if (TParsingContext::GetToken(this) != 5
    || (v3[0] = TParsingContext::GetFixed((TParsingContext **)this),
        v3[1] = TParsingContext::GetFixed((TParsingContext **)this),
        v3[2] = TParsingContext::GetFixed((TParsingContext **)this),
        v3[3] = TParsingContext::GetFixed((TParsingContext **)this),
        v3[4] = TParsingContext::GetFixed((TParsingContext **)this),
        v3[5] = TParsingContext::GetFixed((TParsingContext **)this),
        TParsingContext::GetToken(this) != 6))
  {
    TParsingContext::ParseError((TParsingContext *)4);
  }
  if (((*(uint64_t (**)(TParsingContext *, void, _DWORD *))(*(void *)this + 720))(this, *((unsigned int *)this + 90), v3) & 1) == 0)TParsingContext::ParseError((TParsingContext *)1); {
  return TParsingContext::GetToken(this);
  }
}

uint64_t TParsingContext::DoUseCMap(TParsingContext *this)
{
  uint64_t result = (*(uint64_t (**)(TParsingContext *, char *))(*(void *)this + 768))(this, (char *)this + 364);
  if ((result & 1) == 0) {
    TParsingContext::ParseError((TParsingContext *)1);
  }
  return result;
}

uint64_t TParsingContext::DoUseFont(TParsingContext *this)
{
  uint64_t result = (*(uint64_t (**)(TParsingContext *, void))(*(void *)this + 728))(this, *((unsigned __int16 *)this + 180));
  if ((result & 1) == 0) {
    TParsingContext::ParseError((TParsingContext *)1);
  }
  return result;
}

void TParserDictionary::~TParserDictionary(TParserDictionary *this)
{
}

void TParserPrivateDictionary::~TParserPrivateDictionary(TParserPrivateDictionary *this)
{
}

void ParserBlendDictionary::~ParserBlendDictionary(ParserBlendDictionary *this)
{
}

void ParserPrivateBlendDictionary::~ParserPrivateBlendDictionary(ParserPrivateBlendDictionary *this)
{
}

void TGrowableBlocksBuffer::~TGrowableBlocksBuffer(TGrowableBlocksBuffer *this)
{
  *(void *)this = &unk_1F0DD8130;
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
    free(v1);
  }
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0DD8130;
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
    free(v1);
  }
  JUMPOUT(0x1BA9994D0);
}

void TGrowableOffsetsAndStringsBuffer::~TGrowableOffsetsAndStringsBuffer(TGrowableOffsetsAndStringsBuffer *this)
{
  *(void *)this = &unk_1F0DD8130;
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
    free(v1);
  }
}

{
  void *v1;
  uint64_t vars8;

  *(void *)this = &unk_1F0DD8130;
  uint64_t v1 = (void *)*((void *)this + 1);
  if (v1) {
    free(v1);
  }
  JUMPOUT(0x1BA9994D0);
}

uint64_t EexecDecrypt(unsigned __int8 *a1, const unsigned __int8 *a2, uint64_t a3, uint64_t a4, int a5)
{
  if (a5)
  {
    if (2 * a3 >= 1)
    {
      uint64_t v5 = &a2[2 * a3];
      do
      {
        uint64_t v6 = a2 - 1;
        uint64_t v7 = a2 + 1;
        do
        {
          a2 = v7;
          int v8 = *++v6;
          int v9 = kCharType[v8];
          ++v7;
        }
        while ((v9 & 0x10) != 0);
        do
        {
          int v10 = *a2++;
          char v11 = kCharType[v10];
        }
        while ((v11 & 0x10) != 0);
        int v12 = v11 & 0xF | (16 * v9);
        unsigned int v13 = v12 ^ (a4 >> 8);
        a4 = 52845 * (a4 + v12) + 22719;
        *a1++ = v13;
      }
      while (a2 < v5);
    }
  }
  else if (a3 >= 1)
  {
    int v14 = &a2[a3];
    do
    {
      int v15 = *a2++;
      unsigned int v16 = v15 ^ (a4 >> 8);
      a4 = (52845 * (a4 + v15) + 22719);
      *a1++ = v16;
    }
    while (a2 < v14);
  }
  return a4;
}

void TParsingContext::TParsingContext(TParsingContext *this, const TDataReference *a2, uint64_t a3)
{
  *((void *)this + 1) = &unk_1F0DD80B0;
  *((void *)this + 2) = this;
  *((void *)this + 3) = &unk_1F0DD8078;
  *((void *)this + 4) = this;
  *(void *)this = &unk_1F0DD9B98;
  *((void *)this + 5) = &unk_1F0DD4218;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  TDataReference::operator=((TParsingContext *)((char *)this + 40), (uint64_t)a2);
  *((void *)this + 31) = 0;
  *((_DWORD *)this + 18) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((void *)this + 26) = 0;
  *((void *)this + 27) = 0;
  *((void *)this + 28) = 0;
  *((void *)this + 25) = &unk_1F0DD80E8;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 29) = 4096;
  *((void *)this + 30) = &unk_1F0DD80E8;
  *((void *)this + 34) = 4096;
  *((_WORD *)this + 256) = 0;
  *((unsigned char *)this + 514) = 0;
  *((void *)this + 67) = 0;
  *((void *)this + 68) = 0;
  *((void *)this + 65) = &unk_1F0DD80E8;
  *((void *)this + 66) = 0;
  *((void *)this + 69) = 64;
  *((void *)this + 70) = -1;
  *((void *)this + 71) = -1;
  *((void *)this + 72) = -1;
  *((_DWORD *)this + 146) = -1;
  *((void *)this + 74) = &unk_1F0DD8130;
  *((void *)this + 75) = malloc_type_calloc(8uLL, 1uLL, 0x165F8858uLL);
  *((_OWORD *)this + 38) = xmmword_1B53FFAF0;
  *((void *)this + 78) = a3;
  *((void *)this + 79) = 0;
  *((void *)this + 80) = &unk_1F0DD8130;
  *((void *)this + 81) = 0;
  *((void *)this + 83) = 0;
  *((void *)this + 82) = 0;
  operator new[]();
}

void sub_1B5310570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  uint64_t v20 = v12;
  *long long v19 = v20;
  if (*v14) {
    free(*v14);
  }
  v10[74] = v13;
  v22 = (void *)v10[75];
  if (v22) {
    free(v22);
  }
  *long long v18 = &unk_1F0DD8130;
  long long v23 = *(void **)(v16 + 280);
  if (v23) {
    free(v23);
  }
  *long long v17 = &unk_1F0DD8130;
  if (*(void *)v16) {
    free(*(void **)v16);
  }
  *a10 = &unk_1F0DD8130;
  if (*v15) {
    free(*v15);
  }
  TInputBufferRef::~TInputBufferRef((TInputBufferRef *)(v16 - 168));
  TDataReference::~TDataReference(v11);
  *int v10 = &unk_1F0DD9878;
  _Unwind_Resume(a1);
}

void TInputBufferRef::~TInputBufferRef(TInputBufferRef *this)
{
  int v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
}

void TParsingContext::HexConvert(TParsingContext *this)
{
  v3 = (unsigned __int8 *)*((void *)this + 11);
  unint64_t v2 = *((void *)this + 12);
  unint64_t v4 = v2 - (void)v3;
  *((void *)this + 27) = (int)v2 - (int)v3;
  if (*((void *)this + 28) >= (unint64_t)((int)v2 - (int)v3))
  {
    int v9 = (unsigned char *)*((void *)this + 26);
  }
  else
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 25) + 48))((char *)this + 200);
    uint64_t v7 = *((void *)this + 25);
    uint64_t v6 = *((void *)this + 26);
    if (v6) {
      uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 40))((char *)this + 200, v6, v5);
    }
    else {
      uint64_t v8 = (*(uint64_t (**)(char *, uint64_t))(v7 + 16))((char *)this + 200, v5);
    }
    int v9 = (unsigned char *)v8;
    *((void *)this + 26) = v8;
    if (!v8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DD4440;
      int v33 = 2;
      goto LABEL_39;
    }
    *((void *)this + 28) = v5;
  }
  int v10 = *((_DWORD *)this + 28);
  if ((unint64_t)v3 < v2)
  {
    int v34 = v2;
    char v11 = (void **)((char *)this + 160);
    uint64_t v12 = &v3[v4];
    uint64_t v13 = v9;
    int v14 = v3;
    while (1)
    {
      int v15 = *v14++;
      char v16 = kCharType[v15];
      if ((v16 & 0x10) != 0)
      {
        int v18 = ~v9 + v13;
        uint64_t v20 = (char *)*((void *)this + 21);
        unint64_t v19 = *((void *)this + 22);
        if ((unint64_t)v20 >= v19)
        {
          v22 = (char *)*v11;
          uint64_t v23 = (v20 - (unsigned char *)*v11) >> 2;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62) {
            std::vector<unsigned int>::__throw_length_error[abi:fe180100]();
          }
          uint64_t v25 = v19 - (void)v22;
          if (v25 >> 1 > v24) {
            unint64_t v24 = v25 >> 1;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)this + 176, v26);
            v22 = (char *)*((void *)this + 20);
            uint64_t v20 = (char *)*((void *)this + 21);
          }
          else
          {
            uint64_t v27 = 0;
          }
          long long v28 = (int *)&v27[4 * v23];
          *long long v28 = v18;
          unint64_t v21 = v28 + 1;
          while (v20 != v22)
          {
            int v29 = *((_DWORD *)v20 - 1);
            v20 -= 4;
            *--long long v28 = v29;
          }
          *((void *)this + 20) = v28;
          *((void *)this + 21) = v21;
          *((void *)this + 22) = &v27[4 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v20 = v18;
          unint64_t v21 = v20 + 4;
        }
        *((void *)this + 21) = v21;
      }
      else
      {
        if ((v16 & 0x80) == 0)
        {
          uint64_t v30 = &v3[-(v10 >= 0)];
          if ((unint64_t)v30 >= *((void *)this + 11))
          {
            int v31 = v34 - v30;
            memmove(v13, v30, v34 - (int)v30);
            *((void *)this + 13) = &v13[v31];
            goto LABEL_37;
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &unk_1F0DD4440;
          int v33 = 4;
LABEL_39:
          exception[2] = v33;
        }
        int v17 = v16 & 0xF;
        if (v10 < 0)
        {
          int v10 = 16 * v17;
        }
        else
        {
          *v13++ = v17 | v10;
          int v10 = -1;
        }
      }
      v3 = v14;
      if (v14 == v12) {
        goto LABEL_37;
      }
    }
  }
  uint64_t v13 = v9;
LABEL_37:
  *((_DWORD *)this + 28) = v10;
  *((void *)this + 11) = v9;
  *((void *)this + 12) = v13;
  *((void *)this + 23) = v9;
  *((_DWORD *)this + 49) += v9 - v13;
}

void TParsingContext::ParseError(TParsingContext *this)
{
  int v1 = (int)this;
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &unk_1F0DD4440;
  exception[2] = v1;
}

uint64_t TParsingContext::DoCIDProtect(TParsingContext *this)
{
  unint64_t v2 = *((void *)this + 11);
  unint64_t v3 = *((void *)this + 12);
  unint64_t v4 = v2 + 1;
  *((void *)this + 11) = v2 + 1;
  if (v2 >= v3)
  {
    TParsingContext::FillBuf(this);
    unint64_t v4 = *((void *)this + 11);
  }
  uint64_t result = (*(uint64_t (**)(TParsingContext *, uint64_t, unint64_t))(*(void *)this + 504))(this, 22, v4);
  if (result) {
    *((void *)this + 11) += 22;
  }
  return result;
}

uint64_t TParsingContext::DoFontProtect(TParsingContext *this)
{
  unint64_t v2 = *((void *)this + 11);
  unint64_t v3 = *((void *)this + 12);
  unint64_t v4 = v2 + 1;
  *((void *)this + 11) = v2 + 1;
  if (v2 >= v3)
  {
    TParsingContext::FillBuf(this);
    unint64_t v4 = *((void *)this + 11);
  }
  uint64_t result = (*(uint64_t (**)(TParsingContext *, uint64_t, unint64_t))(*(void *)this + 504))(this, 10, v4);
  if (result) {
    *((void *)this + 11) += 10;
  }
  return result;
}

uint64_t TParsingContext::SkipBinaryString(const char **this)
{
  int Integer = TParsingContext::GetInteger(this);
  for (uint64_t result = TParsingContext::GetToken((TParsingContext *)this); Integer; --Integer)
  {
    unint64_t v4 = this[11];
    uint64_t v5 = this[12];
    this[11] = v4 + 1;
    if (v4 >= v5) {
      uint64_t result = TParsingContext::FillBuf((TParsingContext *)this);
    }
  }
  return result;
}

void MParserProtocols::~MParserProtocols(MParserProtocols *this)
{
  *(void *)this = &unk_1F0DD9878;
}

{
  *(void *)this = &unk_1F0DD9878;
  JUMPOUT(0x1BA9994D0);
}

void TEncodingProtocol::~TEncodingProtocol(TEncodingProtocol *this)
{
}

void TAccentEncodingProtocol::~TAccentEncodingProtocol(TAccentEncodingProtocol *this)
{
}

uint64_t TAccentEncodingProtocol::UseStandard(TAccentEncodingProtocol *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 48))();
}

uint64_t TAccentEncodingProtocol::UseSpecial(TAccentEncodingProtocol *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 56))();
}

uint64_t TAccentEncodingProtocol::Special(TAccentEncodingProtocol *this, uint64_t a2, const char *a3)
{
  return (*(uint64_t (**)(void, uint64_t, const char *))(**((void **)this + 1) + 64))(*((void *)this + 1), a2, a3);
}

uint64_t TParsingContext::GetCDevProc(const char **this)
{
  int Token = TParsingContext::GetToken((TParsingContext *)this);
  if (Token == 15)
  {
    uint64_t result = strcmp(this[31], "null");
    if (!result) {
      return result;
    }
    goto LABEL_8;
  }
  if (Token == 5)
  {
    TParsingContext::SkipTo((TParsingContext *)this, 6);
    return 0xFFFFFFFFLL;
  }
  if (Token != 2) {
LABEL_8:
  }
    TParsingContext::ParseError((TParsingContext *)4);
  if (!strcmp(this[31], "StandardCDevProc")) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t MParserProtocols::GetBytes(MParserProtocols *this, unint64_t *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t MParserProtocols::UseSpecialEncoding(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SpecialEncoding(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::UseStandardAccentEncoding(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UseSpecialAccentEncoding(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SpecialAccentEncoding(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::StartEexecSection(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FontName(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Notice(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FullName(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FamilyName(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Weight(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Version(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::ItalicAngle(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FixedPitch(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UnderlinePosition(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UnderlineThickness(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::Copyright(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FSType(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::AllocCharStrings(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CharString(MParserProtocols *this, unsigned int a2, unsigned int a3, unsigned int a4, const char *a5, const char *a6)
{
  return 1;
}

uint64_t MParserProtocols::ShareCharStrings(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::AllocSubroutines(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::Subroutine()
{
  return 1;
}

uint64_t MParserProtocols::ShareSubroutines(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::WeightVector(MParserProtocols *this, int *a2)
{
  return 1;
}

uint64_t MParserProtocols::ResizeFontDesc()
{
  return 1;
}

uint64_t MParserProtocols::BlendNumberDesigns(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BlendNumberAxes(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BlendAxisType(MParserProtocols *this, unsigned int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::BlendDesignMapping(MParserProtocols *this, unsigned int a2, int a3, int *a4, int *a5)
{
  return 1;
}

uint64_t MParserProtocols::BlendDesignPositions(MParserProtocols *this, int a2, int *a3)
{
  return 1;
}

uint64_t MParserProtocols::BlendUnderlinePosition(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BlendUnderlineThickness(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BlendItalicAngle(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UseNamedEncoding(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::WritingMode(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CDevProc(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::OriginalFont(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FMapType(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::EscChar(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SubsVector(MParserProtocols *this, int a2, const unsigned __int8 *a3)
{
  return 1;
}

uint64_t MParserProtocols::AllocFDepVector(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FDepVector(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::AllocPGFArray(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::PGFArray(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::CharOffsets(MParserProtocols *this, int a2, const unsigned __int8 *a3)
{
  return 1;
}

uint64_t MParserProtocols::UseNamedCharStrings(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::PrefEnc(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::NumericEncoding(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::MDID(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::AllocMDFV(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::MDFVBegin()
{
  return 1;
}

uint64_t MParserProtocols::MDFVFont(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::MDFVEnd(MParserProtocols *this, int a2, TFractMatrix *a3)
{
  return 1;
}

uint64_t MParserProtocols::FDepVector_MDFF(MParserProtocols *this, int a2, const char *a3, BOOL a4, int a5, int a6, const unsigned __int8 *a7)
{
  return 1;
}

uint64_t MParserProtocols::PGFontID(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::RunInt(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::FontProtection(MParserProtocols *this, int a2, const unsigned __int8 *a3)
{
  return 1;
}

uint64_t MParserProtocols::GDBytes(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FDBytes(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CIDCount(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CIDMapOffset(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CIDFontVersion(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::Registry(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Ordering(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::Supplement(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::FDArrayFontName(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::CIDFDArray(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::BeginCIDFontDict()
{
  return 0;
}

uint64_t MParserProtocols::EndCIDFontDict(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::CIDStartData(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::UIDBase(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::XUID(MParserProtocols *this, int a2, int *a3)
{
  return 1;
}

uint64_t MParserProtocols::SDBytes(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SubrMapOffset(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::SubrCount(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::cidrange(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::cidchar(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::notdefchar(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::notdefrange(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::codespacerange(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::rearrangedfont(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::componentfont(MParserProtocols *this, int a2, const char *a3)
{
  return 1;
}

uint64_t MParserProtocols::endcomponentfont(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::usematrix()
{
  return 1;
}

uint64_t MParserProtocols::usefont(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::bfrange_code(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::bfrange_name(MParserProtocols *this, unsigned int a2, int a3, unsigned int a4, int a5, int a6, const char *a7)
{
  return 1;
}

uint64_t MParserProtocols::bfchar_code(MParserProtocols *this)
{
  return 1;
}

uint64_t MParserProtocols::bfchar_name(MParserProtocols *this, unsigned int a2, int a3, const char *a4)
{
  return 1;
}

uint64_t MParserProtocols::UseCMap(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t MParserProtocols::HostSupport(MParserProtocols *this, const char *a2)
{
  return 1;
}

uint64_t TParsingContext::GetStandardEncodeName(TParsingContext *this)
{
  int v1 = (int)this;
  uint64_t v2 = TParsingContext::EncodeTable(void)::gEncodeTableP;
  unint64_t v3 = (char *)TParsingContext::EncodeTable(void)::gEncodeTableP;
  if (!TParsingContext::EncodeTable(void)::gEncodeTableP)
  {
    unint64_t v3 = TParsingContext::BuildMacEncTable(0);
    uint64_t v2 = (uint64_t)v3;
    TParsingContext::EncodeTable(void)::gEncodeTableP = (uint64_t)v3;
    if (!v3)
    {
      unint64_t v3 = TParsingContext::BuildMacEncTable(0);
      uint64_t v2 = 0;
      TParsingContext::EncodeTable(void)::gEncodeTableP = (uint64_t)v3;
    }
  }
  int v4 = *((_DWORD *)v3 + 2);
  if (!v4) {
    return 0;
  }
  for (uint64_t i = (unsigned __int16 *)(v2 + 24); *((unsigned __int8 *)i + 3) != v1; i += 3)
  {
    if (!--v4) {
      return 0;
    }
  }
  if (!v3)
  {
    unint64_t v3 = TParsingContext::BuildMacEncTable(0);
    TParsingContext::EncodeTable(void)::gEncodeTableP = (uint64_t)v3;
  }
  return *(void *)v3 + *i;
}

uint64_t FPGetStandardEncodingName(TParsingContext *a1)
{
  if (a1) {
    return TParsingContext::GetStandardEncodeName(a1);
  }
  else {
    return 0;
  }
}

uint64_t TParsingContext::ShareCharStrings(TParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TParsingContext::ShareSubroutines(TParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TParsingContext::GetType1DataOffset(TParsingContext *this)
{
  return 0;
}

uint64_t TParsingContext::CharStringIndex(uint64_t this, int a2, int a3, int a4, const char *a5)
{
  uint64_t v5 = (_DWORD *)(*(void *)(this + 632) + 8 * a2);
  *uint64_t v5 = a3;
  v5[1] = a4;
  return this;
}

BOOL TParsingContext::Subroutine(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  if ((a2 & 0x80000000) != 0 || *(unsigned __int16 *)(a1 + 704) <= a2) {
    return 0;
  }
  int v4 = *(__int16 *)(*(void *)(a1 + 688) + 56);
  int v5 = v4 & ~(v4 >> 31);
  if (a4 - v5 >= 1) {
    operator new[]();
  }
  return a4 == v5;
}

void sub_1B5311664(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,void *>>>::operator()[abi:fe180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t TParsingContext::FixedPitch(TParsingContext *this, int a2)
{
  if (a2) {
    *((unsigned char *)this + 720) = 1;
  }
  return 1;
}

uint64_t TParsingContext::AllocCharStrings(TParsingContext *this, unsigned int a2)
{
  if (a2 - 1 > 0x3FFFFFFD) {
    return 0;
  }
  unint64_t v4 = 8 * a2 + 512;
  *((void *)this + 76) = v4;
  if (*((void *)this + 77) >= v4)
  {
    uint64_t v8 = *((void *)this + 75);
  }
  else
  {
    uint64_t v5 = (*(uint64_t (**)(char *))(*((void *)this + 74) + 48))((char *)this + 592);
    uint64_t v6 = *((void *)this + 75);
    uint64_t v7 = *((void *)this + 74);
    if (v6) {
      uint64_t v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 40))((char *)this + 592, v6, v5);
    }
    else {
      uint64_t v8 = (*(uint64_t (**)(char *, uint64_t))(v7 + 16))((char *)this + 592, v5);
    }
    *((void *)this + 75) = v8;
    if (!v8)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DD4440;
      exception[2] = 2;
    }
    *((void *)this + 77) = v5;
  }
  *((void *)this + 79) = v8 + 512;
  *(void *)(v8 + 512) = 0;
  *((_DWORD *)this + 175) = a2;
  return 1;
}

uint64_t TParsingContext::FSType(TParsingContext *this, int a2)
{
  *((_DWORD *)this + 184) |= a2 << 16;
  return 1;
}

uint64_t TType1ParsingContext::AllocCharStrings(TType1ParsingContext *this, unsigned int a2)
{
  uint64_t result = TParsingContext::AllocCharStrings(this, a2);
  if (result) {
    operator new[]();
  }
  return result;
}

void sub_1B5311C90(_Unwind_Exception *a1)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::~__hash_table(v1);
  MEMORY[0x1BA9994C0](v3, MEMORY[0x1E4FBA2D0]);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<TType1ParsingContext::NameToUnicodeMap const>::reset[abi:fe180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::~__hash_table(result);
    JUMPOUT(0x1BA9994D0);
  }
  return result;
}

uint64_t TType1ParsingContext::CharString(TType1ParsingContext *this, int a2, int a3, unsigned int a4, char *a5, const char *a6, unsigned __int16 a7)
{
  int v10 = *((unsigned __int8 *)this + 514);
  uint64_t result = TParsingContext::CharString(this, a2, a3, a4, a5, a6, a7);
  if (result)
  {
    unsigned int v12 = *((unsigned __int16 *)this + 256);
    if (!v10 && *((unsigned char *)this + 514)) {
      unsigned int v12 = 0;
    }
    uint64_t result = TParsingContext::DoFontInfoString(this, a5, (int *)(*((void *)this + 94) + 4 * v12));
    if (result)
    {
      uint64_t v13 = *((void *)this + 95);
      if (v13) {
        *(_DWORD *)(v13 + 4 * v12) = a4;
      }
      unsigned int v17 = 0xFFFF;
      int v14 = (void *)*((void *)this + 103);
      if (v14)
      {
        int v18 = a5;
        int v15 = std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::find<char const*>(v14, (const char **)&v18);
        if (v15)
        {
          unsigned int v16 = *((_DWORD *)v15 + 6);
          if (v16 > 0xFF)
          {
            if (GetLatinEncodingDictionary(void)::once == -1) {
              goto LABEL_14;
            }
            goto LABEL_19;
          }
        }
        else
        {
          unsigned int v16 = 0;
        }
        unsigned int v17 = gMacCustomEncode[v16];
        goto LABEL_17;
      }
      if (GetLatinEncodingDictionary(void)::once == -1)
      {
LABEL_14:
        TSortedStringTable::GetValue((const char ***)GetLatinEncodingDictionary(void)::gLatinEncodingDict, a5, &v17);
LABEL_17:
        *(_DWORD *)(*((void *)this + 93) + 4 * v12) = v17;
        return 1;
      }
LABEL_19:
      dispatch_once(&GetLatinEncodingDictionary(void)::once, &__block_literal_global_1);
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t TType1ParsingContext::GDBytes(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::FDBytes(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDCount(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDMapOffset(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDFontVersion(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::Registry(TType1ParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TType1ParsingContext::Ordering(TType1ParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TType1ParsingContext::Supplement(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::FDArrayFontName(TType1ParsingContext *this, const char *a2)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDFDArray(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::BeginCIDFontDict()
{
  return 0;
}

uint64_t TType1ParsingContext::EndCIDFontDict(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::CIDStartData(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::UIDBase(TType1ParsingContext *this)
{
  return 0;
}

uint64_t TType1ParsingContext::XUID(TType1ParsingContext *this, int a2, int *a3)
{
  return 0;
}

uint64_t TType1ParsingContext::GetBytes(TType1ParsingContext *this, unint64_t *a2)
{
  unint64_t v2 = *((void *)this + 8) - *((void *)this + 7);
  *a2 = v2;
  int v3 = *((_DWORD *)this + 18);
  if (v3 >= (int)v2)
  {
    uint64_t v4 = 0;
    *a2 = 0;
  }
  else
  {
    uint64_t v4 = *((void *)this + 6);
    if (v4)
    {
      uint64_t v4 = *(void *)(v4 + 8);
      if (v4) {
        v4 += *((void *)this + 7);
      }
    }
    *((_DWORD *)this + 18) = v3 + v2;
  }
  return v4;
}

void ___ZL21InitParserDictionarysv_block_invoke()
{
}

void std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      unsigned int v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  uint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  uint64_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    int v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *uint64_t v8 = *v14;
          void *v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          int v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        uint64_t v8 = v14;
        int v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

uint64_t std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::vector<int,TInlineBufferAllocator<int,3ul>>::__assign_with_size[abi:fe180100]<int *,int *>(void *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = (char *)*result;
  if (a4 > (uint64_t)(result[2] - *result) >> 2)
  {
    std::vector<int,TInlineBufferAllocator<int,3ul>>::__vdeallocate((uint64_t)result);
    if (a4 >> 62) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v9 = v7[2] - *v7;
    uint64_t v10 = v9 >> 1;
    if (v9 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<int,TInlineBufferAllocator<int,3ul>>::__vallocate[abi:fe180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint8x8_t v12 = (char **)(v7 + 1);
    uint64_t v8 = v13;
LABEL_14:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v8;
      unint64_t v19 = __src;
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint8x8_t v12 = (char **)(result + 1);
  int v14 = (unsigned char *)result[1];
  unint64_t v15 = (v14 - v8) >> 2;
  if (v15 >= a4) {
    goto LABEL_14;
  }
  unsigned int v16 = &__src[4 * v15];
  if (v14 != v8)
  {
    uint64_t result = memmove((void *)*result, __src, v14 - v8);
    uint64_t v8 = *v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v8;
    unint64_t v19 = v16;
LABEL_16:
    uint64_t result = memmove(v18, v19, v17);
  }
LABEL_17:
  *uint8x8_t v12 = &v8[v17];
  return result;
}

void std::vector<int,TInlineBufferAllocator<int,3ul>>::__vdeallocate(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    if (a1 + 24 <= (unint64_t)v2 && a1 + 36 > (unint64_t)v2)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 40)) {
        *(void *)(a1 + 40) = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
}

char *std::vector<int,TInlineBufferAllocator<int,3ul>>::__vallocate[abi:fe180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  uint64_t result = (char *)TInlineBufferAllocator<int,3ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

void *TInlineBufferAllocator<int,3ul>::allocate(uint64_t a1, unint64_t a2)
{
  uint64_t result = *(void **)(a1 + 16);
  unint64_t v4 = (unint64_t)result + 4 * a2;
  if (v4 <= a1 + 12)
  {
    *(void *)(a1 + 16) = v4;
  }
  else
  {
    if (a2 >> 62) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    return operator new(4 * a2);
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      int v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        MEMORY[0x1BA9994A0](v4, 0x1000C8077774924);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::pair<std::unique_ptr<unsigned char const[]>,int>>,void *>>>::operator()[abi:fe180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = __p[3];
    __p[3] = 0;
    if (v3) {
      MEMORY[0x1BA9994A0](v3, 0x1000C8077774924);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::find<char const*>(void *a1, const char **a2)
{
  strlen(*a2);
  unint64_t v4 = CFStringHashCString();
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint8x8_t v12 = *a2;
    do
    {
      unint64_t v13 = (unint64_t)v11[1];
      if (v6 == v13)
      {
        if (!strcmp((const char *)v11[2], v12)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void THandlerStreamingBuffers::~THandlerStreamingBuffers(void **this)
{
  *this = &unk_1F0DFFF00;
  THandlerStreamingBuffers::FlushBuffer((THandlerStreamingBuffers *)this);
  free(this[4]);
}

{
  uint64_t vars8;

  THandlerStreamingBuffers::~THandlerStreamingBuffers(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t THandlerStreamingBuffers::FlushBuffer(THandlerStreamingBuffers *this)
{
  uint64_t v1 = (uint64_t (*)(void))*((void *)this + 6);
  if (!v1) {
    return 0;
  }
  uint64_t result = *((void *)this + 7);
  if (result)
  {
    unint64_t v4 = *((void *)this + 4);
    if (v4
      && (unint64_t v5 = *((void *)this + 1), v5 >= v4)
      && (unint64_t v6 = *((void *)this + 5), v5 <= v4 + v6)
      && (uint64_t v7 = *((void *)this + 2), v7 - 1 < v6)
      && v7 == v5 - v4)
    {
      int v8 = v1();
      *((void *)this + 1) = *((void *)this + 4);
      *((void *)this + 2) = 0;
      if (!v8)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DD4440;
        exception[2] = 4;
      }
    }
    else
    {
      *((void *)this + 1) = v4;
      *((void *)this + 2) = 0;
    }
    return 1;
  }
  return result;
}

uint64_t THandlerStreamingBuffers::InitFlushBufferCallback(uint64_t this, unsigned __int8 (*a2)(void *, unsigned int, void *), void *a3)
{
  *(void *)(this + 48) = a2;
  *(void *)(this + 56) = a3;
  return this;
}

uint64_t THandlerStreamingBuffers::ResetBufferForReUse(THandlerStreamingBuffers *this)
{
  uint64_t result = THandlerStreamingBuffers::FlushBuffer(this);
  *((void *)this + 3) = 0;
  return result;
}

uint64_t THandlerStreamingBuffers::WriteBytes(THandlerStreamingBuffers *this, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v3 = *((void *)this + 4);
  if (!v3) {
    return 0;
  }
  unint64_t v5 = *((void *)this + 1);
  unint64_t v6 = v5 - v3;
  if (v5 < v3) {
    return 0;
  }
  unint64_t v7 = *((void *)this + 5);
  if (v5 > v3 + v7) {
    return 0;
  }
  unint64_t v8 = *((void *)this + 2);
  unint64_t v9 = v7 - v8;
  if (v7 < v8) {
    return 0;
  }
  uint64_t result = 0;
  if (a2 && v8 == v6)
  {
    unint64_t v13 = a2;
    do
    {
      if (v9 >= v13) {
        unint64_t v14 = v13;
      }
      else {
        unint64_t v14 = v9;
      }
      (*(void (**)(THandlerStreamingBuffers *, unint64_t, unsigned __int8 *, void))(*(void *)this + 32))(this, v14, a3, *((void *)this + 1));
      unint64_t v15 = *((void *)this + 2) + v14;
      *((void *)this + 1) += v14;
      *((void *)this + 2) = v15;
      if (v15 >= *((void *)this + 5))
      {
        v13 -= v14;
        if (!(*(unsigned int (**)(THandlerStreamingBuffers *, unint64_t))(*(void *)this + 24))(this, v13))return 0; {
        unint64_t v9 = *((void *)this + 5) - *((void *)this + 2);
        }
      }
      else
      {
        v9 -= v14;
        v13 -= v14;
      }
      a3 += v14;
    }
    while (v13);
    *((void *)this + 3) += a2;
    return *((void *)this + 1);
  }
  return result;
}

void *THandlerStreamingBuffers::BlockMove(THandlerStreamingBuffers *this, size_t __len, unsigned __int8 *__src, unsigned __int8 *__dst)
{
  return memmove(__dst, __src, __len);
}

const char *THandlerStreamingBuffers::GetZString(THandlerStreamingBuffers *this, uint64_t *a2, unint64_t *a3)
{
  int v3 = (int)this;
  int v4 = (int)this;
  uint64_t result = "%!FontType1-1.0: ^s ^i.^i\n";
  uint64_t v6 = 26;
  switch(v4)
  {
    case 0:
      break;
    case 1:
      uint64_t result = "%!PS-TrueTypeFont-^d-^d-2\n";
      goto LABEL_61;
    case 2:
      uint64_t result = "14 dict begin\n/FontName /^s def\n";
      uint64_t v6 = 32;
      break;
    case 3:
      uint64_t result = "/PaintType 0 def\n";
      goto LABEL_20;
    case 4:
      uint64_t result = "/FontType 3 def\n";
      goto LABEL_54;
    case 5:
      uint64_t result = "/FontType 42 def\n";
      goto LABEL_20;
    case 6:
      uint64_t result = "/FontType 1 def\n";
      goto LABEL_54;
    case 7:
      uint64_t result = "/Encoding ";
      goto LABEL_85;
    case 8:
    case 106:
      uint64_t result = "readonly def\n";
      uint64_t v6 = 13;
      break;
    case 9:
    case 102:
      uint64_t result = "/FontMatrix matrix def\n";
      goto LABEL_56;
    case 10:
      uint64_t result = "/FontBBox[^i ^i 1 index div ^i 2 index div ^i 3 index div ^i 5 -1 roll div]cvx def\n";
      uint64_t v6 = 83;
      break;
    case 11:
      uint64_t result = "/FontMatrix [ ^f 0 0 ^f 0 0 ] readonly def\n";
      uint64_t v6 = 43;
      break;
    case 12:
      uint64_t result = "/FontBBox {^i ^i ^i ^i} readonly def\n";
      uint64_t v6 = 37;
      break;
    case 13:
      uint64_t result = "/UniqueID ^i def\n";
LABEL_20:
      uint64_t v6 = 17;
      break;
    case 14:
      uint64_t result = "/sfnts [<\n";
      goto LABEL_85;
    case 15:
      uint64_t result = "\n00><\n";
      goto LABEL_83;
    case 16:
      uint64_t result = "\n00>] def\n";
LABEL_85:
      uint64_t v6 = 10;
      break;
    case 17:
    case 109:
      uint64_t result = "/CharStrings ^i dict dup begin\n";
      goto LABEL_65;
    case 18:
      uint64_t result = "/^s ^i def\n";
      uint64_t v6 = 11;
      break;
    case 19:
      uint64_t result = " end readonly def\n";
      goto LABEL_58;
    case 20:
      uint64_t result = "/TrueState 271 string def TrueDict begin sfnts save 72 0 matrix defaultmatrix dtransform dup mul exch dup"
               " mul add sqrt cvi 0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt cvi 3 -1 roll restor"
               "e TrueState initer end\n";
      uint64_t v6 = 233;
      break;
    case 21:
      uint64_t result = "/BuildChar{exch begin Encoding 1 index get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse g"
               "et dup xcheck{currentdict systemdict begin begin exec end end}{exch pop TrueDict begin /bander load cvlit"
               " exch TrueState render end}ifelse end} bind def\n";
      uint64_t v6 = 258;
      break;
    case 22:
      uint64_t result = "currentdict dup/FontName get exch definefont pop end\n";
      uint64_t v6 = 53;
      break;
    case 23:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
LABEL_8:
      uint64_t v6 = 0;
      uint64_t result = 0;
      break;
    case 24:
      uint64_t result = "256 array 0 1 255 {1 index exch/.notdef put} for\n";
      uint64_t v6 = 49;
      break;
    case 25:
    case 105:
      uint64_t result = "dup ^i /^s put\n";
      uint64_t v6 = 15;
      break;
    case 26:
      uint64_t result = "currentfile eexec\n";
      goto LABEL_58;
    case 27:
      uint64_t result = "0000000000000000000000000000000000000000000000000000000000000000\n";
      uint64_t v6 = 65;
      break;
    case 28:
      uint64_t result = "cleartomark\n";
      goto LABEL_69;
    case 29:
      uint64_t result = "dup/Private 13 dict dup begin/RD{string currentfile exch readstring pop}executeonly def/ND{noaccess def}e"
               "xecuteonly def/NP{noaccess put}executeonly def/BlueValues[]def/MinFeature{16 16}def/password 5839 def/Oth"
               "erSubrs[{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{}{16384 div 4 1 roll 16384 div 4 1 roll 16384 div 4 1 roll"
               " 16384 div 4 1 roll 0 0 matrix astore matrix currentmatrix exch concat}executeonly{setmatrix}executeonly]noaccess def\n";
      uint64_t v6 = 433;
      break;
    case 30:
      uint64_t result = "/Subrs ";
      goto LABEL_36;
    case 31:
      uint64_t result = " array\n";
LABEL_36:
      uint64_t v6 = 7;
      break;
    case 32:
      uint64_t result = "dup ";
      goto LABEL_41;
    case 33:
      uint64_t result = " RD ";
      goto LABEL_41;
    case 34:
      uint64_t result = " NP\n";
      goto LABEL_41;
    case 35:
      uint64_t result = " ND\n";
LABEL_41:
      uint64_t v6 = 4;
      break;
    case 36:
      uint64_t result = "2 index/CharStrings ";
      uint64_t v6 = 20;
      break;
    case 37:
      uint64_t result = " dict dup begin\n";
      goto LABEL_54;
    case 38:
      uint64_t result = "/.notdef 8 RD ";
      uint64_t v6 = 14;
      break;
    case 39:
      uint64_t result = "end end readonly put\nnoaccess put\ndup/FontName get exch definefont pop\nmark currentfile closefile\n";
      uint64_t v6 = 98;
      break;
    case 40:
      uint64_t result = "systemdict/product 2 copy known{get dup(LaserWriter IIf)eq exch(LaserWriter IIg)eq or version(2010.113)eq"
               " and not}{pop pop true}ifelse{/UniqueID ^i def}if\n";
      uint64_t v6 = 155;
      break;
    case 41:
      uint64_t result = "userdict/TTMakeVariationFont known userdict begin/TTMakeVariationFontDefined exch def end\n"
               "TTMakeVariationFontDefined{save}if userdict begin/TTMakeVariationFont{exch dup length 1 add dict exch{exc"
               "h dup dup/FID ne exch/UniqueID ne and{2 index 4 1 roll exch put}{pop pop}ifelse} forall begin/Variations "
               "exch def currentdict end/GXVariationfont exch definefont} bind def end TTMakeVariationFontDefined{restore}if\n";
      uint64_t v6 = 409;
      break;
    case 42:
      uint64_t result = "<";
      goto LABEL_51;
    case 43:
      uint64_t result = "00> TTMakeVariationFont\n";
      goto LABEL_71;
    case 44:
      uint64_t result = "(";
LABEL_51:
      uint64_t v6 = 1;
      break;
    case 45:
      uint64_t result = (const char *)&unk_1B53FFDE5;
      goto LABEL_56;
    case 46:
      uint64_t result = "currentdict end\n";
LABEL_54:
      uint64_t v6 = 16;
      break;
    case 47:
      uint64_t result = "%!FontType1-1.0: ^s ^d\n";
LABEL_56:
      uint64_t v6 = 23;
      break;
    case 100:
      uint64_t result = "14 dict dup begin\n";
LABEL_58:
      uint64_t v6 = 18;
      break;
    case 101:
      uint64_t result = "/FontType 3 def\n/PaintType 0 def\n/StrokeWidth 0 def\n";
      uint64_t v6 = 52;
      break;
    case 103:
      uint64_t result = "/FontBBox[^d ^d ^d ^d]def\n";
LABEL_61:
      uint64_t v6 = 26;
      break;
    case 104:
      uint64_t result = "/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for\n";
LABEL_87:
      uint64_t v6 = 59;
      break;
    case 107:
      uint64_t result = "/BuildChar{exch begin Encoding exch get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse get "
               "dup xcheck{currentdict systemdict begin begin exec end end}{dup 0 get 0 2 index 1 4 getinterval aload pop"
               " setcachedevice dup 6 get exch dup 5 get 3 -1 roll true yopmatrix dup 4 6 index 7 get put dup 5 6 index 8"
               " get put 5 -1 roll 9 1 getinterval cvx imagemask}ifelse end}bind def\n";
      uint64_t v6 = 384;
      break;
    case 108:
      uint64_t result = "/yopmatrix [^i 0 0 ^i 0 0] def\n";
LABEL_65:
      uint64_t v6 = 31;
      break;
    case 110:
      uint64_t result = "/^s [^d ^d ^d ^d ^d ^i ^i ^d ^d <";
      goto LABEL_81;
    case 111:
      uint64_t result = ">]def\n";
      goto LABEL_83;
    case 112:
      uint64_t result = "end def end\n";
LABEL_69:
      uint64_t v6 = 12;
      break;
    case 113:
      uint64_t result = "/^s exch definefont pop\n";
LABEL_71:
      uint64_t v6 = 24;
      break;
    case 114:
      uint64_t result = "/yopmatrix[^i 0 ^i .25 mul ^i 0 0]def\n";
      uint64_t v6 = 38;
      break;
    case 115:
      uint64_t result = "/FontMatrix[1 0 .25 1 0 0]def\n";
      uint64_t v6 = 30;
      break;
    case 116:
      uint64_t result = "/GetShort {2 copy get 256 mul\n"
               "3 1 roll\n"
               "1 add\n"
               "get add\n"
               "} bind def\n"
               "/SignedByte {dup 127 gt {256 sub\n"
               "} if\n"
               "} bind def\n"
               "/LocalVariables 3 dict dup begin/theString null def\n"
               "/strInd 0 def\n"
               "/doingY false def\n"
               "end def/DrawGlyph {exec\n"
               "LocalVariables begin\n"
               "/theString exch def \n"
               "/strInd 0 def\n"
               "theString strInd GetShort\n"
               "/strInd strInd 2 add def\n";
      uint64_t v6 = 328;
      break;
    case 117:
      uint64_t result = "{theString strInd GetShort\n"
               "/strInd strInd 2 add def\n"
               "dup 0 gt {\n"
               "1 sub 2 mul\n"
               "theString strInd get SignedByte\n"
               "theString strInd 1 add get SignedByte moveto\n"
               "/strInd strInd 2 add def\n"
               "/doingY false def\n"
               "dup strInd add\texch\n"
               "theString strInd 3 -1 roll getinterval\n"
               "{SignedByte\n"
               "doingY {rlineto /doingY false def}\n"
               " {/doingY true def} ifelse \n"
               "} forall\n"
               "closepath \n"
               "/strInd exch def\n"
               "} if\n"
               "} repeat\n"
               "PaintType 2 eq { StrokeWidth\n"
               "setlinewidth stroke\n"
               "} {eofill\n"
               "} ifelse\n"
               "end\n";
      uint64_t v6 = 452;
      break;
    case 118:
      uint64_t result = "} bind def\n"
               "/BuildChar{exch begin Encoding exch get CharStrings dup 2 index known{exch}{exch pop /.notdef}ifelse get\n"
               "dup 0 get\n"
               " 0\n"
               "3 -1 roll\n"
               "dup 1 get exch dup 2 get exch dup 3 get exch dup 4 get exch\n"
               "7 1 roll\n"
               "setcachedevice\n"
               "yopmatrix matrix invertmatrix concat\n"
               "9 get DrawGlyph\n"
               "end}bind def\n";
      uint64_t v6 = 289;
      break;
    case 119:
      uint64_t result = "/sfnts [(";
      uint64_t v6 = 9;
      break;
    case 120:
      uint64_t result = (const char *)&unk_1B5397310;
      uint64_t v6 = 3;
      break;
    case 121:
      uint64_t result = (const char *)&unk_1B53FFDDC;
      uint64_t v6 = 8;
      break;
    case 122:
      uint64_t result = "/^s [^d ^d ^d ^d ^d ^i ^i ^d ^d (";
LABEL_81:
      uint64_t v6 = 33;
      break;
    case 123:
      uint64_t result = ")]def\n";
LABEL_83:
      uint64_t v6 = 6;
      break;
    default:
      switch(v3)
      {
        case 200:
          uint64_t result = "42/FontType resourcestatus{pop pop false}{true}ifelse\n"
                   "%APLsfntBegin\n"
                   "{currentfile 0(%APLsfntEnd\\n)/SubFileDecode filter flushfile}if\n";
          uint64_t v6 = 132;
          break;
        case 201:
          uint64_t result = "%APLsfntEnd\n"
                   "42/FontType resourcestatus{pop pop true}{false}ifelse\n"
                   "{currentfile 0(%APLT1End\\n)/SubFileDecode filter flushfile}if\n";
          uint64_t v6 = 128;
          break;
        case 202:
          uint64_t result = "%APLT1End\n";
          goto LABEL_85;
        case 203:
          uint64_t result = "/FontInfo 1 dict dup begin\n/FSType ^i def\nend readonly def\n";
          goto LABEL_87;
        default:
          goto LABEL_8;
      }
      break;
  }
  *a2 = v6;
  return result;
}

unsigned __int8 *THandlerStreamingBuffers::WriteStringF(THandlerStreamingBuffers *this, THandlerStreamingBuffers *a2, unint64_t *a3, ...)
{
  va_start(va, a3);
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  memset(v27, 170, sizeof(v27));
  va_copy(v19, va);
  uint64_t result = (unsigned __int8 *)THandlerStreamingBuffers::GetZString(a2, &v18, a3);
  uint64_t v5 = v18;
  if (v18)
  {
    do
    {
LABEL_2:
      unint64_t v6 = 0;
      unint64_t v7 = result;
      uint64_t v8 = v5;
      while (result[v6] != 94)
      {
        if (v5 == ++v6)
        {
          if (v6) {
            return (unsigned __int8 *)THandlerStreamingBuffers::WriteBytes(this, v6, result);
          }
          return result;
        }
      }
      if (v6) {
        THandlerStreamingBuffers::WriteBytes(this, v6, result);
      }
      uint64_t v5 = 0;
      uint64_t result = &v7[v6 + 1];
      unint64_t v9 = v8 - v6;
    }
    while (v8 == v6);
    uint64_t v5 = v8 - v6;
    int v26 = -1431655766;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v24 = v10;
    long long v25 = v10;
    long long v22 = v10;
    long long v23 = v10;
    *(_OWORD *)__s = v10;
    long long v21 = v10;
    int v11 = (char)*result;
    if (v11 > 104)
    {
      if (v11 != 105)
      {
        if (v11 != 115) {
          goto LABEL_23;
        }
        unsigned int v16 = (size_t *)v19;
        v19 += 8;
        size_t v14 = *v16;
        va_list v19 = (va_list)(v16 + 2);
        unint64_t v13 = (unsigned __int8 *)v16[1];
LABEL_22:
        THandlerStreamingBuffers::WriteBytes(this, v14, v13);
        uint64_t v5 = v9 - 2;
        goto LABEL_23;
      }
      v19 += 8;
      unint64_t v13 = (unsigned __int8 *)v27;
      int v17 = snprintf_l(v27, 0x10uLL, 0, "%d");
    }
    else
    {
      if (v11 != 100)
      {
        if (v11 == 102)
        {
          uint8x8_t v12 = (double *)v19;
          v19 += 8;
          unint64_t v13 = (unsigned __int8 *)__s;
          snprintf_l(__s, 0x64uLL, 0, "%.15f", *v12);
          size_t v14 = strlen(__s);
          if (v14 >= 4)
          {
            while (1)
            {
              unint64_t v13 = (unsigned __int8 *)__s;
              unint64_t v15 = &__s[v14];
              if (__s[v14 - 1] != 48) {
                break;
              }
              --v14;
              *(v15 - 1) = 0;
              if (v14 <= 3)
              {
                unint64_t v13 = (unsigned __int8 *)__s;
                size_t v14 = 3;
                goto LABEL_22;
              }
            }
          }
          goto LABEL_22;
        }
LABEL_23:
        uint64_t result = &v7[v6 + 2];
        goto LABEL_2;
      }
      v19 += 8;
      unint64_t v13 = (unsigned __int8 *)v27;
      int v17 = snprintf_l(v27, 0x10uLL, 0, "%.4f");
    }
    size_t v14 = v17;
    goto LABEL_22;
  }
  return result;
}

uint64_t THandlerStreamingBuffersEncrypted::ResetBufferForReUse(THandlerStreamingBuffersEncrypted *this)
{
  THandlerStreamingBuffers::FlushBuffer(this);
  *((void *)this + 3) = 0;
  unint64_t v2 = *(uint64_t (**)(THandlerStreamingBuffersEncrypted *))(*(void *)this + 48);
  return v2(this);
}

uint64_t THandlerStreamingBuffersEncrypted::ResetEncryption(uint64_t this)
{
  *(_WORD *)(this + 66) = *(_WORD *)(this + 64);
  return this;
}

uint64_t THandlerStreamingBuffersEncrypted::BlockMove(uint64_t this, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  for (; a2; --a2)
  {
    char v4 = *a3++;
    __int16 v5 = *(_WORD *)(this + 66);
    *(_WORD *)(this + 66) = 22719 - 12691 * (v5 + (v4 ^ HIBYTE(v5)));
    *a4++ = v4 ^ HIBYTE(v5);
  }
  return this;
}

void THandlerStreamBuffer::~THandlerStreamBuffer(void **this)
{
  THandlerStreamingBuffers::~THandlerStreamingBuffers(this);
  JUMPOUT(0x1BA9994D0);
}

void THandlerEExecBuffer::~THandlerEExecBuffer(void **this)
{
  THandlerStreamingBuffers::~THandlerStreamingBuffers(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t THandlerEExecBuffer::WriteNumber(THandlerEExecBuffer *this, int a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(v5, 170, sizeof(v5));
  int v3 = snprintf_l(v5, 0x10uLL, 0, "%d", a2);
  return THandlerStreamingBuffers::WriteBytes(this, v3, (unsigned __int8 *)v5);
}

uint64_t THandlerEExecBuffer::WriteSize(THandlerEExecBuffer *this, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memset(v5, 170, 20);
  int v3 = snprintf_l(v5, 0x14uLL, 0, "%zu", a2);
  return THandlerStreamingBuffers::WriteBytes(this, v3, (unsigned __int8 *)v5);
}

uint64_t THandlerEExecBuffer::WriteGlyphName(THandlerEExecBuffer *this, char *__s)
{
  size_t v4 = strlen(__s);
  unsigned __int8 v7 = 47;
  unsigned __int8 v6 = 32;
  THandlerStreamingBuffers::WriteBytes(this, 1uLL, &v7);
  THandlerStreamingBuffers::WriteBytes(this, v4, (unsigned __int8 *)__s);
  return THandlerStreamingBuffers::WriteBytes(this, 1uLL, &v6);
}

void THandlerCharStringBuffer::~THandlerCharStringBuffer(void **this)
{
  THandlerStreamingBuffers::~THandlerStreamingBuffers(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t THandlerCharStringBuffer::OnBufferFull(THandlerCharStringBuffer *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 56))();
}

uint64_t THandlerCharStringBuffer::ResizeBuffer(THandlerCharStringBuffer *this, uint64_t a2)
{
  size_t v3 = malloc_good_size(*((void *)this + 5) + 32 * a2);
  uint64_t result = (uint64_t)reallocf(*((void **)this + 4), v3);
  *((void *)this + 4) = result;
  if (result)
  {
    *((void *)this + 5) = v3;
    *((void *)this + 1) = result + *((void *)this + 2);
    return 1;
  }
  return result;
}

void THandlerCharStringBuffer::WriteNumbers(THandlerStreamingBuffers *a1, int *a2, unsigned __int8 *a3)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v128 = v3;
  long long v127 = v3;
  v125[1] = 0;
  unint64_t v126 = 0;
  v125[0] = 0;
  v129 = &v127;
  if (!a3)
  {
    __int16 v5 = 0;
    goto LABEL_181;
  }
  size_t v4 = a2;
  v120 = a1;
  __int16 v5 = 0;
  unsigned __int8 v6 = &a2[(void)a3];
  do
  {
    int v7 = *v4;
    if ((*v4 + 107) > 0xD6)
    {
      unsigned __int8 v8 = v7 - 108;
      if ((v7 - 108) > 0x3FF)
      {
        if ((v7 + 1131) > 0x3FF)
        {
          if ((unint64_t)v5 >= v126)
          {
            int64_t v32 = v5 - v125[0];
            int64_t v33 = v5 - v125[0] + 1;
            if (v33 < 0) {
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            }
            unint64_t v34 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v33) {
              int64_t v33 = 2 * v34;
            }
            if (v34 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v35 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v35 = v33;
            }
            v124 = &v127;
            if (v35)
            {
              v36 = v129;
              if ((char *)v129 + v35 <= (char *)&v128 + 14) {
                v129 = (long long *)((char *)v129 + v35);
              }
              else {
                v36 = operator new(v35);
              }
            }
            else
            {
              v36 = 0;
            }
            v63 = &v36[v32];
            v64 = &v36[v35];
            v123 = &v36[v35];
            v36[v32] = -1;
            long long v21 = &v36[v32 + 1];
            v122.i64[1] = (uint64_t)v21;
            v66 = v125[0];
            v65 = v125[1];
            if (v125[1] == v125[0])
            {
              int64x2_t v68 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                unsigned __int8 v67 = *--v65;
                *--v63 = v67;
              }
              while (v65 != v66);
              int64x2_t v68 = *(int64x2_t *)v125;
              long long v21 = (unsigned __int8 *)v122.i64[1];
              v64 = v123;
            }
            v125[0] = v63;
            v125[1] = v21;
            int64x2_t v122 = v68;
            v69 = (char *)v126;
            unint64_t v126 = (unint64_t)v64;
            v123 = v69;
            uint64_t v121 = v68.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            *__int16 v5 = -1;
            long long v21 = v5 + 1;
          }
          v125[1] = v21;
          if ((unint64_t)v21 >= v126)
          {
            int64_t v71 = v21 - v125[0];
            int64_t v72 = v21 - v125[0] + 1;
            if (v72 < 0) {
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            }
            unint64_t v73 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v72) {
              int64_t v72 = 2 * v73;
            }
            if (v73 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v74 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v74 = v72;
            }
            v124 = &v127;
            if (v74)
            {
              v75 = v129;
              if ((char *)v129 + v74 <= (char *)&v128 + 14) {
                v129 = (long long *)((char *)v129 + v74);
              }
              else {
                v75 = operator new(v74);
              }
            }
            else
            {
              v75 = 0;
            }
            v78 = &v75[v71];
            v79 = &v75[v74];
            v123 = &v75[v74];
            v75[v71] = HIBYTE(v7);
            v70 = &v75[v71 + 1];
            v122.i64[1] = (uint64_t)v70;
            v81 = v125[0];
            v80 = v125[1];
            if (v125[1] == v125[0])
            {
              int64x2_t v83 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                unsigned __int8 v82 = *--v80;
                *--v78 = v82;
              }
              while (v80 != v81);
              int64x2_t v83 = *(int64x2_t *)v125;
              v70 = (unsigned __int8 *)v122.i64[1];
              v79 = v123;
            }
            v125[0] = v78;
            v125[1] = v70;
            int64x2_t v122 = v83;
            v84 = (char *)v126;
            unint64_t v126 = (unint64_t)v79;
            v123 = v84;
            uint64_t v121 = v83.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            *long long v21 = HIBYTE(v7);
            v70 = v21 + 1;
          }
          v125[1] = v70;
          if ((unint64_t)v70 >= v126)
          {
            int64_t v86 = v70 - v125[0];
            int64_t v87 = v70 - v125[0] + 1;
            if (v87 < 0) {
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            }
            unint64_t v88 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v87) {
              int64_t v87 = 2 * v88;
            }
            if (v88 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v89 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v89 = v87;
            }
            v124 = &v127;
            if (v89)
            {
              v90 = v129;
              if ((char *)v129 + v89 <= (char *)&v128 + 14) {
                v129 = (long long *)((char *)v129 + v89);
              }
              else {
                v90 = operator new(v89);
              }
            }
            else
            {
              v90 = 0;
            }
            v91 = &v90[v86];
            v92 = &v90[v89];
            v123 = &v90[v89];
            v90[v86] = BYTE2(v7);
            v85 = &v90[v86 + 1];
            v122.i64[1] = (uint64_t)v85;
            v94 = v125[0];
            v93 = v125[1];
            if (v125[1] == v125[0])
            {
              int64x2_t v96 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                unsigned __int8 v95 = *--v93;
                *--v91 = v95;
              }
              while (v93 != v94);
              int64x2_t v96 = *(int64x2_t *)v125;
              v85 = (unsigned __int8 *)v122.i64[1];
              v92 = v123;
            }
            v125[0] = v91;
            v125[1] = v85;
            int64x2_t v122 = v96;
            v97 = (char *)v126;
            unint64_t v126 = (unint64_t)v92;
            v123 = v97;
            uint64_t v121 = v96.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            unsigned __int8 *v70 = BYTE2(v7);
            v85 = v70 + 1;
          }
          v125[1] = v85;
          if ((unint64_t)v85 >= v126)
          {
            int64_t v99 = v85 - v125[0];
            int64_t v100 = v85 - v125[0] + 1;
            if (v100 < 0) {
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            }
            unint64_t v101 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v100) {
              int64_t v100 = 2 * v101;
            }
            if (v101 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v102 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v102 = v100;
            }
            v124 = &v127;
            if (v102)
            {
              v103 = v129;
              if ((char *)v129 + v102 <= (char *)&v128 + 14) {
                v129 = (long long *)((char *)v129 + v102);
              }
              else {
                v103 = operator new(v102);
              }
            }
            else
            {
              v103 = 0;
            }
            v104 = &v103[v99];
            v105 = &v103[v102];
            v123 = &v103[v102];
            v103[v99] = BYTE1(v7);
            v98 = &v103[v99 + 1];
            v122.i64[1] = (uint64_t)v98;
            v107 = v125[0];
            v106 = v125[1];
            if (v125[1] == v125[0])
            {
              int64x2_t v109 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                unsigned __int8 v108 = *--v106;
                *--v104 = v108;
              }
              while (v106 != v107);
              int64x2_t v109 = *(int64x2_t *)v125;
              v98 = (unsigned __int8 *)v122.i64[1];
              v105 = v123;
            }
            v125[0] = v104;
            v125[1] = v98;
            int64x2_t v122 = v109;
            v110 = (char *)v126;
            unint64_t v126 = (unint64_t)v105;
            v123 = v110;
            uint64_t v121 = v109.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            unsigned __int8 *v85 = BYTE1(v7);
            v98 = v85 + 1;
          }
          v125[1] = v98;
          if ((unint64_t)v98 < v126)
          {
            unsigned __int8 *v98 = v7;
            __int16 v5 = v98 + 1;
            goto LABEL_178;
          }
          int64_t v111 = v98 - v125[0];
          int64_t v112 = v98 - v125[0] + 1;
          if (v112 < 0) {
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          }
          unint64_t v113 = v126 - (unint64_t)v125[0];
          if (2 * (v126 - (unint64_t)v125[0]) > v112) {
            int64_t v112 = 2 * v113;
          }
          if (v113 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v114 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v114 = v112;
          }
          v124 = &v127;
          if (v114)
          {
            v115 = v129;
            if ((char *)v129 + v114 <= (char *)&v128 + 14) {
              v129 = (long long *)((char *)v129 + v114);
            }
            else {
              v115 = operator new(v114);
            }
          }
          else
          {
            v115 = 0;
          }
          long long v22 = &v115[v111];
          long long v23 = &v115[v114];
          v123 = &v115[v114];
          v115[v111] = v7;
          __int16 v5 = &v115[v111 + 1];
          v122.i64[1] = (uint64_t)v5;
          v116 = v125[0];
          long long v24 = v125[1];
          if (v125[1] == v125[0])
          {
LABEL_176:
            int64x2_t v118 = vdupq_n_s64((unint64_t)v24);
            goto LABEL_177;
          }
          do
          {
            unsigned __int8 v117 = *--v24;
            *--long long v22 = v117;
          }
          while (v24 != v116);
        }
        else
        {
          unsigned int v15 = ((65428 - v7) >> 8) - 5;
          if ((unint64_t)v5 >= v126)
          {
            int64_t v27 = v5 - v125[0];
            int64_t v28 = v5 - v125[0] + 1;
            if (v28 < 0) {
              std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
            }
            unint64_t v29 = v126 - (unint64_t)v125[0];
            if (2 * (v126 - (unint64_t)v125[0]) > v28) {
              int64_t v28 = 2 * v29;
            }
            if (v29 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v30 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v30 = v28;
            }
            v124 = &v127;
            if (v30)
            {
              int v31 = v129;
              if ((char *)v129 + v30 <= (char *)&v128 + 14) {
                v129 = (long long *)((char *)v129 + v30);
              }
              else {
                int v31 = operator new(v30);
              }
            }
            else
            {
              int v31 = 0;
            }
            v51 = &v31[v27];
            v52 = &v31[v30];
            v123 = &v31[v30];
            v31[v27] = v15;
            __int16 v5 = &v31[v27 + 1];
            v122.i64[1] = (uint64_t)v5;
            v54 = v125[0];
            v53 = v125[1];
            if (v125[1] == v125[0])
            {
              int64x2_t v56 = vdupq_n_s64((unint64_t)v125[1]);
            }
            else
            {
              do
              {
                unsigned __int8 v55 = *--v53;
                *--v51 = v55;
              }
              while (v53 != v54);
              int64x2_t v56 = *(int64x2_t *)v125;
              __int16 v5 = (unsigned __int8 *)v122.i64[1];
              v52 = v123;
            }
            v125[0] = v51;
            v125[1] = v5;
            int64x2_t v122 = v56;
            v57 = (char *)v126;
            unint64_t v126 = (unint64_t)v52;
            v123 = v57;
            uint64_t v121 = v56.i64[0];
            std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
          }
          else
          {
            *v5++ = v15;
          }
          v125[1] = v5;
          unsigned __int8 v8 = -108 - v7;
          if ((unint64_t)v5 < v126)
          {
LABEL_85:
            *v5++ = v8;
            goto LABEL_178;
          }
          int64_t v58 = v5 - v125[0];
          int64_t v59 = v5 - v125[0] + 1;
          if (v59 < 0) {
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          }
          unint64_t v60 = v126 - (unint64_t)v125[0];
          if (2 * (v126 - (unint64_t)v125[0]) > v59) {
            int64_t v59 = 2 * v60;
          }
          if (v60 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v61 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v61 = v59;
          }
          v124 = &v127;
          if (v61)
          {
            v62 = v129;
            if ((char *)v129 + v61 <= (char *)&v128 + 14) {
              v129 = (long long *)((char *)v129 + v61);
            }
            else {
              v62 = operator new(v61);
            }
          }
          else
          {
            v62 = 0;
          }
          long long v22 = &v62[v58];
          long long v23 = &v62[v61];
          v123 = &v62[v61];
          v62[v58] = v8;
          __int16 v5 = &v62[v58 + 1];
          v122.i64[1] = (uint64_t)v5;
          v76 = v125[0];
          long long v24 = v125[1];
          if (v125[1] == v125[0]) {
            goto LABEL_176;
          }
          do
          {
            unsigned __int8 v77 = *--v24;
            *--long long v22 = v77;
          }
          while (v24 != v76);
        }
      }
      else
      {
        unsigned int v14 = ((v7 + 65428) >> 8) - 9;
        if ((unint64_t)v5 >= v126)
        {
          int64_t v16 = v5 - v125[0];
          int64_t v17 = v5 - v125[0] + 1;
          if (v17 < 0) {
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          }
          unint64_t v18 = v126 - (unint64_t)v125[0];
          if (2 * (v126 - (unint64_t)v125[0]) > v17) {
            int64_t v17 = 2 * v18;
          }
          if (v18 >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v19 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v19 = v17;
          }
          v124 = &v127;
          if (v19)
          {
            uint64_t v20 = v129;
            if ((char *)v129 + v19 <= (char *)&v128 + 14) {
              v129 = (long long *)((char *)v129 + v19);
            }
            else {
              uint64_t v20 = operator new(v19);
            }
          }
          else
          {
            uint64_t v20 = 0;
          }
          v37 = &v20[v16];
          v38 = &v20[v19];
          v123 = &v20[v19];
          v20[v16] = v14;
          __int16 v5 = &v20[v16 + 1];
          v122.i64[1] = (uint64_t)v5;
          v40 = v125[0];
          v39 = v125[1];
          if (v125[1] == v125[0])
          {
            int64x2_t v42 = vdupq_n_s64((unint64_t)v125[1]);
          }
          else
          {
            do
            {
              unsigned __int8 v41 = *--v39;
              *--v37 = v41;
            }
            while (v39 != v40);
            int64x2_t v42 = *(int64x2_t *)v125;
            __int16 v5 = (unsigned __int8 *)v122.i64[1];
            v38 = v123;
          }
          v125[0] = v37;
          v125[1] = v5;
          int64x2_t v122 = v42;
          v43 = (char *)v126;
          unint64_t v126 = (unint64_t)v38;
          v123 = v43;
          uint64_t v121 = v42.i64[0];
          std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
        }
        else
        {
          *v5++ = v14;
        }
        v125[1] = v5;
        if ((unint64_t)v5 < v126) {
          goto LABEL_85;
        }
        int64_t v44 = v5 - v125[0];
        int64_t v45 = v5 - v125[0] + 1;
        if (v45 < 0) {
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        }
        unint64_t v46 = v126 - (unint64_t)v125[0];
        if (2 * (v126 - (unint64_t)v125[0]) > v45) {
          int64_t v45 = 2 * v46;
        }
        if (v46 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v47 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v47 = v45;
        }
        v124 = &v127;
        if (v47)
        {
          v48 = v129;
          if ((char *)v129 + v47 <= (char *)&v128 + 14) {
            v129 = (long long *)((char *)v129 + v47);
          }
          else {
            v48 = operator new(v47);
          }
        }
        else
        {
          v48 = 0;
        }
        long long v22 = &v48[v44];
        long long v23 = &v48[v47];
        v123 = &v48[v47];
        v48[v44] = v8;
        __int16 v5 = &v48[v44 + 1];
        v122.i64[1] = (uint64_t)v5;
        v49 = v125[0];
        long long v24 = v125[1];
        if (v125[1] == v125[0]) {
          goto LABEL_176;
        }
        do
        {
          unsigned __int8 v50 = *--v24;
          *--long long v22 = v50;
        }
        while (v24 != v49);
      }
    }
    else
    {
      unsigned __int8 v8 = v7 - 117;
      if ((unint64_t)v5 < v126) {
        goto LABEL_85;
      }
      int64_t v9 = v5 - v125[0];
      int64_t v10 = v5 - v125[0] + 1;
      if (v10 < 0) {
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      }
      unint64_t v11 = v126 - (unint64_t)v125[0];
      if (2 * (v126 - (unint64_t)v125[0]) > v10) {
        int64_t v10 = 2 * v11;
      }
      if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v12 = v10;
      }
      v124 = &v127;
      if (v12)
      {
        unint64_t v13 = v129;
        if ((char *)v129 + v12 <= (char *)&v128 + 14) {
          v129 = (long long *)((char *)v129 + v12);
        }
        else {
          unint64_t v13 = operator new(v12);
        }
      }
      else
      {
        unint64_t v13 = 0;
      }
      long long v22 = &v13[v9];
      long long v23 = &v13[v12];
      v123 = &v13[v12];
      v13[v9] = v8;
      __int16 v5 = &v13[v9 + 1];
      v122.i64[1] = (uint64_t)v5;
      long long v25 = v125[0];
      long long v24 = v125[1];
      if (v125[1] == v125[0]) {
        goto LABEL_176;
      }
      do
      {
        unsigned __int8 v26 = *--v24;
        *--long long v22 = v26;
      }
      while (v24 != v25);
    }
    int64x2_t v118 = *(int64x2_t *)v125;
    __int16 v5 = (unsigned __int8 *)v122.i64[1];
    long long v23 = v123;
LABEL_177:
    v125[0] = v22;
    v125[1] = v5;
    int64x2_t v122 = v118;
    v119 = (char *)v126;
    unint64_t v126 = (unint64_t)v23;
    v123 = v119;
    uint64_t v121 = v118.i64[0];
    std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v121);
LABEL_178:
    v125[1] = v5;
    ++v4;
  }
  while (v4 != v6);
  a3 = v125[0];
  a1 = v120;
LABEL_181:
  THandlerStreamingBuffers::WriteBytes(a1, v5 - a3, a3);
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)v125);
}

void sub_1B5314048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<unsigned char,TInlineBufferAllocator<unsigned char,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,30ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    long long v3 = (void *)(a1 + 54);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 56)) {
        *(void *)(a1 + 56) = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

void fnt_Normalize(uint64_t a1, int a2, int a3, _WORD *a4)
{
  if (a2 >= 0) {
    unsigned int v4 = a2;
  }
  else {
    unsigned int v4 = -a2;
  }
  if (a3 >= 0) {
    unsigned int v5 = a3;
  }
  else {
    unsigned int v5 = -a3;
  }
  if (v4 > v5) {
    unsigned int v5 = v4;
  }
  if (v5)
  {
    char v6 = 30;
    do
    {
      --v6;
      BOOL v7 = v5 > 1;
      v5 >>= 1;
    }
    while (v7);
  }
  else
  {
    char v6 = 30;
  }
  double v8 = (double)(a2 << v6);
  double v9 = (double)(a3 << v6);
  int v10 = sqrt(v8 * v8 + v9 * v9);
  if (v10)
  {
    double v11 = (double)v10 * 9.31322575e-10;
    unsigned int v12 = (vcvtd_n_s64_f64(v8 * 9.31322575e-10 / v11, 0x1EuLL) + 0x8000) >> 16;
    unsigned int v13 = (vcvtd_n_s64_f64(v9 * 9.31322575e-10 / v11, 0x1EuLL) + 0x8000) >> 16;
  }
  else
  {
    LOWORD(v13) = 0;
    LOWORD(v12) = 0x4000;
  }
  *a4 = v12;
  a4[1] = v13;
}

unsigned __int8 *fnt_SkipPushCrap(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 363);
  if (v2 == 65)
  {
    if (*(void *)(a1 + 368) <= (unint64_t)a2 && *(void *)(a1 + 376) > (unint64_t)a2)
    {
      long long v3 = &a2[2 * *a2];
      return v3 + 1;
    }
LABEL_16:
    char v6 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v8) {
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v8 + 88));
    }
    fputc(10, *v6);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  if (v2 != 64)
  {
    if ((v2 & 0xF8) == 0xB8)
    {
      uint64_t v4 = (2 * v2 - 366);
    }
    else
    {
      if ((v2 & 0xF8) != 0xB0) {
        return a2;
      }
      uint64_t v4 = (v2 - 175);
    }
    a2 += v4;
    return a2;
  }
  if (*(void *)(a1 + 368) > (unint64_t)a2 || *(void *)(a1 + 376) <= (unint64_t)a2) {
    goto LABEL_16;
  }
  long long v3 = &a2[*a2];
  return v3 + 1;
}

unsigned __int8 *fnt_FindENDF(uint64_t a1, unsigned __int8 *a2)
{
  if (*(void *)(a1 + 368) > (unint64_t)a2)
  {
LABEL_8:
    char v6 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v7) {
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    }
    fputc(10, *v6);
    exception = __cxa_allocate_exception(2uLL);
    __int16 v9 = 1;
LABEL_13:
    _WORD *exception = v9;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  long long v3 = a2;
  while (1)
  {
    if (*(void *)(a1 + 376) <= (unint64_t)v3) {
      goto LABEL_8;
    }
    uint64_t v4 = v3 + 1;
    int v5 = *v3;
    *(unsigned char *)(a1 + 363) = v5;
    if (v5 == 45) {
      return v4;
    }
    if (v5 == 137 || v5 == 44)
    {
      exception = __cxa_allocate_exception(2uLL);
      __int16 v9 = 5;
      goto LABEL_13;
    }
    long long v3 = fnt_SkipPushCrap(a1, v4);
    if (*(void *)(a1 + 368) > (unint64_t)v3) {
      goto LABEL_8;
    }
  }
}

uint64_t fnt_RoundToDoubleGrid(int a1)
{
  if (a1 < 0) {
    unsigned int v1 = -((16 - a1) & 0xFFFFFFE0);
  }
  else {
    unsigned int v1 = (a1 + 16) & 0xFFFFFFE0;
  }
  if (((v1 ^ a1) & 0x80000000) == 0 || v1 == 0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t fnt_RoundDownToGrid(int a1)
{
  unsigned int v1 = a1 & 0xFFFFFFC0;
  if (a1 < 0) {
    unsigned int v1 = -(-a1 & 0xFFFFFFC0);
  }
  if (((v1 ^ a1) & 0x80000000) == 0 || v1 == 0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t fnt_RoundUpToGrid(int a1)
{
  if (a1 < 0) {
    unsigned int v1 = -((63 - a1) & 0xFFFFFFC0);
  }
  else {
    unsigned int v1 = (a1 + 63) & 0xFFFFFFC0;
  }
  if (((v1 ^ a1) & 0x80000000) == 0 || v1 == 0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t fnt_RoundToGrid(int a1)
{
  if (a1 < 0) {
    unsigned int v1 = -((32 - a1) & 0xFFFFFFC0);
  }
  else {
    unsigned int v1 = (a1 + 32) & 0xFFFFFFC0;
  }
  if (((v1 ^ a1) & 0x80000000) == 0 || v1 == 0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t fnt_RoundToHalfGrid(int a1)
{
  unsigned int v1 = -a1 & 0xFFFFFFC0 ^ 0xFFFFFFE0;
  if (a1 >= 0) {
    unsigned int v1 = a1 & 0xFFFFFFC0 | 0x20;
  }
  if (a1 > 0) {
    unsigned int v2 = 32;
  }
  else {
    unsigned int v2 = -32;
  }
  if (((v1 ^ a1) & 0x80000000) == 0) {
    return v1;
  }
  else {
    return v2;
  }
}

uint64_t fnt_SuperRound(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  int v3 = *(__int16 *)(v2 + 236);
  unsigned int v4 = *(__int16 *)(v2 + 234);
  LODWORD(v2) = *(_DWORD *)(v2 + 224);
  unsigned int v5 = -v4 - ((v3 - (v4 + a1)) & v2);
  unsigned int v6 = ((v3 + a1 - v4) & v2) + v4;
  if (a1 < 0) {
    unsigned int v6 = v5;
  }
  if (a1 <= 0) {
    unsigned int v4 = -v4;
  }
  if (((v6 ^ a1) & 0x80000000) == 0 || v6 == 0) {
    return v6;
  }
  else {
    return v4;
  }
}

uint64_t fnt_Super45Round(int a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  int v3 = *(__int16 *)(v2 + 236);
  unsigned int v4 = *(__int16 *)(v2 + 234);
  LODWORD(v2) = *(_DWORD *)(v2 + 228);
  double v5 = (double)(int)v2 * 9.31322575e-10;
  unsigned int v6 = -v4
     - ((unint64_t)((int)v2
                         * (uint64_t)(int)(vcvtd_n_s64_f64((double)(int)(v3 - (v4 + a1)) * 9.31322575e-10 / v5, 0x1EuLL) & 0xFFFFFFC0)
                         + 0x20000000) >> 30);
  unsigned int v7 = ((unint64_t)((int)v2
                         * (uint64_t)(int)(vcvtd_n_s64_f64((double)(int)(v3 + a1 - v4) * 9.31322575e-10 / v5, 0x1EuLL) & 0xFFFFFFC0)
                         + 0x20000000) >> 30)
     + v4;
  if (a1 < 0) {
    unsigned int v7 = v6;
  }
  if (a1 <= 0) {
    unsigned int v4 = -v4;
  }
  if (((v7 ^ a1) & 0x80000000) == 0 || v7 == 0) {
    return v7;
  }
  else {
    return v4;
  }
}

uint64_t fnt_MovePoint(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *(__int16 *)(result + 360);
  int v9 = *(__int16 *)(result + 28);
  int v10 = *(__int16 *)(result + 30);
  if (!*(unsigned char *)(result + 365)) {
    uint64_t result = fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_PFPROJ: non-valid_pfProj (pfProj = %f)\n", (float)((float)(int)v8 * 0.000061035));
  }
  if (v8 == 0x4000)
  {
    if (v9)
    {
      int v11 = ShortFracMul(a4, v9);
      uint64_t result = fnt_XMovePoint(v7, a2, a3, v11);
    }
    if (v10)
    {
      LODWORD(v12) = ShortFracMul(a4, v10);
LABEL_12:
      return fnt_YMovePoint(v7, a2, a3, v12);
    }
  }
  else
  {
    if (v9) {
      uint64_t result = fnt_XMovePoint(v7, a2, a3, v9 * (uint64_t)a4 / v8);
    }
    if (v10)
    {
      uint64_t v12 = v10 * (uint64_t)a4 / v8;
      goto LABEL_12;
    }
  }
  return result;
}

uint64_t fnt_XMovePoint(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t result = CHECK_ELEMENTPTR(a1, (int *)a2);
  int v9 = *(_DWORD *)(a2 + 112);
  if ((a3 & 0x80000000) != 0 || v9 <= (int)a3)
  {
    uint64_t v12 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a3, v9, 0);
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v13) {
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    }
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    __int16 v15 = 1;
LABEL_9:
    _WORD *exception = v15;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v10 = *(void *)(a2 + 8);
  int v11 = *(_DWORD *)(v10 + 4 * a3);
  *(_DWORD *)(v10 + 4 * a3) = v11 + a4;
  if (__OFADD__(v11, a4))
  {
    exception = __cxa_allocate_exception(2uLL);
    __int16 v15 = 5;
    goto LABEL_9;
  }
  *(unsigned char *)(*(void *)(a2 + 48) + a3) |= 1u;
  return result;
}

uint64_t fnt_YMovePoint(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t result = CHECK_ELEMENTPTR(a1, (int *)a2);
  int v9 = *(_DWORD *)(a2 + 112);
  if ((a3 & 0x80000000) != 0 || v9 <= (int)a3)
  {
    uint64_t v12 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a3, v9, 0);
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v13) {
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    }
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    __int16 v15 = 1;
LABEL_9:
    _WORD *exception = v15;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v10 = *(void *)(a2 + 16);
  int v11 = *(_DWORD *)(v10 + 4 * a3);
  *(_DWORD *)(v10 + 4 * a3) = v11 + a4;
  if (__OFADD__(v11, a4))
  {
    exception = __cxa_allocate_exception(2uLL);
    __int16 v15 = 5;
    goto LABEL_9;
  }
  *(unsigned char *)(*(void *)(a2 + 48) + a3) |= 2u;
  return result;
}

uint64_t fnt_Project(uint64_t a1, int a2, int a3)
{
  int v5 = ShortFracMul(a2, *(__int16 *)(a1 + 24));
  return ShortFracMul(a3, *(__int16 *)(a1 + 26)) + v5;
}

uint64_t fnt_OldProject(uint64_t a1, int a2, int a3)
{
  int v5 = ShortFracMul(a2, *(__int16 *)(a1 + 32));
  return ShortFracMul(a3, *(__int16 *)(a1 + 34)) + v5;
}

uint64_t fnt_XProject(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fnt_YProject(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t fnt_GetCVTScale(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  __int16 v2 = *(_WORD *)(a1 + 26);
  if (!v2) {
    return *(unsigned int *)(v1 + 108);
  }
  __int16 v3 = *(_WORD *)(a1 + 24);
  if (!v3) {
    return *(unsigned int *)(v1 + 112);
  }
  if (*(unsigned char *)(a1 + 364))
  {
    int v4 = ShortFracMul(*(_DWORD *)(v1 + 108), v3);
    int v5 = ShortFracMul(*(_DWORD *)(v1 + 112), v2);
    return sqrt((double)v4 * (double)v4 + (double)v5 * (double)v5);
  }
  else
  {
    int v7 = *(_DWORD *)(v1 + 112);
    int v8 = ShortFracMul(v7, v3);
    int v9 = *(_DWORD *)(v1 + 108);
    int v10 = ShortFracMul(v9, v2);
    return (int)((double)v7
                             * (double)v9
                             / (double)(int)sqrt((double)v8 * (double)v8 + (double)v10 * (double)v10));
  }
}

uint64_t fnt_GetCVTEntryFast(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *(_DWORD *)(v2 + 256);
  if ((a2 & 0x80000000) != 0 || v3 <= (int)a2)
  {
    int v5 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a2, v3, 0);
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v7) {
      fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    }
    fputc(10, *v5);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return *(unsigned int *)(*(void *)(v2 + 24) + 4 * a2);
}

unint64_t fnt_GetCVTEntrySlow(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *(_DWORD *)(v2 + 256);
  if ((a2 & 0x80000000) != 0 || v3 <= (int)a2)
  {
    int v5 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a2, v3, 0);
    uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v7) {
      fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    }
    fputc(10, *v5);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return (unint64_t)(*(int *)(*(void *)(v2 + 24) + 4 * a2) * (uint64_t)(int)fnt_GetCVTScale(a1) + 0x8000) >> 16;
}

uint64_t fnt_GetSingleWidthFast(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 80) + 200);
}

unint64_t fnt_GetSingleWidthSlow(uint64_t a1)
{
  int v1 = *(_DWORD *)(*(void *)(a1 + 80) + 200);
  return (unint64_t)(v1 * (uint64_t)(int)fnt_GetCVTScale(a1) + 0x8000) >> 16;
}

uint64_t fnt_ChangeCvt(uint64_t result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = *(void *)(result + 80);
  int v5 = *(_DWORD *)(v4 + 256);
  if ((a3 & 0x80000000) != 0 || v5 <= (int)a3)
  {
    unsigned int v6 = (FILE **)MEMORY[0x1E4F143C8];
    uint64_t v7 = result;
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", a3, v5, 0);
    uint64_t v8 = *(void *)(*(void *)(v7 + 72) + 8);
    if (v8) {
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v8 + 88));
    }
    fputc(10, *v6);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  *(_DWORD *)(*(void *)(v4 + 24) + 4 * a3) += a4;
  return result;
}

uint64_t fnt_ComputeAndCheck_PF_Proj(uint64_t result)
{
  *(unsigned char *)(result + 365) = 1;
  int v1 = *(__int16 *)(result + 30);
  unsigned int v2 = ((v1 * *(__int16 *)(result + 26) + 0x2000) >> 14)
     + ((*(__int16 *)(result + 28) * *(__int16 *)(result + 24) + 0x2000) >> 14);
  if ((unsigned __int16)(((v1 * *(__int16 *)(result + 26) + 0x2000) >> 14)
                        + ((*(__int16 *)(result + 28) * *(__int16 *)(result + 24) + 0x2000) >> 14)
                        + 1023) <= 0x7FEu)
  {
    LOWORD(v2) = v2 & 0x8000 | 0x4000;
    *(unsigned char *)(result + 365) = 0;
  }
  *(_WORD *)(result + 360) = v2;
  return result;
}

void fnt_IllegalInstruction()
{
  exception = __cxa_allocate_exception(2uLL);
  _WORD *exception = 1;
  __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
}

uint64_t fnt_NilFunction()
{
  return 0;
}

uint64_t fnt_InnerExecute(uint64_t result, unsigned __int8 *a2, unint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 64);
  long long v5 = *(_OWORD *)(result + 368);
  *(void *)(result + 64) = a2;
  if (*(void *)(result + 384) >= a3) {
    unint64_t v6 = a3;
  }
  else {
    unint64_t v6 = *(void *)(result + 384);
  }
  *(void *)(result + 368) = a2;
  *(void *)(result + 376) = v6;
  uint64_t v7 = *(void *)(*(void *)(result + 80) + 40);
  if (!v7)
  {
    int v10 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", 0);
    goto LABEL_13;
  }
  unsigned int v8 = *(_DWORD *)(result + 392);
  *(_DWORD *)(result + 392) = v8 + 1;
  if (v8 > 0x40)
  {
    int v10 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "gs->fntCallStack overage");
LABEL_13:
    uint64_t v11 = *(void *)(*(void *)(v3 + 72) + 8);
    if (v11) {
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    }
    fputc(10, *v10);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  if (v6 > (unint64_t)a2)
  {
    long long v13 = v5;
    do
    {
      *(void *)(v3 + 64) = a2 + 1;
      uint64_t v9 = *a2;
      *(unsigned char *)(v3 + 363) = v9;
      uint64_t result = (*(uint64_t (**)(uint64_t))(v7 + 8 * v9))(v3);
      a2 = *(unsigned __int8 **)(v3 + 64);
    }
    while ((unint64_t)a2 < v6);
    unsigned int v8 = *(_DWORD *)(v3 + 392) - 1;
    long long v5 = v13;
  }
  *(_DWORD *)(v3 + 392) = v8;
  *(void *)(v3 + 64) = v4;
  *(_OWORD *)(v3 + 368) = v5;
  return result;
}

uint64_t CorrectUnscaledOutline(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 72) + 8);
  uint64_t v2 = *(int *)(v1 + 4);
  if (v2)
  {
    uint64_t v3 = *(void *)(result + 80);
    int v4 = *(_DWORD *)(v3 + 104);
    unsigned int v5 = vcvtd_n_s64_f64(1.0 / ((double)*(int *)(v3 + 100) * 0.0000152587891), 0x10uLL);
    unsigned int v6 = vcvtd_n_s64_f64(1.0 / ((double)v4 * 0.0000152587891), 0x10uLL);
    uint64_t v7 = *(int **)(v1 + 8);
    unsigned int v8 = *(int **)(v1 + 16);
    uint64_t v9 = *(_WORD **)(v1 + 72);
    int v10 = *(_WORD **)(v1 + 80);
    uint64_t v11 = &v9[v2];
    do
    {
      int v12 = *v7++;
      *v9++ = (v12 * v5 + 0x8000) >> 16;
      int v13 = *v8++;
      *v10++ = (v13 * v6 + 0x8000) >> 16;
    }
    while (v9 < v11);
  }
  *(unsigned char *)(result + 362) = 0;
  return result;
}

void fnt_Execute(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, BOOL a9)
{
  BOOL v11 = a9;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v12;
  long long v50 = v12;
  long long v47 = v12;
  long long v48 = v12;
  long long v45 = v12;
  long long v46 = v12;
  long long v43 = v12;
  long long v44 = v12;
  long long v41 = v12;
  long long v42 = v12;
  long long v39 = v12;
  long long v40 = v12;
  long long v37 = v12;
  long long v38 = v12;
  long long v35 = v12;
  long long v36 = v12;
  long long v33 = v12;
  long long v34 = v12;
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = v12;
  unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
  long long v25 = v12;
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  unint64_t v32 = 0xAAAAAAAA00000000;
  uint64_t v31 = 0;
  uint64_t v22 = *(void *)(a1 + 8);
  uint64_t v23 = v22;
  uint64_t v21 = v22;
  LODWORD(v25) = 0x4000;
  uint64_t v24 = 0x400000004000;
  WORD4(v48) = 0x4000;
  *((void *)&v33 + 1) = fnt_XMovePoint;
  *(void *)&long long v34 = fnt_XProject;
  *((void *)&v34 + 1) = fnt_XProject;
  LODWORD(v33) = 0;
  WORD6(v48) = 256;
  if (a9) {
    BOOL v11 = *(unsigned char *)(a2 + 264) != 0;
  }
  BYTE10(v48) = v11;
  if (*(_DWORD *)(a2 + 128))
  {
    if (*(unsigned char *)(a2 + 266)) {
      int v13 = fnt_GetCVTEntryFast;
    }
    else {
      int v13 = fnt_GetCVTEntrySlow;
    }
    unsigned int v14 = fnt_GetSingleWidthFast;
    if (!*(unsigned char *)(a2 + 266)) {
      unsigned int v14 = fnt_GetSingleWidthSlow;
    }
    *((void *)&v35 + 1) = v13;
    *(void *)&long long v36 = v14;
    if (*(_WORD *)(a2 + 242)) {
      *(_DWORD *)(a2 + 200) = (unint64_t)(*(int *)(a2 + 100) * (uint64_t)*(__int16 *)(a2 + 242) + 0x8000) >> 16;
    }
  }
  else
  {
    *((void *)&v35 + 1) = fnt_NilFunction;
    *(void *)&long long v36 = fnt_NilFunction;
  }
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v16 = v15 + *(int *)(a2 + 4);
  *((void *)&v25 + 1) = a6;
  *(void *)&long long v26 = v16;
  *((void *)&v26 + 1) = v15;
  unint64_t v27 = 0;
  DWORD2(v50) = 0;
  long long v49 = 0uLL;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v19 = v17;
  long long v20 = v17;
  (*(void (**)(long long *__return_ptr))(**(void **)(*(void *)a6 + 24) + 48))(&v19);
  uint64_t v18 = *((void *)&v19 + 1);
  if (*((void *)&v19 + 1))
  {
    uint64_t v18 = *(void *)(*((void *)&v19 + 1) + 8);
    if (v18) {
      v18 += v20;
    }
  }
  *(void *)&long long v50 = v18 + *((void *)&v20 + 1) - v20;
  *(void *)&long long v35 = fnt_InnerExecute;
  fnt_InnerExecute((uint64_t)&v21, a3, a4);
  TDataReference::~TDataReference((TDataReference *)&v19);
}

void sub_1B5315170(void *a1)
{
  __cxa_begin_catch(a1);
  if (*(_DWORD *)(v2 + 128) == 3)
  {
    uint64_t v3 = *(void *)(v1 + 8);
    if (v3)
    {
      size_t v4 = 4 * *(_DWORD *)(v3 + 4) + 16;
      memcpy(*(void **)(v3 + 8), *(const void **)(v3 + 56), v4);
      memcpy(*(void **)(v3 + 16), *(const void **)(v3 + 64), v4);
    }
  }
  __cxa_end_catch();
  JUMPOUT(0x1B5315150);
}

void sub_1B53151C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *GrowStackForPush(void *a1, int a2)
{
  uint64_t result = (char *)a1[7];
  if ((unint64_t)&result[4 * a2] > a1[6])
  {
    if (4 * a2 <= 1024) {
      size_t v4 = 1024;
    }
    else {
      size_t v4 = (4 * a2);
    }
    unsigned int v5 = (char *)malloc_type_realloc(*(void **)(a1[10] + 8), *(int *)(a1[10] + 4) + v4, 0x3BFC4A7FuLL);
    if (!v5)
    {
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 20;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
    unsigned int v6 = v5;
    bzero(&v5[*(int *)(a1[10] + 4)], v4);
    uint64_t v7 = a1[10];
    uint64_t v8 = *(int *)(v7 + 4) + (uint64_t)(int)v4;
    *(_DWORD *)(v7 + 4) = v8;
    uint64_t result = &v6[a1[7] - *(void *)(v7 + 8)];
    a1[6] = &v6[v8];
    a1[7] = result;
    *(void *)(v7 + 8) = v6;
  }
  return result;
}

void TGlyphOutlineContext::~TGlyphOutlineContext(CGPathRef *this)
{
  *this = (CGPathRef)&unk_1F0DD8A40;
  CGPathRelease(this[2]);
}

{
  uint64_t vars8;

  TGlyphOutlineContext::~TGlyphOutlineContext(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TFontHandler::CopyGlyphPath(TFontHandler *this, uint64_t a2, BOOL *a3)
{
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v9 = v6;
  long long v10 = v6;
  TGlyphOutlineContext::TGlyphOutlineContext((TGlyphOutlineContext *)&v9, 0);
  (*(void (**)(TFontHandler *, uint64_t, long long *, BOOL *))(*(void *)this + 72))(this, a2, &v9, a3);
  uint64_t v7 = v10;
  *(void *)&long long v10 = 0;
  TGlyphOutlineContext::~TGlyphOutlineContext((CGPathRef *)&v9);
  return v7;
}

void sub_1B53153CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGPathRef a9)
{
}

uint64_t TFontHandler::CreateFontHandler(uint64_t *a1, int a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  if (!v7) {
    return (*(uint64_t (**)(uint64_t *, uint64_t))(v6 + 64))(a1, a3);
  }
  if (a2)
  {
    uint64_t v8 = v7;
    if ((*(unsigned int (**)(uint64_t *))(v6 + 72))(a1) != 1024
      || (TheadTable::TheadTable((TheadTable *)v13, v8),
          unsigned int v9 = bswap32(*(unsigned __int16 *)(TheadTable::GetHead((TheadTable *)v13) + 46)) >> 16,
          TDataReference::~TDataReference((TDataReference *)v13),
          v9 <= 0x12))
    {
      TheadTable::TheadTable((TheadTable *)v13, v8);
      v13[0] = &unk_1F0DD85E8;
      int IndexToLocFormat = TRenderingHeaderTable::GetIndexToLocFormat((TRenderingHeaderTable *)v13);
      TDataReference::~TDataReference((TDataReference *)v13);
      if (IndexToLocFormat) {
        operator new();
      }
      operator new();
    }
  }
  return 0;
}

uint64_t TRenderingHeaderTable::GetIndexToLocFormat(TRenderingHeaderTable *this)
{
  if (*((void *)this + 5) <= 0x33uLL)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  return ((int)bswap32(*(unsigned __int16 *)(TheadTable::GetHead(this) + 50)) >> 16);
}

uint64_t TFontHandler::GetHorizontalAdvances(uint64_t this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    uint64_t v7 = this;
    uint64_t v8 = 8 * a4;
    do
    {
      unsigned int v9 = *a2++;
      this = (*(uint64_t (**)(uint64_t, void, double *, void, void))(*(void *)v7 + 40))(v7, v9, a3, 0, 0);
      if ((this & 1) == 0) {
        *a3 = 0.0;
      }
      ++a3;
      v8 -= 8;
      --v4;
    }
    while (v4);
  }
  return this;
}

double TFontHandler::GetFontInfo(TFontHandler *this, FPFontInfo *a2)
{
  uint64_t v18 = -1;
  double v19 = NAN;
  uint64_t v16 = -1;
  uint64_t v17 = -1;
  uint64_t v15 = -1;
  int v13 = -1431655766;
  int v14 = -1431655766;
  __int16 v12 = -21846;
  __int16 v11 = -21846;
  (*(void (**)(void, int *, int *, int *, int *, int *, int *, int *, int *, int *, BOOL *, BOOL *, double *, int *, int *, uint64_t *, uint64_t *, uint64_t *, uint64_t *, __int16 *, __int16 *))(**((void **)this + 1) + 176))(*((void *)this + 1), &a2->var2, &a2->var3, &a2->var4, &a2->var5, &a2->var6, &a2->var7, &a2->var8, &a2->var9, &a2->var10, &a2->var11, &a2->var12, &v19, &v14, &v13, &v18, &v17, &v16, &v15,
    &v12,
    &v11);
  double v3 = (double)v12;
  double v4 = (double)v11;
  a2->var13 = v19;
  a2->var14 = v3;
  double v5 = (double)v14;
  a2->var15 = v4;
  a2->var16 = v5;
  double result = (double)v13;
  CGFloat v8 = *(double *)&v17;
  CGFloat v7 = *(double *)&v18;
  CGFloat v10 = *(double *)&v15;
  CGFloat v9 = *(double *)&v16;
  a2->var17 = (double)v13;
  a2->var18.origin.x = v7;
  a2->var18.origin.y = v8;
  a2->var18.size.width = v9;
  a2->var18.size.height = v10;
  return result;
}

double TFontHandler::GetFontBounds(TFontHandler *this, double *a2, double *a3, double *a4, double *a5, int a6)
{
  (*(void (**)(void))(**((void **)this + 1) + 280))(*((void *)this + 1));
  if (a6)
  {
    *a2 = *a2 + *a4 * -0.5;
    double result = -*a5;
    *a3 = result;
  }
  return result;
}

uint64_t TFontHandler::GetFontMetrics(TFontHandler *this, int *a2, int *a3, int *a4)
{
  return 0;
}

void *TFontHandler::GetEncoding@<X0>(TFontHandler *this@<X0>, const unsigned int *a2@<X1>, const unsigned __int16 *__src@<X2>, _OWORD *a4@<X8>)
{
  if (__src)
  {
    return memcpy(a4, __src, 0x200uLL);
  }
  else
  {
    a4[30] = 0u;
    a4[31] = 0u;
    a4[28] = 0u;
    a4[29] = 0u;
    a4[26] = 0u;
    a4[27] = 0u;
    a4[24] = 0u;
    a4[25] = 0u;
    a4[22] = 0u;
    a4[23] = 0u;
    a4[20] = 0u;
    a4[21] = 0u;
    a4[18] = 0u;
    a4[19] = 0u;
    a4[16] = 0u;
    a4[17] = 0u;
    a4[14] = 0u;
    a4[15] = 0u;
    a4[12] = 0u;
    a4[13] = 0u;
    a4[10] = 0u;
    a4[11] = 0u;
    a4[8] = 0u;
    a4[9] = 0u;
    a4[6] = 0u;
    a4[7] = 0u;
    a4[4] = 0u;
    a4[5] = 0u;
    a4[2] = 0u;
    a4[3] = 0u;
    *a4 = 0u;
    a4[1] = 0u;
    double result = (void *)(*(uint64_t (**)(void))(**((void **)this + 1) + 168))(*((void *)this + 1));
    if (result >= 0xFFFF) {
      unsigned int v8 = 0xFFFF;
    }
    else {
      unsigned int v8 = result;
    }
    if (a2)
    {
      if (v8)
      {
        LOWORD(v9) = 0;
        unsigned int v10 = (v8 + 31) >> 5;
        __int16 v11 = a2;
        do
        {
          if (*v11)
          {
            v7.i32[0] = *v11;
            int8x8_t v7 = vcnt_s8(v7);
            LOWORD(v9) = vaddlv_u8((uint8x8_t)v7) + v9;
          }
          ++v11;
          --v10;
        }
        while (v10);
        if ((v9 & 0xFF00) != 0) {
          unsigned int v9 = 256;
        }
        else {
          unsigned int v9 = (unsigned __int16)v9;
        }
        if (v9)
        {
          unsigned int v12 = 0;
          unsigned int v13 = 1;
          do
          {
            if (((a2[(v13 - 1) >> 5] << (v13 - 1)) & 0x80000000) != 0) {
              *((_WORD *)a4 + v12++) = v13 - 1;
            }
            if (v8 <= v13) {
              break;
            }
            ++v13;
          }
          while (v12 < v9);
        }
      }
    }
    else
    {
      if (result >= 0xFF) {
        int v14 = 255;
      }
      else {
        int v14 = (int)result;
      }
      if (v14)
      {
        unsigned int v15 = (256 - v14) >> 1;
        signed int v16 = v14 + v15;
        LOWORD(v17) = v15;
        __int16 v18 = v15;
        do
        {
          *((_WORD *)a4 + v18) = v18 - v15;
          __int16 v18 = v17 + 1;
          signed int v17 = (__int16)(v17 + 1);
        }
        while (v17 < v16);
      }
    }
  }
  return result;
}

void TFontHandler::CreateStreamer(TFontHandler *this, __CFData *a2)
{
}

void sub_1B5315AE4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10E1C4094539FFCLL);
  _Unwind_Resume(a1);
}

void TType1FontHandler::CreateStreamer(TType1FontHandler *this, __CFData *a2)
{
}

void sub_1B5315B84(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10E1C409F79DE80);
  _Unwind_Resume(a1);
}

BOOL TFontHandler::CreatePostScriptEncoding(TFontHandler *this, const unsigned __int16 *a2, __CFData *a3)
{
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)this + 120))(&v10);
  double v5 = (void *)v10;
  if (v10)
  {
    TFontHandler::GetEncoding(this, 0, a2, v9);
    THandlerStreamingContext::StreamPSEncoding(v5, (uint64_t)v9, v6);
    unint64_t v7 = v10;
    unint64_t v10 = 0;
    if (v7) {
      (*(void (**)(unint64_t))(*(void *)v7 + 8))(v7);
    }
  }
  return v5 != 0;
}

void sub_1B5315C74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFontHandler::T1StreamPSDownload(TType1PSFont **this, int a2, const char *a3, const unsigned int *a4, const unsigned __int16 *a5, const int *a6, __CFData *a7)
{
  int v19 = a2;
  unsigned int v13 = (char *)malloc_type_calloc(1uLL, 0x26uLL, 0x108004086473A5EuLL);
  *(_DWORD *)unsigned int v13 = 1;
  *(void *)(v13 + 20) = AppendBytes;
  *(void *)(v13 + 28) = a7;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  __int16 v18 = v13;
  TType1PSFont::GetFont(this[1], v14, &v17);
  unint64_t v15 = v17;
  if (v17)
  {
    (*(void (**)(unint64_t, void, uint64_t, uint64_t, const unsigned __int16 *, const int *, const char *, const unsigned int *, int *, void **))(*(void *)v17 + 64))(v17, 0, 1, 1, a5, a6, a3, a4, &v19, &v18);
    (*(void (**)(unint64_t))(*(void *)v15 + 8))(v15);
    free(v18);
    return 1;
  }
  else
  {
    free(v13);
    return 0;
  }
}

void sub_1B5315DF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  free(a13);
  __cxa_begin_catch(a1);
  CFDataSetLength(v13, 0);
  __cxa_end_catch();
  JUMPOUT(0x1B5315DD8);
}

void sub_1B5315E60(_Unwind_Exception *a1)
{
}

uint64_t AppendBytes(__CFData *a1, CFIndex length, UInt8 *bytes)
{
  return 0;
}

{
  CFDataAppendBytes(a1, bytes, length);
  return 0;
}

{
  CFDataAppendBytes(a1, bytes, length);
  return 0;
}

uint64_t TFontHandler::StreamPSDownload(TFontHandler *a1, uint64_t a2, __int16 a3, char *a4, unsigned int *a5, const unsigned __int16 *a6)
{
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr))(*(void *)a1 + 120))(&v17);
  uint64_t v12 = v17;
  BOOL v13 = (a3 & 0xFFF) != 2 || v17 == 0;
  uint64_t v14 = !v13;
  if (!v13)
  {
    TFontHandler::GetEncoding(a1, a5, a6, v16);
    THandlerStreamingContext::StreamT1Font(v12, a2, a4, a5, (uint64_t)v16, 0);
    uint64_t v12 = v17;
  }
  unint64_t v17 = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }
  return v14;
}

void sub_1B5315FA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 72);
  *(void *)(v1 - 72) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFontHandler::GetVariationValues(TFontHandler *this)
{
  return 0;
}

uint64_t TFontHandler::CanStreamPostScriptType1(TFontHandler *this)
{
  return 0;
}

void TRenderingHeaderTable::~TRenderingHeaderTable(TRenderingHeaderTable *this)
{
  TDataReference::~TDataReference(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TSFNTFontHandler::GetRawMetrics(TSFNTFontHandler *this, uint64_t a2, double *a3, double *a4)
{
  if (a4) {
    *a4 = (double)(*(unsigned int (**)(void))(**((void **)this + 1) + 72))(*((void *)this + 1))
  }
        * 0.0498046875;
  uint64_t v7 = (*(uint64_t (**)(TSFNTFontHandler *))(*(void *)this + 128))(this);
  *a3 = (double)(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2);
  return 1;
}

uint64_t TSFNTFontHandler::GetBounds(TSFNTFontHandler *this, unsigned int a2, double *a3, double *a4, double *a5, double *a6)
{
  return 0;
}

uint64_t TSFNTFontHandler::GetHorizontalToVerticalTranslate()
{
  return 0;
}

uint64_t TTrueTypeFontHandler::GetRawMetrics(TTrueTypeFontHandler *this, uint64_t a2, double *a3, double *a4)
{
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v30 = v8;
  long long v31 = v8;
  long long v29 = v8;
  (*(void (**)(long long *__return_ptr))(*(void *)this + 144))(&v29);
  DWORD2(v31) = a2;
  if (*((void *)&v29 + 1)
    && (uint64_t v9 = *(void *)(*((void *)&v29 + 1) + 8)) != 0
    && (unint64_t)v31 >= 2
    && ((v10 = (unsigned __int16 *)(v9 + v30), (unint64_t)v31 >= 0xA) ? (BOOL v11 = *v10 == 0) : (BOOL v11 = 1),
        !v11
     && (int)bswap32(v10[3]) >> 16 > (int)bswap32(v10[1]) >> 16
     && (int v12 = (int)bswap32(v10[4]) >> 16, v12 > (int)bswap32(v10[2]) >> 16)))
  {
    BOOL v13 = (const TSFNTFont *)*((void *)this + 1);
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v27 = v14;
    long long v28 = v14;
    long long v25 = v14;
    long long v26 = v14;
    long long v24 = v14;
    ThmtxTable::ThmtxTable((uint64_t)&v24, v13, 1986553185, 1986884728, *((unsigned int *)this + 24) | 0x100000000);
    *(void *)&long long v24 = &unk_1F0DFE0F0;
    if (TsfntTable::operator BOOL((TsfntTable *)&v24))
    {
      __int16 v23 = -21846;
      *a3 = (double)ThmtxTable::GetRawMetrics((ThmtxTable *)&v24, a2, &v23);
      if (a4) {
        *a4 = (double)v23;
      }
      TDataReference::~TDataReference((TDataReference *)&v24);
    }
    else
    {
      TDataReference::~TDataReference((TDataReference *)&v24);
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v26 = v16;
      long long v27 = v16;
      long long v24 = v16;
      long long v25 = v16;
      Tos2Table::Tos2Table((Tos2Table *)&v24, v13);
      if (TsfntTable::operator BOOL((TsfntTable *)&v24))
      {
        unsigned int v17 = __rev16(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)&v24) + 68));
        unsigned int v18 = bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)&v24) + 70)) >> 16;
      }
      else
      {
        unsigned int v17 = 0;
        unsigned int v18 = 0;
      }
      TDataReference::~TDataReference((TDataReference *)&v24);
      if (!(v17 | v18))
      {
        int v19 = (ThmtxTable *)(*(uint64_t (**)(TTrueTypeFontHandler *))(*(void *)this + 128))(this);
        uint64_t Hhea = ThmtxTable::GetHhea(v19);
        if (Hhea) {
          unsigned int v17 = bswap32(*(unsigned __int16 *)(Hhea + 4)) >> 16;
        }
        else {
          LOWORD(v17) = 0;
        }
        uint64_t v21 = (ThmtxTable *)(*(uint64_t (**)(TTrueTypeFontHandler *))(*(void *)this + 128))(this);
        uint64_t v22 = ThmtxTable::GetHhea(v21);
        if (v22) {
          unsigned int v18 = bswap32(*(unsigned __int16 *)(v22 + 6)) >> 16;
        }
        else {
          LOWORD(v18) = 0;
        }
      }
      if (a4) {
        *a4 = (double)((__int16)v17 - v12);
      }
      *a3 = (double)((__int16)v17 - (__int16)v18);
    }
  }
  else
  {
    TSFNTFontHandler::GetRawMetrics(this, a2, a3, a4);
  }
  TDataReference::~TDataReference((TDataReference *)&v29);
  return 1;
}

void sub_1B53163EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

void *TTrueTypeFontDataHandler::GetGlyphData@<X0>(void *this@<X0>, unint64_t *a2@<X2>, unsigned int a3@<W1>, void *a4@<X8>)
{
  if (*((_DWORD *)this + 24) <= a3) {
    goto LABEL_13;
  }
  uint64_t v6 = this;
  uint64_t v7 = this[14];
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    goto LABEL_13;
  }
  uint64_t v9 = (unsigned __int16 *)(v8 + this[15] + 2 * a3);
  this = (void *)TsfntTable::validate<FPBigEndianScalar<unsigned short>>((TsfntTable *)(this + 13), (unint64_t)v9, 1);
  if (!this) {
    goto LABEL_13;
  }
  this = (void *)TsfntTable::GetTableEnd((TsfntTable *)(v6 + 20));
  uint64_t v10 = v6[21];
  if (v10)
  {
    uint64_t v10 = *(void *)(v10 + 8);
    if (v10) {
      v10 += v6[22];
    }
  }
  unsigned int v11 = this - v10;
  unsigned int v12 = (bswap32(*v9) >> 15) & 0x1FFFE;
  uint64_t v13 = (bswap32(v9[1]) >> 15) & 0x1FFFE;
  if (v12 > v13 || v13 > v11)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  if (v13 != v12)
  {
    *a2 = v13 - v12;
    return TDataReference::TDataReference(a4, v6 + 20, v12, 0, 0);
  }
  else
  {
LABEL_13:
    *a2 = 0;
    *a4 = &unk_1F0DD4218;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  return this;
}

void *TTrueTypeFontLongDataHandler::GetGlyphData@<X0>(void *this@<X0>, unint64_t *a2@<X2>, unsigned int a3@<W1>, void *a4@<X8>)
{
  if (*((_DWORD *)this + 24) <= a3) {
    goto LABEL_13;
  }
  uint64_t v6 = this;
  uint64_t v7 = this[14];
  if (!v7) {
    goto LABEL_13;
  }
  uint64_t v8 = *(void *)(v7 + 8);
  if (!v8) {
    goto LABEL_13;
  }
  uint64_t v9 = (unsigned int *)(v8 + this[15] + 4 * a3);
  if ((unint64_t)(v9 + 2) > TsfntTable::GetTableEnd((TsfntTable *)(this + 13))) {
    goto LABEL_17;
  }
  this = (void *)TsfntTable::GetTableEnd((TsfntTable *)(v6 + 20));
  uint64_t v10 = v6[21];
  if (v10)
  {
    uint64_t v10 = *(void *)(v10 + 8);
    if (v10) {
      v10 += v6[22];
    }
  }
  unsigned int v11 = this - v10;
  unsigned int v12 = v9[1];
  unsigned int v13 = bswap32(*v9);
  uint64_t v14 = bswap32(v12);
  if (v13 > v14 || v14 > v11)
  {
LABEL_17:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  if (v12 != *v9)
  {
    *a2 = v14 - v13;
    return TDataReference::TDataReference(a4, v6 + 20, v13, 0, 0);
  }
  else
  {
LABEL_13:
    *a2 = 0;
    *a4 = &unk_1F0DD4218;
    a4[1] = 0;
    a4[2] = 0;
    a4[3] = 0;
  }
  return this;
}

uint64_t TTrueTypeFontHandler::GetHorizontalToVerticalTranslate(const TSFNTFont **a1, uint64_t a2, double *a3)
{
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = v6;
  long long v27 = v6;
  long long v25 = v6;
  (*((void (**)(long long *__return_ptr))*a1 + 18))(&v25);
  DWORD2(v27) = a2;
  if (*((void *)&v25 + 1)
    && (uint64_t v7 = *(void *)(*((void *)&v25 + 1) + 8)) != 0
    && (unint64_t)v27 >= 2
    && ((uint64_t v8 = (unsigned __int16 *)(v7 + v26), (unint64_t)v27 >= 0xA) ? (v9 = *v8 == 0) : (v9 = 1), !v9))
  {
    unsigned int v11 = v8[1];
    unsigned int v12 = v8[4];
    __int16 v24 = 0;
    uint64_t v13 = (*((uint64_t (**)(const TSFNTFont **))*a1 + 16))(a1);
    unsigned int v14 = (*(uint64_t (**)(uint64_t, uint64_t, __int16 *))(*(void *)v13 + 24))(v13, a2, &v24);
    uint64_t v22 = 0;
    double v23 = 0.0;
    (*((void (**)(const TSFNTFont **, uint64_t, uint64_t *, double *, uint64_t))*a1 + 5))(a1, a2, &v22, &v23, 1);
    int v15 = v24;
    TheadTable::TheadTable((TheadTable *)v21, a1[1]);
    unsigned int v16 = bswap32(v12) >> 16;
    int v17 = (__int16)(bswap32(v11) >> 16);
    double v18 = (double)(v17 - v15);
    __int16 v19 = *(_WORD *)(TheadTable::GetHead((TheadTable *)v21) + 16);
    TDataReference::~TDataReference((TDataReference *)v21);
    if ((v19 & 0x2000) == 0) {
      double v18 = v18 - (double)(v17 + ((__int16)(v14 + (v14 >> 15)) >> 1) - v24);
    }
    double v20 = 0.0 - (v23 + (double)(__int16)v16);
    *a3 = v18;
    a3[1] = v20;
  }
  else
  {
    *a3 = 0.0;
    a3[1] = 0.0;
  }
  TDataReference::~TDataReference((TDataReference *)&v25);
  return 1;
}

void sub_1B531692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

uint64_t TTrueTypeFontHandler::GetBounds(const TSFNTFont **this, uint64_t a2, double *a3, double *a4, double *a5, double *a6, char a7)
{
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v30 = v14;
  long long v31 = v14;
  long long v29 = v14;
  (*((void (**)(long long *__return_ptr))*this + 18))(&v29);
  DWORD2(v31) = a2;
  if (*((void *)&v29 + 1))
  {
    uint64_t v15 = *(void *)(*((void *)&v29 + 1) + 8);
    if (v15)
    {
      if ((unint64_t)v31 >= 2)
      {
        unsigned int v16 = (_WORD *)(v15 + v30);
        if ((unint64_t)v31 >= 0xA && *v16 != 0)
        {
          *a3 = (double)((int)bswap32((unsigned __int16)v16[1]) >> 16);
          *a4 = (double)((int)bswap32((unsigned __int16)v16[2]) >> 16);
          *a5 = (double)((int)bswap32((unsigned __int16)v16[3]) >> 16);
          *a6 = (double)((int)bswap32((unsigned __int16)v16[4]) >> 16);
          __int16 v28 = 0;
          uint64_t v20 = (*((uint64_t (**)(const TSFNTFont **))*this + 16))(this);
          (*(void (**)(uint64_t, uint64_t, __int16 *))(*(void *)v20 + 24))(v20, a2, &v28);
          if (a7)
          {
            double v26 = 0.0;
            double v27 = 0.0;
            (*((void (**)(const TSFNTFont **, uint64_t, double *, double *, uint64_t))*this + 5))(this, a2, &v26, &v27, 1);
            int v21 = (int)(*a6 + v27);
            if (v21)
            {
              *a4 = *a4 - (double)v21;
              *a6 = *a6 - (double)v21;
            }
            TheadTable::TheadTable((TheadTable *)v25, this[1]);
            __int16 v22 = *(_WORD *)(TheadTable::GetHead((TheadTable *)v25) + 16);
            TDataReference::~TDataReference((TDataReference *)v25);
            if ((v22 & 0x2000) != 0) {
              goto LABEL_18;
            }
            double v23 = *a3;
            int v24 = (int)(*a3 - (double)v28 + v26 * 0.5);
          }
          else
          {
            double v23 = *a3;
            int v24 = (int)(*a3 - (double)v28);
            if (!v24)
            {
LABEL_18:
              uint64_t v18 = 1;
              goto LABEL_10;
            }
          }
          *a3 = v23 - (double)v24;
          *a5 = *a5 - (double)v24;
          goto LABEL_18;
        }
      }
    }
  }
  uint64_t v18 = 0;
LABEL_10:
  TDataReference::~TDataReference((TDataReference *)&v29);
  return v18;
}

void sub_1B5316BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void TTrueTypeTransformedQuadOutlineContext::~TTrueTypeTransformedQuadOutlineContext(TTrueTypeTransformedQuadOutlineContext *this)
{
}

uint64_t TTrueTypeTransformedQuadOutlineContext::GetKind(TTrueTypeTransformedQuadOutlineContext *this)
{
  return *((unsigned int *)this + 34);
}

uint64_t TTrueTypeTransformedQuadOutlineContext::CurveTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v6)(double *__return_ptr, void *);
  void *v7;
  uint64_t v8;
  void (*v9)(double *__return_ptr, void *, uint64_t);
  void *v10;
  double v12[2];
  double v13[2];

  long long v6 = *(void (**)(double *__return_ptr, void *))(a1 + 120);
  uint64_t v5 = *(void *)(a1 + 128);
  uint64_t v7 = (void *)(a1 + (v5 >> 1));
  if (v5) {
    long long v6 = *(void (**)(double *__return_ptr, void *))(*v7 + v6);
  }
  v6(v13, v7);
  BOOL v9 = *(void (**)(double *__return_ptr, void *, uint64_t))(a1 + 120);
  uint64_t v8 = *(void *)(a1 + 128);
  uint64_t v10 = (void *)(a1 + (v8 >> 1));
  if (v8) {
    BOOL v9 = *(void (**)(double *__return_ptr, void *, uint64_t))(*v10 + v9);
  }
  v9(v12, v10, a3);
  return (*(uint64_t (**)(void, double, double, double, double))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v13[0], v13[1], v12[0], v12[1]);
}

uint64_t TTrueTypeTransformedQuadOutlineContext::LineTo(uint64_t a1)
{
  void (*v3)(double *__return_ptr, void *);
  void *v4;
  double v6[2];

  uint64_t v3 = *(void (**)(double *__return_ptr, void *))(a1 + 120);
  uint64_t v2 = *(void *)(a1 + 128);
  double v4 = (void *)(a1 + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(void (**)(double *__return_ptr, void *))(*v4 + v3);
  }
  v3(v6, v4);
  return (*(uint64_t (**)(void, double, double))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), v6[0], v6[1]);
}

uint64_t TTrueTypeTransformedQuadOutlineContext::MoveTo(uint64_t a1)
{
  void (*v3)(double *__return_ptr, void *);
  void *v4;
  double v6[2];

  uint64_t v3 = *(void (**)(double *__return_ptr, void *))(a1 + 120);
  uint64_t v2 = *(void *)(a1 + 128);
  double v4 = (void *)(a1 + (v2 >> 1));
  if (v2) {
    uint64_t v3 = *(void (**)(double *__return_ptr, void *))(*v4 + v3);
  }
  v3(v6, v4);
  return (*(uint64_t (**)(void, double, double))(**(void **)(a1 + 8) + 8))(*(void *)(a1 + 8), v6[0], v6[1]);
}

float64x2_t TTrueTypeTransformedQuadOutlineContext::TranslateTransformPoint@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result = vaddq_f64(*(float64x2_t *)(a1 + 104), *a2);
  *a3 = result;
  return result;
}

float64x2_t TTrueTypeTransformedQuadOutlineContext::ScaleTransformPoint@<Q0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  result.f64[0] = *(float64_t *)(a1 + 72);
  result.f64[1] = *(float64_t *)(a1 + 96);
  *a3 = vmlaq_f64(*(float64x2_t *)(a1 + 104), *a2, result);
  return result;
}

float64x2_t TTrueTypeTransformedQuadOutlineContext::AffineTransformPoint@<Q0>(uint64_t a1@<X0>, double *a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t result = vaddq_f64(*(float64x2_t *)(a1 + 104), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(a1 + 88), a2[1]), *(float64x2_t *)(a1 + 72), *a2));
  *a3 = result;
  return result;
}

void TTrueTypeBufferedQuadOutlineContext::~TTrueTypeBufferedQuadOutlineContext(TTrueTypeBufferedQuadOutlineContext *this)
{
}

uint64_t *TTrueTypeBufferedQuadOutlineContext::AddPoint(uint64_t *this, int a2, int a3, int a4)
{
  double v4 = (uint64_t *)this[9];
  int v5 = *((unsigned __int16 *)this + 40);
  *((_WORD *)this + 40) = v5 + 1;
  uint64_t v6 = *v4;
  uint64_t v7 = v4[1];
  if (v6 != v7)
  {
    while (*(_DWORD *)v6 != v5 || *(_DWORD *)(v6 + 4) != *((unsigned __int16 *)this + 41))
    {
      v6 += 12;
      if (v6 == v7) {
        return TTrueTypeQuadOutlineContext::AddPoint(this, a2, (unsigned __int16)a3, (unsigned __int16)a4);
      }
    }
  }
  if (v6 != v7 && v6 != 0)
  {
    *(_WORD *)(v6 + 8) = a3;
    *(_WORD *)(v6 + 10) = a4;
  }
  return TTrueTypeQuadOutlineContext::AddPoint(this, a2, (unsigned __int16)a3, (unsigned __int16)a4);
}

uint64_t TTrueTypeFontHandler::ParseOutline(TTrueTypeFontHandler *this, uint64_t a2, TTrueTypeQuadOutlineContext *a3, BOOL *a4)
{
  return (*(uint64_t (**)(TTrueTypeFontHandler *, uint64_t, TTrueTypeQuadOutlineContext *, void, BOOL *))(*(void *)this + 152))(this, a2, a3, 0, a4);
}

void TTrueTypeFontHandler::RenderGlyph(const TSFNTFont **this, uint64_t a2, TTrueTypeQuadOutlineContext *a3, unsigned int a4, BOOL *a5)
{
  uint64_t v182 = *MEMORY[0x1E4F143B8];
  unint64_t v176 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v174 = v10;
  long long v175 = v10;
  (*((void (**)(long long *__return_ptr))*this + 18))(&v174);
  unint64_t v11 = v176;
  if (!v176) {
    goto LABEL_222;
  }
  if (*((void *)&v174 + 1) && (uint64_t v12 = *(void *)(*((void *)&v174 + 1) + 8)) != 0) {
    uint64_t v13 = (unsigned __int16 *)(v12 + v175);
  }
  else {
    uint64_t v13 = 0;
  }
  long long v14 = (const unsigned __int8 *)v13 + v176;
  v149 = v13 + 5;
  if (v13 + 5 > (unsigned __int16 *)((char *)v13 + v176))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  int v15 = (int)bswap32(*v13) >> 16;
  v148 = this;
  if (a5)
  {
    if (v15 < 0)
    {
      if (v13 + 6 > (unsigned __int16 *)v14 || (*v149 & 4) == 0)
      {
LABEL_32:
        if (a4 >= 0x10)
        {
          v145 = __cxa_allocate_exception(0x10uLL);
          *(void *)v145 = &unk_1F0DD4440;
          v145[2] = 4;
        }
        *(void *)&long long v30 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v30 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v180[2] = v30;
        unsigned int v151 = a4 + 1;
        v180[1] = v30;
        v180[0] = v30;
        uint64_t v178 = 0;
        uint64_t v179 = 0;
        v181 = v180;
        long long v31 = v13 + 5;
        *(void *)v177 = 0;
        do
        {
          unint64_t v32 = (const unsigned __int8 *)(v31 + 2);
          if (v31 + 2 > (unsigned __int16 *)v14)
          {
            v137 = __cxa_allocate_exception(0x10uLL);
            *(void *)v137 = &unk_1F0DD4440;
            v137[2] = 4;
          }
          unsigned int v33 = bswap32(*v31);
          unsigned int v34 = HIWORD(v33);
          if ((v33 & 0x20000000) != 0) {
            unint64_t v32 = (const unsigned __int8 *)v31 + 5;
          }
          if ((v33 & 0x10000) != 0) {
            uint64_t v35 = 2;
          }
          else {
            uint64_t v35 = 1;
          }
          uint64_t v36 = v35 + ((v34 >> 3) & 1);
          if ((v34 & 0x40) != 0) {
            uint64_t v36 = v35 + 2;
          }
          uint64_t v37 = v35 | 4;
          if ((v34 & 0x80) == 0) {
            uint64_t v37 = v36;
          }
          long long v38 = (unsigned __int16 *)&v32[2 * v37];
          if ((v38 < (unsigned __int16 *)v32 || v38 > (unsigned __int16 *)v14)
            && (v32 + 2 > v14 || (unint64_t)(v14 - v32) >> 1 != v37))
          {
            v140 = __cxa_allocate_exception(0x10uLL);
            *(void *)v140 = &unk_1F0DD4440;
            v140[2] = 4;
          }
          if ((v34 & 2) == 0)
          {
            if (v34)
            {
              unsigned int v41 = bswap32(*(unsigned __int16 *)v32) >> 16;
              unsigned int v42 = bswap32(*((unsigned __int16 *)v32 + 1)) >> 16;
            }
            else
            {
              unsigned int v41 = *v32;
              unsigned int v42 = v32[1];
            }
            TSparseCoordsListPerComposits::AddCoords((TSparseCoordsListPerComposits *)v177, v41, a2);
            if ((v34 & 0x2000) != 0)
            {
              if ((char *)v31 + 5 > (char *)v14)
              {
                v141 = __cxa_allocate_exception(0x10uLL);
                *(void *)v141 = &unk_1F0DD4440;
                v141[2] = 4;
              }
              uint64_t v43 = 0;
              int v44 = 0;
              do
                int v44 = *((unsigned __int8 *)v31 + v43++ + 2) | (v44 << 8);
              while (v43 != 3);
              TSparseCoordsListPerComposits::AddCoords((TSparseCoordsListPerComposits *)v177, v42, v44);
            }
            else
            {
              TSparseCoordsListPerComposits::AddCoords((TSparseCoordsListPerComposits *)v177, v42, bswap32(v31[1]) >> 16);
            }
          }
          long long v31 = v38;
        }
        while ((v34 & 0x20) != 0);
        long long v45 = v148;
        if (*(void *)v177 != v178)
        {
          *(_OWORD *)v157 = xmmword_1B53FFEC8;
          long long v158 = unk_1B53FFED8;
          long long v159 = xmmword_1B53FFEE8;
          long long v160 = unk_1B53FFEF8;
          long long v161 = xmmword_1B53FFF08;
          uint64_t v46 = *((void *)a3 + 1);
          LOBYTE(v161) = 0;
          *(void *)v157 = &unk_1F0DD8388;
          *(void *)&v157[8] = v46;
          *((void *)&v161 + 1) = v177;
          int v164 = -1431655766;
          __int16 v162 = 0;
          __int16 v163 = a2;
          long long v47 = v149;
          int v147 = a2;
          while (1)
          {
            long long v48 = v47 + 2;
            unsigned int v49 = bswap32(*v47) >> 16;
            if ((v49 & 0x2000) != 0)
            {
              uint64_t v51 = 0;
              LODWORD(v50) = 0;
              do
                uint64_t v50 = *((unsigned __int8 *)v47 + v51++ + 2) | (v50 << 8);
              while (v51 != 3);
              long long v48 = (unsigned __int16 *)((char *)v47 + 5);
            }
            else
            {
              uint64_t v50 = bswap32(v47[1]) >> 16;
            }
            __int16 v152 = v49;
            if (v49)
            {
              int v55 = bswap32(v48[1]);
              long long v47 = v48 + 2;
              int v52 = (int)bswap32(*v48) >> 16;
              if ((v49 & 2) != 0)
              {
                int v61 = 0;
                int v53 = v55 >> 16;
                goto LABEL_161;
              }
              unsigned int v54 = HIWORD(v55);
            }
            else
            {
              long long v47 = v48 + 1;
              int v52 = *(char *)v48;
              int v53 = *((char *)v48 + 1);
              if ((v49 & 2) != 0)
              {
                int v61 = 0;
                goto LABEL_161;
              }
              LOWORD(v52) = *(unsigned __int8 *)v48;
              unsigned int v54 = *((unsigned __int8 *)v48 + 1);
            }
            uint64_t v56 = *(void *)v177;
            if (*(void *)v177 != v178)
            {
              while (*(_DWORD *)v56 != (unsigned __int16)v52 || *(_DWORD *)(v56 + 4) != a2)
              {
                v56 += 12;
                if (v56 == v178) {
                  goto LABEL_261;
                }
              }
            }
            if (v56 == v178 || !v56)
            {
LABEL_261:
              v135 = __cxa_allocate_exception(0x10uLL);
              *(void *)v135 = &unk_1F0DD4440;
              v135[2] = 4;
            }
            v150 = v47;
            *(void *)&long long v57 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v57 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v155 = v57;
            long long v156 = v57;
            (*((void (**)(long long *__return_ptr, const TSFNTFont **, uint64_t, unint64_t *))*v45 + 18))(&v155, v45, v50, &v176);
            uint64_t v58 = *(void *)v177;
            if (*(void *)v177 != v178)
            {
              while (*(_DWORD *)v58 != v54 || *(_DWORD *)(v58 + 4) != v50)
              {
                v58 += 12;
                if (v58 == v178) {
                  goto LABEL_260;
                }
              }
            }
            if (!v176 || v58 == v178 || !v58)
            {
LABEL_260:
              v134 = __cxa_allocate_exception(0x10uLL);
              *(void *)v134 = &unk_1F0DD4440;
              v134[2] = 4;
            }
            if (*((void *)&v155 + 1))
            {
              uint64_t v59 = *(void *)(*((void *)&v155 + 1) + 8);
              unint64_t v60 = (unsigned __int16 *)(v59 + v156);
              if (!v59) {
                unint64_t v60 = 0;
              }
            }
            else
            {
              unint64_t v60 = 0;
            }
            v62 = (const unsigned __int8 *)v60 + v176;
            v63 = v60 + 5;
            if (v60 + 5 > (unsigned __int16 *)((char *)v60 + v176)) {
              goto LABEL_262;
            }
            int v64 = (int)bswap32(*v60) >> 16;
            if (v64 < 1) {
              goto LABEL_260;
            }
            uint64_t v65 = (v64 + 1);
            unint64_t v66 = (unint64_t)&v63[v65];
            BOOL v67 = v66 < (unint64_t)v63 || v66 > (unint64_t)v62;
            if (v67 && (v60 + 6 > (unsigned __int16 *)v62 || (v176 - 10) >> 1 != v65)
              || ((uint64_t v68 = (uint64_t)&v63[v64] + (bswap32(v63[(unsigned __int16)v64]) >> 16),
                   v69 = (const unsigned __int8 *)(v68 + 2),
                   unint64_t v70 = v68 + 3,
                   v60 + 6 <= (unsigned __int16 *)v69)
                ? (BOOL v71 = v70 > (unint64_t)v62)
                : (BOOL v71 = 1),
                  !v71 ? (BOOL v72 = v69 >= v62) : (BOOL v72 = 1),
                  v72))
            {
LABEL_262:
              v136 = __cxa_allocate_exception(0x10uLL);
              *(void *)v136 = &unk_1F0DD4440;
              v136[2] = 4;
            }
            uint64_t v73 = 0;
            uint64_t v74 = 0;
            unint64_t v153 = bswap32(v63[v64 - 1]) >> 16;
            unint64_t v75 = v153 + 1;
            v76 = v69;
            while (1)
            {
              unsigned __int8 v77 = *v76;
              if ((*v76 & 8) != 0) {
                break;
              }
              uint64_t v78 = v74 + 2;
              if ((*v76 & 0x10) != 0) {
                uint64_t v78 = v74;
              }
              if ((*v76 & 2) != 0) {
                ++v74;
              }
              else {
                uint64_t v74 = v78;
              }
              uint64_t v79 = v73 + 2;
              if ((*v76 & 0x20) != 0) {
                uint64_t v79 = v73;
              }
              if ((*v76 & 4) != 0) {
                ++v73;
              }
              else {
                uint64_t v73 = v79;
              }
              --v75;
              ++v76;
              if (!v75) {
                goto LABEL_142;
              }
LABEL_141:
              if (v76 >= v62) {
                goto LABEL_142;
              }
            }
            if (v76 + 1 >= v62) {
              goto LABEL_262;
            }
            uint64_t v80 = v76[1];
            if (!v76[1]) {
              goto LABEL_262;
            }
            v76 += 2;
            uint64_t v81 = v80 + 1;
            uint64_t v82 = v74 + 2 * v81;
            if ((v77 & 0x10) != 0) {
              uint64_t v82 = v74;
            }
            v74 += v81;
            if ((v77 & 2) == 0) {
              uint64_t v74 = v82;
            }
            uint64_t v83 = v73 + 2 * v81;
            if ((v77 & 0x20) != 0) {
              uint64_t v83 = v73;
            }
            if ((v77 & 4) != 0) {
              v73 += v81;
            }
            else {
              uint64_t v73 = v83;
            }
            v75 -= v81;
            if (v75) {
              goto LABEL_141;
            }
LABEL_142:
            if (v75) {
              goto LABEL_262;
            }
            *(void *)&long long v169 = 0xAAAAAAAAAAAAAAAALL;
            *(void *)&long long v84 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v84 + 1) = 0xAAAAAAAAAAAAAAAALL;
            long long v167 = v84;
            *(_OWORD *)__p = v84;
            long long v165 = v84;
            long long v166 = v84;
            TPointParser::TPointParser((TPointParser *)&v165, v69, v76, &v76[v74], v73, v62);
            BOOL v85 = 0;
            __int16 v86 = 0;
            __int16 v87 = 0;
            unint64_t v88 = 0;
            while (1)
            {
              unint64_t Point = TPointParser::GetPoint((TPointParser *)&v165, v88, 0);
              v87 += Point;
              v86 += WORD2(Point);
              if (v54 == v88) {
                break;
              }
              BOOL v85 = v88++ >= v153;
              if (v153 + 1 == v88)
              {
                BOOL v85 = 1;
                long long v45 = v148;
                LODWORD(a2) = v147;
                goto LABEL_157;
              }
            }
            uint64_t v90 = *(void *)v177;
            if (*(void *)v177 == v178)
            {
              long long v45 = v148;
              LODWORD(a2) = v147;
            }
            else
            {
              long long v45 = v148;
              LODWORD(a2) = v147;
              while (*(_DWORD *)v90 != v54 || *(_DWORD *)(v90 + 4) != v50)
              {
                v90 += 12;
                if (v90 == v178) {
                  goto LABEL_157;
                }
              }
            }
            if (v90 != v178 && v90)
            {
              *(_WORD *)(v90 + 8) = v87;
              *(_WORD *)(v90 + 10) = v86;
            }
LABEL_157:
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
            if (v85) {
              goto LABEL_260;
            }
            int v52 = *(__int16 *)(v56 + 8) - *(__int16 *)(v58 + 8);
            int v53 = *(__int16 *)(v56 + 10) - *(__int16 *)(v58 + 10);
            TDataReference::~TDataReference((TDataReference *)&v155);
            int v61 = 1;
            long long v47 = v150;
            LOWORD(v49) = v152;
LABEL_161:
            if ((v49 & 0xC8) != 0)
            {
              double v91 = (double)((int)bswap32(*v47) >> 16) * 0.0000610351562;
              if ((v49 & 0x80) != 0)
              {
                double v94 = (double)((int)bswap32(v47[1]) >> 16) * 0.0000610351562;
                double v95 = (double)((int)bswap32(v47[2]) >> 16) * 0.0000610351562;
                double v96 = (double)((int)bswap32(v47[3]) >> 16) * 0.0000610351562;
                long long v171 = xmmword_1B53FFF80;
                long long v172 = unk_1B53FFF90;
                long long v173 = xmmword_1B53FFFA0;
                long long v167 = xmmword_1B53FFF40;
                *(_OWORD *)__p = unk_1B53FFF50;
                long long v169 = xmmword_1B53FFF60;
                long long v170 = unk_1B53FFF70;
                long long v165 = xmmword_1B53FFF20;
                long long v166 = unk_1B53FFF30;
                TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v165, (const TTrueTypeQuadOutlineContext *)v157, v91, v94, v95, v96, v52, v53, (v49 & 0x1800) == 2048);
                (*((void (**)(const TSFNTFont **, uint64_t, long long *, void, void))*v45 + 19))(v45, v50, &v165, v151, 0);
                v47 += 4;
              }
              else if ((v49 & 0x40) != 0)
              {
                double v97 = (double)((int)bswap32(v47[1]) >> 16) * 0.0000610351562;
                long long v171 = xmmword_1B53FFF80;
                long long v172 = unk_1B53FFF90;
                long long v173 = xmmword_1B53FFFA0;
                long long v167 = xmmword_1B53FFF40;
                *(_OWORD *)__p = unk_1B53FFF50;
                long long v169 = xmmword_1B53FFF60;
                long long v170 = unk_1B53FFF70;
                long long v165 = xmmword_1B53FFF20;
                long long v166 = unk_1B53FFF30;
                TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v165, (const TTrueTypeQuadOutlineContext *)v157, v91, v97, v52, v53, (v49 & 0x1800) == 2048);
                (*((void (**)(const TSFNTFont **, uint64_t, long long *, void, void))*v45 + 19))(v45, v50, &v165, v151, 0);
                v47 += 2;
              }
              else
              {
                long long v171 = xmmword_1B53FFF80;
                long long v172 = unk_1B53FFF90;
                long long v173 = xmmword_1B53FFFA0;
                long long v167 = xmmword_1B53FFF40;
                *(_OWORD *)__p = unk_1B53FFF50;
                long long v169 = xmmword_1B53FFF60;
                long long v170 = unk_1B53FFF70;
                long long v165 = xmmword_1B53FFF20;
                long long v166 = unk_1B53FFF30;
                TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v165, (const TTrueTypeQuadOutlineContext *)v157, v91, v52, v53, (v49 & 0x1800) == 2048);
                (*((void (**)(const TSFNTFont **, uint64_t, long long *, void, void))*v45 + 19))(v45, v50, &v165, v151, 0);
                ++v47;
              }
LABEL_176:
              if ((v152 & 0x20) == 0) {
                goto LABEL_177;
              }
            }
            else
            {
              char v92 = (v52 == 0) & ~(_BYTE)v61;
              if (v53) {
                char v92 = 0;
              }
              if (v52 != v53) {
                int v61 = 0;
              }
              if ((v92 & 1) == 0 && !v61)
              {
                *((void *)&v172 + 1) = unk_1B53FFF98;
                long long v173 = xmmword_1B53FFFA0;
                long long v167 = xmmword_1B53FFF40;
                *(_OWORD *)__p = unk_1B53FFF50;
                *(void *)&long long v169 = 0xAAAAAAAAAAAAAA00;
                long long v166 = unk_1B53FFF30;
                *(void *)&long long v165 = &unk_1F0E00138;
                *((void *)&v165 + 1) = *(void *)&v157[8];
                *((void *)&v169 + 1) = 0x3FF0000000000000;
                long long v170 = 0uLL;
                *(void *)&long long v171 = 0x3FF0000000000000;
                *((double *)&v171 + 1) = (double)v52;
                *(double *)&long long v172 = (double)v53;
                float64x2_t TransformFunction = TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction((TTrueTypeTransformedQuadOutlineContext *)&v165, (const TTrueTypeQuadOutlineContext *)v157, 1);
                (*((void (**)(const TSFNTFont **, uint64_t, long long *, void, void, float64x2_t))*v45 + 19))(v45, v50, &v165, v151, 0, TransformFunction);
                goto LABEL_176;
              }
              (*((void (**)(const TSFNTFont **, uint64_t, unsigned __int8 *, void, void))*v45 + 19))(v45, v50, v157, v151, 0);
              if ((v152 & 0x20) == 0)
              {
LABEL_177:
                std::vector<TCoordPairs,TInlineBufferAllocator<TCoordPairs,4ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)v177);
                goto LABEL_222;
              }
            }
          }
        }
        v115 = v149;
        while (1)
        {
          v116 = (char *)(v115 + 2);
          unsigned int v117 = bswap32(*v115) >> 16;
          if ((v117 & 0x2000) != 0)
          {
            uint64_t v121 = 0;
            LODWORD(v118) = 0;
            do
              uint64_t v118 = *((unsigned __int8 *)v115 + v121++ + 2) | (v118 << 8);
            while (v121 != 3);
            v116 = (char *)v115 + 5;
            if ((v117 & 1) == 0)
            {
LABEL_230:
              v115 = (unsigned __int16 *)(v116 + 2);
              int v122 = *v116;
              int v123 = v116[1];
              if ((v117 & 2) != 0) {
                int v119 = v122;
              }
              else {
                int v119 = v122;
              }
              if ((v117 & 2) != 0) {
                int v120 = v123;
              }
              else {
                int v120 = v123;
              }
              goto LABEL_236;
            }
          }
          else
          {
            uint64_t v118 = bswap32(v115[1]) >> 16;
            if ((v117 & 1) == 0) {
              goto LABEL_230;
            }
          }
          v115 = (unsigned __int16 *)(v116 + 4);
          int v119 = (int)bswap32(*(unsigned __int16 *)v116) >> 16;
          int v120 = (int)bswap32(*((unsigned __int16 *)v116 + 1)) >> 16;
LABEL_236:
          if ((v117 & 0xC8) != 0)
          {
            double v124 = (double)((int)bswap32(*v115) >> 16) * 0.0000610351562;
            if ((v117 & 0x80) != 0)
            {
              double v130 = (double)((int)bswap32(v115[1]) >> 16) * 0.0000610351562;
              double v131 = (double)((int)bswap32(v115[2]) >> 16) * 0.0000610351562;
              double v132 = (double)((int)bswap32(v115[3]) >> 16) * 0.0000610351562;
              long long v171 = xmmword_1B53FFF80;
              long long v172 = unk_1B53FFF90;
              long long v173 = xmmword_1B53FFFA0;
              long long v167 = xmmword_1B53FFF40;
              *(_OWORD *)__p = unk_1B53FFF50;
              long long v169 = xmmword_1B53FFF60;
              long long v170 = unk_1B53FFF70;
              long long v165 = xmmword_1B53FFF20;
              long long v166 = unk_1B53FFF30;
              TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v165, a3, v124, v130, v131, v132, v119, v120, (v117 & 0x1800) == 2048);
              (*((void (**)(const TSFNTFont **, uint64_t, long long *, void, void))*v148 + 19))(v148, v118, &v165, v151, 0);
              v115 += 4;
              if ((v117 & 0x20) == 0) {
                goto LABEL_177;
              }
            }
            else if ((v117 & 0x40) != 0)
            {
              double v133 = (double)((int)bswap32(v115[1]) >> 16) * 0.0000610351562;
              long long v171 = xmmword_1B53FFF80;
              long long v172 = unk_1B53FFF90;
              long long v173 = xmmword_1B53FFFA0;
              long long v167 = xmmword_1B53FFF40;
              *(_OWORD *)__p = unk_1B53FFF50;
              long long v169 = xmmword_1B53FFF60;
              long long v170 = unk_1B53FFF70;
              long long v165 = xmmword_1B53FFF20;
              long long v166 = unk_1B53FFF30;
              TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v165, a3, v124, v133, v119, v120, (v117 & 0x1800) == 2048);
              (*((void (**)(const TSFNTFont **, uint64_t, long long *, void, void))*v148 + 19))(v148, v118, &v165, v151, 0);
              v115 += 2;
              if ((v117 & 0x20) == 0) {
                goto LABEL_177;
              }
            }
            else
            {
              long long v171 = xmmword_1B53FFF80;
              long long v172 = unk_1B53FFF90;
              long long v173 = xmmword_1B53FFFA0;
              long long v167 = xmmword_1B53FFF40;
              *(_OWORD *)__p = unk_1B53FFF50;
              long long v169 = xmmword_1B53FFF60;
              long long v170 = unk_1B53FFF70;
              long long v165 = xmmword_1B53FFF20;
              long long v166 = unk_1B53FFF30;
              TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext((TTrueTypeTransformedQuadOutlineContext *)&v165, a3, v124, v119, v120, (v117 & 0x1800) == 2048);
              (*((void (**)(const TSFNTFont **, uint64_t, long long *, void, void))*v148 + 19))(v148, v118, &v165, v151, 0);
              ++v115;
              if ((v117 & 0x20) == 0) {
                goto LABEL_177;
              }
            }
          }
          else
          {
            if (v120) {
              char v125 = 0;
            }
            else {
              char v125 = (v119 == 0) & (v117 >> 1);
            }
            BOOL v127 = (v117 & 2) == 0 && v119 == v120;
            if ((v125 & 1) != 0 || v127)
            {
              (*((void (**)(const TSFNTFont **, uint64_t, TTrueTypeQuadOutlineContext *, void, void))*v148
               + 19))(v148, v118, a3, v151, 0);
            }
            else
            {
              long long v172 = unk_1B53FFF90;
              long long v173 = xmmword_1B53FFFA0;
              long long v167 = xmmword_1B53FFF40;
              *(_OWORD *)__p = unk_1B53FFF50;
              long long v170 = unk_1B53FFF70;
              long long v171 = xmmword_1B53FFF80;
              long long v169 = xmmword_1B53FFF60;
              long long v165 = xmmword_1B53FFF20;
              long long v166 = unk_1B53FFF30;
              uint64_t v128 = *((void *)a3 + 1);
              LOBYTE(v169) = 0;
              *(void *)&long long v165 = &unk_1F0E00138;
              *((void *)&v165 + 1) = v128;
              *((void *)&v169 + 1) = 0x3FF0000000000000;
              long long v170 = 0uLL;
              *(void *)&long long v171 = 0x3FF0000000000000;
              *((double *)&v171 + 1) = (double)v119;
              *(double *)&long long v172 = (double)v120;
              float64x2_t v129 = TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction((TTrueTypeTransformedQuadOutlineContext *)&v165, a3, 1);
              (*((void (**)(const TSFNTFont **, uint64_t, long long *, void, void, float64x2_t))*v148 + 19))(v148, v118, &v165, v151, 0, v129);
            }
            if ((v117 & 0x20) == 0) {
              goto LABEL_177;
            }
          }
        }
      }
    }
    else
    {
      if (!*v13) {
        goto LABEL_17;
      }
      unsigned int v16 = &v149[v15];
      if (v16 + 1 > (unsigned __int16 *)v14) {
        goto LABEL_17;
      }
      int v17 = (const unsigned __int8 *)v13 + 2 * v15 + (bswap32(*v16) >> 16) + 12;
      if (v17 >= v14 || (*v17 & 0x40) == 0) {
        goto LABEL_17;
      }
    }
    *a5 = 1;
  }
LABEL_17:
  if (v15 < 1)
  {
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_222;
    }
    goto LABEL_32;
  }
  v157[0] = 0;
  uint64_t v18 = (v15 + 1);
  __int16 v19 = &v149[v18];
  BOOL v20 = v19 < v149 || v19 > (unsigned __int16 *)v14;
  if (v20 && (v13 + 6 > (unsigned __int16 *)v14 || (v11 - 10) >> 1 != v18))
  {
    v146 = __cxa_allocate_exception(0x10uLL);
    *(void *)v146 = &unk_1F0DD4440;
    v146[2] = 4;
  }
  uint64_t v21 = (uint64_t)&v149[v15] + (bswap32(v149[(unsigned __int16)v15]) >> 16);
  __int16 v22 = (const unsigned __int8 *)(v21 + 2);
  double v23 = v13 + 6;
  unint64_t v24 = v21 + 3;
  if (v13 + 6 > (unsigned __int16 *)v22 || v24 > (unint64_t)v14)
  {
    v144 = __cxa_allocate_exception(0x10uLL);
    *(void *)v144 = &unk_1F0DD4440;
    v144[2] = 4;
  }
  unsigned int v26 = v149[v15 - 1];
  TheadTable::TheadTable((TheadTable *)&v165, this[1]);
  __int16 v27 = *(_WORD *)(TheadTable::GetHead((TheadTable *)&v165) + 16);
  TDataReference::~TDataReference((TDataReference *)&v165);
  if ((v27 & 0x2000) != 0)
  {
    LODWORD(v29) = 0;
  }
  else
  {
    LOWORD(v165) = 0;
    uint64_t v28 = (*((uint64_t (**)(const TSFNTFont **))*v148 + 16))(v148);
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v28 + 24))(v28, a2, &v165);
    LODWORD(v29) = (__int16)v165 - ((int)bswap32(v13[1]) >> 16);
  }
  if (v22 >= v14) {
    goto LABEL_264;
  }
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  unint64_t v154 = bswap32(v26) >> 16;
  unint64_t v100 = v154 + 1;
  unint64_t v101 = v22;
  while (1)
  {
    v157[0] = *v101;
    if ((v157[0] & 8) != 0) {
      break;
    }
    uint64_t v102 = v99 + 2;
    if ((v157[0] & 0x10) != 0) {
      uint64_t v102 = v99;
    }
    if ((v157[0] & 2) != 0) {
      ++v99;
    }
    else {
      uint64_t v99 = v102;
    }
    uint64_t v103 = v98 + 2;
    if ((v157[0] & 0x20) != 0) {
      uint64_t v103 = v98;
    }
    if ((v157[0] & 4) != 0) {
      ++v98;
    }
    else {
      uint64_t v98 = v103;
    }
    --v100;
    ++v101;
    if (!v100) {
      goto LABEL_207;
    }
LABEL_206:
    if (v101 >= v14) {
      goto LABEL_207;
    }
  }
  if (v101 + 1 >= v14) {
    goto LABEL_264;
  }
  uint64_t v104 = v101[1];
  if (!v101[1])
  {
    v139 = __cxa_allocate_exception(0x10uLL);
    *(void *)v139 = &unk_1F0DD4440;
    v139[2] = 4;
  }
  v101 += 2;
  uint64_t v105 = v104 + 1;
  uint64_t v106 = v99 + 2 * v105;
  if ((v157[0] & 0x10) != 0) {
    uint64_t v106 = v99;
  }
  v99 += v105;
  if ((v157[0] & 2) == 0) {
    uint64_t v99 = v106;
  }
  uint64_t v107 = v98 + 2 * v105;
  if ((v157[0] & 0x20) != 0) {
    uint64_t v107 = v98;
  }
  if ((v157[0] & 4) != 0) {
    v98 += v105;
  }
  else {
    uint64_t v98 = v107;
  }
  v100 -= v105;
  if (v100) {
    goto LABEL_206;
  }
LABEL_207:
  if (v100)
  {
LABEL_264:
    v138 = __cxa_allocate_exception(0x10uLL);
    *(void *)v138 = &unk_1F0DD4440;
    v138[2] = 4;
  }
  *(void *)&long long v169 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v108 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v108 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v167 = v108;
  *(_OWORD *)__p = v108;
  long long v165 = v108;
  long long v166 = v108;
  TPointParser::TPointParser((TPointParser *)&v165, v22, v101, &v101[v99], v98, v14);
  LODWORD(v22) = 0;
  unint64_t v109 = 0;
  unint64_t v110 = bswap32(*v149) >> 16;
  BOOL v111 = 1;
  do
  {
    unint64_t v112 = TPointParser::GetPoint((TPointParser *)&v165, v109, (char *)v157);
    uint64_t v29 = (v29 + v112);
    __int16 v22 = (const unsigned __int8 *)(v22 + HIDWORD(v112));
    if (!v111 || (*((unsigned char *)a3 + 64) = 1, (v157[0] & 1) != 0) || v109 == v110)
    {
      (*(void (**)(TTrueTypeQuadOutlineContext *))(*(void *)a3 + 16))(a3);
    }
    else
    {
      if (v110 > v154)
      {
        v142 = __cxa_allocate_exception(0x10uLL);
        *(void *)v142 = &unk_1F0DD4440;
        v142[2] = 4;
      }
      v177[0] = -86;
      unint64_t v114 = TPointParser::GetPoint((TPointParser *)&v165, v110, (char *)v177);
      (*(void (**)(TTrueTypeQuadOutlineContext *, void, void, uint64_t, const unsigned __int8 *, void))(*(void *)a3 + 24))(a3, (v29 + v114), (v22 + HIDWORD(v114)), v29, v22, v177[0] & 1);
    }
    BOOL v111 = v109 == v110;
    if (v109 == v110)
    {
      unsigned int v113 = *v23++;
      unint64_t v110 = bswap32(v113) >> 16;
      if (!*((unsigned char *)a3 + 66)) {
        (*(void (**)(TTrueTypeQuadOutlineContext *, char *, char *))(*(void *)a3 + 40))(a3, (char *)a3 + 16, (char *)a3 + 48);
      }
    }
    ++v109;
  }
  while (v154 + 1 != v109);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_222:
  TDataReference::~TDataReference((TDataReference *)&v174);
}

void sub_1B5318528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  TDataReference::~TDataReference((TDataReference *)(v38 - 224));
  _Unwind_Resume(a1);
}

unint64_t TPointParser::GetPoint(TPointParser *this, unint64_t a2, char *a3)
{
  int v5 = (char *)*((void *)this + 6);
  double v4 = (char *)*((void *)this + 7);
  unint64_t v6 = (v4 - v5) / 12;
  if (v6 > a2)
  {
    uint64_t v7 = &v5[12 * a2];
    unint64_t v8 = *(void *)(v7 + 4);
    if (a3) {
      *a3 = *v7;
    }
    unint64_t v9 = HIDWORD(v8);
    return v8 | (v9 << 32);
  }
  unint64_t v11 = *((void *)this + 5);
  if (v11 > a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  if (v11 >= a2) {
    goto LABEL_34;
  }
  unint64_t v12 = a2 + 1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 8) - (void)v5) >> 2) < a2 + 1)
  {
    if (v12 > 0x1555555555555555) {
      goto LABEL_74;
    }
    uint64_t v13 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<unsigned char,IntPoint>>>(v12);
    double v4 = &v13[12 * v6];
    int v15 = &v13[12 * v14];
    int v17 = (_DWORD *)*((void *)this + 6);
    unsigned int v16 = (_DWORD *)*((void *)this + 7);
    int v5 = v4;
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *(void *)(v16 - 3);
        v16 -= 3;
        int v19 = v16[2];
        *(void *)(v5 - 12) = v18;
        v5 -= 12;
        *((_DWORD *)v5 + 2) = v19;
      }
      while (v16 != v17);
      unsigned int v16 = (_DWORD *)*((void *)this + 6);
    }
    *((void *)this + 6) = v5;
    *((void *)this + 7) = v4;
    *((void *)this + 8) = v15;
    if (v16)
    {
      operator delete(v16);
      int v5 = (char *)*((void *)this + 6);
      double v4 = (char *)*((void *)this + 7);
    }
  }
  unint64_t v20 = *((void *)this + 5);
  unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 2);
  unint64_t v22 = v20 - v21;
  if (v20 <= v21)
  {
    if (v20 < v21) {
      *((void *)this + 7) = &v5[12 * v20];
    }
    goto LABEL_34;
  }
  uint64_t v23 = *((void *)this + 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v4) >> 2) < v22)
  {
    if (v20 <= 0x1555555555555555)
    {
      unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v5) >> 2);
      unint64_t v25 = 0x5555555555555556 * ((v23 - (uint64_t)v5) >> 2);
      if (v25 <= v20) {
        unint64_t v25 = *((void *)this + 5);
      }
      if (v24 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v26 = 0x1555555555555555;
      }
      else {
        unint64_t v26 = v25;
      }
      __int16 v27 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<unsigned char,IntPoint>>>(v26);
      uint64_t v29 = &v27[12 * v21];
      long long v30 = &v27[12 * v20];
      long long v31 = v29;
      do
      {
        *long long v31 = 0;
        *((_DWORD *)v31 + 1) = 0;
        *((_DWORD *)v31 + 2) = 0;
        v31 += 12;
      }
      while (v31 != v30);
      unint64_t v32 = &v27[12 * v28];
      unsigned int v34 = (_DWORD *)*((void *)this + 6);
      unsigned int v33 = (_DWORD *)*((void *)this + 7);
      if (v33 != v34)
      {
        do
        {
          uint64_t v35 = *(void *)(v33 - 3);
          v33 -= 3;
          int v36 = v33[2];
          *(void *)(v29 - 12) = v35;
          v29 -= 12;
          *((_DWORD *)v29 + 2) = v36;
        }
        while (v33 != v34);
        unsigned int v33 = (_DWORD *)*((void *)this + 6);
      }
      *((void *)this + 6) = v29;
      *((void *)this + 7) = v30;
      *((void *)this + 8) = v32;
      if (v33) {
        operator delete(v33);
      }
      goto LABEL_34;
    }
LABEL_74:
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  uint64_t v37 = &v4[12 * v22];
  do
  {
    *double v4 = 0;
    *((_DWORD *)v4 + 1) = 0;
    *((_DWORD *)v4 + 2) = 0;
    v4 += 12;
  }
  while (v4 != v37);
  *((void *)this + 7) = v37;
LABEL_34:
  LODWORD(v8) = 0;
  LODWORD(v9) = 0;
  do
  {
    uint64_t v38 = *((void *)this + 4);
    if (v38)
    {
      *((void *)this + 4) = v38 - 1;
      char v39 = *((unsigned char *)this + 24);
    }
    else
    {
      long long v40 = (char *)(*(void *)this)++;
      char v39 = *v40;
      *((unsigned char *)this + 24) = *v40;
      if ((v39 & 8) != 0)
      {
        *(void *)this = v40 + 2;
        *((void *)this + 4) = v40[1];
      }
    }
    if ((v39 & 2) != 0)
    {
      int v44 = (unsigned __int8 *)*((void *)this + 1);
      *((void *)this + 1) = v44 + 1;
      unsigned int v45 = *v44;
      if ((v39 & 0x10) != 0) {
        unsigned int v43 = v45;
      }
      else {
        unsigned int v43 = -v45;
      }
      if ((v39 & 4) != 0)
      {
LABEL_50:
        unsigned int v49 = (unsigned __int8 *)*((void *)this + 2);
        *((void *)this + 2) = v49 + 1;
        unsigned int v50 = *v49;
        if ((v39 & 0x20) != 0) {
          uint64_t v48 = v50;
        }
        else {
          uint64_t v48 = -v50;
        }
        goto LABEL_54;
      }
    }
    else if ((v39 & 0x10) != 0)
    {
      unsigned int v43 = 0;
      if ((v39 & 4) != 0) {
        goto LABEL_50;
      }
    }
    else
    {
      unsigned int v41 = (char *)*((void *)this + 1);
      *((void *)this + 1) = v41 + 1;
      int v42 = *v41;
      *((void *)this + 1) = v41 + 2;
      unsigned int v43 = v41[1] | (v42 << 8);
      if ((v39 & 4) != 0) {
        goto LABEL_50;
      }
    }
    if ((v39 & 0x20) != 0)
    {
      uint64_t v48 = 0;
    }
    else
    {
      uint64_t v46 = (char *)*((void *)this + 2);
      *((void *)this + 2) = v46 + 1;
      int v47 = *v46;
      *((void *)this + 2) = v46 + 2;
      uint64_t v48 = v46[1] | (v47 << 8);
    }
LABEL_54:
    if (v11 < a2)
    {
      unint64_t v51 = *((void *)this + 7);
      unint64_t v52 = *((void *)this + 8);
      if (v51 >= v52)
      {
        uint64_t v54 = *((void *)this + 6);
        unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51 - v54) >> 2);
        unint64_t v56 = v55 + 1;
        if (v55 + 1 > 0x1555555555555555) {
          goto LABEL_74;
        }
        if (0x5555555555555556 * ((uint64_t)(v52 - v54) >> 2) > v56) {
          unint64_t v56 = 0x5555555555555556 * ((uint64_t)(v52 - v54) >> 2);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - v54) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
          unint64_t v57 = 0x1555555555555555;
        }
        else {
          unint64_t v57 = v56;
        }
        uint64_t v58 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<unsigned char,IntPoint>>>(v57);
        unint64_t v60 = &v58[12 * v55];
        *unint64_t v60 = *((unsigned char *)this + 24);
        *(void *)(v60 + 4) = v43 | (unint64_t)(v48 << 32);
        v62 = (_DWORD *)*((void *)this + 6);
        int v61 = (_DWORD *)*((void *)this + 7);
        v63 = v60;
        if (v61 != v62)
        {
          do
          {
            uint64_t v64 = *(void *)(v61 - 3);
            v61 -= 3;
            int v65 = v61[2];
            *(void *)(v63 - 12) = v64;
            v63 -= 12;
            *((_DWORD *)v63 + 2) = v65;
          }
          while (v61 != v62);
          int v61 = (_DWORD *)*((void *)this + 6);
        }
        int v53 = v60 + 12;
        *((void *)this + 6) = v63;
        *((void *)this + 7) = v60 + 12;
        *((void *)this + 8) = &v58[12 * v59];
        if (v61) {
          operator delete(v61);
        }
      }
      else
      {
        *(unsigned char *)unint64_t v51 = v39;
        *(void *)(v51 + 4) = v43 | (unint64_t)(v48 << 32);
        int v53 = (char *)(v51 + 12);
      }
      *((void *)this + 7) = v53;
    }
    LODWORD(v8) = v43 + v8;
    unint64_t v9 = (v48 + v9);
    unint64_t v66 = *((void *)this + 5);
    *((void *)this + 5) = v66 + 1;
  }
  while (v66 < a2);
  if (a3) {
    *a3 = *((unsigned char *)this + 24);
  }
  return v8 | (v9 << 32);
}

void TTrueTypeQuadOutlineContext::~TTrueTypeQuadOutlineContext(TTrueTypeQuadOutlineContext *this)
{
}

uint64_t TTrueTypeQuadOutlineContext::GetKind(TTrueTypeQuadOutlineContext *this)
{
  return 0;
}

uint64_t TTrueTypeQuadOutlineContext::AddOffCurveStartPoint(TTrueTypeQuadOutlineContext *this, int a2, int a3, int a4, int a5, int a6)
{
  double v7 = (double)a2;
  double v8 = (double)a3;
  double v9 = (double)a4;
  double v10 = (double)a5;
  if (!a6)
  {
    double v8 = ((double)a3 + (double)a5) * 0.5;
    double v7 = ((double)a2 + (double)a4) * 0.5;
  }
  uint64_t result = (*(uint64_t (**)(TTrueTypeQuadOutlineContext *, void, void, void))(*(void *)this + 16))(this, 0, (int)v7, (int)v8);
  *((double *)this + 2) = v9;
  *((double *)this + 3) = v10;
  return result;
}

uint64_t TTrueTypeFontHandler::GetOutlinePath(uint64_t a1, uint64_t a2, void (***a3)(void), uint64_t a4)
{
  unint64_t v13 = 0xAAAAAAAAAAAAAA00;
  long long v10 = unk_1B53FFFC0;
  long long v11 = xmmword_1B53FFFD0;
  long long v12 = unk_1B53FFFE0;
  double v8 = &unk_1F0DD8338;
  double v9 = a3;
  (**a3)(a3);
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t))(*(void *)a1 + 136))(a1, a2, &v8, a4);
  return ((uint64_t (*)(void))(*v9)[5])(v9);
}

void TTrueTypeFontHandler::CreateStreamer(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t TSFNTFontHandler::GetHorizontalMetricsTable(TSFNTFontHandler *this)
{
  return (uint64_t)this + 16;
}

void TPointParser::TPointParser(TPointParser *this, const unsigned __int8 *a2, const unsigned __int8 *a3, const unsigned __int8 *a4, uint64_t a5, const unsigned __int8 *a6)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  *((void *)this + 2) = a4;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  if (&a4[a5] > a6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
}

void sub_1B5318D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  long long v11 = *(void **)(a10 + 48);
  if (v11)
  {
    *(void *)(a10 + 56) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<std::pair<unsigned char,IntPoint>>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(12 * a1);
}

void TSparseCoordsListPerComposits::AddCoords(TSparseCoordsListPerComposits *this, int a2, int a3)
{
  unint64_t v6 = *(char **)this;
  double v7 = (char *)*((void *)this + 1);
  double v8 = *(char **)this;
  if (*(char **)this != v7)
  {
    double v8 = *(char **)this;
    while (*(_DWORD *)v8 != a2 || *((_DWORD *)v8 + 1) != a3)
    {
      v8 += 12;
      if (v8 == v7) {
        goto LABEL_12;
      }
    }
  }
  if (v8 == v7 || v8 == 0)
  {
LABEL_12:
    unint64_t v10 = *((void *)this + 2);
    if ((unint64_t)v7 >= v10)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 2) + 1;
      if (v12 > 0x1555555555555555) {
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v10 - (void)v6) >> 2) > v12) {
        unint64_t v12 = 0x5555555555555556 * ((uint64_t)(v10 - (void)v6) >> 2);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v6) >> 2) >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x1555555555555555;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13)
      {
        uint64_t v14 = (char *)*((void *)this + 9);
        int v15 = &v14[12 * v13];
        if (v15 <= (char *)this + 72)
        {
          *((void *)this + 9) = v15;
        }
        else
        {
          if (v13 > 0x1555555555555555) {
            std::__throw_bad_array_new_length[abi:fe180100]();
          }
          uint64_t v14 = (char *)operator new(12 * v13);
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      unsigned int v16 = &v14[4 * ((v7 - v6) >> 2)];
      *(_DWORD *)unsigned int v16 = a2;
      *((_DWORD *)v16 + 1) = a3;
      *((_DWORD *)v16 + 2) = 0;
      int v17 = v16;
      if (v6 != v7)
      {
        do
        {
          uint64_t v18 = *(void *)(v7 - 12);
          v7 -= 12;
          int v19 = *((_DWORD *)v7 + 2);
          *(void *)(v17 - 12) = v18;
          v17 -= 12;
          *((_DWORD *)v17 + 2) = v19;
        }
        while (v7 != v6);
        unint64_t v6 = *(char **)this;
        unint64_t v10 = *((void *)this + 2);
      }
      long long v11 = v16 + 12;
      *(void *)this = v17;
      *((void *)this + 1) = v16 + 12;
      *((void *)this + 2) = &v14[12 * v13];
      if (v6)
      {
        unint64_t v20 = (char *)this + 72;
        if ((char *)this + 24 <= v6 && v20 > v6)
        {
          if (v10 == *(void *)v20) {
            *(void *)unint64_t v20 = v6;
          }
        }
        else
        {
          operator delete(v6);
        }
      }
    }
    else
    {
      *(_DWORD *)double v7 = a2;
      *((_DWORD *)v7 + 1) = a3;
      long long v11 = v7 + 12;
      *((_DWORD *)v7 + 2) = 0;
    }
    *((void *)this + 1) = v11;
  }
}

void std::vector<TCoordPairs,TInlineBufferAllocator<TCoordPairs,4ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    uint64_t v3 = (void *)(a1 + 72);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 72)) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

float64x2_t TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction(TTrueTypeTransformedQuadOutlineContext *this, const TTrueTypeQuadOutlineContext *a2, int a3)
{
  int v6 = (*(uint64_t (**)(const TTrueTypeQuadOutlineContext *))(*(void *)a2 + 32))(a2);
  if (v6 <= a3)
  {
    *((_DWORD *)this + 34) = a3;
    double v8 = TTrueTypeTransformedQuadOutlineContext::TranslateTransformPoint;
    if (a3 != 1)
    {
      if (a3 == 2) {
        double v8 = TTrueTypeTransformedQuadOutlineContext::ScaleTransformPoint;
      }
      else {
        double v8 = TTrueTypeTransformedQuadOutlineContext::AffineTransformPoint;
      }
    }
  }
  else
  {
    *((_DWORD *)this + 34) = v6;
    double v8 = TTrueTypeTransformedQuadOutlineContext::ScaleTransformPoint;
    if (v6 != 2) {
      double v8 = TTrueTypeTransformedQuadOutlineContext::AffineTransformPoint;
    }
    a3 = v6;
  }
  *((void *)this + 15) = v8;
  *((void *)this + 16) = 0;
  if (v6)
  {
    if (a3 == 3)
    {
      float64x2_t v9 = *(float64x2_t *)((char *)a2 + 88);
      *(float64x2_t *)((char *)this + 72) = vmlaq_n_f64(vmulq_n_f64(v9, *((double *)this + 10)), *(float64x2_t *)((char *)a2 + 72), *((double *)this + 9));
      double v10 = *((double *)this + 13);
      double v11 = *((double *)this + 14);
      float64x2_t v12 = *(float64x2_t *)((char *)a2 + 72);
      *(float64x2_t *)((char *)this + 88) = vmlaq_n_f64(vmulq_n_f64(v9, *((double *)this + 12)), v12, *((double *)this + 11));
      float64x2_t result = vaddq_f64(*(float64x2_t *)((char *)a2 + 104), vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)((char *)a2 + 88), v11), v12, v10));
LABEL_15:
      *(float64x2_t *)((char *)this + 104) = result;
      return result;
    }
    if (a3 != 2)
    {
      if (a3 != 1) {
        return result;
      }
      float64x2_t result = vaddq_f64(*(float64x2_t *)((char *)a2 + 104), *(float64x2_t *)((char *)this + 104));
      goto LABEL_15;
    }
    *((double *)this + 9) = *((double *)a2 + 9) * *((double *)this + 9);
    *((double *)this + 12) = *((double *)a2 + 12) * *((double *)this + 12);
    result.f64[0] = *((float64_t *)a2 + 9);
    result.f64[1] = *((float64_t *)a2 + 12);
    *(float64x2_t *)((char *)this + 104) = vmlaq_f64(*(float64x2_t *)((char *)a2 + 104), result, *(float64x2_t *)((char *)this + 104));
  }
  return result;
}

void TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext(TTrueTypeTransformedQuadOutlineContext *this, const TTrueTypeQuadOutlineContext *a2, double a3, double a4, double a5, double a6, int a7, int a8, int a9)
{
  uint64_t v9 = *((void *)a2 + 1);
  *((unsigned char *)this + 64) = 0;
  *(void *)this = &unk_1F0E00138;
  *((void *)this + 1) = v9;
  *((double *)this + 9) = a3;
  *((double *)this + 10) = a4;
  *((double *)this + 11) = a5;
  *((double *)this + 12) = a6;
  *((double *)this + 13) = (double)a7;
  *((double *)this + 14) = (double)a8;
  if (a9)
  {
    if (a3 == 0.0)
    {
      double v10 = fabs(a4);
    }
    else if (a4 == 0.0)
    {
      double v10 = fabs(a3);
    }
    else
    {
      double v10 = sqrt(a4 * a4 + a3 * a3);
    }
    *((double *)this + 13) = v10 * (double)a7;
    *((double *)this + 14) = fabs((a4 * a5 + a3 * a6) / v10) * (double)a8;
  }
  TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction(this, a2, 3);
}

void TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext(TTrueTypeTransformedQuadOutlineContext *this, const TTrueTypeQuadOutlineContext *a2, double a3, double a4, int a5, int a6, int a7)
{
  uint64_t v7 = *((void *)a2 + 1);
  *((unsigned char *)this + 64) = 0;
  *(void *)this = &unk_1F0E00138;
  *((void *)this + 1) = v7;
  *((double *)this + 9) = a3;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((double *)this + 12) = a4;
  *((double *)this + 13) = (double)a5;
  *((double *)this + 14) = (double)a6;
  if (a7)
  {
    *((double *)this + 13) = fabs(a3) * (double)a5;
    *((double *)this + 14) = fabs(a3 * a4 / a3) * (double)a6;
  }
  TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction(this, a2, 2);
}

void TTrueTypeTransformedQuadOutlineContext::TTrueTypeTransformedQuadOutlineContext(TTrueTypeTransformedQuadOutlineContext *this, const TTrueTypeQuadOutlineContext *a2, double a3, int a4, int a5, int a6)
{
  uint64_t v6 = *((void *)a2 + 1);
  *((unsigned char *)this + 64) = 0;
  *(void *)this = &unk_1F0E00138;
  *((void *)this + 1) = v6;
  *((double *)this + 9) = a3;
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  *((double *)this + 12) = a3;
  *((double *)this + 13) = (double)a4;
  *((double *)this + 14) = (double)a5;
  if (a6)
  {
    double v7 = fabs(a3);
    *((double *)this + 13) = v7 * (double)a4;
    *((double *)this + 14) = v7 * (double)a5;
  }
  TTrueTypeTransformedQuadOutlineContext::ConcatMatricesAndGetTransformFunction(this, a2, 2);
}

uint64_t DecomposeMapping(uint64_t a1, int a2)
{
  v2.i64[0] = (int)*(void *)a1;
  v2.i64[1] = (int)HIDWORD(*(void *)a1);
  float64x2_t v3 = vcvtq_f64_s64(v2);
  signed int v4 = sqrt(vaddvq_f64(vmulq_f64(v3, v3)));
  uint64_t v5 = 1;
  if (v4)
  {
    double v6 = (double)v4;
    uint64_t v7 = *(void *)(a1 + 12);
    v8.i64[0] = (int)v7;
    v8.i64[1] = SHIDWORD(v7);
    float64x2_t v9 = vcvtq_f64_s64(v8);
    int32x2_t v10 = vmovn_s64(vcvtq_s64_f64(vdivq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL), v3), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v4), 0))));
    int v11 = v10.i32[0] - v10.i32[1];
    if (v10.i32[0] != v10.i32[1])
    {
      if (v11 < 0) {
        int v11 = v10.i32[1] - v10.i32[0];
      }
      if ((long long *)(a1 + 36) != &identityMatrix)
      {
        *(_OWORD *)(a1 + 36) = identityMatrix;
        *(_OWORD *)(a1 + 52) = unk_1B54013C8;
        *(_DWORD *)(a1 + 68) = 0x40000000;
      }
      if (a2)
      {
        signed int v4 = (v4 + 0x8000) & 0xFFFF0000;
        int v12 = (v11 + 0x8000) & 0x7FFF0000;
      }
      else
      {
        int v12 = v11;
      }
      *(_DWORD *)(a1 + 36) = v4;
      *(_DWORD *)(a1 + 52) = v12;
      if ((long long *)(a1 + 72) != &identityMatrix)
      {
        *(_OWORD *)(a1 + 72) = identityMatrix;
        *(_OWORD *)(a1 + 88) = unk_1B54013C8;
        *(_DWORD *)(a1 + 104) = 0x40000000;
      }
      uint64_t v5 = 0;
      float64x2_t v13 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
      *(int32x2_t *)(a1 + 72) = vmovn_s64(vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(v3, v13), (float64x2_t)vdupq_lane_s64(COERCE__INT64(v6 * 0.0000152587891), 0)), 0x10uLL));
      *(int32x2_t *)(a1 + 84) = vmovn_s64(vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(v9, v13), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v11 * 0.0000152587891), 0)), 0x10uLL));
    }
  }
  return v5;
}

__n128 InvertRemainder(uint64_t a1, int *a2)
{
  signed int v2 = vcvtd_n_s64_f64((double)*a2 * 0.0000152587891 * ((double)a2[4] * 0.0000152587891), 0x10uLL);
  signed int v3 = vcvtd_n_s64_f64((double)a2[3] * 0.0000152587891 * ((double)a2[1] * 0.0000152587891), 0x10uLL);
  BOOL v4 = v2 < v3;
  if (v2 < v3) {
    int v5 = 1;
  }
  else {
    int v5 = -1;
  }
  if (v4) {
    int v6 = -1;
  }
  else {
    int v6 = 1;
  }
  __n128 result = *(__n128 *)a2;
  long long v8 = *((_OWORD *)a2 + 1);
  *(_DWORD *)(a1 + 32) = a2[8];
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v8;
  *(_DWORD *)a1 = v6 * a2[4];
  *(_DWORD *)(a1 + 12) = v5 * a2[3];
  *(_DWORD *)(a1 + 4) = v5 * a2[1];
  *(_DWORD *)(a1 + 16) = *a2 * v6;
  return result;
}

uint64_t TType1CIDFont::GetPSStreamType(TType1CIDFont *this, int a2)
{
  if ((a2 & 4) != 0)
  {
    int v2 = 4;
  }
  else
  {
    if ((a2 & 0x100) == 0)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      exception[4] = 10;
    }
    int v2 = 256;
  }
  return v2 | a2 & 0xFFFFF000;
}

uint64_t TType1CIDFont::CheckFontProtectionAndStreamType(TType1CIDFont *this, const unsigned int *a2, uint64_t a3)
{
  uint64_t v5 = (*(uint64_t (**)(TType1CIDFont *, uint64_t))(*(void *)this + 48))(this, a3);
  if ((v5 & 0x100) != 0)
  {
    unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 4) + 168))(*((void *)this + 4));
    int v8 = v6 >= 0xFFFF ? 0xFFFF : v6;
    if ((*(unsigned char *)(*((void *)this + 4) + 176) & 0x40) != 0)
    {
      if (!a2) {
        goto LABEL_14;
      }
      int v9 = 0;
      if (v8)
      {
        unsigned int v10 = (v8 + 31) >> 5;
        do
        {
          if (*a2)
          {
            v7.i32[0] = *a2;
            int8x8_t v7 = vcnt_s8(v7);
            v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
            v9 += v7.i32[0];
          }
          ++a2;
          --v10;
        }
        while (v10);
      }
      if (v9 == v8)
      {
LABEL_14:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DFC400;
        exception[4] = 10;
      }
    }
  }
  return v5;
}

uint64_t TType1CIDFont::StreamPSEncoding(TType1CIDFont *a1, unsigned int *a2, uint64_t a3, char a4, _DWORD *a5, uint64_t a6)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 6;
  }
  uint64_t v11 = TType1CIDFont::CheckFontProtectionAndStreamType(a1, 0, *a5);
  *a5 = v11;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, TType1CIDFont *, uint64_t, uint64_t))(*(void *)a1 + 240))(&v18, a1, v11, a3);
  int v12 = (__int32 *)v18;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v49 = v13;
  long long v50 = v13;
  long long v47 = v13;
  long long v48 = v13;
  long long v45 = v13;
  long long v46 = v13;
  long long v43 = v13;
  long long v44 = v13;
  long long v41 = v13;
  long long v42 = v13;
  long long v39 = v13;
  long long v40 = v13;
  long long v37 = v13;
  long long v38 = v13;
  long long v35 = v13;
  long long v36 = v13;
  long long v33 = v13;
  long long v34 = v13;
  long long v31 = v13;
  long long v32 = v13;
  long long v29 = v13;
  long long v30 = v13;
  long long v27 = v13;
  long long v28 = v13;
  long long v25 = v13;
  long long v26 = v13;
  long long v23 = v13;
  long long v24 = v13;
  long long v21 = v13;
  long long v22 = v13;
  *(_OWORD *)int v19 = v13;
  long long v20 = v13;
  if (!a2)
  {
    LODWORD(v14) = (*(uint64_t (**)(void *))(**((void **)a1 + 4) + 168))(*((void **)a1 + 4));
    if (v14 >= 0xFFFF) {
      uint64_t v14 = 0xFFFFLL;
    }
    else {
      uint64_t v14 = v14;
    }
    a2 = v19;
    TType1PSFont::SetEncoding(v14, v12, v19, v15);
  }
  (*(void (**)(TType1CIDFont *, unsigned int *, uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2, 1, a6);
  uint64_t result = v18;
  unint64_t v18 = 0;
  if (result) {
    return MEMORY[0x1BA9994A0](result, 0x1000C8052888210);
  }
  return result;
}

void sub_1B5319868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
}

void TType1CIDFont::StreamEncoding(void **a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v13 = v6;
  long long v14 = v6;
  *(_OWORD *)__p = v6;
  TStreamEncodingContext::TStreamEncodingContext((uint64_t)__p, a4, a3);
  uint64_t v7 = 0;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v30 = v8;
  long long v31 = v8;
  long long v28 = v8;
  long long v29 = v8;
  long long v26 = v8;
  long long v27 = v8;
  long long v24 = v8;
  long long v25 = v8;
  long long v22 = v8;
  long long v23 = v8;
  long long v20 = v8;
  long long v21 = v8;
  long long v18 = v8;
  long long v19 = v8;
  *(_OWORD *)unsigned int v16 = v8;
  long long v17 = v8;
  do
  {
    uint64_t v9 = *(unsigned __int16 *)(a2 + 2 * v7);
    if ((unsigned __int16)(v9 + 1) >= 2u)
    {
      unsigned int v10 = (*(uint64_t (**)(void *))(*a1[4] + 168))(a1[4]);
      unsigned int v11 = v10 >= 0xFFFF ? 0xFFFF : v10;
      if (v9 < v11)
      {
        ((void (*)(void **, uint64_t, unsigned __int8 *))(*a1)[29])(a1, v9, v16);
        TStreamEncodingContext::AddEncodingText((uint64_t)__p, v7, (const char *)v16);
      }
    }
    ++v7;
  }
  while (v7 != 256);
  TStreamEncodingContext::DumpPSEncoding((TStreamEncodingContext *)__p);
  __p[0] = &unk_1F0DFF190;
  if (__p[1])
  {
    *(void **)&long long v13 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_1B5319A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TType1CIDFont::SetupGlyphBits@<X0>(uint64_t this@<X0>, const unsigned int *a2@<X2>, void *a3@<X8>)
{
  if (a2)
  {
    this = (*(uint64_t (**)(void))(**(void **)(this + 32) + 168))(*(void *)(this + 32));
    if (this >= 0xFFFF) {
      int v4 = 0xFFFF;
    }
    else {
      int v4 = this;
    }
    if (v4) {
      operator new[]();
    }
  }
  *a3 = 0;
  return this;
}

void sub_1B5319B94(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994A0](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void *TType1CIDFont::GetCIDFont(const void **this)
{
  if (!result) {
    __cxa_bad_cast();
  }
  return result;
}

BOOL TType1CIDFont::GetNextZapCIDMap(const void **this, const TFontObjectSurrogate *a2, const unsigned int *a3, unsigned __int16 *a4, unsigned int *a5, unsigned int *a6)
{
  int v10 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 5);
  int v11 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 8) + v10;
  int v12 = (unsigned __int8 *)*((unsigned int *)TType1CIDFont::GetCIDFont(this) + 2);
  int v13 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 3);
  unsigned int v14 = *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8);
  unsigned __int16 v15 = *a4;
  if (v14 <= (unsigned __int16)(*a4 + 1)) {
    unsigned __int16 v16 = v15 + 1;
  }
  else {
    unsigned __int16 v16 = v14;
  }
  while (v14 > ++v15)
  {
    if (((a3[v15 >> 5] << v15) & 0x80000000) == 0)
    {
      *a4 = v15;
      unint64_t v25 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v23[1] = v17;
      *(_OWORD *)long long v24 = v17;
      v23[0] = v17;
      uint64_t v18 = (*((uint64_t (**)(const void **))*this + 15))(this);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)v23, a2, v18, v11 + (v13 + v12) * *a4, 2 * (v13 + v12));
      TType1CIDFont::GetCIDFDIndex(v24[1], v12, v13, a5, a6, v19);
      TDataReference::~TDataReference((TDataReference *)((char *)v23 + 8));
      return v14 > v15;
    }
  }
  *a4 = v16;
  return v14 > v15;
}

uint64_t TType1CIDFont::GetMappedFDIndex(const void **this, unsigned __int16 *a2)
{
  unsigned int v4 = *a2;
  if (v4 >= *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8)) {
    uint64_t AltGlyphFDIndex = TType1CIDFont::GetAltGlyphFDIndex(this, a2);
  }
  else {
    uint64_t AltGlyphFDIndex = (*((uint64_t (**)(const void **, void))*this + 43))(this, *a2);
  }
  uint64_t v6 = AltGlyphFDIndex;
  if ((AltGlyphFDIndex & 0x80000000) != 0
    || *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 9) <= (unsigned __int16)AltGlyphFDIndex)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  return v6;
}

uint64_t TType1CIDFont::GetFontDataLength(TType1CIDFont *this, unsigned int *a2, unsigned int *a3)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = v6;
  long long v13 = v6;
  v12[0] = v6;
  uint64_t v7 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1CIDFont *))(*(void *)this + 216))(this);
  uint64_t v8 = (*(uint64_t (**)(TType1CIDFont *))(*(void *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v12, v7, v8, 0, 22);
  uint64_t v9 = *((void *)&v13 + 1);
  *a2 = bswap32(*(_DWORD *)(*((void *)&v13 + 1) + 12));
  *a3 = bswap32(*(_DWORD *)(v9 + 16));
  uint64_t v10 = bswap32(*(_DWORD *)(v9 + 8));
  TDataReference::~TDataReference((TDataReference *)((char *)v12 + 8));
  return v10;
}

uint64_t TType1CIDFont::GetFontDataHeaderSize(TType1CIDFont *this)
{
  return 22;
}

uint64_t TType1CIDFont::GetLocalSubrArrayAndObjectData(TType1CIDFont *this, __int16 a2, unsigned __int16 *a3, __int16 *a4, const unsigned __int8 **a5, const unsigned __int8 **a6, const unsigned __int8 **a7, const unsigned __int8 **a8)
{
  *a3 = 0;
  *a4 = 0;
  *a7 = 0;
  *a5 = 0;
  *a8 = 0;
  *a6 = 0;
  return 0;
}

void TCIDASCII85EncodableStreamingContext::~TCIDASCII85EncodableStreamingContext(TCIDASCII85EncodableStreamingContext *this)
{
  *(void *)this = &unk_1F0E001A0;
  int v2 = (void **)((char *)this + 696);
  std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100](&v2);
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
}

{
  void **v2;

  *(void *)this = &unk_1F0E001A0;
  int v2 = (void **)((char *)this + 696);
  std::vector<CompFDInfo>::__destroy_vector::operator()[abi:fe180100](&v2);
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
  MEMORY[0x1BA9994D0]();
}

uint64_t TCIDASCII85EncodableStreamingContext::BufferString(uint64_t this, const unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  unsigned int v4 = a2;
  uint64_t v5 = (_DWORD *)this;
  if (*(unsigned char *)(this + 728))
  {
    if (a3)
    {
      unsigned int v6 = *(_DWORD *)(this + 740);
      unsigned int v7 = *(_DWORD *)(this + 732);
      do
      {
        int v8 = *v4++;
        unsigned int v6 = v8 | (v6 << 8);
        v5[185] = v6;
        v5[183] = ++v7;
        if (v7 >= 4)
        {
          memset(v11, 170, 5);
          for (uint64_t i = 4; i != -1; --i)
          {
            v11[i] = v6 % 0x55 + 33;
            v6 /= 0x55u;
          }
          this = TBufferedStreamingContext::BufferString((uint64_t)v5, v11, 5uLL);
          unsigned int v10 = v5[184] + 5;
          v5[184] = v10;
          if (v10 >= 0x50)
          {
            unsigned __int8 v12 = 13;
            this = TBufferedStreamingContext::BufferString((uint64_t)v5, &v12, 1uLL);
            v5[184] = 0;
          }
          unsigned int v7 = 0;
          unsigned int v6 = 0;
          v5[183] = 0;
          v5[185] = 0;
        }
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    return TBufferedStreamingContext::BufferString(this, a2, a3);
  }
  return this;
}

unsigned __int8 *MakeFontNameFromID(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3)
{
  unsigned int v3 = a3;
  unsigned int v5 = *a2;
  if (v5 >= 8 && a2[7] == 43)
  {
    uint64_t v6 = 6;
    while (a2[v6] - 65 < 0x1A)
    {
      if (!--v6)
      {
        uint64_t v7 = 1;
        do
          LODWORD(v6) = a2[v7++] + 26 * v6 - 65;
        while (v7 != 7);
        unsigned int v3 = a3 + 32 * v6;
        unsigned int v8 = v5 + 1;
        if ((v8 & 0x100) == 0)
        {
          uint64_t v9 = a1;
          do
          {
            --v8;
            unsigned __int8 v10 = *a2++;
            *v9++ = v10;
          }
          while ((_BYTE)v8);
        }
        goto LABEL_15;
      }
    }
  }
  a1[7] = 43;
  *a1 = 7;
  unsigned int v13 = *a2;
  int v11 = a2 + 1;
  unsigned __int8 v12 = v13;
  unsigned __int8 v14 = v13 + 7;
  if (v13 >= 0xF9)
  {
    unsigned __int8 v14 = -1;
    unsigned __int8 v12 = -8;
  }
  *a1 = v14;
  memcpy(a1 + 8, v11, v12);
LABEL_15:
  uint64_t v15 = 6;
  do
  {
    a1[v15] = v3 % 0x1A + 65;
    v3 /= 0x1Au;
    --v15;
  }
  while (v15);
  a1[*a1 + 1] = 0;
  return a1;
}

uint64_t TType1CIDFont::GetEmbeddedCharMetrics(TType1CIDFont *this, __int16 a2, const unsigned __int8 *a3, int a4, int *a5, int *a6)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  long long v16 = 0uLL;
  if (!a4) {
    return 0;
  }
  int v6 = 0;
  uint64_t v7 = a3;
  unsigned int v8 = &a3[a4];
  while (1)
  {
    unsigned int v10 = *v7++;
    unsigned int v9 = v10;
    if (v10 == 12)
    {
      if (*v7 == 7)
      {
        if ((__int16)v6 <= 3)
        {
          *a5 = *((_DWORD *)&v16 + (__int16)v6 - 2);
          uint64_t v13 = (__int16)v6 - 4;
          goto LABEL_28;
        }
LABEL_30:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DFC400;
        exception[4] = 5;
      }
      return 0;
    }
    if (v9 == 13) {
      break;
    }
    if (v9 < 0x20) {
      return 0;
    }
    if ((__int16)v6 >= 4)
    {
      *(void *)&long long v16 = *(void *)((char *)&v16 + 4);
      DWORD2(v16) = HIDWORD(v16);
      --v6;
    }
    if (v9 > 0xF6)
    {
      if (v9 > 0xFA)
      {
        if (v9 == 255)
        {
          if (a3[1])
          {
            if (a3[1] != 255 || (a3[2] + 1) > 1u) {
              goto LABEL_30;
            }
            unsigned __int8 v12 = a3 + 3;
          }
          else
          {
            unsigned __int8 v12 = a3 + 2;
          }
          uint64_t v7 = v12 + 2;
          int v11 = (*v12 << 24) | (v12[1] << 16);
        }
        else
        {
          uint64_t v7 = a3 + 2;
          int v11 = -90963968 - ((a3[1] << 16) | (v9 << 24));
        }
      }
      else
      {
        uint64_t v7 = a3 + 2;
        int v11 = ((a3[1] << 16) | (v9 << 24)) + 158072832;
      }
    }
    else
    {
      int v11 = (v9 << 16) - 9109504;
    }
    *((_DWORD *)&v16 + (__int16)v6++) = v11;
    a3 = v7;
    if (v7 >= v8) {
      return 0;
    }
  }
  if ((__int16)v6 < 2) {
    goto LABEL_30;
  }
  *a5 = *((_DWORD *)&v16 + (unsigned __int16)(v6 - 1));
  uint64_t v13 = (unsigned __int16)(v6 - 2);
LABEL_28:
  *a6 = *((_DWORD *)&v16 + v13);
  return 1;
}

uint64_t TType1CIDFont::StreamCharProcs(const void **a1, uint64_t a2, TBufferedStreamingContext *this)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"/CharProcs ", 0xBuLL);
  unsigned int v5 = (__int32 *)*((void *)this + 2);
  int v6 = (*((uint64_t (**)(const void **))*a1 + 51))(a1);
  if (v5)
  {
    unsigned int v8 = v6 + 31;
    if ((v6 + 31) >= 0x20)
    {
      int v6 = 0;
      unsigned int v9 = v8 >> 5;
      unsigned int v10 = v5;
      do
      {
        if (*v10)
        {
          v7.i32[0] = *v10;
          int8x8_t v7 = vcnt_s8(v7);
          v7.i16[0] = vaddlv_u8((uint8x8_t)v7);
          v6 += v7.i32[0];
        }
        ++v10;
        --v9;
      }
      while (v9);
    }
    else
    {
      int v6 = 0;
    }
  }
  TBufferedStreamingContext::BufferInt(this, v6 + 1);
  TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)" dict\r", 6uLL);
  unsigned int v11 = (*(uint64_t (**)(const void *))(*(void *)a1[4] + 168))(a1[4]);
  if (v11 >= 0xFFFF) {
    int v12 = 0xFFFF;
  }
  else {
    int v12 = v11;
  }
  int v38 = v12;
  if (v12)
  {
    unsigned int v13 = 0;
    long long v37 = (unsigned __int8 *)this + 66;
    long long v35 = v5;
    long long v36 = (unsigned __int8 *)this + 67;
    while (v5 && ((v5[v13 >> 5] << v13) & 0x80000000) == 0)
    {
LABEL_67:
      if (++v13 == v38) {
        goto LABEL_68;
      }
    }
    unsigned __int16 v47 = v13;
    memset(v46, 170, sizeof(v46));
    int v44 = -1431655766;
    int v45 = -1431655766;
    int v43 = -1431655766;
    (*((void (**)(const void **, unsigned __int16 *, _DWORD *, _DWORD *, _DWORD *, _DWORD *, _DWORD *, _DWORD *, int *, int *, int *))*a1
     + 45))(a1, &v47, &v46[5], &v46[4], &v46[3], &v46[2], &v46[1], v46, &v44, &v45, &v43);
    unsigned int v41 = -1431655766;
    unsigned int v42 = -1431655766;
    uint64_t v14 = (*((uint64_t (**)(const void **, void, unsigned int *, unsigned int *))*a1 + 42))(a1, v47, &v42, &v41);
    int v15 = v44;
    int v16 = v46[5];
    BOOL v17 = v46[5] < 2097152000;
    if (v44 <= 2097151999 && v46[5] >= 2097152000) {
      v46[5] = 0x10000;
    }
    int v18 = v46[4];
    if (a2) {
      BOOL v19 = v46[4] == 0;
    }
    else {
      BOOL v19 = 0;
    }
    int v20 = !v19;
    if (v16 >= 2097152000 && v20)
    {
      *(void *)&v48[0] = 0xAAAAAAAAAAAAAAAALL;
      (*((void (**)(_OWORD *__return_ptr, const void **, uint64_t, void, void))*a1 + 44))(v48, a1, v14, v42, v41);
      *(_DWORD *)long long v40 = -1431655766;
      if (((*((uint64_t (**)(const void **, uint64_t, void, void, _DWORD *, unsigned __int8 *))*a1 + 52))(a1, v14, *(void *)&v48[0], v41, &v46[5], v40) & 1) == 0)v46[5] = *(_DWORD *)(*((void *)TType1CIDFont::GetCIDFont(a1) + 7) + 488 * (int)v14 + 156); {
      uint64_t v21 = *(void *)&v48[0];
      }
      *(void *)&v48[0] = 0;
      if (v21) {
        MEMORY[0x1BA9994A0](v21, 0x1000C8077774924);
      }
      BOOL v17 = 1;
    }
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)"dup ", 4uLL);
    *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v48[14] = v22;
    v48[15] = v22;
    v48[12] = v22;
    v48[13] = v22;
    v48[10] = v22;
    v48[11] = v22;
    v48[8] = v22;
    v48[9] = v22;
    v48[6] = v22;
    v48[7] = v22;
    v48[5] = v22;
    v48[3] = v22;
    v48[4] = v22;
    v48[1] = v22;
    v48[2] = v22;
    v48[0] = v22;
    (*((void (**)(const void **, void, _OWORD *))*a1 + 29))(a1, (unsigned __int16)v13, v48);
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)v48 + 1, LOBYTE(v48[0]));
    TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)" {", 2uLL);
    if (a2)
    {
      uint64_t v23 = a2 + 16 * (int)v14;
      if (!*(_WORD *)(v23 + 6)) {
        goto LABEL_69;
      }
      signed __int16 v24 = 0;
      uint64_t v25 = *(void *)(a2 + 16 * (int)v14 + 8);
LABEL_34:
      uint64_t v26 = 0;
      while (*(unsigned __int16 *)(v25 + 2 * v26) != v47)
      {
        if (++v26 == 256)
        {
          ++v24;
          v25 += 512;
          if (*(unsigned __int16 *)(v23 + 6) <= v24)
          {
LABEL_69:
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = &unk_1F0DFC400;
            exception[4] = 5;
          }
          goto LABEL_34;
        }
      }
      v40[0] = v26;
      TBufferedStreamingContext::BufferPSString(this, v40, 1);
    }
    else
    {
      IntToPString(v47, v37);
      TBufferedStreamingContext::BufferString((uint64_t)this, v36, *((unsigned __int8 *)this + 66));
      uint64_t v23 = 0;
      signed __int16 v24 = 0;
    }
    int v27 = v15 < 2097152000 || v17;
    if (v27 == 1 && (TBufferedStreamingContext::BufferUnitEmFixed(this, v46[5]), v15 < 2097152000))
    {
      TBufferedStreamingContext::BufferUnitEmFixed(this, v44 + v46[1]);
      long long v28 = v46;
    }
    else
    {
      if (!v18)
      {
LABEL_50:
        v40[0] = 32;
        TBufferedStreamingContext::BufferString((uint64_t)this, v40, 1uLL);
        if (a2)
        {
          IntToPString((*(__int16 *)(v23 + 2) + v24), v37);
          TBufferedStreamingContext::BufferString((uint64_t)this, v36, *((unsigned __int8 *)this + 66));
        }
        else
        {
          v40[0] = 48;
          TBufferedStreamingContext::BufferString((uint64_t)this, v40, 1uLL);
        }
        v40[0] = 32;
        TBufferedStreamingContext::BufferString((uint64_t)this, v40, 1uLL);
        long long v29 = "\x03$SP";
        if (v17) {
          long long v29 = "\x04$SPW";
        }
        if (v18) {
          long long v29 = "\x05$SPTW";
        }
        if (v15 >= 2097152000) {
          long long v30 = v29;
        }
        else {
          long long v30 = "\x03$RP";
        }
        TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)v30 + 1, *(unsigned __int8 *)v30);
        if (v13) {
          long long v31 = "} put\r";
        }
        else {
          long long v31 = "} 2 index /.notdef 2 index put put\r";
        }
        if (v13) {
          unint64_t v32 = 6;
        }
        else {
          unint64_t v32 = 35;
        }
        TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)v31, v32);
        unsigned int v5 = v35;
        goto LABEL_67;
      }
      long long v28 = &v46[4];
    }
    TBufferedStreamingContext::BufferUnitEmFixed(this, *v28);
    goto LABEL_50;
  }
LABEL_68:
  TBufferedStreamingContext::BufferString((uint64_t)this, " def\r", 5uLL);
  return TBufferedStreamingContext::BufferString((uint64_t)this, (const unsigned __int8 *)" end dup /FontName get exch definefont pop\r", 0x2BuLL);
}

void sub_1B531AB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25) {
    MEMORY[0x1BA9994A0](a25, 0x1000C8077774924);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TCFFFDSelect::GetStreamOutFormat(TCFFFDSelect *this)
{
  return *((unsigned __int8 *)this + 8);
}

void TCFFFDSelect0::~TCFFFDSelect0(TCFFFDSelect0 *this)
{
  *(void *)this = &unk_1F0E001F0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8077774924);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E001F0;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8077774924);
  }
  JUMPOUT(0x1BA9994D0);
}

uint64_t TCFFFDSelect0::StreamOut(TCFFFDSelect0 *this, TBufferedStreamingContext *a2)
{
  unsigned __int8 v7 = *((unsigned char *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, &v7, 1uLL);
  unsigned int v4 = (const unsigned __int8 *)*((void *)this + 2);
  unint64_t v5 = *((unsigned __int16 *)this + 5);
  return TBufferedStreamingContext::BufferString((uint64_t)a2, v4, v5);
}

uint64_t TCFFFDSelect0::GetLength(TCFFFDSelect0 *this)
{
  return *((unsigned __int16 *)this + 5) + 1;
}

void TCIDCFFFontSet::TCIDCFFFontSet(TCIDCFFFontSet *this, char a2, char a3, char a4, const char *a5, int a6)
{
  TCFFFontSet::TCFFFontSet(this, a2, a3, a4, a5);
  *(void *)uint64_t v8 = &unk_1F0E00228;
  *(_WORD *)(v8 + 384) = 0;
  *(_WORD *)(v8 + 386) = a6;
  *(unsigned char *)(v8 + 392) = 0;
  *(unsigned char *)(v8 + 416) = 0;
  *((void *)this + 53) = AllocateMemory(24 * a6, 1);
  TCFFArray::TCFFArray((TCIDCFFFontSet *)((char *)this + 448), 1u);
  uint64_t v9 = *((void *)this + 53) + 8 * a6;
  *((void *)this + 54) = v9;
  *((void *)this + 55) = v9 + 8 * a6;
  *((void *)this + 56) = &unk_1F0E01958;
}

void sub_1B531ADB4(_Unwind_Exception *a1)
{
  std::__optional_destruct_base<TCFFFDSelect0,false>::~__optional_destruct_base[abi:fe180100](v2);
  TCFFFontSet::~TCFFFontSet(v1);
  _Unwind_Resume(a1);
}

void TCIDCFFFontSet::~TCIDCFFFontSet(TCIDCFFFontSet *this)
{
  *(void *)this = &unk_1F0E00228;
  uint64_t v2 = (void *)*((void *)this + 53);
  if (v2)
  {
    if (*((__int16 *)this + 193) >= 1)
    {
      uint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(void *)(*((void *)this + 53) + 8 * v3);
        if (v4) {
          (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
        }
        uint64_t v5 = *(void *)(*((void *)this + 55) + 8 * v3);
        if (v5) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
        uint64_t v6 = *(void *)(*((void *)this + 54) + 8 * v3);
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        ++v3;
      }
      while (v3 < *((__int16 *)this + 193));
      uint64_t v2 = (void *)*((void *)this + 53);
    }
    free(v2);
  }
  TCFFArray::~TCFFArray((void **)this + 56);
  std::__optional_destruct_base<TCFFFDSelect0,false>::~__optional_destruct_base[abi:fe180100]((uint64_t)this + 392);
  TCFFFontSet::~TCFFFontSet(this);
}

uint64_t TCIDCFFFontSet::AddBlueValues(uint64_t a1, __int16 a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  return TCFFFontSet::AddBlueValuesToDict(a2, a3, a4, a5, a6, *(const void ***)(*(void *)(a1 + 432) + 8 * *(unsigned __int16 *)(a1 + 384)));
}

uint64_t TCIDCFFFontSet::AddStemSnap(TCIDCFFFontSet *this, TCFFFontSet *a2, int a3, int *a4, TCFFDict *a5)
{
  return TCFFFontSet::AddStemSnapToDict(a2, a3, a4, *(const void ***)(*((void *)this + 54) + 8 * *((unsigned __int16 *)this + 192)), a5);
}

void TCIDCFFFontSet::AddSubrs(TCIDCFFFontSet *this, TCFFFontSet *a2, unsigned __int8 a3, const unsigned __int8 *a4, const unsigned __int8 *a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, BOOL a9)
{
}

void TCIDCFFFontSet::StreamOut(TCIDCFFFontSet *this, TBufferedStreamingContext *a2)
{
  LOBYTE(v10[0]) = *((unsigned char *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v10, 1uLL);
  LOBYTE(v10[0]) = *((unsigned char *)this + 9);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v10, 1uLL);
  LOBYTE(v10[0]) = *((unsigned char *)this + 10);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v10, 1uLL);
  LOBYTE(v10[0]) = *((unsigned char *)this + 11);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v10, 1uLL);
  TCFFArray::StreamOut((TCIDCFFFontSet *)((char *)this + 16), a2);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v10[2] = v4;
  void v10[3] = v4;
  v10[0] = v4;
  v10[1] = v4;
  TCFFDictArray::TCFFDictArray((TCFFDictArray *)v10, (TCIDCFFFontSet *)((char *)this + 80));
  TCFFDictArray::StreamOut((TCFFDictArray *)v10, a2);
  TCFFArray::StreamOut((TCIDCFFFontSet *)((char *)this + 152), a2);
  uint64_t v5 = *((void *)this + 27);
  if (v5)
  {
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(void *)v5 + 32))(v5, a2);
  }
  else
  {
    *(_WORD *)unsigned int v11 = 0;
    TBufferedStreamingContext::BufferString((uint64_t)a2, v11, 2uLL);
  }
  uint64_t v6 = *((void *)this + 29);
  if (v6) {
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(void *)v6 + 24))(v6, a2);
  }
  if (*((unsigned char *)this + 416)) {
    (*(void (**)(char *, TBufferedStreamingContext *))(*((void *)this + 49) + 24))((char *)this + 392, a2);
  }
  TCFFArray::StreamOut((TCIDCFFFontSet *)((char *)this + 240), a2);
  TCFFDictArray::StreamOut((TCIDCFFFontSet *)((char *)this + 448), a2);
  if (*((__int16 *)this + 193) >= 1)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(*((void *)this + 54) + 8 * v7);
      if (v8)
      {
        (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(void *)v8 + 32))(v8, a2);
        uint64_t v9 = *(void *)(*((void *)this + 55) + 8 * v7);
        if (v9) {
          (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(void *)v9 + 32))(v9, a2);
        }
      }
      ++v7;
    }
    while (v7 < *((__int16 *)this + 193));
  }
  TCFFArray::~TCFFArray((void **)v10);
}

void sub_1B531B198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void TType1CIDFont::BuildCFFFontSet(const void **this, const unsigned int *a2, const unsigned __int16 *a3, TCFFFontSet *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (*((uint64_t (**)(const void **, const unsigned int *, const unsigned __int16 *))*this + 40))(this, a2, a3);
  v36[0] = (*(uint64_t (**)(char *, uint64_t))(*((void *)a4 + 19) + 56))((char *)a4 + 152, v6 + 1);
  uint64_t v7 = (*((uint64_t (**)(const void **))*this + 41))(this);
  v36[1] = (*(uint64_t (**)(char *, uint64_t))(*((void *)a4 + 19) + 56))((char *)a4 + 152, v7 + 1);
  v36[2] = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 16);
  TCFFDict::AddNumericArrayEntry((const void **)a4 + 10, 62, 3, (unsigned __int8 *)v36, 0);
  uint64_t v8 = (const unsigned __int8 *)(*((uint64_t (**)(const void **))*this + 13))(this);
  uint64_t v9 = (const void **)((char *)a4 + 80);
  long long v31 = this;
  TCFFDict::AddStringIDEntry((uint64_t)a4 + 80, 1, v8, (TCFFFontSet *)((char *)a4 + 152));
  unsigned int v10 = (const unsigned __int8 *)(*((uint64_t (**)(const void **))*v31 + 9))(v31);
  TCFFDict::AddStringIDEntry((uint64_t)a4 + 80, 2, v10, (TCFFFontSet *)((char *)a4 + 152));
  unsigned int v11 = (const unsigned __int8 *)(*((uint64_t (**)(const void **))*v31 + 10))(v31);
  TCFFDict::AddStringIDEntry((uint64_t)a4 + 80, 3, v11, (TCFFFontSet *)((char *)a4 + 152));
  int v12 = (const unsigned __int8 *)(*((uint64_t (**)(const void **))*v31 + 12))(v31);
  TCFFDict::AddStringIDEntry((uint64_t)a4 + 80, 4, v12, (TCFFFontSet *)((char *)a4 + 152));
  unsigned int v13 = this[4];
  uint64_t v14 = v13[16];
  if ((*(unsigned int (**)(void))(*v13 + 312))()) {
    TCFFDict::AddNumericEntry(v9, 33, (TCFFDict *)1);
  }
  int v15 = (unsigned int *)this[4];
  int v16 = (TCFFDict *)v15[38];
  if (v16)
  {
    TCFFDict::AddNumericEntry(v9, 34, v16, (unsigned __int8 *)0x10);
    int v15 = (unsigned int *)this[4];
  }
  BOOL v17 = (TCFFDict *)(*(uint64_t (**)(unsigned int *))(*(void *)v15 + 296))(v15);
  if (v17 != -100) {
    TCFFDict::AddNumericEntry(v9, 35, v17);
  }
  int v18 = (TCFFDict *)(*(uint64_t (**)(const void *))(*(void *)this[4] + 304))(this[4]);
  if (v18 != 50) {
    TCFFDict::AddNumericEntry(v9, 36, v18);
  }
  TCFFDict::AddNumericArrayEntry(v9, 5, 4, (unsigned __int8 *)(v14 + 88), (unsigned __int8 *)0x10);
  int v19 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 11);
  CIDFont = TType1CIDFont::GetCIDFont(this);
  if (v19)
  {
    uint64_t v21 = (unsigned __int8 *)*((void *)CIDFont + 6);
    if (v21) {
      TCFFDict::AddNumericArrayEntry(v9, 14, v19, v21, 0);
    }
  }
  long long v22 = (TCFFDict *)*((unsigned int *)TType1CIDFont::GetCIDFont(this) + 19);
  if (v22) {
    TCFFDict::AddNumericEntry(v9, 63, v22);
  }
  uint64_t v23 = (TCFFDict *)*((unsigned int *)TType1CIDFont::GetCIDFont(this) + 10);
  if (v23 != -1) {
    TCFFDict::AddNumericEntry(v9, 67, v23);
  }
  memset(v35, 170, sizeof(v35));
  __int16 v34 = -21846;
  unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v24 = (*((uint64_t (**)(const void **, __int16 *, void *, unint64_t *, void *, void *))*this
         + 19))(this, &v34, &v35[2], &v33, &v35[1], v35);
  if (v24) {
    (*(void (**)(TCFFFontSet *, const void **, void, uint64_t, unint64_t, uint64_t))(*(void *)a4 + 24))(a4, this, v34, v24, v33, v35[0] - v24);
  }
  unsigned int v25 = (*(uint64_t (**)(const void *))(*(void *)this[4] + 168))(this[4]);
  if (v25 >= 0xFFFF) {
    int v27 = 0xFFFF;
  }
  else {
    int v27 = v25;
  }
  if (a2)
  {
    int v28 = 0;
    if (v27)
    {
      unsigned int v29 = (v27 + 31) >> 5;
      long long v30 = a2;
      do
      {
        if (*v30)
        {
          v26.i32[0] = *v30;
          int8x8_t v26 = vcnt_s8(v26);
          v26.i16[0] = vaddlv_u8((uint8x8_t)v26);
          v28 += v26.i32[0];
        }
        ++v30;
        --v29;
      }
      while (v29);
    }
  }
  operator new[]();
}

void sub_1B531C718(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994A0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

void std::vector<int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

void TType1ToType2CIDCharStringConversionContext::~TType1ToType2CIDCharStringConversionContext(TType1ToType2CIDCharStringConversionContext *this)
{
  *(void *)this = &unk_1F0E00280;
  std::vector<int>::size_type v2 = (void *)*((void *)this + 117);
  if (v2)
  {
    *((void *)this + 118) = v2;
    operator delete(v2);
  }
  TType1ToType2CharStringConversionContext::~TType1ToType2CharStringConversionContext((void **)this);
}

{
  uint64_t vars8;

  TType1ToType2CIDCharStringConversionContext::~TType1ToType2CIDCharStringConversionContext(this);
  JUMPOUT(0x1BA9994D0);
}

void TType1ToType2CIDCharStringConversionContext::FlattenSubroutine(TType1ToType2CIDCharStringConversionContext *this, __int16 a2, uint64_t a3, BOOL *a4)
{
  uint64_t v7 = *((void *)this + 58);
  int v8 = *((_DWORD *)this + 142);
  std::vector<char>::pointer CIDSubr = TType1CIDFont::LoadCIDSubr(*((const void ***)this + 55), *((__int16 *)this + 481), (std::vector<char> *)this + 39, a3);
  *((void *)this + 58) = CIDSubr;
  if (!CIDSubr)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  *((_DWORD *)this + 142) = *((_DWORD *)this + 236) - CIDSubr;
  TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString(this, (unsigned __int16)(a2 + 1), a4);
  *((void *)this + 58) = v7;
  *((_DWORD *)this + 142) = v8;
}

void TType1CIDCFFFontSet::~TType1CIDCFFFontSet(TType1CIDCFFFontSet *this)
{
  TCIDCFFFontSet::~TCIDCFFFontSet(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TType1CIDCFFFontSet::AddCharString(TType1CIDCFFFontSet *this, const TType1PSFont *a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  memset(&v16[1], 170, 0x3C0uLL);
  v16[33] = "/.notdef";
  v16[34] = 8;
  memset(&v16[35], 0, 20);
  BYTE5(v16[53]) = 1;
  *(_DWORD *)((char *)&v16[53] + 6) = 0;
  v16[55] = a2;
  v16[57] = 0;
  LOBYTE(v16[69]) = 0;
  LOWORD(v16[70]) = 0;
  *(void *)((char *)&v16[73] + 4) = 0;
  LOBYTE(v16[99]) = 0;
  LOBYTE(v16[112]) = 0;
  memset(&v16[113], 0, 24);
  memset(&v16[60], 0, 25);
  memset(&v16[117], 0, 24);
  v16[0] = &unk_1F0E00280;
  BOOL v15 = 0;
  unsigned int v14 = -1431655766;
  WORD1(v16[120]) = (*(uint64_t (**)(const TType1PSFont *, uint64_t, unsigned int *, void *))(*(void *)a2 + 336))(a2, a3, &v14, &v16[71]);
  uint64_t v6 = (*(uint64_t (**)(const TType1PSFont *))(*(void *)a2 + 312))(a2);
  v16[56] = v6;
  if (a3)
  {
    unsigned int v7 = (*(uint64_t (**)(void, uint64_t, uint64_t, char *))(*(void *)v16[55] + 184))(v16[55], a3, 127, (char *)&v16[37] + 4);
    v16[33] = (char *)&v16[37] + 4;
    v16[34] = v7;
    uint64_t v6 = v16[56];
  }
  else
  {
    ++v16[33];
    --v16[34];
  }
  if (*(_WORD *)(v6 + 80)) {
    std::vector<int>::size_type v8 = *(unsigned __int16 *)(v6 + 80);
  }
  else {
    std::vector<int>::size_type v8 = 32;
  }
  std::vector<int>::resize((std::vector<int> *)&v16[60], v8);
  (*(void (**)(uint64_t *__return_ptr, const TType1PSFont *, void, void, void))(*(void *)a2 + 352))(&v13, a2, SWORD1(v16[120]), v14, LODWORD(v16[71]));
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  uint64_t v10 = v16[57];
  v16[57] = v9;
  if (v10)
  {
    MEMORY[0x1BA9994A0](v10, 0x1000C8077774924);
    uint64_t v11 = v13;
    uint64_t v13 = 0;
    if (v11) {
      MEMORY[0x1BA9994A0](v11, 0x1000C8077774924);
    }
  }
  v16[58] = v16[57];
  LODWORD(v16[37]) = malloc_good_size(LODWORD(v16[71]));
  v16[35] = AllocateMemory(LODWORD(v16[37]), 0);
  v16[36] = 0;
  v16[59] = v16[58];
  TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString((TType1ToType2CharStringConversionContext *)v16, 0, &v15);
  TCFFArray::Add((TType1CIDCFFFontSet *)((char *)this + 240), v16[36], (const unsigned __int8 *)v16[35]);
  TType1ToType2CIDCharStringConversionContext::~TType1ToType2CIDCharStringConversionContext((TType1ToType2CIDCharStringConversionContext *)v16);
  return a3;
}

void sub_1B531CC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  TType1ToType2CIDCharStringConversionContext::~TType1ToType2CIDCharStringConversionContext((TType1ToType2CIDCharStringConversionContext *)va);
  _Unwind_Resume(a1);
}

void TType1CIDFont::StreamPSFont(TType1CIDFont *a1, const char *a2, int a3, int a4, uint64_t a5, int a6, int a7, unsigned int *a8, unsigned int *a9, uint64_t a10)
{
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = TType1CIDFont::CheckFontProtectionAndStreamType(a1, a8, *a9);
  *a9 = v14;
  unint64_t v20 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, TType1CIDFont *, uint64_t, unsigned int *))(*(void *)a1 + 240))(&v20, a1, v14, a8);
  BOOL v15 = (__int32 *)v20;
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v53 = v16;
  long long v52 = v16;
  long long v51 = v16;
  long long v50 = v16;
  long long v49 = v16;
  long long v48 = v16;
  long long v47 = v16;
  long long v46 = v16;
  long long v45 = v16;
  long long v44 = v16;
  long long v43 = v16;
  long long v42 = v16;
  long long v41 = v16;
  long long v40 = v16;
  long long v39 = v16;
  long long v38 = v16;
  long long v37 = v16;
  long long v36 = v16;
  long long v35 = v16;
  long long v34 = v16;
  long long v33 = v16;
  long long v32 = v16;
  long long v31 = v16;
  long long v30 = v16;
  long long v29 = v16;
  long long v28 = v16;
  long long v27 = v16;
  long long v26 = v16;
  long long v25 = v16;
  long long v24 = v16;
  long long v23 = v16;
  *(_OWORD *)long long v22 = v16;
  if (!a5)
  {
    LODWORD(v17) = (*(uint64_t (**)(void *))(**((void **)a1 + 4) + 168))(*((void **)a1 + 4));
    if (v17 >= 0xFFFF) {
      uint64_t v17 = 0xFFFFLL;
    }
    else {
      uint64_t v17 = v17;
    }
    TType1PSFont::SetEncoding(v17, v15, v22, v18);
  }
  if ((*((unsigned char *)a9 + 1) & 1) == 0)
  {
    if (a2) {
      StringToInt(a2);
    }
    memset(__b, 170, 0x2E8uLL);
    TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext(__b, (uint64_t)a1, (uint64_t)v15, a10);
  }
  *(void *)&long long v62 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v61 = v19;
  long long v60 = v19;
  long long v59 = v19;
  long long v58 = v19;
  long long v57 = v19;
  *(_OWORD *)unint64_t v56 = v19;
  long long v55 = v19;
  *(_OWORD *)__s = v19;
  TBufferedStreamingContext::TBufferedStreamingContext(__s, (uint64_t)a1, (uint64_t)v15, a10);
}

void sub_1B531E044(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, TDataReference *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,uint64_t a63)
{
  TDataReference::~TDataReference((TDataReference *)&STACK[0x6D8]);
  if (a2 == 1)
  {
    BOOL v71 = __cxa_begin_catch(a1);
    a69 = v71[4];
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = v71[4];
  }
  TCIDASCII85EncodableStreamingContext::~TCIDASCII85EncodableStreamingContext((TCIDASCII85EncodableStreamingContext *)&a61);
  if (a27) {
    MEMORY[0x1BA9994A0](a27, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

void sub_1B531E208()
{
}

void sub_1B531E23C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B531E244);
  }
  __clang_call_terminate(a1);
}

uint64_t TType1CIDFont::StreamCIDFontDicts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v10 = (*(unsigned __int16 (**)(uint64_t))(*(void *)a1 + 408))(a1);
  if (!v10) {
    goto LABEL_37;
  }
  unsigned int v11 = 0;
  int v12 = 0;
  do
  {
    if (((*(_DWORD *)(a6 + 4 * (v11 >> 5)) << v11) & 0x80000000) != 0)
    {
      LOWORD(v43[0]) = v11;
      unsigned __int16 MappedFDIndex = TType1CIDFont::GetMappedFDIndex((const void **)a1, (unsigned __int16 *)v43);
      if (v11 == LOWORD(v43[0]))
      {
        if (!*(_WORD *)(a8 + 16 * MappedFDIndex)) {
          ++v12;
        }
        ++*(_WORD *)(a8 + 16 * MappedFDIndex);
      }
    }
    ++v11;
  }
  while (v10 != v11);
  if (!v12)
  {
LABEL_37:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  long long v41 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 112))(a1);
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[14] = v14;
  v43[15] = v14;
  v43[12] = v14;
  v43[13] = v14;
  v43[10] = v14;
  v43[11] = v14;
  v43[8] = v14;
  v43[9] = v14;
  v43[6] = v14;
  v43[7] = v14;
  v43[4] = v14;
  v43[5] = v14;
  v43[2] = v14;
  v43[3] = v14;
  v43[0] = v14;
  v43[1] = v14;
  CIDFont = TType1CIDFont::GetCIDFont((const void **)a1);
  uint64_t v38 = (unsigned __int16)CIDFont[9];
  if (CIDFont[9])
  {
    uint64_t v16 = 0;
    do
    {
      unsigned int v17 = *(unsigned __int16 *)(a8 + 16 * v16);
      if (*(_WORD *)(a8 + 16 * v16))
      {
        int v18 = (_WORD *)(a8 + 16 * v16);
        v18[1] = 0;
        unsigned int v19 = (v17 + 255) >> 8;
        v18[3] = v19;
        if (((MakeFontNameID(void)::nextFontNameID + 1) & 0xFFFE) != 0) {
          __int16 v20 = MakeFontNameID(void)::nextFontNameID + 1;
        }
        else {
          __int16 v20 = 1;
        }
        MakeFontNameID(void)::nextFontNameID = v20;
        v18[2] = v20;
        if (v17 >= 0x101)
        {
          if (v19 <= 2) {
            unsigned int v21 = 2;
          }
          else {
            unsigned int v21 = (v17 + 255) >> 8;
          }
          unsigned int v22 = v21 - 1;
          do
          {
            if ((++v20 & 0xFFFE) == 0) {
              __int16 v20 = 1;
            }
            --v22;
          }
          while (v22);
          MakeFontNameID(void)::nextFontNameID = v20;
        }
        operator new[]();
      }
      ++v16;
    }
    while (v16 != v38);
  }
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"%!FontType3-1.0: ", 0x11uLL);
  size_t v23 = strlen(a5);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)a5, v23);
  TBufferedStreamingContext::BufferString(a2, "\r19 dict dup begin\r/FontType 3 def\r/FontMatrix matrix def\r/FontBBox {0 0 0 0} readonly def\r/PaintType 0 def\r/StrokeWidth 0 def\r/BuildGlyph{save 3 1 roll\r1 index dup\rbegin\r/ShowProc get 3 1 roll\r1 index /CharProcs get exch get exec\r7 -1 roll exec\rend\rrestore\r} bind def\r/BuildChar{1 index /Encoding get exch get\r1 index /BuildGlyph get exec} bind def\r/$SP{3 -1 roll dup /SetupSubFont get exec\rdup setfont\rexch 0 0 2 index stringwidth\r} bind def\r/$SPW{4 -1 roll dup /SetupSubFont get exec\rdup setfont\r3 1 roll 0 0 0 4 2 roll} bind def\r/$SPTW{5 -1 roll dup /SetupSubFont get exec\rdup setfont\r4 1 roll neg  0 3 -1 roll 0} bind def\r/$RP{6 -1 roll dup /SetupSubFont get exec\rdup setfont 5 1 roll\rtranslate -90 rotate 0 0 0 4 2 roll} bind def\r/SetupSubFont{dup /PaintType get 1 index /StrokeWidth get\r3 -1 roll /$SubFontArray get 4 1 roll\r3 index 3 index get\rdup /PaintType known{dup /PaintType get}{0}ifelse\r1 index /StrokeWidth known{1 index /StrokeWidth get}{0}ifelse\r3 index ne exch 4 index ne or\r{dup length 2 add dict begin\r{1 index /FID eq {pop pop}{def}ifelse}forall\r/StrokeWidth exch def\r/PaintType exch def\rcurrentdict end\rdup /CIDFontName known\r{/Anonymous exch /CIDFont defineresource}{/Anonymous exch definefont}ifelse\rdup 4 1 roll put\r}{ pop pop pop get}ifelse\r} bind def\r/ShowProc{systemdict /rectfill known\r{0 setcachelimit}if\r6 -1 roll dup /FontMatrix get exch /FontBBox get aload pop\r4 index transform 4 2 roll\r5 -1 roll transform 4 2 roll\rsetcachedevice\rmoveto dup type /stringtype eq {show}{glyphshow} ifelse\r} bind def\r", 0x5FDuLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/FontInfo 4 dict dup begin\r", 0x1BuLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/Registry (", 0xBuLL);
  long long v24 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 320))(a1);
  TBufferedStreamingContext::BufferString(a2, v24 + 1, *v24);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/) def\r", 7uLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/Ordering (", 0xBuLL);
  long long v25 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 328))(a1);
  TBufferedStreamingContext::BufferString(a2, v25 + 1, *v25);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/) def\r", 7uLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/Supplement ", 0xCuLL);
  long long v26 = (unsigned int *)TType1CIDFont::GetCIDFont((const void **)a1);
  IntToPString(v26[16], (unsigned __int8 *)(a2 + 66));
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)(a2 + 67), *(unsigned __int8 *)(a2 + 66));
  TBufferedStreamingContext::BufferString(a2, " def\r", 5uLL);
  unint64_t v27 = *(_WORD *)(*(void *)(a1 + 32) + 178) & 0x30E;
  if ((*(_WORD *)(*(void *)(a1 + 32) + 178) & 0x30E) != 0)
  {
    TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/FSType ", 8uLL);
    IntToPString(v27, (unsigned __int8 *)(a2 + 66));
    TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)(a2 + 67), *(unsigned __int8 *)(a2 + 66));
    TBufferedStreamingContext::BufferString(a2, " def\r", 5uLL);
  }
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"end readonly def\r", 0x11uLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/FontName /", 0xBuLL);
  size_t v28 = strlen(a5);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)a5, v28);
  TBufferedStreamingContext::BufferString(a2, " def\r", 5uLL);
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/Encoding ", 0xAuLL);
  TBufferedStreamingContext::StreamBuffer(a2);
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 256))(a1, a4, 0, *(void *)(a2 + 32));
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"/$SubFontArray [", 0x10uLL);
  if (v38)
  {
    for (uint64_t i = 0; i != v38; ++i)
    {
      if (*(_WORD *)(a8 + 16 * i))
      {
        uint64_t v30 = a8 + 16 * i;
        int v32 = *(unsigned __int16 *)(v30 + 6);
        long long v31 = (unsigned __int16 *)(v30 + 6);
        if (v32)
        {
          int v33 = 0;
          do
          {
            v42[0] = 47;
            TBufferedStreamingContext::BufferString(a2, v42, 1uLL);
            MakeFontNameFromID((unsigned __int8 *)v43, v41, (unsigned __int16)(*(_WORD *)(a8 + 16 * i + 4) + v33));
            TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)v43 + 1, LOBYTE(v43[0]));
            TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)" findfont", 9uLL);
            v42[0] = 32;
            TBufferedStreamingContext::BufferString(a2, v42, 1uLL);
            ++v33;
          }
          while (*v31 > (unsigned __int16)v33);
        }
      }
    }
  }
  TBufferedStreamingContext::BufferString(a2, (const unsigned __int8 *)"] def\r", 6uLL);
  return TType1CIDFont::StreamCharProcs((const void **)a1, a8, (TBufferedStreamingContext *)a2);
}

uint64_t TType1CIDFont::GetGlyphCountForStreaming(const void **this)
{
  return *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8);
}

uint64_t TType1CIDFont::StreamPrivateFontDict(const void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *((void *)TType1CIDFont::GetCIDFont(a1) + 7);
  unsigned int v113 = (char *)0xAAAAAAAAAAAAAAAALL;
  (*((void (**)(const void **, char **, char *))*a1 + 37))(a1, &v113, (char *)&v113 + 4);
  *(void *)&long long v122 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v121 = v7;
  *(_OWORD *)int v119 = v7;
  long long v120 = v7;
  std::vector<int>::size_type v8 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*a1 + 27))(a1);
  uint64_t v9 = (*((uint64_t (**)(const void **))*a1 + 15))(a1);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v119, v8, v9, 0, (int)v113);
  unint64_t v11 = (v113 - 22);
  LODWORD(v113) = v113 - 22;
  uint64_t v96 = 0x4FBCDA3AC10C9715 * ((a2 - 36 - v6) >> 3);
  int v12 = (char *)(*((void *)&v121 + 1) + 22);
  v115[0] = -1431655766;
  LODWORD(__p) = -1431655766;
  if (((__int16)v96 & 0x80000000) == 0)
  {
    LOWORD(v13) = 0;
    do
    {
      int v12 = (char *)TType1PSFont::ScanForKey((TType1PSFont *)"%ADOBeginFontDict", v12, (const unsigned __int8 *)&v113, (unsigned int *)&__p, v115, v10);
      int v13 = (__int16)(v13 + 1);
    }
    while (v13 <= (__int16)v96);
    unint64_t v11 = v113;
  }
  TType1PSFont::FindValueForKey((TType1PSFont *)"/Private", v12, (const char *)v11, &__p, v115, v10);
  int v14 = (int)__p;
  int v15 = StringToInt(&v12[__p]);
  unsigned int v17 = (char *)TType1PSFont::ScanForKey((TType1PSFont *)"dict", &v12[v115[0] + v14], (const unsigned __int8 *)&v113, (unsigned int *)&__p, v115, v16);
  unsigned int v19 = (char *)TType1PSFont::ScanForKey((TType1PSFont *)"begin", v17, (const unsigned __int8 *)&v113, (unsigned int *)&__p, v115, v18);
  HIDWORD(v113) = v113;
  TType1PSFont::ScanForKey((TType1PSFont *)"end", v19, (const unsigned __int8 *)&v113, (unsigned int *)&__p, v115, v20);
  uint64_t v21 = __p;
  LODWORD(v113) = HIDWORD(v113);
  TType1PSFont::ScanForKey((TType1PSFont *)"%ADOEndFontDict", v19, (const unsigned __int8 *)&v113, (unsigned int *)&__p, v115, v22);
  if (__p < v21)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  long long v24 = &v19[v21];
  long long v25 = v24;
  if (*(_WORD *)(a2 + 56) != 4)
  {
    TType1PSFont::FindValueForKey((TType1PSFont *)"/lenIV", v19, (const char *)HIDWORD(v113), &__p, v115, v23);
    if (v115[0] == -1)
    {
      v93 = __cxa_allocate_exception(0x10uLL);
      *(void *)v93 = &unk_1F0DFC400;
      v93[4] = 5;
    }
    long long v25 = &v19[__p];
  }
  *(_DWORD *)&v114[4] = 0;
  long long v26 = v24;
  if (*(unsigned char *)(a2 - 36))
  {
    TType1PSFont::ScanForKey((TType1PSFont *)"/RunInt", v19, (const unsigned __int8 *)&v113 + 4, (unsigned int *)&__p, (unsigned int *)&v114[4], v23);
    long long v26 = &v19[__p];
    TType1PSFont::ScanForKey((TType1PSFont *)"def", v26, (const unsigned __int8 *)&v113 + 4, (unsigned int *)&__p, (unsigned int *)&v114[4], v27);
    *(_DWORD *)&v114[4] += __p;
  }
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"dup /Private ", 0xDuLL);
  long long v108 = (unsigned __int8 *)(a3 + 66);
  IntToPString((v15 + 5), (unsigned __int8 *)(a3 + 66));
  uint64_t v106 = (unsigned __int8 *)(a3 + 67);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)(a3 + 67), *(unsigned __int8 *)(a3 + 66));
  TBufferedStreamingContext::BufferString(a3, " dict dup begin\r", 0x10uLL);
  for (; v25 != v24 || v26 != v24; unsigned int v19 = &v29[v28])
  {
    if (v25 >= v26)
    {
      TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)v19, (v26 - v19));
      v115[0] = *(_DWORD *)&v114[4] - 1;
      if (*(_DWORD *)&v114[4])
      {
        do
        {
          v114[0] = 32;
          TBufferedStreamingContext::BufferString(a3, v114, 1uLL);
        }
        while (v115[0]--);
        uint64_t v28 = *(unsigned int *)&v114[4];
      }
      else
      {
        uint64_t v28 = 0;
      }
      long long v29 = v26;
      long long v26 = v24;
    }
    else
    {
      TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)v19, (v25 - v19));
      v114[0] = 52;
      TBufferedStreamingContext::BufferString(a3, v114, 1uLL);
      uint64_t v28 = v115[0];
      long long v29 = v25;
      long long v25 = v24;
    }
  }
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)v19, (v24 - v19));
  TDataReference::~TDataReference((TDataReference *)&v119[8]);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/RD {string currentfile exch readstring pop} executeonly def\r", 0x3DuLL);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/ND {noaccess def} executeonly def\r", 0x23uLL);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/NP {noaccess put} executeonly def\r", 0x23uLL);
  int v102 = *(unsigned __int16 *)(a2 - 32);
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/Subrs ", 7uLL);
  IntToPString(v102, v108);
  TBufferedStreamingContext::BufferString(a3, v106, *(unsigned __int8 *)(a3 + 66));
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)" array\r", 7uLL);
  int v100 = *(__int16 *)(a2 - 34);
  int v31 = *(__int16 *)(a2 + 56);
  int v32 = *((_DWORD *)TType1CIDFont::GetCIDFont(a1) + 5);
  BOOL v111 = (unsigned char *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v112 = 0xAAAAAAAAAAAAAAAALL;
  if (v31 == 4) {
    size_t v33 = 0;
  }
  else {
    size_t v33 = 24;
  }
  __p = (void *)0xAAAAAAAAAAAAAAAALL;
  std::vector<unsigned char>::vector(&__p, v33);
  int v104 = v31;
  int v95 = (__int16)v96;
  *(void *)&long long v122 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v34 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v121 = v34;
  *(_OWORD *)int v119 = v34;
  long long v120 = v34;
  long long v35 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*a1 + 27))(a1);
  uint64_t v36 = (*((uint64_t (**)(const void **))*a1 + 15))(a1);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v119, v35, v36, (*(_DWORD *)(a2 - 28) + v32), v100 + v100 * v102);
  if (v102)
  {
    unint64_t v37 = 0;
    int v38 = 0;
    long long v39 = (const unsigned __int8 *)*((void *)&v121 + 1);
    int v98 = v32 - 1;
    int v103 = v104 & ~(v104 >> 31);
    do
    {
      int v40 = BytesToCard(v39, v100);
      v39 += v100;
      int v41 = BytesToCard(v39, v100);
      unint64_t v118 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v42 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v116 = v42;
      long long v117 = v42;
      *(_OWORD *)v115 = v42;
      long long v43 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*a1 + 27))(a1);
      uint64_t v44 = (*((uint64_t (**)(const void **))*a1 + 15))(a1);
      unint64_t v45 = (v41 - v40);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)v115, v43, v44, (v98 + v40), v45);
      long long v46 = (unsigned __int8 *)*((void *)&v117 + 1);
      TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"dup ", 4uLL);
      IntToPString(v37, v108);
      TBufferedStreamingContext::BufferString(a3, v106, *(unsigned __int8 *)(a3 + 66));
      v114[4] = 32;
      TBufferedStreamingContext::BufferString(a3, &v114[4], 1uLL);
      unint64_t v47 = (int)v45 - v103;
      IntToPString((v45 - v103 + 4), v108);
      TBufferedStreamingContext::BufferString(a3, v106, *(unsigned __int8 *)(a3 + 66));
      TBufferedStreamingContext::BufferString(a3, " RD ", 4uLL);
      if (v104 == 4)
      {
        TBufferedStreamingContext::BufferString(a3, v46, v45);
      }
      else if ((unsigned __int16)(v104 - 1) > 2u)
      {
        if (v104 != -1)
        {
          double v91 = __cxa_allocate_exception(0x10uLL);
          *(void *)double v91 = &unk_1F0DFC400;
          v91[4] = 5;
        }
      }
      else
      {
        long long v48 = (unsigned __int8 *)__p;
        if (v47 > v111 - (unsigned char *)__p)
        {
          std::vector<unsigned char>::__append((unint64_t *)&__p, v47 - (v111 - (unsigned char *)__p));
          long long v48 = (unsigned __int8 *)__p;
        }
        LenIVDecrypt(v48, v46, v45, v104);
        uint64_t v49 = 0;
        *(_DWORD *)&v114[4] = 0;
        int v50 = 4330;
        do
        {
          int v51 = v114[v49 + 4] ^ ((unsigned __int16)(v50 & 0xFF00) >> 8);
          int v50 = 22719 - 12691 * (v50 + (v114[v49 + 4] ^ ((unsigned __int16)(v50 & 0xFF00) >> 8)));
          v114[v49++ + 4] = v51;
        }
        while (v49 != 4);
        TBufferedStreamingContext::BufferString(a3, &v114[4], 4uLL);
        if (v45 != v103)
        {
          long long v52 = v48;
          uint64_t v53 = (v45 - v103);
          do
          {
            unsigned __int8 v54 = *v52 ^ ((unsigned __int16)(v50 & 0xFF00) >> 8);
            *v52++ = v54;
            int v50 = 22719 - 12691 * (v50 + v54);
            --v53;
          }
          while (v53);
        }
        TBufferedStreamingContext::BufferString(a3, v48, (v45 - v103));
      }
      TBufferedStreamingContext::BufferString(a3, " NP\r", 4uLL);
      TDataReference::~TDataReference((TDataReference *)&v115[2]);
      unint64_t v37 = (__int16)++v38;
    }
    while ((int)v37 < v102);
  }
  TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"ND\r", 3uLL);
  TDataReference::~TDataReference((TDataReference *)&v119[8]);
  int v55 = (__int16)v96;
  if (__p)
  {
    BOOL v111 = __p;
    operator delete(__p);
  }
  TBufferedStreamingContext::StreamBuffer(a3);
  uint64_t result = (*((uint64_t (**)(const void **))*a1 + 27))(a1);
  uint64_t v99 = (TFontObjectSurrogate *)result;
  uint64_t v57 = (__int16)v96;
  uint64_t v58 = *(void *)(a3 + 696);
  if ((__int16)v96 >= (unint64_t)((*(void *)(a3 + 704) - v58) >> 4))
  {
    __break(1u);
  }
  else
  {
    uint64_t v97 = *(void *)(a3 + 16);
    uint64_t v59 = *((void *)TType1CIDFont::GetCIDFont(a1) + 7);
    uint64_t v60 = v59 + 488 * (int)v57;
    LODWORD(v62) = (*(_DWORD *)(v60 + 148) || *(_DWORD *)(v60 + 156))
                && (long long v61 = *(const char **)(a3 + 720)) != 0
                && (int)StringToInt(v61) > 2014;
    int v63 = *(unsigned __int16 *)(v59 + 488 * (int)v57 + 92);
    TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"2 index /CharStrings ", 0x15uLL);
    IntToPString(*(unsigned __int16 *)(v58 + 16 * v57) + 2, v108);
    TBufferedStreamingContext::BufferString(a3, v106, *(unsigned __int8 *)(a3 + 66));
    TBufferedStreamingContext::BufferString(a3, " dict dup begin\r", 0x10uLL);
    TBufferedStreamingContext::StreamBuffer(a3);
    uint64_t v64 = 0;
    LODWORD(__p) = 0;
    LODWORD(v65) = 4330;
    do
    {
      int v66 = *((unsigned __int8 *)&__p + v64) ^ ((unsigned __int16)(v65 & 0xFF00) >> 8);
      uint64_t v65 = 22719
          - 12691
          * (v65 + (*((unsigned char *)&__p + v64) ^ ((unsigned __int16)(v65 & 0xFF00) >> 8)));
      *((unsigned char *)&__p + v64++) = v66;
    }
    while (v64 != 4);
    CIDFont = TType1CIDFont::GetCIDFont(a1);
    int v68 = (unsigned __int16)CIDFont[8];
    if (CIDFont[8])
    {
      int v69 = 0;
      BOOL v70 = v63 == 4;
      uint64_t v71 = 0;
      if (v70) {
        uint64_t v62 = v62;
      }
      else {
        uint64_t v62 = 1;
      }
      uint64_t v72 = a3 + 648;
      *(void *)unint64_t v101 = a3 + 136;
      int v94 = (unsigned __int16)CIDFont[8];
      do
      {
        if (!v71 || ((*(_DWORD *)(v97 + 4 * (v71 >> 5)) << v71) & 0x80000000) != 0)
        {
          memset(v114, 170, sizeof(v114));
          uint64_t v107 = (unsigned __int8 *)(*((uint64_t (**)(const void **, void, unsigned __int8 *, unsigned __int8 *))*a1
                                     + 42))(a1, (unsigned __int16)v71, &v114[4], v114);
          if (!v71 || v107 == v55)
          {
            BOOL v105 = v71 != 0;
            uint64_t v73 = *(void *)v101;
            do
            {
              int v74 = v69;
              *(_WORD *)(a3 + 522) = 4;
              *(_WORD *)(a3 + 520) = v65;
              *(_DWORD *)(a3 + 544) = 0;
              *(_WORD *)(a3 + 529) = 257;
              *(unsigned char *)(a3 + 548) = 0;
              *(_OWORD *)uint64_t v72 = 0u;
              *(_OWORD *)(v72 + 16) = 0u;
              *(_DWORD *)(v72 + 32) = 0;
              std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(v73, *(char **)(a3 + 144), (char *)&__p, (char *)&__p + 4, 4);
              char v109 = v105 | v69;
              if ((v105 | v69))
              {
                *(void *)&long long v75 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v75 + 1) = 0xAAAAAAAAAAAAAAAALL;
                long long v133 = v75;
                long long v134 = v75;
                long long v131 = v75;
                long long v132 = v75;
                long long v129 = v75;
                long long v130 = v75;
                long long v127 = v75;
                long long v128 = v75;
                long long v125 = v75;
                long long v126 = v75;
                long long v123 = v75;
                long long v124 = v75;
                long long v121 = v75;
                long long v122 = v75;
                *(_OWORD *)int v119 = v75;
                long long v120 = v75;
                (*((void (**)(const void **, void, unsigned __int8 *))*a1 + 29))(a1, (unsigned __int16)v71, v119);
                TBufferedStreamingContext::BufferString(a3, &v119[1], v119[0]);
              }
              else
              {
                TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"/.notdef", 8uLL);
              }
              if (v62)
              {
                uint64_t v76 = *(unsigned int *)v114;
                *(void *)int v119 = 0xAAAAAAAAAAAAAAAALL;
                (*((void (**)(unsigned __int8 *__return_ptr, const void **, unsigned __int8 *, void, void))*a1
                 + 44))(v119, a1, v107, *(unsigned int *)&v114[4], *(unsigned int *)v114);
                unsigned __int8 v77 = (TBufferedCharStringStreamingContext *)a3;
                uint64_t v78 = v72;
                uint64_t v79 = v62;
                uint64_t v80 = v71;
                uint64_t v81 = v65;
                uint64_t v82 = *(char **)v119;
                uint64_t v83 = *((void *)TType1CIDFont::GetCIDFont(a1) + 7);
                int v84 = *(unsigned __int16 *)(v83 + 488 * (int)v107 + 92);
                if ((unsigned __int16)(v84 - 1) > 3u)
                {
                  if ((unsigned __int16)(v84 - 1) <= 0xFFFDu)
                  {
                    uint64_t v90 = __cxa_allocate_exception(0x10uLL);
                    *(void *)uint64_t v90 = &unk_1F0DFC400;
                    v90[4] = 5;
                  }
                }
                else
                {
                  uint64_t v76 = (v76 - v84);
                }
                *(void *)v115 = 0xAAAAAAAAAAAAAAAALL;
                if (((*((uint64_t (**)(const void **, unsigned __int8 *, char *, uint64_t, unsigned int *, unsigned int *))*a1
                       + 52))(a1, v107, v82, v76, v115, &v115[1]) & 1) == 0)
                {
                  uint64_t v88 = v83 + 488 * (int)v107;
                  v115[0] = *(_DWORD *)(v88 + 148);
                  v115[1] = *(_DWORD *)(v88 + 156);
                  TBufferedCharStringStreamingContext::BufferCharData(v77, 0xDu, 2, (int *)v115);
                }
                TBufferedCharStringStreamingContext::CharBufferAndEncrypt(v77, v82, v76);
                uint64_t v89 = *(void *)v119;
                *(void *)int v119 = 0;
                if (v89) {
                  MEMORY[0x1BA9994A0](v89, 0x1000C8077774924);
                }
                uint64_t v65 = v81;
                uint64_t v71 = v80;
                uint64_t v62 = v79;
                uint64_t v72 = v78;
                a3 = (uint64_t)v77;
                uint64_t v73 = *(void *)v101;
              }
              else
              {
                int v85 = *((_DWORD *)TType1CIDFont::GetCIDFont(a1) + 5);
                *(void *)&long long v122 = 0xAAAAAAAAAAAAAAAALL;
                *(void *)&long long v86 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v86 + 1) = 0xAAAAAAAAAAAAAAAALL;
                long long v121 = v86;
                *(_OWORD *)int v119 = v86;
                long long v120 = v86;
                uint64_t v87 = (*((uint64_t (**)(const void **))*a1 + 15))(a1);
                TFontObjectTable::TFontObjectTable((TFontObjectTable *)v119, v99, v87, (*(_DWORD *)&v114[4] + v85), *(int *)v114);
                std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(v73, *(char **)(a3 + 144), *((char **)&v121 + 1), (char *)(*((void *)&v121 + 1) + *(unsigned int *)v114), *(unsigned int *)v114);
                TDataReference::~TDataReference((TDataReference *)&v119[8]);
              }
              v119[0] = 32;
              TBufferedStreamingContext::BufferString(a3, v119, 1uLL);
              TBufferedStreamingContext::BufferInt((TBufferedStreamingContext *)a3, *(_DWORD *)(a3 + 144) - *(_DWORD *)(a3 + 136));
              TCIDASCII85EncodableStreamingContext::BufferString(a3, " RD ", 4u);
              TBufferedStreamingContext::StreamBuffer(a3);
              std::vector<unsigned char>::__insert_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(v73, *(char **)(a3 + 144), " ND\r", "", 4);
              TBufferedCharStringStreamingContext::BufferCharBuffer(a3);
              int v69 = 1;
            }
            while ((v109 & 1) == 0);
            int v69 = v105 & v74;
            int v68 = v94;
            int v55 = v95;
          }
        }
        uint64_t v71 = (v71 + 1);
      }
      while (v71 != v68);
    }
    TBufferedStreamingContext::BufferString(a3, "end\r", 4uLL);
    TBufferedStreamingContext::BufferString(a3, (const unsigned __int8 *)"end readonly put\r", 0x11uLL);
    return TBufferedStreamingContext::StreamBuffer(a3);
  }
  return result;
}

void sub_1B531FBEC(_Unwind_Exception *a1)
{
}

void sub_1B531FBF8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B531FC00);
  }
  __clang_call_terminate(a1);
}

uint64_t TType1ToType2CharStringConversionContext::GetOutputType(TType1ToType2CharStringConversionContext *this)
{
  return 2;
}

uint64_t std::__optional_destruct_base<TCFFFDSelect0,false>::~__optional_destruct_base[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *(void *)a1 = &unk_1F0E001F0;
    uint64_t v2 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = 0;
    if (v2) {
      MEMORY[0x1BA9994A0](v2, 0x1000C8077774924);
    }
  }
  return a1;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      int v14 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)p_end_cap, v13);
      std::vector<int>::pointer begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      int v14 = 0;
    }
    int v15 = &v14[4 * v11];
    uint64_t v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    unsigned int v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void PurgeTFontCache(const char *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  pthread_once(&TLockedLRUCache<TFontCacheNode,48ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TFontCacheNode,48ul>::CreateCache);
  uint64_t v2 = TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache;
  uint64_t v3 = (os_unfair_lock_s *)(TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312);
  os_unfair_lock_lock((os_unfair_lock_t)(TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312));
  if (a1)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    void v13[7] = v4;
    v13[8] = v4;
    v13[5] = v4;
    v13[6] = v4;
    v13[3] = v4;
    v13[4] = v4;
    v13[1] = v4;
    v13[2] = v4;
    v13[0] = v4;
    v16.tv_sec = 0;
    v16.tv_nsec = 0;
    TFontCacheNode::TFontCacheNode((TFontCacheNode *)v13, a1, v16, -1);
    Node = TLRUCacheImp<TFontCacheNode,48ul>::FindNode(v2, (uint64_t)v13);
    if (Node)
    {
      uint64_t v6 = (uint64_t)Node;
      uint64_t v7 = Node[15];
      uint64_t v8 = Node[16];
      if (v7 != v8)
      {
        while ((*(unsigned int (**)(void))(**(void **)v7 + 16))() == 1)
        {
          v7 += 8;
          if (v7 == v8)
          {
            TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode(v2, v6);
            break;
          }
        }
      }
    }
    TFontCacheNode::~TFontCacheNode((TFontCacheNode *)v13);
  }
  else if (v2)
  {
    uint64_t v9 = (uint64_t *)(v2 + 7296);
    do
    {
LABEL_10:
      uint64_t v10 = *v9;
      uint64_t v9 = (uint64_t *)(v2 + 152 * *v9);
      uint64_t v11 = v9[15];
      uint64_t v12 = v9[16];
      if (v11 != v12)
      {
        while ((*(unsigned int (**)(void))(**(void **)v11 + 16))() == 1)
        {
          v11 += 8;
          if (v11 == v12)
          {
            TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode(v2, (uint64_t)v9);
            uint64_t v9 = (uint64_t *)(v2 + 7296);
            goto LABEL_10;
          }
        }
      }
    }
    while (*(void *)(v2 + 7304) != v10);
  }
  os_unfair_lock_unlock(v3);
}

void sub_1B531FF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TFontCacheNode::~TFontCacheNode((TFontCacheNode *)&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

void dFPPrintTFontCache(void)
{
  pthread_once(&TLockedLRUCache<TFontCacheNode,48ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TFontCacheNode,48ul>::CreateCache);
  v0 = (os_unfair_lock_s *)(TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312);
  os_unfair_lock_lock((os_unfair_lock_t)(TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312));
  os_unfair_lock_unlock(v0);
}

void MCacheData::~MCacheData(MCacheData *this)
{
}

__n128 std::atomic_exchange[abi:fe180100]<MCacheData>@<Q0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _OWORD *a3@<X8>)
{
  sp_mut = std::__get_sp_mut(a1);
  std::__sp_mut::lock(sp_mut);
  uint64_t v7 = *a1;
  *a1 = *a2;
  *a2 = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[1];
  a2[1] = v8;
  std::__sp_mut::unlock(sp_mut);
  __n128 result = *(__n128 *)a2;
  *a3 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t TFontData::GetFontData(TFontData *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(TFontData *))(*(void *)this + 56))(this) + 32);
  return v1();
}

void TTTCData::~TTTCData(TTTCData *this)
{
  *(void *)this = &unk_1F0DD88F8;
  *((void *)this + 2) = &unk_1F0DD8948;
  TDataReference::~TDataReference((TTTCData *)((char *)this + 48));
  *((void *)this + 2) = &unk_1F0DD8968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0DD88F8;
  *((void *)this + 2) = &unk_1F0DD8948;
  TDataReference::~TDataReference((TTTCData *)((char *)this + 48));
  *((void *)this + 2) = &unk_1F0DD8968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v2);
  }
  JUMPOUT(0x1BA9994D0);
}

void non-virtual thunk to'TTTCData::~TTTCData(TTTCData *this)
{
  *((void *)this - 2) = &unk_1F0DD88F8;
  *(void *)this = &unk_1F0DD8948;
  TDataReference::~TDataReference((TTTCData *)((char *)this + 32));
  *(void *)this = &unk_1F0DD8968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v2);
  }
}

{
  TTTCData::~TTTCData((TTTCData *)((char *)this - 16));
}

uint64_t TTTCData::GetKind(TTTCData *this)
{
  return 3;
}

_DWORD *MapTTCHeader(_DWORD *a1, unint64_t a2)
{
  uint64_t v2 = 0;
  if (a1 && a2 >= 0x10)
  {
    unsigned int v3 = a1[2];
    if (v3)
    {
      unsigned int v4 = bswap32(v3);
      if (4 * (unint64_t)(v4 - 1) + 16 > a2)
      {
LABEL_13:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DD4440;
        exception[2] = 4;
      }
      unint64_t v5 = 0;
      if (v4 <= 1) {
        unsigned int v4 = 1;
      }
      uint64_t v6 = 4 * v4;
      do
      {
        if ((int)bswap32(a1[v5 / 4 + 3]) >= a2) {
          goto LABEL_13;
        }
        v5 += 4;
      }
      while (v6 != v5);
      return a1;
    }
    else
    {
      return 0;
    }
  }
  return (_DWORD *)v2;
}

void TTTCMemoryFont::~TTTCMemoryFont(TTTCMemoryFont *this)
{
  *(void *)this = &unk_1F0E00390;
  *((void *)this + 2) = &unk_1F0E003E0;
  TInMemoryDataReference::~TInMemoryDataReference((TTTCMemoryFont *)((char *)this + 40));
  *((void *)this + 2) = &unk_1F0DD8968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E00390;
  *((void *)this + 2) = &unk_1F0E003E0;
  TInMemoryDataReference::~TInMemoryDataReference((TTTCMemoryFont *)((char *)this + 40));
  *((void *)this + 2) = &unk_1F0DD8968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v2);
  }
  JUMPOUT(0x1BA9994D0);
}

void non-virtual thunk to'TTTCMemoryFont::~TTTCMemoryFont(TTTCMemoryFont *this)
{
  *((void *)this - 2) = &unk_1F0E00390;
  *(void *)this = &unk_1F0E003E0;
  TInMemoryDataReference::~TInMemoryDataReference((TTTCMemoryFont *)((char *)this + 24));
  *(void *)this = &unk_1F0DD8968;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v2);
  }
}

{
  TTTCMemoryFont::~TTTCMemoryFont((TTTCMemoryFont *)((char *)this - 16));
}

uint64_t TFont::MakeHandler()
{
  return 0;
}

double TFont::GetInstanceNames@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  return result;
}

void TFont::GetNameUsingMap(uint64_t a1@<X0>, unsigned __int16 a2@<W1>, void *a3@<X2>, TFontNameString *a4@<X8>)
{
  unsigned __int16 v8 = a2;
  if (a3
    && (uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::find<unsigned short>(a3, &v8)) != 0&& (v7 = (const TFontNameString *)(v6 + 3), TFontNameString::IsValid((TFontNameString *)(v6 + 3))))
  {
    TFontNameString::TFontNameString(a4, v7);
  }
  else
  {
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 88))(a1, v8, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
  }
}

uint64_t TFont::GetGlyphsForCharacterRange(TFont *this, unsigned __int16 *a2, CFRange a3)
{
  return 0;
}

uint64_t TFont::GetRegistryOrderingSupplement(TFont *this, TStringRef *a2, TStringRef *a3, int *a4)
{
  return 0;
}

uint64_t TFont::GetGlyphsForCIDs(TFont *this, const unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4)
{
  return 0;
}

uint64_t TFont::GetCIDsForGlyphs(TFont *this, const unsigned __int16 *a2, unint64_t a3, unsigned __int16 *a4)
{
  return 0;
}

void AppendFontWithUniquePostscriptName(void **a1, uint64_t a2)
{
  if (a2)
  {
    (*(void (**)(uint64_t))(*(void *)a2 + 72))(a2);
    if (*a1 != a1[1])
    {
      *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
      unsigned int v22[4] = v4;
      v22[5] = v4;
      v22[2] = v4;
      v22[3] = v4;
      v22[0] = v4;
      v22[1] = v4;
      (*(void (**)(_OWORD *__return_ptr, uint64_t))(*(void *)a2 + 80))(v22, a2);
      unint64_t v5 = (char *)*a1;
      uint64_t v6 = (char *)a1[1];
      TFontNameString::TFontNameString((TFontNameString *)v21, (const TFontNameString *)v22);
      if (v5 != v6)
      {
        while (1)
        {
          (*(void (**)(void *__return_ptr))(**(void **)v5 + 80))(v23);
          char v7 = TFontNameString::operator==((uint64_t)v21, (uint64_t)v23);
          TFontNameString::~TFontNameString((TFontNameString *)v23);
          if (v7) {
            break;
          }
          v5 += 8;
          if (v5 == v6)
          {
            unint64_t v5 = v6;
            break;
          }
        }
      }
      TFontNameString::~TFontNameString((TFontNameString *)v21);
      if (v5 != a1[1])
      {
        (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
        TFontNameString::~TFontNameString((TFontNameString *)v22);
        return;
      }
      TFontNameString::~TFontNameString((TFontNameString *)v22);
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
    unint64_t v8 = (unint64_t)a1[2];
    uint64_t v9 = a1[1];
    if ((unint64_t)v9 >= v8)
    {
      uint64_t v11 = ((char *)v9 - (unsigned char *)*a1) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v12 = v8 - (void)*a1;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        uint64_t v15 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>((uint64_t)(a1 + 2), v14);
      }
      else {
        uint64_t v15 = 0;
      }
      timespec v16 = &v15[8 * v11];
      unsigned int v17 = &v15[8 * v14];
      *(void *)timespec v16 = a2;
      uint64_t v10 = v16 + 8;
      unsigned int v19 = (char *)*a1;
      int v18 = (char *)a1[1];
      if (v18 != *a1)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        int v18 = (char *)*a1;
      }
      *a1 = v16;
      a1[1] = v10;
      a1[2] = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      void *v9 = a2;
      uint64_t v10 = v9 + 1;
    }
    a1[1] = v10;
  }
}

void sub_1B5320990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  TFontNameString::~TFontNameString((TFontNameString *)va);
  _Unwind_Resume(a1);
}

uint64_t AppendWOFFEntities(uint64_t a1, const TFileReference *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  (*(void (**)(uint64_t *__return_ptr, const TFileReference *, void, void))(*(void *)a2 + 32))(&__b, a2, 0, 0);
  if ((unint64_t)(v28 - v27) >= 0x2C
    && (unsigned int v3 = (unsigned char *)(*(void *)(v26 + 8) + v27), *v3 == 119)
    && v3[1] == 79
    && v3[2] == 70)
  {
    int v4 = v3[3];
    TDataReference::~TDataReference((TDataReference *)&__b);
    if (v4 == 70)
    {
      *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long cf = v5;
      long long v24 = v5;
      long long v21 = v5;
      long long v22 = v5;
      long long v19 = v5;
      long long v20 = v5;
      long long v17 = v5;
      long long v18 = v5;
      long long v15 = v5;
      long long v16 = v5;
      long long v13 = v5;
      long long v14 = v5;
      long long v11 = v5;
      long long v12 = v5;
      long long v10 = v5;
      TwOFFStream::TwOFFStream((TwOFFStream *)&v10, a2);
    }
  }
  else
  {
    TDataReference::~TDataReference((TDataReference *)&__b);
  }
  (*(void (**)(uint64_t *__return_ptr, const TFileReference *, void, void))(*(void *)a2 + 32))(&__b, a2, 0, 0);
  if (v26 && (uint64_t v6 = *(void *)(v26 + 8)) != 0 && (unint64_t)(v28 - v27) > 7)
  {
    int v8 = *(_DWORD *)(v6 + v27);
    TDataReference::~TDataReference((TDataReference *)&__b);
    if (v8 == 843468663)
    {
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long cf = v9;
      long long v24 = v9;
      long long v21 = v9;
      long long v22 = v9;
      long long v19 = v9;
      long long v20 = v9;
      long long v17 = v9;
      long long v18 = v9;
      long long v15 = v9;
      long long v16 = v9;
      long long v13 = v9;
      long long v14 = v9;
      long long v11 = v9;
      long long v12 = v9;
      long long v10 = v9;
      TwOFF2Stream::TwOFF2Stream((TwOFF2Stream *)&v10, a2);
    }
  }
  else
  {
    TDataReference::~TDataReference((TDataReference *)&__b);
  }
  return 0;
}

void sub_1B53213A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MEMORY[0x1BA9994D0](v71, 0x10F1C4098F5C889);
  a71 = &unk_1F0DD9500;
  TDataReference::~TDataReference((TDataReference *)&STACK[0xD78]);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&a11);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)&a38);
  TCFData::~TCFData((const void **)(v72 - 128));
  TwOFFStream::~TwOFFStream((TwOFFStream *)&a41);
  _Unwind_Resume(a1);
}

void TFont::CreateFontEntitiesForFile(TFont *this@<X0>, const char *a2@<X1>, timespec a3@<0:X2, 8:X3>, __int16 a4@<W4>, void *a5@<X8>)
{
  int tv_nsec = a3.tv_nsec;
  v80.tv_sec = (__darwin_time_t)a2;
  v80.int tv_nsec = a3.tv_sec;
  long long v9 = 0;
  uint64_t v108 = *MEMORY[0x1E4F143B8];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if (LODWORD(a3.tv_nsec))
  {
    pthread_once(&TLockedLRUCache<TFontCacheNode,48ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TFontCacheNode,48ul>::CreateCache);
    uint64_t v11 = TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache;
    long long v12 = (os_unfair_lock_s *)(TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312);
    os_unfair_lock_lock((os_unfair_lock_t)(TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312));
    TFontCacheNode::TFontCacheNode((TFontCacheNode *)__b, (const char *)this, v80, a4);
    Node = TLRUCacheImp<TFontCacheNode,48ul>::FindNode(v11, (uint64_t)__b);
    TFontCacheNode::~TFontCacheNode((TFontCacheNode *)__b);
    if (Node)
    {
      TFontCacheNode::CopyFonts((TFontCacheNode *)v84, (uint64_t)Node);
      long long v14 = *(_OWORD *)&v84[8];
      long long v9 = *(void **)v84;
    }
    else
    {
      long long v9 = 0;
      long long v14 = 0uLL;
    }
    uint64_t v78 = (void *)v14;
    *a5 = v9;
    *(_OWORD *)(a5 + 1) = v14;
    memset(v84, 0, 24);
    os_unfair_lock_unlock(v12);
    if (v9 != v78) {
      return;
    }
  }
  if (GSFontLibraryCore(0) && getGSFontEnsureFontFileAccessSymbolLoc())
  {
    GSFontEnsureFontFileAccessSymbolLoc = (void (*)(TFont *))getGSFontEnsureFontFileAccessSymbolLoc();
    if (!GSFontEnsureFontFileAccessSymbolLoc)
    {
      dlerror();
      abort_report_np();
      __break(1u);
    }
    GSFontEnsureFontFileAccessSymbolLoc(this);
  }
  memset(__p, 0, 24);
  unint64_t v106 = 0xAAAAAAAAAAAAAAAALL;
  size_t v16 = strlen((const char *)this);
  long long v17 = (TFont *)((char *)this + v16 - 8);
  if (v16 <= 7) {
    long long v17 = this;
  }
  long long v18 = (char *)this + v16 + 1;
  do
  {
    if (v18 - 2 <= (char *)v17 || (int v19 = *(v18 - 2), v19 == 47))
    {
      long long v22 = &v106;
      goto LABEL_20;
    }
    --v18;
  }
  while (v19 != 46);
  long long v20 = v9;
  uint64_t v21 = 0;
  do
  {
    v107[v21 - 8] = __tolower((char)v19);
    int v19 = v18[v21++];
  }
  while (v19);
  long long v22 = (unint64_t *)&v107[v21 - 8];
  long long v9 = v20;
LABEL_20:
  *(unsigned char *)long long v22 = 0;
  size_t v23 = strlen((const char *)this);
  long long v24 = (TFont *)((char *)this + v23 - 9);
  if (v23 <= 9) {
    long long v24 = this;
  }
  long long v25 = (char *)this + v23 - 1;
  do
  {
    uint64_t v26 = v25;
    if (v25 <= (const char *)v24) {
      break;
    }
    --v25;
    int v27 = *(unsigned __int8 *)v26;
    if (v27 == 46) {
      goto LABEL_28;
    }
  }
  while (v27 != 47);
  if (!strncmp(v26, "HelveLTMM", 9uLL) || !strncmp(v26, "TimesLTMM", 9uLL))
  {
    *(void *)&__b[0] = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&__b[0] + 1) = 0xAAAAAAAAAAAAAAAALL;
    TResourceForkSurrogate::TResourceForkSurrogate((TResourceForkSurrogate *)__b, this, v80, 1);
    operator new();
  }
LABEL_28:
  uint64_t v96 = (const TFileFragmentReference *)0xAAAAAAAAAAAAAAAALL;
  uint64_t v97 = (TFileFragmentReference *)0xAAAAAAAAAAAAAAAALL;
  TFileDataSurrogate::TFileDataSurrogate((TFileDataSurrogate *)&v96, this, v80);
  *(void *)&long long v28 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v28 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v94 = v28;
  long long v95 = v28;
  long long v92 = v28;
  long long v93 = v28;
  long long v90 = v28;
  long long v91 = v28;
  long long v88 = v28;
  long long v89 = v28;
  long long v86 = v28;
  long long v87 = v28;
  *(_OWORD *)&v84[16] = v28;
  long long v85 = v28;
  *(_OWORD *)int v84 = v28;
  TSFNTFont::TSFNTFont((TSFNTFont *)v84);
  *(void *)int v84 = &unk_1F0DD6988;
  *(void *)&v84[16] = &unk_1F0DD6B90;
  *((void *)&v95 + 1) = &v96;
  Format = (TTrueTypeFont *)TSFNTFont::GetFormat((TSFNTFont *)v84);
  if (!strncmp((const char *)this, "/System/", 8uLL)
    || !strncmp((const char *)this, "/Library/", 9uLL)
    || os_variant_has_internal_content())
  {
    if ((Format == 0x10000 || Format == 1953658213 || Format == 1752590188)
      && THierVariationsFont::IsHierVariationsFont((THierVariationsFont *)v84, v30))
    {
      HierVariationsFontCreate((const TFileDataSurrogate *)&v96);
    }
    int v32 = 1;
  }
  else
  {
    int v32 = 0;
  }
  if (TTrueTypeFont::IsTrueTypeFont(Format, (TSFNTFont *)v84, v31)) {
    operator new();
  }
  if (TSBITFont::IsSBITFont(Format, (TSFNTFont *)v84, v33)) {
    operator new();
  }
  if (Format == 1953784678)
  {
    *(void *)&long long v56 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v56 + 1) = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v103 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v105 = 0xAAAAAAAAAAAAAAAALL;
    long long v104 = v56;
    *(void *)&v99[8] = 0xAAAAAAAA00000000;
    uint64_t v100 = 0;
    unint64_t v101 = 0;
    *(void *)uint64_t v99 = &unk_1F0DD88F8;
    *(void *)&v99[16] = &unk_1F0DD8948;
    int v102 = &v96;
    (*((void (**)(unint64_t *__return_ptr, const TFileFragmentReference **, void, void))v96 + 4))(&v103, &v96, 0, 0);
    if ((void)v104 && (uint64_t v57 = *(void *)(v104 + 8)) != 0) {
      uint64_t v58 = (_DWORD *)(v57 + *((void *)&v104 + 1));
    }
    else {
      uint64_t v58 = 0;
    }
    uint64_t v76 = MapTTCHeader(v58, v105 - *((void *)&v104 + 1));
    if (v76)
    {
      unsigned int v60 = v76[2];
      if (v60)
      {
        unsigned int v61 = bswap32(v60);
        if (v61 <= 1) {
          uint64_t v62 = 1;
        }
        else {
          uint64_t v62 = v61;
        }
        int v63 = v76 + 3;
        do
        {
          unsigned int v64 = *v63++;
          v82[0] = (const TFileFragmentReference *)&unk_1F0DD4168;
          v82[1] = v97;
          unint64_t v83 = 0xAAAAAAAAAAAAAAAALL;
          (*(void (**)(void))(*((void *)v97 + 3) + 24))();
          v82[0] = (const TFileFragmentReference *)&unk_1F0DD40D8;
          LODWORD(v83) = bswap32(v64);
          *(void *)&long long v65 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v65 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[11] = v65;
          __b[12] = v65;
          __b[9] = v65;
          __b[10] = v65;
          __b[7] = v65;
          __b[8] = v65;
          __b[5] = v65;
          __b[6] = v65;
          __b[3] = v65;
          __b[4] = v65;
          __b[1] = v65;
          __b[2] = v65;
          __b[0] = v65;
          TSFNTFont::TSFNTFont((TSFNTFont *)__b);
          *(void *)&__b[0] = &unk_1F0DD6988;
          *(void *)&__b[1] = &unk_1F0DD6B90;
          *((void *)&__b[12] + 1) = v82;
          uint64_t v66 = TSFNTFont::GetFormat((TSFNTFont *)__b);
          int v69 = (TTrueTypeFont *)v66;
          if (v32
            && (v66 == 0x10000 || v66 == 1953658213 || v66 == 1752590188)
            && THierVariationsFont::IsHierVariationsFont((THierVariationsFont *)__b, v67))
          {
            HierVariationsFontCreate((const TFileDataSurrogate *)v82);
          }
          if (TTrueTypeFont::IsTrueTypeFont(v69, (TSFNTFont *)__b, v68)) {
            operator new();
          }
          if (TSBITFont::IsSBITFont(v69, (TSFNTFont *)__b, v70)) {
            operator new();
          }
          if (v69 == 1330926671)
          {
            qmemcpy(v107, "2FFCdaehaehhxtmhpxam", sizeof(v107));
            if (TSFNTFont::HasTableTags((TSFNTFont *)__b, (uint64_t)v107, 5)) {
              operator new();
            }
            if (TSFNTOpenTypeCIDFont::IsCFFCIDFont((TSFNTOpenTypeCIDFont *)__b, v71)) {
              operator new();
            }
            if (TSFNTOpenTypeFont::IsCFFFont((TSFNTOpenTypeFont *)__b, v72)) {
              operator new();
            }
          }
          TSFNTFont::~TSFNTFont((TSFNTFont *)__b);
          TFileDataSurrogate::~TFileDataSurrogate(v82);
          --v62;
        }
        while (v62);
      }
    }
    *(void *)uint64_t v99 = &unk_1F0DD88F8;
    *(void *)&v99[16] = &unk_1F0DD8948;
    TDataReference::~TDataReference((TDataReference *)&v103);
    *(void *)&v99[16] = &unk_1F0DD8968;
    if (v101) {
      std::__shared_weak_count::__release_shared[abi:fe180100](v101);
    }
    if (!v76) {
      goto LABEL_124;
    }
  }
  else
  {
    if (Format == 1330926671)
    {
      qmemcpy(v99, "2FFCdaehaehhxtmhpxam", 20);
      if (TSFNTFont::HasTableTags((TSFNTFont *)v84, (uint64_t)v99, 5)) {
        operator new();
      }
      if (TSFNTOpenTypeCIDFont::IsCFFCIDFont((TSFNTOpenTypeCIDFont *)v84, v45)) {
        operator new();
      }
      if (TSFNTOpenTypeFont::IsCFFFont((TSFNTOpenTypeFont *)v84, v73)) {
        operator new();
      }
      goto LABEL_124;
    }
    BOOL v59 = v106 == 1868985134 && *(_DWORD *)((char *)&v106 + 3) == 7630447;
    if (!v59 && v106 ^ 0x7266632E | BYTE4(v106))
    {
LABEL_124:
      if (AppendWOFFEntities((uint64_t)__p, (const TFileReference *)&v96))
      {
        int tv_nsec = 0;
      }
      else
      {
        TFileFragmentReference::GetFileData(v97, 0, 0, __b);
        int v74 = (unsigned char *)*((void *)&__b[0] + 1);
        if (*((void *)&__b[0] + 1))
        {
          int v74 = *(unsigned char **)(*((void *)&__b[0] + 1) + 8);
          if (v74) {
            v74 += *(void *)&__b[1];
          }
        }
        if (*((void *)&__b[1] + 1) - *(void *)&__b[1] >= 3uLL && *v74 == 37)
        {
          int v75 = v74[1];
          TDataReference::~TDataReference((TDataReference *)__b);
          if (v75 == 33) {
            operator new();
          }
        }
        else
        {
          TDataReference::~TDataReference((TDataReference *)__b);
        }
        memset(__b, 170, sizeof(__b));
        TFileFragmentReference::GetFileData(v97, 0, 0, v82);
        *(void *)&v99[8] = 0;
        *(void *)&v99[16] = 0;
        *(void *)uint64_t v99 = &unk_1F0DD43A0;
        LOBYTE(v100) = 0;
        unint64_t v101 = (std::__shared_weak_count *)&unk_1F0DD4218;
        int v102 = 0;
        unint64_t v103 = 0;
        *(void *)&long long v104 = 0;
        TType1CFFDescriptor::TType1CFFDescriptor((uint64_t)__b, (uint64_t)v82, v99, 0);
        TStringRef::~TStringRef((void **)v99);
        TDataReference::~TDataReference((TDataReference *)v82);
        if (DWORD2(__b[22]) == 1) {
          operator new();
        }
        if (DWORD2(__b[22]) == 2) {
          operator new();
        }
        *(void *)&__b[0] = &unk_1F0DD9500;
        TDataReference::~TDataReference((TDataReference *)((char *)&__b[184] + 8));
      }
      goto LABEL_43;
    }
    TXMLSplicedFont::CreateSpliceFonts((TXMLSplicedFont *)&v96, __b);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = __b[0];
    __p[2] = *(void **)&__b[1];
  }
LABEL_43:
  TSFNTFont::~TSFNTFont((TSFNTFont *)v84);
  TFileDataSurrogate::~TFileDataSurrogate(&v96);
  if (v9)
  {
    operator delete(v9);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
  }
  long long v34 = __p[0];
  *a5 = __p[0];
  long long v35 = __p[1];
  *(_OWORD *)(a5 + 1) = *(_OWORD *)&__p[1];
  if (tv_nsec)
  {
    uint64_t v36 = (uint64_t)v35;
    if (v34 != v35)
    {
      uint64_t v79 = v34;
      pthread_once(&TLockedLRUCache<TFontCacheNode,48ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TFontCacheNode,48ul>::CreateCache);
      uint64_t v37 = TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache;
      lock = (os_unfair_lock_s *)(TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312);
      os_unfair_lock_lock((os_unfair_lock_t)(TLockedLRUCache<TFontCacheNode,48ul>::sSharedCache + 7312));
      if (v37)
      {
        uint64_t v38 = *(void *)(v37 + 7296);
        if (*(void *)(v37 + 152 * v38 + 8) != *(void *)(v37 + 152 * v38 + 16))
        {
          unsigned int v39 = 0;
          uint64_t v40 = 0;
          int v41 = (void *)(v37 + 152 * v38);
          while (1)
          {
            if ((void *)(v37 + 152 * *(void *)(v37 + 7304)) == v41) {
              long long v42 = 0;
            }
            else {
              long long v42 = (void *)(v37 + 152 * *v41);
            }
            uint64_t v44 = v41[15];
            uint64_t v43 = v41[16];
            if (v44 != v43)
            {
              while ((*(unsigned int (**)(void))(**(void **)v44 + 16))() == 1)
              {
                v44 += 8;
                if (v44 == v43)
                {
                  if (v39 <= 0x1F)
                  {
                    uint64_t v40 = (uint64_t)v41;
                    break;
                  }
                  TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode(v37, (uint64_t)v41);
                  if (!v42) {
                    goto LABEL_69;
                  }
                  uint64_t v40 = 0;
                  goto LABEL_61;
                }
              }
            }
            if (!v42) {
              break;
            }
LABEL_61:
            ++v39;
            int v41 = v42;
            if (v42[1] == v42[2]) {
              goto LABEL_69;
            }
          }
          if (v40) {
            TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode(v37, v40);
          }
        }
      }
LABEL_69:
      *(void *)&__b[0] = 0;
      size_t v46 = strlen((const char *)this);
      v84[0] = 0;
      std::vector<char,TInlineBufferAllocator<char,64ul>>::vector((void *)__b + 1, v46 + 1, v84);
      *(timespec *)((char *)&__b[6] + 8) = v80;
      __b[8] = 0uLL;
      std::vector<TFont *>::__init_with_size[abi:fe180100]<TFont **,TFont **>((void *)&__b[7] + 1, v79, v36, (v36 - (uint64_t)v79) >> 3);
      LOWORD(__b[9]) = 0;
      strlcpy(*((char **)&__b[0] + 1), (const char *)this, *(void *)&__b[1] - *((void *)&__b[0] + 1));
      if (*(void *)&__b[8] - *((void *)&__b[7] + 1) == 8)
      {
        uint64_t v47 = (*(uint64_t (**)(void))(***((void ***)&__b[7] + 1) + 440))(**((void **)&__b[7] + 1));
        if (v47) {
          LOWORD(__b[9]) = *(_DWORD *)(*(void *)(v47 + 48) + 56);
        }
      }
      uint64_t v48 = *((void *)&__b[7] + 1);
      uint64_t v49 = *(void *)&__b[8];
      while (v48 != v49)
      {
        (*(void (**)(void))(**(void **)v48 + 24))();
        v48 += 8;
      }
      uint64_t v50 = *(void *)(v37 + 7304);
      int v51 = (void *)TFontCacheNode::operator=(v37 + 152 * v50, (uint64_t)__b);
      uint64_t v52 = *(void *)(v37 + 7296);
      uint64_t v53 = v52;
      do
      {
        uint64_t v54 = v53;
        int v55 = (uint64_t *)(v37 + 152 * v53);
        uint64_t v53 = *v55;
      }
      while (*v55 != *(void *)(v37 + 7304));
      *(void *)(v37 + 7304) = v54;
      void *v51 = v52;
      *(void *)(v37 + 7296) = v50;
      *int v55 = v50;
      TFontCacheNode::~TFontCacheNode((TFontCacheNode *)__b);
      os_unfair_lock_unlock(lock);
    }
  }
}

void sub_1B53224AC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_unfair_lock_t lock, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,const TFileFragmentReference *a55)
{
  MEMORY[0x1BA9994D0](v57, 0x10F1C4088C4C3EFLL);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&a29);
  TFileDataSurrogate::~TFileDataSurrogate(&a55);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5321A8CLL);
  }
  if (__p) {
    operator delete(__p);
  }
  if (v55)
  {
    *(void *)(v56 + 8) = v55;
    operator delete(v55);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *TFont::CreateFontEntitiesForDataStream@<X0>(unsigned __int8 *this@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (this && a2)
  {
    if (a2 >= 3)
    {
      int v4 = *this;
      if (v4 == 37)
      {
        if (this[1] == 33) {
          operator new();
        }
      }
      else if (a2 >= 6 && v4 == 128 && this[1] == 1)
      {
        operator new();
      }
    }
    unint64_t v6 = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v7 = 0xAAAAAAAAAAAAAAAALL;
    long long v5 = &unk_1F0DD4120;
    operator new();
  }
  return this;
}

void sub_1B53230B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,void *a55)
{
  MEMORY[0x1BA9994D0](v56, 0x10F1C4071E37867);
  a55 = &unk_1F0DD9500;
  TDataReference::~TDataReference((TDataReference *)&STACK[0xCF8]);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&a25);
  TInMemoryDataReference::~TInMemoryDataReference((TInMemoryDataReference *)&a52);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5322B1CLL);
  }
  BOOL v59 = *(void **)v55;
  if (*(void *)v55)
  {
    *(void *)(v55 + 8) = v59;
    operator delete(v59);
  }
  _Unwind_Resume(a1);
}

_DWORD *TTTCMemoryFont::GetTTCHeader(TTTCMemoryFont *this)
{
  TInMemoryDataReference::GetDataReference((void *)this + 5, 0, 0, &v6);
  if (v7 && (uint64_t v2 = *(void *)(v7 + 8)) != 0) {
    unsigned int v3 = (_DWORD *)(v2 + v8);
  }
  else {
    unsigned int v3 = 0;
  }
  int v4 = MapTTCHeader(v3, *(void *)(*((void *)this + 6) + 16));
  TDataReference::~TDataReference((TDataReference *)&v6);
  return v4;
}

void sub_1B5323398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TFont::Normalize(int a1, uint64_t a2, int a3, void *a4)
{
  if (a2) {
    bzero(a4, 2 * a2);
  }
  return 0;
}

uint64_t TFont::GetVariationAxes()
{
  return 0;
}

void TFont::GetVariationInstances(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t TFont::GetPostScriptNameSuffixForVariation()
{
  return 0;
}

unint64_t MixString(const char *a1, unint64_t a2)
{
  if (a2 < 5)
  {
    unint64_t i = a2;
  }
  else
  {
    for (unint64_t i = a2; i > 4; i -= 4)
    {
      unsigned int v3 = *(_DWORD *)a1;
      if (*(_DWORD *)a1)
      {
        unsigned int v4 = 9 * ((v3 + ~(v3 << 15)) ^ ((v3 + ~(v3 << 15)) >> 10));
        unsigned int v3 = ((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) ^ (((v4 ^ (v4 >> 6)) + ~((v4 ^ (v4 >> 6)) << 11)) >> 16);
      }
      a2 = v3 ^ a2;
      a1 += 4;
    }
  }
  unsigned int v5 = 0;
  switch(i)
  {
    case 0uLL:
      return a2;
    case 1uLL:
      goto LABEL_11;
    case 2uLL:
      goto LABEL_10;
    case 3uLL:
      unsigned int v5 = *((unsigned __int8 *)a1 + 2) << 23;
LABEL_10:
      v5 |= *((unsigned __int8 *)a1 + 1) << 11;
LABEL_11:
      v5 += *(unsigned __int8 *)a1;
      if (v5)
      {
        unsigned int v6 = 9 * ((v5 + ~(v5 << 15)) ^ ((v5 + ~(v5 << 15)) >> 10));
        unsigned int v5 = ((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) ^ (((v6 ^ (v6 >> 6)) + ~((v6 ^ (v6 >> 6)) << 11)) >> 16);
      }
      break;
    default:
      return v5 ^ a2;
  }
  return v5 ^ a2;
}

unint64_t TFont::GetGlyphOutlineCache(atomic_ullong *a1)
{
  unint64_t result = atomic_load_explicit(a1 + 5, memory_order_acquire);
  if (!result)
  {
    unsigned int v3 = (TGlyphOutlineCache *)(*(uint64_t (**)(atomic_ullong *))(*a1 + 168))(a1);
    TGlyphOutlineCache::CreateGlyphOutlineCache(v3);
  }
  return result;
}

void TFontSurrogate::TFontSurrogate(TFontSurrogate *this)
{
  *(void *)this = &unk_1F0DD8690;
  *((void *)this + 1) = 0;
}

{
  *(void *)this = &unk_1F0DD8690;
  *((void *)this + 1) = 0;
}

void TFontSurrogate::~TFontSurrogate(TFontSurrogate *this)
{
}

void TFontSurrogate::TFontSurrogate(TFontSurrogate *this, const TFontSurrogate *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  *(void *)this = &unk_1F0DD8690;
  *((void *)this + 1) = v2;
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)a2 + 1);
  *(void *)this = &unk_1F0DD8690;
  *((void *)this + 1) = v2;
}

uint64_t TFontSurrogate::operator=(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

TSFNTFont *TFontSurrogate::GetFormat(TFontSurrogate *this)
{
  unint64_t result = (TSFNTFont *)(*(uint64_t (**)(void))(**((void **)this + 1) + 432))(*((void *)this + 1));
  if (result)
  {
    return (TSFNTFont *)TSFNTFont::GetFormat(result);
  }
  return result;
}

uint64_t TFontSurrogate::GetTablePart@<X0>(uint64_t this@<X0>, unsigned int *a2@<X4>, unsigned int a3@<W1>, unsigned int a4@<W2>, unsigned int a5@<W3>, void *a6@<X8>)
{
  if (a3
    && (uint64_t v7 = this, *(void *)(this + 8))
    && (this = (*(uint64_t (**)(uint64_t))(*(void *)this + 72))(this)) != 0
    && a3 <= bswap32(*(unsigned __int16 *)(this + 4)) >> 16
    && ((unsigned int v12 = bswap32(*(_DWORD *)(this + 16 * a3 + 8)), v12 > a4) ? (v13 = v12 - a4 >= a5) : (v13 = 0), v13))
  {
    *a2 = v12;
    long long v14 = *(uint64_t (**)(void))(**(void **)(v7 + 8) + 48);
    return v14();
  }
  else
  {
    *a6 = &unk_1F0DD4218;
    a6[1] = 0;
    a6[2] = 0;
    a6[3] = 0;
  }
  return this;
}

uint64_t TFontSurrogate::GetFontProtectionInfo(TFontSurrogate *this, unsigned int *a2)
{
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v6 = v2;
  long long v7 = v2;
  (*(void (**)(long long *__return_ptr))(*(void *)this + 40))(&v6);
  uint64_t v3 = 0;
  if (*((void *)&v7 + 1) - (void)v7 >= 0xAuLL)
  {
    if (*((void *)&v6 + 1) && (uint64_t v4 = *(void *)(*((void *)&v6 + 1) + 8)) != 0) {
      uint64_t v3 = bswap32(*(unsigned __int16 *)(v4 + v7 + 8)) & 0xFFFF0000;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  TDataReference::~TDataReference((TDataReference *)&v6);
  return v3;
}

BOOL TFontSurrogate::FontTableExists(TFontSurrogate *this, uint64_t a2)
{
  int v4 = 0;
  return (*(unsigned int (**)(TFontSurrogate *, uint64_t, int *))(*(void *)this + 24))(this, a2, &v4) != -1
      && v4 != 0;
}

uint64_t TFontSurrogate::GetFontTableSize(TFontSurrogate *this, uint64_t a2)
{
  unsigned int v3 = 0;
  if ((*(unsigned int (**)(TFontSurrogate *, uint64_t, unsigned int *))(*(void *)this + 24))(this, a2, &v3) == -1)return 0; {
  else
  }
    return v3;
}

uint64_t TFPFontImpl::FindFontNamePerScript(TFPFontImpl *this, const char *a2)
{
  if (!strcmp((const char *)this, "GB1"))
  {
    uint64_t v4 = 0;
  }
  else if (!strcmp((const char *)this, "CNS1"))
  {
    uint64_t v4 = 1;
  }
  else if (!strcmp((const char *)this, "Japan1"))
  {
    uint64_t v4 = 2;
  }
  else
  {
    if (strcmp((const char *)this, "Korea1")) {
      return 0;
    }
    uint64_t v4 = 3;
  }
  return (uint64_t)*(&TFPFontImpl::FindFontNamePerScript(char const*)::gPDFFallbackFontName + v4);
}

uint64_t TTTCMemoryFont::GetKind(TTTCMemoryFont *this)
{
  return 4;
}

uint64_t TTTCMemoryFont::GetFontRef(TTTCMemoryFont *this)
{
  return (uint64_t)this + 40;
}

void TLockedLRUCache<TFontCacheNode,48ul>::CreateCache()
{
}

uint64_t *TLRUCacheImp<TFontCacheNode,48ul>::FindNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 7296);
  unsigned int v5 = (uint64_t *)(a1 + 152 * v4);
  if (!TFontCacheNode::operator==((uint64_t)v5, a2))
  {
    uint64_t v6 = *(void *)(a1 + 7304);
    uint64_t v7 = v4;
    do
    {
      if (v7 == v6) {
        return 0;
      }
      uint64_t v8 = v7;
      uint64_t v7 = *v5;
      unsigned int v5 = (uint64_t *)(a1 + 152 * *v5);
    }
    while (!TFontCacheNode::operator==((uint64_t)v5, a2));
    if (v7 != v4)
    {
      *(void *)(a1 + 152 * v8) = *v5;
      uint64_t v9 = *(void *)(a1 + 7304);
      if (v7 == v9)
      {
        *(void *)(a1 + 7304) = v8;
        uint64_t v9 = v8;
      }
      *unsigned int v5 = v4;
      *(void *)(a1 + 7296) = v7;
      *(void *)(a1 + 152 * v9) = v7;
    }
  }
  return v5;
}

void TLRUCacheImp<TFontCacheNode,48ul>::RemoveNode(uint64_t a1, uint64_t a2)
{
  v16[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 7304);
  uint64_t v5 = *(void *)(a1 + 7296);
  uint64_t v6 = (uint64_t *)(a1 + 152 * v5);
  if (TFontCacheNode::operator==((uint64_t)v6, a2))
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v5;
    uint64_t v9 = v4;
LABEL_3:
    *(void *)(a1 + 7296) = v7;
LABEL_4:
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[3] = 0xAAAAAAAAAAAAAAAALL;
    v13[2] = v10;
    v13[3] = v10;
    v13[0] = v10;
    v13[1] = v10;
    memset(v12, 0, sizeof(v12));
    long long v14 = v13;
    long long v15 = 0u;
    memset(v16, 0, 24);
    TFontCacheNode::operator=((uint64_t)v6, (uint64_t)v12);
    uint64_t v11 = *(void *)(a1 + 7304);
    if (v8 != v11)
    {
      *(void *)(a1 + 152 * v9) = v7;
      *(void *)(a1 + 152 * v11) = v8;
      *(void *)(a1 + 7304) = v8;
    }
    *uint64_t v6 = *(void *)(a1 + 7296);
    TFontCacheNode::~TFontCacheNode((TFontCacheNode *)v12);
  }
  else
  {
    uint64_t v8 = v5;
    while (v8 != v4)
    {
      uint64_t v9 = v8;
      uint64_t v8 = *v6;
      uint64_t v6 = (uint64_t *)(a1 + 152 * *v6);
      if (TFontCacheNode::operator==((uint64_t)v6, a2))
      {
        uint64_t v7 = *v6;
        if (v8 == v5) {
          goto LABEL_3;
        }
        goto LABEL_4;
      }
    }
  }
}

void sub_1B5323C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void TFontCacheNode::TFontCacheNode(TFontCacheNode *this, const char *__s, timespec a3, __int16 a4)
{
  uint64_t tv_nsec = a3.tv_nsec;
  __darwin_time_t tv_sec = a3.tv_sec;
  *(void *)this = 0;
  uint64_t v9 = (void *)((char *)this + 8);
  size_t v10 = strlen(__s);
  v11[0] = 0;
  std::vector<char,TInlineBufferAllocator<char,64ul>>::vector(v9, v10 + 1, v11);
  *((void *)this + 15) = 0;
  *((void *)this + 13) = tv_sec;
  *((void *)this + 14) = tv_nsec;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((_WORD *)this + 72) = a4;
  strlcpy(*((char **)this + 1), __s, *((void *)this + 2) - *((void *)this + 1));
}

void sub_1B5323D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v2 + 128) = v5;
    operator delete(v5);
  }
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *std::vector<char,TInlineBufferAllocator<char,64ul>>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[11] = a1 + 3;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<char,TInlineBufferAllocator<char,64ul>>::__vallocate[abi:fe180100](a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    uint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B5323DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<char,TInlineBufferAllocator<char,64ul>>::__vallocate[abi:fe180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  size_t v5 = a1 + 11;
  unint64_t result = (char *)a1[11];
  if (&result[__sz] <= (char *)a1 + 88) {
    *size_t v5 = &result[__sz];
  }
  else {
    unint64_t result = (char *)operator new(__sz);
  }
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

BOOL TFontCacheNode::operator==(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int16 *)(a2 + 144);
  if (v3 != 0xFFFF
    && (*(void *)(a1 + 104) != *(void *)(a2 + 104) || *(void *)(a1 + 112) != *(void *)(a2 + 112)))
  {
    return 0;
  }
  size_t v5 = *(const char **)(a1 + 8);
  if (v5 == *(const char **)(a1 + 16) || strcmp(v5, *(const char **)(a2 + 8))) {
    return 0;
  }
  if (*(void *)(a1 + 128) - *(void *)(a1 + 120) > 8uLL) {
    return 1;
  }
  return (__int16)v3 < 1 || *(unsigned __int16 *)(a1 + 144) == v3;
}

void *TFontCacheNode::CopyFonts(TFontCacheNode *this, uint64_t a2)
{
  int v3 = *(char **)(a2 + 120);
  uint64_t v4 = *(char **)(a2 + 128);
  if (v3 == v4)
  {
    uint64_t v7 = *(const void **)(a2 + 120);
  }
  else
  {
    do
    {
      uint64_t v6 = *(void *)v3;
      v3 += 8;
      (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
    }
    while (v3 != v4);
    uint64_t v7 = *(const void **)(a2 + 120);
    int v3 = *(char **)(a2 + 128);
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  return std::vector<TFont *>::__init_with_size[abi:fe180100]<TFont **,TFont **>(this, v7, (uint64_t)v3, (v3 - (unsigned char *)v7) >> 3);
}

void *std::vector<TFont *>::__init_with_size[abi:fe180100]<TFont **,TFont **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    unint64_t result = std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>((uint64_t)(result + 2), a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      unint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B5323FD0(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFontNameString::operator==(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int16 *)(a1 + 66) != *(unsigned __int16 *)(a2 + 66)) {
    return 0;
  }
  uint64_t result = TStringRef::operator==((void *)a1, (void *)a2);
  if (!result) {
    return result;
  }
  if (*(unsigned __int8 *)(a1 + 64) != *(unsigned __int8 *)(a2 + 64)
    || *(unsigned __int16 *)(a1 + 68) != *(unsigned __int16 *)(a2 + 68)
    || *(unsigned __int16 *)(a1 + 70) != *(unsigned __int16 *)(a2 + 70)
    || *(unsigned __int16 *)(a1 + 72) != *(unsigned __int16 *)(a2 + 72))
  {
    return 0;
  }
  size_t v5 = *(const void **)(a1 + 80);
  uint64_t v6 = *(const void **)(a2 + 80);
  if (v5 == v6 || (uint64_t result = 0, v5) && v6 && (uint64_t result = CFEqual(*(CFTypeRef *)(a1 + 80), v6), result))
  {
    uint64_t v7 = *(const void **)(a1 + 88);
    uint64_t v8 = *(const void **)(a2 + 88);
    if (v7 == v8)
    {
      return 1;
    }
    else
    {
      uint64_t result = 0;
      if (v7)
      {
        if (v8) {
          return CFEqual(*(CFTypeRef *)(a1 + 88), v8) != 0;
        }
      }
    }
  }
  return result;
}

BOOL TStringRef::operator==(void *a1, void *a2)
{
  size_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0;
  }
  if (!v2) {
    return 1;
  }
  uint64_t v4 = (const void *)a1[1];
  if (!v4)
  {
    uint64_t v5 = a1[5];
    if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0) {
      uint64_t v4 = (const void *)(v6 + a1[6]);
    }
    else {
      uint64_t v4 = 0;
    }
  }
  uint64_t v8 = (const void *)a2[1];
  if (!v8)
  {
    uint64_t v7 = a2[5];
    if (!v7) {
      return v7;
    }
    uint64_t v7 = *(void *)(v7 + 8);
    if (!v7) {
      return v7;
    }
    uint64_t v8 = (const void *)(v7 + a2[6]);
  }
  uint64_t v7 = 0;
  if (v4 && v8) {
    return memcmp(v4, v8, v2) == 0;
  }
  return v7;
}

uint64_t GSFontLibraryCore(char **a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v1 = GSFontLibraryCore(char **)::frameworkLibrary;
  uint64_t v6 = GSFontLibraryCore(char **)::frameworkLibrary;
  if (!GSFontLibraryCore(char **)::frameworkLibrary)
  {
    long long v7 = xmmword_1E60F3DA8;
    v4[3] = _sl_dlopen();
    GSFontLibraryCore(char **)::frameworkLibrary = v4[3];
    uint64_t v1 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v1;
}

void sub_1B5324284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t getGSFontEnsureFontFileAccessSymbolLoc(void)
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = getGSFontEnsureFontFileAccessSymbolLoc(void)::ptr;
  uint64_t v6 = getGSFontEnsureFontFileAccessSymbolLoc(void)::ptr;
  if (!getGSFontEnsureFontFileAccessSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZL38getGSFontEnsureFontFileAccessSymbolLocv_block_invoke;
    v2[3] = &unk_1E60F3DE8;
    v2[4] = &v3;
    ___ZL38getGSFontEnsureFontFileAccessSymbolLocv_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1B5324354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL17GSFontLibraryCorePPc_block_invoke(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  GSFontLibraryCore(char **)::frameworkLibrary = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void *___ZL38getGSFontEnsureFontFileAccessSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v5 = 0;
  size_t v2 = (void *)GSFontLibraryCore(&v5);
  uint64_t v3 = v5;
  if (!v2)
  {
    uint64_t v3 = (void *)abort_report_np();
    goto LABEL_5;
  }
  if (v5) {
LABEL_5:
  }
    free(v3);
  uint64_t result = dlsym(v2, "GSFontEnsureFontFileAccess");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getGSFontEnsureFontFileAccessSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void TTTCMemoryFont::TTTCMemoryFont(TTTCMemoryFont *this, const void *a2)
{
  *((_DWORD *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *(void *)this = &unk_1F0E00390;
  *((void *)this + 2) = &unk_1F0E003E0;
  *((void *)this + 5) = &unk_1F0DD4120;
  operator new();
}

void sub_1B5324594(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 16) = &unk_1F0DD8968;
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<MCacheData>::shared_ptr[abi:fe180100]<MCacheData,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1B5324630(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MCacheData *,std::shared_ptr<MCacheData>::__shared_ptr_default_delete<MCacheData,MCacheData>,std::allocator<MCacheData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1BA9994D0);
}

uint64_t std::__shared_ptr_pointer<MCacheData *,std::shared_ptr<MCacheData>::__shared_ptr_default_delete<MCacheData,MCacheData>,std::allocator<MCacheData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MCacheData *,std::shared_ptr<MCacheData>::__shared_ptr_default_delete<MCacheData,MCacheData>,std::allocator<MCacheData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::find<unsigned short>(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void TType1SFNTFont::FindCharName(TType1SFNTFont *this, unsigned int a2, unsigned __int8 *a3)
{
  unsigned int v5 = *(_DWORD *)(*(void *)(*((void *)this + 4) + 104) + 8 * a2);
  if (v5 >= 0x64) {
    uint64_t v6 = 100;
  }
  else {
    uint64_t v6 = v5;
  }
  if (v5 >= 0x64) {
    uint64_t v7 = v5 - 100;
  }
  else {
    uint64_t v7 = 0;
  }
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = v8;
  long long v16 = v8;
  v15[0] = v8;
  size_t v9 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1SFNTFont *))(*(void *)this + 216))(this);
  uint64_t v10 = (*(uint64_t (**)(TType1SFNTFont *))(*(void *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v15, v9, v10, v7, v6);
  uint64_t v11 = *((void *)&v16 + 1) + v6;
  unint64_t v12 = *((void *)&v16 + 1) + v6 - 1;
  while (v12 > *((void *)&v16 + 1))
  {
    if (*(unsigned char *)(v11 - 1) == 47 && *(unsigned __int8 *)(v11 - 2) <= 0x20u)
    {
      uint64_t v13 = 0;
      LOBYTE(v14) = 47;
      do
      {
        a3[v13 + 1] = v14;
        unsigned int v14 = *(unsigned __int8 *)(v11 + v13++);
      }
      while (v14 > 0x20);
      *a3 = v13;
      break;
    }
    unint64_t v12 = v11 - 2;
    --v11;
  }
  TDataReference::~TDataReference((TDataReference *)((char *)v15 + 8));
}

uint64_t TType1SFNTFont::GetFontDataLength(TType1SFNTFont *this, unsigned int *a2, unsigned int *a3)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = v6;
  long long v13 = v6;
  v12[0] = v6;
  uint64_t v7 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1SFNTFont *))(*(void *)this + 216))(this);
  uint64_t v8 = (*(uint64_t (**)(TType1SFNTFont *))(*(void *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v12, v7, v8, 0, 24);
  uint64_t v9 = *((void *)&v13 + 1);
  *a2 = bswap32(*(_DWORD *)(*((void *)&v13 + 1) + 12));
  *a3 = bswap32(*(_DWORD *)(v9 + 16));
  uint64_t v10 = bswap32(*(_DWORD *)(v9 + 8));
  TDataReference::~TDataReference((TDataReference *)((char *)v12 + 8));
  return v10;
}

void TStreamingContext::~TStreamingContext(TStreamingContext *this)
{
  TBufferedStreamingContext::~TBufferedStreamingContext(this);
  JUMPOUT(0x1BA9994D0);
}

void TType1SFNTFont::StreamPSFont(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int *a9, uint64_t a10)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, *a9);
  *a9 = v15;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 240))(&v23, a1, v15, a8);
  long long v22 = (__int32 *)v23;
  *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v66 = v17;
  long long v65 = v17;
  long long v64 = v17;
  long long v63 = v17;
  long long v62 = v17;
  long long v61 = v17;
  long long v60 = v17;
  long long v59 = v17;
  long long v58 = v17;
  long long v57 = v17;
  long long v56 = v17;
  long long v55 = v17;
  long long v54 = v17;
  long long v53 = v17;
  long long v52 = v17;
  long long v51 = v17;
  long long v50 = v17;
  long long v49 = v17;
  long long v48 = v17;
  long long v47 = v17;
  long long v46 = v17;
  long long v45 = v17;
  long long v44 = v17;
  long long v43 = v17;
  long long v42 = v17;
  long long v41 = v17;
  long long v40 = v17;
  long long v39 = v17;
  long long v38 = v17;
  long long v37 = v17;
  long long v36 = v17;
  *(_OWORD *)long long v35 = v17;
  if (!a5)
  {
    LODWORD(v18) = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 168))(*(void *)(a1 + 32));
    if (v18 >= 0xFFFF) {
      uint64_t v18 = 0xFFFFLL;
    }
    else {
      uint64_t v18 = v18;
    }
    TType1PSFont::SetEncoding(v18, v22, v35, v19);
  }
  if ((*((unsigned char *)a9 + 1) & 2) == 0)
  {
    if ((*(_WORD *)(a1 + 8) & 1) != 0 && ((a4 & 1) != 0 || TType1PSFont::PrinterIsBad(a2, v16)))
    {
      memset(__b, 170, 0x2D8uLL);
      TBufferedCharStringStreamingContext::TBufferedCharStringStreamingContext(__b, a1, (uint64_t)v22, a10);
    }
    unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v31 = v20;
    long long v32 = v20;
    long long v29 = v20;
    long long v30 = v20;
    long long v27 = v20;
    long long v28 = v20;
    long long v25 = v20;
    long long v26 = v20;
    *(_OWORD *)long long v24 = v20;
    TBufferedStreamingContext::TBufferedStreamingContext(v24, a1, (uint64_t)v22, a10);
  }
  *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v30 = v21;
  long long v31 = v21;
  long long v28 = v21;
  long long v29 = v21;
  long long v26 = v21;
  long long v27 = v21;
  *(_OWORD *)long long v24 = v21;
  long long v25 = v21;
  TBufferedStreamingContext::TBufferedStreamingContext(v24, a1, (uint64_t)v22, a10);
}

void sub_1B532573C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int16 a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
  TDataReference::~TDataReference((TDataReference *)&a50);
  if (a2 == 1)
  {
    long long v52 = __cxa_begin_catch(a1);
    a37 = v52[4];
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = v52[4];
  }
  TBufferedStreamingContext::~TBufferedStreamingContext((TBufferedStreamingContext *)&a29);
  if (a28) {
    MEMORY[0x1BA9994A0](a28, 0x1000C8052888210);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *FindEncoRange(unsigned __int8 *result, int a2, unsigned int *a3, unsigned int *a4)
{
  if (!a2) {
    goto LABEL_23;
  }
  unint64_t v4 = (unint64_t)&result[a2];
  unsigned int v5 = result;
  long long v6 = result;
  while (1)
  {
    int v7 = *v6++;
    if (v7 == 47)
    {
      if (v5[1] != 69)
      {
        long long v6 = v5 + 2;
        goto LABEL_22;
      }
      if (v5[2] != 110)
      {
        long long v6 = v5 + 3;
        goto LABEL_22;
      }
      if (v5[3] != 99)
      {
        long long v6 = v5 + 4;
        goto LABEL_22;
      }
      if (v5[4] != 111)
      {
        long long v6 = v5 + 5;
        goto LABEL_22;
      }
      if (v5[5] != 100)
      {
        long long v6 = v5 + 6;
        goto LABEL_22;
      }
      if (v5[6] != 105)
      {
        long long v6 = v5 + 7;
        goto LABEL_22;
      }
      if (v5[7] != 110)
      {
        long long v6 = v5 + 8;
        goto LABEL_22;
      }
      if (v5[8] != 103)
      {
        long long v6 = v5 + 9;
        goto LABEL_22;
      }
      long long v6 = v5 + 10;
      if ((char)v5[9] <= 32) {
        break;
      }
    }
LABEL_22:
    unsigned int v5 = v6;
    if ((unint64_t)v6 >= v4) {
      goto LABEL_23;
    }
  }
  int v9 = v6 - result;
  *a3 = v6 - result;
  if ((unint64_t)v6 < v4)
  {
    uint64_t v10 = (char *)v6;
    while (1)
    {
      int v11 = *v10++;
      if (v11 <= 32)
      {
        if (v6[1] == 100)
        {
          if (v6[2] == 101)
          {
            if (v6[3] == 102)
            {
              uint64_t v10 = (char *)(v6 + 5);
              if ((char)v6[4] <= 32)
              {
                unsigned int v8 = v10 - result + ~v9;
                goto LABEL_24;
              }
            }
            else
            {
              uint64_t v10 = (char *)(v6 + 4);
            }
          }
          else
          {
            uint64_t v10 = (char *)(v6 + 3);
          }
        }
        else
        {
          uint64_t v10 = (char *)(v6 + 2);
        }
      }
      unsigned int v8 = -1;
      long long v6 = (unsigned __int8 *)v10;
      if ((unint64_t)v10 >= v4) {
        goto LABEL_24;
      }
    }
  }
LABEL_23:
  unsigned int v8 = -1;
LABEL_24:
  *a4 = v8;
  return result;
}

uint64_t StreamBytes(uint64_t a1, const unsigned __int8 *a2, uint64_t *a3)
{
  if (!a3 || (uint64_t v3 = *a3) == 0 || !*(_DWORD *)v3)
  {
    __int16 v6 = 9;
    goto LABEL_8;
  }
  uint64_t result = (*(uint64_t (**)(void, uint64_t, const unsigned __int8 *))(v3 + 20))(*(void *)(v3 + 28), a1, a2);
  if ((_WORD)result)
  {
    __int16 v6 = result;
LABEL_8:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = v6;
  }
  return result;
}

void TType1SFNTFont::StreamFontEncoding(void **a1, uint64_t a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[1] = v4;
  long long v25 = v4;
  v24[0] = v4;
  unsigned int v5 = (const TFontObjectSurrogate *)((uint64_t (*)(void **))(*a1)[27])(a1);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v24, v5, 1162756943, 0, 12);
  uint64_t v6 = *((void *)&v25 + 1);
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v21[1] = v7;
  long long v22 = v7;
  v21[0] = v7;
  unsigned int v8 = (const TFontObjectSurrogate *)((uint64_t (*)(void **))(*a1)[27])(a1);
  uint64_t v9 = bswap32(*(_DWORD *)(v6 + 4));
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v21, v8, 1162756943, v9, bswap32(*(_DWORD *)(v6 + 8)) - v9);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v60 = v10;
  long long v61 = v10;
  long long v58 = v10;
  long long v59 = v10;
  long long v56 = v10;
  long long v57 = v10;
  long long v54 = v10;
  long long v55 = v10;
  long long v52 = v10;
  long long v53 = v10;
  long long v50 = v10;
  long long v51 = v10;
  long long v48 = v10;
  long long v49 = v10;
  long long v46 = v10;
  long long v47 = v10;
  long long v44 = v10;
  long long v45 = v10;
  long long v42 = v10;
  long long v43 = v10;
  long long v40 = v10;
  long long v41 = v10;
  long long v38 = v10;
  long long v39 = v10;
  long long v36 = v10;
  long long v37 = v10;
  long long v34 = v10;
  long long v35 = v10;
  long long v32 = v10;
  long long v33 = v10;
  int v11 = (int)bswap32((unsigned __int16)**((_WORD **)&v22 + 1)) >> 16;
  long long v30 = v10;
  long long v31 = v10;
  if (v11)
  {
    if (v11 == 1)
    {
      int v14 = (int)bswap32(*(unsigned __int16 *)(*((void *)&v22 + 1) + 2)) >> 16;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      if (v14 >= 1)
      {
        uint64_t v15 = (unsigned __int16 *)(*((void *)&v22 + 1) + 4);
        uint64_t v16 = (unsigned __int16)v14;
        long long v17 = (unsigned __int8 *)(*((void *)&v22 + 1) + 4 + 2 * (unsigned __int16)v14);
        do
        {
          unsigned int v18 = *v15++;
          unsigned int v19 = bswap32(v18);
          unsigned int v20 = *v17++;
          *((_WORD *)&v30 + v20) = HIWORD(v19);
          --v16;
        }
        while (v16);
      }
      goto LABEL_10;
    }
    if (v11 == 2)
    {
      uint64_t v12 = 0;
      uint64_t v13 = *((void *)&v22 + 1) + 2;
      do
      {
        *(long long *)((char *)&v30 + v12) = (__int128)vrev16q_s8(*(int8x16_t *)(v13 + v12));
        v12 += 16;
      }
      while (v12 != 512);
LABEL_10:
      TType1PSFont::StreamEncodingData(a1, (uint64_t)&v30, 0, a2);
    }
  }
  else
  {
    TStreamEncodingContext::TStreamEncodingContext((uint64_t)&v27, a2, 0, 1);
    TStreamEncodingContext::DumpPSEncoding((TStreamEncodingContext *)&v27);
    long long v27 = &unk_1F0DFF190;
    if (__p)
    {
      long long v29 = __p;
      operator delete(__p);
    }
  }
  TDataReference::~TDataReference((TDataReference *)((char *)v21 + 8));
  TDataReference::~TDataReference((TDataReference *)((char *)v24 + 8));
}

void sub_1B5325E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int a9, unsigned int a10, int a11, unsigned int a12, unsigned __int8 *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,long long a21,long long a22,long long a23,uint64_t a24,void *a25,void *__p,uint64_t a27)
{
  a25 = &unk_1F0DFF190;
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  TDataReference::~TDataReference((TDataReference *)&a14);
  TDataReference::~TDataReference((TDataReference *)((char *)&a21 + 8));
  if (a2 == 1)
  {
    long long v31 = __cxa_begin_catch(a1);
    if (v31[4] == 4)
    {
      uint64_t v32 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 304))(v28);
      a11 = -1431655766;
      a12 = -1431655766;
      (*(void (**)(uint64_t, unsigned int *, int *))(*(void *)v28 + 296))(v28, &a12, &a11);
      a24 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v33 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v33 + 1) = 0xAAAAAAAAAAAAAAAALL;
      a22 = v33;
      a23 = v33;
      a21 = v33;
      long long v34 = (const TFontObjectSurrogate *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 216))(v28);
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 120))(v28);
      TFontObjectTable::TFontObjectTable((TFontObjectTable *)&a21, v34, v35, v32, a12);
      uint64_t v36 = *((void *)&a23 + 1);
      a9 = -1431655766;
      a10 = -1431655766;
      FindEncoRange(*((unsigned __int8 **)&a23 + 1), a12, &a10, &a9);
      uint64_t v37 = a9;
      if (a9 == -1)
      {
        __int16 v41 = 6;
      }
      else
      {
        long long v38 = (unsigned __int8 *)(v36 + a10);
        a13 = v38;
        if (!FindKey("StandardEncoding", a9, (const unsigned __int8 **)&a13))
        {
          StreamBytes(v37, v38, v27);
          TDataReference::~TDataReference((TDataReference *)((char *)&a21 + 8));
          __cxa_end_catch();
          JUMPOUT(0x1B5325E40);
        }
        __int16 v41 = 23;
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      exception[4] = v41;
    }
    long long v39 = v31;
    long long v40 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v40 = &unk_1F0DFC400;
    unsigned __int8 v40[4] = v39[4];
  }
  _Unwind_Resume(a1);
}

void TType1CharStringContext::~TType1CharStringContext(TType1CharStringContext *this)
{
  *(void *)this = &unk_1F0E00490;
  uint64_t v2 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8077774924);
  }
  TDataReference::~TDataReference((TType1CharStringContext *)((char *)this + 328));
}

{
  uint64_t vars8;

  TType1CharStringContext::~TType1CharStringContext(this);
  JUMPOUT(0x1BA9994D0);
}

void TBufferedType1CharStringStreamingContext::StreamCharString(TBufferedType1CharStringStreamingContext *this, const TType1SFNTFont *a2, unsigned int a3, char *a4, int *a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v43[2] = v10;
  long long v44 = v10;
  v43[0] = v10;
  v43[1] = v10;
  long long v42 = v10;
  unint64_t v45 = 0xAAAAAAAAAAAAAAAALL;
  long long v37 = v10;
  long long v36 = v10;
  long long v35 = v10;
  long long v34 = v10;
  long long v33 = v10;
  long long v32 = v10;
  long long v31 = v10;
  long long v30 = v10;
  long long v28 = v10;
  long long v29 = v10;
  long long v26 = v10;
  long long v27 = v10;
  long long v24 = v10;
  long long v25 = v10;
  long long v22 = v10;
  long long v23 = v10;
  long long v38 = "/.notdef";
  uint64_t v39 = 8;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  long long v21 = &unk_1F0E00490;
  int v11 = (const TFontObjectSurrogate *)(*(uint64_t (**)(const TType1SFNTFont *))(*(void *)a2 + 216))(a2);
  *(void *)&long long v42 = v11;
  WORD2(v43[0]) = *((_WORD *)a2 + 8);
  uint64_t v12 = *(void *)(*((void *)a2 + 4) + 104);
  uint64_t v13 = (int *)(v12 + 8 * a3);
  if (a3)
  {
    int v14 = *(v13 - 1) + *(v13 - 2);
    int v15 = *v13 - v14;
  }
  else
  {
    int v15 = 0;
    int v14 = *v13;
  }
  DWORD2(v42) = v14;
  LODWORD(v43[0]) = v15;
  HIDWORD(v42) = *(_DWORD *)(v12 + 8 * a3 + 4);
  uint64_t v16 = (*(uint64_t (**)(const TType1SFNTFont *))(*(void *)a2 + 120))(a2);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)((char *)v43 + 8), v11, v16, DWORD2(v42), LODWORD(v43[0]) + HIDWORD(v42));
  unint64_t v45 = 0;
  if (a3)
  {
    long long v17 = (unsigned __int8 *)v44;
    do
      int v18 = *v17++;
    while (v18 != 47);
    uint64_t v19 = 0;
    long long v38 = (char *)(v17 - 1);
    do
      unsigned int v20 = v17[v19++] - 48;
    while (v20 < 0x4B);
    uint64_t v39 = v19;
  }
  uint64_t v40 = v44 + LODWORD(v43[0]);
  if ((*((__int16 *)a2 + 8) & 0x80000000) == 0) {
    operator new[]();
  }
  unint64_t v45 = 0;
  uint64_t v41 = HIDWORD(v42);
  TBufferedCharStringStreamingContext::DoCharString(this, (uint64_t)&v21, a4, (uint64_t)a5);
  TType1CharStringContext::~TType1CharStringContext((TType1CharStringContext *)&v21);
}

void sub_1B53264CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57)
{
  MEMORY[0x1BA9994A0](v57, 0x1000C8077774924);
  uint64_t v59 = a57;
  a57 = 0;
  if (v59) {
    MEMORY[0x1BA9994A0](v59, 0x1000C8077774924);
  }
  TDataReference::~TDataReference((TDataReference *)&a51);
  _Unwind_Resume(a1);
}

uint64_t TBufferedType1CharStringStreamingContext::StreamDecryptedCharString(TBufferedType1CharStringStreamingContext *this, const TType1PSFont *a2, uint64_t a3, const unsigned __int8 *a4, int *a5)
{
  return (*(uint64_t (**)(TBufferedType1CharStringStreamingContext *, const TType1PSFont *, uint64_t, const unsigned __int8 *, int *))(*(void *)this + 56))(this, a2, a3, a4, a5);
}

void non-virtual thunk to'TType1MMSnapShotStreamingContext::~TType1MMSnapShotStreamingContext(TType1MMSnapShotStreamingContext *this)
{
}

{
  uint64_t vars8;

  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext((TType1MMSnapShotStreamingContext *)((char *)this - 696));
  JUMPOUT(0x1BA9994D0);
}

void TType1MMSnapShotStreamingContext::~TType1MMSnapShotStreamingContext(TType1MMSnapShotStreamingContext *this)
{
  TBufferedCharStringStreamingContext::~TBufferedCharStringStreamingContext(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TType1MMSnapShotStreamingContext::StoreWVCode(uint64_t this, int a2)
{
  if (*(__int16 *)(this + 720) >= 1)
  {
    uint64_t v2 = *(void *)(this + 536);
    int v3 = *(unsigned __int16 *)(this + 720) + a2;
    long long v4 = *(int **)(this + 712);
    uint64_t v5 = a2;
    do
    {
      int v6 = *v4++;
      *(_DWORD *)(v2 + 4 * v5++) = v6;
    }
    while (v5 < v3);
  }
  return this;
}

uint64_t TType1MMSnapShotStreamingContext::BlendVal(TType1MMSnapShotStreamingContext *this, int *a2, int a3)
{
  return MStreamSnapShotContext::BlendValue((uint64_t)this + 696, this, a2, a3);
}

BOOL MetadataFromFont(const __CFData *a1, void *a2, int8x8_t *a3, CFDictionaryRef *a4)
{
  CFDataRef theData = a1;
  if (a1)
  {
    BytePtr = (UInt8 *)CFDataGetBytePtr(a1);
    unsigned int Length = CFDataGetLength(theData);
    BOOL v9 = MetadataFromFont(BytePtr, Length, a2, a3, a4);
  }
  else
  {
    BOOL v9 = 0;
  }
  TCFData::~TCFData((const void **)&theData);
  return v9;
}

void sub_1B53266B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TCFData::~TCFData((const void **)va);
  _Unwind_Resume(a1);
}

BOOL MetadataFromFont(_DWORD *a1, unsigned int a2, void *a3, int8x8_t *a4, CFDictionaryRef *a5)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  if (a2 >= 0x10)
  {
    unint64_t v5 = (unint64_t)a1 + a2;
    int v6 = a1 + 4;
    unsigned int v7 = bswap32(a1[3]);
    unint64_t v8 = (unint64_t)&a1[3 * v7 + 4];
    unsigned int v9 = (a2 - 16) / 0xC;
    if ((unint64_t)(a1 + 7) > v5) {
      unsigned int v9 = 0;
    }
    unint64_t v109 = (unint64_t)a1 + a2;
    BOOL v10 = v8 < (unint64_t)v6 || v8 > v5;
    uint64_t v11 = v10 ? v9 : v7;
    if (*a1 == 0x1000000)
    {
      int v14 = objc_opt_new();
      if (!v11)
      {
        BOOL v101 = 0;
        CFDictionaryRef theDict = 0;
LABEL_151:
        [v14 drain];
        BOOL v92 = v101;
        if (a5)
        {
          CFDictionaryRef v93 = theDict;
          goto LABEL_153;
        }
        if (theDict) {
          CFRelease(theDict);
        }
        return v92;
      }
      uint64_t v108 = v11;
      key = a3;
      int v98 = v14;
      uint64_t v100 = a4;
      BOOL v101 = 0;
      CFDictionaryRef theDict = 0;
      long long v103 = 0uLL;
      uint64_t v112 = 0;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAllocatorRef bytesDeallocator = (const __CFAllocator *)*MEMORY[0x1E4F1CFA0];
      while (1)
      {
        CFIndex v15 = bswap32(v6[2]);
        uint64_t v16 = (char *)a1 + bswap32(v6[1]);
        BOOL v17 = &v16[v15] < v16 || (unint64_t)&v16[v15] > v109;
        BOOL v111 = v6;
        if (v17) {
          goto LABEL_19;
        }
        if (*v6 != 1819308129) {
          break;
        }
        if ((unint64_t)(v16 + 24) > v109) {
          goto LABEL_19;
        }
        unsigned int v18 = *(_DWORD *)v16;
        if (bswap32(*(_DWORD *)v16) > 1) {
          goto LABEL_19;
        }
        if (v100)
        {
          *uint64_t v100 = vrev16_s8(*(int8x8_t *)(v16 + 12));
          v100[1].i16[0] = bswap32(*((unsigned __int16 *)v16 + 10)) >> 16;
          v100[1].i16[1] = bswap32(*((unsigned __int16 *)v16 + 11)) >> 16;
          BOOL v101 = 1;
        }
        if (!a5 || v15 < 0x18) {
          goto LABEL_19;
        }
        CFSetRef theSet = (CFSetRef)0xAAAAAAAAAAAAAAAALL;
        CFSetRef v19 = CFDataCreateWithBytesNoCopy(allocator, (const UInt8 *)v16 + 24, v15 - 24, bytesDeallocator);
        unint64_t v132 = 0xAAAAAAAAAAAAAAAALL;
        CFSetRef theSet = v19;
        if (v19)
        {
          if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB2CD238, memory_order_acquire) != -1)
          {
            keys[0] = (void **)v169;
            values[0] = (void **)keys;
            std::__call_once(&qword_1EB2CD238, values, (void (__cdecl *)(void *))std::__call_once_proxy[abi:fe180100]<std::tuple<GetPrivateKey(void)::$_0 &&>>);
          }
          CFDataRef v20 = (const __CFData *)_MergedGlobals_0;
          if (_MergedGlobals_0)
          {
            CFDataRef v21 = (const __CFData *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithBase64EncodedData:v19 options:0];
            CFDataRef v22 = v21;
            if (v21)
            {
              CFIndex Length = CFDataGetLength(v21);
              MutableCopy = CFDataCreateMutableCopy(allocator, Length, v22);
              CFRelease(v22);
              if (MutableCopy)
              {
                MutableBytePtr = CFDataGetMutableBytePtr(MutableCopy);
                BytePtr = CFDataGetBytePtr(v20);
                unint64_t v27 = CFDataGetLength(MutableCopy);
                unint64_t v28 = CFDataGetLength(v20);
                if (v27)
                {
                  for (unint64_t i = 0; i != v27; ++i)
                    MutableBytePtr[i] ^= v27 % 0xF1 - 83 + BytePtr[i % v28];
                }
                unint64_t v132 = (unint64_t)MutableCopy;
                if (v18 != 0x1000000) {
                  goto LABEL_134;
                }
                long long v30 = (void *)MEMORY[0x1BA999920](v28);
                CFDictionaryRef theDict = (CFDictionaryRef)(id)[MEMORY[0x1E4F28D90] JSONObjectWithData:MutableCopy options:3 error:0];
                if (theDict)
                {
                  objc_opt_class();
                  char isKindOfClass = objc_opt_isKindOfClass();
                  long long v32 = @"##### ERROR: converted JSON not a dictionary (%@)";
                  if (isKindOfClass)
                  {
                    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"MTD_Variation_Instances");
                    CFDictionaryRef v34 = Value;
                    if (Value)
                    {
                      CFDictionaryRef v35 = (const __CFDictionary *)CFDictionaryGetValue(Value, key);
                      if (v35)
                      {
                        CFDictionaryReplaceValue(theDict, @"MTD_Typeface_ID_ATS_PostscriptName", key);
                        *(void *)bytes = CFRetain(v34);
                        CFIndex Count = CFDictionaryGetCount(v35);
                        *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
                        *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
                        long long v167 = v37;
                        long long v166 = v37;
                        long long v165 = v37;
                        long long v164 = v37;
                        long long v163 = v37;
                        long long v162 = v37;
                        long long v161 = v37;
                        *(_OWORD *)&v160[16] = v37;
                        *(_OWORD *)long long v160 = v37;
                        long long v159 = v37;
                        long long v157 = v37;
                        long long v158 = v37;
                        long long v155 = v37;
                        long long v156 = v37;
                        long long v153 = v37;
                        long long v154 = v37;
                        *(_OWORD *)keys = v37;
                        values[0] = 0;
                        std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::vector(keys, Count, values);
                        *(void *)&long long v38 = 0xAAAAAAAAAAAAAAAALL;
                        *((void *)&v38 + 1) = 0xAAAAAAAAAAAAAAAALL;
                        long long v150 = v38;
                        long long v151 = v38;
                        long long v148 = v38;
                        long long v149 = v38;
                        long long v146 = v38;
                        long long v147 = v38;
                        *(_OWORD *)&v144[16] = v38;
                        long long v145 = v38;
                        long long v143 = v38;
                        *(_OWORD *)v144 = v38;
                        long long v141 = v38;
                        long long v142 = v38;
                        long long v139 = v38;
                        long long v140 = v38;
                        long long v137 = v38;
                        long long v138 = v38;
                        *(_OWORD *)values = v38;
                        *(void *)&v169[0] = 0;
                        std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::vector(values, Count, v169);
                        CFDictionaryGetKeysAndValues(v35, (const void **)keys[0], (const void **)values[0]);
                        if (Count >= 1)
                        {
                          for (unint64_t j = 0; j != Count; ++j)
                          {
                            if (j >= keys[1] - keys[0] || j >= values[1] - values[0]) {
                              __break(1u);
                            }
                            CFDictionarySetValue(theDict, keys[0][j], values[0][j]);
                          }
                        }
                        *(void *)&v169[0] = values;
                        std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v169);
                        values[0] = (void **)keys;
                        std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](values);
                        TCFRetained<void const*>::~TCFRetained((const void **)bytes);
                      }
                      CFDictionaryRemoveValue(theDict, @"MTD_Variation_Instances");
                    }
                    goto LABEL_137;
                  }
                }
                else
                {
                  long long v32 = @"##### ERROR: could not convert JSON to dictionary (%@)";
                }
                NSLog(&v32->isa, MutableCopy);
                CFDictionaryRef theDict = 0;
LABEL_137:
                BOOL v101 = theDict != 0;
                goto LABEL_134;
              }
            }
          }
        }
        unint64_t v132 = 0;
LABEL_134:
        TCFData::~TCFData((const void **)&v132);
        TCFData::~TCFData((const void **)&theSet);
LABEL_19:
        int v6 = v111 + 3;
        if (++v112 == v108)
        {
          long long v94 = (const void *)v103;
          if (v103 != 0)
          {
            Mutable = theDict;
            if (theDict)
            {
              if ((void)v103) {
                goto LABEL_144;
              }
            }
            else
            {
              Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              long long v94 = (const void *)v103;
              if ((void)v103)
              {
LABEL_144:
                CFDictionaryRef theDict = Mutable;
                CFDictionaryAddValue(Mutable, @"MTD_Typeface_Repertoire_PrimaryScriptLanguages", v94);
                if (!*((void *)&v103 + 1)) {
                  goto LABEL_150;
                }
                goto LABEL_149;
              }
            }
            CFDictionaryRef theDict = Mutable;
            if (*((void *)&v103 + 1)) {
LABEL_149:
            }
              CFDictionaryAddValue(theDict, @"MTD_Typeface_Repertoire_SupportedLanguages", *((const void **)&v103 + 1));
          }
LABEL_150:
          int v14 = v98;
          goto LABEL_151;
        }
      }
      unsigned int v104 = *v6;
      unsigned int v40 = bswap32(*v6);
      if (v40 != 1936485991 && v40 != 1684827751) {
        goto LABEL_19;
      }
      unint64_t v106 = (__CFString *)CFStringCreateWithBytes(allocator, (const UInt8 *)v16, v15, 0x600u, 0);
      if (!v106) {
        goto LABEL_19;
      }
      long long v116 = (void *)[MEMORY[0x1E4F1CA48] array];
      uint64_t v119 = [MEMORY[0x1E4F28B88] whitespaceCharacterSet];
      long long v128 = 0u;
      long long v129 = 0u;
      long long v126 = 0u;
      long long v127 = 0u;
      obunint64_t j = (id)[(__CFString *)v106 componentsSeparatedByString:@","];
      uint64_t v120 = [obj countByEnumeratingWithState:&v126 objects:v135 count:16];
      if (!v120)
      {
LABEL_127:
        if (v104 == 1735289956) {
          long long v90 = v116;
        }
        else {
          long long v90 = (void *)v103;
        }
        long long v91 = (void *)*((void *)&v103 + 1);
        if (v104 != 1735289956) {
          long long v91 = v116;
        }
        *(void *)&long long v103 = v90;
        *((void *)&v103 + 1) = v91;
        CFRelease(v106);
        goto LABEL_19;
      }
      uint64_t v118 = *(void *)v127;
      while (2)
      {
        uint64_t v41 = 0;
LABEL_55:
        if (*(void *)v127 != v118) {
          objc_enumerationMutation(obj);
        }
        long long v42 = *(void **)(*((void *)&v126 + 1) + 8 * v41);
        context = (void *)MEMORY[0x1BA999920]();
        long long v43 = (__CFString *)[v42 stringByTrimmingCharactersInSet:v119];
        unint64_t v44 = [(__CFString *)v43 length];
        if (v44 < 4) {
          goto LABEL_65;
        }
        unsigned int v45 = [(__CFString *)v43 characterAtIndex:0];
        if (v45 > 0x7F)
        {
          if (__maskrune(v45, 0x8000uLL)) {
            goto LABEL_60;
          }
LABEL_65:
          uint64_t v48 = [MEMORY[0x1E4F1CA20] canonicalLanguageIdentifierFromString:v43];
          if (v48) {
            [v116 addObject:v48];
          }
LABEL_67:
          if (++v41 == v120)
          {
            uint64_t v89 = [obj countByEnumeratingWithState:&v126 objects:v135 count:16];
            uint64_t v120 = v89;
            if (!v89) {
              goto LABEL_127;
            }
            continue;
          }
          goto LABEL_55;
        }
        break;
      }
      if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v45 + 60) & 0x8000) == 0) {
        goto LABEL_65;
      }
LABEL_60:
      unint64_t v114 = (void *)[(__CFString *)v43 substringToIndex:4];
      CFDictionaryRef explicit = (const __CFDictionary *)atomic_load_explicit(&qword_1EB2CD240, memory_order_acquire);
      if (explicit)
      {
LABEL_61:
        long long v47 = (void *)CFDictionaryGetValue(explicit, v114);
        if (v47)
        {
          if (v44 == 4)
          {
            [v116 addObjectsFromArray:v47];
          }
          else if ([(__CFString *)v43 rangeOfString:@"-"] == 4)
          {
            int v74 = (void *)[MEMORY[0x1E4F1CA48] array];
            long long v124 = 0u;
            long long v125 = 0u;
            long long v122 = 0u;
            long long v123 = 0u;
            uint64_t v75 = [v47 countByEnumeratingWithState:&v122 objects:v134 count:16];
            if (v75)
            {
              uint64_t v76 = *(void *)v123;
              do
              {
                for (uint64_t k = 0; k != v75; ++k)
                {
                  if (*(void *)v123 != v76) {
                    objc_enumerationMutation(v47);
                  }
                  uint64_t v78 = (void *)[[NSString alloc] initWithFormat:@"%@-%@", *(void *)(*((void *)&v122 + 1) + 8 * k), v43];
                  [v74 addObject:v78];
                }
                uint64_t v75 = [v47 countByEnumeratingWithState:&v122 objects:v134 count:16];
              }
              while (v75);
            }
            uint64_t v79 = (void *)[MEMORY[0x1E4F1CA48] array];
            timespec v80 = objc_opt_new();
            memset(v169, 0, sizeof(v169));
            uint64_t v81 = [v74 countByEnumeratingWithState:v169 objects:values count:16];
            if (v81)
            {
              uint64_t v82 = **(void **)&v169[1];
              do
              {
                for (uint64_t m = 0; m != v81; ++m)
                {
                  if (**(void **)&v169[1] != v82) {
                    objc_enumerationMutation(v74);
                  }
                  int v84 = *(void **)(*((void *)&v169[0] + 1) + 8 * m);
                  long long v85 = (void *)MEMORY[0x1BA999920]();
                  *(_DWORD *)bytes = 0;
                  *(void *)&long long v86 = 0xAAAAAAAAAAAAAAAALL;
                  *((void *)&v86 + 1) = 0xAAAAAAAAAAAAAAAALL;
                  *(_OWORD *)&v160[13] = v86;
                  *(_OWORD *)long long v160 = v86;
                  long long v159 = v86;
                  long long v157 = v86;
                  long long v158 = v86;
                  long long v155 = v86;
                  long long v156 = v86;
                  long long v153 = v86;
                  long long v154 = v86;
                  *(_OWORD *)keys = v86;
                  [v84 cStringUsingEncoding:1];
                  int v87 = uloc_minimizeSubtags();
                  if (*(int *)bytes <= 0)
                  {
                    long long v88 = (void *)[[NSString alloc] initWithBytes:keys length:v87 encoding:1];
                    if (v88)
                    {
                      if (([v80 containsObject:v88] & 1) == 0)
                      {
                        [v80 addObject:v88];
                        objc_msgSend(v79, "addObject:", objc_msgSend(v88, "stringByReplacingOccurrencesOfString:withString:", @"_", @"-"));
                      }
                    }
                  }
                }
                uint64_t v81 = [v74 countByEnumeratingWithState:v169 objects:values count:16];
              }
              while (v81);
            }

            [v116 addObjectsFromArray:v79];
          }
          goto LABEL_67;
        }
        goto LABEL_101;
      }
      CFDictionaryRef v113 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
      if (!v113)
      {
LABEL_101:
        if (v44 == 4)
        {
          LikelyLanguageForint Script = CreateLikelyLanguageForScript(v43);
          if (LikelyLanguageForScript)
          {
            [v116 addObject:LikelyLanguageForScript];
            CFRelease(LikelyLanguageForScript);
          }
          else
          {
            [v116 addObject:v43];
          }
        }
        goto LABEL_67;
      }
      CFArrayRef v49 = CFLocaleCopyAvailableLocaleIdentifiers();
      if (v49)
      {
        CFSetRef theSet = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548]);
        *(void *)&long long v50 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v50 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)((char *)&v169[1] + 8) = v50;
        *(_OWORD *)((char *)&v169[2] + 8) = v50;
        memset(v169, 0, 24);
        *((void *)&v169[3] + 1) = (char *)&v169[1] + 8;
        CFIndex v51 = CFArrayGetCount(v49);
        if (v51 >= 1)
        {
          CFIndex v52 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v49, v52);
            *(void *)&long long v54 = 0xAAAAAAAAAAAAAAAALL;
            *((void *)&v54 + 1) = 0xAAAAAAAAAAAAAAAALL;
            *(_OWORD *)&v160[14] = v54;
            *(_OWORD *)long long v160 = v54;
            long long v159 = v54;
            long long v157 = v54;
            long long v158 = v54;
            long long v155 = v54;
            long long v156 = v54;
            long long v153 = v54;
            long long v154 = v54;
            *(_OWORD *)keys = v54;
            if (CFStringGetCString(ValueAtIndex, (char *)keys, 157, 0x600u)) {
              break;
            }
LABEL_97:
            if (v51 == ++v52) {
              goto LABEL_98;
            }
          }
          CFArrayRef v55 = v49;
          CFIndex v56 = v51;
          size_t v57 = strlen((const char *)keys);
          long long v58 = strchr((char *)keys, 95);
          if (v58)
          {
            uint64_t v59 = v58;
            size_t v60 = v58 - (char *)keys;
            if (strncmp((const char *)keys, "zh", v58 - (char *)keys))
            {
              if (strncmp((const char *)keys, "wuu", v60) && strncmp((const char *)keys, "yue", v60))
              {
                *uint64_t v59 = 0;
                size_t v57 = v60;
              }
            }
          }
          unint64_t v132 = 0xAAAAAAAAAAAAAAAALL;
          CFStringRef v61 = CFStringCreateWithBytes(allocator, (const UInt8 *)keys, v57, 0x600u, 0);
          unint64_t v132 = (unint64_t)v61;
          uint64_t v62 = theSet;
          CFIndex v51 = v56;
          if (theSet)
          {
            CFArrayRef v49 = v55;
            if (CFSetContainsValue(theSet, v61))
            {
LABEL_96:
              TCFString::~TCFString((const void **)&v132);
              goto LABEL_97;
            }
            CFStringRef v61 = (CFStringRef)v132;
            uint64_t v62 = theSet;
          }
          else
          {
            CFArrayRef v49 = v55;
          }
          CFSetAddValue(v62, v61);
          int v131 = 0;
          *(void *)&long long v63 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v63 + 1) = 0xAAAAAAAAAAAAAAAALL;
          *(_OWORD *)&v144[14] = v63;
          long long v143 = v63;
          *(_OWORD *)v144 = v63;
          long long v141 = v63;
          long long v142 = v63;
          long long v139 = v63;
          long long v140 = v63;
          long long v137 = v63;
          long long v138 = v63;
          *(_OWORD *)values = v63;
          int v64 = uloc_addLikelySubtags();
          if (v131 > 0) {
            goto LABEL_96;
          }
          *((unsigned char *)values + v64) = 0;
          memset(bytes, 170, 12);
          int Language = uloc_getLanguage();
          memset(v130, 170, 6);
          int Script = uloc_getScript();
          if (v131 > 0) {
            goto LABEL_96;
          }
          int v67 = Script;
          CFStringRef v68 = CFStringCreateWithBytes(allocator, bytes, Language, 0x600u, 0);
          if (!v68) {
            goto LABEL_96;
          }
          CFStringRef v69 = CFStringCreateWithBytes(allocator, v130, v67, 0x600u, 0);
          if (!v69)
          {
LABEL_95:
            CFRelease(v68);
            goto LABEL_96;
          }
          BOOL v70 = (__CFArray *)CFDictionaryGetValue(v113, v69);
          if (!v70)
          {
            BOOL v70 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
            if (!v70)
            {
LABEL_94:
              CFRelease(v69);
              goto LABEL_95;
            }
            CFStringRef v71 = CreateLikelyLanguageForScript(v69);
            if (v71)
            {
              CFStringRef cf = v71;
              CFArrayAppendValue(v70, v71);
              CFRelease(cf);
            }
            CFDictionaryAddValue(v113, v69, v70);
            CFRelease(v70);
          }
          v171.length = CFArrayGetCount(v70);
          v171.location = 0;
          if (!CFArrayContainsValue(v70, v171, v68)) {
            CFArrayAppendValue(v70, v68);
          }
          goto LABEL_94;
        }
LABEL_98:
        CFRelease(v49);
        keys[0] = (void **)v169;
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](keys);
        TCFSet::~TCFSet((const void **)&theSet);
      }
      CFDictionaryRef v72 = 0;
      CFDictionaryRef explicit = v113;
      atomic_compare_exchange_strong(&qword_1EB2CD240, (unint64_t *)&v72, (unint64_t)v113);
      if (v72)
      {
        CFRelease(v113);
        CFDictionaryRef explicit = v72;
      }
      goto LABEL_61;
    }
  }
  BOOL v92 = 0;
  if (a5)
  {
    CFDictionaryRef v93 = 0;
LABEL_153:
    *a5 = v93;
  }
  return v92;
}

void sub_1B5327550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,const void *a57,const void *a58)
{
  *(void *)(v58 - 176) = &STACK[0x290];
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)(v58 - 176));
  STACK[0x290] = (unint64_t)&STACK[0x3A0];
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&STACK[0x290]);
  TCFRetained<void const*>::~TCFRetained((const void **)(v58 - 192));
  TCFData::~TCFData(&a57);
  TCFData::~TCFData(&a58);
  _Unwind_Resume(a1);
}

CFStringRef CreateLikelyLanguageForScript(const __CFString *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (void *)[@"und-" stringByAppendingString:a1];
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v7 + 14) = v2;
  v6[7] = v2;
  v7[0] = v2;
  v6[5] = v2;
  v6[6] = v2;
  v6[3] = v2;
  v6[4] = v2;
  v6[1] = v2;
  v6[2] = v2;
  v6[0] = v2;
  [v1 cStringUsingEncoding:1];
  *((unsigned char *)v6 + (int)uloc_addLikelySubtags()) = 0;
  memset(bytes, 170, 12);
  int Language = uloc_getLanguage();
  return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, Language, 0x600u, 0);
}

const void **std::__call_once_proxy[abi:fe180100]<std::tuple<GetPrivateKey(void)::$_0 &&>>()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"-----BEGIN RSA PRIVATE KEY-----*MIIJKQIBAAKCAgEAx3NC2Npb2omj6q3V1vQgCcAXkGMc5SGlv3RtdLCnkMDgAp9O*4LS97UAeRFWNxZOjN7JpDrOJBayUqAoXZI+fjvR2HD6i1y013Yszv7Eutjd9M0iE*GctXSzmlUwAE5gwXTVtW5Qr1FFIUnWPzRywLsxFcwDDoA4ZRUemlO2qVIRtrkhY9*/E00X7adcA13TyfalD7x9iGorL3XgpluyRFVulwyAmOS2RAUezia17Mg6Kkyceek*AkdbNYZbVTZnv64DYWjGLgCgke1Boruo/MxbrxN0/qDa05XKUra0t55ZgV8F3P3H*skcc9inUSi4kywnQjdJZr0nIMJTB2D6iPdP6r2vD+kj86DluBVn4YVdRvG4HV4zz*Rhpp43eiWwzzteKqzoLjwfP86srdZwXn/4YZ5vIaaLFTVt5J1USw51sqO3TAyat2*iPtjfEMNoSXcCkJe61fyjjbW3zCSbrxS88Rff/W0cxZvzpPfLiwyHNCCoVg4sZTR*OQfRMQTY07dfzdFEqS6uEgM3u3JNCSY8UNNdRV82GmLGUAvFkhIqfJAOiTxXeYGT*9gYHtdeLUCr9HbutPQb8MC7oGUamwHE7C3fg0uAHt6PB1L25jC2KAGEe7cnnLRZg*lSNTnzSyiZFVM527nflz66AKxgVopKyL9duMYMhBNEtasoKjQ3zm8kTo1ksCAwEA*AQKCAgEApU9sNW5uuWhhmw5v8dSvhUVYgo0TkvpbdZ8bZZ9Rk1G5mZLO/sHvtWfy*bjL26a6flndiShQWWsSbBdgvYWMFHaiTCIAF2hEX10McJiLGE7NUKyBMlVCLTsc9*ttiKNt4Ipk4xbG+ziB8sBPOl3PSt0cJvPMCMXPeECT99ewyxBBrFAvU6dRbMdRRX*01rl646dxUeSpq1pL5u9tvpS74ZVprvpmz9KpGyGfUcCWAuZGB28uNoEfvsDpw5w*PuV0AlRJawA7Wj+c1rZuM2IVA0qiJy8aRj2ugbZiVkIm8RXnG6pVosAZNzNn1sP+*t2kdh8ffutyBBx9BNLrnG8N2F4bN/AZ5PrbdmDnZ5D4HbCXaDQIQPi9tgSGdk1zO*AJ2skP3xDviheBzVgFq5+uy3E8EoxhfeK+YRZgYwGtoFsXO3c5CxtZ3VYLsOCPb9*QMWvxowjcPrd5yISDaIvTs9FnoUpLgBhdMr1+PwcPk9mPP5OtWqEYv4K1fFyjxG1*pCi0+PI+ZIqnMtM9h4HptsZZnOt2/TuwLjA9ZIpoawrZYTLMSBQ2g+W0Tdurwole*mBQNplWS1Shr5NJnxR0lw4F7w6gzs4T2FFb5jdCSRHLb/jq6YrZXgcvg1iLI2GhF*vF6iWah2kDEBB70mUDjDU3kbE24pPkSgldX+6nbz5cy3uIQvh7ECggEBAOzeZmYO*H/OrEG+2pYhtSnG+kA/YXYG0g4Av/IgMkkI593WoYSST7Nsl+iDU/KSG8Rij7QK8*esI2IkPOaKd4VXyjrcsnqf3sEPczlVTf2QHS/BzyYiL6RY5LUcGVaYWVSujxNijN*dWeZgMgbOD7p+An/9/IMvn03biZOzAsTrRQvavvxMxyeJoseXJJWeaBeJ5WqopeP*0Bztbd/9dGkMDd45TdKElp7zEFQ9N5pIeLeQ5lkVX2ocL+CQVeyt9BFgV+5IOte6*Odu/DrvGK0+oxzUx36y1sqp7tGh97Jvk03lDIUbWqKmE34OcNJk5lrEcGuKYhgw5*+ztHUn9pafEAfmkCggEBANePLg8cKZKrufPNTilI65PoEcLFzOcn9a8nY8QhWr8U*QDZLGgL3YvhwQeyNum26fuSR48ZRPYvOGB9yAVUINYNIypJIBnfQgJRjD4ox3dMl*aNYCLNdY4qnzXqVxvlGzDoO5N7Hp1XdCD38Sqdy+s1HEQLqjntMe0Dg8iBt6kNMR*KtUqFJoqGWUMdvQ8sYFMDk1eC6xWAHWcIA1WgBvmLUNdWLbsyDQaXymwS+n5VVHj*C43yqtQXgRHYVa5OYE3tWEcfwt0IyyzbTMmumasK6BbQ8payQDfWpzk7qlFtOdio*bHMdycxWb1+9l07uweLBxDeycY+AtMM+1LlagB0WQJMCggEAPfpDWNjBS4SrHE/y*KCxQmkp+b2bxsIqHDfeAYCjJ7EI2mbahFG0QQJdDR2vzXylf1E6wKVMf28lGVe+g*OpGl7KL3SnzqYeJu3f/FRxv7MBsAlKJnQzexE3ZpwflSTv2tSB41SZ/Y5G6p37If*mXamzBcJzW/AOAtU6vkbMprHYsy1dY67DPXkp+od1ryBvpBkUyj+uiGLFsaZRU6Q*MxxQVKEx16+Rqa13zFLoRZpI298yJoUNHjqZ3GxnzzIE9rb6ywJjQycbFIB9XmyP*0Jwc47JVEF/KjAkqP10TmAbbvpLuFhb8sr5trYYlzSHgaB8uebPm/zP8pJoY3/W5*HrI+YQKCAQEAwanht7GVqDCg4GmTz4O0Iy5cxqDvdr5v/O1mtM9CuGl5R04yEHgy*cwJoOB8dX3guiSyJd6OFqBWBlr7Wc47shQbg+Iu9Q+gPnUFitMYYhZsWlS9fGhrB*ie8dGYcXdk9ouu+tGir7nim7wm8CLVEnyk6H2ScnioYkjGHV5to3Q2opEVq9J8Sr*DB4mwUfGMmQidWAJHMwnnYKnSVRtxKMIB33WNoKFXEpVNR8vFQbtoKRbvSxITkTP*sTirwe6ol1ql9UCT0gIUiDh+xLQZW5Jw8g7H5JxBFenEU6dHXeDEF+M5jDM3Gl6N*sXakekYH67Iql9+6JzN7M+8/L0gf0gIsAQKCAQBeANWy/tf47n9ge0D7DVXVDiLt*v3PrkBUgx25V9AfMUUG38or/0BxWnmSkrxnsKSbPjWC0W4WLdG8XrrD/Da0Otg4L*FCK07umLNXitLGJC7hLSiyumcO0dQXjS+kU9b+7CokSovcSMJv0PYDfLkGIj4Xfd*UedbDFYnynMfig0dL5kbWIB6uWFlDliboGVtly0gBYdT+0p3bAdGzm+5p1sGEYB8*JJaSzsOBdT6nAVI6ONPAt+TbPuWsNl8XeFFx/wXb+UQEDtkub3k/0xuJeeBwzFr1*vj0KkKXDfJRVHjZCwmxb/ShpSApVzI8ujkst6zznEqi2OshndSPPVpYCG0R3*-----END RSA PRIVATE KEY-----*", @"*");
  CFStringRef v2 = CFStringCreateByCombiningStrings(v0, ArrayBySeparatingStrings, @"\n");
  _MergedGlobals_0 = (uint64_t)CFStringCreateExternalRepresentation(v0, v2, 0x8000100u, 0x3Fu);
  TCFRetained<__CFString const*>::~TCFRetained((const void **)&v2);
  return TCFRetained<__CFArray const*>::~TCFRetained((const void **)&ArrayBySeparatingStrings);
}

void sub_1B53277B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

void *std::vector<void const*,TInlineBufferAllocator<void const*,30ul>>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[33] = a1 + 3;
  if (a2)
  {
    std::vector<double,TInlineBufferAllocator<double,30ul>>::__vallocate[abi:fe180100](a1, a2);
    int v6 = (void *)a1[1];
    unsigned int v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B532785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

const void **TCFRetained<void const*>::~TCFRetained(const void **a1)
{
  CFStringRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void TCFSet::~TCFSet(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t TException::GetErrorCode(TException *this)
{
  return *((unsigned int *)this + 2);
}

void dFPPrintCaches()
{
  pthread_once(&TLockedLRUCache<TTableCacheNode,16ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TTableCacheNode,16ul>::CreateCache);
  CFAllocatorRef v0 = (os_unfair_lock_s *)(TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache + 784);
  os_unfair_lock_lock((os_unfair_lock_t)(TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache + 784));
  os_unfair_lock_unlock(v0);
  dFPPrintTFontCache();
  dFPPrintFileFragmentCache();
}

void TFPInMemoryFont::~TFPInMemoryFont(const void **this)
{
  *this = &unk_1F0DD8DF0;
  TCFData::~TCFData(this + 57);
  TCFData::~TCFData(this + 56);
  TFPFont::~TFPFont((void **)this);
}

{
  uint64_t vars8;

  TFPInMemoryFont::~TFPInMemoryFont(this);
  JUMPOUT(0x1BA9994D0);
}

void TFPFont::TFPFont(TFPFont *this, const TFont *a2, CFTypeRef cf, timespec a4)
{
  uint64_t tv_nsec = a4.tv_nsec;
  __darwin_time_t tv_sec = a4.tv_sec;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1F0DD8A90;
  *((void *)this + 2) = a2;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  if (cf) {
    CFTypeRef v8 = CFRetain(cf);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *((void *)this + 5) = v8;
  *((void *)this + 6) = tv_sec;
  *((void *)this + 7) = tv_nsec;
  (*(void (**)(unsigned char *__return_ptr, const TFont *))(*(void *)a2 + 80))(__s2, a2);
  *((void *)this + 16) = 0;
  *((void *)this + 17) = (char *)this + 64;
  *((void *)this + 18) = 0;
  TPostScriptNameString::operator=((uint64_t)this + 64, (TFontNameString *)__s2);
  TFontNameString::~TFontNameString((TFontNameString *)__s2);
  (*(void (**)(unsigned char *__return_ptr, const TFont *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a2 + 88))(__s2, a2, 6, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
  *((void *)this + 27) = 0;
  *((void *)this + 28) = (char *)this + 152;
  *((void *)this + 29) = 0;
  TPostScriptNameString::operator=((uint64_t)this + 152, (TFontNameString *)__s2);
  TFontNameString::~TFontNameString((TFontNameString *)__s2);
  CFStringRef v69 = (uint64_t *)((char *)this + 288);
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 80) = 1065353216;
  *((void *)this + 41) = -1;
  *((_OWORD *)this + 21) = 0u;
  *((_OWORD *)this + 22) = 0u;
  *((unsigned char *)this + 368) = 0;
  *((void *)this + 51) = 0;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *((void *)this + 52) = -1;
  *((void *)this + 53) = 0;
  *((void *)this + 54) = 0xFFFFFFFFLL;
  *((void *)this + 55) = 0;
  (*(void (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  uint64_t v79 = 0;
  timespec v80 = 0;
  uint64_t v81 = 0;
  (*(void (**)(const TFont *, void **))(*(void *)a2 + 392))(a2, &v79);
  unsigned int v9 = v79;
  uint64_t v10 = v80 - (unsigned char *)v79;
  if (v80 == v79)
  {
    unsigned int v9 = v80;
    if (v80) {
      goto LABEL_85;
    }
    return;
  }
  unint64_t v11 = v10 >> 5;
  *((void *)this + 32) = v10 >> 5;
  if (56 * (v10 >> 5) <= (unint64_t)(v10 >> 5)) {
    goto LABEL_84;
  }
  long long v63 = a2;
  int v64 = (void **)((char *)this + 344);
  uint64_t v12 = (float64x2_t *)malloc_type_malloc(56 * (v10 >> 5), 0x180FCE0uLL);
  unint64_t v13 = 0;
  *((void *)this + 33) = v12;
  int v14 = &v12->f64[5 * v11];
  *((void *)this + 35) = v14;
  unint64_t v62 = v11;
  if (v11 <= 1) {
    uint64_t v15 = 1;
  }
  else {
    uint64_t v15 = v11;
  }
  uint64_t v67 = v15;
  long long v65 = (void *)((char *)this + 304);
  float64x2_t v66 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
  do
  {
    uint64_t v16 = (char *)v79;
    if (v13 >= (v80 - (unsigned char *)v79) >> 5) {
      goto LABEL_89;
    }
    BOOL v17 = (unsigned int *)((char *)v79 + 32 * v13);
    v12->f64[0] = 0.0;
    int v18 = *v17;
    LODWORD(v12->f64[1]) = *v17;
    *(_DWORD *)int v14 = v18;
    unint64_t v19 = *v17;
    unsigned int v68 = v17[1];
    unint64_t v20 = *((void *)this + 37);
    if (v20)
    {
      uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v20);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] > 1uLL)
      {
        unint64_t v22 = *v17;
        if (v20 <= v19) {
          unint64_t v22 = v19 % v20;
        }
      }
      else
      {
        unint64_t v22 = (v20 - 1) & v19;
      }
      long long v23 = *(uint64_t ***)(*v69 + 8 * v22);
      if (v23)
      {
        for (unint64_t i = *v23; i; unint64_t i = (uint64_t *)*i)
        {
          unint64_t v25 = i[1];
          if (v25 == v19)
          {
            if (*((_DWORD *)i + 4) == v19) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v21.u32[0] > 1uLL)
            {
              if (v25 >= v20) {
                v25 %= v20;
              }
            }
            else
            {
              v25 &= v20 - 1;
            }
            if (v25 != v22) {
              break;
            }
          }
        }
      }
    }
    else
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
    }
    long long v26 = operator new(0x18uLL);
    *long long v26 = 0;
    v26[1] = v19;
    *((_DWORD *)v26 + 4) = *v17;
    *((_DWORD *)v26 + 5) = v68;
    float v27 = (float)(unint64_t)(*((void *)this + 39) + 1);
    float v28 = *((float *)this + 80);
    if (!v20 || (float)(v28 * (float)v20) < v27)
    {
      BOOL v29 = (v20 & (v20 - 1)) != 0;
      if (v20 < 3) {
        BOOL v29 = 1;
      }
      unint64_t v30 = v29 | (2 * v20);
      unint64_t v31 = vcvtps_u32_f32(v27 / v28);
      if (v30 <= v31) {
        size_t v32 = v31;
      }
      else {
        size_t v32 = v30;
      }
      std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>((uint64_t)v69, v32);
      unint64_t v20 = *((void *)this + 37);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v20 <= v19) {
          unint64_t v22 = v19 % v20;
        }
        else {
          unint64_t v22 = v19;
        }
      }
      else
      {
        unint64_t v22 = (v20 - 1) & v19;
      }
    }
    uint64_t v33 = *v69;
    CFDictionaryRef v34 = *(void **)(*v69 + 8 * v22);
    if (v34)
    {
      *long long v26 = *v34;
LABEL_48:
      *CFDictionaryRef v34 = v26;
      goto LABEL_49;
    }
    *long long v26 = *v65;
    void *v65 = v26;
    *(void *)(v33 + 8 * v22) = v65;
    if (*v26)
    {
      unint64_t v35 = *(void *)(*v26 + 8);
      if ((v20 & (v20 - 1)) != 0)
      {
        if (v35 >= v20) {
          v35 %= v20;
        }
      }
      else
      {
        v35 &= v20 - 1;
      }
      CFDictionaryRef v34 = (void *)(*v69 + 8 * v35);
      goto LABEL_48;
    }
LABEL_49:
    ++*((void *)this + 39);
LABEL_50:
    long long v36 = &v16[32 * v13];
    v12[1] = vdivq_f64(vrndq_f64(vmulq_f64(*(float64x2_t *)(v36 + 8), v66)), v66);
    double v37 = trunc(*((double *)v36 + 3) * 10000.0) / 10000.0;
    v12[2].f64[0] = v37;
    v14[1] = v37;
    ++v13;
    uint64_t v12 = (float64x2_t *)((char *)v12 + 40);
    v14 += 2;
  }
  while (v13 != v67);
  __p = 0;
  unsigned __int8 v77 = 0;
  uint64_t v78 = 0;
  (*(void (**)(unsigned char *__return_ptr, const TFont *, unint64_t, void **))(*(void *)v63 + 400))(__s2, v63, v62, &__p);
  long long v38 = *v64;
  if (*v64)
  {
    *((void *)this + 44) = v38;
    operator delete(v38);
    char *v64 = 0;
    *((void *)this + 44) = 0;
    *((void *)this + 45) = 0;
  }
  uint64_t v39 = *(void *)__s2;
  *((void *)this + 43) = *(void *)__s2;
  uint64_t v40 = *(void *)&__s2[8];
  *((_OWORD *)this + 22) = *(_OWORD *)&__s2[8];
  uint64_t v41 = v40 - v39;
  if (v40 != v39)
  {
    int v42 = (*(uint64_t (**)(const TFont *))(*(void *)v63 + 40))(v63);
    if (v42 == 22 || v42 == 16)
    {
      unint64_t v44 = 0;
      unint64_t v45 = 0;
      if ((unint64_t)(v41 >> 3) <= 1) {
        uint64_t v46 = 1;
      }
      else {
        uint64_t v46 = v41 >> 3;
      }
      while (1)
      {
        uint64_t v47 = *((void *)this + 43);
        if (v45 >= (*((void *)this + 44) - v47) >> 3) {
          break;
        }
        *(void *)&long long v48 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v48 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v95 = v48;
        long long v96 = v48;
        long long v93 = v48;
        long long v94 = v48;
        long long v91 = v48;
        long long v92 = v48;
        long long v89 = v48;
        long long v90 = v48;
        long long v87 = v48;
        long long v88 = v48;
        long long v85 = v48;
        long long v86 = v48;
        long long v83 = v48;
        long long v84 = v48;
        *(_OWORD *)__s2 = v48;
        *(_OWORD *)&__s2[16] = v48;
        long long v74 = v48;
        long long v75 = v48;
        long long v72 = v48;
        long long v73 = v48;
        long long v70 = v48;
        long long v71 = v48;
        (*(void (**)(long long *__return_ptr, const TFont *, void, uint64_t, uint64_t, uint64_t))(*(void *)v63 + 88))(&v70, v63, *(unsigned __int16 *)(v47 + 8 * v45 + 2), 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
        CFArrayRef v49 = (unsigned __int8 *)*((void *)&v70 + 1);
        if (!*((void *)&v70 + 1))
        {
          CFArrayRef v49 = (unsigned __int8 *)*((void *)&v72 + 1);
          if (*((void *)&v72 + 1))
          {
            CFArrayRef v49 = *(unsigned __int8 **)(*((void *)&v72 + 1) + 8);
            if (v49) {
              v49 += v73;
            }
          }
        }
        uint64_t v50 = v71;
        if ((unint64_t)v71 >= 0xFF) {
          uint64_t v50 = 255;
        }
        if (v50)
        {
          CFIndex v51 = &v49[v50];
          CFIndex v52 = __s2;
          do
          {
            int v54 = *v49++;
            char v53 = v54;
            if (v54 == 32) {
              char v53 = 95;
            }
            *v52++ = v53;
          }
          while (v49 < v51);
        }
        else
        {
          CFIndex v52 = __s2;
        }
        CFArrayRef v55 = (char *)*((void *)this + 17);
        char *v52 = 0;
        if (strstr(v55, __s2))
        {
          CFIndex v56 = (double *)__p;
          uint64_t v57 = v77 - (unsigned char *)__p;
          *((void *)this + 41) = v45;
          unint64_t v58 = v57 >> 3;
          unint64_t v59 = v44;
          uint64_t v60 = 8;
          uint64_t v61 = v67;
          while (v58 > v59)
          {
            *(double *)(*((void *)this + 35) + v60) = trunc(v56[v59] * 10000.0) / 10000.0;
            v60 += 16;
            ++v59;
            if (!--v61) {
              goto LABEL_80;
            }
          }
          break;
        }
LABEL_80:
        TFontNameString::~TFontNameString((TFontNameString *)&v70);
        ++v45;
        v44 += v62;
        if (v45 == v46) {
          goto LABEL_81;
        }
      }
LABEL_89:
      __break(1u);
      return;
    }
  }
LABEL_81:
  if (__p)
  {
    unsigned __int8 v77 = __p;
    operator delete(__p);
  }
  unsigned int v9 = v79;
LABEL_84:
  if (v9)
  {
LABEL_85:
    timespec v80 = v9;
    operator delete(v9);
  }
}

void sub_1B532845C()
{
}

void sub_1B53284A0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B53284A8);
  }
  __clang_call_terminate(a1);
}

uint64_t TFPFont::TFPFont(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, void *a7)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F0DD8A90;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  CFTypeRef v11 = *(CFTypeRef *)(a2 + 40);
  if (v11) {
    CFTypeRef v11 = CFRetain(v11);
  }
  *(void *)(a1 + 40) = v11;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 64;
  *(void *)(a1 + 144) = 0;
  TPostScriptNameString::assign((TPostScriptNameString *)(a1 + 64), *(const char **)(a2 + 136));
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 152;
  *(void *)(a1 + 232) = 0;
  TPostScriptNameString::assign((TPostScriptNameString *)(a1 + 152), *(const char **)(a2 + 224));
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  uint64_t v12 = (void *)(a1 + 264);
  unint64_t v13 = *(char **)(a2 + 256);
  long long v74 = (TPostScriptNameString *)(a1 + 64);
  uint64_t v76 = a5;
  if (v13)
  {
    int v14 = (char *)malloc_type_malloc(56 * (void)v13, 0x29E1ABA6uLL);
    *(void *)(a1 + 264) = v14;
    *(void *)(a1 + 272) = 0;
    if (v14) {
      unint64_t v13 = &v14[40 * *(void *)(a1 + 256)];
    }
    else {
      unint64_t v13 = 0;
    }
  }
  else
  {
    *uint64_t v12 = 0;
    *(void *)(a1 + 272) = 0;
  }
  uint64_t v72 = a4;
  *(void *)(a1 + 280) = v13;
  uint64_t v15 = (uint64_t *)(a1 + 288);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
  std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(a1 + 288, *(void *)(a2 + 296));
  uint64_t v75 = a2;
  uint64_t v16 = *(uint64_t ***)(a2 + 304);
  if (v16)
  {
    BOOL v17 = (void *)(a1 + 304);
    unint64_t v18 = *(void *)(a1 + 296);
    do
    {
      unint64_t v19 = *((unsigned int *)v16 + 4);
      unint64_t v20 = v16[2];
      if (v18)
      {
        uint8x8_t v21 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
        v21.i16[0] = vaddlv_u8(v21);
        if (v21.u32[0] > 1uLL)
        {
          unint64_t v22 = *((unsigned int *)v16 + 4);
          if (v18 <= v19) {
            unint64_t v22 = v19 % v18;
          }
        }
        else
        {
          unint64_t v22 = (v18 - 1) & v19;
        }
        long long v23 = *(uint64_t ***)(*v15 + 8 * v22);
        if (v23)
        {
          for (unint64_t i = *v23; i; unint64_t i = (uint64_t *)*i)
          {
            unint64_t v25 = i[1];
            if (v25 == v19)
            {
              if (*((_DWORD *)i + 4) == v19) {
                goto LABEL_49;
              }
            }
            else
            {
              if (v21.u32[0] > 1uLL)
              {
                if (v25 >= v18) {
                  v25 %= v18;
                }
              }
              else
              {
                v25 &= v18 - 1;
              }
              if (v25 != v22) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      }
      long long v26 = operator new(0x18uLL);
      *long long v26 = 0;
      v26[1] = v19;
      v26[2] = v20;
      float v27 = (float)(unint64_t)(*(void *)(a1 + 312) + 1);
      float v28 = *(float *)(a1 + 320);
      if (!v18 || (float)(v28 * (float)v18) < v27)
      {
        BOOL v29 = (v18 & (v18 - 1)) != 0;
        if (v18 < 3) {
          BOOL v29 = 1;
        }
        unint64_t v30 = v29 | (2 * v18);
        unint64_t v31 = vcvtps_u32_f32(v27 / v28);
        if (v30 <= v31) {
          size_t v32 = v31;
        }
        else {
          size_t v32 = v30;
        }
        std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(a1 + 288, v32);
        unint64_t v18 = *(void *)(a1 + 296);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v18 <= v19) {
            unint64_t v22 = v19 % v18;
          }
          else {
            unint64_t v22 = v19;
          }
        }
        else
        {
          unint64_t v22 = (v18 - 1) & v19;
        }
      }
      uint64_t v33 = *v15;
      CFDictionaryRef v34 = *(void **)(*v15 + 8 * v22);
      if (v34)
      {
        *long long v26 = *v34;
      }
      else
      {
        *long long v26 = *v17;
        *BOOL v17 = v26;
        *(void *)(v33 + 8 * v22) = v17;
        if (!*v26) {
          goto LABEL_48;
        }
        unint64_t v35 = *(void *)(*v26 + 8);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v35 >= v18) {
            v35 %= v18;
          }
        }
        else
        {
          v35 &= v18 - 1;
        }
        CFDictionaryRef v34 = (void *)(*v15 + 8 * v35);
      }
      *CFDictionaryRef v34 = v26;
LABEL_48:
      ++*(void *)(a1 + 312);
LABEL_49:
      uint64_t v16 = (uint64_t **)*v16;
    }
    while (v16);
  }
  *(void *)(a1 + 328) = v76;
  long long v36 = (void *)(a1 + 336);
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(unsigned char *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  CFTypeRef explicit = (CFTypeRef)atomic_load_explicit((atomic_ullong *volatile)(v75 + 392), memory_order_acquire);
  if (explicit) {
    CFTypeRef explicit = CFRetain(explicit);
  }
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 392) = explicit;
  *(void *)(a1 + 416) = -1;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0xFFFFFFFFLL;
  *(void *)(a1 + 440) = 0;
  (*(void (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  if (*(void *)(v75 + 336)) {
    uint64_t v38 = *(void *)(v75 + 336);
  }
  else {
    uint64_t v38 = v75;
  }
  RetainedFPFontRef::Retain((void *)(a1 + 336), v38);
  uint64_t v39 = *(void *)(a1 + 256);
  if (v39)
  {
    memmove(*(void **)(a1 + 264), *(const void **)(v75 + 264), 56 * v39);
    uint64_t v40 = *(void *)(a1 + 256);
    if (!v40) {
      goto LABEL_76;
    }
    uint64_t v41 = 0;
    char v42 = 0;
    long long v43 = *(double **)(a1 + 280);
    BOOL v44 = 1;
    do
    {
      if (a3)
      {
        int v45 = *(_DWORD *)v43;
        uint64_t v46 = (double *)(v72 + 8);
        uint64_t v47 = a3;
        do
        {
          if (v45 == *((_DWORD *)v46 - 2))
          {
            double v48 = v43[1];
            double v49 = *v46;
            double v50 = vabdd_f64(v48, *v46);
            if (v50 >= 0.0001)
            {
              double v51 = fabs(v48);
              double v52 = fabs(v49);
              if (v51 < v52) {
                double v51 = v52;
              }
              if (v50 / v51 >= 0.0001)
              {
                v43[1] = v49;
                char v42 = 1;
                double v48 = v49;
              }
            }
            if (v44)
            {
              double v53 = *(double *)(*v12 + 40 * v41 + 32);
              double v54 = vabdd_f64(v48, v53);
              if (v54 >= 0.0001)
              {
                double v55 = fabs(v48);
                double v56 = fabs(v53);
                if (v55 < v56) {
                  double v55 = v56;
                }
                BOOL v44 = v54 / v55 < 0.0001;
              }
              else
              {
                BOOL v44 = 1;
              }
            }
            else
            {
              BOOL v44 = 0;
            }
          }
          v46 += 2;
          --v47;
        }
        while (v47);
      }
      ++v41;
      v43 += 2;
    }
    while (v41 != v40);
    if (!v44)
    {
      if (a6 != 0 && (v42 & 1) != 0)
      {
        if (a7)
        {
          int8x8_t v58 = (int8x8_t)a7[1];
          if (v58)
          {
            unint64_t v59 = (unsigned __int16)(a6 - 1);
            uint8x8_t v60 = (uint8x8_t)vcnt_s8(v58);
            v60.i16[0] = vaddlv_u8(v60);
            if (v60.u32[0] > 1uLL)
            {
              unint64_t v61 = (unsigned __int16)(a6 - 1);
              if (*(void *)&v58 <= v59) {
                unint64_t v61 = v59 % *(void *)&v58;
              }
            }
            else
            {
              unint64_t v61 = (v58.i32[0] - 1) & v59;
            }
            long long v63 = *(uint64_t ****)(*a7 + 8 * v61);
            if (v63)
            {
              for (unint64_t j = *v63; j; unint64_t j = (uint64_t **)*j)
              {
                unint64_t v65 = (unint64_t)j[1];
                if (v65 == v59)
                {
                  if (*((unsigned __int16 *)j + 8) == v59)
                  {
                    TPostScriptNameString::operator=((uint64_t)v74, (TFontNameString *)(j + 3));
                    return a1;
                  }
                }
                else
                {
                  if (v60.u32[0] > 1uLL)
                  {
                    if (v65 >= *(void *)&v58) {
                      v65 %= *(void *)&v58;
                    }
                  }
                  else
                  {
                    v65 &= *(void *)&v58 - 1;
                  }
                  if (v65 != v61) {
                    break;
                  }
                }
              }
            }
          }
        }
        else
        {
          *(void *)&long long v62 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v62 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[4] = v62;
          __b[5] = v62;
          __b[2] = v62;
          __b[3] = v62;
          __b[0] = v62;
          __b[1] = v62;
          (*(void (**)(_OWORD *__return_ptr))(**(void **)(a1 + 16) + 88))(__b);
          if (TFontNameString::IsValid((TFontNameString *)__b))
          {
            TPostScriptNameString::operator=((uint64_t)v74, (TFontNameString *)__b);
            TFontNameString::~TFontNameString((TFontNameString *)__b);
            return a1;
          }
          TFontNameString::~TFontNameString((TFontNameString *)__b);
        }
      }
      if (v42)
      {
        memset(__b, 170, sizeof(__b));
        size_t v66 = *(void *)(a1 + 232) + 256;
        LOBYTE(v77) = 0;
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(__b, v66, &v77);
        size_t v67 = TFPFont::ComposePostScriptNameForVariation(a1, *(void *)(a1 + 256), *(void *)(a1 + 280), *(char **)&__b[0], *((void *)&__b[0] + 1) - *(void *)&__b[0], (uint64_t)a7)+ 1;
        if (v67 < 0x41 || *(void *)(a1 + 144) >= v67)
        {
          unsigned int v68 = *(char **)(a1 + 136);
        }
        else
        {
          unsigned int v68 = (char *)reallocf(*(void **)(a1 + 128), v67);
          *(void *)(a1 + 128) = v68;
          *(void *)(a1 + 136) = v68;
        }
        *(void *)(a1 + 144) = v67;
        strlcpy(v68, *(const char **)&__b[0], v67);
        unsigned __int8 v77 = (void **)__b;
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100](&v77);
      }
    }
    else
    {
LABEL_76:
      TPostScriptNameString::assign(v74, *(const char **)(a1 + 224));
      uint64_t v57 = *v36;
      if (*v36)
      {
        if (!(*(unsigned int (**)(void))(*(void *)v57 + 32))(*v36)) {
          (*(void (**)(uint64_t))(*(void *)v57 + 8))(v57);
        }
        void *v36 = 0;
      }
    }
  }
  return a1;
}

void sub_1B5328C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    (*(void (**)(void))(**(void **)(v17 + 16) + 32))(*(void *)(v17 + 16));
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFPFont::GetDefaultInstance(TFPFont *this)
{
  return *((void *)this + 42);
}

uint64_t TPostScriptNameString::operator=(uint64_t a1, TFontNameString *a2)
{
  long long v4 = (const void *)*((void *)a2 + 1);
  if (!v4)
  {
    uint64_t v17 = *((void *)a2 + 5);
    if (!v17 || (uint64_t v18 = *(void *)(v17 + 8)) == 0)
    {
LABEL_44:
      *(void *)(a1 + 80) = 21;
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      snprintf_l(*(char **)(a1 + 72), *(void *)(a1 + 80), 0, "font%016llx", (unint64_t)Current);
      return a1;
    }
    long long v4 = (const void *)(v18 + *((void *)a2 + 6));
  }
  size_t v5 = *((void *)a2 + 2);
  if (*((void *)a2 + 10))
  {
    CFStringEncoding v6 = -1;
LABEL_4:
    size_t v7 = v5 + 1;
    if (v7 >= 0x41 && *(void *)(a1 + 80) < v7)
    {
      unsigned int v9 = reallocf(*(void **)(a1 + 64), v7);
      *(void *)(a1 + 64) = v9;
      *(void *)(a1 + 72) = v9;
    }
    *(void *)(a1 + 80) = v7;
    CFStringRef v10 = CopyFontNameString(a2, v6);
    CFStringRef v30 = v10;
    if (!v10 || !CFStringGetCString(v10, *(char **)(a1 + 72), *(void *)(a1 + 80), 0))
    {
      memcpy(*(void **)(a1 + 72), v4, *(void *)(a1 + 80) - 1);
      *(unsigned char *)(*(void *)(a1 + 80) + *(void *)(a1 + 72) - 1) = 0;
    }
    TCFString::~TCFString((const void **)&v30);
    goto LABEL_13;
  }
  CFStringEncoding v19 = DetermineCFEncoding((const unsigned __int8 *)v4, *((unsigned __int16 *)a2 + 34), *((unsigned __int16 *)a2 + 35));
  if (!v19)
  {
    size_t v24 = v5 + 1;
    if (v5 + 1 < 0x41 || *(void *)(a1 + 80) >= v24)
    {
      long long v26 = *(void **)(a1 + 72);
    }
    else
    {
      long long v26 = reallocf(*(void **)(a1 + 64), v5 + 1);
      *(void *)(a1 + 64) = v26;
      *(void *)(a1 + 72) = v26;
    }
    *(void *)(a1 + 80) = v24;
    memcpy(v26, v4, v5);
    *(unsigned char *)(*(void *)(a1 + 80) + *(void *)(a1 + 72) - 1) = 0;
    goto LABEL_13;
  }
  CFStringEncoding v6 = v19;
  if (v19 != 268435712) {
    goto LABEL_4;
  }
  if (v5)
  {
    CFStringEncoding v6 = 268435712;
    goto LABEL_4;
  }
  uint64_t v20 = (v5 >> 1) + 1;
  if (v5 >= 0x80 && *(void *)(a1 + 80) <= v5 >> 1)
  {
    uint8x8_t v21 = reallocf(*(void **)(a1 + 64), (v5 >> 1) + 1);
    *(void *)(a1 + 64) = v21;
    *(void *)(a1 + 72) = v21;
    *(void *)(a1 + 80) = v20;
    goto LABEL_55;
  }
  *(void *)(a1 + 80) = v20;
  if (v5)
  {
LABEL_55:
    size_t v27 = 0;
    uint64_t v28 = 0;
    while (!*((unsigned char *)v4 + v27))
    {
      uint64_t v29 = v28 + 1;
      *(unsigned char *)(*(void *)(a1 + 72) + v28) = *((unsigned char *)v4 + v27 + 1);
      v27 += 2;
      ++v28;
      if (v27 >= v5) {
        goto LABEL_58;
      }
    }
    uint64_t v29 = v28;
    goto LABEL_58;
  }
  uint64_t v29 = 0;
LABEL_58:
  *(unsigned char *)(*(void *)(a1 + 72) + v29) = 0;
LABEL_13:
  CFTypeRef v11 = *(unsigned char **)(a1 + 72);
  if (!v11) {
    goto LABEL_44;
  }
  size_t v12 = strlen(*(const char **)(a1 + 72));
  if (v12)
  {
    size_t v13 = v12;
    int v14 = *(unsigned char **)(a1 + 72);
    while (1)
    {
      int v15 = *v14;
      if ((v15 - 33) > 0x5D)
      {
        if (v15 == 32)
        {
          *v11++ = 45;
          goto LABEL_29;
        }
        if (!*v14)
        {
LABEL_27:
          *v11++ = v15;
          goto LABEL_29;
        }
      }
      else
      {
        BOOL v16 = (v15 - 37) > 0x38 || ((1 << (v15 - 37)) & 0x140000002800419) == 0;
        if (v16 && v15 != 123 && v15 != 125) {
          goto LABEL_27;
        }
      }
      --v13;
LABEL_29:
      ++v14;
      if (!--v12) {
        goto LABEL_41;
      }
    }
  }
  size_t v13 = 0;
LABEL_41:
  if (*v11) {
    *CFTypeRef v11 = 0;
  }
  if (!v13) {
    goto LABEL_44;
  }
  return a1;
}

void sub_1B5328FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TCFString::~TCFString((const void **)va);
  _Unwind_Resume(a1);
}

size_t TFPFont::ComposePostScriptNameForVariation(uint64_t a1, uint64_t a2, uint64_t a3, char *__dst, size_t __size, uint64_t a6)
{
  strlcpy(__dst, *(const char **)(a1 + 224), __size);
  size_t v11 = strlen(__dst);
  if (a2)
  {
    v13[0] = a2;
    v13[1] = a3;
    v11 += (*(uint64_t (**)(void, void *, char *, uint64_t))(**(void **)(a1 + 16) + 416))(*(void *)(a1 + 16), v13, &__dst[v11], a6);
  }
  return v11;
}

unint64_t TFPFont::GetVariationAxes(TFPFont *this, unint64_t *a2)
{
  uint64_t v3 = *((void *)this + 42);
  if (v3)
  {
    return FPFontGetVariationAxes(v3);
  }
  else
  {
    if (*((void *)this + 32))
    {
      unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)this + 34, memory_order_acquire);
      if (!explicit) {
        operator new[]();
      }
      *a2 = *((void *)this + 32);
    }
    else
    {
      unint64_t explicit = 0;
      *a2 = 0;
    }
    return explicit;
  }
}

void sub_1B5329358(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  MEMORY[0x1BA9994A0](v22, 0x1060C8058154DEFLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5329324);
}

CFStringRef CopyFontNameString(const TFontNameString *a1, CFStringEncoding a2)
{
  if (*((void *)a1 + 10))
  {
    CFStringRef v2 = (const void *)*((void *)a1 + 10);
    return (CFStringRef)CFRetain(v2);
  }
  CFStringEncoding v4 = a2;
  size_t v5 = (const unsigned __int8 *)*((void *)a1 + 1);
  if (!v5)
  {
    uint64_t v6 = *((void *)a1 + 5);
    if (v6 && (uint64_t v7 = *(void *)(v6 + 8)) != 0) {
      size_t v5 = (const unsigned __int8 *)(v7 + *((void *)a1 + 6));
    }
    else {
      size_t v5 = 0;
    }
  }
  CFIndex v8 = *((unsigned int *)a1 + 4);
  if (a2 == -1)
  {
    CFStringEncoding v4 = DetermineCFEncoding(v5, *((unsigned __int16 *)a1 + 34), *((unsigned __int16 *)a1 + 35));
    if (!v5) {
      return 0;
    }
  }
  else if (!v5)
  {
    return 0;
  }
  if (!v8 || v4 == -1) {
    return 0;
  }
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  return CFStringCreateWithBytes(v9, v5, v8, v4, 0);
}

unint64_t TFPFont::GetHVARTable(atomic_ullong *this, const TSFNTFont *a2)
{
  unint64_t explicit = atomic_load_explicit(this + 47, memory_order_acquire);
  if (!explicit) {
    operator new();
  }
  if (explicit == -1) {
    return 0;
  }
  else {
    return explicit;
  }
}

void sub_1B5329574(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10E1C4069E1901FLL);
  _Unwind_Resume(a1);
}

unint64_t TFPFont::GetHVARScalars(atomic_ullong *this, const THVARTable *a2)
{
  unint64_t explicit = atomic_load_explicit(this + 48, memory_order_acquire);
  if (!explicit)
  {
    unint64_t v4 = 0;
    if ((*(uint64_t (**)(atomic_ullong *, unint64_t *))(*this + 232))(this, &v4)) {
      operator new[]();
    }
    return 0;
  }
  return explicit;
}

uint64_t TFPFont::GetVariationValues(TFPFont *this, unint64_t *a2)
{
  *a2 = *((void *)this + 32);
  if (*((void *)this + 35))
  {
    uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
    if (EmSpaceTrueTypeScaler)
    {
      unint64_t v4 = *(uint64_t (**)(void))(*(void *)EmSpaceTrueTypeScaler + 168);
      return v4();
    }
    unint64_t Handler = TFPFont::GetHandler(this);
    if (Handler)
    {
      unint64_t v4 = *(uint64_t (**)(void))(*(void *)Handler + 88);
      return v4();
    }
  }
  return 0;
}

uint64_t TFPFont::GetVariations(TFPFont *this, unint64_t *a2)
{
  *a2 = *((void *)this + 32);
  return *((void *)this + 35);
}

uint64_t TFPFont::GetEmSpaceTrueTypeScaler(os_unfair_lock_s *this)
{
  CFStringRef v2 = this + 109;
  os_unfair_lock_lock(this + 109);
  uint64_t v3 = *(void *)&this[110]._os_unfair_lock_opaque;
  if (!v3)
  {
    uint64_t v4 = *(void *)&this[64]._os_unfair_lock_opaque;
    uint64_t v5 = *(void *)&this[70]._os_unfair_lock_opaque;
    uint64_t v6 = *(const TFont **)&this[4]._os_unfair_lock_opaque;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)((char *)v14 + 12) = v7;
    v13[1] = v7;
    v14[0] = v7;
    v13[0] = v7;
    TStrikeTransform::TStrikeTransform((TStrikeTransform *)v13, v6, 0, 0);
    TScalerStrike::TScalerStrike((uint64_t)v11, (uint64_t)v6, v4, v5, v13);
    TFontScaler::CreateFontScaler((uint64_t)v11, 0, &v12);
    uint64_t v8 = v12;
    TScalerStrike::~TScalerStrike((TScalerStrike *)v11);
    if (v8) {
      uint64_t v3 = v8;
    }
    else {
      uint64_t v3 = -1;
    }
    *(void *)&this[110]._os_unfair_lock_opaque = v3;
  }
  if (v3 == -1) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v3;
  }
  os_unfair_lock_unlock(v2);
  return v9;
}

void sub_1B5329874(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TScalerStrike::~TScalerStrike((TScalerStrike *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5329848);
}

void sub_1B53298A0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t TFPFont::GetHandler(TFPFont *this)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 32);
  if ((v2 & 1) == 0)
  {
    uint64_t v3 = *((void *)this + 35);
    v7[0] = *((void *)this + 32);
    v7[1] = v3;
    Fontunint64_t Handler = TFontHandler::CreateFontHandler(*((uint64_t **)this + 2), *((void *)this + 42) == 0, (uint64_t)v7);
    if (FontHandler)
    {
      uint64_t v5 = 0;
      atomic_compare_exchange_strong((atomic_ullong *volatile)this + 3, (unint64_t *)&v5, FontHandler);
      if (v5) {
        (*(void (**)(unint64_t))(*(void *)FontHandler + 8))(FontHandler);
      }
    }
    atomic_store(1u, (unsigned __int8 *)this + 32);
  }
  return atomic_load_explicit((atomic_ullong *volatile)this + 3, memory_order_acquire);
}

void TTableDataReference::~TTableDataReference(TTableDataReference *this)
{
  TDataReference::~TDataReference(this);
  JUMPOUT(0x1BA9994D0);
}

CFTypeRef TFPFont::CopyMetadata(atomic_ullong *this)
{
  CFTypeRef explicit = (CFTypeRef)atomic_load_explicit(this + 50, memory_order_acquire);
  unsigned __int8 v2 = (CFTypeRef *)MEMORY[0x1E4F1D260];
  if (!explicit)
  {
    CFTypeRef v4 = (CFTypeRef)(*(uint64_t (**)(atomic_ullong *, uint64_t))(*this + 80))(this, 1835365473);
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    CFTypeRef cf = 0;
    uint64_t v9 = v4;
    if (!this[42] || this[41] < 0)
    {
      uint64_t v5 = 0;
    }
    else
    {
      uint64_t v5 = (void *)(*(uint64_t (**)(atomic_ullong *))(*this + 104))(this);
      CFTypeRef cf = v5;
      CFTypeRef v4 = v9;
    }
    CFTypeRef v10 = 0;
    MetadataFromFont((const __CFData *)v4, v5, 0, (CFDictionaryRef *)&v10);
    CFTypeRef explicit = v10;
    if (!v10) {
      CFTypeRef explicit = CFRetain(*v2);
    }
    uint64_t v6 = 0;
    atomic_compare_exchange_strong(this + 50, (unint64_t *)&v6, (unint64_t)explicit);
    if (v6)
    {
      CFRelease(explicit);
      CFTypeRef explicit = v6;
    }
    TCFRetained<__CFString const*>::~TCFRetained(&cf);
    TCFData::~TCFData(&v9);
  }
  if (explicit == *v2) {
    return 0;
  }
  else {
    return CFRetain(explicit);
  }
}

void sub_1B5329AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  TCFRetained<__CFString const*>::~TCFRetained((const void **)va);
  TCFData::~TCFData((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t DetermineCFEncoding(const unsigned __int8 *a1, int a2, uint64_t a3)
{
  if (!a1) {
    return 0xFFFFFFFFLL;
  }
  uint64_t result = 268435712;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = a3;
      break;
    case 2:
      if (a3 >= 3) {
        return 0xFFFFFFFFLL;
      }
      uint64_t result = dword_1B5400D78[(__int16)a3];
      break;
    case 3:
      if (a3) {
        unsigned int v4 = -1;
      }
      else {
        unsigned int v4 = 0;
      }
      if (a3 == 1) {
        uint64_t result = 268435712;
      }
      else {
        uint64_t result = v4;
      }
      break;
    default:
      return 0xFFFFFFFFLL;
  }
  return result;
}

size_t TPostScriptNameString::assign(TPostScriptNameString *this, const char *__s)
{
  size_t v4 = strlen(__s) + 1;
  if (v4 < 0x41 || *((void *)this + 10) >= v4)
  {
    uint64_t v6 = (char *)*((void *)this + 9);
  }
  else
  {
    uint64_t v6 = (char *)reallocf(*((void **)this + 8), v4);
    *((void *)this + 8) = v6;
    *((void *)this + 9) = v6;
  }
  *((void *)this + 10) = v4;
  return strlcpy(v6, __s, v4);
}

CFStringRef TFPFont::CopyPostScriptName(TFPFont *this)
{
  uint64_t v1 = (const char *)*((void *)this + 17);
  size_t v2 = strlen(v1);
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3) {
    return 0;
  }
  else {
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)v1, v2, 0x600u, 0);
  }
}

void sub_1B5329C60(void *a1)
{
}

uint64_t TFPFont::GetPostScriptName(TFPFont *this)
{
  return *((void *)this + 17);
}

CFStringRef TFPFont::CopyNameTablePostScriptName(TFPFont *this)
{
  uint64_t v1 = (TSFNTFont *)(*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (!v1) {
    return 0;
  }
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[4] = v2;
  v5[5] = v2;
  v5[2] = v2;
  v5[3] = v2;
  v5[0] = v2;
  v5[1] = v2;
  TSFNTFont::GetPostscriptName(v1, (TFontNameString *)v5);
  CFStringRef v3 = CopyFontNameString((const TFontNameString *)v5, 0xFFFFFFFF);
  TFontNameString::~TFontNameString((TFontNameString *)v5);
  return v3;
}

uint64_t TFPFont::GetVariationPrefix(uint64_t a1, char **a2)
{
  if (*(void *)(a1 + 256))
  {
    uint64_t v3 = *(void *)(a1 + 16);
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v16 = v4;
    long long v17 = v4;
    long long v14 = v4;
    long long v15 = v4;
    long long v12 = v4;
    long long v13 = v4;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 88))(&v12, v3, 25, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
    if (!TFontNameString::IsValid((TFontNameString *)&v12))
    {
      (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 88))(v11, v3, 16, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
      TFontNameString::operator=((uint64_t)&v12, (uint64_t)v11);
      TFontNameString::~TFontNameString((TFontNameString *)v11);
    }
    if (TFontNameString::IsValid((TFontNameString *)&v12))
    {
      uint64_t v5 = v13;
      uint64_t v6 = *a2;
      unint64_t v7 = a2[1] - *a2;
      BOOL v8 = (uint64_t)v13 + 1 >= v7;
      size_t v9 = v13 + 1 - v7;
      if (v9 != 0 && v8)
      {
        std::vector<char,TInlineBufferAllocator<char,64ul>>::__append(a2, v9);
        uint64_t v6 = *a2;
      }
      else if (!v8)
      {
        a2[1] = &v6[v13 + 1];
      }
      if (GetAlphanumericCString((const TFontNameString *)&v12, v6, v5))
      {
        TFontNameString::~TFontNameString((TFontNameString *)&v12);
        return 1;
      }
    }
    TFontNameString::~TFontNameString((TFontNameString *)&v12);
  }
  return 0;
}

void sub_1B5329E78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

BOOL GetAlphanumericCString(const TFontNameString *a1, char *a2, uint64_t a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  BOOL IsValid = TFontNameString::IsValid(a1);
  BOOL v7 = 0;
  if (a3 && IsValid)
  {
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v16[2] = v8;
    v16[3] = v8;
    v16[0] = v8;
    v16[1] = v8;
    long long v17 = 0;
    uint64_t v18 = (char *)v16;
    uint64_t v19 = 0;
    TPostScriptNameString::operator=((uint64_t)v16, a1);
    size_t v9 = v18;
    CFTypeRef v10 = a2;
    if (*v18 == 46)
    {
      *a2 = 46;
      CFTypeRef v10 = a2 + 1;
      if (!--a3)
      {
LABEL_14:
        *CFTypeRef v10 = 0;
        BOOL v7 = v10 != a2;
        free(v17);
        return v7;
      }
      ++v9;
    }
    uint64_t v11 = MEMORY[0x1E4F14390];
    do
    {
      unsigned int v13 = *v9++;
      unsigned int v12 = v13;
      if (!v13) {
        break;
      }
      if ((v12 & 0x80000000) != 0 ? __maskrune(v12, 0x500uLL) : *(_DWORD *)(v11 + 4 * v12 + 60) & 0x500) {
        *v10++ = v12;
      }
      --a3;
    }
    while (a3);
    goto LABEL_14;
  }
  return v7;
}

void sub_1B5329FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
}

uint64_t TFPFont::AppendVariationPostScriptName(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if ((*(void *)&a3 & 0xFF0000) == 0)
  {
    uint64_t v12 = *(void *)(a1 + 328);
    if (v12 < 0) {
      return 0;
    }
    uint64_t v13 = *(void *)(a1 + 336) ? *(void *)(a1 + 336) : a1;
    uint64_t v14 = *(void *)(v13 + 344);
    uint64_t v15 = *(void *)(v13 + 352);
    if (v14 == v15 || v12 >= (v15 - v14) >> 3) {
      return 0;
    }
    LOWORD(a3) = *(_WORD *)(v14 + 8 * v12 + 2);
  }
  if (!(_WORD)a3) {
    return 0;
  }
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v24 = v4;
  long long v25 = v4;
  long long v22 = v4;
  long long v23 = v4;
  long long v20 = v4;
  long long v21 = v4;
  *(_OWORD *)__s = v4;
  long long v19 = v4;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 16) + 88))(v17);
  BOOL AlphanumericCString = GetAlphanumericCString((const TFontNameString *)v17, __s, 127);
  TFontNameString::~TFontNameString((TFontNameString *)v17);
  if (!AlphanumericCString) {
    return 0;
  }
  uint64_t v6 = *(const char **)a2;
  size_t v7 = strlen(*(const char **)a2);
  size_t v8 = strlen(__s);
  unint64_t v9 = v7 + v8 + 1;
  if (v9 > 0x7F) {
    return 0;
  }
  unint64_t v10 = v7 + v8 + 2;
  unint64_t v11 = *(void *)(a2 + 8) - (void)v6;
  if (v11 <= v9)
  {
    std::vector<char,TInlineBufferAllocator<char,64ul>>::__append((void *)a2, v10 - v11);
    uint64_t v6 = *(const char **)a2;
  }
  else if (v10 < v11)
  {
    *(void *)(a2 + 8) = &v6[v10];
  }
  v6[v7] = 45;
  strcpy((char *)&v6[v7 + 1], __s);
  return 1;
}

void sub_1B532A1C0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B532A1C8);
  }
  __clang_call_terminate(a1);
}

const __CFString *TFPFont::CopyFontName(TFPFont *this, uint64_t a2)
{
  int v3 = a2;
  uint64_t v5 = *((void *)this + 2);
  if (a2 != 2 && a2 != 4)
  {
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v53 = v19;
    long long v54 = v19;
    long long v51 = v19;
    long long v52 = v19;
    long long v49 = v19;
    long long v50 = v19;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 88))(&v49, v5, a2, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
    CFStringRef v2 = CopyFontNameString((const TFontNameString *)&v49, 0xFFFFFFFF);
    TFontNameString::~TFontNameString((TFontNameString *)&v49);
    return v2;
  }
  uint64_t v6 = *((void *)this + 42);
  if (v6)
  {
    uint64_t v7 = *((void *)this + 41);
    if ((v7 & 0x8000000000000000) == 0)
    {
      uint64_t v9 = *(void *)(v6 + 344);
      uint64_t v8 = *(void *)(v6 + 352);
      if (v9 != v8 && v7 < (v8 - v9) >> 3)
      {
        char v10 = 0;
        int v11 = *(unsigned __int16 *)(v9 + 8 * v7 + 2);
        goto LABEL_20;
      }
      goto LABEL_16;
    }
  }
  uint64_t v12 = *((void *)this + 35);
  if (v12)
  {
    uint64_t v13 = *((void *)this + 32);
    if (!v13)
    {
LABEL_16:
      char v10 = 0;
      int v11 = 0;
      goto LABEL_20;
    }
    uint64_t v14 = (double *)(*((void *)this + 33) + 32);
    uint64_t v15 = (double *)(v12 + 8);
    while (1)
    {
      double v16 = vabdd_f64(*v15, *v14);
      if (v16 >= 0.0001)
      {
        double v17 = fabs(*v15);
        double v18 = fabs(*v14);
        if (v17 < v18) {
          double v17 = v18;
        }
        if (v16 / v17 >= 0.0001) {
          break;
        }
      }
      v14 += 5;
      v15 += 2;
      if (!--v13) {
        goto LABEL_16;
      }
    }
    char v10 = 0;
    int v11 = -1;
  }
  else
  {
    int v11 = 0;
    char v10 = 1;
  }
LABEL_20:
  *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v53 = v20;
  long long v54 = v20;
  long long v51 = v20;
  long long v52 = v20;
  long long v49 = v20;
  long long v50 = v20;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 88))(&v49, v5, a2, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
  CFStringRef v21 = CopyFontNameString((const TFontNameString *)&v49, 0xFFFFFFFF);
  CFStringRef v48 = v21;
  if (v21) {
    BOOL v23 = 0;
  }
  else {
    BOOL v23 = v11 == 0;
  }
  char v24 = v23;
  if (v23) {
    goto LABEL_48;
  }
  if (v3 == 2) {
    CFStringRef v2 = 0;
  }
  else {
    CFStringRef v2 = v21;
  }
  if (v11 >= 1)
  {
    *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v46 = v25;
    long long v47 = v25;
    long long v44 = v25;
    long long v45 = v25;
    long long v42 = v25;
    long long v43 = v25;
    (*(void (**)(long long *__return_ptr, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 88))(&v42, v5, (unsigned __int16)v11, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
    CFStringRef appendedString = CopyFontNameString((const TFontNameString *)&v42, 0xFFFFFFFF);
    if (!appendedString) {
      goto LABEL_45;
    }
    memset(cStr, 170, sizeof(cStr));
    TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)cStr, v2, v26);
    uint64_t v27 = *(void *)cStr;
    if (!*(void *)cStr)
    {
LABEL_43:
      TCFRetained<__CFString const*>::~TCFRetained((const void **)&cStr[8]);
      TCFString::~TCFString((const void **)cStr);
      if (v27)
      {
        char v31 = 0;
        goto LABEL_46;
      }
LABEL_45:
      char v31 = 1;
LABEL_46:
      TCFString::~TCFString((const void **)&appendedString);
      TFontNameString::~TFontNameString((TFontNameString *)&v42);
      if ((v31 & 1) == 0) {
        goto LABEL_48;
      }
      goto LABEL_47;
    }
LABEL_33:
    TComponentsJoinedByString::Append((CFStringRef *)cStr, appendedString);
    CFStringRef v2 = *(const __CFString **)cStr;
    *(void *)cStr = 0;
    goto LABEL_43;
  }
  if (v11 < 0)
  {
    *(void *)&long long v42 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v42 + 1) = 0xAAAAAAAAAAAAAAAALL;
    TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)&v42, v2, v22);
    uint64_t v33 = v42;
    if ((void)v42)
    {
      CFStringRef v2 = (const __CFString *)v42;
      if (*((void *)this + 32))
      {
        unint64_t v34 = 0;
        CFAllocatorRef v35 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        long long v36 = (unsigned int *)(*((void *)this + 33) + 8);
        uint64_t v37 = 8;
        do
        {
          CFStringRef v38 = (const __CFString *)*((void *)v36 - 1);
          if (v38)
          {
            TComponentsJoinedByString::Append((const __CFString **)&v42, v38, *(double *)(*((void *)this + 35) + v37));
          }
          else
          {
            *(_DWORD *)cStr = bswap32(*v36);
            cStr[4] = 0;
            CFStringRef v39 = CFStringCreateWithCString(v35, cStr, 0);
            if (v39)
            {
              TComponentsJoinedByString::Append((const __CFString **)&v42, v39, *(double *)(*((void *)this + 35) + v37));
              CFRelease(v39);
            }
          }
          ++v34;
          v37 += 16;
          v36 += 10;
        }
        while (v34 < *((void *)this + 32));
        CFStringRef v2 = (const __CFString *)v42;
      }
      *(void *)&long long v42 = 0;
    }
    TCFRetained<__CFString const*>::~TCFRetained((const void **)&v42 + 1);
    TCFString::~TCFString((const void **)&v42);
    if (v33) {
      goto LABEL_48;
    }
  }
  else
  {
    if (v3 == 4) {
      char v28 = v10;
    }
    else {
      char v28 = 1;
    }
    if ((v28 & 1) == 0)
    {
      *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v46 = v29;
      long long v47 = v29;
      long long v44 = v29;
      long long v45 = v29;
      long long v42 = v29;
      long long v43 = v29;
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 88))(&v42, v5, 2, 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
      CFStringRef appendedString = CopyFontNameString((const TFontNameString *)&v42, 0xFFFFFFFF);
      if (!appendedString) {
        goto LABEL_45;
      }
      memset(cStr, 170, sizeof(cStr));
      TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)cStr, v2, v30);
      uint64_t v27 = *(void *)cStr;
      if (!*(void *)cStr) {
        goto LABEL_43;
      }
      goto LABEL_33;
    }
  }
LABEL_47:
  CFStringRef v2 = v48;
  CFStringRef v48 = 0;
LABEL_48:
  TCFString::~TCFString((const void **)&v48);
  TFontNameString::~TFontNameString((TFontNameString *)&v49);
  if (v24) {
    return 0;
  }
  return v2;
}

void sub_1B532A668(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, const void *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,char a27)
{
  TCFRetained<__CFString const*>::~TCFRetained(v27);
  TCFString::~TCFString(&a10);
  TCFString::~TCFString(&a12);
  TFontNameString::~TFontNameString((TFontNameString *)&a13);
  TCFString::~TCFString(&a26);
  TFontNameString::~TFontNameString((TFontNameString *)&a27);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B532A558);
}

void TComponentsJoinedByString::Append(CFStringRef *this, CFStringRef appendedString)
{
  long long v4 = (__CFString *)*this;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    long long v4 = (__CFString *)*this;
    if (Length)
    {
      CFStringAppend(v4, this[1]);
      long long v4 = (__CFString *)*this;
    }
  }
  CFStringAppend(v4, appendedString);
}

void TComponentsJoinedByString::Append(const __CFString **this, const __CFString *a2, double a3)
{
  CFStringRef v6 = *this;
  if (v6 && CFStringGetLength(v6)) {
    CFStringAppend((CFMutableStringRef)*this, this[1]);
  }
  TCFMutableString::AppendFormat((CFMutableStringRef *)this, a2, a2, this[1], *(void *)&a3);
}

__CFArray *TFPFont::CopyAllNames(TFPFont *this)
{
  long long v86 = 0uLL;
  uint64_t v87 = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(**((void **)this + 2) + 104))(theDict);
  std::vector<TFontNameString>::__vdeallocate((void **)&v86);
  long long v86 = *(_OWORD *)theDict;
  uint64_t v87 = v79;
  theDict[1] = 0;
  *(void *)&long long v79 = 0;
  theDict[0] = 0;
  long long v88 = theDict;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)&v88);
  long long v2 = v86;
  Mutable = (__CFArray *)0xAAAAAAAAAAAAAAAALL;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    goto LABEL_140;
  }
  uint64_t v3 = *((void *)this + 42);
  long long v73 = this;
  if (!v3 || (uint64_t v4 = *((void *)this + 41), v4 < 0))
  {
    uint64_t v9 = *((void *)this + 35);
    if (!v9)
    {
      int v70 = 0;
      int v74 = 0;
      int v72 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      goto LABEL_20;
    }
    uint64_t v7 = *((void *)this + 32);
    if (v7)
    {
      uint64_t v8 = (const __CFString **)*((void *)this + 33);
      char v10 = (double *)(v9 + 8);
      uint64_t v11 = 4;
      uint64_t v12 = *((void *)this + 32);
      while (1)
      {
        double v13 = *(double *)&v8[v11];
        double v14 = vabdd_f64(*v10, v13);
        if (v14 >= 0.0001)
        {
          double v15 = fabs(*v10);
          double v16 = fabs(v13);
          if (v15 < v16) {
            double v15 = v16;
          }
          if (v14 / v15 >= 0.0001) {
            break;
          }
        }
        v11 += 5;
        v10 += 2;
        if (!--v12) {
          goto LABEL_15;
        }
      }
      int v74 = -1;
      int v70 = 1;
      goto LABEL_19;
    }
    int v70 = 0;
    int v74 = 0;
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)(v3 + 344);
  uint64_t v5 = *(void *)(v3 + 352);
  if (v6 == v5 || v4 >= (v5 - v6) >> 3)
  {
LABEL_15:
    int v70 = 0;
    int v74 = 0;
    uint64_t v7 = 0;
LABEL_18:
    uint64_t v8 = 0;
    goto LABEL_19;
  }
  int v70 = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  int v74 = *(unsigned __int16 *)(v6 + 8 * v4 + 2);
LABEL_19:
  int v72 = 1;
LABEL_20:
  unsigned int v68 = v8;
  uint64_t v69 = v7;
  unint64_t v17 = (*((void *)&v2 + 1) - (void)v2) / 96;
  if (*((void *)&v2 + 1) != (void)v2)
  {
    uint64_t v18 = 0;
    int v71 = 0;
    char v19 = 0;
    unint64_t v20 = 1;
    while (1)
    {
      uint64_t v21 = v86;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v86 + 1) - v86) >> 5) <= v20 - 1) {
        goto LABEL_132;
      }
      uint64_t v22 = v86 + v18;
      if (*(_WORD *)(v86 + v18 + 66) == 6)
      {
        if (v19)
        {
          char v23 = 0;
          char v19 = 1;
        }
        else
        {
          char v31 = (const char *)*((void *)v73 + 17);
          theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
          size_t v32 = strlen(v31);
          if (v31 && v32)
          {
            CFDictionaryRef v33 = (const __CFDictionary *)CFStringCreateWithBytes(alloc, (const UInt8 *)v31, v32, 0x600u, 0);
            theDict[0] = v33;
            if (v33)
            {
              long long v88 = (CFDictionaryRef *)0xAAAAAAAAAAAAAAAALL;
              unint64_t v34 = (__CFString *)CopyFontNameLocaleIdentifier((CFTypeRef *)(v21 + v18));
              TNameEntry::TNameEntry((TNameEntry *)&v88, 6, (const __CFString *)v33, v34);
              if (v88 && CFDictionaryGetCount((CFDictionaryRef)v88) >= 1)
              {
                if (v88)
                {
                  if (CFDictionaryGetCount((CFDictionaryRef)v88)) {
                    CFAllocatorRef v35 = (void **)v88;
                  }
                  else {
                    CFAllocatorRef v35 = 0;
                  }
                }
                else
                {
                  CFAllocatorRef v35 = 0;
                }
                CFArrayAppendValue(Mutable, v35);
              }
              TCFDictionary::~TCFDictionary((const void **)&v88);
              char v19 = 1;
            }
            else
            {
              char v19 = 0;
            }
          }
          else
          {
            char v19 = 0;
            theDict[0] = 0;
          }
          TCFString::~TCFString((const void **)theDict);
          char v23 = 0;
        }
        goto LABEL_97;
      }
      unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
      CFStringRef v24 = CopyFontNameString((const TFontNameString *)(v86 + v18), 0xFFFFFFFF);
      unint64_t v84 = (unint64_t)v24;
      if (v24)
      {
        int v25 = *(unsigned __int16 *)(v22 + 66);
        BOOL v26 = v25 == 2;
        if (!v72 || (v25 != 4 ? (BOOL v27 = v25 == 2) : (BOOL v27 = 1), !v27))
        {
          theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
          unint64_t v84 = 0;
          theDict[0] = CFDictionaryCreateMutable(alloc, 6, 0, MEMORY[0x1E4F1D540]);
          if (!theDict[0]) {
            goto LABEL_60;
          }
          long long v36 = (const void *)kFPNameKeyKind;
          uint64_t v37 = (const void *)[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v22 + 66)];
          CFDictionaryAddValue(theDict[0], v36, v37);
          CFDictionaryAddValue(theDict[0], (const void *)kFPNameKeyString, v24);
          CFRelease(v24);
          CFStringRef v38 = (const void *)kFPNameKeyPlatform;
          CFStringRef v39 = (const void *)[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v21 + v18 + 68)];
          CFDictionaryAddValue(theDict[0], v38, v39);
          uint64_t v40 = (const void *)kFPNameKeyScript;
          uint64_t v41 = (const void *)[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v21 + v18 + 70)];
          CFDictionaryAddValue(theDict[0], v40, v41);
          long long v42 = (const void *)kFPNameKeyLanguage;
          long long v43 = (const void *)[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v21 + v18 + 72)];
          CFDictionaryAddValue(theDict[0], v42, v43);
          CFLocaleIdentifier v44 = CopyFontNameLocaleIdentifier((CFTypeRef *)(v21 + v18));
          if (v44)
          {
            CFDictionaryAddValue(theDict[0], (const void *)kFPNameKeyLocaleIdentifier, v44);
            CFRelease(v44);
          }
          if (theDict[0] && CFDictionaryGetCount(theDict[0]) >= 1)
          {
            BOOL v45 = v25 == 2;
            if (theDict[0])
            {
              if (CFDictionaryGetCount(theDict[0])) {
                CFDictionaryRef v46 = theDict[0];
              }
              else {
                CFDictionaryRef v46 = 0;
              }
            }
            else
            {
              CFDictionaryRef v46 = 0;
            }
            CFArrayAppendValue(Mutable, v46);
            char v23 = 0;
            v71 |= v45;
          }
          else
          {
LABEL_60:
            char v23 = 1;
          }
          TCFDictionary::~TCFDictionary((const void **)theDict);
          goto LABEL_96;
        }
        if (v25 == 2) {
          CFStringRef v24 = 0;
        }
        if (v70)
        {
          theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
          uint64_t v28 = *((void *)v73 + 35);
          long long v29 = (__CFString *)CopyFontNameLocaleIdentifier((CFTypeRef *)(v21 + v18));
          TNameEntry::TNameEntry(theDict, v24, v69, v68, v28, v29);
          if (theDict[0] && CFDictionaryGetCount(theDict[0]) >= 1)
          {
            if (theDict[0])
            {
              if (CFDictionaryGetCount(theDict[0])) {
                CFDictionaryRef v30 = theDict[0];
              }
              else {
                CFDictionaryRef v30 = 0;
              }
            }
            else
            {
              CFDictionaryRef v30 = 0;
            }
            CFArrayAppendValue(Mutable, v30);
            int v71 = v25 == 2;
          }
          TCFDictionary::~TCFDictionary((const void **)theDict);
        }
        else
        {
          *(void *)&long long v47 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v47 + 1) = 0xAAAAAAAAAAAAAAAALL;
          long long v82 = v47;
          long long v83 = v47;
          long long v80 = v47;
          long long v81 = v47;
          *(_OWORD *)CFDictionaryRef theDict = v47;
          long long v79 = v47;
          (*(void (**)(CFDictionaryRef *__return_ptr))(**((void **)v73 + 2) + 88))(theDict);
          unint64_t v77 = 0xAAAAAAAAAAAAAAAALL;
          CFStringRef v48 = CopyFontNameString((const TFontNameString *)theDict, 0xFFFFFFFF);
          unint64_t v77 = (unint64_t)v48;
          if (v48)
          {
            CFDictionaryRef v76 = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
            CFLocaleIdentifier v49 = CopyFontNameLocaleIdentifier((CFTypeRef *)v22);
            CFDictionaryRef v76 = CFDictionaryCreateMutable(alloc, 3, 0, MEMORY[0x1E4F1D540]);
            v90[0] = v49;
            if (v76)
            {
              long long v88 = (CFDictionaryRef *)0xAAAAAAAAAAAAAAAALL;
              unint64_t v89 = 0xAAAAAAAAAAAAAAAALL;
              TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)&v88, v24, v50);
              if (v88)
              {
                TComponentsJoinedByString::Append(v51, v48);
                if (v25 == 2) {
                  uint64_t v52 = 2;
                }
                else {
                  uint64_t v52 = 4;
                }
                TNameEntry::AddItems(&v76, v52, (const __CFString *)v88, (__CFString *)v90[0]);
              }
              TCFRetained<__CFString const*>::~TCFRetained((const void **)&v89);
              TCFString::~TCFString((const void **)&v88);
            }
            TCFString::~TCFString(v90);
            if (v76)
            {
              if (CFDictionaryGetCount(v76) < 1)
              {
                BOOL v26 = v71;
              }
              else
              {
                if (v76)
                {
                  if (CFDictionaryGetCount(v76)) {
                    CFDictionaryRef v53 = v76;
                  }
                  else {
                    CFDictionaryRef v53 = 0;
                  }
                }
                else
                {
                  CFDictionaryRef v53 = 0;
                }
                CFArrayAppendValue(Mutable, v53);
              }
            }
            else
            {
              BOOL v26 = v71;
            }
            TCFDictionary::~TCFDictionary((const void **)&v76);
            int v71 = v26;
          }
          TCFString::~TCFString((const void **)&v77);
          TFontNameString::~TFontNameString((TFontNameString *)theDict);
        }
      }
      char v23 = 0;
LABEL_96:
      TCFString::~TCFString((const void **)&v84);
LABEL_97:
      if (v20 < v17)
      {
        v18 += 96;
        ++v20;
        if ((v23 & 1) == 0) {
          continue;
        }
      }
      goto LABEL_101;
    }
  }
  char v23 = 0;
  LOBYTE(v71) = 0;
LABEL_101:
  if ((v23 & 1) == 0 && (v71 & 1) == 0)
  {
    if (v74 < 1)
    {
      if (v70)
      {
        *(void *)&long long v61 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v82 = v61;
        long long v83 = v61;
        long long v80 = v61;
        long long v81 = v61;
        *(_OWORD *)CFDictionaryRef theDict = v61;
        long long v79 = v61;
        (*(void (**)(CFDictionaryRef *__return_ptr))(**((void **)v73 + 2) + 88))(theDict);
        CFStringRef v62 = CopyFontNameString((const TFontNameString *)theDict, 0xFFFFFFFF);
        long long v88 = (CFDictionaryRef *)v62;
        if (!v62)
        {
LABEL_136:
          TCFString::~TCFString((const void **)&v88);
          TFontNameString::~TFontNameString((TFontNameString *)theDict);
          goto LABEL_137;
        }
        v90[0] = (const void *)0xAAAAAAAAAAAAAAAALL;
        uint64_t v63 = *((void *)v73 + 35);
        int v64 = (__CFString *)CopyFontNameLocaleIdentifier((CFTypeRef *)theDict);
        TNameEntry::TNameEntry((CFMutableDictionaryRef *)v90, v62, v69, v68, v63, v64);
        if (!v90[0] || CFDictionaryGetCount((CFDictionaryRef)v90[0]) < 1)
        {
LABEL_135:
          TCFDictionary::~TCFDictionary(v90);
          goto LABEL_136;
        }
        if (v90[0])
        {
          if (CFDictionaryGetCount((CFDictionaryRef)v90[0])) {
            unint64_t v65 = v90[0];
          }
          else {
            unint64_t v65 = 0;
          }
          goto LABEL_134;
        }
LABEL_133:
        unint64_t v65 = 0;
LABEL_134:
        CFArrayAppendValue(Mutable, v65);
        goto LABEL_135;
      }
    }
    else if (*((void *)&v2 + 1) != (void)v2)
    {
      uint64_t v54 = 0;
      unint64_t v55 = 0;
      if (v17 <= 1) {
        uint64_t v56 = 1;
      }
      else {
        uint64_t v56 = (*((void *)&v2 + 1) - (void)v2) / 96;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v86 + 1) - v86) >> 5) > v55)
      {
        uint64_t v57 = (const TFontNameString *)(v86 + v54);
        if (v74 == *(unsigned __int16 *)(v86 + v54 + 66))
        {
          theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
          CFDictionaryRef v58 = (const __CFDictionary *)CopyFontNameString(v57, 0xFFFFFFFF);
          theDict[0] = v58;
          if (v58)
          {
            long long v88 = (CFDictionaryRef *)0xAAAAAAAAAAAAAAAALL;
            unint64_t v59 = (__CFString *)CopyFontNameLocaleIdentifier((CFTypeRef *)v57);
            TNameEntry::TNameEntry((TNameEntry *)&v88, 2, (const __CFString *)v58, v59);
            if (v88 && CFDictionaryGetCount((CFDictionaryRef)v88) >= 1)
            {
              if (v88)
              {
                if (CFDictionaryGetCount((CFDictionaryRef)v88)) {
                  uint8x8_t v60 = (void **)v88;
                }
                else {
                  uint8x8_t v60 = 0;
                }
              }
              else
              {
                uint8x8_t v60 = 0;
              }
              CFArrayAppendValue(Mutable, v60);
            }
            TCFDictionary::~TCFDictionary((const void **)&v88);
          }
          TCFString::~TCFString((const void **)theDict);
        }
        ++v55;
        v54 += 96;
        if (v56 == v55) {
          goto LABEL_137;
        }
      }
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
  }
LABEL_137:
  if (!Mutable || !CFArrayGetCount(Mutable))
  {
LABEL_140:
    size_t v66 = 0;
    goto LABEL_141;
  }
  size_t v66 = Mutable;
  Mutable = 0;
LABEL_141:
  TCFArray<void const*>::~TCFArray((const void **)&Mutable);
  theDict[0] = (CFDictionaryRef)&v86;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)theDict);
  return v66;
}

void sub_1B532B1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23)
{
  TCFString::~TCFString((const void **)(v23 - 160));
  TCFArray<void const*>::~TCFArray((const void **)(v23 - 152));
  a23 = (void **)(v23 - 144);
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&a23);
  _Unwind_Resume(a1);
}

CFLocaleIdentifier CopyFontNameLocaleIdentifier(CFTypeRef *a1)
{
  if (a1[11]) {
    return (CFLocaleIdentifier)CFRetain(a1[11]);
  }
  int v2 = *((unsigned __int16 *)a1 + 34);
  uint32_t v3 = *((unsigned __int16 *)a1 + 36);
  if (v2 == 3) {
    return CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3);
  }
  if (v2 == 1) {
    return CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v3, -128);
  }
  return 0;
}

CFMutableDictionaryRef *TNameEntry::TNameEntry(CFMutableDictionaryRef *a1, const __CFString *a2, uint64_t a3, const __CFString **a4, uint64_t a5, __CFString *a6)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, 0, MEMORY[0x1E4F1D540]);
  *a1 = Mutable;
  char v19 = a6;
  if (Mutable)
  {
    unint64_t v17 = (__CFString *)0xAAAAAAAAAAAAAAAALL;
    unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
    TComponentsJoinedByString::TComponentsJoinedByString((TComponentsJoinedByString *)&v17, a2, v13);
    double v14 = v17;
    if (v17)
    {
      if (a3 >= 1)
      {
        double v15 = (double *)(a5 + 8);
        do
        {
          TComponentsJoinedByString::Append((const __CFString **)&v17, *a4, *v15);
          v15 += 2;
          a4 += 5;
          --a3;
        }
        while (a3);
        double v14 = v17;
      }
      TNameEntry::AddItems(a1, 2, v14, v19);
    }
    TCFRetained<__CFString const*>::~TCFRetained((const void **)&v18);
    TCFString::~TCFString((const void **)&v17);
  }
  TCFString::~TCFString((const void **)&v19);
  return a1;
}

void sub_1B532B45C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  TCFRetained<__CFString const*>::~TCFRetained(v3);
  TCFString::~TCFString((const void **)va);
  TCFString::~TCFString((const void **)va1);
  TCFDictionary::~TCFDictionary(v2);
  _Unwind_Resume(a1);
}

void TNameEntry::TNameEntry(TNameEntry *this, uint64_t a2, const __CFString *a3, __CFString *a4)
{
  *(void *)this = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 3, 0, MEMORY[0x1E4F1D540]);
  uint64_t v8 = a4;
  TNameEntry::AddItems((CFMutableDictionaryRef *)this, a2, a3, a4);
  TCFString::~TCFString(&v8);
}

void sub_1B532B518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TCFString::~TCFString((const void **)va);
  TCFDictionary::~TCFDictionary(v2);
  _Unwind_Resume(a1);
}

CFMutableDictionaryRef TFPFont::CopyNames(TFPFont *this)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (theDict)
  {
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    (*(void (**)(long long *__return_ptr))(**((void **)this + 2) + 112))(&v12);
    std::vector<TFontNameString>::__vdeallocate((void **)&v14);
    long long v14 = v12;
    uint64_t v15 = v13;
    uint64_t v13 = 0;
    long long v12 = 0uLL;
    p_isa = (void **)&v12;
    std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&p_isa);
    uint64_t v4 = (const TFontNameString *)*((void *)&v14 + 1);
    for (unint64_t i = (const TFontNameString *)v14; i != v4; unint64_t i = (const TFontNameString *)((char *)i + 96))
    {
      p_isa = (void **)0xAAAAAAAAAAAAAAAALL;
      uint64_t v5 = kFPFontFamilyName;
      switch(*((_WORD *)i + 33))
      {
        case 0:
          uint64_t v5 = kFPFontCopyrightName;
          goto LABEL_10;
        case 1:
          goto LABEL_10;
        case 2:
          uint64_t v6 = kFPFontStyleName[0];
          CFStringRef v7 = TFPFont::CopyFontName(this, 2);
          goto LABEL_12;
        case 3:
          uint64_t v5 = kFPFontUniqueName;
          goto LABEL_10;
        case 4:
          uint64_t v6 = kFPFontFullName[0];
          CFStringRef v7 = TFPFont::CopyFontName(this, 4);
          goto LABEL_12;
        case 5:
          uint64_t v5 = kFPFontVersionName;
          goto LABEL_10;
        case 6:
          uint64_t v6 = (__CFString *)kFPFontPostscriptName;
          size_t v9 = strlen(*((const char **)this + 17));
          CFStringRef v8 = CFStringCreateWithBytes(v2, *((const UInt8 **)this + 17), v9, 0x600u, 0);
          *(void *)&long long v12 = 0;
          TCFString::~TCFString((const void **)&v12);
          goto LABEL_13;
        case 7:
          uint64_t v5 = &kFPFontTrademarkName;
LABEL_10:
          uint64_t v6 = *v5;
          break;
        default:
          uint64_t v6 = 0;
          break;
      }
      CFStringRef v7 = CopyFontNameString(i, 0xFFFFFFFF);
LABEL_12:
      CFStringRef v8 = v7;
LABEL_13:
      p_isa = &v8->isa;
      if (v6 && v8) {
        CFDictionaryAddValue(theDict, v6, v8);
      }
      TCFString::~TCFString((const void **)&p_isa);
    }
    *(void *)&long long v12 = &v14;
    std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)&v12);
    CFMutableDictionaryRef v10 = theDict;
  }
  else
  {
    CFMutableDictionaryRef v10 = 0;
  }
  CFMutableDictionaryRef theDict = 0;
  TCFDictionary::~TCFDictionary((const void **)&theDict);
  return v10;
}

void sub_1B532B77C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  a9 = (void **)&a13;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&a9);
  JUMPOUT(0x1B532B750);
}

void sub_1B532B79C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, const void *a17)
{
  a9 = (void **)&a13;
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100](&a9);
  TCFDictionary::~TCFDictionary(&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B532B758);
}

uint64_t TFPFont::GetLongGlyphsForCharacters(TFPFont *this, const unsigned __int16 *a2, unsigned int *a3, unint64_t a4, uint64_t a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a4 >= 0xFFFFFFFF) {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v5 = a4;
  }
  unsigned int v18 = v5;
  if (!v5) {
    return 0;
  }
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (v11)
  {
    return (*(unsigned int (**)(uint64_t, const unsigned __int16 *, unsigned int *, uint64_t, uint64_t))(*(void *)v11 + 488))(v11, a2, a3, v5, a5);
  }
  else
  {
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v20[4] = v13;
    v20[5] = v13;
    v20[2] = v13;
    v20[3] = v13;
    v20[0] = v13;
    v20[1] = v13;
    LOWORD(v19) = 0;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::vector(v20, a4, &v19);
    (*(void (**)(void, const unsigned __int16 *, void, unsigned int *, uint64_t))(**((void **)this + 2)
                                                                                              + 120))(*((void *)this + 2), a2, *(void *)&v20[0], &v18, a5);
    uint64_t v15 = (unsigned __int16 *)*((void *)&v20[0] + 1);
    for (unint64_t i = *(unsigned __int16 **)&v20[0]; i != v15; ++i)
    {
      unsigned int v16 = *i;
      *a3++ = v16;
    }
    unsigned int v12 = v18;
    char v19 = (void **)v20;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](&v19);
  }
  return v12;
}

BOOL TFPFont::IsSFNT(TFPFont *this)
{
  int v1 = (*(uint64_t (**)(void))(**((void **)this + 2) + 40))(*((void *)this + 2));
  return v1 == 33 || (v1 - 2) < 0x14;
}

uint64_t TFPFont::HasNonDefaultVariationValue(TFPFont *this, int a2, double *a3)
{
  uint64_t v3 = *((void *)this + 35);
  uint64_t v4 = *((void *)this + 32);
  if (v4)
  {
    uint64_t v5 = 16 * v4;
    for (uint64_t i = *((void *)this + 35); *(_DWORD *)i != a2; i += 16)
    {
      v5 -= 16;
      if (!v5) {
        return 0;
      }
    }
  }
  else
  {
    uint64_t i = *((void *)this + 35);
  }
  if (i == v3 + 16 * v4) {
    return 0;
  }
  double v7 = *(double *)(i + 8);
  if (v7 == *(double *)(*((void *)this + 33) + 40 * ((i - v3) >> 4) + 32)) {
    return 0;
  }
  *a3 = v7;
  return 1;
}

uint64_t TMVARTable::ValueForTag(TMVARTable *this, int a2)
{
  uint64_t DeltaSetIndexForTag = TMVARTable::GetDeltaSetIndexForTag(this, a2);
  if ((DeltaSetIndexForTag & 0xFF00000000) != 0) {
    return ItemVariationStore::ValueForDeltaSet((TMVARTable *)((char *)this + 88), WORD1(DeltaSetIndexForTag), (unsigned __int16)DeltaSetIndexForTag, *((void *)this + 7), *((const __int16 **)this + 8), 0);
  }
  else {
    return 0;
  }
}

uint64_t TFPFont::GetVMetrics(TFPFont *this, FPFontVMetrics *a2)
{
  uint64_t v4 = (const TFont *)*((void *)this + 2);
  v60[0] = 0;
  int v59 = 0;
  p_var1 = &a2->var1;
  p_var2 = &a2->var2;
  unint64_t Handler = TFPFont::GetHandler(this);
  if (Handler)
  {
    unint64_t v8 = Handler;
    int v9 = (*(uint64_t (**)(unint64_t, FPFontVMetrics *, int *, int *, uint64_t))(*(void *)Handler + 32))(Handler, a2, p_var1, p_var2, 1);
    if (v9) {
      CFMutableDictionaryRef v10 = &v59;
    }
    else {
      CFMutableDictionaryRef v10 = p_var2;
    }
    if (v9) {
      uint64_t v11 = (int *)v60;
    }
    else {
      uint64_t v11 = p_var1;
    }
    if (v9) {
      unsigned int v12 = (FPFontVMetrics *)((char *)v60 + 4);
    }
    else {
      unsigned int v12 = a2;
    }
    int v57 = -1431655766;
    int v58 = -1431655766;
    *(void *)&long long v44 = -1;
    v36[0] = -1;
    *(void *)&v54[0] = -1;
    unint64_t v56 = -1;
    (*(void (**)(unint64_t, long long *, unint64_t *, long long *, unint64_t *, uint64_t))(*(void *)v8 + 24))(v8, &v44, v36, v54, &v56, 1);
    (*(void (**)(const TFont *, FPFontVMetrics *, int *, int *, int *, int *, int *, int *, int *, long long *, unint64_t *, long long *, unint64_t *))(*(void *)v4 + 328))(v4, v12, v11, v10, &a2->var3, &a2->var4, &a2->var5, &v58, &v57, &v44, v36, v54, &v56);
    int v13 = v57;
    a2->var6 = (double)v58;
    a2->var7 = (double)v13;
    CGFloat v14 = *(double *)v36;
    CGFloat v15 = *(double *)v54;
    CGFloat v16 = *(double *)&v56;
    *(void *)&a2->var8.origin.x = v44;
    a2->var8.origin.y = v14;
    a2->var8.size.width = v15;
    a2->var8.size.height = v16;
  }
  else
  {
    uint64_t v17 = *((void *)this + 32);
    uint64_t v18 = *((void *)this + 35);
    *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v55[12] = v19;
    v54[1] = v19;
    *(_OWORD *)unint64_t v55 = v19;
    v54[0] = v19;
    TStrikeTransform::TStrikeTransform((TStrikeTransform *)v54, v4, 0, 8);
    *(void *)&long long v20 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v52 = v20;
    long long v53 = v20;
    long long v50 = v20;
    long long v51 = v20;
    long long v48 = v20;
    long long v49 = v20;
    long long v46 = v20;
    long long v47 = v20;
    long long v44 = v20;
    long long v45 = v20;
    TScalerStrike::TScalerStrike((uint64_t)&v44, (uint64_t)v4, v17, v18, v54);
    unint64_t v56 = 0xAAAAAAAAAAAAAAAALL;
    TFontScaler::CreateFontScaler((uint64_t)&v44, 0, &v56);
    unint64_t v21 = v56;
    if (!v56)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DD4440;
      exception[2] = 1;
    }
    uint64_t v43 = 0;
    CGPoint v41 = (CGPoint)0;
    CGSize v42 = (CGSize)0;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    memset(v36, 0, sizeof(v36));
    (*(void (**)(unint64_t, unint64_t *))(*(void *)v56 + 16))(v56, v36);
    *(void *)&a2->var0 = *(unint64_t *)((char *)&v36[1] + 4);
    *(void *)&a2->var4 = *((void *)&v37 + 1);
    CGPoint v22 = v41;
    *(_OWORD *)&a2->var6 = v40;
    int v23 = v37;
    a2->var2 = HIDWORD(v36[2]);
    a2->var3 = v23;
    a2->var8.origin = v22;
    a2->var8.size = v42;
    (*(void (**)(unint64_t))(*(void *)v21 + 8))(v21);
    TScalerStrike::~TScalerStrike((TScalerStrike *)&v44);
  }
  if (*((void *)this + 42))
  {
    uint64_t v24 = (*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
    if (v24)
    {
      int v25 = (const TSFNTFont *)v24;
      v36[0] = 0;
      BOOL v26 = (const __int16 *)(*(uint64_t (**)(TFPFont *, unint64_t *))(*(void *)this + 232))(this, v36);
      *(void *)&long long v52 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v27 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v27 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v50 = v27;
      long long v51 = v27;
      long long v48 = v27;
      long long v49 = v27;
      long long v46 = v27;
      long long v47 = v27;
      long long v44 = v27;
      long long v45 = v27;
      TMVARTable::TMVARTable((TMVARTable *)&v44, v25, v36[0], v26);
      if (TsfntTable::operator BOOL((TsfntTable *)&v44))
      {
        uint64_t v28 = TMVARTable::ValueForTag((TMVARTable *)&v44, 1986098019);
        if (v29) {
          a2->var0 = (int)(round(*(double *)&v28) + (double)a2->var0);
        }
        uint64_t v30 = TMVARTable::ValueForTag((TMVARTable *)&v44, 1986294627);
        if (v31) {
          int *p_var1 = (int)(round(*(double *)&v30) + (double)*p_var1);
        }
        uint64_t v32 = TMVARTable::ValueForTag((TMVARTable *)&v44, 1986815856);
        if (v33) {
          int *p_var2 = (int)(round(*(double *)&v32) + (double)*p_var2);
        }
      }
      TDataReference::~TDataReference((TDataReference *)&v44);
    }
  }
  return 1;
}

void sub_1B532BF80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

uint64_t TFPFont::GetAverageGlyphHeight(TFPFont *this, unsigned int *a2)
{
  int v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  do
  {
    char v7 = v5;
    v9.origin.x = (*(double (**)(TFPFont *, void))(*(void *)this + 568))(this, a2[v6]);
    v4 += (int)CGRectGetMaxY(v9);
    char v5 = 1;
    uint64_t v6 = 1;
  }
  while ((v7 & 1) == 0);
  return (v4 >> 1);
}

unint64_t TFPFont::GetCharactersWithGlyphNameForGlyph(TFPFont *this, unsigned int a2, unsigned __int16 *a3, unint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v51 = v6;
  long long v52 = v6;
  *(_OWORD *)__big = v6;
  *(_OWORD *)__len = v6;
  (*(void (**)(char **__return_ptr))(*(void *)this + 336))(__big);
  char v7 = __big[1];
  if (!__big[1])
  {
    if (!*((void *)&v51 + 1)) {
      goto LABEL_68;
    }
    uint64_t v47 = *(void *)(*((void *)&v51 + 1) + 8);
    if (!v47) {
      goto LABEL_68;
    }
    char v7 = (const char *)(v47 + v52);
  }
  size_t v8 = __len[0];
  CGRect v9 = strnstr(v7, ".", __len[0]);
  if (v9) {
    size_t v8 = v9 - v7;
  }
  if (v8)
  {
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v56 = v10;
    long long v57 = v10;
    *(_OWORD *)__dst = v10;
    long long v55 = v10;
    LOBYTE(v53[0]) = 0;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::vector((uint64_t)__dst, v8 + 1, v53);
    uint64_t v11 = __dst[0];
    strncpy(__dst[0], v7, v8);
    if (!v11)
    {
      unint64_t v22 = 0;
      goto LABEL_72;
    }
    unint64_t v12 = 0;
    while (1)
    {
      int v13 = strchr(v11, 95);
      CGFloat v14 = v13;
      if (v13) {
        *int v13 = 0;
      }
      *(_OWORD *)long long v53 = xmmword_1B5400BA0;
      if (GetLatinEncodingTaxonomy(void)::once != -1) {
        dispatch_once(&GetLatinEncodingTaxonomy(void)::once, &__block_literal_global_4634);
      }
      uint64_t Unicodes = TGlyphNameToUnicodeTaxisLookup::GetUnicodes((const char ***)GetLatinEncodingTaxonomy(void)::gGlyphNameToUnicodeDict, v11, (unsigned int (*)[4])v53);
      if (!Unicodes)
      {
        size_t v23 = strlen(v11);
        if (v23 < 7)
        {
LABEL_44:
          if (v23 >= 5) {
            goto LABEL_45;
          }
        }
        else
        {
          int v24 = strncmp(v11, "uni", 3uLL);
          if (v23 <= 0x7F && !v24)
          {
            int v25 = v11 + 3;
            unint64_t v26 = v23 - 3;
            size_t v27 = v23 - 3;
            uint64_t v28 = (unsigned __int8 *)(v11 + 3);
            do
            {
              int v29 = *v28;
              unsigned int v30 = v29 - 48;
              unsigned int v31 = v29 - 65;
              if (v30 >= 0xA && v31 >= 6) {
                goto LABEL_44;
              }
              ++v28;
              --v27;
            }
            while (v27);
            if (a4 > v12)
            {
              while (1)
              {
                uint64_t v33 = 0;
                int v34 = 0;
                do
                {
                  uint64_t v35 = v33;
                  if (v26 == v33) {
                    goto LABEL_39;
                  }
                  int v36 = v25[v33];
                  int v37 = 16 * v34 + (char)v36 - 55;
                  int v34 = v36 + 16 * v34 - 48;
                  if ((v36 - 48) > 9) {
                    int v34 = v37;
                  }
                  uint64_t v33 = v35 + 1;
                }
                while (v35 != 3);
                ++v25;
LABEL_39:
                if ((unsigned __int16)((unsigned __int16)v34 >> 11) >= 0x1Bu
                  && (unsigned __int16)v34 - 57344 >= 0x102000)
                {
                  break;
                }
                v26 += ~v35;
                unint64_t v22 = v12 + 1;
                a3[v12] = v34;
                if (v26 >= 4)
                {
                  v25 += 3;
                  ++v12;
                  if (v22 < a4) {
                    continue;
                  }
                }
                goto LABEL_62;
              }
            }
LABEL_55:
            unint64_t v22 = v12;
LABEL_62:
            unint64_t v12 = v22;
            goto LABEL_63;
          }
LABEL_45:
          if (v23 <= 7 && *v11 == 117)
          {
            size_t v38 = v23 - 1;
            long long v39 = (unsigned __int8 *)(v11 + 1);
            do
            {
              int v40 = *v39;
              unsigned int v41 = v40 - 48;
              unsigned int v42 = v40 - 65;
              if (v41 >= 0xA && v42 >= 6) {
                goto LABEL_71;
              }
              ++v39;
              --v38;
            }
            while (v38);
            unsigned int v44 = strtoul_l(v11 + 1, 0, 16, 0);
            if (v44 >> 11 >= 0x1B && v44 - 57344 >= 0x102000) {
              goto LABEL_55;
            }
            if (!HIWORD(v44))
            {
              uint64_t v45 = 1;
              unint64_t v46 = v12;
              goto LABEL_60;
            }
            unint64_t v46 = v12 + 1;
            if (v12 + 1 < a4 - v12)
            {
              a3[v12] = (v44 >> 10) - 10304;
              uint64_t v45 = 2;
              LOWORD(v44) = v44 & 0x3FF | 0xDC00;
LABEL_60:
              v12 += v45;
              a3[v46] = v44;
            }
            unint64_t v22 = v12;
            if (v12 != a4) {
              goto LABEL_62;
            }
            unint64_t v12 = a4;
          }
        }
LABEL_71:
        unint64_t v22 = v12;
        goto LABEL_72;
      }
      uint64_t v16 = 0;
      unint64_t v17 = a4 - v12;
      while (1)
      {
        unsigned int v18 = v53[v16];
        if (HIWORD(v18)) {
          break;
        }
        uint64_t v19 = 1;
        unint64_t v20 = v12;
LABEL_20:
        v12 += v19;
        a3[v20] = v18;
        if (Unicodes == ++v16) {
          goto LABEL_21;
        }
      }
      unint64_t v20 = v12 + 1;
      if (HIWORD(v18) <= 0x10u && v20 < v17) {
        break;
      }
LABEL_21:
      unint64_t v22 = v12;
      if (v12 == a4)
      {
        unint64_t v22 = a4;
        goto LABEL_72;
      }
LABEL_63:
      uint64_t v11 = v14 + 1;
      if (!v14)
      {
LABEL_72:
        *(void *)long long v53 = __dst;
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v53);
        goto LABEL_73;
      }
    }
    a3[v12] = (v18 >> 10) - 10304;
    uint64_t v19 = 2;
    LOWORD(v18) = v18 & 0x3FF | 0xDC00;
    goto LABEL_20;
  }
LABEL_68:
  unint64_t v22 = 0;
LABEL_73:
  TStringRef::~TStringRef((void **)__big);
  return v22;
}

void sub_1B532C4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19, uint64_t a20,char a21)
{
  a19 = (void **)&a21;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](&a19);
  TStringRef::~TStringRef(&a11);
  _Unwind_Resume(a1);
}

uint64_t FPFontGetVersion()
{
  return 50331648;
}

uint64_t FPFontCreateWithDataAndExtra(const __CFData *a1)
{
  if (a1)
  {
    memset(v5, 170, sizeof(v5));
    BytePtr = (unsigned __int8 *)CFDataGetBytePtr(a1);
    CFIndex Length = CFDataGetLength(a1);
    TFont::CreateFontEntitiesForDataStream(BytePtr, Length, v5);
    if (v5[0] != v5[1]) {
      operator new();
    }
    if (v5[0])
    {
      v5[1] = v5[0];
      operator delete(v5[0]);
    }
  }
  return 0;
}

void sub_1B532C678(void *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10F1C40DAECAF6FLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B532C5C4);
}

void sub_1B532C6B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B532C65CLL);
}

uint64_t FPFontCreateWithData(const __CFData *a1)
{
  return FPFontCreateWithDataAndExtra(a1);
}

__darwin_time_t GetContentModificationTime(const char *a1)
{
  memset(&v3, 0, sizeof(v3));
  if (!strncmp(a1, "/System/", 8uLL)) {
    return 0;
  }
  stat(a1, &v3);
  return v3.st_ctimespec.tv_sec;
}

uint64_t AppendVariationFonts(__CFArray *a1, const char *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  CFIndex Count = CFArrayGetCount(a1);
  if (Count < 1)
  {
    char v45 = 0;
    return v45 & 1;
  }
  char v45 = 0;
  range_8 = 0;
  CFIndex v4 = 0;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unsigned int v44 = a2;
  while (1)
  {
    CFIndex range = v4;
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    uint64_t v6 = (uint64_t)ValueAtIndex;
    unint64_t v8 = ValueAtIndex[32];
    uint64_t v7 = ValueAtIndex[33];
    if (v8 && v7 != 0) {
      break;
    }
LABEL_53:
    if (++v4 >= Count) {
      goto LABEL_58;
    }
  }
  long long v57 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  memset(v56, 170, sizeof(v56));
  (*(void (**)(void **__return_ptr))(*(void *)ValueAtIndex[2] + 400))(v56);
  uint64_t v11 = v56[0];
  long long v10 = v56[1];
  if (v56[0] == v56[1])
  {
    CFIndex v4 = range;
    if (!v56[0])
    {
LABEL_51:
      if (v57)
      {
        uint64_t v58 = v57;
        operator delete(v57);
      }
      goto LABEL_53;
    }
LABEL_50:
    v56[1] = v11;
    operator delete(v11);
    goto LABEL_51;
  }
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v54[1] = v12;
  v54[0] = v12;
  unint64_t v55 = 0xAAAAAAAAFFFFFFFFLL;
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(v6 + 16) + 96))(v54);
  if ((unint64_t)a2 != (unsigned __int128)0) {
    goto LABEL_14;
  }
  CFSetCallBacks callBacks = *(CFSetCallBacks *)byte_1F0E00600;
  range_8 = CFSetCreateMutable(allocator, 0, &callBacks);
  if (!range_8)
  {
    std::__hash_table<std::__hash_value_type<unsigned short,TFontNameString>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,TFontNameString>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,TFontNameString>>>::~__hash_table((uint64_t)v54);
    range_8 = 0;
    CFIndex v4 = range;
    uint64_t v11 = v56[0];
    if (!v56[0]) {
      goto LABEL_51;
    }
    goto LABEL_50;
  }
  for (CFIndex i = 0; i != Count; ++i)
  {
    CGFloat v14 = CFArrayGetValueAtIndex(a1, i);
    CFSetAddValue(range_8, v14);
  }
LABEL_14:
  uint64_t v15 = 0;
  CFIndex v16 = (v10 - (unsigned char *)v11) >> 3;
  while (1)
  {
    unint64_t v17 = v7 + v15;
    if (*(_DWORD *)(v7 + v15 + 8) == 1869640570) {
      break;
    }
    v15 += 40;
    if (40 * v8 == v15)
    {
      unint64_t v17 = v7 + 40 * v8;
      break;
    }
  }
  if (v17 == v7 + 40 * v8) {
    unint64_t v18 = 0;
  }
  else {
    unint64_t v18 = v17;
  }
  *(void *)&long long v19 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v64[4] = v19;
  v64[5] = v19;
  v64[2] = v19;
  v64[3] = v19;
  v64[0] = v19;
  v64[1] = v19;
  callBacks.version = 0;
  callBacks.retain = 0;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::vector(v64, v8, &callBacks);
  BOOL v53 = 0;
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  long long v50 = 0;
  long long v51 = 0;
  __p = 0;
  unint64_t v20 = v57;
  int64_t v21 = v58 - (unsigned char *)v57;
  if (v58 != v57)
  {
    if (v21 < 0) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    __p = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TVariationInstance>>((uint64_t)&v51, v21 >> 3);
    long long v51 = &__p[8 * v22];
    memmove(__p, v20, v21);
    long long v50 = &__p[8 * (v21 >> 3)];
  }
  unint64_t v52 = v18;
  *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v62[2] = v23;
  v62[3] = v23;
  v62[0] = v23;
  v62[1] = v23;
  memset(v61, 0, sizeof(v61));
  uint64_t v63 = v62;
  TFPFont::GetVariationPrefix(v6, v61);
  if (v44)
  {
    unint64_t v24 = v8;
    if (v8)
    {
      uint64_t v25 = (uint64_t)(*((void *)&v64[0] + 1) - *(void *)&v64[0]) >> 4;
      unint64_t v26 = v52;
      size_t v27 = (double *)(*(void *)&v64[0] + 8);
      unint64_t v28 = 0;
      int v29 = (int *)(v7 + 8);
      while (v25)
      {
        int v31 = *v29;
        v29 += 10;
        int v30 = v31;
        *((_DWORD *)v27 - 2) = v31;
        if ((v50 - __p) >> 3 <= v28) {
          break;
        }
        double v32 = trunc(*(double *)&__p[8 * v28] * 10000.0) / 10000.0;
        *size_t v27 = v32;
        if (!v53 && v30 == 1869640570 && v26) {
          BOOL v53 = v32 != *(double *)(v26 + 32);
        }
        v27 += 2;
        ++v28;
        --v25;
        if (!--v24) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_34:
      if (((char *)v56[1] - (char *)v56[0]) >> 3) {
        operator new();
      }
    }
  }
  else
  {
    CFArrayCreateMutable(allocator, v16, &TFPFontImpl::GetArrayCallBacks(void)::sCFArrayCallBacks);
    unint64_t v33 = v8;
    if (v8)
    {
      uint64_t v34 = (uint64_t)(*((void *)&v64[0] + 1) - *(void *)&v64[0]) >> 4;
      unint64_t v35 = v52;
      int v36 = (double *)(*(void *)&v64[0] + 8);
      unint64_t v37 = 0;
      size_t v38 = (int *)(v7 + 8);
      while (v34)
      {
        int v40 = *v38;
        v38 += 10;
        int v39 = v40;
        *((_DWORD *)v36 - 2) = v40;
        if ((v50 - __p) >> 3 <= v37) {
          break;
        }
        double v41 = trunc(*(double *)&__p[8 * v37] * 10000.0) / 10000.0;
        double *v36 = v41;
        if (!v53 && v39 == 1869640570 && v35) {
          BOOL v53 = v41 != *(double *)(v35 + 32);
        }
        v36 += 2;
        ++v37;
        --v34;
        if (!--v33) {
          goto LABEL_47;
        }
      }
    }
    else
    {
LABEL_47:
      if (((char *)v56[1] - (char *)v56[0]) >> 3) {
        operator new();
      }
    }
  }
  __break(1u);
  char v45 = 1;
LABEL_58:
  if (range_8) {
    CFRelease(range_8);
  }
  return v45 & 1;
}

const void *FPFontCreateWithPathAndName(const __CFString *a1, const __CFString *a2)
{
  __b[132] = *(char **)MEMORY[0x1E4F143B8];
  if (!a1 || CFStringGetLength(a1) < 1) {
    return 0;
  }
  CFIndex v4 = CFStringGetMaximumSizeOfFileSystemRepresentation(a1) + 1;
  memset(__b, 170, 0x420uLL);
  LOBYTE(v20) = 0;
  std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(__b, v4, &v20);
  char v5 = __b[0];
  if (CFStringGetFileSystemRepresentation(a1, __b[0], v4))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = v6;
    v27[0] = v6;
    int64x2_t v25 = 0uLL;
    uint64_t v26 = 0;
    unint64_t v28 = v27;
    CString = GetCStringPtr<TInlineVector<char,30ul>>(a2, &v25, 0);
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[14] = v8;
    v23[13] = v8;
    void v23[12] = v8;
    v23[11] = v8;
    v23[10] = v8;
    v23[9] = v8;
    v23[8] = v8;
    v23[7] = v8;
    v23[6] = v8;
    v23[5] = v8;
    int v23[4] = v8;
    v23[3] = v8;
    _OWORD v23[2] = v8;
    v23[1] = v8;
    v23[0] = v8;
    unint64_t v20 = 0;
    int64_t v21 = 0;
    uint64_t v22 = 0;
    unint64_t v24 = v23;
    if (CString)
    {
      ContentModificationTime = (const char *)GetContentModificationTime(v5);
      memset(v19, 170, sizeof(v19));
      v30.__darwin_time_t tv_sec = v10;
      v30.uint64_t tv_nsec = 1;
      TFont::CreateFontEntitiesForFile((TFont *)v5, ContentModificationTime, v30, 0, v19);
      if (v19[0] != v19[1]) {
        operator new();
      }
      CFStringRef ValueAtIndex = 0;
      if (v19[0])
      {
        v19[1] = v19[0];
        operator delete(v19[0]);
      }
    }
    else
    {
      CFStringRef ValueAtIndex = 0;
    }
    long long v12 = (void **)v20;
    int v13 = (void **)v21;
    if (v20 != v21)
    {
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        uint64_t v15 = *v12;
        if (!ValueAtIndex)
        {
          if (v15[32]
            && (CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v14, 0, &TFPFontImpl::GetArrayCallBacks(void)::sCFArrayCallBacks),
                (CFArrayRef v17 = Mutable) != 0))
          {
            CFArrayAppendValue(Mutable, v15);
            if (AppendVariationFonts(v17, CString))
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v17, 1);
              (*(void (**)(const void *))(*(void *)ValueAtIndex + 24))(ValueAtIndex);
            }
            else
            {
              CFStringRef ValueAtIndex = 0;
            }
            CFRelease(v17);
          }
          else
          {
            CFStringRef ValueAtIndex = 0;
          }
        }
        FPFontRelease((uint64_t)v15);
        ++v12;
      }
      while (v12 != v13);
    }
    std::vector<std::pair<unsigned int,int>,TInlineBufferAllocator<std::pair<unsigned int,int>,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v20);
    unint64_t v20 = (char **)&v25;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v20);
  }
  else
  {
    CFStringRef ValueAtIndex = 0;
  }
  unint64_t v20 = __b;
  std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v20);
  return ValueAtIndex;
}

void sub_1B532E2C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B532E190);
  }
  _Unwind_Resume(a1);
}

void sub_1B532E324()
{
}

const char *GetCStringPtr<TInlineVector<char,30ul>>(const __CFString *a1, int64x2_t *a2, CFStringEncoding encoding)
{
  uint64_t result = CFStringGetCStringPtr(a1, encoding);
  if (!result)
  {
    CFIndex Length = CFStringGetLength(a1);
    CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, encoding);
    CFIndex v9 = MaximumSizeForEncoding + 1;
    __darwin_time_t v10 = (char *)a2->i64[0];
    unint64_t v11 = a2->i64[1] - a2->i64[0];
    if (MaximumSizeForEncoding + 1 <= v11)
    {
      if (MaximumSizeForEncoding + 1 < v11) {
        a2->i64[1] = (uint64_t)&v10[v9];
      }
    }
    else
    {
      std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(a2, MaximumSizeForEncoding + 1 - v11);
      __darwin_time_t v10 = (char *)a2->i64[0];
    }
    if (CFStringGetCString(a1, v10, v9, encoding)) {
      return v10;
    }
    else {
      return 0;
    }
  }
  return result;
}

CFMutableArrayRef FPFontCreateFontsFromData(const __CFData *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, &TFPFontImpl::GetArrayCallBacks(void)::sCFArrayCallBacks);
  if (a1 && CFDataGetLength(a1) >= 1)
  {
    memset(__p, 170, sizeof(__p));
    BytePtr = (unsigned __int8 *)CFDataGetBytePtr(a1);
    CFIndex Length = CFDataGetLength(a1);
    TFont::CreateFontEntitiesForDataStream(BytePtr, Length, __p);
    if (__p[0] != __p[1]) {
      operator new();
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
  return Mutable;
}

void sub_1B532E5C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

void TFPFont::CreateCopyWithVariation(void **a1, uint64_t a2, unint64_t a3)
{
  v34[1] = *MEMORY[0x1E4F143B8];
  if (!a2 || !a3)
  {
    ((void (*)(void **))(*a1)[3])(a1);
    return;
  }
  unint64_t v29 = 0;
  uint64_t v6 = ((uint64_t (*)(void **, unint64_t *))(*a1)[26])(a1, &v29);
  unint64_t v7 = v29;
  if (v6) {
    BOOL v8 = v29 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8)
  {
    ((void (*)(void **))(*a1)[3])(a1);
    return;
  }
  if (v29 < a3) {
LABEL_43:
  }
    operator new();
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[0] = v9;
  v33[1] = v9;
  __darwin_time_t v10 = (double *)v33;
  int v31 = 0;
  double v32 = 0;
  timespec v30 = 0;
  v34[0] = v33;
  if (v29 >> 61) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  if ((void *)((char *)v33 + 8 * v29) <= v34) {
    v34[0] = (char *)v33 + 8 * v29;
  }
  else {
    __darwin_time_t v10 = (double *)operator new(8 * v29);
  }
  timespec v30 = v10;
  double v32 = &v10[v7];
  bzero(v10, 8 * v7);
  unint64_t v11 = 0;
  int v31 = &v10[v7];
LABEL_16:
  long long v12 = (void *)(a2 + 8);
  unint64_t v13 = a3;
  do
  {
    if (*(_DWORD *)(v6 + 40 * v11 + 8) == *((_DWORD *)v12 - 2))
    {
      if (v7 <= v11) {
        goto LABEL_48;
      }
LABEL_22:
      v10[v11++] = *(double *)v12;
      if (v11 == v7)
      {
        uint64_t v26 = 0;
        size_t v27 = 0;
        uint64_t v28 = 0;
        memset(__p, 170, sizeof(__p));
        (*(void (**)(void **__return_ptr))(*a1[2] + 400))(__p);
        CFAllocatorRef v14 = __p[0];
        if (__p[1] != __p[0])
        {
          uint64_t v15 = 0;
          uint64_t v16 = 0;
          unint64_t v17 = ((char *)__p[1] - (char *)__p[0]) >> 3;
          unint64_t v18 = (double *)v26;
          if (v17 <= 1) {
            unint64_t v17 = 1;
          }
          while (1)
          {
            uint64_t v19 = 0;
            if (v29) {
              break;
            }
LABEL_35:
            if (v19 == v29) {
LABEL_38:
            }
              operator new();
            ++v16;
            v18 += v29;
            v15 += v29;
            if (v16 == v17) {
              goto LABEL_45;
            }
          }
          while (v31 - v30 != v19 && (v27 - (unsigned char *)v26) >> 3 > (unint64_t)(v15 + v19))
          {
            double v20 = v30[v19];
            double v21 = v18[v19];
            double v22 = vabdd_f64(v20, v21);
            if (v22 >= 0.0001)
            {
              double v23 = fabs(v20);
              double v24 = fabs(v21);
              if (v23 < v24) {
                double v23 = v24;
              }
              if (v22 / v23 >= 0.0001) {
                goto LABEL_35;
              }
            }
            if (v29 == ++v19) {
              goto LABEL_38;
            }
          }
          goto LABEL_48;
        }
        CFAllocatorRef v14 = __p[1];
LABEL_45:
        if (v14)
        {
          __p[1] = v14;
          operator delete(v14);
        }
        if (v26)
        {
          size_t v27 = v26;
          operator delete(v26);
        }
        std::vector<double,TInlineBufferAllocator<double,4ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v30);
        goto LABEL_43;
      }
      goto LABEL_16;
    }
    v12 += 2;
    --v13;
  }
  while (v13);
  if (v7 > v11)
  {
    long long v12 = (void *)(v6 + 40 * v11 + 32);
    goto LABEL_22;
  }
LABEL_48:
  __break(1u);
}

void sub_1B532EA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2)
  {
    MEMORY[0x1BA9994D0](v16, 0x10F1C405317EF00);
    if (__p) {
      operator delete(__p);
    }
    if (a12) {
      operator delete(a12);
    }
    std::vector<double,TInlineBufferAllocator<double,4ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&a16);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B532E9C4);
  }
  _Unwind_Resume(exception_object);
}

void TFPFont::CreateVariationFromPostScriptNameSuffix(TFPFont *this, const __CFString *a2)
{
  uint64_t v110 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return;
  }
  unint64_t v100 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v4 = (*(uint64_t (**)(TFPFont *, unint64_t *))(*(void *)this + 208))(this, &v100);
  if (!v4 || v100 == 0) {
    return;
  }
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v108[1] = v6;
  v108[0] = v6;
  uint64_t v107 = 0;
  int64x2_t v106 = 0uLL;
  unint64_t v109 = v108;
  CString = GetCStringPtr<TInlineVector<char,30ul>>(a2, &v106, 0x600u);
  BOOL v8 = CString;
  if (!CString) {
    goto LABEL_173;
  }
  unint64_t v99 = 0xAAAAAAAAAAAAAAAALL;
  CFDataRef v9 = (const __CFData *)(*(uint64_t (**)(TFPFont *, uint64_t))(*(void *)this + 80))(this, 1296914002);
  unint64_t v99 = (unint64_t)v9;
  if (v9)
  {
    size_t v10 = strlen(v8);
    if (v10 > 0x1F) {
      goto LABEL_172;
    }
    int v11 = v10 - 2;
    if (v10 < 2) {
      goto LABEL_172;
    }
    int v12 = *((unsigned __int8 *)v8 + 1);
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)long long v103 = v13;
    long long v104 = v13;
    if (v12 != 46 && (v12 - 48) > 9)
    {
      CFAllocatorRef v14 = 0;
LABEL_150:
      if (v14) {
        operator delete(v14);
      }
      goto LABEL_172;
    }
    CFDataRef theData = v9;
    unint64_t v92 = v100;
    CFAllocatorRef v14 = 0;
    long long v51 = 0;
    CFAllocatorRef allocatora = 0;
    unint64_t v52 = (unsigned __int8 *)(v8 + 2);
    uint64_t v90 = v4;
    while (1)
    {
      uint64_t v53 = 0;
      int v54 = v11;
      do
      {
        *((unsigned char *)v103 + v53) = v12;
        int v12 = v52[v53];
        BOOL v55 = (v12 - 48) <= 9 || v12 == 46;
        int v56 = v53++;
      }
      while (v55 && v54 != v56);
      *((unsigned char *)v103 + v53) = 0;
      LODWORD(valuePtr) = -1;
      sscanf((const char *)v103, "%f", &valuePtr);
      if (v51 >= (char *)allocatora)
      {
        uint64_t v58 = (v51 - v14) >> 2;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62) {
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        }
        if ((allocatora - (CFAllocatorRef)v14) >> 1 > v59) {
          unint64_t v59 = (allocatora - (CFAllocatorRef)v14) >> 1;
        }
        unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
        if ((unint64_t)(allocatora - (CFAllocatorRef)v14) < 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v60 = v59;
        }
        if (v60)
        {
          CFAllocatorRef allocatorb = (CFAllocatorRef)v14;
          if (v60 >> 62) {
            std::__throw_bad_array_new_length[abi:fe180100]();
          }
          unint64_t v61 = v60;
          CFStringRef v62 = (char *)operator new(4 * v60);
          CFAllocatorRef v63 = allocatorb;
          unint64_t v60 = v61;
        }
        else
        {
          CFAllocatorRef v63 = (CFAllocatorRef)v14;
          CFStringRef v62 = 0;
        }
        CFAllocatorRef v14 = &v62[4 * v58];
        *(_DWORD *)CFAllocatorRef v14 = LODWORD(valuePtr);
        int v64 = v14 + 4;
        while (v51 != (char *)v63)
        {
          int v65 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v14 - 1) = v65;
          v14 -= 4;
        }
        CFAllocatorRef allocatora = (CFAllocatorRef)&v62[4 * v60];
        if (v63) {
          operator delete(v63);
        }
        long long v51 = v64;
      }
      else
      {
        *(_DWORD *)long long v51 = LODWORD(valuePtr);
        v51 += 4;
      }
      int v11 = v54 - v53;
      v52 += v53;
      BOOL v67 = (v12 - 58) <= 0xFFFFFFF5 && v12 != 46 || v12 == 32;
      if (v67 && v11 + 1 > 0)
      {
        do
        {
          int v68 = *v52++;
          int v12 = v68;
          BOOL v70 = v11-- != 0;
          BOOL v72 = (v12 - 58) <= 0xFFFFFFF5 && v12 != 46 || v12 == 32;
        }
        while (v72 && v70);
      }
      unint64_t v73 = v51 - v14;
      if ((unint64_t)(v51 - v14) > 0x10) {
        goto LABEL_150;
      }
      if (v11 < 0) {
        break;
      }
      *(void *)&long long v74 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v74 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)long long v103 = v74;
      long long v104 = v74;
      if (v12 != 46 && (v12 - 48) > 9) {
        goto LABEL_150;
      }
    }
    if (v14 != v51)
    {
      unint64_t v75 = v73 >> 2;
      unint64_t v76 = v92;
      if (v73 >> 2 <= v92)
      {
        if ((BytePtr = CFDataGetBytePtr(theData),
              CFIndex Length = CFDataGetLength(theData),
              unint64_t v79 = (unint64_t)&BytePtr[Length],
              unint64_t v80 = (unint64_t)&BytePtr[2 * v73 + 8],
              v80 >= (unint64_t)(BytePtr + 8))
          && v80 <= v79
          || ((unint64_t)(BytePtr + 16) <= v79 ? (unint64_t v81 = (unint64_t)(Length - 8) >> 3) : (unint64_t v81 = 0),
              v81 == v75))
        {
          CFAllocatorRef v82 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          v103[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (v92)
          {
            long long v83 = (unsigned __int16 *)(BytePtr + 14);
            unint64_t v84 = (unsigned int *)(v90 + 8);
            long long v85 = (float *)v14;
            while (v75)
            {
              long long v86 = v14;
              float v87 = *v85;
              unsigned int v88 = *v83;
              *(void *)&double valuePtr = *v84;
              unint64_t v89 = CFNumberCreate(v82, kCFNumberLongType, &valuePtr);
              CFMutableDictionaryRef theDict = v89;
              *(float *)&CFNumberRef v97 = v87 / (float)((int)bswap32(v88) >> 16);
              double valuePtr = COERCE_DOUBLE(CFNumberCreate(v82, kCFNumberFloatType, &v97));
              CFAllocatorRef v14 = v86;
              CFDictionarySetValue(v103[0], v89, *(const void **)&valuePtr);
              TCFNumber::~TCFNumber((const void **)&valuePtr);
              TCFNumber::~TCFNumber((const void **)&theDict);
              ++v85;
              v83 += 4;
              v84 += 10;
              --v75;
              if (!--v76) {
                goto LABEL_167;
              }
            }
            __break(1u);
            return;
          }
LABEL_167:
          v103[0] = 0;
          TCFDictionary::~TCFDictionary((const void **)v103);
        }
      }
      if (!v14) {
        goto LABEL_172;
      }
    }
    operator delete(v14);
    goto LABEL_172;
  }
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(_OWORD *)long long v103 = 0u;
  long long v104 = 0u;
  unint64_t v105 = 0xAAAAAAAA3F800000;
  unint64_t v15 = v100;
  if (v100)
  {
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    for (uint64_t i = 0; i != v15; ++i)
    {
      uint64_t v19 = v4 + 40 * i;
      unint64_t v20 = *(unsigned int *)(v19 + 8);
      uint64_t v21 = *(void *)(v19 + 32);
      if (v17)
      {
        uint8x8_t v22 = (uint8x8_t)vcnt_s8((int8x8_t)v17);
        v22.i16[0] = vaddlv_u8(v22);
        if (v22.u32[0] > 1uLL)
        {
          unint64_t v23 = *(unsigned int *)(v19 + 8);
          if (v17 <= v20) {
            unint64_t v23 = v20 % v17;
          }
        }
        else
        {
          unint64_t v23 = (v17 - 1) & v20;
        }
        double v24 = (uint64_t **)*((void *)v103[0] + v23);
        if (v24)
        {
          for (unint64_t j = *v24; j; unint64_t j = (uint64_t *)*j)
          {
            unint64_t v26 = j[1];
            if (v26 == v20)
            {
              if (*((_DWORD *)j + 4) == v20) {
                goto LABEL_57;
              }
            }
            else
            {
              if (v22.u32[0] > 1uLL)
              {
                if (v26 >= v17) {
                  v26 %= v17;
                }
              }
              else
              {
                v26 &= v17 - 1;
              }
              if (v26 != v23) {
                break;
              }
            }
          }
        }
      }
      else
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
      }
      size_t v27 = operator new(0x20uLL);
      *size_t v27 = 0;
      v27[1] = v20;
      *((_DWORD *)v27 + 4) = v20;
      v27[3] = v21;
      float v28 = (float)(unint64_t)(v16 + 1);
      if (!v17 || (float)(*(float *)&v105 * (float)v17) < v28)
      {
        BOOL v29 = (v17 & (v17 - 1)) != 0;
        if (v17 < 3) {
          BOOL v29 = 1;
        }
        unint64_t v30 = v29 | (2 * v17);
        unint64_t v31 = vcvtps_u32_f32(v28 / *(float *)&v105);
        if (v30 <= v31) {
          size_t v32 = v31;
        }
        else {
          size_t v32 = v30;
        }
        std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>((uint64_t)v103, v32);
        unint64_t v17 = (unint64_t)v103[1];
        if (((unint64_t)v103[1] & ((unint64_t)v103[1] - 1)) != 0)
        {
          if (v103[1] <= (CFMutableDictionaryRef)v20) {
            unint64_t v23 = v20 % (unint64_t)v103[1];
          }
          else {
            unint64_t v23 = v20;
          }
        }
        else
        {
          unint64_t v23 = (LODWORD(v103[1]) - 1) & v20;
        }
      }
      CFMutableDictionaryRef v33 = v103[0];
      uint64_t v34 = (void *)*((void *)v103[0] + v23);
      if (v34)
      {
        *size_t v27 = *v34;
      }
      else
      {
        *size_t v27 = v104;
        *(void *)&long long v104 = v27;
        *((void *)v33 + v23) = &v104;
        if (!*v27) {
          goto LABEL_56;
        }
        unint64_t v35 = *(void *)(*v27 + 8);
        if ((v17 & (v17 - 1)) != 0)
        {
          if (v35 >= v17) {
            v35 %= v17;
          }
        }
        else
        {
          v35 &= v17 - 1;
        }
        uint64_t v34 = (void *)((char *)v103[0] + 8 * v35);
      }
      *uint64_t v34 = v27;
LABEL_56:
      uint64_t v16 = ++*((void *)&v104 + 1);
      unint64_t v15 = v100;
LABEL_57:
      ;
    }
  }
  size_t v36 = strlen(v8);
  if (!v36) {
    goto LABEL_97;
  }
  unint64_t v37 = v36;
LABEL_60:
  if (*v8 != 95) {
    goto LABEL_171;
  }
  unsigned int v38 = 0;
  ++v8;
  --v37;
  unsigned int v98 = 0;
  uint64_t v39 = 4;
  do
  {
    if (!v37) {
      goto LABEL_171;
    }
    int v40 = *v8;
    if (v40 == 37)
    {
      if (v37 < 3) {
        goto LABEL_171;
      }
      int v41 = v8[1];
      if ((v41 - 48) >= 0xA)
      {
        if ((v41 - 97) >= 6)
        {
          if ((v41 - 65) > 5) {
            goto LABEL_171;
          }
          int v42 = -55;
        }
        else
        {
          int v42 = -87;
        }
      }
      else
      {
        int v42 = -48;
      }
      int v44 = v8[2];
      if ((v44 - 48) >= 0xA)
      {
        if ((v44 - 97) >= 6)
        {
          if ((v44 - 65) > 5) {
            goto LABEL_171;
          }
          int v45 = -55;
        }
        else
        {
          int v45 = -87;
        }
      }
      else
      {
        int v45 = -48;
      }
      unsigned int v38 = (16 * (v42 + v41)) | (v38 << 8) | (v45 + v44);
      unsigned int v98 = v38;
      v8 += 3;
      uint64_t v43 = -3;
    }
    else
    {
      ++v8;
      unsigned int v38 = v40 | (v38 << 8);
      unsigned int v98 = v38;
      uint64_t v43 = -1;
    }
    v37 += v43;
    --v39;
  }
  while (v39);
  CFNumberRef v97 = (CFNumberRef)0xAAAAAAAAAAAAAAAALL;
  *(void *)&double valuePtr = v38;
  CFNumberRef v46 = CFNumberCreate(allocator, kCFNumberLongType, &valuePtr);
  CFNumberRef v97 = v46;
  if (v37 && *v8 != 95)
  {
    int v47 = 0;
    long long v48 = (char *)&v8[v37];
    while (1)
    {
      int v49 = *v8;
      if ((v49 - 48) >= 0xA)
      {
        if ((v49 - 97) >= 6)
        {
          if ((v49 - 65) > 5)
          {
            long long v48 = (char *)v8;
LABEL_94:
            if (!std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::find<unsigned int>((uint64_t)v103[0], (unint64_t)v103[1], v38))goto LABEL_170; {
            double valuePtr = (double)v47 * 0.0000152587891;
            }
            CFNumberRef v96 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
            CFDictionarySetValue(theDict, v46, v96);
            TCFNumber::~TCFNumber((const void **)&v96);
            BOOL v8 = v48;
LABEL_96:
            TCFNumber::~TCFNumber((const void **)&v97);
            if (!v37)
            {
LABEL_97:
              CFMutableDictionaryRef theDict = 0;
              goto LABEL_171;
            }
            goto LABEL_60;
          }
          int v50 = -55;
        }
        else
        {
          int v50 = -87;
        }
      }
      else
      {
        int v50 = -48;
      }
      int v47 = v49 + 16 * v47 + v50;
      ++v8;
      if (!--v37) {
        goto LABEL_94;
      }
    }
  }
  if (std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::find<unsigned int>((uint64_t)v103[0], (unint64_t)v103[1], v38))
  {
    double valuePtr = *((double *)std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v103, v38, &v98)+ 3);
    CFNumberRef v96 = CFNumberCreate(allocator, kCFNumberDoubleType, &valuePtr);
    CFDictionarySetValue(theDict, v46, v96);
    TCFNumber::~TCFNumber((const void **)&v96);
    goto LABEL_96;
  }
LABEL_170:
  TCFNumber::~TCFNumber((const void **)&v97);
LABEL_171:
  std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::~__hash_table((uint64_t)v103);
  TCFDictionary::~TCFDictionary((const void **)&theDict);
LABEL_172:
  TCFData::~TCFData((const void **)&v99);
LABEL_173:
  v103[0] = (CFMutableDictionaryRef)&v106;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v103);
}

void sub_1B532F47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, const void *a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,char *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (v33) {
    operator delete(v33);
  }
  TCFData::~TCFData(&a20);
  a27 = &a33;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a27);
  _Unwind_Resume(a1);
}

__CFData *TFPFont::CopySFNTData(TFPFont *this)
{
  uint64_t result = (__CFData *)(*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (result)
  {
    return TSFNTFont::CopyData(result);
  }
  return result;
}

BOOL TFPFont::IsSuitcase(TFPFont *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 440))(*((void *)this + 2)) != 0;
}

CFStringRef TFPFont::CopyVariationPostScriptNamePrefix(TFPFont *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v6[2] = v1;
  v6[3] = v1;
  v6[0] = v1;
  v6[1] = v1;
  memset(cStr, 0, sizeof(cStr));
  unint64_t v7 = v6;
  CFStringRef v2 = 0;
  if (TFPFont::GetVariationPrefix((uint64_t)this, cStr)) {
    CFStringRef v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], cStr[0], 0x600u);
  }
  uint64_t v4 = cStr;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v4);
  return v2;
}

void sub_1B532F6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10)
{
  a9 = (void **)&a10;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&a9);
  _Unwind_Resume(a1);
}

CFMutableArrayRef TFPFont::CopyAdditionalPostScriptNames(TFPFont *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef theArray = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (*((void *)this + 32))
  {
    *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
    unsigned __int8 v11[2] = v3;
    v11[3] = v3;
    v11[0] = v3;
    v11[1] = v3;
    memset(cStr, 0, sizeof(cStr));
    int v12 = v11;
    if (TFPFont::GetVariationPrefix((uint64_t)this, cStr)
      && TFPFont::AppendVariationPostScriptName((uint64_t)this, (uint64_t)cStr, 0))
    {
      CFStringRef v4 = CFStringCreateWithCString(v2, cStr[0], 0x600u);
      CFDataRef v9 = (char **)v4;
      if (v4) {
        CFArrayAppendValue(theArray, v4);
      }
      TCFString::~TCFString((const void **)&v9);
    }
    CFDataRef v9 = cStr;
    std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v9);
  }
  else
  {
    char v5 = (char *)(*(uint64_t (**)(TFPFont *))(*(void *)this + 112))(this);
    cStr[0] = v5;
    if (v5) {
      CFArrayAppendValue(theArray, v5);
    }
    TCFString::~TCFString((const void **)cStr);
  }
  if (theArray && CFArrayGetCount(theArray))
  {
    CFMutableArrayRef v6 = theArray;
    CFMutableArrayRef theArray = 0;
  }
  else
  {
    CFMutableArrayRef v6 = 0;
  }
  TCFArray<void const*>::~TCFArray((const void **)&theArray);
  return v6;
}

void sub_1B532F860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, void **a11, char a12)
{
  a11 = (void **)&a12;
  std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,4ul>>::__destroy_vector::operator()[abi:fe180100](&a11);
  TCFArray<void const*>::~TCFArray(&a10);
  _Unwind_Resume(a1);
}

const __CFString *TFPFont::CopyFullName(TFPFont *this)
{
  return TFPFont::CopyFontName(this, 4);
}

const __CFString *TFPFont::CopyFamilyName(TFPFont *this)
{
  return TFPFont::CopyFontName(this, 1);
}

BOOL TFPFont::IsNamedInstanceAPI(TFPFont *this)
{
  return !*((void *)this + 42) || *((void *)this + 41) >= 0;
}

uint64_t TFPFont::GetInstanceNameIDAPI(TFPFont *this)
{
  uint64_t v1 = *((void *)this + 42);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 41);
  if (v2 < 0) {
    return 0;
  }
  uint64_t v3 = *(void *)(v1 + 344);
  uint64_t v4 = *(void *)(v1 + 352);
  if (v3 == v4 || v2 >= (v4 - v3) >> 3) {
    return 0;
  }
  else {
    return *(unsigned __int16 *)(v3 + 8 * v2 + 2);
  }
}

uint64_t TFPFont::HasNamedInstanceWithOpticalSize(TFPFont *this)
{
  uint64_t v1 = (TFPFont *)*((void *)this + 42);
  if (!v1) {
    uint64_t v1 = this;
  }
  return *((unsigned __int8 *)v1 + 368);
}

uint64_t TFPFont::GetVariationAxisFlags(TFPFont *this, unsigned int a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::find<unsigned int>((void *)this + 36, a2);
  if (v2) {
    return (unsigned __int16)*((_DWORD *)v2 + 5);
  }
  else {
    LOWORD(v3) = 0;
  }
  return (unsigned __int16)v3;
}

uint64_t *TFPFont::GetVariationAxisNameID(TFPFont *this, unsigned int a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::find<unsigned int>((void *)this + 36, a2);
  if (result) {
    return (uint64_t *)*((unsigned __int16 *)result + 11);
  }
  return result;
}

double *TFPFont::GetStems(atomic_ullong *this, double *a2, double *a3)
{
  uint64_t result = (double *)(*(uint64_t (**)(atomic_ullong *))(*this + 256))(this);
  double v8 = result[8];
  double v7 = result[9];
  if (v7 == 0.0 || v8 == 0.0)
  {
    uint64_t result = (double *)atomic_load_explicit(this + 31, memory_order_acquire);
    if (!result) {
      operator new();
    }
    if (v7 == 0.0) {
      double v7 = result[1];
    }
    if (v8 == 0.0) {
      double v8 = *result;
    }
  }
  *a2 = v7;
  *a3 = v8;
  return result;
}

void sub_1B532FA6C(void *a1)
{
}

uint64_t TFPFont::GetTypoMetrics(TFPFont *this, double *a2, double *a3, double *a4)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (result)
  {
    CFDataRef v9 = (const TSFNTFont *)result;
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    _OWORD v23[2] = v10;
    v23[3] = v10;
    v23[0] = v10;
    v23[1] = v10;
    Tos2Table::Tos2Table((Tos2Table *)v23, (const TSFNTFont *)result);
    if (TsfntTable::operator BOOL(v11))
    {
      if (a2) {
        *a2 = (double)((int)bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v23) + 68)) >> 16);
      }
      if (a3) {
        *a3 = (double)((int)bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v23) + 70)) >> 16);
      }
      if (a4) {
        *a4 = (double)((int)bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v23) + 72)) >> 16);
      }
      uint64_t v22 = 0;
      int v12 = (const __int16 *)(*(uint64_t (**)(TFPFont *, uint64_t *))(*(void *)this + 232))(this, &v22);
      unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
      _OWORD v20[6] = v13;
      v20[7] = v13;
      v20[4] = v13;
      v20[5] = v13;
      v20[2] = v13;
      v20[3] = v13;
      v20[0] = v13;
      v20[1] = v13;
      TMVARTable::TMVARTable((TMVARTable *)v20, v9, v22, v12);
      if (TsfntTable::operator BOOL((TsfntTable *)v20))
      {
        if (a2)
        {
          double v14 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v20, 1751216995));
          if (!v15) {
            double v14 = 0.0;
          }
          *a2 = v14 + *a2;
        }
        if (a3)
        {
          double v16 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v20, 1751413603));
          if (!v17) {
            double v16 = 0.0;
          }
          *a3 = v16 + *a3;
        }
        if (a4)
        {
          double v18 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v20, 1751934832));
          if (!v19) {
            double v18 = 0.0;
          }
          *a4 = v18 + *a4;
        }
      }
      TDataReference::~TDataReference((TDataReference *)v20);
      TDataReference::~TDataReference((TDataReference *)v23);
      return 1;
    }
    else
    {
      TDataReference::~TDataReference((TDataReference *)v23);
      return 0;
    }
  }
  return result;
}

void sub_1B532FC9C(_Unwind_Exception *a1)
{
  TDataReference::~TDataReference((TDataReference *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetWinMetrics(TFPFont *this, double *a2, double *a3)
{
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (result)
  {
    double v7 = (const TSFNTFont *)result;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19[2] = v8;
    v19[3] = v8;
    v19[0] = v8;
    v19[1] = v8;
    Tos2Table::Tos2Table((Tos2Table *)v19, (const TSFNTFont *)result);
    if (TsfntTable::operator BOOL(v9))
    {
      if (a2) {
        *a2 = (double)(bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v19) + 74)) >> 16);
      }
      if (a3) {
        *a3 = (double)(bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v19) + 76)) >> 16);
      }
      uint64_t v18 = 0;
      long long v10 = (const __int16 *)(*(uint64_t (**)(TFPFont *, uint64_t *))(*(void *)this + 232))(this, &v18);
      unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v16[6] = v11;
      v16[7] = v11;
      _OWORD v16[4] = v11;
      void v16[5] = v11;
      v16[2] = v11;
      v16[3] = v11;
      v16[0] = v11;
      v16[1] = v11;
      TMVARTable::TMVARTable((TMVARTable *)v16, v7, v18, v10);
      if (TsfntTable::operator BOOL((TsfntTable *)v16))
      {
        if (a2)
        {
          double v12 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v16, 1751346273));
          if (!v13) {
            double v12 = 0.0;
          }
          *a2 = v12 + *a2;
        }
        if (a3)
        {
          double v14 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v16, 1751346276));
          if (!v15) {
            double v14 = 0.0;
          }
          *a3 = v14 + *a3;
        }
      }
      TDataReference::~TDataReference((TDataReference *)v16);
      TDataReference::~TDataReference((TDataReference *)v19);
      return 1;
    }
    else
    {
      TDataReference::~TDataReference((TDataReference *)v19);
      return 0;
    }
  }
  return result;
}

void sub_1B532FE90(_Unwind_Exception *a1)
{
  TDataReference::~TDataReference((TDataReference *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetSubscriptX(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((void **)this, (uint64_t (*)(void *))Tos2Table::GetSubscriptX, 0, a2, a3);
}

uint64_t GetOS2SizeAndOther(void **a1, uint64_t (*a2)(void *), uint64_t a3, double *a4, double *a5)
{
  uint64_t result = (*(uint64_t (**)(void *))(*a1[2] + 432))(a1[2]);
  if (result)
  {
    long long v11 = (const TSFNTFont *)result;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v29[2] = v12;
    v29[3] = v12;
    v29[0] = v12;
    v29[1] = v12;
    Tos2Table::Tos2Table((Tos2Table *)v29, (const TSFNTFont *)result);
    if (TsfntTable::operator BOOL(v13))
    {
      double v14 = (void *)((char *)v29 + (a3 >> 1));
      if (a3) {
        a2 = *(uint64_t (**)(void *))(*v14 + a2);
      }
      uint64_t v15 = a2(v14);
      int v17 = HIDWORD(v15);
      int v19 = v18;
      if (a4) {
        *a4 = (double)(__int16)v15;
      }
      if (a5) {
        *a5 = (double)v16;
      }
      unint64_t v28 = 0;
      unint64_t v20 = (const __int16 *)((uint64_t (*)(void **, unint64_t *))(*a1)[29])(a1, &v28);
      unint64_t v27 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v21 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v26[6] = v21;
      v26[7] = v21;
      v26[4] = v21;
      v26[5] = v21;
      v26[2] = v21;
      v26[3] = v21;
      v26[0] = v21;
      v26[1] = v21;
      TMVARTable::TMVARTable((TMVARTable *)v26, v11, v28, v20);
      if (TsfntTable::operator BOOL((TsfntTable *)v26))
      {
        if (a4)
        {
          double v22 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v26, v17));
          if (!v23) {
            double v22 = 0.0;
          }
          *a4 = v22 + *a4;
        }
        if (a5)
        {
          double v24 = COERCE_DOUBLE(TMVARTable::ValueForTag((TMVARTable *)v26, v19));
          if (!v25) {
            double v24 = 0.0;
          }
          *a5 = v24 + *a5;
        }
      }
      TDataReference::~TDataReference((TDataReference *)v26);
      TDataReference::~TDataReference((TDataReference *)v29);
      return 1;
    }
    else
    {
      TDataReference::~TDataReference((TDataReference *)v29);
      return 0;
    }
  }
  return result;
}

void sub_1B53300DC(_Unwind_Exception *a1)
{
  TDataReference::~TDataReference((TDataReference *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetSubscriptY(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((void **)this, (uint64_t (*)(void *))Tos2Table::GetSubscriptY, 0, a2, a3);
}

uint64_t TFPFont::GetSuperscriptX(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((void **)this, (uint64_t (*)(void *))Tos2Table::GetSuperscriptX, 0, a2, a3);
}

uint64_t TFPFont::GetSuperscriptY(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((void **)this, (uint64_t (*)(void *))Tos2Table::GetSuperscriptY, 0, a2, a3);
}

uint64_t TFPFont::GetStrikeout(TFPFont *this, double *a2, double *a3)
{
  return GetOS2SizeAndOther((void **)this, (uint64_t (*)(void *))Tos2Table::GetStrikeout, 0, a2, a3);
}

uint64_t TFPFont::CopyRegistryOrderingSupplement(TFPFont *this, const __CFString **a2, const __CFString **a3, int *a4)
{
  CFIndex numBytes = 0;
  unint64_t v28 = 0xAAAAAAAAAAAAAA00;
  char v25 = &unk_1F0DD43A0;
  unint64_t v26 = 0;
  BOOL v29 = &unk_1F0DD4218;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  CFIndex v19 = 0;
  unint64_t v20 = 0xAAAAAAAAAAAAAA00;
  int v17 = &unk_1F0DD43A0;
  int v18 = 0;
  long long v21 = &unk_1F0DD4218;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  int v16 = 0;
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 360))();
  uint64_t v8 = v7;
  if (a2)
  {
    if (v7)
    {
      CFDataRef v9 = v26;
      if (!v26)
      {
        if (v30 && (uint64_t v10 = *(void *)(v30 + 8)) != 0) {
          CFDataRef v9 = (const UInt8 *)(v10 + v31);
        }
        else {
          CFDataRef v9 = 0;
        }
      }
      CFStringRef v11 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9, numBytes, 0x600u, 0);
    }
    else
    {
      CFStringRef v11 = 0;
    }
    *a2 = v11;
  }
  if (a3)
  {
    if (v8)
    {
      long long v12 = v18;
      if (!v18)
      {
        if (v22 && (uint64_t v13 = *(void *)(v22 + 8)) != 0) {
          long long v12 = (const UInt8 *)(v13 + v23);
        }
        else {
          long long v12 = 0;
        }
      }
      CFStringRef v14 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, v19, 0x600u, 0);
    }
    else
    {
      CFStringRef v14 = 0;
    }
    *a3 = v14;
  }
  if (a4) {
    *a4 = v16;
  }
  TStringRef::~TStringRef(&v17);
  TStringRef::~TStringRef(&v25);
  return v8;
}

void sub_1B5330390(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void *);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  TStringRef::~TStringRef((void **)va);
  TStringRef::~TStringRef((void **)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5330378);
}

uint64_t TFPFont::CopyCharacterSet(TFPFont *this)
{
  uint64_t v1 = *((void *)this + 2);
  unsigned int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 168))(v1);
  if (v2 >= 0xFFFF) {
    uint64_t v3 = 0xFFFFLL;
  }
  else {
    uint64_t v3 = v2;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v1 + 136);
  return v4(v1, v3);
}

uint64_t TFPFont::GetOS2UnicodeRanges(TFPFont *this, unsigned int *a2, float a3)
{
  uint64_t v5 = *((void *)this + 2);
  unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 168))(v5);
  if (v6 >= 0xFFFF) {
    uint64_t v8 = 0xFFFFLL;
  }
  else {
    uint64_t v8 = v6;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, unsigned int *, __n128))(*(void *)v5 + 144);
  v7.n128_f32[0] = a3;
  return v9(v5, v8, a2, v7);
}

uint64_t TFPFont::GetProtectionInfo(TFPFont *this)
{
  uint64_t v1 = (const TSFNTFont *)(*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (!v1) {
    return 0;
  }
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v5[2] = v2;
  long long v6 = v2;
  v5[0] = v2;
  v5[1] = v2;
  Tos2Table::Tos2Table((Tos2Table *)v5, v1);
  if (TsfntTable::operator BOOL((TsfntTable *)v5))
  {
    if (WORD4(v6) >= 0x4Eu) {
      uint64_t v3 = bswap32(*(unsigned __int16 *)(TpostTable::GetPost((TpostTable *)v5) + 8)) & 0xFFFF0000;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 14;
  }
  TDataReference::~TDataReference((TDataReference *)v5);
  return v3;
}

unint64_t TFPFont::GetUnicharsForGlyph(TFPFont *this, uint64_t a2, unsigned __int16 *a3, unint64_t a4)
{
  if (!(*(unsigned int (**)(TFPFont *, void, void, void))(*(void *)this + 344))(this, 0, 0, 0)|| (unint64_t v8 = TFPFont::GetCharactersWithGlyphNameForGlyph(*((TFPFont **)this + 2), a2, a3, a4)) == 0|| (v9 = v8, (FontCoversUnichars(this, a3, v8) & 1) == 0))
  {
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, unsigned __int16 *, unint64_t))(**((void **)this + 2)
                                                                                           + 152))(*((void *)this + 2), a2, a3, a4);
    if (!v10) {
      goto LABEL_15;
    }
    unint64_t v9 = v10;
    int v11 = *a3;
    BOOL v12 = v10 != 1 && (v11 & 0xFC00) == 55296;
    if (v12)
    {
      int v14 = a3[1];
      BOOL v12 = (v14 & 0xFC00) == 56320;
      int v15 = v14 + (v11 << 10) - 56613888;
      uint64_t v13 = 2;
      if (v12) {
        int v11 = v15;
      }
      else {
        uint64_t v13 = 1;
      }
    }
    else
    {
      uint64_t v13 = 1;
    }
    if (v13 == v10 && (v11 - 1113088) <= 0x3FD)
    {
LABEL_15:
      unint64_t CharactersWithGlyphNameForGlyph = TFPFont::GetCharactersWithGlyphNameForGlyph(*((TFPFont **)this + 2), a2, a3, a4);
      if (FontCoversUnichars(this, a3, CharactersWithGlyphNameForGlyph)) {
        return CharactersWithGlyphNameForGlyph;
      }
      else {
        return 0;
      }
    }
  }
  return v9;
}

unint64_t FontCoversUnichars(const TFPFont *a1, unsigned __int16 *a2, unint64_t a3)
{
  unint64_t v3 = a3;
  v14[1] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**((void **)a1 + 2) + 432))(*((void *)a1 + 2));
    if (v6 && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 472))(v6, 1668112752))
    {
      __n128 v7 = &v13;
      BOOL v12 = 0;
      unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v10 = 0;
      int v11 = 0;
      v14[0] = &v13;
      if (v3 >> 62) {
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      }
      if ((void *)((char *)&v14[-1] + 4 * v3) <= v14)
      {
        v14[0] = (char *)&v14[-1] + 4 * v3;
        size_t v8 = 4 * v3;
      }
      else
      {
        size_t v8 = 4 * v3;
        __n128 v7 = (unint64_t *)operator new(4 * v3);
      }
      uint64_t v10 = v7;
      BOOL v12 = (char *)v7 + 4 * v3;
      bzero(v7, v8);
      int v11 = v12;
      unint64_t v3 = (*(uint64_t (**)(const TFPFont *, unsigned __int16 *, unint64_t *, unint64_t))(*(void *)a1 + 440))(a1, a2, v7, v3) == v3;
      std::vector<unsigned int,TInlineBufferAllocator<unsigned int,2ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v10);
    }
    else
    {
      return 1;
    }
  }
  return v3;
}

void sub_1B53308F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t TFPFont::GetType1Encoding(TFPFont *this, unsigned __int16 *a2)
{
  uint64_t v4 = (const void *)*((void *)this + 2);
  if (v4
  {
    uint64_t v6 = v5;
    *((_OWORD *)a2 + 30) = 0u;
    *((_OWORD *)a2 + 31) = 0u;
    *((_OWORD *)a2 + 28) = 0u;
    *((_OWORD *)a2 + 29) = 0u;
    *((_OWORD *)a2 + 26) = 0u;
    *((_OWORD *)a2 + 27) = 0u;
    *((_OWORD *)a2 + 24) = 0u;
    *((_OWORD *)a2 + 25) = 0u;
    *((_OWORD *)a2 + 22) = 0u;
    *((_OWORD *)a2 + 23) = 0u;
    *((_OWORD *)a2 + 20) = 0u;
    *((_OWORD *)a2 + 21) = 0u;
    *((_OWORD *)a2 + 18) = 0u;
    *((_OWORD *)a2 + 19) = 0u;
    *((_OWORD *)a2 + 16) = 0u;
    *((_OWORD *)a2 + 17) = 0u;
    *((_OWORD *)a2 + 14) = 0u;
    *((_OWORD *)a2 + 15) = 0u;
    *((_OWORD *)a2 + 12) = 0u;
    *((_OWORD *)a2 + 13) = 0u;
    *((_OWORD *)a2 + 10) = 0u;
    *((_OWORD *)a2 + 11) = 0u;
    *((_OWORD *)a2 + 8) = 0u;
    *((_OWORD *)a2 + 9) = 0u;
    *((_OWORD *)a2 + 6) = 0u;
    *((_OWORD *)a2 + 7) = 0u;
    *((_OWORD *)a2 + 4) = 0u;
    *((_OWORD *)a2 + 5) = 0u;
    *((_OWORD *)a2 + 2) = 0u;
    *((_OWORD *)a2 + 3) = 0u;
    *(_OWORD *)a2 = 0u;
    *((_OWORD *)a2 + 1) = 0u;
    if (((*(uint64_t (**)(void))(*(void *)v5 + 496))() & 1) == 0) {
      TType1Font::GetStandardEncoding(v6, a2);
    }
    return 1;
  }
  else
  {
    uint64_t result = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
    if (result) {
      return (*(uint64_t (**)(uint64_t, unsigned __int16 *))(*(void *)result + 112))(result, a2);
    }
  }
  return result;
}

void sub_1B5330A54(void *a1)
{
}

uint64_t TFPFont::GetTrueTypeEncoding(uint64_t a1, int a2, int a3)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  if (v6 != 33 && (v6 - 2) > 0x13) {
    return 0;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v43 = v9;
  long long v44 = v9;
  long long v41 = v9;
  long long v42 = v9;
  long long v39 = v9;
  long long v40 = v9;
  long long v37 = v9;
  long long v38 = v9;
  long long v35 = v9;
  long long v36 = v9;
  long long v33 = v9;
  long long v34 = v9;
  long long v32 = v9;
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
  TSFNTFont::TSFNTFont((TSFNTFont *)&v32);
  *(void *)&long long v32 = &unk_1F0DD6988;
  *(void *)&long long v33 = &unk_1F0DD6B90;
  *((void *)&v44 + 1) = v10;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v29[3] = v11;
  long long v30 = v11;
  v29[1] = v11;
  v29[2] = v11;
  v29[0] = v11;
  TcmapEncodingTable::TcmapEncodingTable((TcmapEncodingTable *)v29, (const TSFNTFont *)&v32, a2, a3, 0xFFFF);
  if (!(void)v30)
  {
    TDataReference::~TDataReference((TDataReference *)v29);
    TSFNTFont::~TSFNTFont((TSFNTFont *)&v32);
    return 0;
  }
  if (bswap32(*(unsigned __int16 *)v30) >> 16 >= 4
    && (!WORD4(v30) || WORD4(v30) == 3 || WORD4(v30) == 4 && WORD5(v30) == 2))
  {
    uint64_t v12 = 0;
    int64x2_t v13 = vdupq_n_s64(8uLL);
    int64x2_t v26 = v13;
    do
    {
      uint64_t v14 = 0;
      int64x2_t v15 = vdupq_n_s64(v12 << 8);
      *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v108 = v16;
      long long v107 = v16;
      long long v106 = v16;
      long long v105 = v16;
      long long v104 = v16;
      long long v103 = v16;
      long long v102 = v16;
      long long v101 = v16;
      long long v100 = v16;
      long long v99 = v16;
      long long v98 = v16;
      long long v97 = v16;
      long long v96 = v16;
      long long v95 = v16;
      long long v94 = v16;
      long long v93 = v16;
      long long v92 = v16;
      long long v91 = v16;
      long long v90 = v16;
      long long v89 = v16;
      long long v88 = v16;
      long long v87 = v16;
      long long v86 = v16;
      long long v85 = v16;
      long long v83 = v16;
      long long v84 = v16;
      long long v81 = v16;
      long long v82 = v16;
      long long v79 = v16;
      long long v80 = v16;
      long long v77 = v16;
      long long v78 = v16;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      long long v69 = 0u;
      long long v70 = 0u;
      long long v67 = 0u;
      long long v68 = 0u;
      long long v65 = 0u;
      long long v66 = 0u;
      long long v63 = 0u;
      long long v64 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v51 = 0u;
      long long v52 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      int64x2_t v17 = (int64x2_t)xmmword_1B5390830;
      int64x2_t v18 = (int64x2_t)xmmword_1B5400B70;
      int64x2_t v19 = (int64x2_t)xmmword_1B5400B60;
      int64x2_t v20 = (int64x2_t)xmmword_1B5400B50;
      long long v45 = 0u;
      long long v46 = 0u;
      do
      {
        *(long long *)((char *)&v77 + v14) = (__int128)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v17, v15), (int32x4_t)vaddq_s64(v18, v15)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v19, v15), (int32x4_t)vaddq_s64(v20, v15)));
        int64x2_t v19 = vaddq_s64(v19, v13);
        int64x2_t v18 = vaddq_s64(v18, v13);
        int64x2_t v17 = vaddq_s64(v17, v13);
        int64x2_t v20 = vaddq_s64(v20, v13);
        v14 += 16;
      }
      while (v14 != 512);
      unsigned int v28 = 256;
      unint64_t v27 = &v77;
      TcmapEncodingTable::Map<unsigned short>((uint64_t)v29, (uint64_t *)&v27, 512, (unint64_t)&v45, &v28);
      CGFontIndexMapAddRange();
      ++v12;
      int64x2_t v13 = v26;
    }
    while (v12 != 256);
  }
  else
  {
    uint64_t v21 = 0;
    *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v59 = v22;
    long long v60 = v22;
    long long v57 = v22;
    long long v58 = v22;
    long long v55 = v22;
    long long v56 = v22;
    long long v53 = v22;
    long long v54 = v22;
    long long v51 = v22;
    long long v52 = v22;
    long long v49 = v22;
    long long v50 = v22;
    long long v47 = v22;
    long long v48 = v22;
    long long v45 = v22;
    long long v46 = v22;
    long long v108 = 0u;
    long long v107 = 0u;
    long long v106 = 0u;
    long long v105 = 0u;
    long long v104 = 0u;
    long long v103 = 0u;
    long long v102 = 0u;
    long long v101 = 0u;
    long long v100 = 0u;
    long long v99 = 0u;
    long long v98 = 0u;
    long long v97 = 0u;
    long long v96 = 0u;
    long long v95 = 0u;
    long long v94 = 0u;
    long long v93 = 0u;
    long long v92 = 0u;
    long long v91 = 0u;
    long long v90 = 0u;
    long long v89 = 0u;
    long long v88 = 0u;
    long long v87 = 0u;
    long long v86 = 0u;
    long long v85 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    int8x16_t v23 = (int8x16_t)xmmword_1B5400B80;
    long long v77 = 0u;
    long long v78 = 0u;
    v24.i64[0] = 0x1010101010101010;
    v24.i64[1] = 0x1010101010101010;
    do
    {
      *(long long *)((char *)&v45 + v21) = (__int128)v23;
      v21 += 16;
      int8x16_t v23 = vaddq_s8(v23, v24);
    }
    while (v21 != 256);
    unsigned int v28 = 256;
    unint64_t v27 = &v45;
    TcmapEncodingTable::Map<unsigned short>((uint64_t)v29, (uint64_t *)&v27, 256, (unint64_t)&v77, &v28);
    CGFontIndexMapAddRange();
  }
  TDataReference::~TDataReference((TDataReference *)v29);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v32);
  return 1;
}

void sub_1B5330ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a2)
  {
    TDataReference::~TDataReference((TDataReference *)&a21);
    TSFNTFont::~TSFNTFont((TSFNTFont *)&a33);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5330E98);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFPFont::GetGlyphsForText(TFPFont *this, FPEncoding a2, const char *a3, unsigned __int16 *a4, uint64_t a5)
{
  if (!a5) {
    return 0;
  }
  uint64_t v5 = a5;
  int v8 = *(_DWORD *)&a2.var0;
  uint64_t v9 = *((void *)this + 2);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v31 = v10;
  long long v32 = v10;
  long long v29 = v10;
  long long v30 = v10;
  long long v27 = v10;
  long long v28 = v10;
  long long v25 = v10;
  long long v26 = v10;
  long long v23 = v10;
  long long v24 = v10;
  long long v22 = v10;
  long long v20 = v10;
  long long v21 = v10;
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
  TSFNTFont::TSFNTFont((TSFNTFont *)&v20);
  *(void *)&long long v20 = &unk_1F0DD6988;
  *(void *)&long long v21 = &unk_1F0DD6B90;
  *((void *)&v32 + 1) = v11;
  unint64_t v19 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v17[3] = v12;
  long long v18 = v12;
  v17[1] = v12;
  v17[2] = v12;
  v17[0] = v12;
  TcmapEncodingTable::TcmapEncodingTable((TcmapEncodingTable *)v17, (const TSFNTFont *)&v20, (unsigned __int16)v8, HIWORD(v8), 0xFFFF);
  uint64_t v13 = v18;
  if ((void)v18)
  {
    long long v16 = a3;
    unsigned int v15 = v5;
    uint64_t v5 = TcmapEncodingTable::Map<unsigned short>((uint64_t)v17, (uint64_t *)&v16, v5, (unint64_t)a4, &v15);
  }
  TDataReference::~TDataReference((TDataReference *)v17);
  TSFNTFont::~TSFNTFont((TSFNTFont *)&v20);
  if (!v13) {
    return 0;
  }
  return v5;
}

void sub_1B5331090(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  TDataReference::~TDataReference((TDataReference *)va);
  TSFNTFont::~TSFNTFont((TSFNTFont *)va1);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B533106CLL);
}

uint64_t TFPFont::GetGlyphsForCharacters(TFPFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, unint64_t a4)
{
  int v4 = -1;
  if (a4 < 0xFFFFFFFF) {
    int v4 = a4;
  }
  unsigned int v6 = v4;
  if (!v4) {
    return 0;
  }
  (*(void (**)(void, const unsigned __int16 *, unsigned __int16 *, unsigned int *, void))(**((void **)this + 2) + 120))(*((void *)this + 2), a2, a3, &v6, 0);
  return v6;
}

uint64_t TFPFont::GetLongGlyphsForCharacters(TFPFont *this, const unsigned __int16 *a2, unsigned int *a3, unint64_t a4)
{
  return TFPFont::GetLongGlyphsForCharacters(this, a2, a3, a4, 0);
}

uint64_t TFPFont::GetGlyphsForCharacterRange(TFPFont *this, unsigned __int16 *a2, CFRange a3)
{
  return (*(uint64_t (**)(void, unsigned __int16 *, CFIndex, CFIndex))(**((void **)this + 2) + 128))(*((void *)this + 2), a2, a3.location, a3.length);
}

void sub_1B533117C(void *a1)
{
}

uint64_t TFPFont::GetLongGlyphsForCharacterRange(TFPFont *this, unsigned int *a2, CFRange a3)
{
  CFIndex length = a3.length;
  CFIndex location = a3.location;
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (v7
    && ((*(uint64_t (**)(uint64_t, unsigned int *, CFIndex, CFIndex))(*(void *)v7 + 496))(v7, a2, location, length) & 1) != 0)
  {
    return 1;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v97[3] = v8;
  v97[4] = v8;
  v97[1] = v8;
  v97[2] = v8;
  long long v96 = v8;
  v97[0] = v8;
  LOWORD(v91) = 0;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::vector(&v96, length, &v91);
  uint64_t v9 = *((void *)this + 2);
  if ((*(unsigned int (**)(uint64_t, void, CFIndex, CFIndex))(*(void *)v9 + 128))(v9, v96, location, length))
  {
    if (length)
    {
      uint64_t v10 = (unsigned __int16 *)v96;
      uint64_t v11 = 2 * length;
      do
      {
        unsigned int v12 = *v10++;
        *a2++ = v12;
        v11 -= 2;
      }
      while (v11);
    }
    goto LABEL_105;
  }
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v94[3] = v13;
  v94[2] = v13;
  v94[1] = v13;
  v94[0] = v13;
  long long v92 = 0;
  long long v93 = 0;
  long long v91 = 0;
  long long v95 = v94;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::reserve(&v91, 2 * length);
  uint64_t v86 = v9;
  CFIndex v14 = location + length;
  if (location + length >= 0x10000) {
    uint64_t v15 = 0x10000;
  }
  else {
    uint64_t v15 = location + length;
  }
  if (location >= v15)
  {
    uint64_t v16 = v92;
  }
  else
  {
    uint64_t v16 = v92;
    do
    {
      if (v16 >= v93)
      {
        int64x2_t v17 = (void **)v91;
        uint64_t v18 = v16 - v91;
        if (v16 - v91 <= -3) {
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        }
        uint64_t v19 = v18 >> 1;
        if (v93 - v91 <= (unint64_t)((v18 >> 1) + 1)) {
          uint64_t v20 = v19 + 1;
        }
        else {
          uint64_t v20 = v93 - v91;
        }
        if ((unint64_t)(v93 - v91) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v21 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v21 = v20;
        }
        long long v90 = (char *)v94;
        if (v21)
        {
          long long v22 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v94, v21);
          int64x2_t v17 = (void **)v91;
          uint64_t v16 = v92;
        }
        else
        {
          long long v22 = 0;
        }
        long long v23 = &v22[2 * v19];
        *(_WORD *)long long v23 = location;
        if (v16 == (char *)v17)
        {
          long long v25 = &v22[2 * v19];
        }
        else
        {
          long long v24 = (void **)v16;
          long long v25 = &v22[2 * v19];
          do
          {
            __int16 v26 = *((_WORD *)v24 - 1);
            long long v24 = (void **)((char *)v24 - 2);
            *((_WORD *)v25 - 1) = v26;
            v25 -= 2;
          }
          while (v24 != v17);
        }
        long long v27 = v23 + 2;
        long long v91 = v25;
        long long v92 = v23 + 2;
        long long v28 = v93;
        long long v93 = &v22[2 * v21];
        *((void *)&v88 + 1) = v16;
        long long v89 = v28;
        long long v87 = (char **)v17;
        *(void *)&long long v88 = v17;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v87);
        uint64_t v16 = v27;
      }
      else
      {
        *(_WORD *)uint64_t v16 = location;
        v16 += 2;
      }
      long long v92 = v16;
      ++location;
    }
    while (location != v15);
    CFIndex location = v15;
  }
  long long v29 = v91;
  unint64_t v30 = (v16 - v91) >> 1;
  unint64_t v31 = v30;
  if (location < v14)
  {
    uint64_t v84 = (v16 - v91) >> 1;
    long long v85 = v91;
    long long v32 = v16;
    do
    {
      __int16 v33 = ((unint64_t)location >> 10) - 10304;
      unint64_t v34 = (unint64_t)v93;
      if (v32 >= v93)
      {
        long long v36 = (void **)v91;
        uint64_t v37 = v32 - v91;
        if (v32 - v91 <= -3) {
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        }
        uint64_t v38 = v37 >> 1;
        if (v93 - v91 <= (unint64_t)((v37 >> 1) + 1)) {
          uint64_t v39 = v38 + 1;
        }
        else {
          uint64_t v39 = v93 - v91;
        }
        if ((unint64_t)(v93 - v91) >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v40 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v40 = v39;
        }
        long long v90 = (char *)v94;
        if (v40)
        {
          long long v41 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v94, v40);
          long long v36 = (void **)v91;
          long long v32 = v92;
        }
        else
        {
          long long v41 = 0;
        }
        long long v42 = &v41[2 * v38];
        *(_WORD *)long long v42 = v33;
        if (v32 == (char *)v36)
        {
          long long v44 = &v41[2 * v38];
        }
        else
        {
          long long v43 = (void **)v32;
          long long v44 = &v41[2 * v38];
          do
          {
            __int16 v45 = *((_WORD *)v43 - 1);
            long long v43 = (void **)((char *)v43 - 2);
            *((_WORD *)v44 - 1) = v45;
            v44 -= 2;
          }
          while (v43 != v36);
        }
        long long v35 = v42 + 2;
        long long v91 = v44;
        long long v92 = v42 + 2;
        long long v46 = v93;
        long long v93 = &v41[2 * v40];
        *((void *)&v88 + 1) = v32;
        long long v89 = v46;
        long long v87 = (char **)v36;
        *(void *)&long long v88 = v36;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v87);
        unint64_t v34 = (unint64_t)v93;
      }
      else
      {
        *(_WORD *)long long v32 = v33;
        long long v35 = v32 + 2;
      }
      long long v92 = v35;
      __int16 v47 = location & 0x3FF | 0xDC00;
      if ((unint64_t)v35 >= v34)
      {
        long long v48 = (void **)v91;
        uint64_t v49 = v35 - v91;
        if (v35 - v91 <= -3) {
          std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
        }
        uint64_t v50 = v49 >> 1;
        unint64_t v51 = v34 - (void)v91;
        if (v51 <= (v49 >> 1) + 1) {
          unint64_t v52 = v50 + 1;
        }
        else {
          unint64_t v52 = v51;
        }
        if (v51 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v53 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v53 = v52;
        }
        long long v90 = (char *)v94;
        if (v53)
        {
          long long v54 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v94, v53);
          long long v48 = (void **)v91;
          long long v35 = v92;
        }
        else
        {
          long long v54 = 0;
        }
        long long v55 = &v54[2 * v50];
        *(_WORD *)long long v55 = v47;
        if (v35 == (char *)v48)
        {
          long long v57 = &v54[2 * v50];
        }
        else
        {
          long long v56 = (void **)v35;
          long long v57 = &v54[2 * v50];
          do
          {
            __int16 v58 = *((_WORD *)v56 - 1);
            long long v56 = (void **)((char *)v56 - 2);
            *((_WORD *)v57 - 1) = v58;
            v57 -= 2;
          }
          while (v56 != v48);
        }
        long long v32 = v55 + 2;
        long long v91 = v57;
        long long v92 = v55 + 2;
        long long v59 = v93;
        long long v93 = &v54[2 * v53];
        *((void *)&v88 + 1) = v35;
        long long v89 = v59;
        long long v87 = (char **)v48;
        *(void *)&long long v88 = v48;
        std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v87);
      }
      else
      {
        *(_WORD *)long long v35 = v47;
        long long v32 = v35 + 2;
      }
      long long v92 = v32;
      ++location;
    }
    while (location != v14);
    unint64_t v31 = (v32 - v91) >> 1;
    unint64_t v30 = v84;
    long long v29 = v85;
  }
  uint64_t v60 = *((void *)&v96 + 1);
  unint64_t v61 = (uint64_t)(*((void *)&v96 + 1) - v96) >> 1;
  if (v31 <= v61)
  {
    if (v31 >= v61) {
      goto LABEL_91;
    }
    uint64_t v73 = v96 + 2 * v31;
    goto LABEL_90;
  }
  unint64_t v62 = v31 - v61;
  if (v31 - v61 <= (uint64_t)(*(void *)&v97[0] - *((void *)&v96 + 1)) >> 1)
  {
    bzero(*((void **)&v96 + 1), 2 * v62);
    uint64_t v73 = v60 + 2 * v62;
LABEL_90:
    *((void *)&v96 + 1) = v73;
    goto LABEL_91;
  }
  if ((v31 & 0x8000000000000000) != 0) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  if (*(void *)&v97[0] - (void)v96 <= v31) {
    unint64_t v63 = v31;
  }
  else {
    unint64_t v63 = *(void *)&v97[0] - v96;
  }
  if (*(void *)&v97[0] - (void)v96 >= 0x7FFFFFFFFFFFFFFEuLL) {
    uint64_t v64 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v64 = v63;
  }
  long long v90 = (char *)v97 + 8;
  long long v65 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)v97 + 8, v64);
  long long v66 = v96;
  long long v67 = &v65[2 * v61];
  long long v68 = &v65[2 * v64];
  bzero(v67, 2 * v62);
  long long v69 = &v67[2 * v62];
  if (*((void *)&v66 + 1) != (void)v66)
  {
    uint64_t v70 = *((void *)&v66 + 1);
    do
    {
      __int16 v71 = *(_WORD *)(v70 - 2);
      v70 -= 2;
      *((_WORD *)v67 - 1) = v71;
      v67 -= 2;
    }
    while (v70 != (void)v66);
  }
  *(void *)&long long v96 = v67;
  *((void *)&v96 + 1) = v69;
  long long v72 = *(char **)&v97[0];
  *(void *)&v97[0] = v68;
  long long v89 = v72;
  long long v87 = (char **)v66;
  long long v88 = v66;
  std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,30ul> &>::~__split_buffer((uint64_t)&v87);
LABEL_91:
  LODWORD(v87) = v31;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, void, char ***, void))(*(void *)v86 + 120))(v86, v91, v96, &v87, 0);
  if (v16 == v29)
  {
    unint64_t v77 = 0;
LABEL_100:
    if (v77 >= v31)
    {
LABEL_104:
      long long v87 = &v91;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v87);
LABEL_105:
      long long v91 = (char *)&v96;
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v91);
      return 1;
    }
    uint64_t v81 = v96;
    unint64_t v82 = (uint64_t)(*((void *)&v96 + 1) - v96) >> 1;
    long long v83 = &a2[v77];
    while (v82 > v77)
    {
      *v83++ = *(unsigned __int16 *)(v81 + 2 * v77);
      v77 += 2;
      if (v77 >= v31) {
        goto LABEL_104;
      }
    }
  }
  else
  {
    long long v75 = (unsigned __int16 *)v96;
    uint64_t v76 = (uint64_t)(*((void *)&v96 + 1) - v96) >> 1;
    if (v30 <= 1) {
      unint64_t v77 = 1;
    }
    else {
      unint64_t v77 = v30;
    }
    unint64_t v78 = v77;
    long long v79 = a2;
    while (v76)
    {
      unsigned int v80 = *v75++;
      *v79++ = v80;
      --v76;
      if (!--v78) {
        goto LABEL_100;
      }
    }
  }
  __break(1u);
  return result;
}

void sub_1B53317F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a2)
  {
    a13 = &a19;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a13);
    a19 = &a31;
    std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&a19);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5331784);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TFPFont::GetGlyphsXo(TFPFont *this, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unsigned int Glyph = *((_DWORD *)this + 102);
  if (!Glyph)
  {
    if (TFPFont::GetXoGlyphsPerShortCuts(this))
    {
      unsigned int Glyph = *((_DWORD *)this + 102);
    }
    else
    {
      unsigned int Glyph = TFPFont::GetGlyph(*((TFPFont **)this + 2), "X");
      atomic_store(Glyph, (unsigned int *)this + 102);
    }
  }
  *a2 = Glyph;
  uint64_t result = *((unsigned int *)this + 103);
  if (!result)
  {
    if (TFPFont::GetXoGlyphsPerShortCuts(this) >= 2)
    {
      uint64_t result = *((unsigned int *)this + 103);
    }
    else
    {
      uint64_t result = TFPFont::GetGlyph(*((TFPFont **)this + 2), "o");
      atomic_store(result, (unsigned int *)this + 103);
    }
  }
  *a3 = result;
  return result;
}

uint64_t TFPFont::GetGlyphsForGlyphNames(uint64_t this, const char **a2, unsigned __int16 *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = a4;
    uint64_t v7 = this;
    do
    {
      long long v8 = *a2++;
      this = TFPFont::GetGlyph(*(TFPFont **)(v7 + 16), v8);
      *a3++ = this;
      --v4;
    }
    while (v4);
  }
  return this;
}

uint64_t TFPFont::GetGlyphsForCIDs(TFPFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void, const unsigned __int16 *, uint64_t, unsigned __int16 *))(**((void **)this + 2)
                                                                                                 + 368))(*((void *)this + 2), a2, a4, a3) & 1) != 0)return 1;
  bzero(a3, 2 * a4);
  return 0;
}

void sub_1B53319E4(void *a1)
{
}

uint64_t TFPFont::GetCIDsForGlyphs(TFPFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, uint64_t a4)
{
  if (((*(uint64_t (**)(void, const unsigned __int16 *, uint64_t, unsigned __int16 *))(**((void **)this + 2)
                                                                                                 + 376))(*((void *)this + 2), a2, a4, a3) & 1) != 0)return 1;
  if (a4) {
    memset(a3, 255, 2 * a4);
  }
  return 0;
}

void sub_1B5331A70(void *a1)
{
}

uint64_t TFPFont::GetGlyphForGlyphName(TFPFont **this, CFStringRef theString)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[15] = v4;
  v15[14] = v4;
  v15[13] = v4;
  v15[12] = v4;
  v15[11] = v4;
  v15[10] = v4;
  v15[9] = v4;
  v15[8] = v4;
  v15[7] = v4;
  v15[5] = v4;
  v15[6] = v4;
  v15[3] = v4;
  v15[4] = v4;
  v15[1] = v4;
  _OWORD v15[2] = v4;
  v15[0] = v4;
  CFIndex Length = CFStringGetLength(theString);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x600u);
  uint64_t v7 = (char *)v15;
  unsigned int v12 = 0;
  long long v13 = 0;
  CFIndex v14 = 0;
  v16[0] = v15;
  size_t v8 = MaximumSizeForEncoding + 1;
  if (MaximumSizeForEncoding == -1)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (MaximumSizeForEncoding <= -2) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    if ((void *)((char *)v15 + v8) <= v16) {
      v16[0] = (char *)v15 + v8;
    }
    else {
      uint64_t v7 = (char *)operator new(MaximumSizeForEncoding + 1);
    }
    uint64_t v9 = &v7[v8];
    unsigned int v12 = v7;
    CFIndex v14 = &v7[v8];
    bzero(v7, v8);
    long long v13 = &v7[v8];
  }
  uint64_t result = CFStringGetCString(theString, v7, v9 - v7, 0x600u);
  if (!result)
  {
    std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v12);
    return 0;
  }
  if (v13 != v12)
  {
    unsigned __int16 Glyph = TFPFont::GetGlyph(this[2], v12);
    std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v12);
    return Glyph;
  }
  __break(1u);
  return result;
}

void sub_1B5331BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
  {
    std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&a10);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5331BB4);
  }
  _Unwind_Resume(exception_object);
}

CFStringRef TFPFont::CopyGlyphNameForGlyph(TFont **this, unsigned int a2)
{
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) <= a2) {
    return 0;
  }
  else {
    return TFont::CopyGlyphName(this[2]);
  }
}

CFStringRef TFont::CopyGlyphName(TFont *this)
{
  *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v8 = v1;
  long long v9 = v1;
  *(_OWORD *)bytes = v1;
  *(_OWORD *)CFIndex numBytes = v1;
  (*(void (**)(UInt8 **__return_ptr))(*(void *)this + 336))(bytes);
  long long v2 = bytes[1];
  if (!bytes[1])
  {
    if (!*((void *)&v8 + 1) || (uint64_t v4 = *(void *)(*((void *)&v8 + 1) + 8)) == 0)
    {
      CFStringRef v3 = 0;
      goto LABEL_7;
    }
    long long v2 = (const UInt8 *)(v4 + v9);
  }
  CFStringRef v3 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, numBytes[0], 0x600u, 0);
LABEL_7:
  TStringRef::~TStringRef((void **)bytes);
  return v3;
}

void sub_1B5331D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void TFPFont::GetGlyphIdealAdvanceWidths(TFPFont *this, const unsigned __int16 *a2, double *a3, unint64_t a4)
{
  unsigned int NumberOfGlyphs = TFPFont::GetNumberOfGlyphs(this);
  long long v9 = (const TSFNTFont *)(*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (!v9) {
    goto LABEL_17;
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v32[3] = v10;
  v32[4] = v10;
  v32[1] = v10;
  v32[2] = v10;
  v32[0] = v10;
  ThmtxTable::ThmtxTable((uint64_t)v32, v9, NumberOfGlyphs | 0x100000000);
  if (a4)
  {
    uint64_t v11 = a2;
    unsigned int v12 = a3;
    unint64_t v13 = a4;
    do
    {
      unsigned int v15 = *v11++;
      unsigned int v14 = v15;
      double Advance = 0.0;
      if (NumberOfGlyphs > v15) {
        double Advance = (double)ThmtxTable::GetAdvance((ThmtxTable *)v32, v14);
      }
      *v12++ = Advance;
      --v13;
    }
    while (v13);
  }
  if (!*((void *)this + 42)) {
    goto LABEL_15;
  }
  HVARTable = (const DeltaSetIndexMap **)TFPFont::GetHVARTable((atomic_ullong *)this, v9);
  if (HVARTable)
  {
    unint64_t HVARScalars = TFPFont::GetHVARScalars((atomic_ullong *)this, (const THVARTable *)HVARTable);
    if (a4)
    {
      uint64_t v19 = (const double *)HVARScalars;
      if (HVARScalars)
      {
        uint64_t v20 = a2;
        uint64_t v21 = a3;
        unint64_t v22 = a4;
        do
        {
          unsigned int v24 = *v20++;
          uint64_t v23 = v24;
          if (NumberOfGlyphs > v24) {
            *uint64_t v21 = THVARTable::GetDelta((THVARTable *)HVARTable, v23, HVARTable[13], 0, 0, v19) + *v21;
          }
          ++v21;
          --v22;
        }
        while (v22);
      }
    }
LABEL_15:
    TDataReference::~TDataReference((TDataReference *)v32);
    return;
  }
  unint64_t Handler = TFPFont::GetHandler(this);
  TDataReference::~TDataReference((TDataReference *)v32);
  if (!Handler)
  {
LABEL_17:
    unint64_t v26 = TFPFont::GetHandler(this);
    if (v26)
    {
      (*(void (**)(unint64_t, const unsigned __int16 *, double *, unint64_t))(*(void *)v26 + 64))(v26, a2, a3, a4);
    }
    else
    {
      uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
      if (a4)
      {
        uint64_t v28 = EmSpaceTrueTypeScaler;
        if (EmSpaceTrueTypeScaler)
        {
          uint64_t v29 = 0;
          int v30 = 0;
          do
          {
            double v31 = 0.0;
            if (NumberOfGlyphs > a2[v29]) {
              double v31 = (*(double (**)(uint64_t, double))(*(void *)v28 + 32))(v28, 0.0);
            }
            a3[v29] = v31;
            uint64_t v29 = (unsigned __int16)++v30;
          }
          while ((unsigned __int16)v30 < a4);
        }
      }
    }
  }
}

void sub_1B5331F84(void *a1)
{
}

double TFPFont::GetGlyphIdealAdvanceAndSideBearing(TFPFont *this, uint64_t a2, double *a3, uint64_t a4)
{
  unsigned int NumberOfGlyphs = TFPFont::GetNumberOfGlyphs(this);
  if (NumberOfGlyphs > a2)
  {
    unsigned int v9 = NumberOfGlyphs;
    long long v10 = (const TSFNTFont *)(*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
    if (!v10) {
      return GetIdealAdvanceAndSideBearing(this, a2, a3, a4);
    }
    if (a4)
    {
      *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v43 = v11;
      long long v44 = v11;
      long long v41 = v11;
      long long v42 = v11;
      long long v40 = v11;
      ThmtxTable::ThmtxTable((uint64_t)&v40, v10, 1986553185, 1986884728, v9 | 0x100000000);
      *(void *)&long long v40 = &unk_1F0DFE0F0;
      if (*((void *)&v40 + 1) && *(void *)(*((void *)&v40 + 1) + 8))
      {
        __int16 v39 = -21846;
        unsigned int RawMetrics = ThmtxTable::GetRawMetrics((ThmtxTable *)&v40, a2, &v39);
        if (a3) {
          *a3 = (double)v39;
        }
        double v13 = (double)RawMetrics;
        if (!*((void *)this + 42)) {
          goto LABEL_43;
        }
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        *(_OWORD *)uint64_t v37 = v14;
        *(_OWORD *)uint64_t v38 = v14;
        long long v35 = v14;
        long long v36 = v14;
        long long v33 = v14;
        long long v34 = v14;
        long long v31 = v14;
        long long v32 = v14;
        TVVARTable::TVVARTable((TVVARTable *)&v31, v10);
        if (TsfntTable::operator BOOL((TsfntTable *)&v31))
        {
          unint64_t v30 = 0;
          unsigned int v15 = (const __int16 *)(*(uint64_t (**)(TFPFont *, unint64_t *))(*(void *)this + 232))(this, &v30);
          if (v15)
          {
            double v13 = THVARTable::GetDelta((THVARTable *)&v31, a2, v37[1], v30, v15, 0) + v13;
            if (a3)
            {
              if (v38[0]) {
                *a3 = THVARTable::GetDelta((THVARTable *)&v31, a2, v38[0], v30, v15, 0) + *a3;
              }
              else {
                GetIdealAdvanceAndSideBearing(this, a2, a3, 1);
              }
            }
          }
          TDataReference::~TDataReference((TDataReference *)&v31);
          goto LABEL_43;
        }
        TDataReference::~TDataReference((TDataReference *)&v31);
        unint64_t Handler = TFPFont::GetHandler(this);
        unint64_t v24 = Handler;
        if (a3 && Handler)
        {
          int v25 = *(_DWORD *)((*(uint64_t (**)(TFPFont *))(*(void *)this + 256))(this) + 12);
          v45.origin.x = (*(double (**)(TFPFont *, uint64_t))(*(void *)this + 568))(this, a2);
          *a3 = (double)(__int16)v25 - CGRectGetMaxY(v45);
LABEL_43:
          uint64_t v28 = (TDataReference *)&v40;
          goto LABEL_44;
        }
        long long v27 = (TDataReference *)&v40;
LABEL_37:
        TDataReference::~TDataReference(v27);
        if (v24) {
          return v13;
        }
        return GetIdealAdvanceAndSideBearing(this, a2, a3, a4);
      }
      unint64_t v22 = (TDataReference *)&v40;
      goto LABEL_26;
    }
    *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v34 = v16;
    long long v35 = v16;
    long long v32 = v16;
    long long v33 = v16;
    long long v31 = v16;
    ThmtxTable::ThmtxTable((uint64_t)&v31, v10, v9 | 0x100000000);
    if (!*((void *)&v31 + 1) || !*(void *)(*((void *)&v31 + 1) + 8))
    {
      unint64_t v22 = (TDataReference *)&v31;
LABEL_26:
      TDataReference::~TDataReference(v22);
      return GetIdealAdvanceAndSideBearing(this, a2, a3, a4);
    }
    LOWORD(v40) = 0;
    unsigned int v17 = ThmtxTable::GetRawMetrics((ThmtxTable *)&v31, a2, (__int16 *)&v40);
    if (a3) {
      *a3 = (double)(__int16)v40;
    }
    double v13 = (double)v17;
    if (*((void *)this + 42))
    {
      unint64_t HVARTable = TFPFont::GetHVARTable((atomic_ullong *)this, v10);
      if (HVARTable)
      {
        unint64_t HVARScalars = (const double *)TFPFont::GetHVARScalars((atomic_ullong *)this, (const THVARTable *)HVARTable);
        if (!HVARScalars) {
          goto LABEL_40;
        }
        double v13 = THVARTable::GetDelta((THVARTable *)HVARTable, a2, *(const DeltaSetIndexMap **)(HVARTable + 104), 0, 0, HVARScalars)+ v13;
        if (!a3) {
          goto LABEL_40;
        }
        uint64_t v20 = *(const DeltaSetIndexMap **)(HVARTable + 112);
        if (!v20)
        {
          GetIdealAdvanceAndSideBearing(this, a2, a3, 0);
          goto LABEL_40;
        }
        double MinX = THVARTable::GetDelta((THVARTable *)HVARTable, a2, v20, 0, 0, HVARScalars) + *a3;
      }
      else
      {
        unint64_t v26 = TFPFont::GetHandler(this);
        unint64_t v24 = v26;
        if (!a3 || !v26)
        {
          long long v27 = (TDataReference *)&v31;
          goto LABEL_37;
        }
        v46.origin.x = (*(double (**)(TFPFont *, uint64_t))(*(void *)this + 568))(this, a2);
        double MinX = CGRectGetMinX(v46);
      }
      *a3 = MinX;
    }
LABEL_40:
    uint64_t v28 = (TDataReference *)&v31;
LABEL_44:
    TDataReference::~TDataReference(v28);
    return v13;
  }
  double v13 = 0.0;
  if (a3) {
    *a3 = 0.0;
  }
  return v13;
}

double GetIdealAdvanceAndSideBearing(const TFPFont *a1, uint64_t a2, double *a3, uint64_t a4)
{
  unint64_t Handler = TFPFont::GetHandler(a1);
  if (!Handler)
  {
    uint64_t v10 = *((void *)a1 + 32);
    uint64_t v11 = *((void *)a1 + 35);
    unsigned int v12 = (const TFont *)*((void *)a1 + 2);
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v35[12] = v13;
    v34[1] = v13;
    *(_OWORD *)long long v35 = v13;
    if (a4) {
      int v14 = 8;
    }
    else {
      int v14 = 0;
    }
    v34[0] = v13;
    TStrikeTransform::TStrikeTransform((TStrikeTransform *)v34, v12, 0, v14);
    *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v33[8] = v15;
    v33[9] = v15;
    v33[6] = v15;
    v33[7] = v15;
    v33[4] = v15;
    v33[5] = v15;
    _OWORD v33[2] = v15;
    v33[3] = v15;
    v33[0] = v15;
    v33[1] = v15;
    TScalerStrike::TScalerStrike((uint64_t)v33, (uint64_t)v12, v10, v11, v34);
    uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)a1);
    if (a4)
    {
      TFontScaler::CreateFontScaler((uint64_t)v33, 0, &v31);
      uint64_t v17 = v31;
      uint64_t EmSpaceTrueTypeScaler = v31;
    }
    else
    {
      uint64_t v17 = 0;
    }
    if (a2 <= 0xFFFE && EmSpaceTrueTypeScaler)
    {
      if (!a3)
      {
        double v9 = (*(double (**)(uint64_t, void))(*(void *)EmSpaceTrueTypeScaler + 32))(EmSpaceTrueTypeScaler, (unsigned __int16)a2);
        if (!v17)
        {
LABEL_28:
          TScalerStrike::~TScalerStrike((TScalerStrike *)v33);
          return v9;
        }
LABEL_27:
        (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        goto LABEL_28;
      }
      *(double *)&uint64_t v31 = NAN;
      double v32 = NAN;
      *(double *)&uint64_t v29 = NAN;
      double v30 = NAN;
      if ((*(unsigned int (**)(uint64_t, void, uint64_t *, uint64_t *, void))(*(void *)EmSpaceTrueTypeScaler
                                                                                         + 72))(EmSpaceTrueTypeScaler, (unsigned __int16)a2, &v31, &v29, 0))
      {
        if (a4)
        {
          double v27 = -v30;
          double v9 = -v32;
        }
        else
        {
          double v27 = *(double *)&v29;
          double v9 = *(double *)&v31;
        }
        *a3 = v27;
        if (!v17) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
    }
    else if (!a3)
    {
      goto LABEL_22;
    }
    *a3 = 0.0;
LABEL_22:
    double v9 = 0.0;
    if (!v17) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  *(void *)&v33[0] = -1;
  if ((*(unsigned int (**)(unint64_t, uint64_t, _OWORD *, double *, uint64_t))(*(void *)Handler + 40))(Handler, a2, v33, a3, a4))
  {
    return *(double *)v33;
  }
  if (a4)
  {
    CGFloat v18 = (*(double (**)(const TFPFont *, uint64_t))(*(void *)a1 + 568))(a1, a2);
    CGFloat v20 = v19;
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    int v25 = *(_DWORD *)((*(uint64_t (**)(const TFPFont *))(*(void *)a1 + 256))(a1) + 12);
    int v26 = *(_DWORD *)((*(uint64_t (**)(const TFPFont *))(*(void *)a1 + 256))(a1) + 16);
    if (a3)
    {
      v36.origin.x = v18;
      v36.origin.y = v20;
      v36.size.width = v22;
      v36.size.height = v24;
      *a3 = (double)(__int16)v25 - CGRectGetMaxY(v36);
    }
    return (double)((__int16)v25 - (__int16)v26);
  }
  else
  {
    double v9 = 0.0;
    if (a3)
    {
      v37.origin.x = (*(double (**)(const TFPFont *, uint64_t))(*(void *)a1 + 568))(a1, a2);
      *a3 = CGRectGetMinX(v37);
    }
  }
  return v9;
}

void sub_1B5332820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  TScalerStrike::~TScalerStrike((TScalerStrike *)va);
  _Unwind_Resume(a1);
}

double TFPFont::GetGlyphIdealBounds(TFPFont *this, uint64_t a2)
{
  double v4 = *MEMORY[0x1E4F1DB28];
  if (TFPFont::GetNumberOfGlyphs(this) > a2)
  {
    unint64_t Handler = TFPFont::GetHandler(this);
    double v11 = NAN;
    double v12 = NAN;
    double v9 = NAN;
    double v10 = NAN;
    if (Handler
      && (*(unsigned int (**)(unint64_t, uint64_t, double *, double *, double *, double *, void))(*(void *)Handler + 48))(Handler, a2, &v12, &v11, &v10, &v9, 0))
    {
      if (v10 >= v12 && v9 >= v11) {
        return v12;
      }
    }
    else
    {
      unsigned int v6 = TFPFont::CopyGlyphPath(this, a2);
      if (v6)
      {
        uint64_t v7 = v6;
        *(void *)&double v4 = (unint64_t)CGPathGetBoundingBox(v6);
        CFRelease(v7);
      }
    }
  }
  return v4;
}

void sub_1B5332994(void *a1)
{
}

const CGPath *TFPFont::CopyGlyphPath(TFPFont *this, uint64_t a2)
{
  if (TFPFont::GetNumberOfGlyphs(this) <= a2) {
    return 0;
  }
  if (*((void *)this + 35))
  {
    unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)this + 53, memory_order_acquire);
    if (!explicit)
    {
      uint64_t v5 = (TGlyphOutlineCache *)(*(uint64_t (**)(void))(**((void **)this + 2) + 168))(*((void *)this + 2));
      TGlyphOutlineCache::CreateGlyphOutlineCache(v5);
    }
  }
  else
  {
    unint64_t explicit = TFont::GetGlyphOutlineCache(*((atomic_ullong **)this + 2));
  }
  if (!explicit)
  {
    char v8 = 1;
    goto LABEL_13;
  }
  unsigned int v6 = (const CGPath *)(*(uint64_t (**)(unint64_t, uint64_t))(*(void *)explicit + 24))(explicit, a2);
  uint64_t v7 = v6;
  if (!v6)
  {
    char v8 = 0;
LABEL_13:
    BOOL v18 = *((void *)this + 32) != 0;
    unint64_t Handler = TFPFont::GetHandler(this);
    if (Handler)
    {
      uint64_t v10 = (*(uint64_t (**)(unint64_t, uint64_t, BOOL *))(*(void *)Handler + 80))(Handler, a2, &v18);
    }
    else
    {
      uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
      double v12 = 0;
      if (a2 > 0xFFFE || !EmSpaceTrueTypeScaler)
      {
LABEL_19:
        uint64_t v7 = PathOrNullIfEmpty(v12);
        if (v7) {
          BOOL v13 = !v18;
        }
        else {
          BOOL v13 = 1;
        }
        if (!v13 && _os_feature_enabled_impl())
        {
          CGPathRef CopyByNormalizing = CGPathCreateCopyByNormalizing(v7, 0);
          long long v15 = v7;
          uint64_t v7 = CopyByNormalizing;
          CGPathRelease(v15);
        }
        if ((v8 & 1) == 0)
        {
          if (v7) {
            long long v16 = v7;
          }
          else {
            long long v16 = (const CGPath *)*MEMORY[0x1E4F1D260];
          }
          (*(void (**)(unint64_t, uint64_t, const CGPath *))(*(void *)explicit + 32))(explicit, a2, v16);
        }
        return v7;
      }
      uint64_t v10 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)EmSpaceTrueTypeScaler + 88))(EmSpaceTrueTypeScaler, (unsigned __int16)a2, 0);
    }
    double v12 = (const CGPath *)v10;
    goto LABEL_19;
  }
  if (v6 == (const CGPath *)*MEMORY[0x1E4F1D260])
  {
    CFRelease(v6);
    return 0;
  }
  return v7;
}

void sub_1B5332C28(void *a1)
{
}

double TFPFont::GetGlyphIdealVerticalBounds(TFPFont *this, uint64_t a2)
{
  double v4 = *MEMORY[0x1E4F1DB28];
  if (TFPFont::GetNumberOfGlyphs(this) <= a2) {
    return v4;
  }
  unint64_t Handler = TFPFont::GetHandler(this);
  if (!Handler)
  {
    uint64_t v6 = *((void *)this + 32);
    uint64_t v7 = *((void *)this + 35);
    char v8 = (const TFont *)*((void *)this + 2);
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v25[12] = v9;
    v24[1] = v9;
    *(_OWORD *)int v25 = v9;
    v24[0] = v9;
    TStrikeTransform::TStrikeTransform((TStrikeTransform *)v24, v8, 0, 8);
    *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v23[8] = v10;
    v23[9] = v10;
    v23[6] = v10;
    v23[7] = v10;
    _OWORD v23[4] = v10;
    v23[5] = v10;
    _OWORD v23[2] = v10;
    v23[3] = v10;
    v23[0] = v10;
    v23[1] = v10;
    TScalerStrike::TScalerStrike((uint64_t)v23, (uint64_t)v8, v6, v7, v24);
    double v27 = -3.72066208e-103;
    TFontScaler::CreateFontScaler((uint64_t)v23, 0, &v27);
    double v11 = v27;
    if (a2 > 0xFFFE || v27 == 0.0)
    {
      if (v27 == 0.0)
      {
LABEL_14:
        TScalerStrike::~TScalerStrike((TScalerStrike *)v23);
        return v4;
      }
    }
    else
    {
      double v4 = (*(double (**)(double, void))(**(void **)&v27 + 40))(COERCE_DOUBLE(*(void *)&v27), (unsigned __int16)a2);
    }
    (*(void (**)(double))(**(void **)&v11 + 8))(COERCE_DOUBLE(*(void *)&v11));
    goto LABEL_14;
  }
  *(void *)&v23[0] = -1;
  *(void *)&v24[0] = -1;
  double v26 = NAN;
  double v27 = NAN;
  if ((*(unsigned int (**)(unint64_t, uint64_t, _OWORD *, long long *, double *, double *, uint64_t))(*(void *)Handler + 48))(Handler, a2, v23, v24, &v27, &v26, 1))
  {
    if (v27 >= *(double *)v23 && v26 >= *(double *)v24) {
      return *(double *)v23;
    }
  }
  else
  {
    CGFloat v12 = (*(double (**)(TFPFont *, uint64_t))(*(void *)this + 568))(this, a2);
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v19 = (*(double (**)(TFPFont *, uint64_t))(*(void *)this + 624))(this, a2);
    CGFloat v21 = v20;
    v28.origin.x = v12;
    v28.origin.y = v14;
    v28.size.width = v16;
    v28.size.height = v18;
    *(void *)&double v4 = (unint64_t)CGRectOffset(v28, v19, v21);
  }
  return v4;
}

void sub_1B5332F1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  TScalerStrike::~TScalerStrike((TScalerStrike *)&a9);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5332EE4);
}

double TFPFont::GetGlyphVerticalTranslate(TFPFont *this, uint64_t a2)
{
  double v4 = *MEMORY[0x1E4F1DB30];
  unsigned int NumberOfGlyphs = TFPFont::GetNumberOfGlyphs(this);
  if (NumberOfGlyphs <= a2) {
    return v4;
  }
  unsigned int v6 = NumberOfGlyphs;
  unint64_t Handler = TFPFont::GetHandler(this);
  v47[0] = -1;
  v47[1] = -1;
  if (Handler
    && (*(unsigned int (**)(unint64_t, uint64_t, void *))(*(void *)Handler + 56))(Handler, a2, v47))
  {
    return *(double *)v47;
  }
  char v8 = (const TSFNTFont *)(*(uint64_t (**)(void))(**((void **)this + 2) + 432))(*((void *)this + 2));
  if (!v8)
  {
LABEL_36:
    v62.origin.x = (*(double (**)(TFPFont *, uint64_t))(*(void *)this + 568))(this, a2);
    CGRectGetMaxY(v62);
    double v30 = (*(double (**)(TFPFont *, uint64_t, void, void))(*(void *)this + 560))(this, a2, 0, 0);
    *(void *)&long long v49 = 0;
    (*(void (**)(TFPFont *, uint64_t, long long *, uint64_t))(*(void *)this + 560))(this, a2, &v49, 1);
    return v30 * -0.5;
  }
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v61[3] = v9;
  v61[4] = v9;
  v61[1] = v9;
  v61[2] = v9;
  v61[0] = v9;
  long long v10 = (TsfntTable *)ThmtxTable::ThmtxTable((uint64_t)v61, v8, 1986553185, 1986884728, v6 | 0x100000000);
  *(void *)&v61[0] = &unk_1F0DFE0F0;
  if (!TsfntTable::operator BOOL(v10))
  {
LABEL_35:
    TDataReference::~TDataReference((TDataReference *)v61);
    goto LABEL_36;
  }
  unint64_t v60 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v58 = v11;
  long long v59 = v11;
  long long v57 = v11;
  TsfntTable::TsfntTable((TsfntTable *)&v57, v8, 1448038983);
  *(void *)&long long v57 = &unk_1F0DFE4F8;
  if (*((void *)&v57 + 1) && (uint64_t v12 = *(void *)(*((void *)&v57 + 1) + 8)) != 0) {
    double v13 = (_WORD *)(v12 + v58);
  }
  else {
    double v13 = 0;
  }
  unint64_t TableEnd = TsfntTable::GetTableEnd((TsfntTable *)&v57);
  uint64_t v15 = *((void *)&v57 + 1);
  if (*((void *)&v57 + 1))
  {
    uint64_t v15 = *(void *)(*((void *)&v57 + 1) + 8);
    if (v15) {
      v15 += v58;
    }
  }
  if (TableEnd - v15 < 8 || *v13 != 256)
  {
    *(void *)&long long v49 = &unk_1F0DD4218;
    *((void *)&v49 + 1) = 0;
    long long v50 = 0uLL;
    TDataReference::DucRefCount((TDataReference *)&v57);
    uint64_t v16 = *((void *)&v49 + 1);
    *((void *)&v49 + 1) = 0;
    *((void *)&v57 + 1) = v16;
    long long v58 = v50;
    TDataReference::~TDataReference((TDataReference *)&v49);
  }
  if (!TsfntTable::operator BOOL((TsfntTable *)&v57))
  {
    TDataReference::~TDataReference((TDataReference *)&v57);
    goto LABEL_35;
  }
  uint64_t v17 = *(void *)(*((void *)&v57 + 1) + 8) + v58;
  unsigned int v18 = *(unsigned __int16 *)(v17 + 6);
  unint64_t v19 = TsfntTable::GetTableEnd((TsfntTable *)&v57);
  double v20 = (unsigned __int16 *)(v17 + 8);
  unsigned int v21 = __rev16(v18);
  unint64_t v22 = v17 + 8 + 4 * v21;
  if (v17 + 12 <= v19) {
    unsigned int v23 = (v19 - (v17 + 8)) >> 2;
  }
  else {
    LOWORD(v23) = 0;
  }
  if (v22 > v19 || v22 < (unint64_t)v20) {
    LOWORD(v21) = v23;
  }
  if ((_WORD)v21)
  {
    unint64_t v25 = (unsigned __int16)v21;
    double v26 = &v20[2 * (unsigned __int16)v21];
    do
    {
      unint64_t v27 = v25 >> 1;
      CGRect v28 = &v20[2 * (v25 >> 1)];
      unsigned int v29 = bswap32(*v28) >> 16;
      if (v29 >= a2)
      {
        if (v29 <= a2)
        {
          if (v25 >= 2)
          {
            double v32 = v20;
            do
            {
              unint64_t v33 = v27 >> 1;
              long long v34 = &v32[2 * (v27 >> 1)];
              unsigned int v36 = *v34;
              long long v35 = v34 + 2;
              v27 += ~(v27 >> 1);
              if (bswap32(v36) >> 16 >= a2) {
                unint64_t v27 = v33;
              }
              else {
                double v32 = v35;
              }
            }
            while (v27);
          }
          CGRect v37 = v28 + 2;
          if (v26 != v37)
          {
            unint64_t v38 = ((char *)v26 - (char *)v37) >> 2;
            __int16 v39 = v37;
            do
            {
              unint64_t v40 = v38 >> 1;
              long long v41 = &v39[2 * (v38 >> 1)];
              unsigned int v43 = *v41;
              long long v42 = v41 + 2;
              v38 += ~(v38 >> 1);
              if (bswap32(v43) >> 16 > a2) {
                unint64_t v38 = v40;
              }
              else {
                __int16 v39 = v42;
              }
            }
            while (v38);
          }
          break;
        }
        double v26 = &v20[2 * (v25 >> 1)];
      }
      else
      {
        double v20 = v28 + 2;
        unint64_t v27 = v25 + ~v27;
      }
      unint64_t v25 = v27;
    }
    while (v27);
  }
  ThmtxTable::ThmtxTable((uint64_t)&v49, v8, 0);
  unsigned int Advance = ThmtxTable::GetAdvance((ThmtxTable *)&v49, a2);
  TDataReference::~TDataReference((TDataReference *)&v49);
  *(void *)&long long v45 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v45 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v56 = v45;
  long long v54 = v45;
  long long v55 = v45;
  long long v52 = v45;
  long long v53 = v45;
  long long v50 = v45;
  long long v51 = v45;
  long long v49 = v45;
  TVVARTable::TVVARTable((TVVARTable *)&v49, v8);
  if (TsfntTable::operator BOOL((TsfntTable *)&v49))
  {
    if (*((void *)&v56 + 1))
    {
      unint64_t v48 = 0;
      CGRect v46 = (const __int16 *)(*(uint64_t (**)(TFPFont *, unint64_t *))(*(void *)this + 232))(this, &v48);
      if (v46) {
        THVARTable::GetDelta((THVARTable *)&v49, a2, *((const DeltaSetIndexMap **)&v56 + 1), v48, v46, 0);
      }
    }
  }
  double v4 = (double)-(Advance >> 1);
  TDataReference::~TDataReference((TDataReference *)&v49);
  TDataReference::~TDataReference((TDataReference *)&v57);
  TDataReference::~TDataReference((TDataReference *)v61);
  return v4;
}

void sub_1B53334EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  TDataReference::~TDataReference((TDataReference *)&a13);
  TDataReference::~TDataReference((TDataReference *)&a29);
  TDataReference::~TDataReference((TDataReference *)(v29 - 176));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5333340);
}

double TFPFont::GetGlyphDeviceAdvance(CGAffineTransform *this, const CGAffineTransform *a2, uint64_t a3)
{
  double v6 = *MEMORY[0x1E4F1DB30];
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) > a3)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    CreateHintedFontScaler((const TFPFont *)&v10, this, a2, 0);
    unint64_t v7 = v10;
    if (a3 <= 0xFFFE && v10)
    {
      double v8 = (*(double (**)(unint64_t, void))(*(void *)v10 + 48))(v10, (unsigned __int16)a3);
    }
    else
    {
      double v8 = (*(double (**)(CGAffineTransform *, uint64_t, void, void))(*(void *)&this->a + 560))(this, a3, 0, 0);
      if (!v7) {
        return v8;
      }
    }
    (*(void (**)(unint64_t))(*(void *)v7 + 8))(v7);
    return v8;
  }
  return v6;
}

void sub_1B53336B0(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B533368CLL);
}

void CreateHintedFontScaler(const TFPFont *a1, const CGAffineTransform *a2, const CGAffineTransform *a3, int a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  CGFloat c = a2[5].c;
  uint64_t v7 = *(void *)&a2[5].ty;
  uint64_t v8 = *(void *)&a2->c;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v17 + 12) = v9;
  v16[1] = v9;
  v17[0] = v9;
  v16[0] = v9;
  TStrikeTransform::TStrikeTransform((TStrikeTransform *)v16, (const TFont *)v8, a3, a4 | 1);
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[8] = v10;
  v15[9] = v10;
  v15[6] = v10;
  v15[7] = v10;
  v15[4] = v10;
  v15[5] = v10;
  _OWORD v15[2] = v10;
  v15[3] = v10;
  v15[0] = v10;
  v15[1] = v10;
  TScalerStrike::TScalerStrike((uint64_t)v15, v8, LODWORD(c), v7, v16);
  CGFloat ty = a2->ty;
  if (ty == 0.0)
  {
    BOOL v14 = 0;
  }
  else
  {
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[0] = v12;
    v21[1] = v12;
    int64x2_t v19 = 0uLL;
    uint64_t v20 = 0;
    unint64_t v22 = v21;
    CString = GetCStringPtr<TInlineVector<char,30ul>>(*(const __CFString **)&ty, &v19, 0x8000100u);
    BOOL v14 = strncmp(CString, "/System/", 8uLL) == 0;
    unsigned int v18 = &v19;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v18);
  }
  *(void *)a1 = 0xAAAAAAAAAAAAAAAALL;
  TFontScaler::CreateFontScaler((uint64_t)v15, v14, a1);
  if (!*(void *)a1) {
    *(void *)a1 = 0;
  }
  TScalerStrike::~TScalerStrike((TScalerStrike *)v15);
}

void sub_1B533385C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 144) = v9;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)(v10 - 144));
  TScalerStrike::~TScalerStrike((TScalerStrike *)&a9);
  _Unwind_Resume(a1);
}

double TFPFont::GetGlyphDeviceVerticalAdvance(CGAffineTransform *this, const CGAffineTransform *a2, uint64_t a3)
{
  double v6 = *MEMORY[0x1E4F1DB30];
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) > a3)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    CreateHintedFontScaler((const TFPFont *)&v10, this, a2, 8);
    unint64_t v7 = v10;
    if (a3 <= 0xFFFE && v10)
    {
      double v8 = (*(double (**)(unint64_t, void))(*(void *)v10 + 48))(v10, (unsigned __int16)a3);
    }
    else
    {
      double v8 = (*(double (**)(CGAffineTransform *, uint64_t, void, uint64_t))(*(void *)&this->a + 560))(this, a3, 0, 1);
      if (!v7) {
        return v8;
      }
    }
    (*(void (**)(unint64_t))(*(void *)v7 + 8))(v7);
    return v8;
  }
  return v6;
}

void sub_1B53339D4(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B53339B0);
}

double TFPFont::GetGlyphDeviceBounds(CGAffineTransform *this, const CGAffineTransform *a2, uint64_t a3)
{
  double v6 = *MEMORY[0x1E4F1DB28];
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) > a3)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
    CreateHintedFontScaler((const TFPFont *)&v10, this, a2, 0);
    unint64_t v7 = v10;
    if (a3 <= 0xFFFE && v10)
    {
      double v8 = (*(double (**)(unint64_t, void))(*(void *)v10 + 56))(v10, (unsigned __int16)a3);
    }
    else
    {
      double v8 = (*(double (**)(CGAffineTransform *, uint64_t))(*(void *)&this->a + 568))(this, a3);
      if (!v7) {
        return v8;
      }
    }
    (*(void (**)(unint64_t))(*(void *)v7 + 8))(v7);
    return v8;
  }
  return v6;
}

void sub_1B5333BA0(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5333B6CLL);
}

double TFPFont::GetGlyphDeviceVerticalBounds(CGAffineTransform *this, const CGAffineTransform *a2, uint64_t a3)
{
  double v6 = *MEMORY[0x1E4F1DB28];
  if (TFPFont::GetNumberOfGlyphs((TFPFont *)this) > a3)
  {
    unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
    CreateHintedFontScaler((const TFPFont *)&v30, this, a2, 8);
    unint64_t v7 = v30;
    if (a3 <= 0xFFFE && v30)
    {
      CGFloat x = (*(double (**)(unint64_t, void))(*(void *)v30 + 56))(v30, (unsigned __int16)a3);
    }
    else
    {
      CGFloat v9 = (*(double (**)(CGAffineTransform *, uint64_t))(*(void *)&this->a + 568))(this, a3);
      CGFloat v11 = v10;
      CGFloat v13 = v12;
      CGFloat v15 = v14;
      CGFloat v16 = (*(double (**)(CGAffineTransform *, uint64_t))(*(void *)&this->a + 624))(this, a3);
      CGFloat v18 = v17;
      v31.origin.CGFloat x = v9;
      v31.origin.CGFloat y = v11;
      v31.size.CGFloat width = v13;
      v31.size.CGFloat height = v15;
      CGRect v32 = CGRectOffset(v31, v16, v18);
      CGFloat x = v32.origin.x;
      CGFloat y = v32.origin.y;
      CGFloat width = v32.size.width;
      CGFloat height = v32.size.height;
      if (a2)
      {
        long long v22 = *(_OWORD *)&a2->c;
        *(_OWORD *)&v29.a = *(_OWORD *)&a2->a;
        *(_OWORD *)&v29.CGFloat c = v22;
        *(_OWORD *)&v29.tCGFloat x = *(_OWORD *)&a2->tx;
        if (!CGAffineTransformIsIdentity(&v29))
        {
          long long v23 = *(_OWORD *)&a2->c;
          *(_OWORD *)&v28.a = *(_OWORD *)&a2->a;
          *(_OWORD *)&v28.CGFloat c = v23;
          *(_OWORD *)&v28.tCGFloat x = *(_OWORD *)&a2->tx;
          CGFloat v24 = x;
          *(CGFloat *)&long long v23 = y;
          CGFloat v25 = width;
          CGFloat v26 = height;
          *(void *)&CGFloat x = (unint64_t)CGRectApplyAffineTransform(*(CGRect *)((char *)&v23 - 8), &v28);
        }
      }
      if (!v7) {
        return x;
      }
    }
    (*(void (**)(unint64_t))(*(void *)v7 + 8))(v7);
    return x;
  }
  return v6;
}

void sub_1B5333E24(void *a1)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1B5333DF0);
}

uint64_t TFPFont::CopyGlyphBitmap(TFPFont *this, const CGAffineTransform *a2, unsigned int a3, uint64_t a4, CGRect *a5, unint64_t *a6)
{
  if (TFPFont::GetNumberOfGlyphs(this) <= a3) {
    return 0;
  }
  unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  CreateHintedFontScaler((const TFPFont *)&v15, (const CGAffineTransform *)this, a2, 0);
  unint64_t v12 = v15;
  if (a3 <= 0xFFFE && v15)
  {
    uint64_t v13 = (*(uint64_t (**)(unint64_t, void, uint64_t, CGRect *, unint64_t *))(*(void *)v15 + 104))(v15, (unsigned __int16)a3, a4, a5, a6);
LABEL_6:
    (*(void (**)(unint64_t))(*(void *)v12 + 8))(v12);
    return v13;
  }
  uint64_t v13 = 0;
  if (v15) {
    goto LABEL_6;
  }
  return v13;
}

const CGPath *PathOrNullIfEmpty(CGPathRef path)
{
  uint64_t v1 = path;
  if (path)
  {
    if (CGPathIsEmpty(path) || (BoundingBoCGFloat x = CGPathGetBoundingBox(v1), CGRectIsEmpty(BoundingBox)))
    {
      CGPathRelease(v1);
      return 0;
    }
  }
  return v1;
}

const CGPath *TFPFont::CopyGlyphPath(TFPFont *this, const CGAffineTransform *a2, uint64_t a3)
{
  uint64_t v5 = TFPFont::CopyGlyphPath(this, a3);
  if (a2)
  {
    long long v6 = *(_OWORD *)&a2->c;
    *(_OWORD *)&v14.a = *(_OWORD *)&a2->a;
    *(_OWORD *)&v14.CGFloat c = v6;
    *(_OWORD *)&v14.tCGFloat x = *(_OWORD *)&a2->tx;
    if (!CGAffineTransformIsIdentity(&v14))
    {
      UnitsPerEuint64_t m = TFPFont::GetUnitsPerEm((uint64_t)this);
      double v8 = PathOrNullIfEmpty(v5);
      if (v8)
      {
        CGFloat v9 = v8;
        float64x2_t v10 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)UnitsPerEm), 0);
        float64x2_t v11 = vdivq_f64(*(float64x2_t *)&a2->a, v10);
        float64x2_t v12 = vdivq_f64(*(float64x2_t *)&a2->c, v10);
        v15[0] = v11;
        v15[1] = v12;
        _OWORD v15[2] = *(_OWORD *)&a2->tx;
        uint64_t v5 = (const CGPath *)MEMORY[0x1BA999270](v8, v15);
        CGPathRelease(v9);
      }
      else
      {
        return 0;
      }
    }
  }
  return v5;
}

uint64_t TFPFont::CopyOriginalGlyphPath(TFPFont *this, const CGAffineTransform *a2, uint64_t a3)
{
  if (TFPFont::GetNumberOfGlyphs(this) <= a3) {
    return 0;
  }
  if (a2)
  {
    long long v6 = *(_OWORD *)&a2->c;
    *(_OWORD *)&v15.a = *(_OWORD *)&a2->a;
    *(_OWORD *)&v15.CGFloat c = v6;
    *(_OWORD *)&v15.tCGFloat x = *(_OWORD *)&a2->tx;
    if (CGAffineTransformIsIdentity(&v15)) {
      a2 = 0;
    }
  }
  unint64_t Handler = TFPFont::GetHandler(this);
  if (Handler)
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v12 = v8;
    long long v13 = v8;
    TGlyphOutlineContext::TGlyphOutlineContext((TGlyphOutlineContext *)&v12, a2);
    (*(void (**)(unint64_t, uint64_t, long long *, void))(*(void *)Handler + 72))(Handler, a3, &v12, 0);
    uint64_t v9 = v13;
    *(void *)&long long v13 = 0;
    TGlyphOutlineContext::~TGlyphOutlineContext((CGPathRef *)&v12);
  }
  else
  {
    uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
    uint64_t v9 = 0;
    if (a3 <= 0xFFFE && EmSpaceTrueTypeScaler) {
      return (*(uint64_t (**)(uint64_t, void, const CGAffineTransform *))(*(void *)EmSpaceTrueTypeScaler
    }
                                                                                   + 88))(EmSpaceTrueTypeScaler, (unsigned __int16)a3, a2);
  }
  return v9;
}

uint64_t TFPFont::CopyHintedGlyphPath(TFPFont *this, const CGAffineTransform *a2, unsigned int a3)
{
  if (TFPFont::GetNumberOfGlyphs(this) <= a3) {
    return 0;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  CreateHintedFontScaler((const TFPFont *)&v9, (const CGAffineTransform *)this, a2, 0);
  unint64_t v6 = v9;
  if (a3 <= 0xFFFE && v9)
  {
    uint64_t v7 = (*(uint64_t (**)(unint64_t, void, void))(*(void *)v9 + 88))(v9, (unsigned __int16)a3, 0);
LABEL_6:
    (*(void (**)(unint64_t))(*(void *)v6 + 8))(v6);
    return v7;
  }
  uint64_t v7 = 0;
  if (v9) {
    goto LABEL_6;
  }
  return v7;
}

uint64_t TFPFont::GetFontSubsetFormat(TType1PSFont **this, const TFont *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  *(void *)&v14[0] = 0xAAAAAAAAAAAAAAAALL;
  TType1PSFont::GetFont(this[2], a2, v14);
  uint64_t v3 = *(void *)&v14[0];
  if (!*(void *)&v14[0])
  {
    unint64_t Handler = TFPFont::GetHandler((TFPFont *)this);
    if (Handler && ((*(uint64_t (**)(unint64_t))(*(void *)Handler + 96))(Handler) & 1) != 0) {
      return 2;
    }
    uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
    if (!EmSpaceTrueTypeScaler) {
      return EmSpaceTrueTypeScaler;
    }
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v14[6] = v7;
    v14[7] = v7;
    v14[4] = v7;
    v14[5] = v7;
    void v14[2] = v7;
    v14[3] = v7;
    int v8 = 962;
    unint64_t v9 = (int *)v14;
    v14[0] = v7;
    v14[1] = v7;
    while (1)
    {
      int v13 = v8;
      if (!(*(unsigned int (**)(uint64_t, int *))(*(void *)EmSpaceTrueTypeScaler + 128))(EmSpaceTrueTypeScaler, &v13))
      {
LABEL_21:
        int *v9 = 0;
        return CGFontFormatFromStreamType(LODWORD(v14[0]), (uint64_t)this);
      }
      int v10 = v13;
      if ((v13 & 0x40) != 0) {
        break;
      }
      if ((v13 & 2) != 0)
      {
        int v11 = 2;
        goto LABEL_19;
      }
      if ((v13 & 0x200) != 0)
      {
        int v11 = 512;
        goto LABEL_19;
      }
      if ((v13 & 0x100) != 0)
      {
        int v11 = 256;
        goto LABEL_19;
      }
      if ((v13 & 0x80) != 0)
      {
        int v11 = 128;
LABEL_19:
        *v9++ = v11;
        int v10 = v13;
      }
      v8 &= ~v10;
      if (!v8) {
        goto LABEL_21;
      }
    }
    int v11 = 64;
    goto LABEL_19;
  }
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(**(void **)&v14[0] + 48))(*(void *)&v14[0], 962);
  uint64_t EmSpaceTrueTypeScaler = CGFontFormatFromStreamType(v4, (uint64_t)this);
  (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  return EmSpaceTrueTypeScaler;
}

void sub_1B53345C4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1B5334590);
  }
  _Unwind_Resume(a1);
}

uint64_t CGFontFormatFromStreamType(uint64_t result, uint64_t a2)
{
  if ((int)result <= 127)
  {
    if (result == 2) {
      return result;
    }
    return result == 64;
  }
  if (result != 128)
  {
    if (result == 256) {
      return 4;
    }
    if (result == 512) {
      return 3;
    }
    return 0;
  }
  if (FPFontCopyRegistryOrderingSupplement(a2)) {
    return 5;
  }
  else {
    return 1;
  }
}

CFMutableDataRef TFPFont::CreateFontSubset(TFPFont *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    unint64_t Handler = TFPFont::GetHandler(a1);
    if (!Handler
      || ((a2 - 1) > 4 ? (uint64_t v15 = 0) : (uint64_t v15 = dword_1B5400D84[a2 - 1]),
          ((*(uint64_t (**)(unint64_t, TFPFont *, uint64_t, uint64_t, uint64_t, void, CFMutableDataRef))(*(void *)Handler + 112))(Handler, a1, v15, a3, a5, 0, Mutable) & 1) == 0))
    {
      uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)a1);
      if (!EmSpaceTrueTypeScaler)
      {
        CFRelease(Mutable);
        return 0;
      }
      if ((a2 - 1) > 4) {
        unsigned int v17 = 0;
      }
      else {
        unsigned int v17 = dword_1B5400D84[a2 - 1];
      }
      unsigned int v19 = v17;
      if ((FPOFAStreamPSDownload(EmSpaceTrueTypeScaler, (uint64_t)&v19, 0, a3, a5, a6, a7, (uint64_t)Mutable) & 1) == 0)
      {
        CFRelease(Mutable);
        return 0;
      }
    }
  }
  return Mutable;
}

uint64_t FPOFAStreamPSDownload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CGFloat v16 = malloc_type_calloc(1uLL, 0x26uLL, 0x108004086473A5EuLL);
  unsigned int v19 = v16;
  *CGFloat v16 = 1;
  *(void *)(v16 + 5) = AppendBytes;
  *(void *)(v16 + 7) = a8;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, void **, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2, &v19, 0, a4, a5, a3, 1, a6, a7);
  free(v19);
  return v17;
}

void sub_1B53348E0(void *a1)
{
}

void sub_1B53348F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

uint64_t TFPFont::CanCreatePostScriptSubset(TType1PSFont **this, const TFont *a2)
{
  int v2 = (int)a2;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  TType1PSFont::GetFont(this[2], a2, &v11);
  unint64_t v4 = v11;
  if (!v11) {
    goto LABEL_14;
  }
  if (v2 > 2)
  {
    if (v2 != 42)
    {
      if (v2 == 3)
      {
        uint64_t v5 = 4;
        goto LABEL_12;
      }
      goto LABEL_9;
    }
    uint64_t v5 = 8;
  }
  else
  {
    if (v2 != -42)
    {
      if (v2 == 1)
      {
        uint64_t v5 = 2;
        goto LABEL_12;
      }
LABEL_9:
      uint64_t v5 = 0;
      goto LABEL_12;
    }
    uint64_t v5 = 32;
  }
LABEL_12:
  int v6 = (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)v11 + 48))(v11, v5) & v5;
  (*(void (**)(unint64_t))(*(void *)v4 + 8))(v4);
  if (v6) {
    return 1;
  }
LABEL_14:
  unint64_t Handler = TFPFont::GetHandler((TFPFont *)this);
  if (Handler && (*(unsigned int (**)(unint64_t))(*(void *)Handler + 96))(Handler)) {
    return v2 == 1;
  }
  uint64_t result = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
  if (result)
  {
    if (v2 > 2)
    {
      if (v2 != 42)
      {
        if (v2 == 3)
        {
          int v9 = 4;
          goto LABEL_28;
        }
        goto LABEL_25;
      }
      int v9 = 8;
    }
    else
    {
      if (v2 != -42)
      {
        if (v2 == 1)
        {
          int v9 = 2;
          goto LABEL_28;
        }
LABEL_25:
        int v9 = 0;
        goto LABEL_28;
      }
      int v9 = 32;
    }
LABEL_28:
    int v10 = v9;
    return (*(unsigned int (**)(uint64_t, int *))(*(void *)result + 128))(result, &v10) && (v10 & v9) != 0;
  }
  return result;
}

void sub_1B5334B1C(void *a1)
{
}

uint64_t TFPFont::CreatePostScriptSubset(TFPFont *this, const __CFString *a2, CGFontPostScriptFormat a3, const unsigned __int16 *a4, unint64_t a5, const unsigned __int16 *a6)
{
  if (CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0))
  {
    TFPFont::GetNumberOfGlyphs(this);
    operator new[]();
  }
  return 0;
}

void sub_1B5334E80(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    *(void *)(v3 - 168) = v3 - 160;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)(v3 - 168));
    MEMORY[0x1BA9994A0](v2, 0x1000C8052888210);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1B5334E30);
  }
  _Unwind_Resume(exception_object);
}

CFMutableDataRef TFPFont::CreatePostScriptEncoding(TFPFont *this, const unsigned __int16 *a2)
{
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    unint64_t Handler = TFPFont::GetHandler(this);
    if (!Handler
      || ((*(uint64_t (**)(unint64_t, const unsigned __int16 *, CFMutableDataRef))(*(void *)Handler
                                                                                                  + 104))(Handler, a2, Mutable) & 1) == 0)
    {
      uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
      if (!EmSpaceTrueTypeScaler) {
        goto LABEL_6;
      }
      int v10 = 6;
      long long v7 = malloc_type_calloc(1uLL, 0x26uLL, 0x108004086473A5EuLL);
      unint64_t v11 = v7;
      *long long v7 = 1;
      *(void *)(v7 + 5) = AppendBytes;
      *(void *)(v7 + 7) = Mutable;
      char v8 = (*(uint64_t (**)(uint64_t, int *, void **, void, const unsigned __int16 *))(*(void *)EmSpaceTrueTypeScaler
                                                                                                + 144))(EmSpaceTrueTypeScaler, &v10, &v11, 0, a2);
      free(v11);
      if ((v8 & 1) == 0)
      {
        CFRelease(Mutable);
        return 0;
      }
      else
      {
LABEL_6:
        CFDataAppendBytes(Mutable, (const UInt8 *)"\n", 1);
      }
    }
  }
  return Mutable;
}

void sub_1B5335050(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  __cxa_begin_catch(a1);
  CFRelease(v10);
  __cxa_end_catch();
  JUMPOUT(0x1B5335034);
}

void sub_1B5335084(_Unwind_Exception *a1)
{
}

void TFPFontImpl::PurgeCachesCxx(TFPFontImpl *this, const char *a2)
{
  pthread_once(&TLockedLRUCache<TTableCacheNode,16ul>::GetCache(void)::once, (void (*)(void))TLockedLRUCache<TTableCacheNode,16ul>::CreateCache);
  uint64_t v3 = TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache;
  unint64_t v4 = (os_unfair_lock_s *)(TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache + 784);
  os_unfair_lock_lock((os_unfair_lock_t)(TLockedLRUCache<TTableCacheNode,16ul>::sSharedCache + 784));
  if (v3)
  {
    uint64_t v5 = (uint64_t *)(v3 + 768);
    while (1)
    {
      uint64_t v6 = v3 + 768;
      while (1)
      {
        uint64_t v7 = *(void *)v6;
        uint64_t v6 = v3 + 48 * *(void *)v6;
        if (*(void *)(v6 + 8))
        {
          char v8 = *(const void **)(v3 + 48 * v7 + 32);
          if (v8)
          {
            if (CFGetRetainCount(v8) == 1)
            {
              if (!this) {
                break;
              }
              uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v6 + 8) + 56))();
              int v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
              if (v10)
              {
                if (!strcmp((const char *)this, v10)) {
                  break;
                }
              }
            }
          }
        }
        if (*(void *)(v3 + 776) == v7) {
          goto LABEL_20;
        }
      }
      uint64_t v11 = *(void *)(v3 + 776);
      uint64_t v12 = *(void *)(v3 + 768);
      int v13 = (uint64_t *)(v3 + 48 * v12);
      if (TTableCacheNode::operator==((uint64_t)v13, v6))
      {
LABEL_15:
        uint64_t v15 = *v13;
        if (v12 == *v5) {
          *uint64_t v5 = v15;
        }
        int v18 = -1431655766;
        memset(v17, 0, sizeof(v17));
        TTableCacheNode::operator=((uint64_t)v13, (uint64_t)v17);
        uint64_t v16 = *(void *)(v3 + 776);
        if (v12 != v16)
        {
          *(void *)(v3 + 48 * v11) = v15;
          *(void *)(v3 + 48 * v16) = v12;
          *(void *)(v3 + 776) = v12;
        }
        *int v13 = *v5;
        TTableCacheNode::~TTableCacheNode((TTableCacheNode *)v17);
      }
      else
      {
        while (v12 != *(void *)(v3 + 776))
        {
          uint64_t v14 = *v13;
          int v13 = (uint64_t *)(v3 + 48 * *v13);
          uint64_t v11 = v12;
          uint64_t v12 = v14;
          if (TTableCacheNode::operator==((uint64_t)v13, v6)) {
            goto LABEL_15;
          }
        }
      }
    }
  }
LABEL_20:
  os_unfair_lock_unlock(v4);
  PurgeTFontCache((const char *)this);
  PurgeFileFragmentCache((const char *)this);
}

void sub_1B5335288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TTableCacheNode::~TTableCacheNode((TTableCacheNode *)&a9);
  os_unfair_lock_unlock(v9);
  _Unwind_Resume(a1);
}

void TFPFont::PurgeFromCaches(TFPFont *this)
{
  __b[132] = *(char **)MEMORY[0x1E4F143B8];
  CFStringRef v1 = (const __CFString *)*((void *)this + 5);
  if (v1)
  {
    CFIndex v2 = CFStringGetMaximumSizeOfFileSystemRepresentation(*((CFStringRef *)this + 5)) + 1;
    memset(__b, 170, 0x420uLL);
    LOBYTE(v5) = 0;
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(__b, v2, &v5);
    uint64_t v3 = (TFPFontImpl *)__b[0];
    if (CFStringGetFileSystemRepresentation(v1, __b[0], v2)) {
      TFPFontImpl::PurgeCachesCxx(v3, v4);
    }
    uint64_t v5 = __b;
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v5);
  }
}

void sub_1B5335370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

CFTypeRef TFPFont::CopySplicedStash(TFPFont *this)
{
  CFStringRef v1 = (void *)*((void *)this + 2);
  if (!v1 || (*(unsigned int (**)(void))(*v1 + 40))(*((void *)this + 2)) != 32) {
    return 0;
  }
  CFTypeRef result = (CFTypeRef)v1[9];
  if (result) {
    return CFRetain(result);
  }
  return result;
}

uint64_t TFPFont::GetFormat(TFPFont *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 40))();
}

double TFPFont::GetVariationScalar(os_unfair_lock_s *this, uint64_t a2)
{
  double v2 = 0.0;
  if (*(void *)&this[70]._os_unfair_lock_opaque)
  {
    uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler(this);
    if (EmSpaceTrueTypeScaler) {
      return (*(double (**)(uint64_t, uint64_t))(*(void *)EmSpaceTrueTypeScaler + 152))(EmSpaceTrueTypeScaler, a2);
    }
  }
  return v2;
}

void sub_1B533549C(void *a1)
{
}

uint64_t TFPFont::GetVariationScalars(TFPFont *this, uint64_t a2, double *a3)
{
  if (!*((void *)this + 35)) {
    return 0;
  }
  uint64_t result = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, double *))(*(void *)result + 160))(result, a2, a3);
  }
  return result;
}

void TFPFont::EnumerateNamedInstances(uint64_t a1, uint64_t a2)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 256) && *(void *)(a1 + 264))
  {
    uint64_t v4 = *(void *)(a1 + 16);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    if (v5 != 16 && v5 != 22)
    {
      __p = 0;
      long long v42 = 0;
      uint64_t v43 = 0;
      memset(v40, 170, sizeof(v40));
      (*(void (**)(void *__return_ptr, uint64_t, void, void **))(*(void *)v4 + 400))(v40, v4, *(void *)(a1 + 256), &__p);
      uint64_t v7 = (_WORD *)v40[0];
      char v8 = (_WORD *)v40[1];
      if (v40[0] != v40[1])
      {
        uint64_t v9 = v49;
        *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v49[28] = v10;
        v49[29] = v10;
        v49[26] = v10;
        v49[27] = v10;
        v49[24] = v10;
        v49[25] = v10;
        v49[22] = v10;
        v49[23] = v10;
        v49[20] = v10;
        v49[21] = v10;
        v49[18] = v10;
        v49[19] = v10;
        v49[16] = v10;
        v49[17] = v10;
        v49[15] = v10;
        v49[14] = v10;
        v49[13] = v10;
        v49[12] = v10;
        v49[11] = v10;
        v49[10] = v10;
        v49[9] = v10;
        v49[8] = v10;
        v49[7] = v10;
        v49[6] = v10;
        v49[5] = v10;
        v49[4] = v10;
        v49[3] = v10;
        v49[2] = v10;
        v49[1] = v10;
        v49[0] = v10;
        unint64_t v11 = *(void *)(a1 + 256);
        *(void *)CGRect v46 = 0;
        __int16 v47 = 0;
        unint64_t v48 = 0;
        v50[0] = v49;
        if (v11)
        {
          if (v11 >> 60) {
            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
          }
          uint64_t v12 = 16 * v11;
          if (&v49[v11] <= (_OWORD *)v50) {
            v50[0] = &v49[v11];
          }
          else {
            uint64_t v9 = operator new(16 * v11);
          }
          int v13 = &v9[2 * v11];
          *(void *)CGRect v46 = v9;
          unint64_t v48 = v13;
          do
          {
            void *v9 = 0;
            v9[1] = 0;
            v9 += 2;
            v12 -= 16;
          }
          while (v12);
          __int16 v47 = v13;
        }
        uint64_t v14 = 0;
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        do
        {
          uint64_t v16 = *(void *)(a1 + 256);
          if (v16)
          {
            uint64_t v17 = *(void *)v46;
            int v18 = (double *)((char *)__p + 8 * v16 * v14);
            uint64_t v19 = 40 * v16;
            uint64_t v20 = (_DWORD *)(*(void *)(a1 + 264) + 8);
            do
            {
              double v21 = *v18++;
              double v22 = v21;
              LODWORD(v21) = *v20;
              v20 += 10;
              *(void *)uint64_t v17 = LODWORD(v21);
              *(double *)(v17 + 8) = trunc(v22 * 10000.0) / 10000.0;
              v17 += 16;
              v19 -= 40;
            }
            while (v19);
          }
          CFTypeRef cf = 0;
          if (!v7[2]) {
            goto LABEL_26;
          }
          *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
          *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
          __b[4] = v23;
          __b[5] = v23;
          __b[2] = v23;
          __b[3] = v23;
          __b[0] = v23;
          __b[1] = v23;
          (*(void (**)(_OWORD *__return_ptr, uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 88))(__b, v4, (unsigned __int16)(v7[2] - 1), 0xFFFFLL, 0xFFFFLL, 0xFFFFLL);
          if (TFontNameString::IsValid((TFontNameString *)__b))
          {
            CFStringRef v24 = CopyFontNameString((const TFontNameString *)__b, 0xFFFFFFFF);
            if (cf) {
              CFRelease(cf);
            }
            CFTypeRef cf = v24;
          }
          TFontNameString::~TFontNameString((TFontNameString *)__b);
          CGFloat v25 = cf;
          if (!cf)
          {
LABEL_26:
            uint64_t v26 = *(void *)(a1 + 256);
            if (v26)
            {
              uint64_t v27 = *(void *)v46;
              uint64_t v28 = *(void *)v46 + 16 * v26;
              uint64_t v29 = 40 * v26;
              while (2)
              {
                unint64_t v30 = (double *)(*(void *)(a1 + 264) + 32);
                uint64_t v31 = v29;
                do
                {
                  if (*(_DWORD *)v27 == *((_DWORD *)v30 - 6))
                  {
                    double v32 = *(double *)(v27 + 8);
                    double v33 = vabdd_f64(v32, *v30);
                    if (v33 >= 0.0001)
                    {
                      double v34 = fabs(v32);
                      double v35 = fabs(*v30);
                      if (v34 < v35) {
                        double v34 = v35;
                      }
                      if (v33 / v34 >= 0.0001)
                      {
                        memset(__b, 170, sizeof(__b));
                        size_t v36 = *(void *)(a1 + 232) + 256;
                        LOBYTE(v44) = 0;
                        std::vector<char,TInlineBufferAllocator<char,1024ul>>::vector(__b, v36, &v44);
                        TFPFont::ComposePostScriptNameForVariation(a1, *(void *)(a1 + 256), *(uint64_t *)v46, *(char **)&__b[0], *((void *)&__b[0] + 1) - *(void *)&__b[0], 0);
                        CFStringRef v37 = CFStringCreateWithCString(v15, *(const char **)&__b[0], 0);
                        if (cf) {
                          CFRelease(cf);
                        }
                        CFTypeRef cf = v37;
                        long long v44 = (void **)__b;
                        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__destroy_vector::operator()[abi:fe180100](&v44);
                        CGFloat v25 = cf;
                        goto LABEL_42;
                      }
                    }
                  }
                  v30 += 5;
                  v31 -= 40;
                }
                while (v31);
                v27 += 16;
                if (v27 != v28) {
                  continue;
                }
                break;
              }
            }
            CGFloat v25 = CFStringCreateWithCString(v15, *(const char **)(a1 + 224), 0);
            if (cf) {
              CFRelease(cf);
            }
            CFTypeRef cf = v25;
          }
LABEL_42:
          LOBYTE(__b[0]) = 0;
          (*(void (**)(uint64_t, const void *, void, void, _OWORD *))(a2 + 16))(a2, v25, *(void *)v46, *(void *)(a1 + 256), __b);
          int v38 = LOBYTE(__b[0]);
          TCFRetained<__CFString const*>::~TCFRetained(&cf);
          if (v38) {
            break;
          }
          ++v14;
          v7 += 4;
        }
        while (v7 != v8);
        std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,30ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)v46);
        uint64_t v7 = (_WORD *)v40[0];
      }
      if (v7)
      {
        v40[1] = v7;
        operator delete(v7);
      }
      if (__p)
      {
        long long v42 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1B53359BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(a1);
}

uint64_t TFPFont::GetTupleCount(os_unfair_lock_s *this)
{
  uint64_t result = TFPFont::GetEmSpaceTrueTypeScaler(this);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 176))(result);
  }
  return result;
}

void sub_1B5335A7C(void *a1)
{
}

uint64_t TFPFont::GetControlPoints(TFPFont *this, unsigned int a2, unsigned int *a3, CGPoint *a4)
{
  if (TFPFont::GetNumberOfGlyphs(this) <= a2) {
    return 0;
  }
  uint64_t EmSpaceTrueTypeScaler = TFPFont::GetEmSpaceTrueTypeScaler((os_unfair_lock_s *)this);
  uint64_t result = 0;
  if (a2 <= 0xFFFE)
  {
    if (EmSpaceTrueTypeScaler) {
      return (*(uint64_t (**)(uint64_t, void, unsigned int *, CGPoint *))(*(void *)EmSpaceTrueTypeScaler
    }
                                                                                   + 96))(EmSpaceTrueTypeScaler, (unsigned __int16)a2, a3, a4);
  }
  return result;
}

CFTypeRef TFPFont::CopyPath(TFPFont *this)
{
  CFTypeRef result = (CFTypeRef)*((void *)this + 5);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void TLockedLRUCache<TTableCacheNode,16ul>::CreateCache()
{
}

void RetainedFPFontRef::~RetainedFPFontRef(RetainedFPFontRef *this)
{
  uint64_t v1 = *(void *)this;
  if (*(void *)this)
  {
    if (!(*(unsigned int (**)(void))(*(void *)v1 + 32))(*(void *)this)) {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
  }
}

void *RetainedFPFontRef::Retain(void *result, uint64_t a2)
{
  uint64_t v2 = *result;
  if (*result != a2)
  {
    uint64_t v4 = result;
    if (v2)
    {
      CFTypeRef result = (void *)(*(uint64_t (**)(void))(*(void *)v2 + 32))(*result);
      if (!result) {
        CFTypeRef result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 8))(v2);
      }
    }
    if (a2) {
      CFTypeRef result = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    }
    *uint64_t v4 = a2;
  }
  return result;
}

uint64_t TTableCacheNode::operator==(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(void *)(a1 + 16) == *(void *)(a2 + 16) && *(void *)(a1 + 24) == *(void *)(a2 + 24);
  if (!v2 || *(_DWORD *)(a1 + 40) != *(_DWORD *)(a2 + 40)) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 8);
  if (!result) {
    return result;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return 0;
  }
  if (result == v4) {
    return 1;
  }
  return TFont::operator==(result, v4);
}

void ___ZL18CreateWrappedTableRK14TDataReferencem_block_invoke(uint64_t a1)
{
  TDataReference::TDataReference(v1, *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), 0, 0, 0);
  v1[0] = &unk_1F0E005D8;
  TDataReference::DucRefCount((TDataReference *)v1);
  TDataReference::~TDataReference((TDataReference *)v1);
}

void sub_1B5335DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<char,TInlineBufferAllocator<char,64ul>>::__append(void *a1, size_t a2)
{
  uint64_t v6 = a1 + 1;
  uint64_t v4 = (char *)a1[1];
  uint64_t v5 = v6[1];
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      uint64_t v12 = &v4[a2];
      bzero(v4, a2);
      uint64_t v4 = v12;
    }
    a1[1] = v4;
  }
  else
  {
    uint64_t v7 = &v4[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v9 = v5 - *a1;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10)
    {
      unint64_t v11 = (void *)a1[11];
      if ((char *)v11 + v10 <= (char *)(a1 + 11)) {
        a1[11] = (char *)v11 + v10;
      }
      else {
        unint64_t v11 = operator new(v10);
      }
    }
    else
    {
      unint64_t v11 = 0;
    }
    int v13 = &v7[(void)v11];
    uint64_t v14 = (char *)v11 + v10;
    CFAllocatorRef v15 = &v13[a2];
    bzero(v13, a2);
    uint64_t v17 = (char *)*a1;
    uint64_t v16 = (char *)a1[1];
    if (v16 != (char *)*a1)
    {
      do
      {
        char v18 = *--v16;
        *--int v13 = v18;
      }
      while (v16 != v17);
      uint64_t v16 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    uint64_t v19 = a1[2];
    a1[2] = v14;
    if (v16)
    {
      uint64_t v20 = (char *)(a1 + 11);
      if (a1 + 3 <= (void *)v16 && v20 > v16)
      {
        if (v19 == *(void *)v20) {
          *(void *)uint64_t v20 = v16;
        }
      }
      else
      {
        operator delete(v16);
      }
    }
  }
}

void TComponentsJoinedByString::TComponentsJoinedByString(TComponentsJoinedByString *this, CFStringRef theString, const __CFString *a3)
{
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (theString) {
    MutableCopCGFloat y = CFStringCreateMutableCopy(v4, 0, theString);
  }
  else {
    MutableCopCGFloat y = CFStringCreateMutable(v4, 0);
  }
  *(void *)this = MutableCopy;
  *((void *)this + 1) = CFRetain(@" ");
}

void sub_1B5335F94(_Unwind_Exception *a1)
{
  TCFString::~TCFString(v1);
  _Unwind_Resume(a1);
}

void TCFMutableString::AppendFormat(CFMutableStringRef *this, const __CFString *a2, ...)
{
  va_start(va, a2);
  CFStringAppendFormatAndArguments(*this, 0, @"%@%@%g", va);
}

void std::vector<TFontNameString>::__vdeallocate(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    CFAllocatorRef v4 = *a1;
    if (v3 != v1)
    {
      uint64_t v5 = v3 - 96;
      uint64_t v6 = v3 - 96;
      uint64_t v7 = v3 - 96;
      do
      {
        unint64_t v8 = *(void (***)(char *))v7;
        v7 -= 96;
        (*v8)(v6);
        v5 -= 96;
        BOOL v9 = v6 == v1;
        uint64_t v6 = v7;
      }
      while (!v9);
      CFAllocatorRef v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void TNameEntry::AddItems(CFMutableDictionaryRef *this, uint64_t a2, const __CFString *a3, __CFString *a4)
{
  if (a3 && *this)
  {
    CFDictionaryAddValue(*this, (const void *)kFPNameKeyKind, (const void *)[NSNumber numberWithUnsignedShort:a2]);
    CFDictionaryAddValue(*this, (const void *)kFPNameKeyString, a3);
    uint64_t v7 = (const void *)kFPNameKeyLocaleIdentifier;
    unint64_t v8 = *this;
    if (a4) {
      BOOL v9 = a4;
    }
    else {
      BOOL v9 = @"en";
    }
    CFDictionaryAddValue(v8, v7, v9);
  }
}

void TCFDictionary::~TCFDictionary(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

const void **TCFArray<void const*>::~TCFArray(const void **a1)
{
  BOOL v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void TFPInMemoryFont::TFPInMemoryFont(TFPInMemoryFont *this, const TFont *a2, const __CFData *a3, const __CFData *a4)
{
  v9.__darwin_time_t tv_sec = 0;
  v9.uint64_t tv_nsec = 0;
  TFPFont::TFPFont(this, a2, 0, v9);
  *uint64_t v7 = &unk_1F0DD8DF0;
  *((void *)this + 56) = CFRetain(a3);
  if (a4) {
    CFTypeRef v8 = CFRetain(a4);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *((void *)this + 57) = v8;
}

void sub_1B5336228(_Unwind_Exception *a1)
{
  TCFData::~TCFData(v2);
  TFPFont::~TFPFont(v1);
  _Unwind_Resume(a1);
}

BOOL EqualPostScriptNameAndVariations(const void *a1, const void *a2)
{
  uint64_t v2 = *((void *)a1 + 35);
  uint64_t v3 = *((void *)a2 + 35);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    return strcmp(*((const char **)a1 + 17), *((const char **)a2 + 17)) == 0;
  }
  else
  {
    unint64_t v6 = *((void *)a1 + 32);
    if (v6 == *((void *)a2 + 32) && !strcmp(*((const char **)a1 + 28), *((const char **)a2 + 28)))
    {
      if (v6)
      {
        BOOL v8 = 0;
        for (i = 0; i != v6; BOOL v8 = i >= v6)
        {
          size_t v10 = (double *)(v2 + 16 * i);
          int v11 = *(_DWORD *)v10;
          double v12 = v10[1];
          double v13 = fabs(v12);
          uint64_t v14 = (double *)(v3 + 8);
          unint64_t v15 = v6;
          while (1)
          {
            if (v11 == *((_DWORD *)v14 - 2))
            {
              double v16 = vabdd_f64(v12, *v14);
              if (v16 < 0.0001) {
                break;
              }
              double v17 = fabs(*v14);
              if (v13 >= v17) {
                double v17 = v13;
              }
              if (v16 / v17 < 0.0001) {
                break;
              }
            }
            v14 += 2;
            if (!--v15) {
              return v8;
            }
          }
          ++i;
          BOOL v5 = 1;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

uint64_t HashPostScriptName(const char **a1)
{
  strlen(a1[17]);
  return CFStringHashCString();
}

void std::vector<double,TInlineBufferAllocator<double,4ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    uint64_t v3 = (void *)(a1 + 56);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 56)) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

void TCFNumber::~TCFNumber(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::pair<unsigned short,unsigned short>>>>::find<unsigned int>(void *a1, unsigned int a2)
{
  unint64_t v2 = a1[1];
  if (!v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (v2 <= a2) {
      unint64_t v4 = a2 % v2;
    }
  }
  else
  {
    unint64_t v4 = (v2 - 1) & a2;
  }
  BOOL v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2) {
          v7 %= v2;
        }
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void std::vector<unsigned int,TInlineBufferAllocator<unsigned int,2ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    uint8x8_t v3 = (void *)(a1 + 32);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 32)) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    uint8x8_t v3 = (void *)(a1 + 280);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 280)) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<CGFontVariation,TInlineBufferAllocator<CGFontVariation,30ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    uint8x8_t v3 = (void *)(a1 + 504);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 504)) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::~__func()
{
}

void *std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0E00640;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0E00640;
  a2[1] = v2;
  return result;
}

void std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::operator()(uint64_t a1, unsigned int *a2)
{
}

uint64_t std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<TFPFont::GetTableTags(void)::$_0,std::allocator<TFPFont::GetTableTags(void)::$_0>,void ()(unsigned int,BOOL *)>::target_type()
{
}

void std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::~__func()
{
}

void *std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0E006C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0E006C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::operator()(uint64_t result, int *a2, unsigned char **a3)
{
  int v3 = *a2;
  if (*a2 > 1735162213)
  {
    BOOL v4 = v3 == 1752590188;
    int v5 = 1735162214;
  }
  else
  {
    BOOL v4 = v3 == 1128678944;
    int v5 = 1128678962;
  }
  if (v4 || v3 == v5)
  {
    unint64_t v7 = *a3;
    **(unsigned char **)(result + 8) = 1;
    *unint64_t v7 = 1;
  }
  return result;
}

uint64_t std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<TFPFont::IsBitmapOnly(void)::$_0,std::allocator<TFPFont::IsBitmapOnly(void)::$_0>,void ()(unsigned int,BOOL *)>::target_type()
{
}

uint64_t std::vector<char,TInlineBufferAllocator<char,30ul>>::vector(uint64_t a1, size_t a2, unsigned char *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 56) = a1 + 24;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<char,TInlineBufferAllocator<char,30ul>>::__vallocate[abi:fe180100]((char *)a1, a2);
    unint64_t v6 = *(unsigned char **)(a1 + 8);
    unint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    *(void *)(a1 + 8) = v7;
  }
  return a1;
}

void sub_1B533685C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<char,TInlineBufferAllocator<char,30ul>>::__append(int64x2_t *a1, size_t a2)
{
  unint64_t v6 = &a1->i64[1];
  uint64_t result = (char *)a1->i64[1];
  uint64_t v5 = v6[1];
  if (v5 - (uint64_t)result >= a2)
  {
    if (a2)
    {
      double v12 = &result[a2];
      bzero(result, a2);
      uint64_t result = v12;
    }
    a1->i64[1] = (uint64_t)result;
  }
  else
  {
    unint64_t v7 = &result[-a1->i64[0]];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v9 = v5 - a1->i64[0];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    CFStringRef v24 = &a1[1].i64[1];
    if (v10)
    {
      uint64_t v11 = a1[3].i64[1];
      if (v11 + v10 <= (unint64_t)a1[3].u64 + 6) {
        a1[3].i64[1] = v11 + v10;
      }
      else {
        uint64_t v11 = (uint64_t)operator new(v10);
      }
    }
    else
    {
      uint64_t v11 = 0;
    }
    double v13 = &v7[v11];
    uint64_t v14 = (char *)(v11 + v10);
    long long v23 = v14;
    unint64_t v15 = &v13[a2];
    bzero(v13, a2);
    v22.i64[1] = (uint64_t)&v13[a2];
    uint64_t v17 = a1->i64[0];
    unint64_t v16 = a1->u64[1];
    if (v16 == a1->i64[0])
    {
      int64x2_t v19 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        char v18 = *(unsigned char *)--v16;
        *--double v13 = v18;
      }
      while (v16 != v17);
      int64x2_t v19 = *a1;
      unint64_t v15 = (char *)v22.i64[1];
      uint64_t v14 = v23;
    }
    a1->i64[0] = (uint64_t)v13;
    a1->i64[1] = (uint64_t)v15;
    int64x2_t v22 = v19;
    uint64_t v20 = (char *)a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v14;
    long long v23 = v20;
    uint64_t v21 = v19.i64[0];
    return (char *)std::__split_buffer<char,TInlineBufferAllocator<char,30ul> &>::~__split_buffer((uint64_t)&v21);
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::find<unsigned int>(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a3;
    if (a3 >= a2) {
      unint64_t v4 = a3 % a2;
    }
  }
  else
  {
    unint64_t v4 = (a2 - 1) & a3;
  }
  uint64_t v5 = *(uint64_t ***)(a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  for (uint64_t result = *v5; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v7 = result[1];
    if (v7 == a3)
    {
      if (*((_DWORD *)result + 4) == a3) {
        return result;
      }
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= a2) {
          v7 %= a2;
        }
      }
      else
      {
        v7 &= a2 - 1;
      }
      if (v7 != v4) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,double>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,double>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,double>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v5 = a2;
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v8 = a2;
      if (v6 <= a2) {
        unint64_t v8 = a2 % v6;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & a2;
    }
    unint64_t v9 = *(void ***)(*(void *)a1 + 8 * v8);
    if (v9)
    {
      size_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v11 >= v6) {
                v11 %= v6;
              }
            }
            else
            {
              v11 &= v6 - 1;
            }
            if (v11 != v8) {
              break;
            }
          }
          size_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
  }
  size_t v10 = operator new(0x20uLL);
  *size_t v10 = 0;
  v10[1] = v5;
  *((_DWORD *)v10 + 4) = *a3;
  void v10[3] = 0;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v6 || (float)(v13 * (float)v6) < v12)
  {
    BOOL v14 = 1;
    if (v6 >= 3) {
      BOOL v14 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v6);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<char const*,unsigned int>,std::__unordered_map_hasher<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::HashCString,TType1ParsingContext::EqualCString,true>,std::__unordered_map_equal<char const*,std::__hash_value_type<char const*,unsigned int>,TType1ParsingContext::EqualCString,TType1ParsingContext::HashCString,true>,std::allocator<std::__hash_value_type<char const*,unsigned int>>>::__rehash<true>(a1, v17);
    unint64_t v6 = *(void *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        unint64_t v8 = v5 % v6;
      }
      else {
        unint64_t v8 = v5;
      }
    }
    else
    {
      unint64_t v8 = (v6 - 1) & v5;
    }
  }
  uint64_t v18 = *(void *)a1;
  int64x2_t v19 = *(void **)(*(void *)a1 + 8 * v8);
  if (v19)
  {
    *size_t v10 = *v19;
LABEL_38:
    *int64x2_t v19 = v10;
    goto LABEL_39;
  }
  *size_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v8) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v20 >= v6) {
        v20 %= v6;
      }
    }
    else
    {
      v20 &= v6 - 1;
    }
    int64x2_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_1B5336C68(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *TCharStringConversionContext::WriteData(TCharStringConversionContext *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6 = *((void *)this + 36);
  size_t v7 = v6 + a3;
  if (v7 <= *((_DWORD *)this + 74))
  {
    unint64_t v9 = (char *)*((void *)this + 35);
  }
  else
  {
    unsigned int v8 = malloc_good_size(v7);
    unint64_t v9 = (char *)reallocf(*((void **)this + 35), v8);
    *((void *)this + 35) = v9;
    if (!v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DD4440;
      exception[2] = 20;
    }
    *((_DWORD *)this + 74) = v8;
    uint64_t v6 = *((void *)this + 36);
  }
  uint64_t result = memcpy(&v9[v6], a2, a3);
  *((void *)this + 36) += a3;
  return result;
}

void *TCharStringConversionContext::WriteOpCode(TCharStringConversionContext *this, unsigned int a2)
{
  v5[0] = 12;
  v5[1] = a2;
  if (a2 > 0xFF)
  {
    uint64_t v2 = v5;
    unsigned int v3 = 2;
  }
  else
  {
    uint64_t v2 = &v5[1];
    unsigned int v3 = 1;
  }
  return TCharStringConversionContext::WriteData(this, v2, v3);
}

void *TCharStringConversionContext::WriteFixed(TCharStringConversionContext *this, int *a2)
{
  v16[3] = *MEMORY[0x1E4F143B8];
  memset(v16, 170, 22);
  *(void *)unint64_t v15 = 0xAAAAAAAAAAAAAAAALL;
  int v3 = *a2;
  if ((_WORD)v3)
  {
    if (v3 >= 0) {
      LOWORD(v4) = v3;
    }
    else {
      int v4 = -v3;
    }
    unsigned int v5 = 2 * ((5 * (_WORD)v4) & 0x7FFF);
    if (v5 > 0x8000) {
      unsigned int v5 = 0x10000 - v5;
    }
    if (v5 > 0x3F)
    {
      unsigned int v7 = (unsigned __int16)(100 * v4);
      unsigned int v8 = 0x10000 - v7;
      if (v7 <= 0x8000) {
        unsigned int v8 = (unsigned __int16)(100 * v4);
      }
      if (v8 >= 0x40)
      {
        unsigned __int16 v9 = 2 * v4;
        int v10 = 1;
        int v11 = 0xFFFF;
        int v12 = 2;
        while (1)
        {
          int v13 = v9;
          if (v9 > 0x8000u) {
            int v13 = 0x10000 - v9;
          }
          if (v13 < 0x40) {
            break;
          }
          if (v13 < v11)
          {
            int v10 = v12;
            int v11 = v13;
          }
          ++v12;
          v9 += v4;
          if (v12 == 200)
          {
            unsigned int v6 = TCharStringConversionContext::ConvertFixedDiv(this, v3, v15, v10);
            return TCharStringConversionContext::WriteData(this, v15, v6);
          }
        }
        unsigned int v6 = TCharStringConversionContext::ConvertFixedDiv(this, v3, v15, v12);
      }
      else
      {
        unsigned int v6 = TCharStringConversionContext::ConvertFixedDiv(this, v3, v15, 100);
      }
    }
    else
    {
      unsigned int v6 = TCharStringConversionContext::ConvertFixedDiv(this, v3, v15, 10);
    }
  }
  else
  {
    unsigned int v6 = TCharStringConversionContext::IntToCharstr(this, v3 >> 16, v15);
  }
  return TCharStringConversionContext::WriteData(this, v15, v6);
}

uint64_t TCharStringConversionContext::IntToCharstr(TCharStringConversionContext *this, int a2, unsigned __int8 *a3)
{
  if ((a2 + 107) <= 0xD6)
  {
    *a3 = a2 - 117;
    uint64_t v5 = 1;
    uint64_t result = 1;
    goto LABEL_8;
  }
  unsigned int v7 = a2 - 108;
  if ((a2 - 108) <= 0x3FF)
  {
    int v8 = (v7 >> 8) - 9;
LABEL_7:
    *a3 = v8;
    a3[1] = v7;
    uint64_t v5 = 2;
    uint64_t result = 2;
    goto LABEL_8;
  }
  if ((a2 + 1131) <= 0x3FF)
  {
    LOBYTE(v7) = -108 - a2;
    int v8 = ((-108 - a2) >> 8) - 5;
    goto LABEL_7;
  }
  if (a2 == (__int16)a2
    && (*(unsigned int (**)(TCharStringConversionContext *))(*(void *)this + 16))(this) == 2)
  {
    *a3 = 28;
    a3[1] = BYTE1(a2);
    a3[2] = a2;
    uint64_t v5 = 3;
    uint64_t result = 3;
  }
  else
  {
    *a3 = -1;
    a3[1] = HIBYTE(a2);
    a3[2] = BYTE2(a2);
    a3[3] = BYTE1(a2);
    uint64_t v5 = 5;
    uint64_t result = 5;
    a3[4] = a2;
  }
LABEL_8:
  a3[v5] = 0;
  return result;
}

uint64_t TCharStringConversionContext::ConvertFixedDiv(TCharStringConversionContext *this, int a2, unsigned __int8 *a3, int a4)
{
  if (a2 >= 0) {
    unsigned int v7 = a2;
  }
  else {
    unsigned int v7 = -a2;
  }
  int v8 = HIWORD(v7) * a4 + (((unsigned __int16)v7 * a4 + 0x8000) >> 16);
  if (a2 >= 0) {
    int v9 = v8;
  }
  else {
    int v9 = -v8;
  }
  int v10 = TCharStringConversionContext::IntToCharstr(this, v9, a3);
  uint64_t v11 = (unsigned __int16)(TCharStringConversionContext::IntToCharstr(this, a4, &a3[v10]) + v10);
  *(_WORD *)&a3[v11] = 3084;
  v11 += 2;
  a3[v11] = 0;
  return (unsigned __int16)v11;
}

void TType1ToType2CharStringConversionContext::TType1ToType2CharStringConversionContext(TType1ToType2CharStringConversionContext *this, const TType1SFNTFont *a2, uint64_t a3)
{
  *((void *)this + 33) = "/.notdef";
  *((void *)this + 34) = 8;
  *((_DWORD *)this + 74) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *(void *)this = &unk_1F0E00768;
  *((unsigned char *)this + 429) = 1;
  *(_DWORD *)((char *)this + 430) = 0;
  *((void *)this + 55) = a2;
  *((void *)this + 56) = (*(uint64_t (**)(const TType1SFNTFont *))(*(void *)a2 + 40))(a2);
  (*(void (**)(const TType1SFNTFont *, uint64_t, char *))(*(void *)a2 + 128))(a2, a3, (char *)this + 928);
  *((void *)this + 58) = *((void *)this + 57);
  *((unsigned char *)this + 552) = 0;
  *((_WORD *)this + 280) = 0;
  *(void *)((char *)this + 588) = 0;
  *((unsigned char *)this + 792) = 0;
  *((unsigned char *)this + 896) = 0;
  *((void *)this + 113) = 0;
  *((void *)this + 115) = 0;
  *((void *)this + 114) = 0;
  *((void *)this + 61) = 0;
  *((void *)this + 62) = 0;
  *((void *)this + 60) = 0;
  *((unsigned char *)this + 504) = 0;
  if (a3)
  {
    unsigned int v6 = (char *)this + 300;
    *((void *)this + 34) = (*(unsigned int (**)(void, uint64_t, uint64_t, char *))(**((void **)this + 55)
                                                                                              + 184))(*((void *)this + 55), a3, 127, (char *)this + 300);
  }
  else
  {
    uint64_t v7 = *((void *)this + 33);
    --*((void *)this + 34);
    unsigned int v6 = (char *)(v7 + 1);
  }
  *((void *)this + 33) = v6;
  int v8 = *((__int16 *)a2 + 8);
  unsigned int v9 = *(_DWORD *)(*(void *)(*((void *)a2 + 4) + 104) + 8 * a3 + 4);
  if (v9 <= v8 || v8 <= -1) {
    int v8 = 0;
  }
  *((_DWORD *)this + 142) = v9 - v8;
  if (*(_WORD *)(*((void *)this + 56) + 80)) {
    std::vector<int>::size_type v11 = *(unsigned __int16 *)(*((void *)this + 56) + 80);
  }
  else {
    std::vector<int>::size_type v11 = 32;
  }
  std::vector<int>::resize((std::vector<int> *)this + 20, v11);
  BOOL v13 = 0;
  (*(void (**)(const TType1SFNTFont *, char *))(*(void *)a2 + 176))(a2, (char *)this + 564);
  unsigned int v12 = malloc_good_size((4 * *((_DWORD *)this + 142)));
  *((_DWORD *)this + 74) = v12;
  *((void *)this + 35) = AllocateMemory(v12, 0);
  *((void *)this + 36) = 0;
  *(void *)((char *)this + 580) = 0;
  *((void *)this + 59) = *((void *)this + 58);
  TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString(this, 0, &v13);
}

void sub_1B53372EC(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 904);
  if (v5)
  {
    *(void *)(v1 + 912) = v5;
    operator delete(v5);
  }
  if (*(unsigned char *)(v1 + 896)) {
    THintCntrConversion::~THintCntrConversion((THintCntrConversion *)(v1 + 792));
  }
  std::__optional_destruct_base<TFlexConversion,false>::~__optional_destruct_base[abi:fe180100](v1 + 504);
  unsigned int v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 488) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *v2;
  *uint64_t v2 = 0;
  if (v7) {
    MEMORY[0x1BA9994A0](v7, 0x1000C8077774924);
  }
  _Unwind_Resume(a1);
}

void TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString(TType1ToType2CharStringConversionContext *this, unsigned int a2, BOOL *a3)
{
  uint64_t v227 = *MEMORY[0x1E4F143B8];
  if (a2 > 0xA)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  int v221 = 0;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v225[9] = v4;
  v225[10] = v4;
  v225[7] = v4;
  v225[8] = v4;
  v225[5] = v4;
  v225[6] = v4;
  v225[3] = v4;
  v225[4] = v4;
  v225[1] = v4;
  v225[2] = v4;
  *(_OWORD *)v224 = v4;
  v225[0] = v4;
  uint64_t v5 = *((unsigned int *)this + 142);
  if (v5 && !*a3)
  {
    uint64_t v7 = (unsigned __int8 *)*((void *)this + 58);
    unint64_t v8 = (unint64_t)&v7[v5];
    unsigned int v9 = (char *)this + 792;
    v214 = (int *)((char *)this + 608);
    v215 = (int *)((char *)this + 604);
    v212 = (int *)((char *)this + 616);
    v213 = (int *)((char *)this + 612);
    v219 = (int32x2_t *)((char *)this + 572);
    v217 = (char *)this + 504;
    uint64_t v218 = 0;
    v211 = (char *)this + 512;
    v216 = (int *)((unint64_t)v224 | 0xC);
    int v10 = v7;
    while (1)
    {
      unsigned int v12 = *v10++;
      uint64_t v11 = v12;
      if (v12 < 0x20)
      {
        switch((int)v11)
        {
          case 1:
          case 3:
            if (*((_DWORD *)this + 147) != 2)
            {
              long long v167 = __cxa_allocate_exception(0x10uLL);
              *(void *)long long v167 = &unk_1F0DFC400;
              v167[4] = 5;
            }
            int v15 = *((_DWORD *)this + 150);
            *((_DWORD *)this + 147) = 0;
            uint64_t v16 = (*((_DWORD *)this + 149) + 0x8000) & 0xFFFF0000;
            int v221 = (*((_DWORD *)this + 149) + 0x8000) & 0xFFFF0000;
            int v17 = *((unsigned __int8 *)this + 431);
            if (!*((unsigned char *)this + 429)) {
              goto LABEL_141;
            }
            *((unsigned char *)this + 428) = 1;
            if (a2)
            {
              if (!v17) {
                goto LABEL_138;
              }
            }
            else if (!v17)
            {
              *((void *)this + 59) = v10;
              goto LABEL_138;
            }
            if (!*((unsigned char *)this + 432)) {
              ++*((_WORD *)this + 280);
            }
LABEL_138:
            if (!*((unsigned char *)this + 896))
            {
              _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
              if (!*((unsigned char *)this + 896)) {
                goto LABEL_302;
              }
            }
            (*(void (**)(char *, uint64_t, void, uint64_t, void))(*((void *)this + 99) + 16))((char *)this + 792, v16, (v15 + 0x8000) & 0xFFFF0000, v11, *((unsigned __int16 *)this + 280));
            int v17 = *((unsigned __int8 *)this + 431);
LABEL_141:
            if (v17) {
              goto LABEL_142;
            }
            break;
          case 4:
            uint64_t v34 = *((int *)this + 147);
            if (*((unsigned char *)this + 433))
            {
              *((_DWORD *)this + 147) = v34 + 1;
              double v35 = (char *)this + 4 * v34;
              int v36 = 4;
              goto LABEL_109;
            }
            if (v34 != 1)
            {
              unint64_t v176 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v176 = &unk_1F0DFC400;
              v176[4] = 5;
            }
            *((_DWORD *)this + 147) = 0;
            int v84 = *((_DWORD *)this + 149);
            int v221 = v84;
            TType1ToType2CharStringConversionContext::SetHints(this);
            if (*((unsigned char *)this + 429)) {
              break;
            }
            *(_DWORD *)v226 = 0;
            if ((v218 & 0x100000000) != 0)
            {
              int v221 = *((_DWORD *)this + 145) + v84;
              *(_DWORD *)v226 = *((_DWORD *)this + 146);
            }
            TType1ToType2CharStringConversionContext::WriteMoveTo(this, (int *)v226, &v221);
            goto LABEL_136;
          case 5:
            if (*((_DWORD *)this + 147) != 2)
            {
              long long v172 = __cxa_allocate_exception(0x10uLL);
              *(void *)long long v172 = &unk_1F0DFC400;
              v172[4] = 5;
            }
            *((_DWORD *)this + 147) = 0;
            int32x2_t v41 = v219[3];
            TType1ToType2CharStringConversionContext::SetHints(this);
            if (!*((unsigned char *)this + 429))
            {
              int32x2_t v42 = *v219;
              int32x2_t v43 = vadd_s32(vrev64_s32(v219[1]), v41);
              *(int32x2_t *)((char *)this + 580) = vrev64_s32(v43);
              int32x2_t v44 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v43, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
              *(int32x2_t *)((char *)this + 572) = v44;
              *(int32x2_t *)v224 = vsub_s32(v44, v42);
              TType1ToType2CharStringConversionContext::WriteLineTo(this, v224, &v224[1]);
            }
            break;
          case 6:
            if (*((_DWORD *)this + 147) != 1)
            {
              CFRange v171 = __cxa_allocate_exception(0x10uLL);
              *(void *)CFRange v171 = &unk_1F0DFC400;
              v171[4] = 5;
            }
            *((_DWORD *)this + 147) = 0;
            int v37 = *((_DWORD *)this + 149);
            int v221 = v37;
            TType1ToType2CharStringConversionContext::SetHints(this);
            if (!*((unsigned char *)this + 429))
            {
              *(_DWORD *)v226 = 0;
              int v38 = *((_DWORD *)this + 143);
              int v39 = *((_DWORD *)this + 146) + v37;
              *((_DWORD *)this + 146) = v39;
              unsigned int v40 = (v39 + 0x8000) & 0xFFFF0000;
              *((_DWORD *)this + 143) = v40;
              v224[0] = v40 - v38;
              TType1ToType2CharStringConversionContext::WriteLineTo(this, v224, (int *)v226);
            }
            break;
          case 7:
            if (*((_DWORD *)this + 147) != 1)
            {
              long long v169 = __cxa_allocate_exception(0x10uLL);
              *(void *)long long v169 = &unk_1F0DFC400;
              _OWORD v169[4] = 5;
            }
            *((_DWORD *)this + 147) = 0;
            int v21 = *((_DWORD *)this + 149);
            int v221 = v21;
            TType1ToType2CharStringConversionContext::SetHints(this);
            if (!*((unsigned char *)this + 429))
            {
              *(_DWORD *)v226 = 0;
              int v22 = *((_DWORD *)this + 144);
              int v23 = *((_DWORD *)this + 145) + v21;
              *((_DWORD *)this + 145) = v23;
              unsigned int v24 = (v23 + 0x8000) & 0xFFFF0000;
              *((_DWORD *)this + 144) = v24;
              v224[0] = v24 - v22;
              TType1ToType2CharStringConversionContext::WriteLineTo(this, (int *)v226, v224);
            }
            break;
          case 8:
            if (*((_DWORD *)this + 147) != 6)
            {
              long long v173 = __cxa_allocate_exception(0x10uLL);
              *(void *)long long v173 = &unk_1F0DFC400;
              v173[4] = 5;
            }
            *((_DWORD *)this + 147) = 0;
            TType1ToType2CharStringConversionContext::SetHints(this);
            if (!*((unsigned char *)this + 429))
            {
              long long v45 = (int32x2_t *)((char *)this + 4 * *((int *)this + 147) + 596);
              int32x2_t v46 = vadd_s32(vrev64_s32(v219[1]), *v45);
              int32x2_t v47 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v46, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
              int32x2_t v48 = vadd_s32(v46, *(int32x2_t *)((char *)this + 4 * *((int *)this + 147) + 604));
              int32x2_t v49 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v48, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
              *(int32x2_t *)v224 = vsub_s32(v47, *v219);
              *(int32x2_t *)&v224[2] = vsub_s32(v49, v47);
              int32x2_t v50 = vadd_s32(v48, v45[2]);
              *(int8x8_t *)&long long v51 = vand_s8((int8x8_t)vadd_s32(v50, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
              *((void *)&v51 + 1) = __PAIR64__(v50.u32[0], v50.u32[1]);
              *(_OWORD *)v219->i8 = v51;
              *(int32x2_t *)&v225[0] = vsub_s32(*(int32x2_t *)&v51, v49);
              TCharStringConversionContext::WriteFixed(this, v224);
              TCharStringConversionContext::WriteFixed(this, &v224[1]);
              TCharStringConversionContext::WriteFixed(this, &v224[2]);
              TCharStringConversionContext::WriteFixed(this, v216);
              TCharStringConversionContext::WriteFixed(this, (int *)v225);
              TCharStringConversionContext::WriteFixed(this, (int *)v225 + 1);
              *(_WORD *)v226 = 2060;
              TCharStringConversionContext::WriteData(this, &v226[1], 1u);
            }
            break;
          case 9:
            break;
          case 10:
            int v25 = *((_DWORD *)this + 147);
            *((_DWORD *)this + 147) = v25 - 1;
            int v26 = *((_DWORD *)this + v25 + 148);
            int v27 = v26 >> 16;
            if (v26 >= 0x40000)
            {
              if (v27 == 4)
              {
                if (*((_DWORD *)this + 141) != 1) {
                  goto LABEL_209;
                }
                int v83 = v25 - 2;
                *((_DWORD *)this + 147) = v83;
                int v27 = *((__int16 *)this + 2 * v83 + 299);
              }
LABEL_113:
              if (v27 >= 5) {
                (*(void (**)(TType1ToType2CharStringConversionContext *, void, void, BOOL *))(*(void *)this + 24))(this, a2, (unsigned __int16)v27, a3);
              }
              goto LABEL_209;
            }
            if (v27)
            {
              if (v27 != 2)
              {
                if (v27 == 1)
                {
                  *((unsigned char *)this + 433) = 1;
                  if (!*((unsigned char *)this + 552) && !*((unsigned char *)this + 429))
                  {
                    std::__optional_destruct_base<TFlexConversion,false>::reset[abi:fe180100]((uint64_t)v217);
                    *((void *)this + 63) = &unk_1F0E00800;
                    *((void *)v211 + 1) = 0;
                    *((void *)v211 + 2) = 0;
                    *(void *)v211 = 0;
                    *((_DWORD *)v211 + 6) = 0;
                    *((unsigned char *)this + 540) = 1;
                    *((_DWORD *)this + 136) = 0;
                    *((_WORD *)this + 274) = 3107;
                    *((unsigned char *)this + 552) = 1;
                  }
                  goto LABEL_209;
                }
                goto LABEL_113;
              }
              *((_DWORD *)this + 147) = v25 - 2;
              int v88 = *((unsigned __int16 *)this + 2 * v25 + 294);
              if (v88 == 22)
              {
                uint64_t v91 = 0;
                int v138 = v25 - 3;
                *((_DWORD *)this + 147) = v138;
                uint64_t v89 = *((unsigned int *)this + v138 + 149);
              }
              else if (v88 == 4)
              {
                uint64_t v89 = 0;
                int v90 = v25 - 3;
                *((_DWORD *)this + 147) = v90;
                uint64_t v91 = *((unsigned int *)this + v90 + 149);
              }
              else
              {
                *((_DWORD *)this + 147) = v25 - 3;
                uint64_t v91 = *((unsigned int *)this + v25 + 146);
                int v139 = v25 - 4;
                *((_DWORD *)this + 147) = v139;
                uint64_t v89 = *((unsigned int *)this + v139 + 149);
              }
              if (!*((unsigned char *)this + 429))
              {
                if (!*((unsigned char *)this + 552)) {
                  goto LABEL_302;
                }
                (*(void (**)(char *, uint64_t, uint64_t))(*(void *)v217 + 16))(v217, v89, v91);
              }
            }
            else
            {
              *((_DWORD *)this + 147) = v25 - 2;
              *((_DWORD *)this + 147) = v25 - 3;
              *((_DWORD *)this + 147) = v25 - 4;
              *((unsigned char *)this + 433) = 0;
              if (!*((unsigned char *)this + 429))
              {
                if (!*((unsigned char *)this + 552)) {
                  goto LABEL_302;
                }
                (*(void (**)(void))(*((void *)this + 63) + 24))();
                if (!*((unsigned char *)this + 552)) {
                  goto LABEL_302;
                }
                unsigned int v92 = (*(uint64_t (**)(char *))(*(void *)v217 + 32))(v217);
                int v222 = -1431655766;
                memset(v226, 170, 6);
                if (v92)
                {
                  unsigned __int16 v93 = 1;
                  while (*((unsigned char *)this + 552))
                  {
                    if ((*(unsigned int (**)(char *, void, int *))(*(void *)v217 + 40))(v217, v93, &v222))
                    {
                      unsigned int v95 = TCFFDict::EncodeNumber((TCFFDict *)SHIWORD(v222), v226, v94);
                      TCharStringConversionContext::WriteData(this, v226, v95);
                    }
                    if (v92 < ++v93) {
                      goto LABEL_155;
                    }
                  }
                  goto LABEL_302;
                }
LABEL_155:
                if (!*((unsigned char *)this + 552)) {
                  goto LABEL_302;
                }
                unsigned int v96 = (*(uint64_t (**)(void))(*((void *)this + 63) + 56))();
                TCharStringConversionContext::WriteOpCode(this, v96);
                std::__optional_destruct_base<TFlexConversion,false>::reset[abi:fe180100]((uint64_t)v217);
              }
            }
LABEL_209:
            if (*((unsigned char *)this + 430))
            {
              if (a2) {
                return;
              }
              *((unsigned char *)this + 430) = 0;
              int v10 = (unsigned __int8 *)*((void *)this + 59);
            }
            break;
          case 11:
            return;
          case 12:
            int v10 = v7 + 2;
            int v65 = v7[1];
            switch(v65)
            {
              case 1:
              case 2:
                if (*((_DWORD *)this + 147) != 6)
                {
                  v180 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v180 = &unk_1F0DFC400;
                  v180[4] = 5;
                }
                if (*((unsigned char *)this + 429))
                {
                  if (v65 == 2) {
                    uint64_t v66 = 1;
                  }
                  else {
                    uint64_t v66 = 3;
                  }
                  uint64_t v67 = *((unsigned int *)this + 154);
                  *((_DWORD *)this + 147) = 4;
                  uint64_t v68 = *((unsigned int *)this + 153);
                  if (!*((unsigned char *)this + 896))
                  {
                    _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                    if (!*((unsigned char *)this + 896)) {
                      goto LABEL_302;
                    }
                  }
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, void))(*((void *)this + 99) + 16))((char *)this + 792, v67, v68, v66, *((unsigned __int16 *)this + 280));
                  int v69 = *((_DWORD *)this + 147);
                  *((_DWORD *)this + 147) = v69 - 1;
                  uint64_t v70 = *((unsigned int *)this + v69 + 148);
                  v69 -= 2;
                  *((_DWORD *)this + 147) = v69;
                  uint64_t v71 = *((unsigned int *)this + v69 + 149);
                  if (!*((unsigned char *)this + 896))
                  {
                    _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                    if (!*((unsigned char *)this + 896)) {
                      goto LABEL_302;
                    }
                  }
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, void))(*((void *)this + 99) + 16))((char *)this + 792, v70, v71, v66, *((unsigned __int16 *)this + 280));
                  int v72 = *((_DWORD *)this + 147);
                  *((_DWORD *)this + 147) = v72 - 1;
                  uint64_t v73 = *((unsigned int *)this + v72 + 148);
                  v72 -= 2;
                  *((_DWORD *)this + 147) = v72;
                  uint64_t v74 = *((unsigned int *)this + v72 + 149);
                  if (!*((unsigned char *)this + 896))
                  {
                    _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                    if (!*((unsigned char *)this + 896)) {
                      goto LABEL_302;
                    }
                  }
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, void))(*((void *)this + 99) + 16))((char *)this + 792, v73, v74, v66, *((unsigned __int16 *)this + 280));
                }
                else
                {
                  *((_DWORD *)this + 147) = 0;
                }
LABEL_142:
                *((unsigned char *)this + 432) = 1;
                break;
              case 6:
                if (*((_DWORD *)this + 147) != 5)
                {
                  uint64_t v182 = __cxa_allocate_exception(0x10uLL);
                  *(void *)uint64_t v182 = &unk_1F0DFC400;
                  v182[4] = 5;
                }
                *((_DWORD *)this + 147) = 0;
                TCharStringConversionContext::WriteFixed(this, v215);
                TCharStringConversionContext::WriteFixed(this, v214);
                TCharStringConversionContext::WriteFixed(this, v213);
                TCharStringConversionContext::WriteFixed(this, v212);
                *(_WORD *)v226 = 3596;
                TCharStringConversionContext::WriteData(this, &v226[1], 1u);
                *a3 = 1;
                goto LABEL_23;
              case 7:
                if (*((_DWORD *)this + 147) != 4)
                {
                  v183 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v183 = &unk_1F0DFC400;
                  v183[4] = 5;
                }
                *((_DWORD *)this + 147) = 0;
                if (!*((unsigned char *)this + 429)) {
                  goto LABEL_23;
                }
                *(_DWORD *)v226 = (*((_DWORD *)this + 151) + 0x8000) & 0xFFFF0000;
                int32x2_t v97 = v219[3];
                unsigned __int32 v210 = v97.i32[0];
                int32x2_t *v219 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v97, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
                v219[1] = vrev64_s32(v97);
                TCharStringConversionContext::WriteFixed(this, (int *)v226);
                if (!*((unsigned char *)this + 896))
                {
                  _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                  if (!*((unsigned char *)this + 896)) {
                    goto LABEL_302;
                  }
                }
                (*(void (**)(char *, void, void))(*(void *)v9 + 24))((char *)this + 792, v210, 0);
                goto LABEL_23;
              case 10:
                int v98 = *((_DWORD *)this + 147);
                unsigned int v99 = v98 - 2;
                if (v98 < 2)
                {
                  v184 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v184 = &unk_1F0DFC400;
                  v184[4] = 5;
                }
                unsigned int v100 = v98 - 1;
                long long v101 = (char *)this + 596;
                int v102 = *((_DWORD *)this + v99 + 149) + *((_DWORD *)this + v100 + 149);
                goto LABEL_202;
              case 11:
                int v103 = *((_DWORD *)this + 147);
                unsigned int v99 = v103 - 2;
                if (v103 < 2)
                {
                  v181 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v181 = &unk_1F0DFC400;
                  v181[4] = 5;
                }
                unsigned int v100 = v103 - 1;
                long long v101 = (char *)this + 596;
                int v102 = *((_DWORD *)this + v99 + 149) - *((_DWORD *)this + v100 + 149);
                goto LABEL_202;
              case 12:
                int v104 = *((_DWORD *)this + 147);
                unsigned int v99 = v104 - 2;
                if (v104 < 2)
                {
                  v185 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v185 = &unk_1F0DFC400;
                  v185[4] = 5;
                }
                unsigned int v100 = v104 - 1;
                long long v101 = (char *)this + 596;
                int v105 = *((_DWORD *)this + v100 + 149);
                int v106 = v218;
                if (v218) {
                  v105 >>= 16;
                }
                int v102 = vcvtd_n_s64_f64((double)*((int *)this + v99 + 149) * 0.0000152587891 / ((double)v105 * 0.0000152587891), 0x10uLL);
                if (v218) {
                  int v106 = 0;
                }
                LODWORD(v218) = v106;
                goto LABEL_202;
              case 16:
                int v107 = *((_DWORD *)this + 147);
                unsigned int v108 = v107 - 1;
                *((_DWORD *)this + 147) = v107 - 1;
                int v109 = *((_DWORD *)this + v107 + 148);
                switch(v109 >> 16)
                {
                  case 3:
                  case 5:
                    unsigned int v119 = v107 - 2;
                    goto LABEL_183;
                  case 4:
                    *((_DWORD *)this + 147) = v107 - 2;
                    if (*((unsigned __int16 *)this + 2 * v107 + 295) << 16 != 0x10000)
                    {
                      v197 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v197 = &unk_1F0DFC400;
                      v197[4] = 5;
                    }
                    int v144 = v218;
                    if (v218) {
                      int v144 = 0;
                    }
                    LODWORD(v218) = v144;
                    unsigned int v119 = v107 - 3;
                    goto LABEL_183;
                  case 12:
                  case 13:
                    if (v107 < 2)
                    {
                      v193 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v193 = &unk_1F0DFC400;
                      v193[4] = 5;
                    }
                    TType1ToType2CharStringConversionContext::StoreCounterValues(this);
                    goto LABEL_23;
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                    int v110 = v107 - 2;
                    *((_DWORD *)this + 147) = v110;
                    int v111 = v110 - *((__int16 *)this + 2 * v110 + 299);
                    *((_DWORD *)this + 147) = v111;
                    int v112 = HIWORD(v109) - 13;
                    if (v109 >> 16 == 18) {
                      int v112 = 6;
                    }
                    CFDictionaryRef v113 = (int *)((char *)this + 4 * v111 + 596);
                    do
                    {
                      --v112;
                      int v114 = *v113++;
                      uint64_t v115 = *((int *)this + 147);
                      *((_DWORD *)this + 147) = v115 + 1;
                      *((_DWORD *)this + v115 + 149) = v114;
                    }
                    while ((_WORD)v112);
                    goto LABEL_23;
                  case 19:
                    BOOL v145 = __OFSUB__(v107, 3);
                    int v146 = v107 - 3;
                    if (v146 < 0 != v145)
                    {
                      v198 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v198 = &unk_1F0DFC400;
                      v198[4] = 5;
                    }
                    *((_DWORD *)this + 147) = v146;
                    if ((*((_DWORD *)this + v146 + 149) & 0x80000000) != 0)
                    {
                      v199 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v199 = &unk_1F0DFC400;
                      v199[4] = 5;
                    }
                    goto LABEL_23;
                  case 20:
                    unsigned int v147 = v107 - 4;
                    if (v107 < 4)
                    {
                      v200 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v200 = &unk_1F0DFC400;
                      v200[4] = 5;
                    }
                    unsigned int v148 = v107 - 3;
                    long long v149 = (char *)this + 596;
                    int v150 = *((_DWORD *)this + v147 + 149) + *((_DWORD *)this + v148 + 149);
                    goto LABEL_236;
                  case 21:
                    unsigned int v147 = v107 - 4;
                    if (v107 < 4)
                    {
                      v201 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v201 = &unk_1F0DFC400;
                      v201[4] = 5;
                    }
                    unsigned int v148 = v107 - 3;
                    long long v149 = (char *)this + 596;
                    int v150 = *((_DWORD *)this + v147 + 149) - *((_DWORD *)this + v148 + 149);
                    goto LABEL_236;
                  case 22:
                    unsigned int v147 = v107 - 4;
                    if (v107 < 4)
                    {
                      v202 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v202 = &unk_1F0DFC400;
                      v202[4] = 5;
                    }
                    unsigned int v148 = v107 - 3;
                    long long v149 = (char *)this + 596;
                    double v151 = (double)*((int *)this + v148 + 149)
                         * 0.0000152587891
                         * ((double)*((int *)this + v147 + 149)
                          * 0.0000152587891);
                    goto LABEL_235;
                  case 23:
                    unsigned int v147 = v107 - 4;
                    if (v107 < 4)
                    {
                      v203 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v203 = &unk_1F0DFC400;
                      v203[4] = 5;
                    }
                    unsigned int v148 = v107 - 3;
                    long long v149 = (char *)this + 596;
                    double v151 = (double)*((int *)this + v147 + 149)
                         * 0.0000152587891
                         / ((double)*((int *)this + v148 + 149)
                          * 0.0000152587891);
LABEL_235:
                    int v150 = vcvtd_n_s64_f64(v151, 0x10uLL);
LABEL_236:
                    *((_DWORD *)this + 147) = v148;
                    *(_DWORD *)&v149[4 * v147] = v150;
                    goto LABEL_23;
                  case 24:
                  case 26:
                    unsigned int v140 = v107 - 4;
                    if (v107 < 4)
                    {
                      v194 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v194 = &unk_1F0DFC400;
                      v194[4] = 5;
                    }
                    int v141 = *((_DWORD *)this + (v107 - 3) + 149);
                    *((_DWORD *)this + 147) = v140;
                    if (v141 < 0
                      || (unint64_t v142 = (v141 >> 16),
                          (int)v142 >= *(unsigned __int16 *)(*((void *)this + 56) + 80)))
                    {
                      v195 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v195 = &unk_1F0DFC400;
                      v195[4] = 5;
                    }
                    uint64_t v143 = *((void *)this + 60);
                    if (v142 >= (*((void *)this + 61) - v143) >> 2) {
                      std::vector<int>::__throw_out_of_range[abi:fe180100]();
                    }
                    *(_DWORD *)(v143 + 4 * v142) = *((_DWORD *)this + v140 + 149);
                    goto LABEL_23;
                  case 25:
                    unsigned int v152 = v107 - 3;
                    if (v107 < 3)
                    {
                      v204 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v204 = &unk_1F0DFC400;
                      v204[4] = 5;
                    }
                    *((_DWORD *)this + 147) = v152;
                    long long v125 = (char *)this + 4 * v152;
                    int v153 = *((_DWORD *)v125 + 149);
                    if (v153 < 0
                      || (unint64_t v126 = (v153 >> 16),
                          (int)v126 >= *(unsigned __int16 *)(*((void *)this + 56) + 80)))
                    {
                      v205 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v205 = &unk_1F0DFC400;
                      v205[4] = 5;
                    }
                    uint64_t v127 = *((void *)this + 60);
                    if (v126 >= (*((void *)this + 61) - v127) >> 2) {
                      std::vector<int>::__throw_out_of_range[abi:fe180100]();
                    }
                    int v124 = v107 - 2;
                    goto LABEL_191;
                  case 27:
                    unsigned int v154 = v107 - 6;
                    if (v107 < 6)
                    {
                      v206 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v206 = &unk_1F0DFC400;
                      v206[4] = 5;
                    }
                    int v155 = *((_DWORD *)this + (v107 - 3) + 149);
                    int v156 = *((_DWORD *)this + (v107 - 4) + 149);
                    unsigned int v119 = v107 - 5;
                    int v157 = *((_DWORD *)this + v119 + 149);
                    *((_DWORD *)this + 147) = v154;
                    if (v156 > v155) {
                      goto LABEL_183;
                    }
                    *((_DWORD *)this + 147) = v119;
                    *((_DWORD *)this + v154 + 149) = v157;
                    break;
                  case 28:
                    BOOL v145 = __OFSUB__(v107, 2);
                    int v158 = v107 - 2;
                    if (v158 < 0 != v145)
                    {
                      v207 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v207 = &unk_1F0DFC400;
                      v207[4] = 5;
                    }
                    long long v134 = (char *)this + 4 * v158;
                    unsigned int v159 = 1103515245 * *((_DWORD *)this + 148) + 12345;
                    *((_DWORD *)this + 148) = v159;
                    int v133 = HIWORD(v159) + 1;
                    goto LABEL_195;
                  case 29:
                    unsigned int v160 = v107 - 2;
                    *((_DWORD *)this + 147) = v107 - 2;
                    BOOL v145 = __OFSUB__(v107, 3);
                    int v161 = v107 - 3;
                    if (v161 < 0 != v145)
                    {
                      v208 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v208 = &unk_1F0DFC400;
                      v208[4] = 5;
                    }
                    *((_DWORD *)this + v160 + 149) = *((_DWORD *)this + v161 + 149);
                    goto LABEL_249;
                  case 30:
                    unsigned int v162 = v107 - 3;
                    if (v107 < 3)
                    {
                      v209 = __cxa_allocate_exception(0x10uLL);
                      *(void *)v209 = &unk_1F0DFC400;
                      v209[4] = 5;
                    }
                    int v163 = *((_DWORD *)this + v162 + 149);
                    *((_DWORD *)this + 147) = v162;
                    int v164 = v107 - 4;
                    *((_DWORD *)this + v162 + 149) = *((_DWORD *)this + v164 + 149);
                    *((_DWORD *)this + v164 + 149) = v163;
                    goto LABEL_182;
                  default:
                    v196 = __cxa_allocate_exception(0x10uLL);
                    *(void *)v196 = &unk_1F0DFC400;
                    v196[4] = 5;
                }
                goto LABEL_23;
              case 24:
                int v135 = *((_DWORD *)this + 147);
                unsigned int v99 = v135 - 2;
                if (v135 < 2)
                {
                  v191 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v191 = &unk_1F0DFC400;
                  v191[4] = 5;
                }
                unsigned int v100 = v135 - 1;
                long long v101 = (char *)this + 596;
                int v102 = vcvtd_n_s64_f64((double)*((int *)this + v100 + 149)* 0.0000152587891* ((double)*((int *)this + v99 + 149)* 0.0000152587891), 0x10uLL);
                goto LABEL_202;
              case 25:
                int v136 = *((_DWORD *)this + 147);
                unsigned int v99 = v136 - 2;
                if (v136 < 2)
                {
                  v192 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v192 = &unk_1F0DFC400;
                  v192[4] = 5;
                }
                unsigned int v100 = v136 - 1;
                long long v101 = (char *)this + 596;
                int v102 = vcvtd_n_s64_f64((double)*((int *)this + v99 + 149)* 0.0000152587891/ ((double)*((int *)this + v100 + 149)* 0.0000152587891), 0x10uLL);
                int v137 = v218;
                if (v218) {
                  int v137 = 0;
                }
                LODWORD(v218) = v137;
LABEL_202:
                *((_DWORD *)this + 147) = v100;
                *(_DWORD *)&v101[4 * v99] = v102;
                goto LABEL_23;
              case 26:
                long long v116 = (char *)this + 4 * *((int *)this + 147);
                *((_DWORD *)v116 + 149) = *((_DWORD *)v116 + 148);
                goto LABEL_182;
              case 27:
                int v117 = *((_DWORD *)this + 147);
                *((_DWORD *)this + 147) = v117 - 1;
                int v118 = *((_DWORD *)this + v117 + 148);
                *((_DWORD *)this + v117 + 148) = *((_DWORD *)this + v117 + 147);
                *((_DWORD *)this + *((int *)this + 147) + 148) = v118;
LABEL_182:
                unsigned int v119 = *((_DWORD *)this + 147) + 1;
LABEL_183:
                *((_DWORD *)this + 147) = v119;
                goto LABEL_23;
              case 28:
                int v120 = *((_DWORD *)this + 147);
                unsigned int v121 = v120 - 2;
                if (v120 < 2)
                {
                  v186 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v186 = &unk_1F0DFC400;
                  v186[4] = 5;
                }
                unint64_t v122 = *((unsigned int *)this + (v120 - 1) + 149);
                *((_DWORD *)this + 147) = v121;
                if (v122 >= *(unsigned __int16 *)(*((void *)this + 56) + 80))
                {
                  v187 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v187 = &unk_1F0DFC400;
                  v187[4] = 5;
                }
                uint64_t v123 = *((void *)this + 60);
                if (v122 >= (*((void *)this + 61) - v123) >> 2) {
                  std::vector<int>::__throw_out_of_range[abi:fe180100]();
                }
                *(_DWORD *)(v123 + 4 * v122) = *((_DWORD *)this + v121 + 149);
                goto LABEL_23;
              case 29:
                int v124 = *((_DWORD *)this + 147);
                if (v124 < 2)
                {
                  v188 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v188 = &unk_1F0DFC400;
                  v188[4] = 5;
                }
                *((_DWORD *)this + 147) = v124 - 1;
                long long v125 = (char *)this + 4 * (v124 - 1);
                unint64_t v126 = *((unsigned int *)v125 + 149);
                if (v126 >= *(unsigned __int16 *)(*((void *)this + 56) + 80))
                {
                  v189 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v189 = &unk_1F0DFC400;
                  v189[4] = 5;
                }
                uint64_t v127 = *((void *)this + 60);
                if (v126 >= (*((void *)this + 61) - v127) >> 2) {
                  std::vector<int>::__throw_out_of_range[abi:fe180100]();
                }
LABEL_191:
                int v128 = *(_DWORD *)(v127 + 4 * v126);
                *((_DWORD *)this + 147) = v124;
                *((_DWORD *)v125 + 149) = v128;
                goto LABEL_23;
              case 30:
                int v129 = *((_DWORD *)this + 147);
                unsigned int v130 = v129 - 4;
                if (v129 < 4)
                {
                  v190 = __cxa_allocate_exception(0x10uLL);
                  *(void *)v190 = &unk_1F0DFC400;
                  v190[4] = 5;
                }
                int v131 = *((_DWORD *)this + (v129 - 1) + 149);
                int v132 = *((_DWORD *)this + (v129 - 2) + 149);
                unsigned int v108 = v129 - 3;
                int v133 = *((_DWORD *)this + v108 + 149);
                *((_DWORD *)this + 147) = v130;
                if (v132 <= v131)
                {
LABEL_249:
                  *((_DWORD *)this + 147) = v108;
                }
                else
                {
                  long long v134 = (char *)this + 4 * v130;
LABEL_195:
                  *((_DWORD *)this + 147) = v108;
                  *((_DWORD *)v134 + 149) = v133;
                }
                goto LABEL_23;
              default:
                goto LABEL_23;
            }
            break;
          case 13:
            if (*((_DWORD *)this + 147) != 2)
            {
              long long v174 = __cxa_allocate_exception(0x10uLL);
              *(void *)long long v174 = &unk_1F0DFC400;
              v174[4] = 5;
            }
            *(_DWORD *)v226 = *((_DWORD *)this + 150);
            *((_DWORD *)this + 147) = 0;
            if (!*((unsigned char *)this + 429)) {
              break;
            }
            uint64_t v52 = *((unsigned int *)this + 149);
            *((_DWORD *)this + 146) = v52;
            *((_DWORD *)this + 143) = (v52 + 0x8000) & 0xFFFF0000;
            *((void *)this + 72) = 0;
            TCharStringConversionContext::WriteFixed(this, (int *)v226);
            if (!a2) {
              *((void *)this + 59) = v10;
            }
            if (!*((unsigned char *)this + 896))
            {
              _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
              if (!*((unsigned char *)this + 896)) {
                goto LABEL_302;
              }
            }
            (*(void (**)(char *, uint64_t, void))(*(void *)v9 + 24))((char *)this + 792, v52, 0);
            break;
          case 14:
            *((unsigned char *)this + 431) = 0;
            if (*((unsigned char *)this + 429))
            {
              *((unsigned char *)this + 429) = 0;
              *((_WORD *)this + 280) = 0;
              memset(v226, 170, 12);
              if (!*((unsigned char *)this + 896))
              {
                _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                if (!*((unsigned char *)this + 896)) {
                  goto LABEL_302;
                }
              }
              int v222 = -1431655766;
              unsigned int v54 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v9 + 32))((char *)this + 792, 1);
              if (v54)
              {
                for (unsigned __int16 i = 1; i <= v54; ++i)
                {
                  if (!*((unsigned char *)this + 896))
                  {
                    _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                    if (!*((unsigned char *)this + 896)) {
                      goto LABEL_302;
                    }
                  }
                  if ((*(unsigned int (**)(char *, void, int *, uint64_t))(*(void *)v9 + 56))((char *)this + 792, i, &v222, 1))
                  {
                    unsigned int v57 = TCFFDict::EncodeNumber((TCFFDict *)SHIWORD(v222), v226, v56);
                    TCharStringConversionContext::WriteData(this, v226, v57);
                  }
                }
                __int16 v223 = 4620;
                TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v223 + 1, 1u);
              }
              if (!*((unsigned char *)this + 896))
              {
                _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                if (!*((unsigned char *)this + 896)) {
                  goto LABEL_302;
                }
              }
              unsigned int v58 = (*(uint64_t (**)(char *, uint64_t))(*(void *)v9 + 32))((char *)this + 792, 3);
              if (v58)
              {
                for (unsigned __int16 j = 1; j <= v58; ++j)
                {
                  if (!*((unsigned char *)this + 896))
                  {
                    _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                    if (!*((unsigned char *)this + 896)) {
                      goto LABEL_302;
                    }
                  }
                  if ((*(unsigned int (**)(char *, void, int *, uint64_t))(*(void *)v9 + 56))((char *)this + 792, j, &v222, 3))
                  {
                    unsigned int v61 = TCFFDict::EncodeNumber((TCFFDict *)SHIWORD(v222), v226, v60);
                    TCharStringConversionContext::WriteData(this, v226, v61);
                  }
                }
                if (!v54)
                {
                  __int16 v223 = 5900;
                  TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v223 + 1, 1u);
                }
              }
              if (!*((unsigned char *)this + 896))
              {
                _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                if (!*((unsigned char *)this + 896)) {
                  goto LABEL_302;
                }
              }
              unsigned int v62 = (*(uint64_t (**)(char *))(*(void *)v9 + 48))((char *)this + 792);
              if (v62)
              {
                int v63 = 1;
                while (1)
                {
                  *(_DWORD *)&v226[8] = 0;
                  *(void *)v226 = 0;
                  if (!*((unsigned char *)this + 896))
                  {
                    _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
                    if (!*((unsigned char *)this + 896)) {
                      break;
                    }
                  }
                  unsigned int v64 = (*(uint64_t (**)(char *, unsigned __int8 *, void))(*((void *)this + 99) + 72))((char *)this + 792, v226, (unsigned __int16)v63);
                  __int16 v223 = 5132;
                  TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v223 + 1, 1u);
                  TCharStringConversionContext::WriteData(this, v226, v64);
                  if (v62 < (unsigned __int16)++v63) {
                    goto LABEL_89;
                  }
                }
LABEL_302:
                __break(1u);
                JUMPOUT(0x1B5339840);
              }
LABEL_89:
              TType1ToType2CharStringConversionContext::WriteHintMask(this, 0);
              if (a2)
              {
                *((unsigned char *)this + 430) = 1;
                return;
              }
              int v10 = (unsigned __int8 *)*((void *)this + 59);
              BYTE4(v218) = 1;
            }
            else
            {
              if (*((_DWORD *)this + 147))
              {
                uint64_t v178 = __cxa_allocate_exception(0x10uLL);
                *(void *)uint64_t v178 = &unk_1F0DFC400;
                v178[4] = 5;
              }
              *(_WORD *)v226 = 3596;
              TCharStringConversionContext::WriteData(this, &v226[1], 1u);
              *a3 = 1;
              if (*((unsigned char *)this + 896))
              {
                THintCntrConversion::~THintCntrConversion((TType1ToType2CharStringConversionContext *)((char *)this + 792));
                *((unsigned char *)this + 896) = 0;
              }
            }
            break;
          case 21:
            uint64_t v53 = *((int *)this + 147);
            if (*((unsigned char *)this + 433))
            {
              *((_DWORD *)this + 147) = v53 + 1;
              double v35 = (char *)this + 4 * v53;
              int v36 = 21;
              goto LABEL_109;
            }
            if (v53 != 2)
            {
              v177 = __cxa_allocate_exception(0x10uLL);
              *(void *)v177 = &unk_1F0DFC400;
              v177[4] = 5;
            }
            int v85 = *((_DWORD *)this + 150);
            *(_DWORD *)v226 = v85;
            *((_DWORD *)this + 147) = 0;
            int v86 = *((_DWORD *)this + 149);
            int v222 = v86;
            TType1ToType2CharStringConversionContext::SetHints(this);
            if (*((unsigned char *)this + 429)) {
              break;
            }
            if ((v218 & 0x100000000) != 0)
            {
              int v222 = *((_DWORD *)this + 146) + v86;
              *(_DWORD *)v226 = *((_DWORD *)this + 145) + v85;
            }
            TType1ToType2CharStringConversionContext::WriteMoveTo(this, &v222, (int *)v226);
            goto LABEL_136;
          case 22:
            uint64_t v82 = *((int *)this + 147);
            if (*((unsigned char *)this + 433))
            {
              *((_DWORD *)this + 147) = v82 + 1;
              double v35 = (char *)this + 4 * v82;
              int v36 = 22;
LABEL_109:
              *((_DWORD *)v35 + 149) = v36;
            }
            else
            {
              if (v82 != 1)
              {
                uint64_t v179 = __cxa_allocate_exception(0x10uLL);
                *(void *)uint64_t v179 = &unk_1F0DFC400;
                v179[4] = 5;
              }
              *((_DWORD *)this + 147) = 0;
              int v87 = *((_DWORD *)this + 149);
              int v221 = v87;
              TType1ToType2CharStringConversionContext::SetHints(this);
              if (!*((unsigned char *)this + 429))
              {
                *(_DWORD *)v226 = 0;
                if ((v218 & 0x100000000) != 0)
                {
                  int v221 = *((_DWORD *)this + 146) + v87;
                  *(_DWORD *)v226 = *((_DWORD *)this + 145);
                }
                TType1ToType2CharStringConversionContext::WriteMoveTo(this, &v221, (int *)v226);
LABEL_136:
                BYTE4(v218) = 0;
              }
            }
            break;
          case 30:
            if (*((_DWORD *)this + 147) != 4)
            {
              uint64_t v170 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v170 = &unk_1F0DFC400;
              v170[4] = 5;
            }
            *((_DWORD *)this + 147) = 0;
            TType1ToType2CharStringConversionContext::SetHints(this);
            if (!*((unsigned char *)this + 429))
            {
              int32x2_t v28 = vadd_s32(v219[1], *(int32x2_t *)((char *)this + 4 * *((int *)this + 147) + 596));
              int32x2_t v29 = vadd_s32(v28, *(int32x2_t *)((char *)this + 4 * *((int *)this + 147) + 604));
              int32x2_t v30 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v29, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
              *(int32x2_t *)&long long v31 = vrev64_s32(v30);
              *((int32x2_t *)&v31 + 1) = v29;
              int32x2_t v32 = (int32x2_t)vand_s8((int8x8_t)vadd_s32(v28, (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
              int32x2_t v33 = vsub_s32(v32, vrev64_s32(*v219));
              *(_OWORD *)v219->i8 = v31;
              *(int32x2_t *)v224 = v33;
              *(int32x2_t *)&v224[2] = vsub_s32(v30, v32);
              TCharStringConversionContext::WriteFixed(this, v224);
              TCharStringConversionContext::WriteFixed(this, &v224[1]);
              TCharStringConversionContext::WriteFixed(this, &v224[2]);
              TCharStringConversionContext::WriteFixed(this, v216);
              *(_WORD *)v226 = 7692;
              TCharStringConversionContext::WriteData(this, &v226[1], 1u);
            }
            break;
          case 31:
            if (*((_DWORD *)this + 147) != 4)
            {
              long long v175 = __cxa_allocate_exception(0x10uLL);
              *(void *)long long v175 = &unk_1F0DFC400;
              v175[4] = 5;
            }
            *((_DWORD *)this + 147) = 0;
            TType1ToType2CharStringConversionContext::SetHints(this);
            if (!*((unsigned char *)this + 429))
            {
              long long v75 = (_DWORD *)((char *)this + 4 * *((int *)this + 147));
              int v76 = v75[149];
              int v77 = v75[150];
              int v78 = v75[151];
              LODWORD(v75) = v75[152];
              int v79 = *((_DWORD *)this + 146) + v76;
              v224[0] = ((v79 + 0x8000) & 0xFFFF0000) - *((_DWORD *)this + 143);
              v224[1] = v77;
              int v80 = v79 + v77;
              *((_DWORD *)this + 146) = v80;
              int v81 = *((_DWORD *)this + 145) + v78;
              *((_DWORD *)this + 143) = (v80 + 0x8000) & 0xFFFF0000;
              LODWORD(v75) = v81 + v75;
              *((_DWORD *)this + 145) = v75;
              LODWORD(v75) = (v75 + 0x8000) & 0xFFFF0000;
              *((_DWORD *)this + 144) = v75;
              v224[2] = v78;
              v224[3] = v75 - ((v81 + 0x8000) & 0xFFFF0000);
              TCharStringConversionContext::WriteFixed(this, v224);
              TCharStringConversionContext::WriteFixed(this, &v224[1]);
              TCharStringConversionContext::WriteFixed(this, &v224[2]);
              TCharStringConversionContext::WriteFixed(this, v216);
              *(_WORD *)v226 = 7948;
              TCharStringConversionContext::WriteData(this, &v226[1], 1u);
            }
            break;
          default:
            v168 = __cxa_allocate_exception(0x10uLL);
            *(void *)v168 = &unk_1F0DFC400;
            v168[4] = 5;
        }
      }
      else
      {
        uint64_t v13 = *((int *)this + 147);
        if ((int)v13 >= 48)
        {
          long long v165 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v165 = &unk_1F0DFC400;
          v165[4] = 5;
        }
        if (v11 <= 0xF6)
        {
          int v14 = (v11 << 16) - 9109504;
LABEL_22:
          *((_DWORD *)this + 147) = v13 + 1;
          *((_DWORD *)this + v13 + 149) = v14;
          goto LABEL_23;
        }
        if (v11 <= 0xFA)
        {
          int v10 = v7 + 2;
          int v18 = (v7[1] << 16) | (v11 << 24);
          int v19 = 158072832;
LABEL_21:
          int v14 = v18 + v19;
          goto LABEL_22;
        }
        if (v11 != 255)
        {
          int v10 = v7 + 2;
          int v18 = -9109504 - ((v7[1] << 16) | (v11 << 24));
          int v19 = -81854464;
          goto LABEL_21;
        }
        int v10 = v7 + 5;
        unsigned int v20 = bswap32(*(_DWORD *)(v7 + 1));
        if (v20 + 32000 <= 0xFA00)
        {
          int v14 = v20 << 16;
          goto LABEL_22;
        }
        *((_DWORD *)this + 147) = v13 + 1;
        *((_DWORD *)this + v13 + 149) = v20;
        LODWORD(v218) = 1;
      }
LABEL_23:
      if ((unint64_t)v10 < v8)
      {
        uint64_t v7 = v10;
        if (!*a3) {
          continue;
        }
      }
      return;
    }
  }
}

void TType1ToType2CharStringConversionContext::~TType1ToType2CharStringConversionContext(void **this)
{
  *this = &unk_1F0E00768;
  free(this[35]);
  uint64_t v2 = this[113];
  if (v2)
  {
    this[114] = v2;
    operator delete(v2);
  }
  if (*((unsigned char *)this + 896)) {
    THintCntrConversion::~THintCntrConversion((THintCntrConversion *)(this + 99));
  }
  std::__optional_destruct_base<TFlexConversion,false>::~__optional_destruct_base[abi:fe180100]((uint64_t)(this + 63));
  int v3 = this[60];
  if (v3)
  {
    this[61] = v3;
    operator delete(v3);
  }
  long long v4 = this[57];
  this[57] = 0;
  if (v4) {
    MEMORY[0x1BA9994A0](v4, 0x1000C8077774924);
  }
}

{
  uint64_t vars8;

  TType1ToType2CharStringConversionContext::~TType1ToType2CharStringConversionContext(this);
  JUMPOUT(0x1BA9994D0);
}

double _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104)) {
    THintCntrConversion::~THintCntrConversion((THintCntrConversion *)a1);
  }
  *(void *)a1 = &unk_1F0E00798;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(unsigned char *)(a1 + 88) = 1;
  *(_DWORD *)(a1 + 92) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  return result;
}

unsigned char *TType1ToType2CharStringConversionContext::SetHints(unsigned char *this)
{
  this[431] = 1;
  if (this[432])
  {
    this[432] = 0;
    if (!this[429])
    {
      unsigned __int16 v1 = *((_WORD *)this + 280) + 1;
      *((_WORD *)this + 280) = v1;
      return TType1ToType2CharStringConversionContext::WriteHintMask((TType1ToType2CharStringConversionContext *)this, v1);
    }
  }
  return this;
}

void *TType1ToType2CharStringConversionContext::WriteMoveTo(TType1ToType2CharStringConversionContext *this, int *a2, int *a3)
{
  if (*a2)
  {
    int v5 = *a3;
    TCharStringConversionContext::WriteFixed(this, a2);
    if (v5)
    {
      TCharStringConversionContext::WriteFixed(this, a3);
      __int16 v10 = 5388;
      unsigned int v6 = &v10;
    }
    else
    {
      __int16 v9 = 5644;
      unsigned int v6 = &v9;
    }
  }
  else
  {
    TCharStringConversionContext::WriteFixed(this, a3);
    __int16 v8 = 1036;
    unsigned int v6 = &v8;
  }
  return TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)((unint64_t)v6 | 1), 1u);
}

void *TType1ToType2CharStringConversionContext::WriteLineTo(TType1ToType2CharStringConversionContext *this, int *a2, int *a3)
{
  if (*a2)
  {
    int v5 = *a3;
    TCharStringConversionContext::WriteFixed(this, a2);
    if (v5)
    {
      TCharStringConversionContext::WriteFixed(this, a3);
      __int16 v10 = 1292;
      unsigned int v6 = &v10;
    }
    else
    {
      __int16 v9 = 1548;
      unsigned int v6 = &v9;
    }
  }
  else
  {
    TCharStringConversionContext::WriteFixed(this, a3);
    __int16 v8 = 1804;
    unsigned int v6 = &v8;
  }
  return TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)((unint64_t)v6 | 1), 1u);
}

void std::__optional_destruct_base<TFlexConversion,false>::reset[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    *(void *)a1 = &unk_1F0E00800;
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
      operator delete(v2);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
}

void TType1ToType2CharStringConversionContext::StoreCounterValues(TType1ToType2CharStringConversionContext *this)
{
  uint64_t v2 = *((int *)this + 147);
  int v3 = HIWORD(*((_DWORD *)this + v2 + 149));
  uint64_t v4 = v2 - 1;
  *((_DWORD *)this + 147) = v4;
  if (v3 == 12)
  {
    uint64_t v8 = 0;
    __int16 v9 = (void **)((char *)this + 904);
    __int16 v10 = (char *)*((void *)this + 114);
    do
    {
      uint64_t v11 = (_DWORD *)((char *)this + 4 * (21 - v8) + 596);
      unint64_t v12 = *((void *)this + 115);
      if ((unint64_t)v10 >= v12)
      {
        int v14 = (char *)*v9;
        uint64_t v15 = (v10 - (unsigned char *)*v9) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          goto LABEL_81;
        }
        uint64_t v17 = v12 - (void)v14;
        if (v17 >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          int v19 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)this + 920, v18);
          __int16 v10 = (char *)*((void *)this + 114);
          int v14 = (char *)*((void *)this + 113);
        }
        else
        {
          int v19 = 0;
        }
        unsigned int v20 = &v19[4 * v15];
        *(_DWORD *)unsigned int v20 = *v11;
        uint64_t v13 = v20 + 4;
        while (v10 != v14)
        {
          int v21 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v20 - 1) = v21;
          v20 -= 4;
        }
        *((void *)this + 113) = v20;
        *((void *)this + 114) = v13;
        *((void *)this + 115) = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)__int16 v10 = *v11;
        uint64_t v13 = v10 + 4;
      }
      *((void *)this + 114) = v13;
      ++v8;
      __int16 v10 = v13;
    }
    while (v8 != 22);
    *((_DWORD *)this + 147) -= 22;
  }
  else
  {
    if (v3 != 13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      exception[4] = 5;
    }
    unint64_t v5 = *((unsigned int *)this + v4 + 149);
    unint64_t v6 = v5 >> 16;
    if (WORD1(v5))
    {
      uint64_t v22 = 0;
      int v23 = (void **)((char *)this + 904);
      if (v6 <= 1) {
        uint64_t v24 = 1;
      }
      else {
        uint64_t v24 = v6;
      }
      uint64_t v7 = (char *)*((void *)this + 114);
      do
      {
        int v25 = (_DWORD *)((char *)this + 4 * ~v22 + 4 * v6 + 596);
        unint64_t v26 = *((void *)this + 115);
        if ((unint64_t)v7 >= v26)
        {
          int v27 = (char *)*v23;
          uint64_t v28 = (v7 - (unsigned char *)*v23) >> 2;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62) {
            goto LABEL_81;
          }
          uint64_t v30 = v26 - (void)v27;
          if (v30 >> 1 > v29) {
            unint64_t v29 = v30 >> 1;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            int32x2_t v32 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<int>>((uint64_t)this + 920, v31);
            uint64_t v7 = (char *)*((void *)this + 114);
            int v27 = (char *)*((void *)this + 113);
          }
          else
          {
            int32x2_t v32 = 0;
          }
          int32x2_t v33 = &v32[4 * v28];
          *(_DWORD *)int32x2_t v33 = *v25;
          uint64_t v34 = v33 + 4;
          while (v7 != v27)
          {
            int v35 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v33 - 1) = v35;
            v33 -= 4;
          }
          *((void *)this + 113) = v33;
          *((void *)this + 114) = v34;
          *((void *)this + 115) = &v32[4 * v31];
          if (v27) {
            operator delete(v27);
          }
          uint64_t v7 = v34;
        }
        else
        {
          *(_DWORD *)uint64_t v7 = *v25;
          v7 += 4;
        }
        *((void *)this + 114) = v7;
        ++v22;
      }
      while (v22 != v24);
      LODWORD(v4) = *((_DWORD *)this + 147);
    }
    else
    {
      uint64_t v7 = (char *)*((void *)this + 114);
    }
    *((_DWORD *)this + 147) = v4 - v6;
    int v36 = (char *)*((void *)this + 113);
    if (v36 == v7) {
      goto LABEL_80;
    }
    unsigned int v38 = *((_DWORD *)v7 - 1);
    int v37 = v7 - 4;
    unsigned int v39 = HIWORD(v38);
    *((void *)this + 114) = v37;
    if (HIWORD(v38))
    {
      LODWORD(v40) = 0;
      LODWORD(v41) = 0;
      int32x2_t v42 = (char *)this + 792;
      unsigned __int16 v43 = v39;
      do
      {
        uint64_t v44 = *((void *)this + 113);
        uint64_t v45 = *((void *)this + 114);
        if (v44 == v45) {
          goto LABEL_80;
        }
        int v46 = *(_DWORD *)(v45 - 4);
        *((void *)this + 114) = v45 - 4;
        if (v44 == v45 - 4) {
          goto LABEL_80;
        }
        uint64_t v41 = (v41 + v40 + v46);
        unsigned int v47 = *(_DWORD *)(v45 - 8);
        uint64_t v40 = v47;
        *((void *)this + 114) = v45 - 8;
        if ((v47 & 0x80000000) != 0)
        {
          if (!*((unsigned char *)this + 896))
          {
            _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
            if (!*((unsigned char *)this + 896)) {
              goto LABEL_80;
            }
          }
          (*(void (**)(char *, void, void, uint64_t, void))(*(void *)v42 + 16))((char *)this + 792, (v40 + v41), -(int)v40, 129, v43);
          LODWORD(v41) = 0;
          LODWORD(v40) = 0;
          --v43;
        }
        else
        {
          if (!*((unsigned char *)this + 896))
          {
            _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
            if (!*((unsigned char *)this + 896)) {
              goto LABEL_80;
            }
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, void))(*(void *)v42 + 16))((char *)this + 792, v41, v40, 129, v43);
        }
      }
      while (v43);
      int v36 = (char *)*((void *)this + 113);
      int v37 = (char *)*((void *)this + 114);
    }
    if (v36 == v37) {
      goto LABEL_80;
    }
    unsigned int v48 = HIWORD(*((_DWORD *)v37 - 1));
    *((void *)this + 114) = v37 - 4;
    uint64_t v49 = v48 <= v39 ? v39 : v48;
    int32x2_t v50 = (char *)this + 792;
    if (!*((unsigned char *)this + 896))
    {
      _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
      if (!*((unsigned char *)this + 896)) {
        goto LABEL_80;
      }
    }
    (*(void (**)(char *, uint64_t))(*(void *)v50 + 40))((char *)this + 792, v49);
    if (v48)
    {
      LODWORD(v51) = 0;
      LODWORD(v52) = 0;
      while (1)
      {
        uint64_t v53 = *((void *)this + 113);
        uint64_t v54 = *((void *)this + 114);
        if (v53 == v54) {
          break;
        }
        int v55 = *(_DWORD *)(v54 - 4);
        *((void *)this + 114) = v54 - 4;
        if (v53 == v54 - 4) {
          break;
        }
        uint64_t v52 = (v52 + v51 + v55);
        unsigned int v56 = *(_DWORD *)(v54 - 8);
        uint64_t v51 = v56;
        *((void *)this + 114) = v54 - 8;
        if ((v56 & 0x80000000) != 0)
        {
          if (!*((unsigned char *)this + 896))
          {
            _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
            if (!*((unsigned char *)this + 896)) {
              break;
            }
          }
          (*(void (**)(char *, void, void, uint64_t, void))(*(void *)v50 + 16))((char *)this + 792, (v51 + v52), -(int)v51, 131, (unsigned __int16)v48);
          LODWORD(v52) = 0;
          LODWORD(v51) = 0;
          LOWORD(v48) = v48 - 1;
        }
        else
        {
          if (!*((unsigned char *)this + 896))
          {
            _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)this + 792);
            if (!*((unsigned char *)this + 896)) {
              break;
            }
          }
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t, void))(*(void *)v50 + 16))((char *)this + 792, v52, v51, 131, (unsigned __int16)v48);
        }
        if (!(_WORD)v48) {
          return;
        }
      }
LABEL_80:
      __break(1u);
LABEL_81:
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
  }
}

void TType1ToType2CharStringConversionContext::FlattenSubroutine(TType1ToType2CharStringConversionContext *this, __int16 a2, int a3, BOOL *a4)
{
  LOWORD(v33) = -21846;
  unint64_t v31 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v32 = 0xAAAAAAAAAAAAAAAALL;
  uint64_t v8 = (*(uint64_t (**)(void, unint64_t *, unsigned int *, unint64_t *))(**((void **)this + 55)
                                                                                                 + 136))(*((void *)this + 55), &v31, &v33, &v32);
  if (v8) {
    BOOL v9 = v31 == 0;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    goto LABEL_22;
  }
  unint64_t v10 = v8;
  int v11 = (*(uint64_t (**)(void))(**((void **)this + 55) + 144))(*((void *)this + 55));
  int v12 = (__int16)v33;
  int v13 = v12 + v12 * v11;
  unint64_t v14 = v32;
  unint64_t v15 = v31 + v13;
  BOOL v16 = v15 < v31 || v15 > v32;
  if (v16 || (__int16)v33 * a3 < 0) {
    goto LABEL_22;
  }
  uint64_t v17 = (const unsigned __int8 *)(v31 + (__int16)v33 * a3);
  unint64_t v18 = v31 + v13;
  int v19 = &v17[2 * (__int16)v33];
  BOOL v20 = v19 < v17 || (unint64_t)v19 > v18;
  if (v20
    || ((unsigned int v21 = BytesToCard(v17, (__int16)v33),
         int v22 = BytesToCard(&v17[v12], v12),
         unint64_t v23 = v10 + v21 - 1,
         uint64_t v24 = v22 - v21,
         unint64_t v25 = v23 + v24,
         v10 <= v23)
      ? (BOOL v26 = v25 >= v23)
      : (BOOL v26 = 0),
        v26 ? (BOOL v27 = v25 > v14) : (BOOL v27 = 1),
        v27))
  {
LABEL_22:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  uint64_t v28 = *((void *)this + 58);
  int v29 = *((_DWORD *)this + 142);
  *((_DWORD *)this + 142) = v24;
  *((void *)this + 58) = v23;
  TType1ToType2CharStringConversionContext::ConvertT1ToT2CharString(this, (unsigned __int16)(a2 + 1), a4);
  *((void *)this + 58) = v28;
  *((_DWORD *)this + 142) = v29;
}

void *TType1ToType2CharStringConversionContext::WriteHintMask(TType1ToType2CharStringConversionContext *this, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v9 = 0;
  *(void *)uint64_t v8 = 0;
  uint64_t v4 = (char *)this + 792;
  if (!*((unsigned char *)this + 896))
  {
    _ZNSt3__18optionalI19THintCntrConversionE7emplaceB8fe180100IJEvEERS1_DpOT_((uint64_t)v4);
    if (!*((unsigned char *)this + 896)) {
      __break(1u);
    }
  }
  double result = (void *)(*(uint64_t (**)(char *, unsigned __int8 *, uint64_t))(*(void *)v4 + 64))(v4, v8, a2);
  if (result)
  {
    unsigned int v6 = result;
    HIBYTE(v7) = 19;
    TCharStringConversionContext::WriteData(this, (const unsigned __int8 *)&v7 + 1, 1u);
    return TCharStringConversionContext::WriteData(this, v8, v6);
  }
  return result;
}

void THintCntrConversion::~THintCntrConversion(THintCntrConversion *this)
{
  *(void *)this = &unk_1F0E00798;
  uint64_t v2 = (void *)*((void *)this + 7);
  if (v2)
  {
    *((void *)this + 8) = v2;
    operator delete(v2);
  }
  int v3 = (void *)*((void *)this + 4);
  if (v3)
  {
    *((void *)this + 5) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4)
  {
    *((void *)this + 2) = v4;
    operator delete(v4);
  }
}

{
  uint64_t vars8;

  THintCntrConversion::~THintCntrConversion(this);
  JUMPOUT(0x1BA9994D0);
}

void THintCntrConversion::Finalize(THintCntrConversion *this)
{
  if (*((unsigned char *)this + 88))
  {
    if (!*((_WORD *)this + 40))
    {
LABEL_140:
      *((unsigned char *)this + 88) = 0;
      return;
    }
    unsigned __int16 v2 = 0;
    signed __int16 v3 = 0;
    uint64_t v4 = *((void *)this + 1);
    do
    {
      if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v4) >> 3) <= v3) {
        goto LABEL_142;
      }
      if (*(_WORD *)(v4 + 24 * v3 + 8) == 1) {
        ++v2;
      }
      ++v3;
    }
    while (*((unsigned __int16 *)this + 40) > v3);
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *((void *)this + 5);
    unint64_t v5 = (char **)((char *)this + 32);
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3) < v2)
    {
      std::vector<HintCntrValue>::resize(v5, v2);
      uint64_t v6 = *((void *)this + 4);
      uint64_t v7 = *((void *)this + 5);
    }
    if (v6 == v7)
    {
      unsigned __int16 v9 = 0;
    }
    else
    {
      int v8 = *((unsigned __int16 *)this + 40);
      if (*((_WORD *)this + 40))
      {
        unsigned __int16 v9 = 0;
        __int16 v10 = 0;
        while (1)
        {
          uint64_t v11 = *((void *)this + 1);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v11) >> 3) <= v10) {
            goto LABEL_142;
          }
          int v12 = (long long *)(v11 + 24 * v10);
          if (*((_WORD *)v12 + 4) == 1)
          {
            uint64_t v13 = *((void *)this + 4);
            if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v13) >> 3) <= v9) {
              goto LABEL_142;
            }
            uint64_t v14 = v13 + 24 * v9;
            long long v15 = *v12;
            *(void *)(v14 + 16) = *((void *)v12 + 2);
            *(_OWORD *)uint64_t v14 = v15;
            ++v9;
            int v8 = *((unsigned __int16 *)this + 40);
          }
          if (v8 <= ++v10)
          {
            int v16 = (__int16)(v9 - 1);
            if (v16 < 1) {
              goto LABEL_40;
            }
            int v17 = (__int16)(v9 - 1);
            while (1)
            {
              unint64_t v18 = (unsigned __int16)v17 - 1;
              uint64_t v19 = *((void *)this + 4);
              unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v19) >> 3);
              if (v20 <= v18 || v20 <= (unsigned __int16)v17) {
                goto LABEL_142;
              }
              unsigned int v21 = (int *)(v19 + 24 * v18);
              int v22 = *v21;
              int v23 = v21[1];
              uint64_t v24 = (int *)(v19 + 24 * (unsigned __int16)v17);
              int v25 = *v24;
              int v26 = v24[1];
              long long v116 = *(_OWORD *)(v24 + 2);
              if (*v21 != *v24 || v23 != v26 || v22 == -2147418112)
              {
                if (v22 <= v25)
                {
                  --v17;
                }
                else
                {
                  *uint64_t v24 = v22;
                  v24[1] = v23;
                  *(_OWORD *)(v24 + 2) = *(_OWORD *)(v21 + 2);
                  uint64_t v29 = *((void *)this + 4);
                  if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v29) >> 3) <= v18) {
                    goto LABEL_142;
                  }
                  uint64_t v30 = v29 + 24 * v18;
                  *(_DWORD *)uint64_t v30 = v25;
                  *(_DWORD *)(v30 + 4) = v26;
                  *(_OWORD *)(v30 + 8) = v116;
                  if (v16 > (__int16)v17) {
                    ++v17;
                  }
                }
              }
              else
              {
                uint64_t v31 = v19 + 24 * v18;
                uint64_t v32 = v19 + 24 * (unsigned __int16)v17;
                *(int8x8_t *)(v32 + 12) = vorr_s8(*(int8x8_t *)(v32 + 12), *(int8x8_t *)(v31 + 12));
                *(_DWORD *)(v32 + 20) |= *(_DWORD *)(v31 + 20);
                *unsigned int v21 = -2147418112;
              }
              if ((__int16)v17 <= 0) {
                goto LABEL_40;
              }
            }
          }
        }
      }
      unsigned __int16 v9 = 0;
LABEL_40:
      unsigned int v33 = (int *)*((void *)this + 4);
      uint64_t v34 = (int *)*((void *)this + 5);
      if (v34 == v33) {
        goto LABEL_142;
      }
      unint64_t v35 = ((char *)v34 - (char *)v33) / 24;
      if (*v33 < -2147418111)
      {
        if ((__int16)v9 >= 2)
        {
          if (v35 <= 1) {
            uint64_t v36 = 1;
          }
          else {
            uint64_t v36 = ((char *)v34 - (char *)v33) / 24;
          }
          uint64_t v37 = 1;
          uint64_t v38 = 6;
          while (v36 != v37)
          {
            if (v33[v38] > -2147418112) {
              goto LABEL_52;
            }
            ++v37;
            v38 += 6;
            if (v9 == v37) {
              goto LABEL_57;
            }
          }
          goto LABEL_142;
        }
        LOWORD(v37) = 1;
LABEL_52:
        if ((__int16)v37 < (__int16)v9)
        {
          uint64_t v39 = 0;
          uint64_t v40 = 0;
          uint64_t v41 = (unsigned __int16)v37;
          unint64_t v42 = v9 - (unint64_t)(unsigned __int16)v37;
          uint64_t v43 = 24 * (unsigned __int16)v37;
          while (1)
          {
            uint64_t v44 = *((void *)this + 4);
            if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v44) >> 3) <= v41 + v40) {
              goto LABEL_142;
            }
            uint64_t v45 = v44 + v39;
            long long v46 = *(_OWORD *)(v45 + v43);
            *(void *)(v45 + 16) = *(void *)(v45 + v43 + 16);
            *(_OWORD *)uint64_t v45 = v46;
            ++v40;
            v39 += 24;
            if (v42 == v40)
            {
              unsigned int v33 = (int *)*((void *)this + 4);
              uint64_t v34 = (int *)*((void *)this + 5);
              unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * (((char *)v34 - (char *)v33) >> 3);
              unsigned __int16 v9 = v40;
              goto LABEL_58;
            }
          }
        }
LABEL_57:
        unsigned __int16 v9 = 0;
      }
LABEL_58:
      if (v34 == v33) {
        goto LABEL_142;
      }
      int v47 = *((_DWORD *)this + 24);
      int v48 = v47 + *v33;
      *unsigned int v33 = v48;
      if (v9 >= 2u)
      {
        int v49 = 0;
        __int16 v50 = 0;
        while (v35 > v50)
        {
          int v51 = v49 + 1;
          if (v35 <= v51) {
            break;
          }
          uint64_t v52 = 6 * v51;
          int v53 = v33[v52] + v47;
          v33[v52] = v53 - (v33[6 * v50++ + 1] + v48);
          int v49 = v50;
          int v48 = v53;
          if (v9 - 1 <= v50) {
            goto LABEL_64;
          }
        }
        goto LABEL_142;
      }
    }
LABEL_64:
    if (*((_WORD *)this + 40))
    {
      unsigned __int16 v54 = 0;
      __int16 v55 = 0;
      uint64_t v56 = *((void *)this + 1);
      while (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v56) >> 3) > v55)
      {
        if (*(_WORD *)(v56 + 24 * v55 + 8) == 3) {
          ++v54;
        }
        if (*((unsigned __int16 *)this + 40) <= ++v55) {
          goto LABEL_72;
        }
      }
      goto LABEL_142;
    }
    unsigned __int16 v54 = 0;
LABEL_72:
    uint64_t v57 = *((void *)this + 7);
    uint64_t v58 = *((void *)this + 8);
    if (0xAAAAAAAAAAAAAAABLL * ((v58 - v57) >> 3) < v54)
    {
      std::vector<HintCntrValue>::resize((char **)this + 7, v54);
      uint64_t v57 = *((void *)this + 7);
      uint64_t v58 = *((void *)this + 8);
    }
    if (v57 == v58)
    {
      unsigned __int16 v60 = 0;
LABEL_128:
      unsigned __int16 v103 = 0;
      if (v9)
      {
        do
        {
          uint64_t v104 = *((void *)this + 4);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 5) - v104) >> 3) <= (__int16)v103) {
            goto LABEL_142;
          }
          uint64_t v105 = *((void *)this + 1);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v105) >> 3) <= v103) {
            goto LABEL_142;
          }
          int v106 = (long long *)(v104 + 24 * (__int16)v103);
          uint64_t v107 = v105 + 24 * v103;
          long long v108 = *v106;
          *(void *)(v107 + 16) = *((void *)v106 + 2);
          *(_OWORD *)uint64_t v107 = v108;
        }
        while (v9 > (__int16)++v103);
      }
      if (v60)
      {
        __int16 v109 = 0;
        unsigned __int16 v110 = v103;
        while (1)
        {
          uint64_t v111 = *((void *)this + 7);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v111) >> 3) <= v109) {
            goto LABEL_142;
          }
          uint64_t v112 = *((void *)this + 1);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v112) >> 3) <= v110) {
            goto LABEL_142;
          }
          CFDictionaryRef v113 = (long long *)(v111 + 24 * v109);
          uint64_t v114 = v112 + 24 * v110;
          long long v115 = *v113;
          *(void *)(v114 + 16) = *((void *)v113 + 2);
          *(_OWORD *)uint64_t v114 = v115;
          ++v110;
          if (v60 <= ++v109) {
            goto LABEL_139;
          }
        }
      }
      unsigned __int16 v110 = v103;
LABEL_139:
      *((_WORD *)this + 40) = v110;
      *((_WORD *)this + 41) = 2 * v9;
      *((_WORD *)this + 42) = 2 * v60;
      goto LABEL_140;
    }
    int v59 = *((unsigned __int16 *)this + 40);
    if (*((_WORD *)this + 40))
    {
      unsigned __int16 v60 = 0;
      __int16 v61 = 0;
      while (1)
      {
        uint64_t v62 = *((void *)this + 1);
        if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v62) >> 3) <= v61) {
          goto LABEL_142;
        }
        int v63 = (long long *)(v62 + 24 * v61);
        if (*((_WORD *)v63 + 4) == 3)
        {
          uint64_t v64 = *((void *)this + 7);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v64) >> 3) <= v60) {
            goto LABEL_142;
          }
          uint64_t v65 = v64 + 24 * v60;
          long long v66 = *v63;
          *(void *)(v65 + 16) = *((void *)v63 + 2);
          *(_OWORD *)uint64_t v65 = v66;
          ++v60;
          int v59 = *((unsigned __int16 *)this + 40);
        }
        if (v59 <= ++v61)
        {
          int v67 = (__int16)(v60 - 1);
          if (v67 < 1) {
            goto LABEL_104;
          }
          int v68 = (__int16)(v60 - 1);
          while (1)
          {
            unint64_t v69 = (unsigned __int16)v68 - 1;
            uint64_t v70 = *((void *)this + 7);
            unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v70) >> 3);
            if (v71 <= v69 || v71 <= (unsigned __int16)v68) {
              goto LABEL_142;
            }
            int v72 = (int *)(v70 + 24 * v69);
            int v73 = *v72;
            int v74 = v72[1];
            long long v75 = (int *)(v70 + 24 * (unsigned __int16)v68);
            int v76 = *v75;
            int v77 = v75[1];
            long long v117 = *(_OWORD *)(v75 + 2);
            if (*v72 != *v75 || v74 != v77 || v73 == -2147418112)
            {
              if (v73 <= v76)
              {
                --v68;
              }
              else
              {
                int *v75 = v73;
                v75[1] = v74;
                *(_OWORD *)(v75 + 2) = *(_OWORD *)(v72 + 2);
                uint64_t v80 = *((void *)this + 7);
                if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v80) >> 3) <= v69) {
                  goto LABEL_142;
                }
                uint64_t v81 = v80 + 24 * v69;
                *(_DWORD *)uint64_t v81 = v76;
                *(_DWORD *)(v81 + 4) = v77;
                *(_OWORD *)(v81 + 8) = v117;
                if (v67 > (__int16)v68) {
                  ++v68;
                }
              }
            }
            else
            {
              uint64_t v82 = v70 + 24 * v69;
              uint64_t v83 = v70 + 24 * (unsigned __int16)v68;
              *(int8x8_t *)(v83 + 12) = vorr_s8(*(int8x8_t *)(v83 + 12), *(int8x8_t *)(v82 + 12));
              *(_DWORD *)(v83 + 20) |= *(_DWORD *)(v82 + 20);
              *int v72 = -2147418112;
            }
            if ((__int16)v68 <= 0) {
              goto LABEL_104;
            }
          }
        }
      }
    }
    unsigned __int16 v60 = 0;
LABEL_104:
    int v84 = (int *)*((void *)this + 7);
    int v85 = (int *)*((void *)this + 8);
    if (v85 != v84)
    {
      unint64_t v86 = ((char *)v85 - (char *)v84) / 24;
      if (*v84 < -2147418111)
      {
        if ((__int16)v60 >= 2)
        {
          if (v86 <= 1) {
            uint64_t v87 = 1;
          }
          else {
            uint64_t v87 = ((char *)v85 - (char *)v84) / 24;
          }
          uint64_t v88 = 1;
          uint64_t v89 = 6;
          while (v87 != v88)
          {
            if (v84[v89] > -2147418112) {
              goto LABEL_116;
            }
            ++v88;
            v89 += 6;
            if (v60 == v88) {
              goto LABEL_121;
            }
          }
          goto LABEL_142;
        }
        LOWORD(v88) = 1;
LABEL_116:
        if ((__int16)v88 < (__int16)v60)
        {
          uint64_t v90 = 0;
          uint64_t v91 = 0;
          unint64_t v92 = v60 - (unint64_t)(unsigned __int16)v88;
          while (1)
          {
            uint64_t v93 = *((void *)this + 7);
            if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 8) - v93) >> 3) <= (unint64_t)(unsigned __int16)v88
                                                                              + v91)
              goto LABEL_142;
            uint64_t v94 = v93 + v90;
            long long v95 = *(_OWORD *)(v94 + 24 * (unsigned __int16)v88);
            *(void *)(v94 + 16) = *(void *)(v94 + 24 * (unsigned __int16)v88 + 16);
            *(_OWORD *)uint64_t v94 = v95;
            ++v91;
            v90 += 24;
            if (v92 == v91)
            {
              int v84 = (int *)*((void *)this + 7);
              int v85 = (int *)*((void *)this + 8);
              unint64_t v86 = 0xAAAAAAAAAAAAAAABLL * (((char *)v85 - (char *)v84) >> 3);
              unsigned __int16 v60 = v91;
              goto LABEL_122;
            }
          }
        }
LABEL_121:
        unsigned __int16 v60 = 0;
      }
LABEL_122:
      if (v85 != v84)
      {
        int v96 = *((_DWORD *)this + 23);
        int v97 = v96 + *v84;
        int *v84 = v97;
        if (v60 >= 2u)
        {
          int v98 = 0;
          __int16 v99 = 0;
          while (v86 > v99)
          {
            int v100 = v98 + 1;
            if (v86 <= v100) {
              break;
            }
            uint64_t v101 = 6 * v100;
            int v102 = v84[v101];
            v84[v101] = v102 + v96 - (v84[6 * v99++ + 1] + v97);
            int v98 = v99;
            int v97 = v102 + v96;
            if (v60 - 1 <= v99) {
              goto LABEL_128;
            }
          }
          goto LABEL_142;
        }
        goto LABEL_128;
      }
    }
LABEL_142:
    __break(1u);
  }
}

uint64_t THintCntrConversion::GetNumOfArguments(THintCntrConversion *this, int a2)
{
  if (a2 == 3) {
    return *((unsigned __int16 *)this + 42);
  }
  if (a2 == 1) {
    return *((unsigned __int16 *)this + 41);
  }
  return 0;
}

uint64_t THintCntrConversion::GetArgument(THintCntrConversion *this, int a2, int *a3, int a4)
{
  uint64_t result = (*(uint64_t (**)(THintCntrConversion *))(*(void *)this + 80))(this);
  if (!a2) {
    return 0;
  }
  uint64_t v9 = *((unsigned __int16 *)this + 40);
  if (!*((_WORD *)this + 40)) {
    return 0;
  }
  unsigned __int16 v10 = 0;
  uint64_t v11 = *((void *)this + 1);
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v11) >> 3);
  uint64_t v13 = v11 + 4;
  while (v12)
  {
    if (*(unsigned __int16 *)(v13 + 4) == a4)
    {
      if (v10 == (unsigned __int16)(a2 - 1))
      {
        v13 -= 4;
LABEL_12:
        *a3 = *(_DWORD *)v13;
        return 1;
      }
      if (v10 == (unsigned __int16)(a2 - 2)) {
        goto LABEL_12;
      }
      v10 += 2;
    }
    v13 += 24;
    --v12;
    if (!--v9) {
      return 0;
    }
  }
  __break(1u);
  return result;
}

void std::vector<HintCntrValue>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  signed __int16 v3 = a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    unint64_t v18 = &v4[24 * a2];
    goto LABEL_20;
  }
  uint64_t v7 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3) >= v6)
  {
    bzero(a1[1], 24 * ((24 * v6 - 24) / 0x18) + 24);
    unint64_t v18 = &v3[24 * ((24 * v6 - 24) / 0x18) + 24];
LABEL_20:
    a1[1] = v18;
    return;
  }
  if (a2 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v4) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v10 > 0xAAAAAAAAAAAAAAALL) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  uint64_t v11 = 3 * v10;
  unint64_t v12 = (char *)operator new(24 * v10);
  uint64_t v13 = &v12[24 * v5];
  uint64_t v14 = &v12[8 * v11];
  size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
  bzero(v13, v15);
  int v16 = &v13[v15];
  if (v3 != v4)
  {
    do
    {
      long long v17 = *(_OWORD *)(v3 - 24);
      *((void *)v13 - 1) = *((void *)v3 - 1);
      *(_OWORD *)(v13 - 24) = v17;
      v13 -= 24;
      v3 -= 24;
    }
    while (v3 != v4);
    signed __int16 v3 = v4;
  }
  *a1 = v13;
  a1[1] = v16;
  a1[2] = v14;
  if (v3)
  {
    operator delete(v3);
  }
}

uint64_t THintCntrConversion::GetMaskDataBytesForHints(THintCntrConversion *this, unsigned __int8 *a2, unsigned int a3)
{
  (*(void (**)(THintCntrConversion *))(*(void *)this + 80))(this);
  if (a3 > 0x3F || *((unsigned __int16 *)this + 40) >= 0x61u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  if (a2)
  {
    LOWORD(v6) = (_WORD)a2;
    if (*((_WORD *)this + 40))
    {
      unsigned int v7 = 0;
      uint64_t v8 = *((void *)this + 1);
      unint64_t v6 = a2;
      do
      {
        uint64_t v9 = 4 * (a3 >> 5) + 12;
        uint64_t v10 = 8;
        unsigned int v11 = v7;
        while (1)
        {
          unsigned int v12 = *((unsigned __int16 *)this + 40);
          if (v11 >= v12) {
            break;
          }
          if ((*(_DWORD *)(v8 + v9) & (1 << ~(_BYTE)a3)) != 0) {
            *v6 |= 1 << (v10 - 1);
          }
          ++v11;
          v9 += 24;
          if (!--v10)
          {
            unsigned int v12 = *((unsigned __int16 *)this + 40);
            break;
          }
        }
        v8 += 192;
        ++v6;
        unsigned int v7 = (unsigned __int16)(v7 + 8);
      }
      while (v7 < v12);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  return (unsigned __int16)((_WORD)v6 - (_WORD)a2);
}

uint64_t THintCntrConversion::GetMaskDataBytesForCounters(THintCntrConversion *this, unsigned __int8 *a2, unsigned int a3)
{
  (*(void (**)(THintCntrConversion *))(*(void *)this + 80))(this);
  if (a3 > 0x3F || *((unsigned __int16 *)this + 40) >= 0x61u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  if (a2)
  {
    LOWORD(v6) = (_WORD)a2;
    if (*((_WORD *)this + 40))
    {
      unsigned int v7 = 0;
      uint64_t v8 = *((void *)this + 1);
      unint64_t v6 = a2;
      do
      {
        char v9 = 7;
        uint64_t v10 = 20;
        unsigned int v11 = v7;
        while (1)
        {
          unsigned int v12 = *((unsigned __int16 *)this + 40);
          if (v11 >= v12) {
            break;
          }
          if ((*(_DWORD *)(v8 + v10) & (0x80000000 >> a3)) != 0) {
            *v6 |= 1 << v9;
          }
          ++v11;
          --v9;
          v10 += 24;
          if (v10 == 212)
          {
            unsigned int v12 = *((unsigned __int16 *)this + 40);
            break;
          }
        }
        v8 += 192;
        ++v6;
        unsigned int v7 = (unsigned __int16)(v7 + 8);
      }
      while (v7 < v12);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  return (unsigned __int16)((_WORD)v6 - (_WORD)a2);
}

void THintCntrConversion::AddValue(THintCntrConversion *this, int a2, int a3, char a4, unsigned int a5)
{
  if (a5 >= 0x40) {
    goto LABEL_13;
  }
  __int16 v7 = a4 & 0xF;
  if (*((unsigned char *)this + 88)) {
    BOOL v8 = (a4 & 0xD | 2) == 3;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    std::vector<HintCntrValue>::resize((char **)this + 1, *((unsigned __int16 *)this + 40) + 1);
    unint64_t v12 = *((unsigned __int16 *)this + 40);
    uint64_t v13 = *((void *)this + 1);
    if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 2) - v13) >> 3) > v12)
    {
      uint64_t v14 = v13 + 24 * *((unsigned __int16 *)this + 40);
      *(_DWORD *)uint64_t v14 = a2;
      *(_DWORD *)(v14 + 4) = a3;
      *(_WORD *)(v14 + 8) = v7;
      *(_DWORD *)(v14 + 12) = 0;
      *(_DWORD *)(v14 + 16) = 0;
      if (a4 < 0)
      {
        unsigned int v15 = 0x80000000 >> a5;
      }
      else
      {
        unsigned int v15 = 0;
        *(_DWORD *)(v13 + 24 * v12 + 4 * (a5 >> 5) + 12) = 1 << ~(_BYTE)a5;
      }
      *(_DWORD *)(v13 + 24 * v12 + 20) = v15;
      *((_WORD *)this + 40) = v12 + 1;
      return;
    }
    __break(1u);
LABEL_13:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
}

void TFlexConversion::~TFlexConversion(TFlexConversion *this)
{
  *(void *)this = &unk_1F0E00800;
  unsigned __int16 v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E00800;
  unsigned __int16 v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1BA9994D0);
}

uint64_t TFlexConversion::Finalize(uint64_t this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(this + 36) && *(unsigned __int16 *)(this + 32) >= 7u)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v1 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v1 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v19 = v1;
    long long v20 = v1;
    long long v18 = v1;
    unsigned __int16 v2 = *(int32x2_t **)(this + 8);
    uint64_t v3 = *(void *)(this + 16) - (void)v2;
    if ((unint64_t)v3 > 0x38)
    {
      unint64_t v4 = v3 >> 3;
      int32x2_t v22 = v2[7];
      unsigned __int16 v5 = 6;
      do
      {
        if (v4 <= v5) {
          goto LABEL_35;
        }
        int v6 = v5;
        *((int32x2_t *)&v18 + v5) = vsub_s32(*(int32x2_t *)((char *)&v18 + 8 * v5 + 8), v2[v5]);
        --v5;
      }
      while (v6);
      __int16 v7 = 0;
      v2[1] = vadd_s32(v2[1], *v2);
      unint64_t v8 = 1;
      do
      {
        uint64_t v9 = *(void *)(this + 8);
        unint64_t v10 = (*(void *)(this + 16) - v9) >> 3;
        if (v10 <= v8 || v10 <= v7) {
          goto LABEL_35;
        }
        *(void *)(v9 + 8 * v7++) = *(void *)(v9 + 8 * v8++);
        unint64_t v11 = *(unsigned __int16 *)(this + 32);
      }
      while (v8 < v11);
      *(_WORD *)(this + 32) = v11 - 1;
      if (HIDWORD(v21) == (DWORD1(v19) == (DWORD1(v18) == v22.i32[1]))
        && HIDWORD(v20) == (HIDWORD(v19) == DWORD1(v20))
        && *(unsigned __int16 *)(this + 42) << 16 == 3276800)
      {
        *(_WORD *)(this + 44) = 3106;
        __int16 v12 = 7;
LABEL_30:
        *(_WORD *)(this + 34) = v12;
LABEL_33:
        *(unsigned char *)(this + 36) = 0;
        return this;
      }
      if (DWORD1(v18) != v22.i32[1]) {
        goto LABEL_31;
      }
      if (HIDWORD(v20) == (HIDWORD(v19) == DWORD1(v20)) && *(unsigned __int16 *)(this + 42) << 16 == 3276800)
      {
        *(_WORD *)(this + 44) = 3108;
        __int16 v12 = 9;
        goto LABEL_30;
      }
      if (v18 == v22.i32[0] && *(unsigned __int16 *)(this + 42) << 16 == 3276800)
      {
        *(_WORD *)(this + 44) = 3109;
        uint64_t v13 = *(void *)(this + 8);
        if ((unint64_t)(*(void *)(this + 16) - v13) > 0x28)
        {
          int v15 = *(_DWORD *)(v13 + 40);
          int v14 = *(_DWORD *)(v13 + 44);
          if (v15 < 0) {
            int v15 = -v15;
          }
          if (v14 >= 0) {
            unsigned int v16 = *(_DWORD *)(v13 + 44);
          }
          else {
            unsigned int v16 = -v14;
          }
          if (v15 < v16) {
            *(_DWORD *)(v13 + 40) = v14;
          }
          __int16 v12 = 11;
          goto LABEL_30;
        }
      }
      else
      {
LABEL_31:
        *(_WORD *)(this + 44) = 3107;
        *(_WORD *)(this + 34) = 13;
        uint64_t v17 = *(void *)(this + 8);
        if ((unint64_t)(*(void *)(this + 16) - v17) > 0x30)
        {
          *(void *)(v17 + 48) = *(unsigned int *)(this + 40);
          goto LABEL_33;
        }
      }
    }
LABEL_35:
    __break(1u);
  }
  return this;
}

uint64_t TFlexConversion::GetNumOfArguments(TFlexConversion *this)
{
  return *((unsigned __int16 *)this + 17);
}

uint64_t TFlexConversion::GetArgument(TFlexConversion *this, int a2, int *a3)
{
  uint64_t result = (*(uint64_t (**)(TFlexConversion *))(*(void *)this + 64))(this);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = *((unsigned __int16 *)this + 22) - 3106;
  unint64_t v8 = (unsigned __int16 *)(v7 > 2 ? &index_flex1 : *(&off_1E60F3E30 + (__int16)v7));
  int v9 = v8[(unsigned __int16)(a2 - 1)];
  if (v9 == 0xFFFF || !*((_WORD *)this + 16)) {
    return 0;
  }
  unsigned int v10 = 0;
  for (unsigned __int16 i = 0; v9 != i; i += 2)
  {
    if (v9 == (i | 1))
    {
      uint64_t v14 = *((void *)this + 1);
      if (v10 < (unint64_t)((*((void *)this + 2) - v14) >> 3))
      {
        uint64_t v13 = (int *)(v14 + 8 * v10 + 4);
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    if (++v10 >= *((unsigned __int16 *)this + 16)) {
      return 0;
    }
  }
  uint64_t v12 = *((void *)this + 1);
  if (v10 < (unint64_t)((*((void *)this + 2) - v12) >> 3))
  {
    uint64_t v13 = (int *)(v12 + 8 * v10);
LABEL_16:
    *a3 = *v13;
    return 1;
  }
LABEL_17:
  __break(1u);
  return result;
}

void TFlexConversion::AddValue(TFlexConversion *this, int a2, int a3)
{
  unint64_t v6 = *((unsigned __int16 *)this + 16);
  unint64_t v7 = v6 + 1;
  int v9 = (char *)*((void *)this + 1);
  unint64_t v8 = (char *)*((void *)this + 2);
  unint64_t v10 = (v8 - v9) >> 3;
  if (v10 > v6)
  {
    unint64_t v11 = (char *)*((void *)this + 2);
    if (v7 >= v10) {
      goto LABEL_18;
    }
    unint64_t v11 = &v9[8 * v7];
    goto LABEL_17;
  }
  unint64_t v12 = v7 - v10;
  uint64_t v13 = *((void *)this + 3);
  if (v7 - v10 <= (v13 - (uint64_t)v8) >> 3)
  {
    bzero(*((void **)this + 2), 8 * v12);
    unint64_t v11 = &v8[8 * v12];
LABEL_17:
    *((void *)this + 2) = v11;
    goto LABEL_18;
  }
  uint64_t v14 = v13 - (void)v9;
  if (v14 >> 2 > v7) {
    unint64_t v7 = v14 >> 2;
  }
  if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v15 = v7;
  }
  if (v15 >> 61) {
LABEL_21:
  }
    std::__throw_bad_array_new_length[abi:fe180100]();
  unsigned int v16 = (char *)operator new(8 * v15);
  uint64_t v17 = &v16[8 * v10];
  long long v18 = &v16[8 * v15];
  bzero(v17, 8 * v12);
  unint64_t v11 = &v17[8 * v12];
  if (v8 != v9)
  {
    do
    {
      uint64_t v19 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v17 - 1) = v19;
      v17 -= 8;
    }
    while (v8 != v9);
    unint64_t v8 = v9;
  }
  *((void *)this + 1) = v17;
  *((void *)this + 2) = v11;
  *((void *)this + 3) = v18;
  if (v8)
  {
    operator delete(v8);
    unint64_t v11 = (char *)*((void *)this + 2);
  }
LABEL_18:
  unint64_t v20 = *((unsigned __int16 *)this + 16);
  uint64_t v21 = *((void *)this + 1);
  if (v20 >= (uint64_t)&v11[-v21] >> 3)
  {
    __break(1u);
    goto LABEL_21;
  }
  int32x2_t v22 = (_DWORD *)(v21 + 8 * v20);
  _DWORD *v22 = a2;
  v22[1] = a3;
  *((_WORD *)this + 16) = v20 + 1;
}

uint64_t TFlexConversion::AddFlexDepth(TFlexConversion *this, int a2, int a3, int a4)
{
  uint64_t result = (*(uint64_t (**)(TFlexConversion *))(*(void *)this + 16))(this);
  *((_DWORD *)this + 10) = a4;
  return result;
}

uint64_t THintCntrConversion::SetSidebearing(uint64_t this, int a2, int a3)
{
  *(_DWORD *)(this + 92) = a2;
  *(_DWORD *)(this + 96) = a3;
  return this;
}

uint64_t THintCntrConversion::SetNumOfCounterGroups(uint64_t this, __int16 a2)
{
  *(_WORD *)(this + 86) = a2;
  return this;
}

uint64_t THintCntrConversion::GetNumOfCounterGroups(THintCntrConversion *this)
{
  return *((unsigned __int16 *)this + 43);
}

uint64_t TFlexConversion::GetFlexDepth(TFlexConversion *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t TFlexConversion::GetOpcode(TFlexConversion *this)
{
  return *((unsigned __int16 *)this + 22);
}

uint64_t std::__optional_destruct_base<TFlexConversion,false>::~__optional_destruct_base[abi:fe180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    *(void *)a1 = &unk_1F0E00800;
    unsigned __int16 v2 = *(void **)(a1 + 8);
    if (v2)
    {
      *(void *)(a1 + 16) = v2;
      operator delete(v2);
    }
  }
  return a1;
}

void std::vector<int>::__throw_out_of_range[abi:fe180100]()
{
}

void std::__throw_out_of_range[abi:fe180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:fe180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E60CEF60, MEMORY[0x1E4FBA1D0]);
}

void sub_1B533BBE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:fe180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

double fnt_SVTCA_0(uint64_t a1)
{
  double result = 2.00000048;
  *(void *)(a1 + 24) = 0x4000000040000000;
  *(void *)(a1 + 120) = fnt_YMovePoint;
  *(void *)(a1 + 128) = fnt_YProject;
  *(void *)(a1 + 136) = fnt_YProject;
  *(_WORD *)(a1 + 360) = 0x4000;
  *(_WORD *)(a1 + 364) = 256;
  return result;
}

double fnt_SVTCA_1(uint64_t a1)
{
  *(void *)&double result = 0x400000004000;
  *(void *)(a1 + 24) = 0x400000004000;
  *(void *)(a1 + 120) = fnt_XMovePoint;
  *(void *)(a1 + 128) = fnt_XProject;
  *(void *)(a1 + 136) = fnt_XProject;
  *(_WORD *)(a1 + 360) = 0x4000;
  *(_WORD *)(a1 + 364) = 256;
  return result;
}

uint64_t fnt_SPVTCA(uint64_t result)
{
  if (*(unsigned char *)(result + 363))
  {
    __int16 v4 = 0;
    unsigned __int16 v2 = (__int16 *)(result + 28);
    uint64_t v3 = fnt_XProject;
    __int16 v1 = 0x4000;
  }
  else
  {
    __int16 v1 = 0;
    unsigned __int16 v2 = (__int16 *)(result + 30);
    uint64_t v3 = fnt_YProject;
    __int16 v4 = 0x4000;
  }
  __int16 v5 = *v2;
  *(_WORD *)(result + 24) = v1;
  *(_WORD *)(result + 26) = v4;
  *(void *)(result + 128) = v3;
  *(_WORD *)(result + 360) = v5;
  if ((unsigned __int16)(v5 + 1023) <= 0x7FEu)
  {
    *(_WORD *)(result + 360) = v5 & 0x8000 | 0x4000;
    *(unsigned char *)(result + 365) = 0;
  }
  *(void *)(result + 120) = fnt_MovePoint;
  *(void *)(result + 136) = v3;
  *(unsigned char *)(result + 364) = 0;
  return result;
}

uint64_t fnt_SFVTCA(uint64_t result)
{
  __int16 v1 = (*(unsigned char *)(result + 363) & 1) << 14;
  uint64_t v2 = 24;
  if ((*(unsigned char *)(result + 363) & 1) == 0) {
    uint64_t v2 = 26;
  }
  __int16 v3 = *(_WORD *)(result + v2);
  *(_WORD *)(result + 28) = v1;
  *(_WORD *)(result + 30) = v1 ^ 0x4000;
  *(_WORD *)(result + 360) = v3;
  if ((unsigned __int16)(v3 + 1023) <= 0x7FEu)
  {
    *(_WORD *)(result + 360) = v3 & 0x8000 | 0x4000;
    *(unsigned char *)(result + 365) = 0;
  }
  *(void *)(result + 120) = fnt_MovePoint;
  return result;
}

uint64_t fnt_SPVTL(uint64_t a1)
{
  if (!*(void *)(a1 + 16) || !*(void *)(a1 + 8))
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_14;
  }
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(void *)(a1 + 56);
  unsigned int v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  uint64_t v3 = v4;
  *(void *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(unsigned int *)(v5 - 4);
  *(void *)(a1 + 56) = v5 - 4;
  unint64_t v7 = *(int **)(a1 + 16);
  CHECK_ELEMENTPTR(a1, v7);
  if ((v4 & 0x80000000) != 0 || v7[28] <= (int)v3)
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_13:
    fprintf(v12, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_14:
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v13) {
      fprintf(*v11, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    }
    fputc(10, *v11);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if ((v6 & 0x80000000) != 0 || *(_DWORD *)(v8 + 112) <= (int)v6)
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_13;
  }
  fnt_Normalize(a1, *(_DWORD *)(*(void *)(v8 + 8) + 4 * v6) - *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 4 * v3), *(_DWORD *)(*(void *)(v8 + 16) + 4 * v6) - *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 16) + 4 * v3), (_WORD *)(a1 + 24));
  *(unsigned char *)(a1 + 364) = 0;
  if (*(unsigned char *)(a1 + 363))
  {
    __int16 v9 = *(_WORD *)(a1 + 26);
    *(_WORD *)(a1 + 26) = *(_WORD *)(a1 + 24);
    *(_WORD *)(a1 + 24) = -v9;
    *(unsigned char *)(a1 + 364) = 1;
  }
  uint64_t result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(void *)(a1 + 120) = fnt_MovePoint;
  *(void *)(a1 + 128) = fnt_Project;
  *(void *)(a1 + 136) = fnt_Project;
  return result;
}

uint64_t fnt_SFVTL(uint64_t a1)
{
  if (!*(void *)(a1 + 16) || !*(void *)(a1 + 8))
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_14;
  }
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(void *)(a1 + 56);
  unsigned int v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  uint64_t v3 = v4;
  *(void *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(unsigned int *)(v5 - 4);
  *(void *)(a1 + 56) = v5 - 4;
  unint64_t v7 = *(int **)(a1 + 16);
  CHECK_ELEMENTPTR(a1, v7);
  if ((v4 & 0x80000000) != 0 || v7[28] <= (int)v3)
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_13:
    fprintf(v12, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_14:
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v13) {
      fprintf(*v11, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    }
    fputc(10, *v11);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v8 = *(void *)(a1 + 8);
  if ((v6 & 0x80000000) != 0 || *(_DWORD *)(v8 + 112) <= (int)v6)
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_13;
  }
  fnt_Normalize(a1, *(_DWORD *)(*(void *)(v8 + 8) + 4 * v6) - *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 4 * v3), *(_DWORD *)(*(void *)(v8 + 16) + 4 * v6) - *(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 16) + 4 * v3), (_WORD *)(a1 + 28));
  if (*(unsigned char *)(a1 + 363))
  {
    __int16 v9 = *(_WORD *)(a1 + 30);
    *(_WORD *)(a1 + 30) = *(_WORD *)(a1 + 28);
    *(_WORD *)(a1 + 28) = -v9;
  }
  uint64_t result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(void *)(a1 + 120) = fnt_MovePoint;
  return result;
}

uint64_t fnt_SPVFS(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(void *)(a1 + 56);
  int v3 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 26) = v3;
  CHECK_STACK_POINTER_BASE(a1, v2);
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(_DWORD *)(v4 - 4);
  *(void *)(a1 + 56) = v4 - 4;
  *(_WORD *)(a1 + 24) = v5;
  uint64_t result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(void *)(a1 + 120) = fnt_MovePoint;
  *(void *)(a1 + 128) = fnt_Project;
  *(void *)(a1 + 136) = fnt_Project;
  *(unsigned char *)(a1 + 364) = 0;
  return result;
}

uint64_t fnt_SFVFS(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(void *)(a1 + 56);
  int v3 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  *(void *)(a1 + 56) = v2;
  *(_WORD *)(a1 + 30) = v3;
  CHECK_STACK_POINTER_BASE(a1, v2);
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(_DWORD *)(v4 - 4);
  *(void *)(a1 + 56) = v4 - 4;
  *(_WORD *)(a1 + 28) = v5;
  uint64_t result = fnt_ComputeAndCheck_PF_Proj(a1);
  *(void *)(a1 + 120) = fnt_MovePoint;
  return result;
}

uint64_t fnt_GPV(uint64_t a1)
{
  GrowStackForPush((void *)a1, 2);
  CHECK_STACK_POINTER_END(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(_DWORD **)(a1 + 56);
  *v2++ = *(__int16 *)(a1 + 24);
  *(void *)(a1 + 56) = v2;
  uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v2);
  uint64_t v4 = *(_DWORD **)(a1 + 56);
  *uint64_t v4 = *(__int16 *)(a1 + 26);
  *(void *)(a1 + 56) = v4 + 1;
  return result;
}

uint64_t fnt_GFV(uint64_t a1)
{
  GrowStackForPush((void *)a1, 2);
  CHECK_STACK_POINTER_END(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(_DWORD **)(a1 + 56);
  *v2++ = *(__int16 *)(a1 + 28);
  *(void *)(a1 + 56) = v2;
  uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v2);
  uint64_t v4 = *(_DWORD **)(a1 + 56);
  *uint64_t v4 = *(__int16 *)(a1 + 30);
  *(void *)(a1 + 56) = v4 + 1;
  return result;
}

uint64_t fnt_SFVTPV(uint64_t result)
{
  *(_DWORD *)(result + 28) = *(_DWORD *)(result + 24);
  *(_WORD *)(result + 360) = 0x4000;
  *(void *)(result + 120) = fnt_MovePoint;
  *(unsigned char *)(result + 365) = 1;
  return result;
}

uint64_t fnt_SMD(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(*(void *)(a1 + 80) + 212) = v4;
  return result;
}

uint64_t fnt_SCVTCI(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(*(void *)(a1 + 80) + 192) = v4;
  return result;
}

uint64_t fnt_SSWCI(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(*(void *)(a1 + 80) + 196) = v4;
  return result;
}

uint64_t fnt_SSW(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(__int16 *)(v4 - 4);
  *(void *)(a1 + 56) = v4 - 4;
  *(_WORD *)(v2 + 242) = v5;
  *(_DWORD *)(v2 + 200) = (unint64_t)(*(int *)(v2 + 100) * (uint64_t)v5 + 0x8000) >> 16;
  return result;
}

uint64_t fnt_SRP0(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(a1 + 96) = v4;
  return result;
}

uint64_t fnt_SRP1(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(a1 + 100) = v4;
  return result;
}

uint64_t fnt_SRP2(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(a1 + 104) = v4;
  return result;
}

uint64_t fnt_SLOOP(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  *(_DWORD *)(a1 + 112) = v4 - 1;
  return result;
}

uint64_t fnt_POP(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  *(void *)(a1 + 56) -= 4;
  return result;
}

uint64_t fnt_SetElementPtr(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v4 = *(int *)(v3 - 4);
  *(void *)(v1 + 56) = v3 - 4;
  if (v4 >= *(unsigned __int16 *)(*(void *)(*(void *)(v1 + 80) + 248) + 14))
  {
    uint64_t v6 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v4, *(unsigned __int16 *)(*(void *)(*(void *)(v1 + 80) + 248) + 14), 0);
    uint64_t v7 = *(void *)(*(void *)(v1 + 72) + 8);
    if (v7) {
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    }
    fputc(10, *v6);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v5 = *(void *)(*(void *)(v1 + 72) + 8 * v4);
  switch(*(unsigned char *)(v1 + 363))
  {
    case 0x13:
      goto LABEL_6;
    case 0x14:
      v1 += 8;
      goto LABEL_6;
    case 0x15:
      v1 += 16;
      goto LABEL_6;
    case 0x16:
      *(void *)(v1 + 8) = v5;
      *(void *)(v1 + 16) = v5;
LABEL_6:
      *(void *)uint64_t v1 = v5;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t fnt_SetRoundState(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 363);
  uint64_t v2 = fnt_RoundToGrid;
  if (v1 > 0x79)
  {
    switch(v1)
    {
      case 'z':
        uint64_t v2 = (uint64_t (*)(int))fnt_RoundOff;
        break;
      case '|':
        uint64_t v2 = fnt_RoundUpToGrid;
        break;
      case '}':
        uint64_t v2 = fnt_RoundDownToGrid;
        break;
      default:
        return result;
    }
  }
  else if (v1 != 24)
  {
    if (v1 == 25)
    {
      uint64_t v2 = fnt_RoundToHalfGrid;
    }
    else
    {
      if (v1 != 61) {
        return result;
      }
      uint64_t v2 = fnt_RoundToDoubleGrid;
    }
  }
  *(void *)(*(void *)(result + 80) + 216) = v2;
  return result;
}

uint64_t fnt_DUP(void *a1)
{
  unint64_t v2 = a1[7];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  LODWORD(v2) = *(_DWORD *)(v2 - 4);
  GrowStackForPush(a1, 1);
  uint64_t result = CHECK_STACK_POINTER_END((uint64_t)a1, a1[7]);
  uint64_t v4 = (_DWORD *)a1[7];
  *uint64_t v4 = v2;
  a1[7] = v4 + 1;
  return result;
}

uint64_t fnt_CLEAR(uint64_t result)
{
  *(void *)(result + 56) = *(void *)(*(void *)(result + 80) + 8);
  return result;
}

uint64_t fnt_SWAP(uint64_t a1)
{
  unint64_t v2 = *(_DWORD **)(a1 + 56);
  CHECK_STACK_POINTER_BASE(a1, (unint64_t)v2);
  uint64_t v3 = v2 - 1;
  int v4 = *(v2 - 1);
  CHECK_STACK_POINTER_BASE(a1, (unint64_t)(v2 - 1));
  int v5 = *(v2 - 2);
  v2 -= 2;
  CHECK_STACK_POINTER_END(a1, (unint64_t)v2);
  *unint64_t v2 = v4;
  uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v3);
  _DWORD *v3 = v5;
  return result;
}

uint64_t fnt_DEPTH(void *a1)
{
  uint64_t v2 = (a1[7] - *(void *)(a1[10] + 8)) >> 2;
  GrowStackForPush(a1, 1);
  uint64_t result = CHECK_STACK_POINTER_END((uint64_t)a1, a1[7]);
  int v4 = (_DWORD *)a1[7];
  *int v4 = v2;
  a1[7] = v4 + 1;
  return result;
}

uint64_t fnt_CINDEX(void *a1)
{
  unint64_t v2 = a1[7];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  unsigned int v5 = *(_DWORD *)(v2 - 4);
  int v4 = (_DWORD *)(v2 - 4);
  uint64_t v3 = v5;
  if ((v5 & 0x80000000) != 0
    || (uint64_t v6 = a1[10], *(_DWORD *)(v6 + 4) <= (int)v3)
    || (unint64_t v7 = *(void *)(v6 + 8), v3 > (uint64_t)((uint64_t)v4 - v7) >> 2))
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v13 = "ERROR: invalid stack index";
    goto LABEL_9;
  }
  uint64_t v8 = &v4[-v3];
  if (v7 > (unint64_t)v8 || a1[6] <= (unint64_t)v8)
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v13 = "ERROR: trying to access outside the stack";
LABEL_9:
    fprintf(v12, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v13);
    uint64_t v14 = *(void *)(a1[9] + 8);
    if (v14) {
      fprintf(*v11, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    }
    fputc(10, *v11);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v9 = *v8;
  uint64_t result = CHECK_STACK_POINTER_END((uint64_t)a1, (unint64_t)v4);
  *int v4 = v9;
  return result;
}

uint64_t fnt_MINDEX(void *a1)
{
  unint64_t v2 = a1[7];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  int v4 = (_DWORD *)(v2 - 4);
  uint64_t v3 = *(unsigned int *)(v2 - 4);
  if ((v3 & 0x80000000) != 0
    || (uint64_t v5 = a1[10], *(_DWORD *)(v5 + 4) <= (int)v3)
    || (unint64_t v6 = *(void *)(v5 + 8), v3 > (uint64_t)((uint64_t)v4 - v6) >> 2))
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v13 = "ERROR: invalid stack index";
    goto LABEL_13;
  }
  unint64_t v7 = &v4[-v3];
  if (v6 > (unint64_t)v7 || a1[6] <= (unint64_t)v7)
  {
    unint64_t v11 = (FILE **)MEMORY[0x1E4F143C8];
    unint64_t v12 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v13 = "ERROR: trying to access outside the stack";
LABEL_13:
    fprintf(v12, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v13);
    uint64_t v14 = *(void *)(a1[9] + 8);
    if (v14) {
      fprintf(*v11, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    }
    fputc(10, *v11);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v8 = *v7;
  if (v3)
  {
    int v9 = (_DWORD *)(v2 - 4 * v3);
    do
    {
      *(v9 - 1) = *v9;
      ++v9;
      LODWORD(v3) = v3 - 1;
    }
    while (v3);
    CHECK_STACK_POINTER_BASE((uint64_t)a1, v2 - 4);
    int v4 = (_DWORD *)(v2 - 8);
  }
  uint64_t result = CHECK_STACK_POINTER_END((uint64_t)a1, (unint64_t)v4);
  *int v4 = v8;
  a1[7] = v4 + 1;
  return result;
}

void *fnt_ROLL(void *result)
{
  uint64_t v1 = result[7];
  unint64_t v2 = (_DWORD *)(v1 - 4);
  unint64_t v3 = *(void *)(result[10] + 8);
  if (v3 > v1 - 4
    || result[6] <= (unint64_t)v2
    || v3 > v1 - 8
    || (int v4 = *(_DWORD *)(v1 - 8),
        *(_DWORD *)(v1 - 8) = *(_DWORD *)(v1 - 4),
        uint64_t v5 = (int *)(v1 - 12),
        v3 > (unint64_t)v5))
  {
    unint64_t v7 = (FILE **)MEMORY[0x1E4F143C8];
    int v8 = result;
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access outside the stack");
    uint64_t v9 = *(void *)(v8[9] + 8);
    if (v9) {
      fprintf(*v7, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    }
    fputc(10, *v7);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v6 = *v5;
  *uint64_t v5 = v4;
  *unint64_t v2 = v6;
  return result;
}

uint64_t fnt_MDAP(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(unsigned int *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  if (!v2 || (v4 & 0x80000000) != 0 || (int)v4 >= *(_DWORD *)(v2 + 112))
  {
    uint64_t v9 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: gs->CE0 NULL or ptNum out of range(A)");
    uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v10) {
      fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
    }
    fputc(10, *v9);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  *(_DWORD *)(a1 + 96) = v4;
  *(_DWORD *)(a1 + 100) = v4;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, *(unsigned int *)(*(void *)(v2 + 8) + 4 * v4), *(unsigned int *)(*(void *)(v2 + 16) + 4 * v4));
  int v6 = v5;
  if (*(unsigned char *)(a1 + 363)) {
    LODWORD(v5) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 + 80) + 216))(v5, a1);
  }
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 120);
  return v7(a1, v2, v4, (v5 - v6));
}

uint64_t fnt_MIAP(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(uint64_t (**)(uint64_t, void))(a1 + 152);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 56);
  unsigned int v5 = *(_DWORD *)(v4 - 4);
  *(void *)(a1 + 56) = v4 - 4;
  unsigned int v6 = v3(a1, v5);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned int *)(v7 - 4);
  *(void *)(a1 + 56) = v7 - 4;
  if (!v2 || (v8 & 0x80000000) != 0 || (int)v8 >= *(_DWORD *)(v2 + 112))
  {
    long long v18 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_20;
  }
  CHECK_ELEMENTPTR(a1, (int *)v2);
  if (*(_DWORD *)(v2 + 112) <= (int)v8)
  {
    long long v18 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_20:
    uint64_t v19 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v19) {
      fprintf(*v18, "(glyph = %d)\n", *(_DWORD *)(v19 + 88));
    }
    fputc(10, *v18);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  *(_DWORD *)(a1 + 96) = v8;
  *(_DWORD *)(a1 + 100) = v8;
  if (v2 == **(void **)(a1 + 72))
  {
    int v11 = ShortFracMul(v6, *(__int16 *)(a1 + 24));
    *(_DWORD *)(*(void *)(v2 + 56) + 4 * v8) = v11;
    uint64_t v9 = *(void *)(v2 + 8);
    *(_DWORD *)(v9 + 4 * v8) = v11;
    uint64_t v10 = ShortFracMul(v6, *(__int16 *)(a1 + 26));
    *(_DWORD *)(*(void *)(v2 + 64) + 4 * v8) = v10;
    *(_DWORD *)(*(void *)(v2 + 16) + 4 * v8) = v10;
  }
  else
  {
    uint64_t v9 = *(void *)(v2 + 8);
    uint64_t v10 = *(unsigned int *)(*(void *)(v2 + 16) + 4 * v8);
  }
  LODWORD(v12) = (*(uint64_t (**)(uint64_t, void, uint64_t))(a1 + 128))(a1, *(unsigned int *)(v9 + 4 * v8), v10);
  int v13 = v12;
  if (*(unsigned char *)(a1 + 363))
  {
    uint64_t v14 = *(void *)(a1 + 80);
    int v15 = v6 - v12;
    if ((int)(v6 - v12) < 0) {
      int v15 = v12 - v6;
    }
    if (v15 <= *(_DWORD *)(v14 + 192)) {
      uint64_t v12 = v6;
    }
    else {
      uint64_t v12 = v12;
    }
    unsigned int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 216))(v12, a1);
  }
  unsigned int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 120);
  return v16(a1, v2, v8, v6 - v13);
}

uint64_t fnt_IUP(uint64_t result)
{
  uint64_t v54 = result;
  uint64_t v1 = *(void *)(result + 16);
  if (!v1)
  {
    __int16 v50 = (FILE **)MEMORY[0x1E4F143C8];
    int v51 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v52 = "ERROR: CE2 NULL(A)";
    goto LABEL_93;
  }
  if (*(unsigned char *)(result + 363)) {
    uint64_t v2 = (uint64_t *)(v1 + 8);
  }
  else {
    uint64_t v2 = (uint64_t *)(v1 + 16);
  }
  if (*(unsigned char *)(result + 363)) {
    uint64_t v3 = (uint64_t *)(v1 + 56);
  }
  else {
    uint64_t v3 = (uint64_t *)(v1 + 64);
  }
  if (*(unsigned char *)(result + 363)) {
    uint64_t v4 = (uint64_t *)(v1 + 72);
  }
  else {
    uint64_t v4 = (uint64_t *)(v1 + 80);
  }
  if (*(unsigned char *)(result + 363)) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  int v6 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *v4;
    uint64_t v9 = *v3;
    uint64_t v10 = *v2;
    uint64_t v11 = *(void *)(v1 + 24);
    uint64_t v12 = *(void *)(v1 + 32);
    uint64_t result = 0x3EF0000000000000;
    int v13 = *(_DWORD *)(v1 + 112);
    while (1)
    {
      unsigned int v14 = *(unsigned __int16 *)(v11 + 2 * v7);
      if (v13 <= (int)v14) {
        break;
      }
      if (*(__int16 *)(v12 + 2 * v7) < 0) {
        break;
      }
      uint64_t v15 = *(unsigned __int16 *)(v12 + 2 * v7);
      if (v13 <= (int)v15) {
        break;
      }
      if (v14 > v15) {
        goto LABEL_88;
      }
      uint64_t v16 = *(void *)(v1 + 48);
      uint64_t v17 = *(unsigned __int16 *)(v11 + 2 * v7);
      do
      {
        if ((v5 & *(unsigned char *)(v16 + v17)) != 0)
        {
          uint64_t v18 = v17;
          while (1)
          {
            if (v15 == (__int16)v18) {
              LOWORD(v19) = v14;
            }
            else {
              LOWORD(v19) = v18 + 1;
            }
            if ((v19 & 0x8000) != 0) {
              goto LABEL_90;
            }
            uint64_t v20 = v18;
            uint64_t v18 = (unsigned __int16)v19;
            if (v13 <= (unsigned __int16)v19) {
              goto LABEL_90;
            }
            int v19 = (__int16)v19;
            while ((v5 & *(unsigned char *)(v16 + v18)) == 0)
            {
              if (v18 == v15) {
                LOWORD(v18) = v14;
              }
              else {
                LOWORD(v18) = v18 + 1;
              }
              if ((v18 & 0x8000) != 0) {
                goto LABEL_90;
              }
              uint64_t v18 = (unsigned __int16)v18;
              if (v13 <= (unsigned __int16)v18) {
                goto LABEL_90;
              }
              if (v20 == (unsigned __int16)v18)
              {
                uint64_t v21 = v20;
                uint64_t v18 = v20;
                goto LABEL_40;
              }
            }
            uint64_t v21 = v18;
LABEL_40:
            uint64_t v22 = (int)v20;
            int v23 = *(__int16 *)(v8 + 2 * (int)v20);
            int v24 = *(__int16 *)(v8 + 2 * v21);
            int v25 = v23 - v24;
            if (v23 >= v24)
            {
              int v26 = *(_DWORD *)(v10 + 4 * v21);
              int v27 = *(_DWORD *)(v9 + 4 * v22);
              int v31 = *(_DWORD *)(v10 + 4 * v22);
              int v29 = v31 - v27;
              int v30 = v31 - v26;
              uint64_t v22 = v21;
              int v23 = *(__int16 *)(v8 + 2 * v21);
            }
            else
            {
              int v26 = *(_DWORD *)(v10 + 4 * v22);
              int v27 = *(_DWORD *)(v9 + 4 * v21);
              int v28 = *(_DWORD *)(v10 + 4 * v21);
              int v29 = v28 - v27;
              int v30 = v28 - v26;
              int v25 = v24 - v23;
            }
            int v32 = *(_DWORD *)(v9 + 4 * v22);
            int v33 = v26 - v32;
            if (v25)
            {
              if (v25 >= 0x8000 || v30 >= 0x8000)
              {
                if (v18 != (__int16)v19)
                {
                  signed int v41 = 0;
                  unsigned int v42 = vcvtd_n_s64_f64((double)v30 * 0.0000152587891 / ((double)v25 * 0.0000152587891), 0x10uLL);
                  int v43 = 1;
                  __int16 v44 = v19;
                  do
                  {
                    uint64_t v45 = v44;
                    int v46 = *(_DWORD *)(v9 + 4 * v44);
                    if (v46 <= v32)
                    {
                      int v47 = v46 + v33;
                    }
                    else if (v46 >= v27)
                    {
                      int v47 = v46 + v29;
                    }
                    else
                    {
                      if (v43) {
                        signed int v41 = v42;
                      }
                      int v47 = v26 + ((unint64_t)((*(__int16 *)(v8 + 2 * v45) - v23) * (uint64_t)v41 + 0x8000) >> 16);
                      int v43 = 0;
                    }
                    *(_DWORD *)(v10 + 4 * v45) = v47;
                    LOWORD(v19) = v19 == v15 ? (unsigned __int16)v14 : v45 + 1;
                    if ((v19 & 0x8000) != 0) {
                      goto LABEL_90;
                    }
                    __int16 v44 = v19;
                    int v13 = *(_DWORD *)(v1 + 112);
                    if (v13 <= (unsigned __int16)v19) {
                      goto LABEL_90;
                    }
                    int v19 = (unsigned __int16)v19;
                  }
                  while (v18 != (unsigned __int16)v19);
                }
              }
              else if (v18 != (__int16)v19)
              {
                __int16 v34 = v19;
                do
                {
                  uint64_t v35 = v34;
                  int v36 = *(_DWORD *)(v9 + 4 * v34);
                  if (v36 <= v32)
                  {
                    int v39 = v36 + v33;
                  }
                  else if (v36 >= v27)
                  {
                    int v39 = v36 + v29;
                  }
                  else
                  {
                    int v37 = (v25 >> 1) + (*(__int16 *)(v8 + 2 * v35) - v23) * v30;
                    int v38 = v37 >= 0x8000 ? (__int16)v25 : v25;
                    int v39 = v37 / v38 + v26;
                  }
                  *(_DWORD *)(v10 + 4 * v35) = v39;
                  LOWORD(v19) = v19 == v15 ? (unsigned __int16)v14 : v35 + 1;
                  if ((v19 & 0x8000) != 0) {
                    goto LABEL_90;
                  }
                  __int16 v34 = v19;
                  int v13 = *(_DWORD *)(v1 + 112);
                  if (v13 <= (unsigned __int16)v19) {
                    goto LABEL_90;
                  }
                  int v19 = (unsigned __int16)v19;
                }
                while (v18 != (unsigned __int16)v19);
              }
            }
            else
            {
              int v40 = (__int16)v19;
              if (v18 != (__int16)v19)
              {
                while (1)
                {
                  *(_DWORD *)(v10 + 4 * (__int16)v19) += v33;
                  LOWORD(v19) = v40 == v15 ? (unsigned __int16)v14 : v19 + 1;
                  if ((v19 & 0x8000) != 0) {
                    break;
                  }
                  int v13 = *(_DWORD *)(v1 + 112);
                  if (v13 <= (unsigned __int16)v19) {
                    break;
                  }
                  int v40 = (unsigned __int16)v19;
                  if (v18 == (unsigned __int16)v19) {
                    goto LABEL_86;
                  }
                }
LABEL_90:
                exception = __cxa_allocate_exception(2uLL);
                __int16 v49 = 5;
LABEL_91:
                _WORD *exception = v49;
                __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
              }
            }
LABEL_86:
            if (v18 == v17)
            {
              int v6 = *(_DWORD *)v1;
              goto LABEL_88;
            }
          }
        }
        ++v17;
      }
      while (v15 + 1 != v17);
LABEL_88:
      if (++v7 >= v6) {
        return result;
      }
    }
    __int16 v50 = (FILE **)MEMORY[0x1E4F143C8];
    int v51 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v52 = "ERROR: start or tmp16 beyond CE2->maxPointCount";
LABEL_93:
    fprintf(v51, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v52);
    uint64_t v53 = *(void *)(*(void *)(v54 + 72) + 8);
    if (v53) {
      fprintf(*v50, "(glyph = %d)\n", *(_DWORD *)(v53 + 88));
    }
    fputc(10, *v50);
    exception = __cxa_allocate_exception(2uLL);
    __int16 v49 = 1;
    goto LABEL_91;
  }
  return result;
}

uint64_t fnt_SHP(uint64_t a1)
{
  int v6 = -1431655766;
  int v7 = -1431655766;
  fnt_SH_Common(a1, &v7, &v6, &v5);
  int v3 = v6;
  int v2 = v7;
  return fnt_SHP_Common(a1, v2, v3);
}

uint64_t fnt_SH_Common(uint64_t a1, _DWORD *a2, _DWORD *a3, unsigned int *a4)
{
  uint64_t v4 = 100;
  if ((*(unsigned char *)(a1 + 363) & 1) == 0) {
    uint64_t v4 = 104;
  }
  uint64_t v5 = *(void *)(a1 + 8 * ((*(unsigned char *)(a1 + 363) & 1) == 0));
  if (!v5
    || ((unsigned int v10 = *(_DWORD *)(a1 + v4), **(void **)(a1 + 72) == v5)
      ? (unsigned int v11 = *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 80) + 248) + 16))
      : (unsigned int v11 = *(_DWORD *)(v5 + 112)),
        v11 <= v10))
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v12 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, (*(_DWORD *)(*(void *)(v5 + 8) + 4 * (int)v10)- *(_DWORD *)(*(void *)(v5 + 56) + 4 * (int)v10)), (*(_DWORD *)(*(void *)(v5 + 16) + 4 * (int)v10)- *(_DWORD *)(*(void *)(v5 + 64) + 4 * (int)v10)));
  if (!*(unsigned char *)(a1 + 365)) {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_PFPROJ: non-valid_pfProj (pfProunsigned __int16 j = %f)\n", (float)((float)*(__int16 *)(a1 + 360) * 0.000061035));
  }
  uint64_t v13 = *(__int16 *)(a1 + 360);
  if (v13 == 0x4000)
  {
    LODWORD(v14) = ShortFracMul(v12, *(__int16 *)(a1 + 28));
    LODWORD(v15) = ShortFracMul(v12, *(__int16 *)(a1 + 30));
  }
  else
  {
    uint64_t v14 = *(__int16 *)(a1 + 28) * (uint64_t)v12 / v13;
    uint64_t v15 = *(__int16 *)(a1 + 30) * (uint64_t)v12 / v13;
  }
  *a2 = v14;
  *a3 = v15;
  *a4 = v10;
  return v5;
}

uint64_t fnt_SHP_Common(uint64_t result, int a2, int a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 16);
  if (!v4)
  {
    int v12 = (FILE **)MEMORY[0x1E4F143C8];
    uint64_t v13 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v14 = "ERROR: CE2 NULL(B)";
    goto LABEL_13;
  }
  int v5 = *(_DWORD *)(result + 112);
  if ((v5 & 0x80000000) == 0)
  {
    int v8 = v5 + 1;
    while (1)
    {
      uint64_t result = CHECK_STACK_POINTER_BASE(v3, *(void *)(v3 + 56));
      uint64_t v9 = *(void *)(v3 + 56);
      unsigned int v11 = *(_DWORD *)(v9 - 4);
      uint64_t v10 = v11;
      *(void *)(v3 + 56) = v9 - 4;
      if ((v11 & 0x80000000) != 0 || (int)v10 >= *(_DWORD *)(v4 + 112)) {
        break;
      }
      if (*(_WORD *)(v3 + 28))
      {
        *(_DWORD *)(*(void *)(v4 + 8) + 4 * v10) += a2;
        *(unsigned char *)(*(void *)(v4 + 48) + v10) |= 1u;
      }
      if (*(_WORD *)(v3 + 30))
      {
        *(_DWORD *)(*(void *)(v4 + 16) + 4 * v10) += a3;
        *(unsigned char *)(*(void *)(v4 + 48) + v10) |= 2u;
      }
      if (--v8 <= 0) {
        goto LABEL_11;
      }
    }
    int v12 = (FILE **)MEMORY[0x1E4F143C8];
    uint64_t v13 = (FILE *)*MEMORY[0x1E4F143C8];
    uint64_t v14 = "ERROR: gxpoint out of range";
LABEL_13:
    fprintf(v13, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v14);
    uint64_t v15 = *(void *)(*(void *)(v3 + 72) + 8);
    if (v15) {
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v15 + 88));
    }
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
LABEL_11:
  *(_DWORD *)(v3 + 112) = 0;
  return result;
}

uint64_t fnt_SHC(uint64_t a1)
{
  int v23 = -1431655766;
  int v24 = -1431655766;
  unsigned int v22 = -1431655766;
  uint64_t v2 = fnt_SH_Common(a1, &v24, &v23, &v22);
  uint64_t v3 = v22;
  int v4 = v23;
  int v5 = v24;
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(unsigned int *)(v6 - 4);
  *(void *)(a1 + 56) = v6 - 4;
  int v8 = *(_DWORD **)(a1 + 16);
  if (!v8)
  {
    uint64_t v18 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_24;
  }
  uint64_t result = CHECK_ELEMENTPTR(a1, *(int **)(a1 + 16));
  if ((v7 & 0x80000000) != 0 || *v8 <= (int)v7)
  {
    uint64_t v18 = (FILE **)MEMORY[0x1E4F143C8];
    int v19 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_23:
    fprintf(v19, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_24:
    uint64_t v20 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v20) {
      fprintf(*v18, "(glyph = %d)\n", *(_DWORD *)(v20 + 88));
    }
    fputc(10, *v18);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if ((int)v7 >= *(_DWORD *)v10) {
    return result;
  }
  uint64_t v11 = *(unsigned __int16 *)(*(void *)(v10 + 24) + 2 * v7);
  int v12 = *(_DWORD *)(v10 + 112);
  if (v12 <= (int)v11)
  {
    uint64_t v18 = (FILE **)MEMORY[0x1E4F143C8];
    int v19 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_23;
  }
  int v13 = *(unsigned __int16 *)(*(void *)(v10 + 32) + 2 * v7);
  int v14 = v13 - v11;
  if (v13 - (int)v11 < 0 || v14 > *(_DWORD *)(v10 + 4))
  {
    uint64_t v18 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE: %d not in range (%d - %d), interpreter value out of range");
    goto LABEL_24;
  }
  if (v12 <= v13)
  {
    uint64_t v18 = (FILE **)MEMORY[0x1E4F143C8];
    int v19 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_23;
  }
  int v15 = *(unsigned __int16 *)(a1 + 28);
  int v16 = *(unsigned __int16 *)(a1 + 30);
  int v17 = v14 + 1;
  do
  {
    if (v3 != v11 || v2 != v10)
    {
      if (v15)
      {
        *(_DWORD *)(*(void *)(v10 + 8) + 4 * v11) += v5;
        *(unsigned char *)(*(void *)(v10 + 48) + v11) |= 1u;
      }
      if (v16)
      {
        *(_DWORD *)(*(void *)(v10 + 16) + 4 * v11) += v4;
        *(unsigned char *)(*(void *)(v10 + 48) + v11) |= 2u;
      }
    }
    ++v11;
    --v17;
  }
  while (v17 > 0);
  return result;
}

uint64_t fnt_SHZ(uint64_t a1)
{
  unsigned int v37 = -1431655766;
  int v35 = -1431655766;
  int v36 = -1431655766;
  uint64_t v2 = fnt_SH_Common(a1, &v36, &v35, &v37);
  int v3 = v35;
  int v4 = v36;
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(int *)(v6 - 4);
  *(void *)(a1 + 56) = v6 - 4;
  if (v7 >= *(unsigned __int16 *)(*(void *)(*(void *)(a1 + 80) + 248) + 14))
  {
    int v31 = (FILE **)MEMORY[0x1E4F143C8];
    int v32 = (FILE *)*MEMORY[0x1E4F143C8];
LABEL_40:
    fprintf(v32, "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
LABEL_41:
    uint64_t v33 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v33) {
      fprintf(*v31, "(glyph = %d)\n", *(_DWORD *)(v33 + 88));
    }
    fputc(10, *v31);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8 * v7);
  if (!v8)
  {
    int v31 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
    goto LABEL_41;
  }
  int v9 = *(_DWORD *)(v8 + 4);
  int v10 = v9 - 1;
  int v11 = *(_DWORD *)(v8 + 112);
  if (v9 < 1 || v11 < v9)
  {
    int v31 = (FILE **)MEMORY[0x1E4F143C8];
    int v32 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_40;
  }
  uint64_t v13 = **(unsigned __int16 **)(v8 + 24);
  if (v11 <= (int)v13)
  {
    int v31 = (FILE **)MEMORY[0x1E4F143C8];
    int v32 = (FILE *)*MEMORY[0x1E4F143C8];
    goto LABEL_40;
  }
  if (v2 != v8) {
    unsigned int v37 = -1;
  }
  __int16 v14 = *(_WORD *)(a1 + 28);
  if (v14)
  {
    int v15 = (_DWORD *)(*(void *)(v8 + 8) + 4 * v13);
    unsigned int v16 = v37;
    if ((int)(v37 + ~v13) >= 0)
    {
      int v17 = v13 - v37;
      do
      {
        *v15++ += v4;
        BOOL v18 = __CFADD__(v17++, 1);
      }
      while (!v18);
    }
    int v19 = -(int)v13;
    if (v16 != -1) {
      int v19 = ~v16;
    }
    if (v19 + v10 >= 0)
    {
      uint64_t v20 = &v15[v16 != -1];
      int v21 = v19 + v9;
      do
      {
        *v20++ += v4;
        --v21;
      }
      while (v21);
    }
    LOBYTE(v14) = 1;
  }
  if (*(_WORD *)(a1 + 30))
  {
    unsigned int v22 = (_DWORD *)(*(void *)(v8 + 16) + 4 * v13);
    int v23 = (unsigned char *)(*(void *)(v8 + 48) + v13);
    unsigned int v24 = v37;
    if ((int)(v37 + ~v13) >= 0)
    {
      int v25 = v13 - v37;
      do
      {
        *v22++ += v3;
        *v23++ |= v14;
        BOOL v18 = __CFADD__(v25++, 1);
      }
      while (!v18);
    }
    int v26 = -(int)v13;
    if (v24 == -1) {
      int v27 = v26;
    }
    else {
      int v27 = ~v24;
    }
    if (v27 + v10 >= 0)
    {
      if (v24 == -1) {
        int v28 = v23;
      }
      else {
        int v28 = v23 + 1;
      }
      int v29 = &v22[v24 != -1];
      int v30 = v27 + v9;
      do
      {
        *v29++ += v3;
        *v28++ |= v14 | 2;
        --v30;
      }
      while (v30);
    }
  }
  return result;
}

uint64_t fnt_SHPIX(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 56);
  int v3 = *(_DWORD *)(v2 - 4);
  *(void *)(a1 + 56) = v2 - 4;
  if (*(_WORD *)(a1 + 28)) {
    int v4 = ShortFracMul(v3, *(__int16 *)(a1 + 28));
  }
  else {
    int v4 = 0;
  }
  if (*(_WORD *)(a1 + 30)) {
    int v5 = ShortFracMul(v3, *(__int16 *)(a1 + 30));
  }
  else {
    int v5 = 0;
  }
  return fnt_SHP_Common(a1, v4, v5);
}

uint64_t fnt_IP(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2
    || ((v3 = *(void *)a1, (uint64_t v4 = *(void *)(a1 + 16)) != 0) ? (v5 = v3 == 0) : (v5 = 1),
        v5 || (uint64_t v6 = *(unsigned int *)(a1 + 100), (v6 & 0x80000000) != 0) || (int)v6 >= *(_DWORD *)(v3 + 112)))
  {
    int v27 = (FILE **)MEMORY[0x1E4F143C8];
    int v28 = (FILE *)*MEMORY[0x1E4F143C8];
    int v29 = "ERROR: CE0, CE1 or CE2 NULL; RP1 out of range";
    goto LABEL_36;
  }
  uint64_t v7 = *(unsigned int *)(a1 + 104);
  uint64_t v8 = **(void **)(a1 + 72);
  BOOL v11 = v3 == v8 || v2 == v8 || v4 == v8;
  if ((v7 & 0x80000000) != 0 || (int)v7 >= *(_DWORD *)(v2 + 112))
  {
    int v27 = (FILE **)MEMORY[0x1E4F143C8];
    int v28 = (FILE *)*MEMORY[0x1E4F143C8];
    int v29 = "ERROR: pt2 out of range";
    goto LABEL_36;
  }
  int v12 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, (*(_DWORD *)(*(void *)(v2 + 8) + 4 * v7) - *(_DWORD *)(*(void *)(v3 + 8) + 4 * v6)), (*(_DWORD *)(*(void *)(v2 + 16) + 4 * v7) - *(_DWORD *)(*(void *)(v3 + 16) + 4 * v6)));
  if (v11)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(a1 + 136))(a1, (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 56) + 4 * v7)- *(_DWORD *)(*(void *)(v3 + 56) + 4 * v6)), (*(_DWORD *)(*(void *)(*(void *)(a1 + 8) + 64) + 4 * v7)- *(_DWORD *)(*(void *)(v3 + 64) + 4 * v6)));
  }
  else
  {
    if (*(unsigned char *)(a1 + 362)) {
      CorrectUnscaledOutline(a1);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(a1 + 136))(a1, (*(__int16 *)(*(void *)(*(void *)(a1 + 8) + 72) + 2 * v7)- *(__int16 *)(*(void *)(v3 + 72) + 2 * v6)), (*(__int16 *)(*(void *)(*(void *)(a1 + 8) + 80) + 2 * v7)- *(__int16 *)(*(void *)(v3 + 80) + 2 * v6)));
  }
  int v14 = result;
  if ((*(_DWORD *)(a1 + 112) & 0x80000000) == 0)
  {
    double v15 = (double)v12;
    while (1)
    {
      CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
      uint64_t v16 = *(void *)(a1 + 56);
      unsigned int v18 = *(_DWORD *)(v16 - 4);
      uint64_t v17 = v18;
      *(void *)(a1 + 56) = v16 - 4;
      if ((v18 & 0x80000000) != 0) {
        break;
      }
      uint64_t v19 = *(void *)(a1 + 16);
      if ((int)v17 >= *(_DWORD *)(v19 + 112)) {
        break;
      }
      if (v11)
      {
        uint64_t v20 = (*(_DWORD *)(*(void *)(v19 + 56) + 4 * v17) - *(_DWORD *)(*(void *)(v3 + 56) + 4 * v6));
        int v21 = *(_DWORD *)(*(void *)(v19 + 64) + 4 * v17);
        int v22 = *(_DWORD *)(*(void *)(v3 + 64) + 4 * v6);
      }
      else
      {
        uint64_t v20 = (*(__int16 *)(*(void *)(v19 + 72) + 2 * v17) - *(__int16 *)(*(void *)(v3 + 72) + 2 * v6));
        int v21 = *(__int16 *)(*(void *)(v19 + 80) + 2 * v17);
        int v22 = *(__int16 *)(*(void *)(v3 + 80) + 2 * v6);
      }
      int v23 = (*(uint64_t (**)(uint64_t, uint64_t, void))(a1 + 136))(a1, v20, (v21 - v22));
      int v24 = v23;
      if (v14) {
        int v24 = (int)(v15 * (double)v23 / (double)v14);
      }
      int v25 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, (*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 8) + 4 * v17)- *(_DWORD *)(*(void *)(v3 + 8) + 4 * v6)), (*(_DWORD *)(*(void *)(*(void *)(a1 + 16) + 16) + 4 * v17)- *(_DWORD *)(*(void *)(v3 + 16) + 4 * v6)));
      uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, void))(a1 + 120))(a1, *(void *)(a1 + 16), v17, (v24 - v25));
      int v26 = *(_DWORD *)(a1 + 112);
      *(_DWORD *)(a1 + 112) = v26 - 1;
      if (v26 <= 0) {
        goto LABEL_34;
      }
    }
    int v27 = (FILE **)MEMORY[0x1E4F143C8];
    int v28 = (FILE *)*MEMORY[0x1E4F143C8];
    int v29 = "ERROR: rag1 out of range";
LABEL_36:
    fprintf(v28, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v29);
    uint64_t v30 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v30) {
      fprintf(*v27, "(glyph = %d)\n", *(_DWORD *)(v30 + 88));
    }
    fputc(10, *v27);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
LABEL_34:
  *(_DWORD *)(a1 + 112) = 0;
  return result;
}

uint64_t fnt_MSIRP(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 96);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v5 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(v5 - 4);
  v5 -= 4;
  int v6 = v7;
  *(void *)(a1 + 56) = v5;
  CHECK_STACK_POINTER_BASE(a1, v5);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(unsigned int *)(v8 - 4);
  *(void *)(a1 + 56) = v8 - 4;
  if (!v2
    || !v3
    || (v4 & 0x80000000) != 0
    || (int)v4 >= *(_DWORD *)(v3 + 112)
    || (v9 & 0x80000000) != 0
    || (int)v9 >= *(_DWORD *)(v2 + 112))
  {
    uint64_t v19 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: CE0, CE1 or CE2 NULL; pt1 or pt2 out of range");
    uint64_t v20 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v20) {
      fprintf(*v19, "(glyph = %d)\n", *(_DWORD *)(v20 + 88));
    }
    fputc(10, *v19);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  if (v2 == **(void **)(a1 + 72))
  {
    int v14 = *(_DWORD *)(*(void *)(v3 + 56) + 4 * v4);
    *(_DWORD *)(*(void *)(v2 + 56) + 4 * v9) = ShortFracMul(v6, *(__int16 *)(a1 + 24)) + v14;
    int v15 = *(_DWORD *)(*(void *)(v3 + 64) + 4 * v4);
    *(_DWORD *)(*(void *)(v2 + 64) + 4 * v9) = ShortFracMul(v6, *(__int16 *)(a1 + 26)) + v15;
    uint64_t v12 = *(void *)(v3 + 8);
    uint64_t v13 = *(void *)(v3 + 16);
    uint64_t v10 = *(void *)(v2 + 8);
    uint64_t v16 = *(void *)(v2 + 16);
    *(_DWORD *)(v10 + 4 * v9) = *(_DWORD *)(v12 + 4 * v4);
    int v11 = *(_DWORD *)(v13 + 4 * v4);
    *(_DWORD *)(v16 + 4 * v9) = v11;
  }
  else
  {
    uint64_t v10 = *(void *)(v2 + 8);
    int v11 = *(_DWORD *)(*(void *)(v2 + 16) + 4 * v9);
    uint64_t v12 = *(void *)(v3 + 8);
    uint64_t v13 = *(void *)(v3 + 16);
  }
  int v17 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, (*(_DWORD *)(v10 + 4 * v9) - *(_DWORD *)(v12 + 4 * v4)), (v11 - *(_DWORD *)(v13 + 4 * v4)));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 120))(a1, v2, v9, (v6 - v17));
  *(_DWORD *)(a1 + 100) = v4;
  *(_DWORD *)(a1 + 104) = v9;
  if (*(unsigned char *)(a1 + 363)) {
    *(_DWORD *)(a1 + 96) = v9;
  }
  return result;
}

uint64_t fnt_ALIGNRP(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  if (*(void *)result) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4 || (uint64_t v5 = *(unsigned int *)(result + 96), (v5 & 0x80000000) != 0) || (int)v5 >= *(_DWORD *)(v2 + 112))
  {
    uint64_t v13 = (FILE **)MEMORY[0x1E4F143C8];
    int v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = "ERROR: ce0 or ce1 NULL; pt0 out of range";
    goto LABEL_14;
  }
  if ((*(_DWORD *)(result + 112) & 0x80000000) == 0)
  {
    int v6 = *(_DWORD *)(*(void *)(v2 + 8) + 4 * v5);
    int v7 = *(_DWORD *)(*(void *)(v2 + 16) + 4 * v5);
    while (1)
    {
      CHECK_STACK_POINTER_BASE(v1, *(void *)(v1 + 56));
      uint64_t v8 = *(void *)(v1 + 56);
      unsigned int v10 = *(_DWORD *)(v8 - 4);
      uint64_t v9 = v10;
      *(void *)(v1 + 56) = v8 - 4;
      if ((v10 & 0x80000000) != 0 || (int)v9 >= *(_DWORD *)(v3 + 112)) {
        break;
      }
      int v11 = (*(uint64_t (**)(uint64_t, void, void))(v1 + 128))(v1, (*(_DWORD *)(*(void *)(v3 + 8) + 4 * v9) - v6), (*(_DWORD *)(*(void *)(v3 + 16) + 4 * v9) - v7));
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v1 + 120))(v1, v3, v9, -v11);
      int v12 = *(_DWORD *)(v1 + 112);
      *(_DWORD *)(v1 + 112) = v12 - 1;
      if (v12 <= 0) {
        goto LABEL_12;
      }
    }
    uint64_t v13 = (FILE **)MEMORY[0x1E4F143C8];
    int v14 = (FILE *)*MEMORY[0x1E4F143C8];
    int v15 = "ERROR: ptNum out of range";
LABEL_14:
    fprintf(v14, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v15);
    uint64_t v16 = *(void *)(*(void *)(v1 + 72) + 8);
    if (v16) {
      fprintf(*v13, "(glyph = %d)\n", *(_DWORD *)(v16 + 88));
    }
    fputc(10, *v13);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
LABEL_12:
  *(_DWORD *)(v1 + 112) = 0;
  return result;
}

uint64_t fnt_ALIGNPTS(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(void *)(a1 + 56);
  unsigned int v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  uint64_t v3 = v4;
  *(void *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(unsigned int *)(v5 - 4);
  *(void *)(a1 + 56) = v5 - 4;
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7
    || (uint64_t v8 = *(void *)a1) == 0
    || (v6 & 0x80000000) != 0
    || (int)v6 >= *(_DWORD *)(v7 + 112)
    || (v3 & 0x80000000) != 0
    || (int)v3 >= *(_DWORD *)(v8 + 112))
  {
    uint64_t v13 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: ce1 or ce2 NULL; pt1 or pt2 out of range");
    uint64_t v14 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v14) {
      fprintf(*v13, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    }
    fputc(10, *v13);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v9 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, (*(_DWORD *)(*(void *)(v8 + 8) + 4 * v3) - *(_DWORD *)(*(void *)(v7 + 8) + 4 * v6)), (*(_DWORD *)(*(void *)(v8 + 16) + 4 * v3) - *(_DWORD *)(*(void *)(v7 + 16) + 4 * v6)));
  uint64_t v10 = (v9 >> 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 120))(a1, v8, v6, v10);
  int v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 120);
  return v11(a1, v7, v3, (v10 - v9));
}

uint64_t fnt_SCANCTRL(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  int v3 = *(unsigned __int16 *)(v2 + 206);
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v5 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(v5 - 4);
  *(void *)(a1 + 56) = v5 - 4;
  *(_DWORD *)(v2 + 204) = v6 | (v3 << 16);
  return result;
}

uint64_t fnt_SCANTYPE(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v4 = *(void *)(a1 + 56);
  int v6 = *(_DWORD *)(v4 - 4);
  int v5 = v6;
  *(void *)(a1 + 56) = v4 - 4;
  if (v6 == 2)
  {
    int v7 = *(unsigned __int16 *)(v2 + 204) | 0x20000;
  }
  else if (v5 == 1)
  {
    int v7 = *(unsigned __int16 *)(v2 + 204) | 0x10000;
  }
  else
  {
    if (v5) {
      return result;
    }
    int v7 = *(unsigned __int16 *)(v2 + 204);
  }
  *(_DWORD *)(v2 + 204) = v7;
  return result;
}

uint64_t fnt_INSTCTRL(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v3 = *(void *)(a1 + 56);
  int v5 = *(_DWORD *)(v3 - 4);
  v3 -= 4;
  int v4 = v5;
  *(void *)(a1 + 56) = v3;
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, v3);
  int v7 = (_DWORD *)(*(void *)(a1 + 56) - 4);
  *(void *)(a1 + 56) = v7;
  unsigned int v8 = v5 - 1;
  if (*(_DWORD *)(v2 + 128) == 1 && v8 <= 1) {
    *(_DWORD *)(v2 + 208) = *(_DWORD *)(v2 + 208) & ~v4 | *v7 & v4;
  }
  return result;
}

void *fnt_PUSHB(uint64_t a1)
{
  return fnt_PushSomeBytes((void *)a1, *(unsigned __int8 *)(a1 + 363) - 175);
}

void *fnt_PushSomeBytes(void *result, int a2)
{
  unint64_t v3 = result;
  int v4 = (_DWORD *)result[7];
  if ((unint64_t)&v4[a2] > result[6])
  {
    uint64_t result = GrowStackForPush(result, a2);
    int v4 = result;
  }
  int v5 = (unsigned __int8 *)v3[8];
  if (a2 >= 1)
  {
    unsigned int v6 = a2 + 1;
    do
    {
      if (v3[46] > (unint64_t)v5 || v3[47] <= (unint64_t)v5)
      {
        unsigned int v8 = (FILE **)MEMORY[0x1E4F143C8];
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
        uint64_t v9 = *(void *)(v3[9] + 8);
        if (v9) {
          fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
        }
        fputc(10, *v8);
        exception = __cxa_allocate_exception(2uLL);
        _WORD *exception = 1;
        __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
      }
      uint64_t result = (void *)CHECK_STACK_POINTER_END((uint64_t)v3, (unint64_t)v4);
      int v7 = *v5++;
      *v4++ = v7;
      --v6;
    }
    while (v6 > 1);
  }
  v3[7] = v4;
  v3[8] = v5;
  return result;
}

uint64_t fnt_PUSHB0(void *a1)
{
  uint64_t v2 = (char *)a1[7];
  if ((unint64_t)(v2 + 4) > a1[6]) {
    uint64_t v2 = GrowStackForPush(a1, 1);
  }
  unint64_t v3 = (unsigned __int8 *)a1[8];
  if (a1[46] > (unint64_t)v3 || a1[47] <= (unint64_t)v3)
  {
    int v5 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    uint64_t v6 = *(void *)(a1[9] + 8);
    if (v6) {
      fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
    }
    fputc(10, *v5);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t result = CHECK_STACK_POINTER_END((uint64_t)a1, (unint64_t)v2);
  *(_DWORD *)uint64_t v2 = *v3;
  a1[7] = v2 + 4;
  a1[8] = v3 + 1;
  return result;
}

void *fnt_NPUSHB(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)a1[8];
  if (a1[46] > (unint64_t)v1 || a1[47] <= (unint64_t)v1)
  {
    int v4 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    uint64_t v6 = *(void *)(a1[9] + 8);
    if (v6) {
      fprintf(*v4, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
    }
    fputc(10, *v4);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  a1[8] = v1 + 1;
  int v2 = *v1;
  return fnt_PushSomeBytes(a1, v2);
}

void *fnt_PUSHW(uint64_t a1)
{
  return fnt_PushSomeWords((void *)a1, *(unsigned __int8 *)(a1 + 363) - 183);
}

void *fnt_PushSomeWords(void *result, int a2)
{
  unint64_t v3 = result;
  int v4 = (int *)result[7];
  if ((unint64_t)&v4[a2] > result[6])
  {
    uint64_t result = GrowStackForPush(result, a2);
    int v4 = (int *)result;
  }
  int v5 = (unsigned __int8 *)v3[8];
  if (a2 >= 1)
  {
    unsigned int v6 = a2 + 1;
    do
    {
      int v7 = v5;
      if (v3[46] > (unint64_t)v5
        || (unint64_t v8 = v3[47], v8 <= (unint64_t)v7)
        || v8 <= (unint64_t)(v7 + 1))
      {
        uint64_t v10 = (FILE **)MEMORY[0x1E4F143C8];
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
        uint64_t v11 = *(void *)(v3[9] + 8);
        if (v11) {
          fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
        }
        fputc(10, *v10);
        exception = __cxa_allocate_exception(2uLL);
        _WORD *exception = 1;
        __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
      }
      int v9 = (__int16)(*v7 << 8) | v7[1];
      uint64_t result = (void *)CHECK_STACK_POINTER_END((uint64_t)v3, (unint64_t)v4);
      *v4++ = v9;
      --v6;
      int v5 = v7 + 2;
    }
    while (v6 > 1);
    int v5 = v7 + 2;
  }
  v3[7] = v4;
  v3[8] = v5;
  return result;
}

uint64_t fnt_PUSHW0(void *a1)
{
  int v2 = (char *)a1[7];
  if ((unint64_t)(v2 + 4) > a1[6]) {
    int v2 = GrowStackForPush(a1, 1);
  }
  unint64_t v3 = (unsigned __int8 *)a1[8];
  if (a1[46] > (unint64_t)v3 || (unint64_t v4 = a1[47], v4 <= (unint64_t)v3) || v4 <= (unint64_t)(v3 + 1))
  {
    unint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    uint64_t v9 = *(void *)(a1[9] + 8);
    if (v9) {
      fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    }
    fputc(10, *v8);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v5 = v3 + 2;
  int v6 = (__int16)(*v3 << 8) | v3[1];
  uint64_t result = CHECK_STACK_POINTER_END((uint64_t)a1, (unint64_t)v2);
  *(_DWORD *)int v2 = v6;
  a1[7] = v2 + 4;
  a1[8] = v5;
  return result;
}

void *fnt_NPUSHW(void *a1)
{
  uint64_t v1 = (unsigned __int8 *)a1[8];
  if (a1[46] > (unint64_t)v1 || a1[47] <= (unint64_t)v1)
  {
    unint64_t v4 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
    uint64_t v6 = *(void *)(a1[9] + 8);
    if (v6) {
      fprintf(*v4, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
    }
    fputc(10, *v4);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  a1[8] = v1 + 1;
  int v2 = *v1;
  return fnt_PushSomeWords(a1, v2);
}

uint64_t fnt_WS(unint64_t *a1)
{
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  unint64_t v2 = a1[7];
  int v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  int v3 = v4;
  a1[7] = v2;
  uint64_t result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  unint64_t v6 = a1[7];
  uint64_t v7 = *(int *)(v6 - 4);
  a1[7] = v6 - 4;
  unint64_t v8 = a1[10];
  if (v7 >= *(unsigned __int16 *)(*(void *)(v8 + 248) + 18))
  {
    uint64_t v9 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v7, *(unsigned __int16 *)(*(void *)(v8 + 248) + 18), 0);
    uint64_t v10 = *(void *)(a1[9] + 8);
    if (v10) {
      fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
    }
    fputc(10, *v9);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  *(_DWORD *)(*(void *)(v8 + 16) + 4 * v7) = v3;
  return result;
}

uint64_t fnt_RS(unint64_t *a1)
{
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  unint64_t v2 = a1[7];
  uint64_t v5 = *(int *)(v2 - 4);
  unint64_t v3 = v2 - 4;
  uint64_t v4 = v5;
  a1[7] = v3;
  if (v5 >= *(unsigned __int16 *)(*(void *)(a1[10] + 248) + 18))
  {
    int v8 = v4;
    uint64_t v9 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v8, *(unsigned __int16 *)(*(void *)(a1[10] + 248) + 18), 0);
    uint64_t v10 = *(void *)(a1[9] + 8);
    if (v10) {
      fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
    }
    fputc(10, *v9);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t result = CHECK_STACK_POINTER_END((uint64_t)a1, v3);
  uint64_t v7 = (_DWORD *)a1[7];
  *uint64_t v7 = *(_DWORD *)(*(void *)(a1[10] + 16) + 4 * v4);
  a1[7] = (unint64_t)(v7 + 1);
  return result;
}

double fnt_WCVTP(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  int v3 = v4;
  *(void *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  uint64_t v6 = *(void *)(a1 + 56);
  unsigned int v8 = *(_DWORD *)(v6 - 4);
  uint64_t v7 = v8;
  *(void *)(a1 + 56) = v6 - 4;
  uint64_t v9 = *(void *)(a1 + 80);
  if ((v8 & 0x80000000) != 0 || *(_DWORD *)(v9 + 256) <= (int)v7)
  {
    int v12 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v7, *(_DWORD *)(v9 + 256), 0);
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v13) {
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    }
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  *(_DWORD *)(*(void *)(v9 + 24) + 4 * v7) = v3;
  if (v3)
  {
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 152))(a1, v7);
    if (v10) {
      BOOL v11 = v10 == v3;
    }
    else {
      BOOL v11 = 1;
    }
    if (!v11)
    {
      double result = (double)v3 * (double)v3 / (double)v10;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 80) + 24) + 4 * v7) = (int)result;
    }
  }
  return result;
}

uint64_t fnt_WCVTF(unint64_t *a1)
{
  unint64_t v2 = a1[10];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  unint64_t v3 = a1[7];
  int v5 = *(_DWORD *)(v3 - 4);
  v3 -= 4;
  int v4 = v5;
  a1[7] = v3;
  uint64_t result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v3);
  unint64_t v7 = a1[7];
  unsigned int v9 = *(_DWORD *)(v7 - 4);
  uint64_t v8 = v9;
  a1[7] = v7 - 4;
  if ((v9 & 0x80000000) != 0 || *(_DWORD *)(a1[10] + 256) <= (int)v8)
  {
    int v10 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v8, *(_DWORD *)(a1[10] + 256), 0);
    uint64_t v11 = *(void *)(a1[9] + 8);
    if (v11) {
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    }
    fputc(10, *v10);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  *(_DWORD *)(*(void *)(v2 + 24) + 4 * v8) = (unint64_t)(*(int *)(v2 + 100) * (uint64_t)v4 + 0x8000) >> 16;
  return result;
}

uint64_t fnt_RCVT(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(void *)(a1 + 56);
  unsigned int v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  uint64_t v3 = v4;
  *(void *)(a1 + 56) = v2;
  int v5 = *(_DWORD *)(*(void *)(a1 + 80) + 256);
  uint64_t result = CHECK_STACK_POINTER_END(a1, v2);
  if ((int)v4 >= v5)
  {
    unint64_t v7 = *(_DWORD **)(a1 + 56);
    *unint64_t v7 = 0;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 152))(a1, v3);
    unint64_t v7 = *(_DWORD **)(a1 + 56);
    *unint64_t v7 = result;
  }
  *(void *)(a1 + 56) = v7 + 1;
  return result;
}

uint64_t fnt_GC(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned int *)(v2 - 4);
  *(void *)(a1 + 56) = v2 - 4;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4 || (v3 & 0x80000000) != 0 || (int)v3 >= *(_DWORD *)(v4 + 112))
  {
    unsigned int v9 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: element NULL; pt out of range(A)");
    uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v10) {
      fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
    }
    fputc(10, *v9);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  if (*(unsigned char *)(a1 + 363)) {
    int v5 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 136))(a1, *(unsigned int *)(*(void *)(v4 + 56) + 4 * v3), *(unsigned int *)(*(void *)(v4 + 64) + 4 * v3));
  }
  else {
    int v5 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, *(unsigned int *)(*(void *)(v4 + 8) + 4 * v3), *(unsigned int *)(*(void *)(v4 + 16) + 4 * v3));
  }
  int v6 = v5;
  uint64_t result = CHECK_STACK_POINTER_END(a1, *(void *)(a1 + 56));
  uint64_t v8 = *(_DWORD **)(a1 + 56);
  *uint64_t v8 = v6;
  *(void *)(a1 + 56) = v8 + 1;
  return result;
}

uint64_t fnt_SCFS(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v2 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v2 - 4);
  v2 -= 4;
  int v3 = v4;
  *(void *)(a1 + 56) = v2;
  CHECK_STACK_POINTER_BASE(a1, v2);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(unsigned int *)(v5 - 4);
  *(void *)(a1 + 56) = v5 - 4;
  uint64_t v7 = *(void *)(a1 + 16);
  if (!v7 || (v6 & 0x80000000) != 0 || (int)v6 >= *(_DWORD *)(v7 + 112))
  {
    int v12 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: element NULL; pt out of range(B)");
    uint64_t v13 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v13) {
      fprintf(*v12, "(glyph = %d)\n", *(_DWORD *)(v13 + 88));
    }
    fputc(10, *v12);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v8 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, *(unsigned int *)(*(void *)(v7 + 8) + 4 * v6), *(unsigned int *)(*(void *)(v7 + 16) + 4 * v6));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 120))(a1, v7, v6, (v3 - v8));
  if (v7 == **(void **)(a1 + 72))
  {
    uint64_t v10 = *(void *)(v7 + 16);
    uint64_t v11 = *(void *)(v7 + 64);
    *(_DWORD *)(*(void *)(v7 + 56) + 4 * v6) = *(_DWORD *)(*(void *)(v7 + 8) + 4 * v6);
    *(_DWORD *)(v11 + 4 * v6) = *(_DWORD *)(v10 + 4 * v6);
  }
  return result;
}

uint64_t fnt_MD(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  CHECK_STACK_POINTER_BASE(a1, v2);
  unint64_t v6 = v2 - 4;
  uint64_t v7 = *(unsigned int *)(v2 - 4);
  CHECK_STACK_POINTER_BASE(a1, v2 - 4);
  if (v5) {
    BOOL v8 = v4 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (v8
    || (unsigned int v11 = *(_DWORD *)(v2 - 8), v9 = (_DWORD *)(v2 - 8), v10 = v11, (v11 & 0x80000000) != 0)
    || (int)v10 >= *(_DWORD *)(v5 + 112)
    || (v7 & 0x80000000) != 0
    || (int)v7 >= *(_DWORD *)(v4 + 112))
  {
    int v15 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: ce0 or ce1 NULL; pt1 or pt2 out of range");
    uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v16) {
      fprintf(*v15, "(glyph = %d)\n", *(_DWORD *)(v16 + 88));
    }
    fputc(10, *v15);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  if (*(unsigned char *)(a1 + 363))
  {
    int v12 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, (*(_DWORD *)(*(void *)(v5 + 8) + 4 * v10) - *(_DWORD *)(*(void *)(v4 + 8) + 4 * v7)), (*(_DWORD *)(*(void *)(v5 + 16) + 4 * v10) - *(_DWORD *)(*(void *)(v4 + 16) + 4 * v7)));
  }
  else
  {
    if (*(unsigned char *)(a1 + 362)) {
      CorrectUnscaledOutline(a1);
    }
    int v12 = (*(uint64_t (**)(uint64_t, unint64_t, unint64_t))(a1 + 136))(a1, (unint64_t)((*(__int16 *)(*(void *)(v5 + 72) + 2 * v10)- *(__int16 *)(*(void *)(v4 + 72) + 2 * v7))* (uint64_t)*(int *)(v3 + 100)+ 0x8000) >> 16, (unint64_t)((*(__int16 *)(*(void *)(v5 + 80) + 2 * v10)- *(__int16 *)(*(void *)(v4 + 80) + 2 * v7))* (uint64_t)*(int *)(v3 + 104)+ 0x8000) >> 16);
  }
  int v13 = v12;
  uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v9);
  _DWORD *v9 = v13;
  *(void *)(a1 + 56) = v6;
  return result;
}

uint64_t fnt_MPPEM(void *a1)
{
  unsigned __int16 v2 = fnt_ProjectIntegerPPEM((uint64_t)a1);
  GrowStackForPush(a1, 1);
  uint64_t result = CHECK_STACK_POINTER_END((uint64_t)a1, a1[7]);
  uint64_t v4 = (_DWORD *)a1[7];
  *uint64_t v4 = v2;
  a1[7] = v4 + 1;
  return result;
}

uint64_t fnt_ProjectIntegerPPEM(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  unsigned int v2 = *(_DWORD *)(v1 + 92);
  int v3 = *(_DWORD *)(v1 + 96);
  if (v2 != v3 && *(_WORD *)(a1 + 26))
  {
    if (*(_WORD *)(a1 + 24)) {
      unsigned int v2 = (sqrt((double)(v3 * *(__int16 *)(a1 + 26)) * (double)(v3 * *(__int16 *)(a1 + 26))+ (double)(int)(v2 * *(__int16 *)(a1 + 24)) * (double)(int)(v2 * *(__int16 *)(a1 + 24)))+ 0x2000) >> 14;
    }
    else {
      LOWORD(v2) = v3;
    }
  }
  return (__int16)v2;
}

uint64_t fnt_GETINFO(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  unsigned int v6 = *(_DWORD *)(v3 - 4);
  unint64_t v4 = v3 - 4;
  unsigned int v5 = v6;
  *(void *)(a1 + 56) = v4;
  unsigned int v7 = ((int)(v6 << 31) >> 31) & 7;
  if ((v6 & 2) != 0) {
    unsigned int v7 = v7 & 0xFFFFFEFF | ((*(unsigned char *)(v2 + 267) & 1) << 8);
  }
  if ((v5 & 4) != 0) {
    unsigned int v7 = v7 & 0xFFFFFDFF | ((((*(unsigned char *)(v2 + 267) & 2) >> 1) & 1) << 9);
  }
  unsigned int v8 = v7 & 0xFFFFF3FF | (((v5 >> 3) & 3) << 10);
  uint64_t result = CHECK_STACK_POINTER_END(a1, v4);
  uint64_t v10 = *(unsigned int **)(a1 + 56);
  *uint64_t v10 = v8;
  *(void *)(a1 + 56) = v10 + 1;
  return result;
}

double fnt_GETVARIATION(void *a1)
{
  uint64_t v2 = a1[10];
  int v3 = *(_DWORD *)(v2 + 116);
  if (v3)
  {
    unint64_t v4 = *(__int16 **)(v2 + 32);
    GrowStackForPush(a1, *(_DWORD *)(v2 + 116));
    unint64_t v5 = a1[7];
    if (*(unsigned char *)(v2 + 264))
    {
      do
      {
        CHECK_STACK_POINTER_END((uint64_t)a1, v5);
        int v7 = *v4++;
        unsigned int v8 = (_DWORD *)a1[7];
        *unsigned int v8 = v7;
        unint64_t v5 = (unint64_t)(v8 + 1);
        a1[7] = v5;
        --v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        CHECK_STACK_POINTER_END((uint64_t)a1, v5);
        unsigned int v9 = (_DWORD *)a1[7];
        _DWORD *v9 = 0;
        unint64_t v5 = (unint64_t)(v9 + 1);
        a1[7] = v5;
        --v3;
      }
      while (v3);
    }
  }
  else
  {
    *(void *)&double result = fnt_IDefPatch((uint64_t)a1).n128_u64[0];
  }
  return result;
}

uint64_t fnt_GETDATA(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v2 - 4);
  unint64_t v3 = v2 - 4;
  *(void *)(a1 + 56) = v3;
  if (v4 == 1)
  {
    CHECK_STACK_POINTER_BASE(a1, v3);
    uint64_t v5 = *(void *)(a1 + 56);
    unsigned int v8 = *(_DWORD *)(v5 - 4);
    unint64_t v6 = v5 - 4;
    unsigned int v7 = v8;
    *(void *)(a1 + 56) = v6;
    if (!v8)
    {
      uint64_t v14 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: fnt_GETDATA - randomFntGetData: N == 0");
      uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8);
      if (v15) {
        fprintf(*v14, "(glyph = %d)\n", *(_DWORD *)(v15 + 88));
      }
      fputc(10, *v14);
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
    CHECK_STACK_POINTER_END(a1, v6);
    unsigned int v9 = *(unsigned int **)(a1 + 56);
    *v9++ = 0x11 % v7;
    *(void *)(a1 + 56) = v9;
    uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v9);
    unsigned int v11 = *(_DWORD **)(a1 + 56);
    *unsigned int v11 = 1;
    int v12 = v11 + 1;
  }
  else
  {
    uint64_t result = CHECK_STACK_POINTER_END(a1, v3);
    int v13 = *(_DWORD **)(a1 + 56);
    *int v13 = 0;
    int v12 = v13 + 1;
  }
  *(void *)(a1 + 56) = v12;
  return result;
}

uint64_t fnt_FLIPON(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 80) + 244) = 1;
  return result;
}

uint64_t fnt_FLIPOFF(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 80) + 244) = 0;
  return result;
}

uint64_t fnt_BinaryOperand(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 56);
  CHECK_STACK_POINTER_BASE(a1, v2);
  unint64_t v3 = (int *)(v2 - 4);
  int v4 = *(_DWORD *)(v2 - 4);
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, v2 - 4);
  int v8 = *(_DWORD *)(v2 - 8);
  unint64_t v6 = (int *)(v2 - 8);
  int v7 = v8;
  int v9 = *(unsigned __int8 *)(a1 + 363);
  switch(*(unsigned char *)(a1 + 363))
  {
    case 'P':
      int v4 = v7 < v4;
      goto LABEL_28;
    case 'Q':
      int v4 = v7 <= v4;
      goto LABEL_28;
    case 'R':
      int v4 = v7 > v4;
      goto LABEL_28;
    case 'S':
      int v4 = v7 >= v4;
      goto LABEL_28;
    case 'T':
      int v4 = v7 == v4;
      goto LABEL_28;
    case 'U':
      BOOL v10 = v7 == v4;
      goto LABEL_17;
    case 'V':
    case 'W':
    case 'X':
    case 'Y':
    case '\\':
    case ']':
    case '^':
    case '_':
      goto LABEL_29;
    case 'Z':
      if (v7) {
        BOOL v10 = v4 == 0;
      }
      else {
        BOOL v10 = 1;
      }
      goto LABEL_17;
    case '[':
      BOOL v10 = (v7 | v4) == 0;
LABEL_17:
      int v4 = !v10;
      goto LABEL_28;
      uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
      v4 += v7;
      goto LABEL_28;
    case 'a':
      uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
      int v4 = v7 - v4;
      goto LABEL_28;
    case 'b':
      CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
      uint64_t result = Div26Dot6(v7, v4);
      goto LABEL_24;
    case 'c':
      CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
      uint64_t result = Mul26Dot6(v7, v4);
LABEL_24:
      int v4 = result;
      goto LABEL_28;
    default:
      if (v9 == 139)
      {
        if (v7 > v4) {
          int v4 = v7;
        }
      }
      else
      {
        if (v9 != 140) {
          goto LABEL_29;
        }
        if (v7 < v4) {
          int v4 = v7;
        }
      }
      uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v6);
LABEL_28:
      *unint64_t v6 = v4;
      unint64_t v6 = v3;
LABEL_29:
      *(void *)(a1 + 56) = v6;
      return result;
  }
}

uint64_t fnt_UnaryOperand(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 56);
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, v2);
  int v4 = (_DWORD *)(v2 - 4);
  int v5 = *(_DWORD *)(v2 - 4);
  int v6 = *(unsigned __int8 *)(a1 + 363);
  switch(*(unsigned char *)(a1 + 363))
  {
    case '\\':
      int v5 = v5 == 0;
      goto LABEL_20;
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'b':
    case 'c':
      goto LABEL_21;
    case 'd':
      uint64_t result = CHECK_STACK_POINTER_END(a1, v2 - 4);
      if (v5 < 0) {
        int v5 = -v5;
      }
      goto LABEL_20;
    case 'e':
      uint64_t result = CHECK_STACK_POINTER_END(a1, v2 - 4);
      int v5 = -v5;
      goto LABEL_20;
    case 'f':
      goto LABEL_19;
    case 'g':
      v5 += 63;
LABEL_19:
      v5 &= 0xFFFFFFC0;
      uint64_t result = CHECK_STACK_POINTER_END(a1, v2 - 4);
      goto LABEL_20;
    default:
      if ((v6 - 86) >= 2) {
        goto LABEL_21;
      }
      if (v5 < 0) {
        unsigned int v7 = -((32 - v5) & 0xFFFFFFC0);
      }
      else {
        unsigned int v7 = (v5 + 32) & 0xFFFFFFC0;
      }
      BOOL v8 = v6 == 86;
      if (v7) {
        BOOL v9 = ((v7 ^ v5) & 0x80000000) != 0;
      }
      else {
        BOOL v9 = 0;
      }
      BOOL v10 = v9 || (v7 & 0x40) == 0;
      int v5 = v8 ^ v10;
LABEL_20:
      *int v4 = v5;
      int v4 = (_DWORD *)v2;
LABEL_21:
      *(void *)(a1 + 56) = v4;
      return result;
  }
}

uint64_t fnt_IF(uint64_t a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(v3 - 4);
  *(void *)(a1 + 56) = v3 - 4;
  if (!v4)
  {
    int v5 = *(unsigned __int8 **)(a1 + 64);
    int v6 = 1;
    do
    {
      if (*(void *)(a1 + 368) > (unint64_t)v5 || *(void *)(a1 + 376) <= (unint64_t)v5)
      {
        BOOL v9 = (FILE **)MEMORY[0x1E4F143C8];
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
        uint64_t v10 = *(void *)(*(void *)(a1 + 72) + 8);
        if (v10) {
          fprintf(*v9, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
        }
        fputc(10, *v9);
        exception = __cxa_allocate_exception(2uLL);
        _WORD *exception = 1;
        __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
      }
      unsigned int v7 = v5 + 1;
      int v8 = *v5;
      *(unsigned char *)(a1 + 363) = v8;
      switch(v8)
      {
        case 27:
          if (v6 == 1) {
            goto LABEL_14;
          }
          break;
        case 88:
          ++v6;
          break;
        case 89:
          --v6;
          break;
        default:
          uint64_t result = (uint64_t)fnt_SkipPushCrap(a1, v7);
          unsigned int v7 = (unsigned __int8 *)result;
          break;
      }
      int v5 = v7;
    }
    while (v6);
LABEL_14:
    *(void *)(a1 + 64) = v7;
  }
  return result;
}

unsigned __int8 *fnt_ELSE(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 **)(a1 + 64);
  int v3 = 1;
  do
  {
    while (1)
    {
      if (*(void *)(a1 + 368) > (unint64_t)result || *(void *)(a1 + 376) <= (unint64_t)result)
      {
        int v5 = (FILE **)MEMORY[0x1E4F143C8];
        fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the inst array");
        uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8);
        if (v6) {
          fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
        }
        fputc(10, *v5);
        exception = __cxa_allocate_exception(2uLL);
        _WORD *exception = 1;
        __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
      }
      int v4 = *result;
      *(unsigned char *)(a1 + 363) = v4;
      if (v4 == 88) {
        break;
      }
      if (v4 == 89)
      {
        --v3;
        ++result;
        if (!v3) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t result = fnt_SkipPushCrap(a1, result + 1);
      }
    }
    ++v3;
    ++result;
  }
  while (v3);
LABEL_11:
  *(void *)(a1 + 64) = result;
  return result;
}

uint64_t fnt_JMPR(unint64_t *a1)
{
  uint64_t result = CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  unint64_t v3 = a1[7];
  unint64_t v4 = *(int *)(v3 - 4) + a1[8] - 1;
  a1[7] = v3 - 4;
  a1[8] = v4;
  if (v4 < a1[46] || v4 >= a1[48])
  {
    int v5 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access beyond the font data");
    uint64_t v6 = *(void *)(a1[9] + 8);
    if (v6) {
      fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v6 + 88));
    }
    fputc(10, *v5);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return result;
}

uint64_t fnt_JROT(void *a1)
{
  unint64_t v2 = a1[7];
  uint64_t result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  if (*(_DWORD *)(v2 - 4))
  {
    uint64_t result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2 - 4);
    uint64_t v5 = *(int *)(v2 - 8);
    unint64_t v4 = v2 - 8;
    unint64_t v6 = v5 + a1[8] - 1;
    a1[8] = v6;
    if (v6 < a1[46] || v6 >= a1[48])
    {
      unsigned int v7 = (FILE **)MEMORY[0x1E4F143C8];
      int v8 = (FILE *)*MEMORY[0x1E4F143C8];
      BOOL v9 = "ERROR: trying to access beyond the font data";
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v4 = v2 - 8;
    if (*(void *)(a1[10] + 8) > v4 || a1[6] <= v4)
    {
      unsigned int v7 = (FILE **)MEMORY[0x1E4F143C8];
      int v8 = (FILE *)*MEMORY[0x1E4F143C8];
      BOOL v9 = "ERROR: trying to access outside the stack";
LABEL_9:
      fprintf(v8, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v9);
      uint64_t v10 = *(void *)(a1[9] + 8);
      if (v10) {
        fprintf(*v7, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
      }
      fputc(10, *v7);
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
  }
  a1[7] = v4;
  return result;
}

uint64_t fnt_JROF(void *a1)
{
  unint64_t v2 = a1[7];
  uint64_t result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2);
  if (*(_DWORD *)(v2 - 4))
  {
    unint64_t v4 = v2 - 8;
    if (*(void *)(a1[10] + 8) > v4 || a1[6] <= v4)
    {
      uint64_t v5 = (FILE **)MEMORY[0x1E4F143C8];
      unint64_t v6 = (FILE *)*MEMORY[0x1E4F143C8];
      unsigned int v7 = "ERROR: trying to access outside the stack";
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t result = CHECK_STACK_POINTER_BASE((uint64_t)a1, v2 - 4);
    uint64_t v8 = *(int *)(v2 - 8);
    unint64_t v4 = v2 - 8;
    unint64_t v9 = v8 + a1[8] - 1;
    a1[8] = v9;
    if (v9 < a1[46] || v9 >= a1[48])
    {
      uint64_t v5 = (FILE **)MEMORY[0x1E4F143C8];
      unint64_t v6 = (FILE *)*MEMORY[0x1E4F143C8];
      unsigned int v7 = "ERROR: trying to access beyond the font data";
LABEL_9:
      fprintf(v6, "CHECK_ASSERTION: interpreter assertion failed \"%s\"", v7);
      uint64_t v10 = *(void *)(a1[9] + 8);
      if (v10) {
        fprintf(*v5, "(glyph = %d)\n", *(_DWORD *)(v10 + 88));
      }
      fputc(10, *v5);
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
  }
  a1[7] = v4;
  return result;
}

uint64_t fnt_ROUND(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 80);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  unint64_t v3 = (unsigned int *)(*(void *)(a1 + 56) - 4);
  *(void *)(a1 + 56) = v3;
  int v4 = *(unsigned __int8 *)(a1 + 363);
  if ((v4 - 108) <= 0xFFFFFFFB)
  {
    uint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE: %d not in range (%d - %d), interpreter value out of range", v4, 107, 104);
    uint64_t v9 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v9) {
      fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    }
    fputc(10, *v8);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v5 = (*(uint64_t (**)(void, uint64_t))(v2 + 216))(*v3, a1);
  uint64_t result = CHECK_STACK_POINTER_END(a1, *(void *)(a1 + 56));
  unsigned int v7 = *(_DWORD **)(a1 + 56);
  *unsigned int v7 = v5;
  *(void *)(a1 + 56) = v7 + 1;
  return result;
}

uint64_t fnt_NROUND(uint64_t a1)
{
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v2 = (int *)(*(void *)(a1 + 56) - 4);
  *(void *)(a1 + 56) = v2;
  int v3 = *(unsigned __int8 *)(a1 + 363);
  if ((v3 - 112) <= 0xFFFFFFFB)
  {
    unsigned int v7 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE: %d not in range (%d - %d), interpreter value out of range", v3, 111, 108);
    uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v8) {
      fprintf(*v7, "(glyph = %d)\n", *(_DWORD *)(v8 + 88));
    }
    fputc(10, *v7);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  int v4 = *v2;
  uint64_t result = CHECK_STACK_POINTER_END(a1, (unint64_t)v2);
  unint64_t v6 = *(_DWORD **)(a1 + 56);
  *unint64_t v6 = v4;
  *(void *)(a1 + 56) = v6 + 1;
  return result;
}

uint64_t fnt_MDRP(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v23 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"");
LABEL_39:
    uint64_t v24 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v24) {
      fprintf(*v23, "(glyph = %d)\n", *(_DWORD *)(v24 + 88));
    }
    int v25 = *v23;
LABEL_45:
    fputc(10, v25);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v5 = *(unsigned int *)(a1 + 96);
  uint64_t v6 = *(void *)(a1 + 80);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(unsigned int *)(v7 - 4);
  *(void *)(a1 + 56) = v7 - 4;
  CHECK_ELEMENTPTR(a1, (int *)v3);
  if ((v5 & 0x80000000) != 0 || *(_DWORD *)(v3 + 112) <= (int)v5)
  {
    int v23 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range");
    goto LABEL_39;
  }
  int v9 = *(_DWORD *)(v2 + 112);
  if ((v8 & 0x80000000) != 0 || v9 <= (int)v8)
  {
    int v26 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_RANGE_INDEX: %d not in range (%d - %d), interpreter value out of range", v8, v9, 0);
    uint64_t v27 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v27) {
      fprintf(*v26, "(glyph = %d)\n", *(_DWORD *)(v27 + 88));
    }
    int v25 = *v26;
    goto LABEL_45;
  }
  uint64_t v10 = **(void **)(a1 + 72);
  if (v3 == v10 || v2 == v10)
  {
    uint64_t v12 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 136))(a1, (*(_DWORD *)(*(void *)(v2 + 56) + 4 * v8) - *(_DWORD *)(*(void *)(v3 + 56) + 4 * v5)), (*(_DWORD *)(*(void *)(v2 + 64) + 4 * v8) - *(_DWORD *)(*(void *)(v3 + 64) + 4 * v5)));
  }
  else
  {
    if (*(unsigned char *)(a1 + 362)) {
      CorrectUnscaledOutline(a1);
    }
    int v14 = *(_DWORD *)(v6 + 100);
    int v13 = *(_DWORD *)(v6 + 104);
    uint64_t v15 = *(uint64_t (**)(uint64_t, unint64_t, unint64_t))(a1 + 136);
    if (v14 == v13)
    {
      unint64_t v16 = (unint64_t)(*(int *)(v6 + 100)
                             * (uint64_t)(int)v15(a1, (*(__int16 *)(*(void *)(v2 + 72) + 2 * v8)- *(__int16 *)(*(void *)(v3 + 72) + 2 * v5)), (*(__int16 *)(*(void *)(v2 + 80) + 2 * v8)- *(__int16 *)(*(void *)(v3 + 80) + 2 * v5)))+ 0x8000) >> 16;
      goto LABEL_21;
    }
    uint64_t v12 = v15(a1, (unint64_t)((*(__int16 *)(*(void *)(v2 + 72) + 2 * v8) - *(__int16 *)(*(void *)(v3 + 72) + 2 * v5))* (uint64_t)v14+ 0x8000) >> 16, (unint64_t)((*(__int16 *)(*(void *)(v2 + 80) + 2 * v8) - *(__int16 *)(*(void *)(v3 + 80) + 2 * v5))* (uint64_t)v13+ 0x8000) >> 16);
  }
  unint64_t v16 = v12;
LABEL_21:
  if (*(_DWORD *)(v6 + 196)) {
    unint64_t v16 = fnt_CheckSingleWidth(v16, a1);
  }
  char v17 = *(unsigned char *)(a1 + 363);
  int v18 = v16;
  if ((v17 & 4) != 0)
  {
    int v18 = (*(uint64_t (**)(unint64_t, uint64_t))(v6 + 216))(v16, a1);
    char v17 = *(unsigned char *)(a1 + 363);
  }
  if ((v17 & 8) != 0)
  {
    int v19 = *(_DWORD *)(v6 + 212);
    if (v18 >= -v19) {
      int v20 = -v19;
    }
    else {
      int v20 = v18;
    }
    if (v18 > v19) {
      int v19 = v18;
    }
    if ((v16 & 0x80000000) == 0) {
      int v18 = v19;
    }
    else {
      int v18 = v20;
    }
  }
  int v21 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, (*(_DWORD *)(*(void *)(v2 + 8) + 4 * v8) - *(_DWORD *)(*(void *)(v3 + 8) + 4 * v5)), (*(_DWORD *)(*(void *)(v2 + 16) + 4 * v8) - *(_DWORD *)(*(void *)(v3 + 16) + 4 * v5)));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 120))(a1, v2, v8, (v18 - v21));
  *(_DWORD *)(a1 + 100) = v5;
  *(_DWORD *)(a1 + 104) = v8;
  if ((*(unsigned char *)(a1 + 363) & 0x10) != 0) {
    *(_DWORD *)(a1 + 96) = v8;
  }
  return result;
}

uint64_t fnt_CheckSingleWidth(unsigned int a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 80);
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(a2 + 160))(a2);
  if ((a1 & 0x80000000) != 0)
  {
    int v6 = a1 + result;
    if ((int)(a1 + result) <= 0) {
      int v6 = -v6;
    }
    if (v6 < *(_DWORD *)(v3 + 196)) {
      return -(int)result;
    }
    else {
      return a1;
    }
  }
  else
  {
    int v5 = a1 - result;
    if ((int)(a1 - result) < 0) {
      int v5 = result - a1;
    }
    if (v5 >= *(_DWORD *)(v3 + 196)) {
      return a1;
    }
    else {
      return result;
    }
  }
}

uint64_t fnt_MIRP(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 80);
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  int v6 = *(uint64_t (**)(uint64_t, void))(a1 + 152);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v7 = *(void *)(a1 + 56);
  unsigned int v8 = *(_DWORD *)(v7 - 4);
  *(void *)(a1 + 56) = v7 - 4;
  int v9 = v6(a1, v8);
  CHECK_STACK_POINTER_BASE(a1, *(void *)(a1 + 56));
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(unsigned int *)(v10 - 4);
  *(void *)(a1 + 56) = v10 - 4;
  if (!v4
    || !v5
    || (v2 & 0x80000000) != 0
    || (int)v2 >= *(_DWORD *)(v5 + 112)
    || (v11 & 0x80000000) != 0
    || (int)v11 >= *(_DWORD *)(v4 + 112))
  {
    uint64_t v27 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: CE0 or CE1 NULL; pt0 or ptNum out of range");
    uint64_t v28 = *(void *)(*(void *)(a1 + 72) + 8);
    if (v28) {
      fprintf(*v27, "(glyph = %d)\n", *(_DWORD *)(v28 + 88));
    }
    fputc(10, *v27);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  if (*(_DWORD *)(v3 + 196)) {
    int v9 = fnt_CheckSingleWidth(v9, a1);
  }
  uint64_t v30 = v3;
  if (v4 == **(void **)(a1 + 72))
  {
    uint64_t v14 = *(void *)(v5 + 56);
    uint64_t v15 = *(void *)(v5 + 64);
    uint64_t v12 = *(void *)(v4 + 56);
    uint64_t v13 = *(void *)(v4 + 64);
    *(_DWORD *)(v12 + 4 * v11) = *(_DWORD *)(v14 + 4 * v2);
    *(_DWORD *)(v13 + 4 * v11) = *(_DWORD *)(v15 + 4 * v2);
    *(_DWORD *)(v12 + 4 * v11) += ShortFracMul(v9, *(__int16 *)(a1 + 24));
    *(_DWORD *)(v13 + 4 * v11) += ShortFracMul(v9, *(__int16 *)(a1 + 26));
    uint64_t v16 = *(void *)(v5 + 16);
    uint64_t v17 = *(void *)(v4 + 16);
    *(_DWORD *)(*(void *)(v4 + 8) + 4 * v11) = *(_DWORD *)(*(void *)(v5 + 8) + 4 * v2);
    *(_DWORD *)(v17 + 4 * v11) = *(_DWORD *)(v16 + 4 * v2);
  }
  else
  {
    uint64_t v12 = *(void *)(v4 + 56);
    uint64_t v13 = *(void *)(v4 + 64);
    uint64_t v14 = *(void *)(v5 + 56);
    uint64_t v15 = *(void *)(v5 + 64);
  }
  LODWORD(v18) = (*(uint64_t (**)(uint64_t, void, void))(a1 + 136))(a1, (*(_DWORD *)(v12 + 4 * v11) - *(_DWORD *)(v14 + 4 * v2)), (*(_DWORD *)(v13 + 4 * v11) - *(_DWORD *)(v15 + 4 * v2)));
  int v19 = v18;
  if ((int)(v18 ^ v9) < 0 && *(unsigned char *)(v30 + 244) != 0) {
    int v9 = -v9;
  }
  char v21 = *(unsigned char *)(a1 + 363);
  if ((v21 & 4) != 0)
  {
    int v22 = v9 - v18;
    if (v9 - (int)v18 < 0) {
      int v22 = v18 - v9;
    }
    if (v22 <= *(_DWORD *)(v30 + 192)) {
      uint64_t v18 = v9;
    }
    else {
      uint64_t v18 = v18;
    }
    int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 216))(v18, a1);
    char v21 = *(unsigned char *)(a1 + 363);
  }
  if ((v21 & 8) != 0)
  {
    int v23 = *(_DWORD *)(v30 + 212);
    if (v9 >= -v23) {
      int v24 = -v23;
    }
    else {
      int v24 = v9;
    }
    if (v9 > v23) {
      int v23 = v9;
    }
    if (v19 >= 0) {
      int v9 = v23;
    }
    else {
      int v9 = v24;
    }
  }
  int v25 = (*(uint64_t (**)(uint64_t, void, void))(a1 + 128))(a1, (*(_DWORD *)(*(void *)(v4 + 8) + 4 * v11) - *(_DWORD *)(*(void *)(v5 + 8) + 4 * v2)), (*(_DWORD *)(*(void *)(v4 + 16) + 4 * v11) - *(_DWORD *)(*(void *)(v5 + 16) + 4 * v2)));
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(a1 + 120))(a1, v4, v11, (v9 - v25));
  *(_DWORD *)(a1 + 100) = v2;
  *(_DWORD *)(a1 + 104) = v11;
  if ((*(unsigned char *)(a1 + 363) & 0x10) != 0) {
    *(_DWORD *)(a1 + 96) = v11;
  }
  return result;
}

uint64_t fnt_CALL(unint64_t *a1)
{
  unint64_t v2 = a1[10];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  unint64_t v3 = a1[7];
  uint64_t v4 = *(int *)(v3 - 4);
  a1[7] = v3 - 4;
  unsigned int v5 = *(unsigned __int16 *)(*(void *)(a1[10] + 248) + 20);
  if (v4 >= v5)
  {
    int v6 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_FDEF: %d is out of range (0 - %d)", v4, v5);
    uint64_t v7 = *(void *)(a1[9] + 8);
    if (v7) {
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    }
    fputc(10, *v6);
    if (*(unsigned __int16 *)(*(void *)(a1[10] + 248) + 20) + 6 <= v4)
    {
LABEL_12:
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
  }
  uint64_t v8 = *(void *)(v2 + 48);
  if (!v8)
  {
    uint64_t v10 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: globalGS->funcDef == 0");
    uint64_t v11 = *(void *)(a1[9] + 8);
    if (v11) {
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    }
    fputc(10, *v10);
    goto LABEL_12;
  }
  return fnt_CALL_Common((uint64_t)a1, (int *)(v8 + 8 * v4), 1);
}

uint64_t fnt_CALL_Common(uint64_t result, int *a2, int a3)
{
  uint64_t v3 = result;
  unsigned int v4 = *((unsigned __int16 *)a2 + 3);
  if (v4 >= 2)
  {
    uint64_t v10 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_PROGRAM: %d is neither a fontProgramIndex(%d) nor preProgramIndex(%d)", v4, 0, 1);
    uint64_t v11 = *(void *)(*(void *)(v3 + 72) + 8);
    if (v11) {
      fprintf(*v10, "(glyph = %d)\n", *(_DWORD *)(v11 + 88));
    }
    fputc(10, *v10);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v5 = *(void *)(*(void *)(result + 80) + 8 * *((unsigned __int16 *)a2 + 3) + 64);
  if (v5 && a3 >= 1)
  {
    uint64_t v6 = v5 + *a2;
    uint64_t v7 = v6 + *((unsigned __int16 *)a2 + 2);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 144);
    unsigned int v9 = a3 + 1;
    do
    {
      uint64_t result = v8(v3, v6, v7);
      --v9;
    }
    while (v9 > 1);
  }
  return result;
}

unsigned __int8 *fnt_FDEF(unint64_t *a1)
{
  unint64_t v2 = a1[10];
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  unint64_t v3 = a1[7];
  unsigned int v5 = *(_DWORD *)(v3 - 4);
  uint64_t v4 = v5;
  a1[7] = v3 - 4;
  uint64_t v6 = *(unsigned int *)(v2 + 128);
  unsigned int v7 = *(unsigned __int16 *)(*(void *)(a1[10] + 248) + 20);
  if (v5 >= v7)
  {
    uint64_t v8 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_FDEF: %d is out of range (0 - %d)", v4, v7);
    uint64_t v9 = *(void *)(a1[9] + 8);
    if (v9) {
      fprintf(*v8, "(glyph = %d)\n", *(_DWORD *)(v9 + 88));
    }
    fputc(10, *v8);
    if (*(unsigned __int16 *)(*(void *)(a1[10] + 248) + 20) + 6 <= v4) {
      goto LABEL_20;
    }
  }
  if (v6 >= 2)
  {
    uint64_t v15 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_PROGRAM: %d is neither a fontProgramIndex(%d) nor preProgramIndex(%d)", v6, 0, 1);
    uint64_t v16 = *(void *)(a1[9] + 8);
    if (v16) {
      fprintf(*v15, "(glyph = %d)\n", *(_DWORD *)(v16 + 88));
    }
    fputc(10, *v15);
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
LABEL_21:
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  uint64_t v10 = *(void *)(v2 + 48);
  if (!v10)
  {
    uint64_t v18 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: globalGS->funcDef == 0(A)");
    uint64_t v19 = *(void *)(a1[9] + 8);
    if (v19) {
      fprintf(*v18, "(glyph = %d)\n", *(_DWORD *)(v19 + 88));
    }
    fputc(10, *v18);
LABEL_20:
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    goto LABEL_21;
  }
  uint64_t v11 = (unsigned __int8 *)a1[8];
  if ((v4 & 0x80000000) != 0 || v4 >= *(unsigned __int16 *)(*(void *)(v2 + 248) + 20))
  {
    uint64_t result = fnt_FindENDF((uint64_t)a1, v11);
  }
  else
  {
    uint64_t v12 = v10 + 8 * v4;
    *(_WORD *)(v12 + 6) = v6;
    uint64_t v13 = *(void *)(v2 + 8 * v6 + 64);
    if (v6 == 1) {
      *(unsigned char *)(v2 + 265) = 1;
    }
    *(_DWORD *)uint64_t v12 = v11 - v13;
    uint64_t result = fnt_FindENDF((uint64_t)a1, v11);
    *(_WORD *)(v12 + 4) = ~*((_WORD *)a1 + 32) + (_WORD)result;
  }
  a1[8] = (unint64_t)result;
  return result;
}

uint64_t fnt_LOOPCALL(unint64_t *a1)
{
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  unint64_t v2 = a1[7];
  uint64_t v3 = *(int *)(v2 - 4);
  a1[7] = v2 - 4;
  unint64_t v4 = a1[10];
  unsigned int v5 = *(unsigned __int16 *)(*(void *)(v4 + 248) + 20);
  if (v3 >= v5)
  {
    uint64_t v6 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_FDEF: %d is out of range (0 - %d)", v3, v5);
    uint64_t v7 = *(void *)(a1[9] + 8);
    if (v7) {
      fprintf(*v6, "(glyph = %d)\n", *(_DWORD *)(v7 + 88));
    }
    fputc(10, *v6);
    unint64_t v4 = a1[10];
    if (*(unsigned __int16 *)(*(void *)(v4 + 248) + 20) + 6 <= v3)
    {
LABEL_12:
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (!v8)
  {
    uint64_t v13 = (FILE **)MEMORY[0x1E4F143C8];
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: globalGS->funcDef == 0(B)");
    uint64_t v14 = *(void *)(a1[9] + 8);
    if (v14) {
      fprintf(*v13, "(glyph = %d)\n", *(_DWORD *)(v14 + 88));
    }
    fputc(10, *v13);
    goto LABEL_12;
  }
  uint64_t v9 = (int *)(v8 + 8 * v3);
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  unint64_t v10 = a1[7];
  int v11 = *(_DWORD *)(v10 - 4);
  a1[7] = v10 - 4;
  return fnt_CALL_Common((uint64_t)a1, v9, v11);
}

uint64_t fnt_DELTAP1(uint64_t a1)
{
  return fnt_DeltaEngine((void *)a1, *(uint64_t (**)(void *, void, void, void))(a1 + 120), *(__int16 *)(*(void *)(a1 + 80) + 238), *(_WORD *)(*(void *)(a1 + 80) + 240));
}

uint64_t fnt_DeltaEngine(void *a1, uint64_t (*a2)(void *, void, void, void), int a3, char a4)
{
  CHECK_STACK_POINTER_BASE((uint64_t)a1, a1[7]);
  uint64_t v8 = a1[7];
  int v10 = *(_DWORD *)(v8 - 4);
  unint64_t v9 = v8 - 4;
  int v11 = 2 * v10;
  unint64_t v12 = v9 - 8 * v10;
  a1[7] = v12;
  unint64_t v13 = *(void *)(a1[10] + 8);
  if (v13 > v12) {
    goto LABEL_30;
  }
  unint64_t v14 = a1[6];
  if (v14 <= v12) {
    goto LABEL_30;
  }
  uint64_t result = fnt_ProjectIntegerPPEM((uint64_t)a1);
  if ((result - a3) <= 0xF)
  {
    if (v13 > v9 || v14 <= v9)
    {
LABEL_30:
      uint64_t v27 = (FILE **)MEMORY[0x1E4F143C8];
      fprintf((FILE *)*MEMORY[0x1E4F143C8], "CHECK_ASSERTION: interpreter assertion failed \"%s\"", "ERROR: trying to access outside the stack");
      uint64_t v28 = *(void *)(a1[9] + 8);
      if (v28) {
        fprintf(*v27, "(glyph = %d)\n", *(_DWORD *)(v28 + 88));
      }
      fputc(10, *v27);
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 1;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
    signed int v17 = 16 * (result - a3);
    unsigned int v18 = v11 >> 1;
    int v19 = (v11 >> 1) & 0xFFFFFFFE;
    if (v19 < 3)
    {
      int v20 = 0;
    }
    else
    {
      int v20 = 0;
      do
      {
        int v21 = v20 + v19;
        if ((int)(*(_DWORD *)(v12 + 4 * v21) & 0xFFFFFFF0) < v17) {
          int v20 = v21;
        }
        v18 >>= 1;
        int v19 = v18 & 0x7FFFFFFE;
      }
      while ((v18 & 0x7FFFFFFE) > 2);
    }
    if (v20 < v11)
    {
      while (1)
      {
        uint64_t v22 = v20;
        while (1)
        {
          int v23 = *(_DWORD *)(v12 + 4 * v22);
          if ((v23 & 0xFFFFFFF0) == v17) {
            break;
          }
          v22 += 2;
          if ((int)(v23 & 0xFFFFFFF0) > v17 || (int)v22 >= v11) {
            return result;
          }
        }
        unsigned int v25 = *(_DWORD *)(v12 + 4 * v22) & 0xF;
        int v26 = v25 <= 7 ? -8 : -7;
        uint64_t result = a2(a1, *a1, *(unsigned int *)(v12 + 4 * ((int)v22 + 1)), ((int)((v26 + v25) << 6) >> a4));
        int v20 = v22 + 2;
        if ((int)v22 + 2 >= v11) {
          break;
        }
        unint64_t v12 = a1[7];
      }
    }
  }
  return result;
}

uint64_t fnt_DELTAP2(uint64_t a1)
{
  return fnt_DeltaEngine((void *)a1, *(uint64_t (**)(void *, void, void, void))(a1 + 120), (__int16)(*(_WORD *)(*(void *)(a1 + 80) + 238) + 16), *(_WORD *)(*(void *)(a1 + 80) + 240));
}

uint64_t fnt_DELTAP3(uint64_t a1)
{
  return fnt_DeltaEngine((void *)a1, *(uint64_t (**)(void *, void, void, void))(a1 + 120), (__int16)(*(_WORD *)(*(void *)(a1 + 80) + 238) + 32), *(_WORD *)(*(void *)(a1 + 80) + 240));
}

uint64_t fnt_DELTAC1(void *a1)
{
  return fnt_DeltaEngine(a1, (uint64_t (*)(void *, void, void, void))fnt_ChangeCvt, *(__int16 *)(a1[10] + 238), *(_WORD *)(a1[10] + 240));
}

uint64_t fnt_DELTAC2(void *a1)
{
  return fnt_DeltaEngine(a1, (uint64_t (*)(void *, void, void, void))fnt_ChangeCvt, (__int16)(*(_WORD *)(a1[10] + 238) + 16), *(_WORD *)(a1[10] + 240));
}

uint64_t fnt_DELTAC3(void *a1)
{
  return fnt_DeltaEngine(a1, (uint64_t (*)(void *, void, void, void))fnt_ChangeCvt, (__int16)(*(_WORD *)(a1[10] + 238) + 32), *(_WORD *)(a1[10] + 240));
}

void TStrikeDescription::TStrikeDescription(TStrikeDescription *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F0DD9380;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F0DD9380;
  *((_DWORD *)this + 6) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
}

uint64_t TFontScaler::CreateFontScaler@<X0>(uint64_t result@<X0>, int a2@<W1>, void *a3@<X8>)
{
  int v4 = *(_DWORD *)(result + 72);
  if (v4 != 33)
  {
    if ((v4 - 9) <= 4) {
      operator new();
    }
    if ((v4 - 14) <= 0xF && a2 != 0) {
      operator new();
    }
  }
  *a3 = 0;
  return result;
}

void sub_1B534103C(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10F1C40CF1E458ELL);
  _Unwind_Resume(a1);
}

uint64_t TConcreteFontScaler::TConcreteFontScaler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_1F0DD9410;
  __n128 v6 = TScalerStrike::TScalerStrike(a1 + 8, a2);
  *(void *)a1 = &unk_1F0DD92A0;
  *(void *)(a1 + 168) = a3;
  int v10 = -1431655766;
  int v7 = (*(uint64_t (**)(uint64_t, int *, __n128))(a3 + 8))(a2, &v10, v6);
  int v8 = v10;
  if (v7) {
    int v8 = 0;
  }
  *(_DWORD *)(a1 + 176) = v8;
  *(_DWORD *)(a1 + 180) = 0;
  *(void *)(a1 + 184) = 0;
  return a1;
}

void sub_1B5341120(_Unwind_Exception *a1)
{
  *uint64_t v1 = v2;
  TScalerStrike::~TScalerStrike(v3);
  _Unwind_Resume(a1);
}

double TConcreteFontScaler::GetGlyphDeviceBounds(TConcreteFontScaler *this, __int16 a2)
{
  __int16 v8 = a2;
  v7[0] = 0x626D61706D726472;
  v7[1] = 0;
  void v7[2] = 0;
  int v6 = -1431655766;
  *(void *)&long long v2 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v4 = v2;
  long long v5 = v2;
  if ((*(unsigned int (**)(void, char *, void *, uint64_t, __int16 *, long long *, uint64_t))(*((void *)this + 21) + 80))(*((unsigned int *)this + 44), (char *)this + 8, v7, 1, &v8, &v4, 36)|| !((unsigned __int16)v5 | WORD1(v5)))
  {
    return *MEMORY[0x1E4F1DB28];
  }
  else
  {
    return (double)SDWORD2(v4) * 0.0000152587891;
  }
}

double TConcreteFontScaler::GetGlyphDeviceVerticalTranslate(TConcreteFontScaler *this, __int16 a2)
{
  __int16 v20 = a2;
  v18[2] = 0;
  unint64_t v19 = 0xAAAAAAAA00000000;
  v18[0] = 0x706174686D726472;
  v18[1] = &v19;
  int v17 = -1431655766;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[0] = v3;
  v16[1] = v3;
  if (!(*(unsigned int (**)(void, char *, void *, uint64_t, __int16 *, _OWORD *, uint64_t))(*((void *)this + 21) + 80))(*((unsigned int *)this + 44), (char *)this + 8, v18, 1, &v20, v16, 36))
  {
    *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v13 = v4;
    *(_OWORD *)unint64_t v14 = v4;
    *(_OWORD *)&v14[112] = v4;
    long long v15 = v4;
    *(_OWORD *)&v14[80] = v4;
    *(_OWORD *)&v14[96] = v4;
    *(_OWORD *)&v14[48] = v4;
    *(_OWORD *)&v14[64] = v4;
    *(_OWORD *)&v14[16] = v4;
    *(_OWORD *)&v14[32] = v4;
    uint64_t v5 = *((void *)this + 3);
    *((void *)&v13 + 1) = *((void *)this + 2);
    *(void *)unint64_t v14 = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    long long v6 = *((_OWORD *)this + 3);
    *(_OWORD *)&_OWORD v14[8] = *((_OWORD *)this + 2);
    *(_OWORD *)&v14[24] = v6;
    *(_OWORD *)&v14[40] = *((_OWORD *)this + 4);
    *(void *)&long long v13 = &unk_1F0DD8DA8;
    *(_DWORD *)&v14[56] = *((_DWORD *)this + 20);
    *(_OWORD *)&v14[60] = *(_OWORD *)((char *)this + 84);
    *(_OWORD *)&v14[76] = *(_OWORD *)((char *)this + 100);
    *(_OWORD *)&v14[92] = *(_OWORD *)((char *)this + 116);
    *(_OWORD *)&v14[104] = *((_OWORD *)this + 8);
    *(void *)&v14[120] = 0;
    long long v15 = 0uLL;
    __int16 v8 = (unsigned char *)*((void *)this + 18);
    int v7 = (unsigned char *)*((void *)this + 19);
    int64_t v9 = v7 - v8;
    if (v7 != v8)
    {
      if (v9 < 0) {
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      }
      *(void *)&v14[120] = std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(v9 >> 3);
      *((void *)&v15 + 1) = *(void *)&v14[120] + 8 * v10;
      memmove(*(void **)&v14[120], v8, v9);
      *(void *)&long long v15 = *(void *)&v14[120] + 8 * (v9 >> 3);
    }
    *(void *)&v14[24] = &v14[60];
    MScalerCache::SetCacheData(0, &v12);
  }
  return *MEMORY[0x1E4F1DB30];
}

void sub_1B534155C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43)
{
}

BOOL TConcreteFontScaler::GetGlyphIdealMetrics(TConcreteFontScaler *this, __int16 a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5)
{
  __int16 v18 = a2;
  int v14 = 1835430499;
  uint64_t v16 = 0;
  uint64_t v15 = 0;
  int v17 = 0;
  memset(v13, 170, sizeof(v13));
  int v8 = (*(uint64_t (**)(void, char *, int *, uint64_t, __int16 *, void *, uint64_t))(*((void *)this + 21)
                                                                                               + 80))(*((unsigned int *)this + 44), (char *)this + 8, &v14, 1, &v18, v13, 24);
  if (!v8)
  {
    if (a3)
    {
      v9.i64[0] = SLODWORD(v13[0]);
      v9.i64[1] = SHIDWORD(v13[0]);
      *a3 = vmulq_f64(vcvtq_f64_s64(v9), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a4)
    {
      v10.i64[0] = SLODWORD(v13[1]);
      v10.i64[1] = SHIDWORD(v13[1]);
      *a4 = vmulq_f64(vcvtq_f64_s64(v10), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a5)
    {
      v11.i64[0] = SLODWORD(v13[2]);
      v11.i64[1] = SHIDWORD(v13[2]);
      *a5 = vmulq_f64(vcvtq_f64_s64(v11), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
  }
  return v8 == 0;
}

BOOL TConcreteFontScaler::GetGlyphDeviceMetrics(TConcreteFontScaler *this, __int16 a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, CGRect *a6)
{
  __int16 v24 = a2;
  v23[0] = 0x626D61706D726472;
  v23[1] = 0;
  _OWORD v23[2] = 0;
  int v22 = -1431655766;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v20 = v10;
  long long v21 = v10;
  int v11 = (*(uint64_t (**)(void, char *, void *, uint64_t, __int16 *, long long *, uint64_t))(*((void *)this + 21) + 80))(*((unsigned int *)this + 44), (char *)this + 8, v23, 1, &v24, &v20, 36);
  if (!v11)
  {
    if (a3)
    {
      v13.i64[0] = (int)v20;
      v13.i64[1] = SDWORD1(v20);
      *a3 = vmulq_f64(vcvtq_f64_s64(v13), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a4)
    {
      v14.i64[0] = SDWORD1(v21);
      v14.i64[1] = SDWORD2(v21);
      *a4 = vmulq_f64(vcvtq_f64_s64(v14), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a5)
    {
      v15.i64[0] = SHIDWORD(v21);
      v15.i64[1] = v22;
      *a5 = vmulq_f64(vcvtq_f64_s64(v15), (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL));
    }
    if (a6)
    {
      LOWORD(v12) = v21;
      CGFloat v16 = (double)v12;
      *(double *)&unint64_t v17 = (double)SHIDWORD(v20);
      CGFloat v18 = (double)SHIDWORD(v20) * 0.0000152587891 - v16;
      LOWORD(v17) = WORD1(v21);
      a6->origin.CGFloat x = (double)SDWORD2(v20) * 0.0000152587891;
      a6->origin.CGFloat y = v18;
      a6->size.CGFloat width = (double)v17;
      a6->size.CGFloat height = v16;
    }
  }
  return v11 == 0;
}

uint64_t TConcreteFontScaler::GetControlPoints(TConcreteFontScaler *this, __int16 a2, unsigned int *a3, CGPoint *a4)
{
  v48[1] = *MEMORY[0x1E4F143B8];
  __int16 v43 = a2;
  if ((*(unsigned int (**)(TConcreteFontScaler *))(*(void *)this + 192))(this)) {
    return 0;
  }
  int v40 = a3;
  uint64_t v42 = 0;
  memset(v47, 170, sizeof(v47));
  uint64_t v7 = 0;
  __p = 0;
  uint64_t v45 = 0;
  int v46 = 0;
  v48[0] = v47;
  v41[0] = 0x7061746867787074;
  v41[1] = 0;
  v41[2] = 0;
  do
  {
    if (v7 == 4) {
      goto LABEL_52;
    }
    int v8 = (*(uint64_t (**)(void, char *, void *, uint64_t, __int16 *))(*((void *)this + 21) + 88))(*((unsigned int *)this + 44), (char *)this + 8, v41, 1, &v43);
    int v9 = v42;
    if (v8) {
      BOOL v10 = 0;
    }
    else {
      BOOL v10 = v42 == 0;
    }
    if (!v10) {
      goto LABEL_37;
    }
    unint64_t v11 = (2 * HIDWORD(v42));
    unint64_t v12 = v45;
    unint64_t v13 = (v45 - (unsigned char *)__p) >> 3;
    if (v11 <= v13)
    {
      if (v11 >= v13) {
        goto LABEL_23;
      }
      CGFloat v18 = (char *)__p + 8 * v11;
      goto LABEL_22;
    }
    unint64_t v14 = v11 - v13;
    if (v11 - v13 <= (v46 - v45) >> 3)
    {
      bzero(v45, 8 * v14);
      CGFloat v18 = &v12[8 * v14];
LABEL_22:
      uint64_t v45 = v18;
      goto LABEL_23;
    }
    uint64_t v15 = v46 - (unsigned char *)__p;
    if ((v46 - (unsigned char *)__p) >> 2 > v11) {
      unint64_t v11 = v15 >> 2;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v11;
    }
    unint64_t v17 = (char *)v48[0];
    if (v48[0] + 8 * v16 <= (unint64_t)v48)
    {
      v48[0] += 8 * v16;
    }
    else
    {
      if (v16 >> 61) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      unint64_t v17 = (char *)operator new(8 * v16);
    }
    unint64_t v19 = &v17[8 * v13];
    bzero(v19, 8 * v14);
    long long v21 = (char *)__p;
    long long v20 = v45;
    int v22 = v19;
    if (v45 != __p)
    {
      do
      {
        uint64_t v23 = *((void *)v20 - 1);
        v20 -= 8;
        *((void *)v22 - 1) = v23;
        v22 -= 8;
      }
      while (v20 != v21);
      long long v20 = (char *)__p;
    }
    __p = v22;
    uint64_t v45 = &v19[8 * v14];
    __int16 v24 = v46;
    int v46 = &v17[8 * v16];
    if (v20)
    {
      if (v47 <= v20 && v48 > (void *)v20)
      {
        if (v24 == (char *)v48[0]) {
          v48[0] = v20;
        }
      }
      else
      {
        operator delete(v20);
      }
    }
LABEL_23:
    ++v7;
    int v9 = v42;
  }
  while (!v42);
  int v8 = 0;
LABEL_37:
  if (v8 || v9 != 1)
  {
LABEL_52:
    std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&__p);
    return 0;
  }
  int v26 = *(_DWORD *)__p;
  if (*(_DWORD *)__p)
  {
    int v27 = 0;
    unsigned int v28 = 0;
    int v29 = (unsigned int *)((char *)__p + 4);
    uint64_t v30 = v40;
    while (1)
    {
      uint64_t v31 = *v29;
      unsigned int v32 = v28 + v31;
      if (__CFADD__(v28, v31)) {
        break;
      }
      uint64_t v33 = (uint64_t *)((char *)v29 + (((v31 + 31) >> 3) & 0x1FFFFFFC) + 4);
      if (a4)
      {
        LODWORD(v34) = *v40 - v28;
        if (*v40 > v28)
        {
          if (v34 >= v31) {
            uint64_t v34 = v31;
          }
          else {
            uint64_t v34 = v34;
          }
          if (v34)
          {
            int v35 = v33;
            do
            {
              uint64_t v36 = *v35++;
              v37.i64[0] = (int)v36;
              v37.i64[1] = SHIDWORD(v36);
              a4[v28++] = (CGPoint)vmulq_f64(vcvtq_f64_s64(v37), (float64x2_t)xmmword_1B5400EF0);
              --v34;
            }
            while (v34);
          }
        }
      }
      int v29 = (unsigned int *)&v33[v31];
      ++v27;
      unsigned int v28 = v32;
      if (v27 == v26) {
        goto LABEL_56;
      }
    }
    uint64_t v38 = 0;
  }
  else
  {
    unsigned int v32 = 0;
    uint64_t v30 = v40;
LABEL_56:
    *uint64_t v30 = v32;
    uint64_t v38 = 1;
  }
  std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&__p);
  return v38;
}

void sub_1B5341B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t TConcreteFontScaler::GetGlyphFromName(TConcreteFontScaler *this, const char *a2)
{
  unsigned __int16 v6 = 0;
  int v5 = 2;
  int v2 = (*(uint64_t (**)(void, const char *, int *, unsigned __int16 *))(*((void *)this + 21) + 56))(*((void *)this + 9), a2, &v5, &v6);
  unsigned __int16 v3 = v6;
  if (v2) {
    return 0;
  }
  return v3;
}

double TConcreteFontScaler::GetVariationScalar(TConcreteFontScaler *this, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  double v2 = 0.0;
  if (a2 <= 0x7FFE && *(void *)(*((void *)this + 21) + 176) != 0)
  {
    unsigned __int16 v4 = a2;
    unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
    __int16 v6 = a2 + 1;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[7] = v7;
    v10[8] = v7;
    v10[5] = v7;
    v10[6] = v7;
    void v10[3] = v7;
    _OWORD v10[4] = v7;
    v10[1] = v7;
    v10[2] = v7;
    v10[0] = v7;
    LODWORD(v9) = 0;
    std::vector<int,TInlineBufferAllocator<int,30ul>>::vector(v10, (unsigned __int16)(a2 + 1), &v9);
    if (!(*(unsigned int (**)(char *, void, void))(*((void *)this + 21) + 176))((char *)this + 8, v6, *(void *)&v10[0]))
    {
      if (v4 >= (unint64_t)((uint64_t)(*((void *)&v10[0] + 1) - *(void *)&v10[0]) >> 2)) {
        __break(1u);
      }
      double v2 = (double)*(int *)(*(void *)&v10[0] + 4 * v4) * 0.0000152587891;
    }
    int v9 = (void **)v10;
    std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&v9);
  }
  return v2;
}

void sub_1B5341CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t TConcreteFontScaler::GetVariationScalars(TConcreteFontScaler *this, uint64_t a2, double *a3)
{
  uint64_t result = 0;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if ((int)a2 >= 1 && *(void *)(*((void *)this + 21) + 176))
  {
    unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
    void v13[7] = v7;
    v13[8] = v7;
    v13[5] = v7;
    v13[6] = v7;
    void v13[3] = v7;
    _OWORD v13[4] = v7;
    v13[1] = v7;
    long long v13[2] = v7;
    v13[0] = v7;
    uint64_t v8 = (unsigned __int16)a2;
    LODWORD(v12) = 0;
    std::vector<int,TInlineBufferAllocator<int,30ul>>::vector(v13, (unsigned __int16)a2, &v12);
    if ((*(unsigned int (**)(char *, uint64_t, void))(*((void *)this + 21) + 176))((char *)this + 8, a2, *(void *)&v13[0]))
    {
      uint64_t v12 = (void **)v13;
      std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&v12);
      return 0;
    }
    else
    {
      int v9 = *(int **)&v13[0];
      uint64_t v10 = (uint64_t)(*((void *)&v13[0] + 1) - *(void *)&v13[0]) >> 2;
      do
      {
        if (!v10) {
          __break(1u);
        }
        int v11 = *v9++;
        *a3++ = (double)v11 * 0.0000152587891;
        --v10;
        --v8;
      }
      while (v8);
      uint64_t v12 = (void **)v13;
      std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&v12);
      return 1;
    }
  }
  return result;
}

void sub_1B5341DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&a10);
  _Unwind_Resume(a1);
}

unint64_t TConcreteFontScaler::GetVariationValues(TConcreteFontScaler *this)
{
  if (!*(void *)(*((void *)this + 21) + 184)) {
    return 0;
  }
  unint64_t explicit = atomic_load_explicit((atomic_ullong *volatile)this + 23, memory_order_acquire);
  if (!explicit) {
    operator new[]();
  }
  return explicit;
}

void sub_1B5341EEC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994A0](v1, 0x1000C80BDFB0063);
  _Unwind_Resume(a1);
}

uint64_t TConcreteFontScaler::GetTupleCount(TConcreteFontScaler *this)
{
  uint64_t v1 = *(uint64_t (**)(char *, __int16 *))(*((void *)this + 21) + 192);
  if (!v1) {
    return 0;
  }
  __int16 v5 = -21846;
  int v2 = v1((char *)this + 8, &v5);
  uint64_t result = v5;
  if (v2 || (int)result <= 0) {
    return 0;
  }
  return result;
}

uint64_t TConcreteFontScaler::StreamPSEncoding(TConcreteFontScaler *this, unsigned int *a2, const void *a3, const unsigned int *a4, const unsigned __int16 *a5)
{
  uint64_t result = (*(uint64_t (**)(TConcreteFontScaler *))(*(void *)this + 128))(this);
  if (result) {
    return (*(unsigned int (**)(char *, unsigned int *, const void *, const unsigned int *, const unsigned __int16 *, void))(*((void *)this + 21) + 160))((char *)this + 8, a2, a3, a4, a5, 0) == 0;
  }
  return result;
}

uint64_t TTrueTypeScaler::TTrueTypeScaler(void *a1, uint64_t a2)
{
  if (TTrueTypeScaler::GetTrueTypeScaler(void)::once != -1) {
    dispatch_once(&TTrueTypeScaler::GetTrueTypeScaler(void)::once, &__block_literal_global_3);
  }
  uint64_t result = TConcreteFontScaler::TConcreteFontScaler((uint64_t)a1, a2, TTrueTypeScaler::sProtocol);
  *a1 = &unk_1F0DD91C0;
  return result;
}

int *___ZN15TTrueTypeScaler17GetTrueTypeScalerEv_block_invoke()
{
  uint64_t result = TTScalerOpen();
  TTrueTypeScaler::sProtocol = *((void *)result + 9);
  if (!TTrueTypeScaler::sProtocol)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 1;
  }
  return result;
}

uint64_t TTrueTypeScaler::GetType1Encoding(TTrueTypeScaler *this, unsigned __int16 *a2)
{
  v34[256] = *MEMORY[0x1E4F143B8];
  int v32 = 391;
  unsigned __int16 v4 = malloc_type_calloc(1uLL, 0x26uLL, 0x108004086473A5EuLL);
  uint64_t v31 = v4;
  CFMutableDataRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (!Mutable)
  {
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  bzero(a2, 0x200uLL);
  *unsigned __int16 v4 = 1;
  *(void *)(v4 + 5) = AppendBytes;
  *(void *)(v4 + 7) = Mutable;
  if (!(*(unsigned int (**)(TTrueTypeScaler *, int *))(*(void *)this + 128))(this, &v32)) {
    goto LABEL_4;
  }
  int v6 = (*(uint64_t (**)(char *, int *, void **, void, void, uint64_t))(*((void *)this + 21) + 160))((char *)this + 8, &v32, &v31, 0, 0, 1);
  CFDataAppendBytes(Mutable, (const UInt8 *)"\n", 1);
  if (v6) {
    goto LABEL_4;
  }
  MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
  size_t Length = CFDataGetLength(Mutable);
  bzero(v34, 0x800uLL);
  int v11 = strnstr((const char *)MutableBytePtr, "dup", Length);
  if (!v11)
  {
LABEL_42:
    for (uint64_t i = 0; i != 256; ++i)
    {
      int v27 = (const char *)v34[i];
      if (v27)
      {
        if (!strncmp((const char *)v34[i], "gid", 3uLL))
        {
          unsigned __int16 v29 = atoi_l(v27 + 3, 0);
        }
        else
        {
          size_t v28 = strlen(v27);
          unsigned __int16 v29 = (*(uint64_t (**)(TTrueTypeScaler *, const char *, size_t))(*(void *)this + 120))(this, v27, v28);
        }
        a2[i] = v29;
      }
    }
    uint64_t v7 = 1;
    goto LABEL_5;
  }
  uint64_t v30 = &MutableBytePtr[Length];
  uint64_t v12 = MEMORY[0x1E4F14390];
  while (2)
  {
    uint64_t v13 = 0;
    *(_DWORD *)uint64_t v33 = -1431655766;
    unint64_t v14 = v11 + 3;
    uint64_t v15 = v33;
    while (1)
    {
      unint64_t v16 = &v11[v13];
      int v17 = v11[v13 + 3];
      if (!v11[v13 + 3] || v17 == 47) {
        break;
      }
      unsigned __int8 v18 = v11[v13 + 3];
      if ((char)v17 < 0)
      {
        int v19 = __maskrune((char)v17, 0x4000uLL);
        unsigned __int8 v18 = v16[3];
        if (v19)
        {
LABEL_15:
          if ((v18 & 0x80) != 0 || (*(_DWORD *)(v12 + 4 * v18 + 60) & 0x400) == 0) {
            goto LABEL_23;
          }
          goto LABEL_21;
        }
      }
      else if ((*(_DWORD *)(v12 + 4 * (char)v17 + 60) & 0x4000) != 0)
      {
        goto LABEL_15;
      }
      if ((v18 & 0x80) != 0 || (*(_DWORD *)(v12 + 4 * v18 + 60) & 0x400) == 0) {
        break;
      }
LABEL_21:
      if (v15 - v33 <= 2) {
        *v15++ = v18;
      }
LABEL_23:
      ++v13;
      ++v14;
    }
    char *v15 = 0;
    if (!v33[0])
    {
      if (v13 == -3) {
        __int16 v24 = v11 + 1;
      }
      else {
        __int16 v24 = v11;
      }
      long long v20 = &v24[v13 + 3];
LABEL_41:
      int v11 = strnstr(v20, "dup", v30 - (UInt8 *)v20);
      if (!v11) {
        goto LABEL_42;
      }
      continue;
    }
    break;
  }
  long long v20 = v16 + 3;
  if (v16[3] != 47)
  {
    uint64_t v21 = 0;
    if (!v16[3]) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
  uint64_t v21 = (uint64_t)&v11[v13 + 4];
  do
  {
    unsigned int v22 = v14[1];
    if ((v22 & 0x80000000) != 0) {
      int v23 = __maskrune(v22, 0x4000uLL);
    }
    else {
      int v23 = *(_DWORD *)(v12 + 4 * v22 + 60) & 0x4000;
    }
    ++v14;
  }
  while (!v23);
  long long v20 = v14;
  if (*v14) {
LABEL_38:
  }
    *v20++ = 0;
LABEL_39:
  unsigned __int16 v25 = atoi_l(v33, 0);
  if ((v25 & 0xFF00) == 0)
  {
    v34[v25] = v21;
    goto LABEL_41;
  }
LABEL_4:
  uint64_t v7 = 0;
LABEL_5:
  CFRelease(Mutable);
  unsigned __int16 v4 = v31;
LABEL_7:
  free(v4);
  return v7;
}

void sub_1B5342494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
}

uint64_t TType1Scaler::TType1Scaler(void *a1, uint64_t a2)
{
  if (TType1Scaler::GetType1Scaler(void)::once != -1) {
    dispatch_once(&TType1Scaler::GetType1Scaler(void)::once, &__block_literal_global_9);
  }
  uint64_t result = TConcreteFontScaler::TConcreteFontScaler((uint64_t)a1, a2, TType1Scaler::sProtocol);
  *a1 = &unk_1F0DD90E0;
  return result;
}

void ___ZN12TType1Scaler14GetType1ScalerEv_block_invoke()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  memcpy(__dst, "/System/Library/PrivateFrameworks/FontServices.framework/lib", sizeof(__dst));
  strlcat(__dst, "Type1Scaler", 0x400uLL);
  strlcat(__dst, ".dylib", 0x400uLL);
  CFAllocatorRef v0 = dlopen(__dst, 5);
  if (v0)
  {
    uint64_t v1 = (uint64_t (*)(void))dlsym(v0, "Type1ScalerOpen");
    if (v1)
    {
      uint64_t v2 = *(void *)(v1() + 72);
      TType1Scaler::sProtocol = v2;
      goto LABEL_6;
    }
  }
  else
  {
    unsigned __int16 v3 = dlerror();
    syslog(3, "Loading lib%s.dylib: %s", "Type1Scaler", v3);
  }
  uint64_t v2 = TType1Scaler::sProtocol;
LABEL_6:
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 1;
  }
}

BOOL TType1Scaler::GetType1Encoding(TType1Scaler *this, unsigned __int16 *a2)
{
  uint64_t v2 = *(unsigned int (**)(void, unsigned __int16 *, char *))(TType1Scaler::sProtocol + 200);
  BOOL result = 0;
  if (v2)
  {
    char v4 = -86;
    if (!v2(*((void *)this + 9), a2, &v4)) {
      return 1;
    }
  }
  return result;
}

void TScalerStrike::TScalerStrike(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, long long *a5)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)a1 = &unk_1F0DD8DA8;
  *(_DWORD *)(a1 + 72) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  long long v10 = *a5;
  long long v11 = a5[1];
  long long v12 = a5[2];
  long long v13 = *(long long *)((char *)a5 + 44);
  *(void *)(a1 + 136) = 0;
  unint64_t v14 = (void **)(a1 + 136);
  *(_OWORD *)(a1 + 120) = v13;
  *(_OWORD *)(a1 + 108) = v12;
  *(_OWORD *)(a1 + 92) = v11;
  *(_OWORD *)(a1 + 76) = v10;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 24) = a3;
  if (!a3) {
    goto LABEL_11;
  }
  uint64_t v15 = a3;
  unint64_t v16 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(a3);
  unsigned __int8 v18 = &v16[8 * v17];
  bzero(v16, 8 * v15);
  int v19 = &v16[8 * v15];
  uint64_t v21 = *(char **)(a1 + 136);
  long long v20 = *(char **)(a1 + 144);
  if (v20 != v21)
  {
    do
    {
      uint64_t v22 = *((void *)v20 - 1);
      v20 -= 8;
      *((void *)v16 - 1) = v22;
      v16 -= 8;
    }
    while (v20 != v21);
    long long v20 = (char *)*v14;
  }
  *(void *)(a1 + 136) = v16;
  *(void *)(a1 + 144) = v19;
  *(void *)(a1 + 152) = v18;
  if (v20)
  {
    operator delete(v20);
    unint64_t v16 = (char *)*v14;
  }
  *(void *)(a1 + 32) = v16;
  uint64_t v23 = *(unsigned int *)(a1 + 24);
  if (v23)
  {
    uint64_t v24 = (uint64_t)(*(void *)(a1 + 144) - (void)v16) >> 3;
    unsigned __int16 v25 = (void *)(a4 + 8);
    int v26 = v16 + 4;
    while (v24)
    {
      int v27 = *((_DWORD *)v25 - 2);
      double v28 = *(double *)v25;
      v25 += 2;
      *(v26 - 1) = v27;
      *int v26 = vcvtd_n_s64_f64(v28, 0x10uLL);
      v26 += 2;
      --v24;
      if (!--v23) {
        goto LABEL_11;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_11:
    *(void *)(a1 + 40) = a1 + 76;
    *(void *)(a1 + 64) = a2;
  }
}

void sub_1B5342878(_Unwind_Exception *exception_object)
{
  char v4 = *v2;
  if (*v2)
  {
    v1[18] = v4;
    operator delete(v4);
  }
  *uint64_t v1 = &unk_1F0DD8968;
  __int16 v5 = (std::__shared_weak_count *)v1[2];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:fe180100](v5);
  }
  _Unwind_Resume(exception_object);
}

__n128 TScalerStrike::TScalerStrike(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)a1 = &unk_1F0DD8968;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)a1 = &unk_1F0DD9380;
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)a1 = &unk_1F0DD8DA8;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  long long v6 = *(_OWORD *)(a2 + 76);
  long long v7 = *(_OWORD *)(a2 + 92);
  long long v8 = *(_OWORD *)(a2 + 108);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 108) = v8;
  *(_OWORD *)(a1 + 92) = v7;
  *(_OWORD *)(a1 + 76) = v6;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = 0;
  __n128 result = *(__n128 *)(a2 + 136);
  *(__n128 *)(a1 + 136) = result;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a1 + 40) = a1 + 76;
  return result;
}

uint64_t TConcreteFontScaler::IsType1(TConcreteFontScaler *this)
{
  return 0;
}

uint64_t TConcreteFontScaler::GetATSCompatibleMetrics(TConcreteFontScaler *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8)
{
  *(void *)&long long v16 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v16 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v29[12] = v16;
  long long v28 = v16;
  *(_OWORD *)unsigned __int16 v29 = v16;
  long long v26 = v16;
  long long v27 = v16;
  v25[2] = v16;
  v25[3] = v16;
  v25[0] = v16;
  v25[1] = v16;
  if ((*(unsigned int (**)(void, char *, _OWORD *))(*((void *)this + 21) + 16))(*((unsigned int *)this + 44), (char *)this + 8, v25))
  {
    int v17 = 0;
    int v18 = 0;
    int v19 = 0;
    int v20 = 0;
    int v21 = 0;
    int v22 = 0;
    int v23 = 0;
  }
  else
  {
    int v17 = v26;
    int v18 = DWORD1(v26);
    int v19 = DWORD2(v26);
    int v20 = *(_DWORD *)&v29[8];
    int v21 = *(_DWORD *)&v29[12];
    int v22 = *(_DWORD *)&v29[16];
    int v23 = *(_DWORD *)&v29[20];
  }
  *a2 = v17;
  *a3 = v18;
  *a4 = v19;
  *a5 = v20;
  *a6 = v21;
  *a7 = v22;
  *a8 = v23;
  return (*(unsigned int (**)(void))(**((void **)this + 9) + 72))(*((void *)this + 9));
}

uint64_t TConcreteFontScaler::GetNativeCurveType(TConcreteFontScaler *this)
{
  return 0;
}

uint64_t TConcreteFontScaler::GetNeedsPix4Bitmap(TConcreteFontScaler *this)
{
  return 0;
}

uint64_t TTrueTypeScaler::GetNeedsPix4Bitmap(TTrueTypeScaler *this)
{
  return 0;
}

uint64_t TType1Scaler::IsType1(TType1Scaler *this)
{
  return 1;
}

uint64_t TType1Scaler::GetNativeCurveType(TType1Scaler *this)
{
  return 1;
}

uint64_t TType1Scaler::GetNeedsPix4Bitmap(TType1Scaler *this)
{
  return 1;
}

void std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    uint64_t v3 = (void *)(a1 + 2072);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 2072)) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

void std::vector<unsigned char,TInlineBufferAllocator<unsigned char,2048ul>>::__append(void *a1, size_t a2)
{
  long long v6 = a1 + 1;
  BOOL v4 = (char *)a1[1];
  uint64_t v5 = v6[1];
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      long long v12 = &v4[a2];
      bzero(v4, a2);
      BOOL v4 = v12;
    }
    a1[1] = v4;
  }
  else
  {
    long long v7 = &v4[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v9 = v5 - *a1;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10)
    {
      long long v11 = (void *)a1[259];
      if ((char *)v11 + v10 <= (char *)(a1 + 259)) {
        a1[259] = (char *)v11 + v10;
      }
      else {
        long long v11 = operator new(v10);
      }
    }
    else
    {
      long long v11 = 0;
    }
    long long v13 = &v7[(void)v11];
    unint64_t v14 = (char *)v11 + v10;
    uint64_t v15 = &v13[a2];
    bzero(v13, a2);
    int v17 = (char *)*a1;
    long long v16 = (char *)a1[1];
    if (v16 != (char *)*a1)
    {
      do
      {
        char v18 = *--v16;
        *--long long v13 = v18;
      }
      while (v16 != v17);
      long long v16 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v15;
    uint64_t v19 = a1[2];
    a1[2] = v14;
    if (v16)
    {
      int v20 = (char *)(a1 + 259);
      if (a1 + 3 <= (void *)v16 && v20 > v16)
      {
        if (v19 == *(void *)v20) {
          *(void *)int v20 = v16;
        }
      }
      else
      {
        operator delete(v16);
      }
    }
  }
}

void std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    v1[1] = v2;
    uint64_t v3 = v1 + 18;
    if (v1 + 3 <= v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (v1[2] == v1[18]) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(8 * a1);
}

void TConcreteFontScaler::~TConcreteFontScaler(TConcreteFontScaler *this)
{
  *(void *)this = &unk_1F0DD92A0;
  uint64_t v2 = *((void *)this + 23);
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C80BDFB0063);
  }
  *(void *)this = &unk_1F0DD9410;
  TScalerStrike::~TScalerStrike((TConcreteFontScaler *)((char *)this + 8));
}

void *std::vector<unsigned char,TInlineBufferAllocator<unsigned char,2048ul>>::vector(void *a1, size_t __sz, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  BOOL v4 = a1 + 3;
  a1[2] = 0;
  a1[259] = v4;
  if (__sz)
  {
    size_t v6 = __sz;
    if (&v4[__sz] <= (unsigned char *)a1 + 2072) {
      a1[259] = &v4[__sz];
    }
    else {
      BOOL v4 = operator new(__sz);
    }
    *a1 = v4;
    a1[1] = v4;
    long long v7 = &v4[v6];
    a1[2] = &v4[v6];
    do
    {
      *v4++ = *a3;
      --v6;
    }
    while (v6);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B5342E40(_Unwind_Exception *a1)
{
  std::vector<FixedPoint,TInlineBufferAllocator<FixedPoint,256ul>>::__destroy_vector::operator()[abi:fe180100](v1);
  _Unwind_Resume(a1);
}

void *std::vector<int,TInlineBufferAllocator<int,30ul>>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  a1[18] = a1 + 3;
  if (a2)
  {
    std::vector<int,TInlineBufferAllocator<int,30ul>>::__vallocate[abi:fe180100](a1, a2);
    size_t v6 = (_DWORD *)a1[1];
    long long v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B5342ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<int,TInlineBufferAllocator<int,30ul>>::__vallocate[abi:fe180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  __n128 result = (char *)TInlineBufferAllocator<unsigned int,30ul>::allocate((uint64_t)(a1 + 3), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * a2];
  return result;
}

uint64_t sbit_CalculateTransformSpaceNeeded(memoryContext *a1, unsigned int a2)
{
  long long v13 = (void *)0xAAAAAAAAAAAAAAAALL;
  unsigned int TableParts = ScalerGetTableParts(a1, a2, 0, 0, &v13, 0);
  if (TableParts <= 7) {
    goto LABEL_20;
  }
  if (*(_DWORD *)v13 == 512)
  {
    unsigned int v4 = bswap32(*((_DWORD *)v13 + 1));
    if (v4 >= (((unint64_t)TableParts - 8) / 0x30)) {
      unsigned int v4 = ((unint64_t)TableParts - 8) / 0x30;
    }
    if (v4)
    {
      LODWORD(v5) = 0;
      size_t v6 = (unsigned int *)((char *)v13 + 8);
      while (1)
      {
        unsigned int v7 = bswap32(*v6);
        if (v7 >= TableParts) {
          break;
        }
        unsigned int v8 = bswap32(v6[1]);
        unsigned int v9 = TableParts - v7;
        if (v8 >= TableParts) {
          unsigned int v10 = TableParts;
        }
        else {
          unsigned int v10 = v8;
        }
        if (v8 <= v9) {
          unsigned int v9 = v10;
        }
        if (v9 <= v5) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        v6 += 12;
        if (!--v4) {
          goto LABEL_19;
        }
      }
LABEL_20:
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
  }
  uint64_t v5 = 0;
LABEL_19:
  ScalerReleaseFontTable(a1, v13);
  return v5;
}

uint64_t sbit_FontMatch(memoryContext *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(v10 + 80);
  if ((*(unsigned char *)(v10 + 491) & 2) != 0 && *(_DWORD *)(*(void *)(a2 + 8) + 112)) {
    goto LABEL_10;
  }
  int v85 = (void *)0xAAAAAAAAAAAAAAAALL;
  if (M3x3Flags((_DWORD *)(v10 + 96)) == 6)
  {
    int v12 = *(_DWORD *)(v10 + 88);
    int v13 = v12;
  }
  else
  {
    int v13 = *(_DWORD *)(v10 + 132);
    int v12 = *(_DWORD *)(v10 + 148);
  }
  *(_DWORD *)(v11 + 36) = (v13 + 0x8000) >> 16;
  *(_DWORD *)(v11 + 40) = (v12 + 0x8000) >> 16;
  unsigned int TableParts = ScalerGetTableParts(a1, *(_DWORD *)(*(void *)(a2 + 8) + 164), 0, 0, &v85, 0);
  uint64_t v15 = (unsigned __int8 *)v85;
  if (*(_DWORD *)v85 != 512) {
    goto LABEL_9;
  }
  unsigned int v16 = *((_DWORD *)v85 + 1);
  if (!v16) {
    goto LABEL_9;
  }
  unint64_t v17 = bswap32(v16);
  if (48 * v17 + 8 > TableParts) {
    goto LABEL_9;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  int v20 = *(unsigned __int8 *)(v19 + 152);
  int v21 = *(_DWORD *)(v11 + 36);
  if (*(unsigned char *)(v19 + 152) && v21 >= *(__int16 *)(v19 + 140))
  {
    if (v17 <= 1) {
      int v33 = 1;
    }
    else {
      int v33 = v17;
    }
    uint64_t v34 = (char *)v85 + 54;
    while (v21 != *(v34 - 2) || *(_DWORD *)(v11 + 40) != *(v34 - 1) || *v34 != 1)
    {
      v34 += 48;
      if (!--v33) {
        goto LABEL_9;
      }
    }
    int v22 = v34 - 46;
    goto LABEL_97;
  }
  if (v21 == 1 && *(_DWORD *)(v11 + 40) == 1)
  {
    int v22 = (unsigned __int8 *)v85 + 48 * (v17 - 1) + 8;
    goto LABEL_97;
  }
  int v84 = (void *)0xAAAAAAAAAAAAAAAALL;
  int v23 = (char *)v85 + 54;
  unint64_t v24 = 1;
  do
  {
    if (*v23 == 1 && v21 == *(v23 - 2))
    {
      if (*(_DWORD *)(v11 + 40) == *(v23 - 1)) {
        int v22 = v23 - 46;
      }
      else {
        int v22 = 0;
      }
    }
    else
    {
      int v22 = 0;
    }
    if (v24 >= v17) {
      break;
    }
    ++v24;
    v23 += 48;
  }
  while (!v22);
  if (!v20 && !v22)
  {
    unsigned int FontTable = ScalerGetFontTable(a1, 1161974595, 0, &v84, 1, 0);
    if (v84)
    {
      long long v26 = (char *)v84 + FontTable;
      long long v27 = (char *)v84 + 8;
      if ((char *)v84 + 8 <= v26)
      {
        LODWORD(v28) = bswap32(*((_DWORD *)v84 + 1));
        unsigned __int16 v29 = &v27[28 * v28];
        if (v29 < v27 || v29 > v26)
        {
          if ((char *)v84 + 36 > v26) {
            goto LABEL_41;
          }
          unint64_t v28 = ((unint64_t)FontTable - 8) / 0x1C;
        }
        if (v28)
        {
          uint64_t v31 = v28;
          int v32 = (unsigned __int8 *)v84 + 35;
          while (*(_DWORD *)(v11 + 36) != *(v32 - 3) || *(_DWORD *)(v11 + 40) != *(v32 - 2))
          {
            v32 += 28;
            if (!--v31) {
              goto LABEL_41;
            }
          }
          int v71 = *(v32 - 1);
          int v72 = *v32;
          int v73 = v15 + 54;
          unint64_t v74 = 1;
          do
          {
            if (*v73 == 1 && *(v73 - 2) == v71)
            {
              if (*(v73 - 1) == v72) {
                int v22 = v73 - 46;
              }
              else {
                int v22 = 0;
              }
            }
            else
            {
              int v22 = 0;
            }
            if (v74 >= v17) {
              break;
            }
            ++v74;
            v73 += 48;
          }
          while (!v22);
          goto LABEL_42;
        }
      }
LABEL_41:
      int v22 = 0;
LABEL_42:
      ScalerReleaseFontTable(a1, v84);
      goto LABEL_53;
    }
    int v22 = 0;
  }
LABEL_53:
  if (!v20 && !v22)
  {
    int v35 = v15 + 54;
    unint64_t v36 = 1;
    do
    {
      if (*v35 == 1 && *(v35 - 2) == 2 * *(_DWORD *)(v11 + 36))
      {
        if (*(v35 - 1) == 2 * *(_DWORD *)(v11 + 40)) {
          int v22 = v35 - 46;
        }
        else {
          int v22 = 0;
        }
      }
      else
      {
        int v22 = 0;
      }
      if (v36 >= v17) {
        break;
      }
      ++v36;
      v35 += 48;
    }
    while (!v22);
  }
  if (!v20 && !v22)
  {
    int v37 = *(_DWORD *)(v11 + 36);
    int v38 = *(_DWORD *)(v11 + 40);
    if ((v38 | v37))
    {
      int v22 = 0;
    }
    else
    {
      int v39 = v37 / 2;
      int v40 = v38 / 2;
      signed int v41 = v15 + 54;
      unint64_t v42 = 1;
      do
      {
        if (*v41 == 1 && v39 == *(v41 - 2))
        {
          if (v40 == *(v41 - 1)) {
            int v22 = v41 - 46;
          }
          else {
            int v22 = 0;
          }
        }
        else
        {
          int v22 = 0;
        }
        if (v42 >= v17) {
          break;
        }
        ++v42;
        v41 += 48;
      }
      while (!v22);
    }
  }
  if (!v20 && !v22)
  {
    int v43 = *(_DWORD *)(v11 + 36);
    int v44 = *(_DWORD *)(v11 + 40);
    if (v17 <= 1) {
      uint64_t v45 = 1;
    }
    else {
      uint64_t v45 = v17;
    }
    int v46 = v15 + 53;
    int v47 = 0x7FFFFFFF;
    do
    {
      int v48 = *(v46 - 1);
      int v49 = v43 - v48;
      int v50 = *v46;
      if (v43 - v48 <= v44 - v50) {
        int v49 = v44 - v50;
      }
      if (v49 < 0) {
        int v49 = -v49;
      }
      if (v49 <= v47 && (!v22 || v49 < v47 || v43 < v48 && v44 < v50))
      {
        int v22 = v46 - 45;
        int v47 = v49;
      }
      v46 += 48;
      --v45;
    }
    while (v45);
  }
  if (!v22) {
    goto LABEL_9;
  }
  uint64_t v19 = *(void *)(a2 + 8);
LABEL_97:
  int v51 = bswap32(*(_DWORD *)v22);
  if (v51 < 0) {
    goto LABEL_9;
  }
  uint64_t v52 = *(void *)(a2 + 24);
  uint64_t v53 = *(void **)(v52 + 64);
  uint64_t v54 = *(int *)(v19 + 168);
  __int16 v55 = (char *)&v15[v51];
  unsigned int v56 = *((_DWORD *)v22 + 2);
  unsigned int v57 = bswap32(*((_DWORD *)v22 + 1));
  LODWORD(v58) = bswap32(v56);
  *(_DWORD *)(v11 + 56) = v58;
  if (v56)
  {
    int v59 = v55 + 8;
    if (v58 <= 1) {
      uint64_t v58 = 1;
    }
    else {
      uint64_t v58 = v58;
    }
    while (v59 <= (char *)&v15[v54] && v57 >= bswap32(*((_DWORD *)v59 - 1)))
    {
      v59 += 8;
      if (!--v58) {
        goto LABEL_105;
      }
    }
    goto LABEL_9;
  }
LABEL_105:
  if (v51 >= (int)v54) {
    goto LABEL_9;
  }
  int v60 = v22[44];
  *(_DWORD *)(v11 + 44) = v60;
  int v61 = v22[45];
  *(_DWORD *)(v11 + 48) = v61;
  if (!v60 || !v61) {
    goto LABEL_9;
  }
  *(_WORD *)(v11 + 84) = bswap32(*((unsigned __int16 *)v22 + 20)) >> 16;
  *(_WORD *)(v11 + 86) = bswap32(*((unsigned __int16 *)v22 + 21)) >> 16;
  *(_DWORD *)(v11 + 56) = bswap32(*((_DWORD *)v22 + 2));
  *(unsigned char *)(v11 + 92) = v22[47];
  int v62 = v57 + v51;
  unsigned int v63 = v54 - v51;
  size_t v64 = v62 <= (int)v54 ? v57 : v63;
  if (!v64 || v64 > *(_DWORD *)(v52 + 72) - *(_DWORD *)(v52 + 56))
  {
LABEL_9:
    ScalerReleaseFontTable(a1, v15);
LABEL_10:
    uint64_t result = 0;
    *(_DWORD *)(v11 + 44) = 0;
    *(_DWORD *)(v11 + 48) = 0;
    return result;
  }
  memmove(v53, v55, v64);
  int v65 = *(_DWORD *)(v11 + 44);
  int v66 = *(_DWORD *)(v11 + 48);
  int v67 = *(_DWORD *)(v11 + 4) / v65;
  *(int *)v11 /= v65;
  *(_DWORD *)(v11 + 4) = v67;
  int v68 = *(_DWORD *)(v11 + 16) / v66;
  *(int *)(v11 + 12) /= v66;
  *(_DWORD *)(v11 + 16) = v68;
  if (a3)
  {
    int v84 = 0;
    int v69 = *(unsigned __int8 *)(*(void *)(a2 + 24) + 488);
    int v70 = *(__int16 *)(*(void *)(a2 + 8) + 130) / v65;
    if (v69)
    {
      if (a4 || (ScalerGetFontTable(a1, 1986553185, 0, &v84, 1, 36), (int v77 = (unsigned __int16 *)v84) == 0))
      {
        *(_DWORD *)(a3 + 8) = (char)v22[29] << 16;
        *(_DWORD *)a3 = (char)v22[28] << 16;
        *(_DWORD *)(a3 + 20) = (char)v22[31] << 16;
        *(_DWORD *)(a3 + 16) = (char)v22[32] << 16;
        *(_DWORD *)(a3 + 24) = (char)v22[33] << 16;
        *(void *)(a3 + 36) = v22[30] << 16;
      }
      else
      {
        double v78 = (double)(__int16)v70 * 0.0000152587891;
        *(_DWORD *)a3 = vcvtd_n_s64_f64((double)((int)bswap32(*((unsigned __int16 *)v84 + 2)) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 8) = vcvtd_n_s64_f64((double)(((int)bswap32(v77[3]) >> 16) - ((int)bswap32(v77[4]) >> 16))* 0.0000152587891/ v78, 0x10uLL);
        *(_DWORD *)(a3 + 20) = vcvtd_n_s64_f64((double)((int)bswap32(v77[9]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 16) = vcvtd_n_s64_f64((double)((int)bswap32(v77[10]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 28) = 0;
        *(_DWORD *)(a3 + 24) = vcvtd_n_s64_f64((double)((int)bswap32(v77[11]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 36) = vcvtd_n_s64_f64((double)((int)bswap32(v77[4]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        *(_DWORD *)(a3 + 40) = vcvtd_n_s64_f64((double)((int)bswap32(v77[4]) >> 16) * 0.0000152587891 / v78, 0x10uLL);
        ScalerReleaseFontTable(a1, v77);
      }
      *(_DWORD *)(a3 + 44) = 0;
      *(_DWORD *)(a3 + 28) = 0;
      *(_DWORD *)(a3 + 32) = 0;
      int v79 = (_DWORD *)(a3 + 12);
      *(_DWORD *)(a3 + 4) = 0;
    }
    else
    {
      if (a4 || (ScalerGetFontTable(a1, 1751672161, 0, &v84, 1, 36), (uint64_t v80 = (unsigned __int16 *)v84) == 0))
      {
        if ((char)v22[16] < 1)
        {
          int v82 = v22[18];
          unsigned int v76 = ((-21846 * v82 + 10923) >> 17) + ((-21846 * v82 + 10923) >> 31);
          unsigned int v75 = (60082 * v82) >> 16;
        }
        else
        {
          unsigned int v75 = v22[16];
          unsigned int v76 = (char)v22[17];
        }
        *(_DWORD *)(a3 + 12) = v76 << 16;
        *(_DWORD *)(a3 + 4) = v75 << 16;
        *(_DWORD *)(a3 + 20) = (char)v22[19] << 16;
        *(_DWORD *)(a3 + 16) = (char)v22[20] << 16;
        *(_DWORD *)(a3 + 24) = (char)v22[21] << 16;
        *(_DWORD *)(a3 + 32) = v22[18] << 16;
        *(_DWORD *)(a3 + 44) = 0;
      }
      else
      {
        double v81 = (double)(__int16)v70 * 0.0000152587891;
        *(_DWORD *)(a3 + 4) = vcvtd_n_s64_f64((double)((int)bswap32(*((unsigned __int16 *)v84 + 2)) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 12) = vcvtd_n_s64_f64((double)(((int)bswap32(v80[3]) >> 16) - ((int)bswap32(v80[4]) >> 16))* 0.0000152587891/ v81, 0x10uLL);
        *(_DWORD *)(a3 + 20) = vcvtd_n_s64_f64((double)((int)bswap32(v80[9]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 16) = vcvtd_n_s64_f64((double)((int)bswap32(v80[10]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 28) = 0;
        *(_DWORD *)(a3 + 24) = vcvtd_n_s64_f64((double)((int)bswap32(v80[11]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 32) = vcvtd_n_s64_f64((double)(bswap32(v80[5]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        *(_DWORD *)(a3 + 44) = vcvtd_n_s64_f64((double)((int)bswap32(v80[4]) >> 16) * 0.0000152587891 / v81, 0x10uLL);
        ScalerReleaseFontTable(a1, v80);
      }
      *(_DWORD *)(a3 + 36) = 0;
      *(_DWORD *)(a3 + 40) = 0;
      *(_DWORD *)(a3 + 28) = 0;
      int v79 = (_DWORD *)(a3 + 8);
      *(_DWORD *)a3 = 0;
    }
    _DWORD *v79 = 0;
    if (a5)
    {
      int v83 = M3x3Flags((_DWORD *)v11);
      M3x3Mul((int *)v11, v83, (int32x2_t *)a3, (const int *)6);
    }
    *(_DWORD *)(a3 + 48) = *(_DWORD *)v11;
    *(_DWORD *)(a3 + 52) = *(_DWORD *)(v11 + 16);
    *(_DWORD *)(a3 + 56) = *(_DWORD *)(v11 + 44);
  }
  ScalerReleaseFontTable(a1, v15);
  return 1;
}

BOOL IsScalingSkewingTransform(_DWORD *a1)
{
  return (((*a1 + 8) & 0xFFFFFFF0) != 0x10000 || ((a1[4] + 8) & 0xFFFFFFF0) != 0x10000)
      && a1[3]
      && (a1[8] + 8) >> 4 == 0x4000000
      && !a1[1]
      && !a1[2]
      && !a1[6]
      && !a1[7]
      && a1[5] == 0;
}

BOOL IsDownScaleTransform(_DWORD *a1)
{
  unsigned int v1 = *a1 + 8;
  if (HIWORD(v1)) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = (v1 & 0xFFFFFFF0) == ((a1[4] + 8) & 0xFFFFFFF0);
  }
  return v2
      && (a1[8] + 8) >> 4 == 0x4000000
      && !a1[3]
      && !a1[1]
      && !a1[2]
      && !a1[6]
      && !a1[7]
      && a1[5] == 0;
}

void DownScaleBitmap(uint64_t *a1, uint64_t a2)
{
  int v32 = *((_DWORD *)a1 + 6);
  int v4 = *((_DWORD *)a1 + 4);
  int v5 = *((_DWORD *)a1 + 7) - *((_DWORD *)a1 + 5);
  int v6 = *(_DWORD *)(a2 + 24);
  int v7 = *(_DWORD *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 28) - *(_DWORD *)(a2 + 20);
  unsigned int v9 = *(unsigned int **)a2;
  uint64_t v10 = *a1;
  bzero(*(void **)a2, (*(_DWORD *)(a2 + 32) * (__int16)(*(_WORD *)(a2 + 28) - *(_WORD *)(a2 + 20))));
  if (v5 << 16 >= 1)
  {
    int v11 = 0;
    int v12 = 0;
    int v13 = 0;
    int v14 = vcvtd_n_s64_f64((double)(v8 << 16) * 0.0000152587891 / ((double)(v5 << 16) * 0.0000152587891), 0x10uLL);
    int v15 = (v32 - v4) << 16;
    int v16 = vcvtd_n_s64_f64((double)((v6 - v7) << 16) * 0.0000152587891 / ((double)v15 * 0.0000152587891), 0x10uLL);
    int v17 = (__int16)(v32 - v4);
    int v18 = (unsigned __int16)v5;
    if (v14 >= 0) {
      int v19 = v14;
    }
    else {
      int v19 = v14 + 1;
    }
    int v20 = v19 >> 1;
    if (v16 >= 0) {
      int v21 = v16;
    }
    else {
      int v21 = v16 + 1;
    }
    int v22 = v21 >> 1;
    if (v17 <= 1) {
      int v17 = 1;
    }
    if ((unsigned __int16)v5 <= 1u) {
      int v18 = 1;
    }
    int v23 = v9;
    do
    {
      if (v15 >= 1)
      {
        unsigned int v24 = 0;
        unsigned int v25 = 128;
        int v26 = v17;
        long long v27 = v23;
        LOBYTE(v28) = 0x80;
        int v29 = v22;
        do
        {
          if ((v28 & *(unsigned char *)(v10 + v24)) != 0) {
            *(unsigned char *)v27 |= v25;
          }
          v29 += v16;
          if (v29 >= 0x10000)
          {
            if (v25 <= 1)
            {
              long long v27 = (unsigned int *)((char *)v27 + 1);
              if ((++v13 & 3) == 0)
              {
                unsigned int *v9 = bswap32(*v9);
                ++v9;
                int v12 = 1;
              }
              unsigned int v25 = 128;
            }
            else
            {
              v25 >>= 1;
            }
            v29 -= 0x10000;
          }
          int v28 = v28 >> 1;
          if (!v28)
          {
            LOBYTE(v28) = 0x80;
            ++v24;
          }
          --v26;
        }
        while (v26);
      }
      v20 += v14;
      int v30 = v20 - 0x10000;
      if (v20 >= 0x10000)
      {
        uint64_t v31 = *(unsigned int *)(a2 + 32);
        if (!v12) {
          unsigned int *v9 = bswap32(*v9);
        }
        int v13 = 0;
        int v12 = 0;
        int v23 = (unsigned int *)((char *)v23 + v31);
        int v20 = v30;
        unsigned int v9 = v23;
      }
      v10 += *((unsigned int *)a1 + 8);
      ++v11;
    }
    while (v11 != v18);
  }
}

uint64_t SkewBitmap(uint64_t result, int a2, uint64_t a3, int a4, int a5)
{
  if (a2 == 0x80000000)
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  unint64_t v5 = *(unsigned int *)(a3 + 32);
  unint64_t v6 = v5 >> 2;
  int v7 = ((*(_DWORD *)(a3 + 16) - *(_DWORD *)(a3 + 24)) << 16) + (*(_DWORD *)(a3 + 32) >> 2 << 21);
  if (v7 == 0x200000) {
    int v8 = 0;
  }
  else {
    int v8 = -1 << SBYTE2(v7);
  }
  if (a5 >= 1)
  {
    int v9 = *(_DWORD *)(a3 + 28) - a4;
    int v10 = v9 - a5;
    unint64_t v11 = *(unsigned int *)(result + 32);
    int v12 = (unsigned int *)(*(void *)result + (v11 * a4));
    uint64_t v13 = *(void *)a3 + (v5 * a4);
    uint64_t v14 = 4 * v6;
    uint64_t v15 = 4 * v6 - 4;
    uint64_t result = v13 + 4;
    do
    {
      int v16 = v9 * a2 + 0x8000;
      unsigned int v17 = v16 >> 16;
      unint64_t v18 = v13 + v14;
      unint64_t v19 = (unint64_t)&v12[v11 >> 2];
      if (v9 * a2 > -32769)
      {
        uint64_t v30 = v17 >> 5;
        int v29 = &v12[v30];
        int v31 = HIWORD(v16) & 0x1F;
        unsigned int v23 = v5 > 3 && v30 < (v11 >> 2);
        if (v31)
        {
          if (v23)
          {
            unint64_t v33 = 0;
            unsigned int v23 = 0;
            uint64_t v34 = &v12[v30];
            do
            {
              if (v15 == v33)
              {
                unsigned int v35 = bswap32(*(_DWORD *)(v18 - 4)) & v8;
                v34[v33 / 4] = (v35 >> v31) | v23;
              }
              else
              {
                v34[v33 / 4] = (bswap32(*(_DWORD *)(v13 + v33)) >> v31) | v23;
                unsigned int v35 = bswap32(*(_DWORD *)(v13 + v33));
              }
              unsigned int v23 = v35 << (32 - v31);
              v33 += 4;
            }
            while (v33 + v13 < v18 && (unint64_t)&v34[v33 / 4] < v19);
LABEL_53:
            int v29 = &v12[v30 + v33 / 4];
          }
        }
        else if (v23)
        {
          unint64_t v33 = 0;
          signed int v41 = &v12[v30];
          do
          {
            if (v15 == v33) {
              unsigned int v42 = bswap32(*(_DWORD *)(v18 - 4)) & v8;
            }
            else {
              unsigned int v42 = bswap32(*(_DWORD *)(v13 + v33));
            }
            v41[v33 / 4] = v42;
            unint64_t v43 = (unint64_t)&v41[v33 / 4 + 1];
            v33 += 4;
          }
          while (v33 + v13 < v18 && v43 < v19);
          unsigned int v23 = 0;
          goto LABEL_53;
        }
      }
      else
      {
        int v20 = -v17;
        uint64_t v21 = (uint64_t)(v20 << 16) >> 21;
        unsigned int v23 = (__int16)v20 >> 5 < (int)v6 && v11 > 3;
        if ((v20 & 0x1F) != 0)
        {
          if (v23)
          {
            unint64_t v24 = 0;
            uint64_t v25 = result + 4 * v21;
            uint64_t v26 = v15 - 4 * v21;
            while (v26 != v24)
            {
              unint64_t v27 = v25 + v24;
              v12[v24 / 4] = (bswap32(*(_DWORD *)(v25 + v24 - 4)) << v20) | (bswap32(*(_DWORD *)(v25 + v24)) >> 1 >> ~(_BYTE)v20);
              unint64_t v28 = (unint64_t)&v12[v24 / 4 + 1];
              v24 += 4;
              if (v27 >= v18 || v28 >= v19)
              {
                unsigned int v23 = 0;
                int v29 = &v12[v24 / 4];
                goto LABEL_55;
              }
            }
            unsigned int v23 = 0;
            v12[v24 / 4] = (bswap32(*(_DWORD *)(v18 - 4)) & v8) << (v20 & 0x1F);
            int v29 = &v12[v24 / 4 + 1];
            goto LABEL_55;
          }
        }
        else if (v23)
        {
          unint64_t v36 = 0;
          uint64_t v37 = v13 + 4 * v21;
          uint64_t v38 = v15 - 4 * v21;
          do
          {
            if (v38 == v36) {
              unsigned int v39 = bswap32(*(_DWORD *)(v18 - 4)) & v8;
            }
            else {
              unsigned int v39 = bswap32(*(_DWORD *)(v37 + v36));
            }
            v12[v36 / 4] = v39;
            unint64_t v40 = (unint64_t)&v12[v36 / 4 + 1];
            v36 += 4;
          }
          while (v36 + v37 < v18 && v40 < v19);
          unsigned int v23 = 0;
          int v29 = &v12[v36 / 4];
          goto LABEL_55;
        }
        int v29 = v12;
      }
LABEL_55:
      if ((unint64_t)v29 < v19) {
        *int v29 = v23;
      }
      --v9;
      result += v14;
      v12 += v11 >> 2;
      uint64_t v13 = v18;
    }
    while (v9 > v10);
  }
  return result;
}

BOOL IsSkewingTransform(_DWORD *a1)
{
  return ((*a1 + 8) & 0xFFFFFFF0) == 0x10000
      && ((a1[4] + 8) & 0xFFFFFFF0) == 0x10000
      && (a1[8] + 8) >> 4 == 0x4000000
      && a1[3]
      && !a1[1]
      && !a1[2]
      && !a1[6]
      && !a1[7]
      && a1[5] == 0;
}

void sbit_GetBitMapData(uint64_t a1, _DWORD *a2, void *a3, void *a4, int a5, int a6)
{
  int v9 = a3;
  unsigned int v130 = -1431655766;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)int v128 = v12;
  long long v129 = v12;
  uint64_t v13 = *(int **)(*(void *)(a1 + 24) + 80);
  uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8);
  *(void *)(*(void *)(a1 + 32) + 48) = v14;
  if (a3) {
    *a3 = v14;
  }
  uint64_t v127 = (void *)0xAAAAAAAAAAAAAAAALL;
  ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(void *)(a1 + 8) + 172), v13[16], v13[15], &v127, 0);
  uint64_t v15 = *(void *)(a1 + 32);
  unsigned int v16 = *(unsigned __int8 *)(v15 + 125);
  unsigned int v17 = *(char *)(v15 + 127);
  int v18 = *(unsigned __int8 *)(v15 + 124);
  LODWORD(v129) = 0;
  DWORD1(v129) = v17 - v18;
  unsigned int v130 = ((v16 + 31) >> 3) & 0x3C;
  *((void *)&v129 + 1) = __PAIR64__(v17, v16);
  v128[0] = 0;
  uint64_t v119 = ((v16 + 31) >> 3) & 0x3CLL;
  if (v18 * v119)
  {
    int v19 = a6;
    int v118 = a5;
    int v20 = (unsigned int *)v127;
    uint64_t v21 = v13[16];
    uint64_t v22 = *(unsigned int *)(*(void *)(a1 + 8) + 176);
    signed int v114 = v18 * v119;
    unsigned int v23 = ScalerNewScratch(*(memoryContext **)a1, v18 * (int)v119, 1);
    unint64_t v24 = (unsigned int *)v23;
    v128[0] = v23;
    uint64_t v25 = v20;
    uint64_t v26 = (char *)v20 + v22 - v21;
    long long v116 = v13;
    long long v117 = a2;
    long long v115 = v9;
    switch(*((unsigned char *)v13 + 94))
    {
      case 1:
        uint64_t v27 = *(void *)(a1 + 32);
        uint64_t v28 = *(unsigned __int8 *)(v27 + 125);
        unint64_t v29 = (unint64_t)(v28 + 7) >> 3;
        if (v13[16] + v29 * *(unsigned __int8 *)(v27 + 124) > *(_DWORD *)(*(void *)(a1 + 8) + 176)) {
          goto LABEL_99;
        }
        if (*(unsigned char *)(v27 + 124))
        {
          LOWORD(v30) = 0;
          int v31 = (char *)v25 + 5;
          if (v29 <= 1) {
            uint64_t v32 = 1;
          }
          else {
            uint64_t v32 = v29;
          }
          do
          {
            if (v28)
            {
              for (uint64_t i = 0; i != v32; ++i)
                *((unsigned char *)v24 + i) = v31[i];
              uint64_t v27 = *(void *)(a1 + 32);
            }
            v31 += v29;
            unint64_t v24 = (unsigned int *)((char *)v24 + v119);
            unsigned int v30 = (unsigned __int16)(v30 + 1);
          }
          while (v30 < *(unsigned __int8 *)(v27 + 124));
        }
        goto LABEL_58;
      case 2:
        uint64_t v34 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v34 + 124))
        {
          LOWORD(v35) = 0;
          int v36 = 0;
          int v37 = *(unsigned __int8 *)(v34 + 125);
          do
          {
            uint64_t v38 = v24;
            MoveBitsSmall((unsigned int *)((char *)v25 + 5), v26, v36, v24, v37);
            uint64_t v39 = *(void *)(a1 + 32);
            int v37 = *(unsigned __int8 *)(v39 + 125);
            v36 += v37;
            unint64_t v24 = (unsigned int *)((char *)v38 + v119);
            unsigned int v35 = (unsigned __int16)(v35 + 1);
          }
          while (v35 < *(unsigned __int8 *)(v39 + 124));
        }
        goto LABEL_58;
      case 4:
        uint64_t v111 = (unsigned int *)v23;
        int v112 = v19;
        CFDictionaryRef v113 = a4;
        unsigned int v40 = (*(unsigned __int8 *)(*(void *)(a1 + 32) + 124)
             * *(unsigned __int8 *)(*(void *)(a1 + 32) + 125)
             + 31) >> 3;
        long long v125 = (void *)0xAAAAAAAAAAAAAAAALL;
        unint64_t v126 = (void *)0xAAAAAAAAAAAAAAAALL;
        signed int v41 = (unsigned int *)ScalerNewScratch(*(memoryContext **)a1, v40, 1);
        ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(void *)(a1 + 8) + 172), v13[17], v13[18], &v126, 0);
        ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(void *)(a1 + 8) + 172), v13[19], v13[20], &v125, 0);
        int v42 = 0;
        __int16 v123 = 0;
        int v43 = v13[15];
        int v44 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 124) * *(unsigned __int8 *)(*(void *)(a1 + 32) + 125);
        uint64_t v45 = (char *)v126 + v13[18];
        int v46 = (char *)v125 + v13[20];
        *(void *)&long long v140 = MEMORY[0x1E4F143A8];
        *((void *)&v140 + 1) = 0x40000000;
        *(void *)&long long v141 = ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke;
        *((void *)&v141 + 1) = &__block_descriptor_tmp_6;
        __int16 v147 = 0;
        unint64_t v142 = v126;
        uint64_t v143 = v125;
        unsigned int v121 = (unsigned __int16 *)v125;
        int v144 = v45;
        BOOL v145 = v46;
        int v146 = v126;
        *(void *)&long long v136 = MEMORY[0x1E4F143A8];
        *((void *)&v136 + 1) = 0x40000000;
        *(void *)&long long v137 = ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke_2;
        *((void *)&v137 + 1) = &__block_descriptor_tmp_2;
        int v47 = v25;
        int v138 = v25;
        int v139 = v43;
        v131[0] = MEMORY[0x1E4F143A8];
        v131[1] = 0x40000000;
        int v132 = ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke_3;
        int v133 = &__block_descriptor_tmp_4_0;
        long long v134 = v41;
        unsigned int v110 = v40;
        unsigned int v135 = v40;
        unint64_t v122 = (unsigned __int16 *)v126;
        int v48 = v126;
        break;
      case 5:
        uint64_t v66 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v66 + 124))
        {
          LOWORD(v67) = 0;
          int v68 = 0;
          int v69 = *(unsigned __int8 *)(v66 + 125);
          do
          {
            int v70 = v24;
            MoveBitsSmall(v25, v26, v68, v24, v69);
            uint64_t v71 = *(void *)(a1 + 32);
            int v69 = *(unsigned __int8 *)(v71 + 125);
            v68 += v69;
            unint64_t v24 = (unsigned int *)((char *)v70 + v119);
            unsigned int v67 = (unsigned __int16)(v67 + 1);
          }
          while (v67 < *(unsigned __int8 *)(v71 + 124));
        }
        goto LABEL_58;
      case 6:
        uint64_t v72 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v72 + 124))
        {
          LOWORD(v73) = 0;
          unint64_t v74 = *(unsigned __int8 *)(v72 + 125) + 7;
          unint64_t v75 = v74 >> 3;
          unsigned int v76 = v25 + 2;
          int v77 = v74 & 0x1F8;
          do
          {
            double v78 = v24;
            MoveBitsSmall(v76, v26, 0, v24, v77);
            unsigned int v76 = (unsigned int *)((char *)v76 + v75);
            unint64_t v24 = (unsigned int *)((char *)v78 + v119);
            unsigned int v73 = (unsigned __int16)(v73 + 1);
          }
          while (v73 < *(unsigned __int8 *)(*(void *)(a1 + 32) + 124));
        }
        goto LABEL_58;
      case 7:
        uint64_t v79 = *(void *)(a1 + 32);
        if (*(unsigned char *)(v79 + 124))
        {
          LOWORD(v80) = 0;
          int v81 = 0;
          int v82 = *(unsigned __int8 *)(v79 + 125);
          do
          {
            int v83 = v24;
            MoveBitsSmall(v25 + 2, v26, v81, v24, v82);
            uint64_t v84 = *(void *)(a1 + 32);
            int v82 = *(unsigned __int8 *)(v84 + 125);
            v81 += v82;
            unint64_t v24 = (unsigned int *)((char *)v83 + v119);
            unsigned int v80 = (unsigned __int16)(v80 + 1);
          }
          while (v80 < *(unsigned __int8 *)(v84 + 124));
        }
        goto LABEL_58;
      case 8:
      case 9:
LABEL_99:
        exception = __cxa_allocate_exception(2uLL);
        _WORD *exception = 5;
        __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
      default:
        goto LABEL_59;
    }
    do
    {
      int v120 = v47;
      char v49 = *(unsigned char *)((uint64_t (*)(long long *))v137)(&v136);
      int v50 = 458752;
      do
      {
        int v51 = v50;
        uint64_t v52 = (unsigned __int16 *)((uint64_t (*)(long long *, void *))v141)(&v140, v48);
        int v53 = (int)bswap32(*v52) >> 16;
        if (v53 < 0)
        {
          unsigned int v55 = v53 & 0x7FFF;
          if (v123)
          {
            __int16 v123 = v55 > 0x3F;
            if (v55 <= 0x3F) {
              uint64_t v54 = v122;
            }
            else {
              uint64_t v54 = v121;
            }
            while ((__int16)v55 >= 1)
            {
              LOWORD(v55) = v55 - 1;
              unsigned int v56 = (unsigned char *)v132((uint64_t)v131, (unint64_t)v41 + ((__int16)v42 >> 3));
              *v56 |= 0x80u >> (v42 & 7);
              int v57 = v42 + 1;
              if (v44 <= (__int16)v42++)
              {
                int v42 = v57;
                break;
              }
            }
          }
          else
          {
            v42 += v55;
            __int16 v123 = v55 < 0x40;
            if (v55 >= 0x40) {
              uint64_t v54 = v122;
            }
            else {
              uint64_t v54 = v121;
            }
          }
        }
        else
        {
          uint64_t v54 = v52;
        }
        if (v49 < 0) {
          uint64_t v54 = (unsigned __int16 *)((char *)v54 + (__int16)(bswap32(*v54) >> 16));
        }
        v49 *= 2;
        int v48 = v54 + 1;
        int v50 = v51 - 0x10000;
      }
      while (v51);
      int v47 = (unsigned int *)((char *)v120 + 1);
    }
    while (v44 > (__int16)v42);
    uint64_t v59 = *(void *)(a1 + 32);
    int v60 = v111;
    if (*(unsigned char *)(v59 + 124))
    {
      LOWORD(v61) = 0;
      int v62 = 0;
      int v63 = *(unsigned __int8 *)(v59 + 125);
      do
      {
        size_t v64 = v60;
        MoveBitsSmall(v41, (char *)v41 + v110, v62, v60, v63);
        uint64_t v65 = *(void *)(a1 + 32);
        int v63 = *(unsigned __int8 *)(v65 + 125);
        v62 += v63;
        int v60 = (unsigned int *)((char *)v64 + v119);
        unsigned int v61 = (unsigned __int16)(v61 + 1);
      }
      while (v61 < *(unsigned __int8 *)(v65 + 124));
    }
    ScalerReleaseFontTable(*(memoryContext **)a1, v126);
    ScalerReleaseFontTable(*(memoryContext **)a1, v125);
    ScalerDisposeBlock(*(memoryContext **)a1, (char *)v41, -1);
    a4 = v113;
    int v19 = v112;
LABEL_58:
    unint64_t v24 = (unsigned int *)v128[0];
    uint64_t v13 = v116;
    a2 = v117;
    int v9 = v115;
LABEL_59:
    if (!v9)
    {
      a5 = v118;
      a6 = v19;
      goto LABEL_90;
    }
    a5 = v118;
    a6 = v19;
    if (v24 && *(void *)v9)
    {
      LODWORD(v142) = -1431655766;
      *(void *)&long long v85 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v85 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v140 = v85;
      long long v141 = v85;
      int v86 = v9[7];
      int v87 = v86 - v9[5];
      int v88 = a2[1];
      int v89 = a2[2];
      int v90 = v86 - v88;
      BOOL v91 = __OFSUB__(v88, v89);
      int v92 = v88 - v89;
      if ((v92 < 0) ^ v91 | (v92 == 0)) {
        int v90 = 0;
      }
      int v124 = v90;
      if ((v92 < 0) ^ v91 | (v92 == 0)) {
        int v93 = v87;
      }
      else {
        int v93 = v92 + 1;
      }
      if (IsScalingSkewingTransform(v13))
      {
        int v94 = v13[3];
        void v13[3] = 0;
        if (IsDownScaleTransform(v13))
        {
          long long v95 = *((_OWORD *)v9 + 1);
          long long v136 = *(_OWORD *)v9;
          long long v137 = v95;
          int v96 = v13;
          int v97 = v9[8];
          ComputeDestBitmap(v96, (uint64_t)v128, (uint64_t)v9);
          v9[8] = v97;
          DownScaleBitmap((uint64_t *)v128, (uint64_t)v9);
          long long v98 = v137;
          *(_OWORD *)int v9 = v136;
          *((_OWORD *)v9 + 1) = v98;
          v9[8] = v97;
          uint64_t v13 = v96;
        }
        else
        {
          InvertMapping3x3((uint64_t)&v140, v13);
          TransformScalerBitmap((int *)&v140, (uint64_t *)v128, (uint64_t)v9, (__int16)v124, (__int16)v93);
        }
        void v13[3] = v94;
        int v100 = v13;
        double v101 = (double)v94 * 0.0000152587891 / ((double)v13[4] * 0.0000152587891);
        signed int v102 = (v9[7] - v9[5]) * v9[8];
        if (v102 <= v114)
        {
          uint64_t v104 = (size_t *)v128[0];
          long long v105 = *((_OWORD *)v9 + 1);
          *(_OWORD *)int v128 = *(_OWORD *)v9;
          long long v129 = v105;
          unsigned int v130 = v9[8];
        }
        else
        {
          ScalerDisposeBlock(*(memoryContext **)a1, (char *)v128[0], -1);
          long long v103 = *((_OWORD *)v9 + 1);
          *(_OWORD *)int v128 = *(_OWORD *)v9;
          long long v129 = v103;
          unsigned int v130 = v9[8];
          uint64_t v104 = ScalerNewScratch(*(memoryContext **)a1, v102, 0);
        }
        a6 = v19;
        int v106 = vcvtd_n_s64_f64(v101, 0x10uLL);
        v128[0] = v104;
        if (v102 >= 1)
        {
          int v107 = 0;
          do
          {
            *((unsigned char *)v128[0] + (unsigned __int16)v107) = *(unsigned char *)(*(void *)v9 + (unsigned __int16)v107);
            ++v107;
          }
          while (v102 > (unsigned __int16)v107);
        }
        if (*(unsigned char *)(*(void *)(a1 + 24) + 488))
        {
          int v108 = DWORD1(v129);
          HIDWORD(v129) -= DWORD1(v129);
          DWORD1(v129) = 0;
          SkewBitmap((uint64_t)v9, v106, (uint64_t)v128, v124, v93);
          HIDWORD(v129) += v108;
          DWORD1(v129) += v108;
        }
        else
        {
          SkewBitmap((uint64_t)v9, v106, (uint64_t)v128, v124, v93);
        }
        uint64_t v13 = v100;
        a5 = v118;
      }
      else if (IsSkewingTransform(v13))
      {
        if (*(unsigned char *)(*(void *)(a1 + 24) + 488))
        {
          if (DWORD1(v129) + HIDWORD(v129) < 0 != __OFADD__(DWORD1(v129), HIDWORD(v129))) {
            int v99 = DWORD1(v129) + HIDWORD(v129) + 1;
          }
          else {
            int v99 = DWORD1(v129) + HIDWORD(v129);
          }
          HIDWORD(v129) -= v99 >> 1;
          DWORD1(v129) -= v99 >> 1;
          SkewBitmap((uint64_t)v9, v13[3], (uint64_t)v128, v124, v93);
          HIDWORD(v129) += v99 >> 1;
          DWORD1(v129) += v99 >> 1;
        }
        else
        {
          SkewBitmap((uint64_t)v9, v13[3], (uint64_t)v128, v124, v93);
        }
      }
      else if (IsDownScaleTransform(v13))
      {
        DownScaleBitmap((uint64_t *)v128, (uint64_t)v9);
      }
      else
      {
        InvertMapping3x3((uint64_t)&v140, v13);
        TransformScalerBitmap((int *)&v140, (uint64_t *)v128, (uint64_t)v9, (__int16)v124, (__int16)v93);
      }
    }
  }
  else
  {
    if (!v9)
    {
      unint64_t v24 = 0;
      goto LABEL_90;
    }
    bzero(v9, 0x24uLL);
  }
  unint64_t v24 = (unsigned int *)v128[0];
LABEL_90:
  if (a4)
  {
    MakeOutlineFromBitmap(*(memoryContext **)a1, a2[3], (uint64_t)v24, (int *)&v129, v119, v13, a4, a5, a6);
    unint64_t v24 = (unsigned int *)v128[0];
  }
  if (v24) {
    ScalerDisposeBlock(*(memoryContext **)a1, (char *)v24, -1);
  }
  ScalerReleaseFontTable(*(memoryContext **)a1, v127);
}

uint64_t sbit_GetBitMapInfo(void *a1, uint64_t a2, int a3, int32x2_t *a4, int32x2_t *a5, int a6)
{
  unint64_t v11 = (int16x4_t *)a1[4];
  long long v12 = *(int **)(a1[3] + 80);
  int Metrics = sbit_GetMetrics(&v11[6], a5, (int *)&a4[1], (uint64_t)a1, a3, a6);
  *a4 = 0;
  v27[0] = 0;
  v27[1] = 0;
  unsigned int v29 = (v11[12].u16[3] + 7) >> 3;
  int32x4_t v26 = vmovl_s16(v11[11]);
  int32x4_t v28 = v26;
  ComputeDestBitmap(v12, (uint64_t)v27, (uint64_t)a4);
  if (*(unsigned char *)(a1[3] + 488) && (IsSkewingTransform(v12) || IsScalingSkewingTransform(v12)))
  {
    __int32 v14 = a4[2].i32[0];
    BOOL v15 = __OFSUB__(v26.i32[0], v14);
    int v16 = v26.i32[0] - v14;
    if (!((v16 < 0) ^ v15 | (v16 == 0)))
    {
      a4[2].i32[0] = v26.i32[0];
      a4[3].i32[0] += v16;
    }
  }
  int v17 = *(_DWORD *)(a2 + 4);
  int v18 = *(_DWORD *)(a2 + 8);
  BOOL v15 = __OFSUB__(v17, v18);
  int v19 = v17 - v18;
  if ((v19 < 0) ^ v15 | (v19 == 0)) {
    int v19 = a4[3].i32[1] - a4[2].i32[1];
  }
  else {
    LOWORD(v19) = v19 + 1;
  }
  if (a4[3].i32[0] == a4[2].i32[0] || a4[3].i32[1] == a4[2].i32[1])
  {
    int v20 = (int *)a1[5];
    *int v20 = 0;
  }
  else
  {
    int v21 = a4[4].i32[0] * (unsigned __int16)v19;
    int v20 = (int *)a1[5];
    *int v20 = v21;
  }
  v20[4] = 0;
  _OWORD v20[8] = 0;
  int v22 = M3x3Flags(v12);
  int32x2_t v30 = vsub_s32(vshl_n_s32((int32x2_t)__PAIR64__(v28.u32[3], v28.u32[0]), 0x10uLL), a4[1]);
  uint64_t result = M3x3Mul(v12, v22, &v30, (const int *)1);
  v24.i32[0] = a4[2].i32[0];
  v24.i32[1] = a4[3].i32[1];
  a4[1] = vsub_s32(vshl_n_s32(v24, 0x10uLL), v30);
  if (a5)
  {
    if (!Metrics)
    {
      uint64_t result = M3x3Mul(v12, v22, a5, (const int *)3);
      if (!a6)
      {
        if (*(unsigned char *)(a1[3] + 488))
        {
          a5->i32[0] = 0;
          a5[1].i32[0] = 0;
          uint64_t v25 = a5 + 2;
        }
        else
        {
          a5->i32[1] = 0;
          a5[1].i32[1] = 0;
          uint64_t v25 = (int32x2_t *)((char *)a5 + 20);
        }
        v25->i32[0] = 0;
      }
    }
  }
  return result;
}

uint64_t sbit_GetMetrics(_WORD *a1, int32x2_t *a2, int *a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(v10 + 80);
  unsigned int v12 = *(unsigned __int8 *)(v11 + 93);
  if (v12 <= 5)
  {
    if (((1 << v12) & 0x1A) != 0)
    {
      int v69 = (void *)0xAAAAAAAAAAAAAAAALL;
      unsigned int v15 = *(unsigned __int8 *)(v11 + 94);
      int v16 = *(_DWORD *)(v11 + 44);
      int TableParts = ScalerGetTableParts(*(memoryContext **)a4, *(_DWORD *)(*(void *)(a4 + 8) + 172), *(_DWORD *)(v11 + 64), *(_DWORD *)(v11 + 60), &v69, 1);
      int v18 = v69;
      if (TableParts) {
        BOOL v19 = v69 == 0;
      }
      else {
        BOOL v19 = 1;
      }
      if (v19) {
        goto LABEL_37;
      }
      if (v15 > 9) {
        goto LABEL_36;
      }
      if (((1 << v15) & 0x106) != 0)
      {
        int v40 = vcvtd_n_s64_f64((double)(v16 << 16) * 0.0000152587891 / 10.0, 0x10uLL);
        int v41 = *(unsigned __int8 *)v69;
        int v42 = *((unsigned __int8 *)v69 + 1);
        int v43 = *((char *)v69 + 2);
        int v44 = *((char *)v69 + 3);
        int v45 = *((unsigned __int8 *)v69 + 4);
        int v46 = *(unsigned char **)(a4 + 32);
        int v47 = *(unsigned __int8 *)(*(void *)(a4 + 24) + 488);
        char v48 = *(unsigned char *)(v11 + 92);
        v46[124] = v41;
        a1[26] = v41;
        v46[125] = v42;
        a1[27] = v42;
        a1[20] = 0;
        if (v47)
        {
          if ((v48 & 2) != 0)
          {
            *a3 = v43 << 16;
            v46[127] = v44;
            a1[23] = v44;
            a3[1] = v44 << 16;
            int v60 = v44 - v41;
            a1[21] = v60;
            a1[22] = v42;
            if (!a2) {
              goto LABEL_36;
            }
            a2[1].i32[0] = v43 << 16;
            a2[1].i32[1] = v44 << 16;
            a2->i32[0] = 0;
            a2->i32[1] = -65536 * v45;
            int v27 = (v60 + v45) << 16;
          }
          else
          {
            int v49 = -(v40 >> 17);
            a1[23] = v49;
            v46[127] = v49;
            int v50 = -(v40 >> 1);
            a3[1] = v50;
            a1[21] = v49 - v41;
            a1[22] = v42;
            *a3 = -32768 * v42;
            if (!a2) {
              goto LABEL_36;
            }
            a2[1].i32[0] = 0;
            a2[1].i32[1] = v50;
            int v51 = v40 + (v41 << 16);
            a2->i32[0] = 0;
            a2->i32[1] = -v51;
            int v27 = v51 - ((v40 >> 1) + (v41 << 16));
          }
          a2[2].i32[0] = 0;
          goto LABEL_32;
        }
        if (v48)
        {
          *a3 = v43 << 16;
          v46[127] = v44;
          a1[23] = v44;
          a3[1] = v44 << 16;
          a1[21] = v44 - v41;
          a1[22] = v42;
          if (!a2) {
            goto LABEL_36;
          }
          a2[1].i32[0] = v43 << 16;
          a2[1].i32[1] = v44 << 16;
          *a2 = (int32x2_t)(v45 << 16);
          int v56 = (v45 - (v43 + v42)) << 16;
        }
        else
        {
          a1[23] = v41;
          v46[127] = v41;
          int v57 = v41 << 16;
          int v58 = v40 >> 1;
          *a3 = v40 >> 1;
          a3[1] = v57;
          a1[21] = 0;
          a1[22] = v42;
          if (!a2) {
            goto LABEL_36;
          }
          a2[1].i32[0] = v58;
          a2[1].i32[1] = 0;
          unsigned int v59 = v40 + (v42 << 16);
          *a2 = (int32x2_t)v59;
          int v56 = v59 - (v58 + (v42 << 16));
        }
      }
      else
      {
        if (((1 << v15) & 0x2C0) == 0) {
          goto LABEL_36;
        }
        int v20 = *(unsigned __int8 *)v69;
        int v21 = *((unsigned __int8 *)v69 + 1);
        int v22 = *(unsigned char **)(a4 + 32);
        if (*(unsigned char *)(*(void *)(a4 + 24) + 488))
        {
          int v23 = *((unsigned __int8 *)v69 + 7);
          int v24 = *((char *)v69 + 5);
          int v25 = *((char *)v69 + 6);
          v22[124] = v20;
          a1[26] = v20;
          v22[125] = v21;
          a1[27] = v21;
          a1[20] = 0;
          *a3 = v24 << 16;
          v22[127] = v25;
          a1[23] = v25;
          a3[1] = v25 << 16;
          a1[21] = v25 - v20;
          a1[22] = v21;
          if (a2)
          {
            a2->i32[0] = 0;
            a2->i32[1] = -65536 * v23;
            a2[2].i32[0] = 0;
            a2[1].i32[0] = 0;
            int v26 = a3[1];
            a2[1].i32[1] = -v26;
            int v27 = v26 + ((v23 - v20) << 16);
LABEL_32:
            a2[2].i32[1] = v27;
          }
LABEL_36:
          ScalerReleaseFontTable(*(memoryContext **)a4, v18);
LABEL_37:
          uint64_t v10 = *(void *)(a4 + 24);
          goto LABEL_38;
        }
        int v52 = *((unsigned __int8 *)v69 + 4);
        int v53 = *((char *)v69 + 2);
        int v54 = *((char *)v69 + 3);
        v22[124] = v20;
        a1[26] = v20;
        v22[125] = v21;
        a1[27] = v21;
        a1[20] = 0;
        __int32 v55 = v53 << 16;
        *a3 = v55;
        v22[127] = v54;
        a1[23] = v54;
        a3[1] = v54 << 16;
        a1[21] = v54 - v20;
        a1[22] = v21;
        if (!a2) {
          goto LABEL_36;
        }
        a2[1].i32[0] = v55;
        a2[1].i32[1] = v54 << 16;
        a2->i32[0] = v52 << 16;
        a2->i32[1] = 0;
        int v56 = v21 - v52;
      }
      a2[2].i32[0] = v56;
      a2[2].i32[1] = 0;
      goto LABEL_36;
    }
    if (((1 << v12) & 0x24) == 0) {
      goto LABEL_38;
    }
    uint64_t v28 = *(void *)(v10 + 64) + *(unsigned int *)(v11 + 52);
    int v29 = *(unsigned __int8 *)(v28 + 12);
    int v30 = *(unsigned __int8 *)(v28 + 13);
    if (*(unsigned char *)(v10 + 488))
    {
      int v31 = *(unsigned __int8 *)(v28 + 19);
      int v32 = *(char *)(v28 + 17);
      int v33 = *(char *)(v28 + 18);
      a1[20] = 0;
      uint64_t v34 = *(unsigned char **)(a4 + 32);
      v34[124] = v29;
      a1[26] = v29;
      v34[125] = v30;
      a1[27] = v30;
      *a3 = v32 << 16;
      v34[127] = v33;
      a1[23] = v33;
      a3[1] = v33 << 16;
      a1[21] = v33 - v29;
      a1[22] = v30;
      if (!a2) {
        goto LABEL_38;
      }
      a2->i32[0] = 0;
      a2->i32[1] = -65536 * v31;
      a2[1].i32[0] = v32 << 16;
      a2[1].i32[1] = v33 << 16;
      a2[2].i32[0] = 0;
      int v35 = (v31 - v29 + v33) << 16;
    }
    else
    {
      int v36 = *(unsigned __int8 *)(v28 + 16);
      int v37 = *(char *)(v28 + 14);
      int v38 = *(char *)(v28 + 15);
      uint64_t v39 = *(unsigned char **)(a4 + 32);
      v39[124] = v29;
      a1[26] = v29;
      v39[125] = v30;
      a1[27] = v30;
      a1[20] = 0;
      *a3 = v37 << 16;
      v39[127] = v38;
      a1[23] = v38;
      a3[1] = v38 << 16;
      a1[21] = v38 - v29;
      a1[22] = v30;
      if (!a2) {
        goto LABEL_38;
      }
      int v35 = 0;
      *a2 = (int32x2_t)(v36 << 16);
      a2[1].i32[0] = v37 << 16;
      a2[1].i32[1] = v38 << 16;
      a2[2].i32[0] = (v36 - (v30 + v37)) << 16;
    }
    a2[2].i32[1] = v35;
  }
LABEL_38:
  int v61 = *(unsigned __int8 *)(v10 + 488);
  if (!a6)
  {
    int v68 = -1431655766;
    LODWORD(v69) = -1431655766;
    __int16 v67 = -21846;
    __int16 v66 = -21846;
    if (v61)
    {
LABEL_44:
      if (*(_DWORD *)(*(void *)(a4 + 8) + 116))
      {
        GetHmtxData(a4, a5, 0, &v68, &v67, &v66);
        a2->i32[1] = -vcvtd_n_s64_f64((double)(__int16)v68* 0.0000152587891/ ((double)*(__int16 *)(*(void *)(a4 + 8) + 130)* 0.0000152587891), 0x10uLL);
LABEL_51:
        int v63 = (int *)(*(void *)(a4 + 24) + 96);
        int v64 = M3x3Flags(v63);
        uint64_t v62 = 1;
        M3x3Mul(v63, v64, a2, (const int *)1);
        return v62;
      }
      return 0;
    }
    goto LABEL_49;
  }
  uint64_t v62 = 0;
  if (!v61)
  {
    if (a5 != 2 || a2->i32[0]) {
      return v62;
    }
    LODWORD(v69) = -1431655766;
    __int16 v67 = -21846;
    __int16 v66 = -21846;
LABEL_49:
    if (*(_DWORD *)(*(void *)(a4 + 8) + 112))
    {
      GetHmtxData(a4, a5, &v69, 0, &v67, &v66);
      a2->i32[0] = vcvtd_n_s64_f64((double)(__int16)v69* 0.0000152587891/ ((double)*(__int16 *)(*(void *)(a4 + 8) + 130)* 0.0000152587891), 0x10uLL);
      goto LABEL_51;
    }
    return 0;
  }
  if (a5 == 2 && !a2->i32[1])
  {
    int v68 = -1431655766;
    __int16 v67 = -21846;
    __int16 v66 = -21846;
    goto LABEL_44;
  }
  return v62;
}

uint64_t sbit_IsThereAGlyphImage(uint64_t a1, int *a2)
{
  int v4 = *a2;
  BOOL v5 = *a2 == 0;
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(v6 + 80);
  uint64_t v8 = v7;
  unsigned int v9 = *a2;
  while (1)
  {
    unsigned int v10 = *(unsigned __int16 *)(v8 + 84);
    if (v9 >= v10)
    {
      unsigned int v11 = *(unsigned __int16 *)(v8 + 86);
      if (v9 <= v11)
      {
        uint64_t v12 = *(unsigned int *)(v8 + 56);
        if (v12)
        {
          uint64_t v13 = 0;
          unint64_t v14 = *(void *)(v6 + 64);
          unint64_t v15 = v14 + *(unsigned int *)(v6 + 60);
          uint64_t v16 = 8 * v12;
          while (1)
          {
            unsigned int v17 = bswap32(*(unsigned __int16 *)(v14 + v13)) >> 16;
            unsigned int v18 = bswap32(*(unsigned __int16 *)(v14 + v13 + 2)) >> 16;
            if (v17 >= v10 && v18 <= v11)
            {
              if (v17 > v18) {
                goto LABEL_17;
              }
              if (v9 >= v17 && v9 <= v18) {
                break;
              }
            }
            v13 += 8;
            if (v16 == v13) {
              goto LABEL_17;
            }
          }
          uint64_t v22 = bswap32(*(_DWORD *)(v14 + v13 + 4));
          *(_DWORD *)(v8 + 52) = v22;
          uint64_t v23 = v14 + v22;
          int v24 = (_WORD *)(v14 + v22 + 2);
          if ((unint64_t)v24 <= v15)
          {
            int v25 = *(unsigned __int8 *)(v23 + 1);
            *(unsigned char *)(v8 + 93) = v25;
            *(_WORD *)(v8 + 88) = v17;
            *(_WORD *)(v8 + 90) = v18;
            switch(v25)
            {
              case 1:
                unint64_t v26 = (int)v9 - (unint64_t)v17;
                uint64_t v27 = v23 + 4 * v26;
                uint64_t v28 = (unsigned int *)(v27 + 8);
                unint64_t v29 = v27 + 16;
                if (v14 > (unint64_t)v28 || (unint64_t)v28 > 0xFFFFFFFFFFFFFFF7 || v29 > v15) {
                  goto LABEL_95;
                }
                *(unsigned char *)(v8 + 94) = *(unsigned char *)(v23 + 3);
                unsigned int v32 = bswap32(*v28);
                unsigned int v33 = bswap32(*(_DWORD *)(v23 + 4)) + v32;
                signed int v34 = bswap32(*(_DWORD *)(v23 + 4 + 4 * v26 + 8)) - v32;
                *(_DWORD *)(v8 + 64) = v33;
                goto LABEL_92;
              case 2:
                if (v23 + 20 > v15) {
                  goto LABEL_95;
                }
                unsigned int v35 = bswap32(*(_DWORD *)(v23 + 8));
                *(unsigned char *)(v8 + 94) = *(unsigned char *)(v23 + 3);
                *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)(v23 + 4)) + v35 * (v9 - v17);
                signed int v34 = bswap32(*(_DWORD *)(v23 + 8));
                *(_DWORD *)(v8 + 60) = v34;
                if (v34 >= 0x10000) {
                  goto LABEL_93;
                }
                if (*v24 != 1024) {
                  goto LABEL_83;
                }
                __int16 v66 = (void *)0xAAAAAAAAAAAAAAAALL;
                ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(void *)(a1 + 8) + 172), bswap32(*(_DWORD *)(v23 + 4)), 0xCu, &v66, 0);
                int v36 = (unsigned int *)v66;
                *(_DWORD *)(v8 + 68) = bswap32(*(_DWORD *)v66) + bswap32(*(_DWORD *)(v23 + 4));
                *(_DWORD *)(v8 + 72) = bswap32(v36[1]) - bswap32(*v36);
                *(_DWORD *)(v8 + 76) = bswap32(v36[1]) + bswap32(*(_DWORD *)(v23 + 4));
                *(_DWORD *)(v8 + 80) = bswap32(v36[2]) - bswap32(v36[1]);
                ScalerReleaseFontTable(*(memoryContext **)a1, v36);
                ScalerGetTableParts(*(memoryContext **)a1, *(_DWORD *)(*(void *)(a1 + 8) + 172), bswap32(*(_DWORD *)(v23 + 4)) + 4 * (v9 - *(unsigned __int16 *)(v8 + 88)) + 8, 8u, &v66, 0);
                int v37 = (unsigned int *)v66;
                *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)v66) + bswap32(*(_DWORD *)(v23 + 4));
                unsigned int v38 = bswap32(v37[1]) - bswap32(*v37);
                *(_DWORD *)(v8 + 60) = v38;
                if (HIWORD(v38)) {
                  goto LABEL_93;
                }
                int v39 = (unsigned __int16)v38;
                ScalerReleaseFontTable(*(memoryContext **)a1, v37);
                goto LABEL_84;
              case 3:
                uint64_t v40 = v23 + 2 * ((int)v9 - (unint64_t)v17);
                int v41 = (unsigned __int16 *)(v40 + 8);
                if (v14 > v40 + 8 || (unint64_t)v41 > 0xFFFFFFFFFFFFFFFBLL || v40 + 12 > v15) {
                  goto LABEL_95;
                }
                *(unsigned char *)(v8 + 94) = *(unsigned char *)(v23 + 3);
                *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)(v23 + 4)) + (bswap32(*v41) >> 16);
                signed int v34 = (bswap32(*(unsigned __int16 *)(v40 + 10)) >> 16) - (bswap32(*v41) >> 16);
                BOOL v44 = v34 < 0;
                goto LABEL_82;
              case 4:
                unsigned int v45 = bswap32(*(_DWORD *)(v23 + 8));
                unsigned int v46 = v18 - v17;
                if (v46 + 1 < *(unsigned __int16 *)(*(void *)(a1 + 8) + 40)) {
                  LODWORD(v47) = v46 + 1;
                }
                else {
                  LODWORD(v47) = *(unsigned __int16 *)(*(void *)(a1 + 8) + 40);
                }
                if (v47 >= v45) {
                  uint64_t v47 = v45;
                }
                else {
                  uint64_t v47 = v47;
                }
                uint64_t v48 = v23 + 4 * v47;
                unint64_t v49 = v48 + 12;
                unint64_t v50 = v48 + 16;
                if (v14 > v49 || v50 > v15) {
                  goto LABEL_95;
                }
                if (!v47) {
                  goto LABEL_80;
                }
                int v52 = (unsigned __int16 *)(v14 + v22 + 18);
                while (v9 != bswap32(*(v52 - 3)) >> 16)
                {
                  v52 += 2;
                  if (!--v47) {
                    goto LABEL_80;
                  }
                }
                *(unsigned char *)(v8 + 94) = *(unsigned char *)(v23 + 3);
                *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)(v23 + 4)) + (bswap32(*(v52 - 2)) >> 16);
                signed int v34 = (bswap32(*v52) >> 16) - (bswap32(*(v52 - 2)) >> 16);
                BOOL v44 = v34 < 0;
LABEL_82:
                *(_DWORD *)(v8 + 60) = v34;
                if (!v44) {
                  goto LABEL_83;
                }
                goto LABEL_93;
              case 5:
                unsigned int v53 = bswap32(*(_DWORD *)(v23 + 20));
                unsigned int v54 = v18 - v17;
                if (v54 + 1 < *(unsigned __int16 *)(*(void *)(a1 + 8) + 40)) {
                  LODWORD(v55) = v54 + 1;
                }
                else {
                  LODWORD(v55) = *(unsigned __int16 *)(*(void *)(a1 + 8) + 40);
                }
                if (v55 >= v53) {
                  uint64_t v55 = v53;
                }
                else {
                  uint64_t v55 = v55;
                }
                uint64_t v56 = v23 + 2 * v55;
                unint64_t v57 = v56 + 24;
                unint64_t v58 = v56 + 26;
                if (v14 > v57 || v58 > v15) {
                  goto LABEL_95;
                }
                if (!v55) {
                  goto LABEL_80;
                }
                uint64_t v60 = 0;
                uint64_t v61 = v14 + v22 + 24;
                break;
              default:
                goto LABEL_80;
            }
            while (v9 != bswap32(*(unsigned __int16 *)(v61 + 2 * v60)) >> 16)
            {
              if (v55 == ++v60)
              {
LABEL_80:
                int v39 = 0;
                goto LABEL_84;
              }
            }
            *(unsigned char *)(v8 + 94) = *(unsigned char *)(v23 + 3);
            *(_DWORD *)(v8 + 64) = bswap32(*(_DWORD *)(v23 + 4)) + bswap32(*(_DWORD *)(v23 + 8)) * v60;
            signed int v34 = bswap32(*(_DWORD *)(v23 + 8));
LABEL_92:
            *(_DWORD *)(v8 + 60) = v34;
            if (HIWORD(v34))
            {
LABEL_93:
              *(_DWORD *)(v8 + 60) = 0;
              goto LABEL_17;
            }
LABEL_83:
            int v39 = (unsigned __int16)v34;
LABEL_84:
            int v62 = *(unsigned __int8 *)(v8 + 94);
            if (v62 != 3 && (v62 - 10) > 0xFFFFFFF6) {
              break;
            }
          }
        }
      }
    }
LABEL_17:
    *(_DWORD *)(v7 + 60) = 0;
LABEL_18:
    if (*(unsigned char *)(*(void *)(a1 + 8) + 152)) {
      return 0;
    }
    if (*a2 >= 1 && !v5)
    {
      unsigned int v9 = 0;
    }
    else
    {
      if (*a2 == 1 || v4 == 1)
      {
LABEL_95:
        exception = __cxa_allocate_exception(2uLL);
        _WORD *exception = 5;
        __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
      }
      unsigned int v9 = 1;
    }
    *a2 = v9;
    uint64_t v6 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(v6 + 80);
    BOOL v5 = 1;
  }
  *(_DWORD *)(v7 + 60) = v39;
  if (!v39) {
    goto LABEL_18;
  }
  return 1;
}

uint64_t ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = 40;
  if (!*(_WORD *)(a1 + 72)) {
    uint64_t v2 = 32;
  }
  if (*(void *)(a1 + v2) > a2) {
    goto LABEL_8;
  }
  uint64_t v3 = 56;
  if (!*(_WORD *)(a1 + 72)) {
    uint64_t v3 = 48;
  }
  if (a2 + 2 > *(void *)(a1 + v3))
  {
LABEL_8:
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return *(void *)(a1 + 64);
}

unint64_t ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke_2(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 > a2 || v2 + *(unsigned int *)(a1 + 40) <= a2)
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return a2;
}

unint64_t ___ZL13DecodeHuffmanPKhjPhjiPsjS2_j_block_invoke_3(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 > a2 || v2 + *(unsigned int *)(a1 + 40) <= a2)
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return a2;
}

uint64_t ShortFracMul(int a1, int a2)
{
  if (a1 >= 0) {
    unsigned int v2 = a1;
  }
  else {
    unsigned int v2 = -a1;
  }
  if (a2 >= 0) {
    LOWORD(v3) = a2;
  }
  else {
    int v3 = -a2;
  }
  int v4 = HIWORD(v2) * (__int16)v3;
  int v5 = (v4 << 16) | 0x2000;
  int v6 = (unsigned __int16)v2 * (__int16)v3;
  BOOL v7 = __CFADD__(v5, v6);
  unsigned int v8 = v5 + v6;
  unsigned int v9 = (4 * v4) & 0xFFFC0000;
  if (v7) {
    v9 += 0x40000;
  }
  unsigned int v10 = v9 & 0xFFFC0000 | (v8 >> 14);
  if (a1 >> 31 == (unsigned __int16)(a2 & 0x8000) >> 15) {
    return v10;
  }
  else {
    return -v10;
  }
}

uint64_t Mul26Dot6(int a1, int a2)
{
  if (a1 >= 0) {
    unsigned int v2 = a1;
  }
  else {
    unsigned int v2 = -a1;
  }
  if (a2 >= 0) {
    unsigned int v3 = a2;
  }
  else {
    unsigned int v3 = -a2;
  }
  unsigned int v4 = (__PAIR64__(((unsigned __int16)v3 * HIWORD(v2) + HIWORD(v3) * (unsigned __int16)v2) >> 16, (((unsigned __int16)v3 * HIWORD(v2) + HIWORD(v3) * (unsigned __int16)v2) << 16) | 0x20)+ __PAIR64__(HIWORD(v3) * HIWORD(v2), (unsigned __int16)v3 * (unsigned __int16)v2)) >> 6;
  if ((a2 ^ a1) < 0) {
    unsigned int v4 = -v4;
  }
  if ((a1 + 46340) >= 0x16A09 || (a2 + 46340) >= 0x16A09) {
    return v4;
  }
  else {
    return ((a2 * a1 + 32) >> 6);
  }
}

uint64_t Div26Dot6(int a1, int a2)
{
  if (!a2)
  {
    int v3 = a1 >> 31;
    return v3 ^ 0x7FFFFFFFu;
  }
  if ((a1 + 0x1FFFFFF) <= 0x3FFFFFE) {
    return ((a1 << 6) / a2);
  }
  if (a1 >= 0) {
    unsigned int v4 = a1;
  }
  else {
    unsigned int v4 = -a1;
  }
  if (a2 >= 0) {
    unsigned int v5 = a2;
  }
  else {
    unsigned int v5 = -a2;
  }
  int v6 = a2 ^ a1;
  unsigned int v7 = v4 >> 26;
  if (v4 >> 26 >= v5)
  {
    int v3 = v6 >> 31;
    return v3 ^ 0x7FFFFFFFu;
  }
  unsigned int v8 = 0;
  unsigned int v9 = 0;
  unsigned int v10 = v4 << 6;
  unsigned int v11 = 0x80000000;
  do
  {
    unsigned int v9 = __PAIR64__(v5, v9) >> 1;
    unsigned int v12 = v5 >> 1;
    unsigned int v13 = v10 - v9;
    unsigned int v14 = v8 + v11;
    if (v10 >= v9) {
      unsigned int v15 = 0;
    }
    else {
      unsigned int v15 = v7;
    }
    if (v10 >= v9)
    {
      unsigned int v16 = v8 + v11;
    }
    else
    {
      unsigned int v13 = v10;
      unsigned int v16 = v8;
    }
    if (v7 == v12)
    {
      unsigned int v8 = v16;
    }
    else
    {
      unsigned int v15 = v7;
      unsigned int v13 = v10;
    }
    BOOL v17 = v10 >= v9;
    v10 -= v9;
    int v18 = !v17;
    int v19 = v7 - v12 - v18;
    BOOL v20 = v7 > v5 >> 1;
    if (v7 > v5 >> 1) {
      unsigned int v7 = v19;
    }
    else {
      unsigned int v7 = v15;
    }
    if (v20) {
      unsigned int v8 = v14;
    }
    else {
      unsigned int v10 = v13;
    }
    v5 >>= 1;
    BOOL v20 = v11 > 1;
    v11 >>= 1;
  }
  while (v20);
  if (v6 >= 0) {
    return v8;
  }
  else {
    return -v8;
  }
}

void PrepareTheCVT(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int16 *)(v2 + 150);
  if (*(_WORD *)(v2 + 150))
  {
    uint64_t v6 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v6 + 56) && *(unsigned char *)(v2 + 157))
    {
      unsigned int v7 = *(__int16 **)(v6 + 48);
      unsigned int v8 = *(_DWORD **)(*(void *)(a1 + 24) + 232);
      uint64_t v9 = 2 * v3;
      do
      {
        int v10 = *v7++;
        *v8++ = (unint64_t)(v10 * (uint64_t)a2 + 0x8000) >> 16;
        v9 -= 2;
      }
      while (v9);
    }
    else
    {
      int v18 = (void *)0xAAAAAAAAAAAAAAAALL;
      ScalerGetFontTable(*(memoryContext **)a1, 1668707360, 0, &v18, 0, 0);
      uint64_t v11 = *(void *)(a1 + 8);
      uint64_t v12 = *(unsigned __int16 *)(v11 + 150);
      unsigned int v13 = v18;
      if (*(_WORD *)(v11 + 150))
      {
        unsigned int v14 = *(_DWORD **)(*(void *)(a1 + 24) + 232);
        uint64_t v15 = 2 * v12;
        unsigned int v16 = (unsigned __int16 *)v18;
        do
        {
          unsigned int v17 = *v16++;
          *v14++ = (unint64_t)((__int16)(bswap32(v17) >> 16) * (uint64_t)a2 + 0x8000) >> 16;
          v15 -= 2;
        }
        while (v15);
      }
      ScalerReleaseFontTable(*(memoryContext **)a1, v13);
    }
  }
}

void ReleaseProgramPtrs(memoryContext *a1, uint64_t a2)
{
  unsigned int v4 = *(const void **)(a2 + 64);
  if (v4)
  {
    ScalerReleaseFontTable(a1, v4);
    *(void *)(a2 + 64) = 0;
  }
  unsigned int v5 = *(const void **)(a2 + 72);
  if (v5)
  {
    ScalerReleaseFontTable(a1, v5);
    *(void *)(a2 + 72) = 0;
  }
}

uint64_t SetUpProgramPtrs(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v3 = *(void *)(result + 24);
  *(void *)(v3 + 272) = 0;
  *(void *)(v3 + 280) = 0;
  if (*(_DWORD *)(v2 + 120)) {
    uint64_t result = ScalerGetFontTable(*(memoryContext **)result, 1718642541, 0, (void *)(v3 + 272), 0, 0);
  }
  if (*(_DWORD *)(v2 + 124) && (!*(unsigned char *)(*(void *)(v1 + 24) + 486) || *(unsigned char *)(v3 + 473))) {
    uint64_t result = ScalerGetFontTable(*(memoryContext **)v1, 1886545264, 0, (void *)(v3 + 280), 0, 0);
  }
  *(void *)(v3 + 456) = v2 + 36;
  *(_DWORD *)(v3 + 464) = *(unsigned __int16 *)(v2 + 150);
  if (!*(void *)(v3 + 216))
  {
    uint64_t result = (uint64_t)malloc_type_calloc(0x400uLL, 1uLL, 0x30AFEDDFuLL);
    *(void *)(v3 + 216) = result;
    *(_DWORD *)(v3 + 212) = 1024;
  }
  return result;
}

double SetGlobalGSDefaults(uint64_t a1)
{
  *(void *)&double result = 68;
  *(void *)(a1 + 136) = 68;
  *(_DWORD *)(a1 + 148) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 156) = 64;
  *(void *)(a1 + 216) = fnt_RoundToGrid;
  *(void *)(a1 + 160) = fnt_RoundToGrid;
  *(unsigned char *)(a1 + 245) = 0;
  *(void *)(a1 + 182) = 0x1000000030009;
  *(unsigned char *)(a1 + 265) = 0;
  return result;
}

uint64_t SetGlobalGSMapping(uint64_t a1, int *a2, int a3)
{
  *(_DWORD *)(a1 + 92) = (*a2 + 0x8000) >> 16;
  *(_DWORD *)(a1 + 96) = (a2[4] + 0x8000) >> 16;
  int v4 = (int)((double)*a2 * 64.0 / (double)a3);
  *(_DWORD *)(a1 + 100) = v4;
  int v5 = (int)((double)a2[4] * 64.0 / (double)a3);
  *(_DWORD *)(a1 + 104) = v5;
  double v6 = (double)*(int *)(a1 + 80) * 0.0000152587891;
  unsigned int v7 = vcvtd_n_s64_f64((double)*a2 * 0.0000152587891 / v6, 0x10uLL);
  *(_DWORD *)(a1 + 108) = v7;
  unsigned int v8 = vcvtd_n_s64_f64((double)a2[4] * 0.0000152587891 / v6, 0x10uLL);
  *(_DWORD *)(a1 + 112) = v8;
  BOOL v10 = v7 == 0x10000 && v8 == 0x10000;
  *(unsigned char *)(a1 + 266) = v10;
  *(unsigned char *)(a1 + 267) = 0;
  uint64_t result = M3x3Flags(a2);
  if ((result - 2) < 2)
  {
    char v12 = 2;
  }
  else
  {
    if ((result - 4) > 1) {
      return result;
    }
    *(unsigned char *)(a1 + 267) = 1;
    char v12 = 3;
  }
  if (v4 != v5) {
    *(unsigned char *)(a1 + 267) = v12;
  }
  return result;
}

void RunFontProgram(uint64_t *a1, uint64_t a2)
{
  v6[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int *)(a1[1] + 120);
  if (v2)
  {
    uint64_t v4 = a1[3];
    uint64_t v5 = v4 + 208;
    *(void *)(v4 + 332) = 0;
    v6[0] = 0;
    v6[1] = 0;
    fnt_Execute((uint64_t)v6, v4 + 208, *(unsigned __int8 **)(v4 + 272), *(void *)(v4 + 272) + v2, a2, *a1, 0, 0, 0);
    *(unsigned char *)(a1[1] + 160) = *(_DWORD *)(v5 + 124);
  }
}

__n128 RunPreProgram(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  v10[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[1];
  if (*(_DWORD *)(v3 + 124))
  {
    uint64_t v6 = a1[3];
    *(_DWORD *)(v6 + 336) = 1;
    SetGlobalGSMapping(v6 + 208, (int *)(a2 + 36), *(__int16 *)(v3 + 130));
    long long v7 = *(_OWORD *)(v6 + 360);
    *(_OWORD *)(v6 + 400) = *(_OWORD *)(v6 + 344);
    *(_OWORD *)(v6 + 416) = v7;
    *(_OWORD *)(v6 + 432) = *(_OWORD *)(v6 + 376);
    *(void *)(v6 + 448) = *(void *)(v6 + 392);
    v10[0] = a1[5] + 56;
    v10[1] = 0;
    fnt_Execute((uint64_t)v10, v6 + 208, *(unsigned __int8 **)(v6 + 280), *(void *)(v6 + 280) + *(unsigned int *)(a1[1] + 124), a3, *a1, 0, 0, 0);
    if ((*(unsigned char *)(v6 + 416) & 2) == 0)
    {
      long long v9 = *(_OWORD *)(v6 + 416);
      *(_OWORD *)(v6 + 344) = *(_OWORD *)(v6 + 400);
      *(_OWORD *)(v6 + 360) = v9;
      __n128 result = *(__n128 *)(v6 + 432);
      *(__n128 *)(v6 + 376) = result;
      *(void *)(v6 + 392) = *(void *)(v6 + 448);
    }
  }
  return result;
}

void RunGlyphProgram(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, unsigned __int8 *a5, BOOL a6)
{
  long long v13[2] = *MEMORY[0x1E4F143B8];
  if (a4)
  {
    uint64_t v11 = a1[3];
    *(_DWORD *)(v11 + 336) = 3;
    SetGlobalGSMapping(v11 + 208, (int *)(a3 + 36), *(__int16 *)(a1[1] + 130));
    long long v12 = *(_OWORD *)(v11 + 360);
    *(_OWORD *)(v11 + 400) = *(_OWORD *)(v11 + 344);
    *(_OWORD *)(v11 + 416) = v12;
    *(_OWORD *)(v11 + 432) = *(_OWORD *)(v11 + 376);
    *(void *)(v11 + 448) = *(void *)(v11 + 392);
    v13[0] = a1[5] + 56;
    v13[1] = a2;
    fnt_Execute((uint64_t)v13, v11 + 208, a5, (unint64_t)&a5[a4], 0, *a1, *(unsigned __int8 *)(a1[2] + 56), *(unsigned __int8 *)(a1[1] + 157), a6);
  }
}

uint64_t M3x3Flags(_DWORD *a1)
{
  if (a1[2] || a1[5]) {
    return 6;
  }
  int v3 = a1[8];
  if (v3 < 1) {
    return 7;
  }
  if (v3 != 0x40000000) {
    return 6;
  }
  if (a1[6]) {
    uint64_t result = 1;
  }
  else {
    uint64_t result = a1[7] != 0;
  }
  if (a1[1] || a1[3]) {
    return result | 4;
  }
  if (*a1 != 0x10000 || a1[4] != 0x10000) {
    return result | 2;
  }
  return result;
}

uint64_t M3x3Inverse(int *a1, int a2, uint64_t a3)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t result = 1;
  switch(a2)
  {
    case -1:
    case 7:
      return result;
    case 0:
      if (a1 != (int *)a3)
      {
        long long v19 = *(_OWORD *)a1;
        long long v20 = *((_OWORD *)a1 + 1);
        *(_DWORD *)(a3 + 32) = a1[8];
        *(_OWORD *)a3 = v19;
        *(_OWORD *)(a3 + 16) = v20;
      }
      return 0;
    case 1:
      *(_DWORD *)a3 = *a1;
      *(_DWORD *)(a3 + 4) = a1[1];
      *(_DWORD *)(a3 + 8) = a1[2];
      *(_DWORD *)(a3 + 12) = a1[3];
      *(_DWORD *)(a3 + 16) = a1[4];
      *(_DWORD *)(a3 + 20) = a1[5];
      *(_DWORD *)(a3 + 24) = -a1[6];
      int v8 = -a1[7];
      goto LABEL_15;
    case 2:
    case 3:
      uint64_t v6 = *a1;
      if ((0x100000000 / v6) == 0x80000000) {
        return result;
      }
      *(_DWORD *)a3 = 0x100000000 / v6;
      *(_DWORD *)(a3 + 4) = a1[1];
      *(_DWORD *)(a3 + 8) = a1[2];
      *(_DWORD *)(a3 + 12) = a1[3];
      uint64_t v7 = a1[4];
      if ((0x100000000 / v7) == 0x80000000) {
        return result;
      }
      *(_DWORD *)(a3 + 16) = 0x100000000 / v7;
      *(_DWORD *)(a3 + 20) = a1[5];
      if ((a2 & 1) == 0)
      {
        *(_DWORD *)(a3 + 24) = a1[6];
        int v8 = a1[7];
LABEL_15:
        *(_DWORD *)(a3 + 28) = v8;
        int v21 = a1[8];
        goto LABEL_16;
      }
      uint64_t v95 = ((uint64_t)a1[6] << 16) / v6;
      if (v95 != 0x80000000)
      {
        *(_DWORD *)(a3 + 24) = -(int)v95;
        uint64_t v96 = ((uint64_t)a1[7] << 16) / v7;
        if (v96 != 0x80000000)
        {
          int v8 = -(int)v96;
          goto LABEL_15;
        }
      }
      return result;
    case 4:
    case 5:
      int v9 = a1[4];
      unint64_t v10 = v9 * (uint64_t)*a1;
      unint64_t v11 = HIDWORD(v10);
      uint64_t v12 = a1[1] * (uint64_t)a1[3];
      BOOL v13 = v10 >= v12;
      uint64_t v14 = (v10 - v12);
      if (v13) {
        int v15 = -HIDWORD(v12);
      }
      else {
        int v15 = ~HIDWORD(v12);
      }
      uint64_t v16 = (v15 + v11);
      uint64_t v17 = v14 | (v16 << 32);
      unsigned int v18 = v14;
      if (v17 < 0)
      {
        if (v14)
        {
          unsigned int v18 = -(int)v14;
          LODWORD(v16) = ~v16;
          if (!v16) {
            goto LABEL_47;
          }
        }
        else
        {
          LODWORD(v16) = -(int)v16;
        }
LABEL_62:
        unsigned int v83 = WORD1(v16);
        __int16 v84 = WORD1(v16) != 0;
        if (!WORD1(v16)) {
          unsigned int v83 = v16;
        }
        __int16 v85 = 16 * v84;
        if (v83 > 0xFF)
        {
          v83 >>= 8;
          __int16 v85 = (16 * (v84 & 1)) | 8;
        }
        if (v83 > 0xF)
        {
          v83 >>= 4;
          v85 |= 4u;
        }
        if (v83 > 3)
        {
          v83 >>= 2;
          v85 |= 2u;
        }
        if (v83 <= 1) {
          __int16 v86 = v85;
        }
        else {
          __int16 v86 = v85 + 1;
        }
        unsigned __int16 v81 = v86 + 32;
        goto LABEL_74;
      }
      if (v16) {
        goto LABEL_62;
      }
LABEL_47:
      if (!v18) {
        goto LABEL_60;
      }
      unsigned int v78 = HIWORD(v18);
      __int16 v79 = HIWORD(v18) != 0;
      if (!HIWORD(v18)) {
        unsigned int v78 = v18;
      }
      __int16 v80 = 16 * v79;
      if (v78 > 0xFF)
      {
        v78 >>= 8;
        __int16 v80 = (16 * (v79 & 1)) | 8;
      }
      if (v78 > 0xF)
      {
        v78 >>= 4;
        v80 |= 4u;
      }
      if (v78 > 3)
      {
        v78 >>= 2;
        v80 |= 2u;
      }
      unsigned __int16 v81 = v78 <= 1 ? v80 : v80 + 1;
      if (v81 < 0x1Fu)
      {
LABEL_60:
        unsigned int v82 = 0;
        goto LABEL_75;
      }
LABEL_74:
      unsigned int v82 = (unsigned __int16)(v81 - 30);
      LODWORD(v14) = ((unint64_t)(v17 << (30 - v81)) >> 63)
                   + (v17 >> (v81 - 30));
LABEL_75:
      if (v14)
      {
        int64_t v87 = (unint64_t)v9 << 32;
        if (v82) {
          int64_t v87 = (v87 >> v82) + ((unint64_t)(v87 << -(char)v82) >> 63);
        }
        uint64_t v88 = (int)v14;
        int64_t v89 = v87 / (int)v14;
        *(_DWORD *)a3 = v89;
        if (v89 != 0x80000000)
        {
          int64_t v90 = (unint64_t)-a1[1] << 32;
          if (v82) {
            int64_t v90 = (v90 >> v82) + ((unint64_t)(v90 << -(char)v82) >> 63);
          }
          int64_t v91 = v90 / (int)v14;
          *(_DWORD *)(a3 + 4) = v91;
          if (v91 != 0x80000000)
          {
            *(_DWORD *)(a3 + 8) = 0;
            int64_t v92 = (unint64_t)-a1[3] << 32;
            if (v82)
            {
              uint64_t v93 = (uint64_t)((v92 >> v82) + ((unint64_t)(v92 << -(char)v82) >> 63)) / (int)v14;
              *(_DWORD *)(a3 + 12) = v93;
              if (v93 == 0x80000000) {
                return result;
              }
              int64_t v94 = ((uint64_t)((unint64_t)*a1 << 32) >> v82)
                  + ((unint64_t)*a1 << 32 << (64 - v82) >> 63);
            }
            else
            {
              int64_t v97 = v92 / (int)v14;
              *(_DWORD *)(a3 + 12) = v97;
              if (v97 == 0x80000000) {
                return result;
              }
              int64_t v94 = (unint64_t)*a1 << 32;
            }
            int64_t v98 = v94 / (int)v14;
            *(_DWORD *)(a3 + 16) = v98;
            if (v98 != 0x80000000)
            {
              *(_DWORD *)(a3 + 20) = 0;
              if (a2)
              {
                uint64_t v99 = a1[7] * (uint64_t)a1[3];
                uint64_t v100 = a1[4] * (uint64_t)a1[6];
                uint64_t v101 = ~HIDWORD(v100);
                uint64_t v102 = -HIDWORD(v100);
                BOOL v13 = v99 >= v100;
                uint64_t v103 = (v99 - v100);
                if (!v13) {
                  uint64_t v102 = v101;
                }
                int v104 = (__int16)(v82 - 16);
                uint64_t v105 = (v99 + (v102 << 32)) & 0xFFFFFFFF00000000 | v103;
                if (v104 < (__int16)(ATSWideScale(v105) - 62)) {
                  return 1;
                }
                if (v82 < 0x11)
                {
                  if (v82 != 16) {
                    v105 <<= 16 - v82;
                  }
                }
                else
                {
                  uint64_t v105 = (v105 >> (v82 - 16))
                       + ((unint64_t)(v105 << (16 - v82)) >> 63);
                }
                *(_DWORD *)(a3 + 24) = v105 / v88;
                if ((v105 / v88) == 0x80000000) {
                  return 1;
                }
                uint64_t v106 = a1[6] * (uint64_t)a1[1];
                uint64_t v107 = *a1 * (uint64_t)a1[7];
                uint64_t v108 = ~HIDWORD(v107);
                uint64_t v109 = -HIDWORD(v107);
                BOOL v13 = v106 >= v107;
                uint64_t v110 = (v106 - v107);
                if (!v13) {
                  uint64_t v109 = v108;
                }
                uint64_t v111 = (v106 + (v109 << 32)) & 0xFFFFFFFF00000000 | v110;
                if (v104 < (__int16)(ATSWideScale(v111) - 62)) {
                  return 1;
                }
                if (v82 < 0x11)
                {
                  if (v82 != 16) {
                    v111 <<= 16 - v82;
                  }
                }
                else
                {
                  uint64_t v111 = (v111 >> (v82 - 16))
                       + ((unint64_t)(v111 << (16 - v82)) >> 63);
                }
                *(_DWORD *)(a3 + 28) = v111 / v88;
                if ((v111 / v88) == 0x80000000) {
                  return 1;
                }
              }
              else
              {
                *(void *)(a3 + 24) = 0;
              }
              int v21 = 0x40000000;
LABEL_16:
              *(_DWORD *)(a3 + 32) = v21;
              return 0;
            }
          }
        }
      }
      return result;
    case 6:
      int v22 = a1[7];
      int v23 = a1[8];
      int v24 = a1[4];
      int v25 = a1[5];
      unint64_t v26 = v23 * (uint64_t)v24;
      int v27 = a1[6];
      uint64_t v28 = v22 * (uint64_t)v25;
      unint64_t v29 = HIDWORD(v26);
      unsigned int v30 = v26 - v28;
      if (v26 < v28) {
        int v31 = ~HIDWORD(v28);
      }
      else {
        int v31 = -HIDWORD(v28);
      }
      unsigned int v32 = v31 + v29;
      int v34 = a1[2];
      int v33 = a1[3];
      unint64_t v35 = v34 * (uint64_t)v22;
      int v36 = *a1;
      int v37 = a1[1];
      uint64_t v38 = v37 * (uint64_t)v23;
      int v112 = 34607134;
      v113[0] = v30;
      unint64_t v39 = HIDWORD(v35);
      *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v115 = v40;
      long long v114 = v40;
      v113[1] = v32;
      int v41 = -HIDWORD(v38);
      BOOL v13 = v35 >= v38;
      unsigned int v42 = v35 - v38;
      if (!v13) {
        int v41 = ~HIDWORD(v38);
      }
      v113[2] = v42;
      v113[3] = v41 + v39;
      unint64_t v43 = v37 * (uint64_t)v25;
      uint64_t v44 = v34 * (uint64_t)v24;
      unint64_t v45 = HIDWORD(v43);
      BOOL v13 = v43 >= v44;
      unsigned int v46 = v43 - v44;
      if (v13) {
        int v47 = -HIDWORD(v44);
      }
      else {
        int v47 = ~HIDWORD(v44);
      }
      v113[4] = v46;
      v113[5] = v47 + v45;
      unint64_t v48 = v27 * (uint64_t)v25;
      uint64_t v49 = v33 * (uint64_t)v23;
      unint64_t v50 = HIDWORD(v48);
      BOOL v13 = v48 >= v49;
      unsigned int v51 = v48 - v49;
      if (v13) {
        int v52 = -HIDWORD(v49);
      }
      else {
        int v52 = ~HIDWORD(v49);
      }
      v113[6] = v51;
      v113[7] = v52 + v50;
      unint64_t v53 = v36 * (uint64_t)v23;
      uint64_t v54 = v27 * (uint64_t)v34;
      unint64_t v55 = HIDWORD(v53);
      BOOL v13 = v53 >= v54;
      unsigned int v56 = v53 - v54;
      if (v13) {
        int v57 = -HIDWORD(v54);
      }
      else {
        int v57 = ~HIDWORD(v54);
      }
      v113[8] = v56;
      v113[9] = v57 + v55;
      unint64_t v58 = v33 * (uint64_t)v34;
      unint64_t v61 = v36 * (uint64_t)v25;
      unint64_t v59 = HIDWORD(v61);
      unint64_t v60 = HIDWORD(v58);
      BOOL v13 = v58 >= v61;
      LODWORD(v61) = v58 - v61;
      if (v13) {
        int v62 = -HIDWORD(v61);
      }
      else {
        int v62 = ~v59;
      }
      LODWORD(v114) = v61;
      DWORD1(v114) = v62 + v60;
      unint64_t v63 = v33 * (uint64_t)v22;
      uint64_t v64 = v27 * (uint64_t)v24;
      unint64_t v65 = HIDWORD(v63);
      BOOL v13 = v63 >= v64;
      int v66 = v63 - v64;
      if (v13) {
        int v67 = -HIDWORD(v64);
      }
      else {
        int v67 = ~HIDWORD(v64);
      }
      DWORD2(v114) = v66;
      HIDWORD(v114) = v67 + v65;
      unint64_t v68 = v27 * (uint64_t)v37;
      unint64_t v71 = v36 * (uint64_t)v22;
      unint64_t v69 = HIDWORD(v71);
      unint64_t v70 = HIDWORD(v68);
      BOOL v13 = v68 >= v71;
      LODWORD(v71) = v68 - v71;
      if (v13) {
        int v72 = -HIDWORD(v71);
      }
      else {
        int v72 = ~v69;
      }
      LODWORD(v115) = v71;
      DWORD1(v115) = v72 + v70;
      unint64_t v73 = v36 * (uint64_t)v24;
      uint64_t v74 = v33 * (uint64_t)v37;
      unint64_t v75 = HIDWORD(v73);
      BOOL v13 = v73 >= v74;
      int v76 = v73 - v74;
      if (v13) {
        int v77 = -HIDWORD(v74);
      }
      else {
        int v77 = ~HIDWORD(v74);
      }
      DWORD2(v115) = v76;
      HIDWORD(v115) = v77 + v75;
      return M3x3WideNorm(v113, (_DWORD *)a3, (char *)&v112);
    default:
      return 0;
  }
}

uint64_t ATSWideScale(unint64_t a1)
{
  unint64_t v1 = HIDWORD(a1);
  if ((a1 & 0x8000000000000000) != 0)
  {
    if (a1)
    {
      LODWORD(a1) = -(int)a1;
      LODWORD(v1) = ~v1;
      if (!v1)
      {
LABEL_3:
        if (a1)
        {
          unsigned int v2 = WORD1(a1);
          if (!WORD1(a1)) {
            unsigned int v2 = a1;
          }
          if (v2 <= 0xFF)
          {
            __int16 v3 = 16 * (WORD1(a1) != 0);
          }
          else
          {
            v2 >>= 8;
            __int16 v3 = (16 * (WORD1(a1) != 0)) | 8;
          }
          if (v2 > 0xF)
          {
            v2 >>= 4;
            v3 |= 4u;
          }
          if (v2 > 3)
          {
            v2 >>= 2;
            v3 |= 2u;
          }
          if (v2 <= 1) {
            return v3;
          }
          else {
            return (__int16)(v3 + 1);
          }
        }
        else
        {
          return -1;
        }
      }
    }
    else
    {
      LODWORD(v1) = -HIDWORD(a1);
    }
  }
  else if (!HIDWORD(a1))
  {
    goto LABEL_3;
  }
  __int16 v5 = WORD1(v1) != 0;
  if (WORD1(v1)) {
    LODWORD(v1) = WORD1(v1);
  }
  __int16 v6 = 16 * v5;
  if (v1 > 0xFF)
  {
    LODWORD(v1) = v1 >> 8;
    __int16 v6 = (16 * (v5 & 1)) | 8;
  }
  if (v1 > 0xF)
  {
    LODWORD(v1) = v1 >> 4;
    v6 |= 4u;
  }
  if (v1 > 3)
  {
    LODWORD(v1) = v1 >> 2;
    v6 |= 2u;
  }
  if (v1 <= 1) {
    __int16 v7 = v6;
  }
  else {
    __int16 v7 = v6 + 1;
  }
  return (__int16)(v7 + 32);
}

uint64_t M3x3WideNorm(unsigned int *a1, _DWORD *a2, char *a3)
{
  uint64_t v4 = 0;
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  unint64_t v84 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v82 = v5;
  long long v83 = v5;
  long long v80 = v5;
  long long v81 = v5;
  do
  {
    __int16 v6 = (int *)((char *)&v80 + v4 * 4);
    int v8 = a1[v4];
    unsigned int v7 = a1[v4 + 1];
    v4 += 2;
    int v9 = ~v8;
    if (v7)
    {
      int v10 = -v7;
    }
    else
    {
      int v9 = -v8;
      int v10 = 0;
    }
    if (v8 < 0)
    {
      int v8 = v9;
      unsigned int v7 = v10;
    }
    int v11 = 2 * v8;
    if (!v8) {
      int v11 = v7 >> 31;
    }
    BOOL v12 = __CFADD__(v11, v7);
    unsigned int v13 = v11 + v7;
    if (v12) {
      ++v8;
    }
    *__int16 v6 = v8;
    v6[1] = v13;
  }
  while ((v4 * 4) != 72);
  unsigned int v14 = DWORD1(v80);
  if (HIDWORD(v80) | HIDWORD(v81) | DWORD1(v82) | DWORD1(v80))
  {
    if (DWORD1(v80))
    {
      if (HIWORD(DWORD1(v80))) {
        unsigned int v14 = HIWORD(DWORD1(v80));
      }
      unsigned __int16 v15 = 16 * (HIWORD(DWORD1(v80)) != 0);
      if (v14 > 0xFF)
      {
        v14 >>= 8;
        unsigned __int16 v15 = (16 * (HIWORD(DWORD1(v80)) != 0)) | 8;
      }
      if (v14 > 0xF)
      {
        v14 >>= 4;
        v15 |= 4u;
      }
      if (v14 > 3)
      {
        v14 >>= 2;
        v15 |= 2u;
      }
      if (v14 <= 1) {
        unsigned __int16 v16 = v15;
      }
      else {
        unsigned __int16 v16 = v15 + 1;
      }
      int v17 = v16 + 2;
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    unsigned int v18 = v80;
    if (!(DWORD2(v80) | DWORD2(v81) | v82 | v80))
    {
      int v21 = -64;
      goto LABEL_44;
    }
    if (v80)
    {
      if (WORD1(v80)) {
        unsigned int v18 = WORD1(v80);
      }
      unsigned __int16 v19 = 16 * (WORD1(v80) != 0);
      if (v18 > 0xFF)
      {
        v18 >>= 8;
        unsigned __int16 v19 = (16 * (WORD1(v80) != 0)) | 8;
      }
      if (v18 > 0xF)
      {
        v18 >>= 4;
        v19 |= 4u;
      }
      if (v18 > 3)
      {
        v18 >>= 2;
        v19 |= 2u;
      }
      if (v18 <= 1) {
        unsigned __int16 v20 = v19;
      }
      else {
        unsigned __int16 v20 = v19 + 1;
      }
      int v17 = v20 - 30;
    }
    else
    {
      int v17 = -31;
    }
  }
  int v21 = v17 - *a3;
LABEL_44:
  unsigned int v22 = DWORD1(v81);
  if (HIDWORD(v82) | DWORD1(v81))
  {
    if (DWORD1(v81))
    {
      if (HIWORD(DWORD1(v81))) {
        unsigned int v22 = HIWORD(DWORD1(v81));
      }
      unsigned __int16 v23 = 16 * (HIWORD(DWORD1(v81)) != 0);
      if (v22 > 0xFF)
      {
        v22 >>= 8;
        unsigned __int16 v23 = (16 * (HIWORD(DWORD1(v81)) != 0)) | 8;
      }
      if (v22 > 0xF)
      {
        v22 >>= 4;
        v23 |= 4u;
      }
      if (v22 > 3)
      {
        v22 >>= 2;
        v23 |= 2u;
      }
      if (v22 <= 1) {
        unsigned __int16 v24 = v23;
      }
      else {
        unsigned __int16 v24 = v23 + 1;
      }
      int v25 = v24 + 2;
    }
    else
    {
      int v25 = 1;
    }
  }
  else
  {
    unsigned int v26 = v81;
    if (!(DWORD2(v82) | v81))
    {
      int v29 = -64;
      goto LABEL_76;
    }
    if (v81)
    {
      if (WORD1(v81)) {
        unsigned int v26 = WORD1(v81);
      }
      unsigned __int16 v27 = 16 * (WORD1(v81) != 0);
      if (v26 > 0xFF)
      {
        v26 >>= 8;
        unsigned __int16 v27 = (16 * (WORD1(v81) != 0)) | 8;
      }
      if (v26 > 0xF)
      {
        v26 >>= 4;
        v27 |= 4u;
      }
      if (v26 > 3)
      {
        v26 >>= 2;
        v27 |= 2u;
      }
      if (v26 <= 1) {
        unsigned __int16 v28 = v27;
      }
      else {
        unsigned __int16 v28 = v27 + 1;
      }
      int v25 = v28 - 30;
    }
    else
    {
      int v25 = -31;
    }
  }
  int v29 = v25 - a3[1];
LABEL_76:
  if (v29 > v21) {
    int v21 = v29;
  }
  unsigned int v30 = DWORD1(v83);
  if (HIDWORD(v83) | DWORD1(v83))
  {
    if (DWORD1(v83))
    {
      if (HIWORD(DWORD1(v83))) {
        unsigned int v30 = HIWORD(DWORD1(v83));
      }
      unsigned __int16 v31 = 16 * (HIWORD(DWORD1(v83)) != 0);
      if (v30 > 0xFF)
      {
        v30 >>= 8;
        unsigned __int16 v31 = (16 * (HIWORD(DWORD1(v83)) != 0)) | 8;
      }
      if (v30 > 0xF)
      {
        v30 >>= 4;
        v31 |= 4u;
      }
      if (v30 > 3)
      {
        v30 >>= 2;
        v31 |= 2u;
      }
      if (v30 <= 1) {
        unsigned __int16 v32 = v31;
      }
      else {
        unsigned __int16 v32 = v31 + 1;
      }
      int v33 = v32 + 2;
    }
    else
    {
      int v33 = 1;
    }
  }
  else
  {
    unsigned int v34 = v83;
    if (!(DWORD2(v83) | v83))
    {
      int v37 = -64;
      goto LABEL_110;
    }
    if (v83)
    {
      if (WORD1(v83)) {
        unsigned int v34 = WORD1(v83);
      }
      unsigned __int16 v35 = 16 * (WORD1(v83) != 0);
      if (v34 > 0xFF)
      {
        v34 >>= 8;
        unsigned __int16 v35 = (16 * (WORD1(v83) != 0)) | 8;
      }
      if (v34 > 0xF)
      {
        v34 >>= 4;
        v35 |= 4u;
      }
      if (v34 > 3)
      {
        v34 >>= 2;
        v35 |= 2u;
      }
      if (v34 <= 1) {
        unsigned __int16 v36 = v35;
      }
      else {
        unsigned __int16 v36 = v35 + 1;
      }
      int v33 = v36 - 30;
    }
    else
    {
      int v33 = -31;
    }
  }
  int v37 = v33 - a3[2];
LABEL_110:
  if (v37 > v21) {
    int v21 = v37;
  }
  unsigned int v38 = HIDWORD(v84);
  if (HIDWORD(v84))
  {
    if (HIWORD(HIDWORD(v84))) {
      unsigned int v38 = HIWORD(HIDWORD(v84));
    }
    unsigned __int16 v39 = 16 * (HIWORD(HIDWORD(v84)) != 0);
    if (v38 > 0xFF)
    {
      v38 >>= 8;
      unsigned __int16 v39 = (16 * (HIWORD(HIDWORD(v84)) != 0)) | 8;
    }
    if (v38 > 0xF)
    {
      v38 >>= 4;
      v39 |= 4u;
    }
    if (v38 > 3)
    {
      v38 >>= 2;
      v39 |= 2u;
    }
    int v40 = 2;
  }
  else
  {
    unsigned int v38 = v84;
    if (!v84)
    {
      int v42 = -64;
      goto LABEL_136;
    }
    if (WORD1(v84)) {
      unsigned int v38 = WORD1(v84);
    }
    unsigned __int16 v39 = 16 * (WORD1(v84) != 0);
    if (v38 > 0xFF)
    {
      v38 >>= 8;
      unsigned __int16 v39 = (16 * (WORD1(v84) != 0)) | 8;
    }
    if (v38 > 0xF)
    {
      v38 >>= 4;
      v39 |= 4u;
    }
    if (v38 > 3)
    {
      v38 >>= 2;
      v39 |= 2u;
    }
    int v40 = -30;
  }
  if (v38 <= 1) {
    unsigned __int16 v41 = v39;
  }
  else {
    unsigned __int16 v41 = v39 + 1;
  }
  int v42 = v40 + v41 - a3[3];
LABEL_136:
  if (v42 > v21) {
    int v21 = v42;
  }
  int v43 = 2;
  uint64_t v44 = a2;
  do
  {
    unint64_t v45 = 0;
    int v46 = v43;
    BOOL v47 = v43 == 0;
    unint64_t v48 = a1;
    do
    {
      a1 = v48 + 2;
      uint64_t v49 = &a3[2 * v47];
      if (v45 == 8) {
        ++v49;
      }
      int v50 = v21 + *v49;
      int64_t v51 = v48[1] | ((unint64_t)*v48 << 32);
      int64_t v52 = v51 << -(char)v50;
      if (v50 >= 0) {
        LODWORD(v52) = v51;
      }
      uint64_t v53 = (v51 >> v50) + ((unint64_t)(v51 << -(char)v50) >> 63);
      if (v50 < 1) {
        LODWORD(v53) = v52;
      }
      v44[v45 / 4] = v53;
      v45 += 4;
      unint64_t v48 = a1;
    }
    while (v45 != 12);
    int v43 = v46 - 1;
    uint64_t v44 = (_DWORD *)((char *)v44 + v45);
  }
  while (v46);
  int v54 = M3x3Flags(a2);
  if (v54 == 7) {
    return 1;
  }
  if ((unsigned __int16)v54 == 6)
  {
    uint64_t v55 = 0;
    unsigned int v56 = 0;
    int v87 = -1431655766;
    *(void *)&long long v57 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v57 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v85 = v57;
    long long v86 = v57;
    do
    {
      int v58 = a2[v55];
      if (v58 < 0) {
        int v58 = -v58;
      }
      *(_DWORD *)((char *)&v85 + v55 * 4) = v58;
      v56 |= v58;
      ++v55;
    }
    while ((v55 * 4) != 36);
    if (v56)
    {
      __int16 v59 = HIWORD(v56) != 0;
      if (HIWORD(v56)) {
        v56 >>= 16;
      }
      unsigned __int16 v60 = 16 * v59;
      if (v56 > 0xFF)
      {
        v56 >>= 8;
        unsigned __int16 v60 = (16 * (v59 & 1)) | 8;
      }
      if (v56 > 0xF)
      {
        v56 >>= 4;
        v60 |= 4u;
      }
      if (v56 > 3)
      {
        v56 >>= 2;
        v60 |= 2u;
      }
      if (v56 <= 1) {
        unsigned __int16 v61 = v60;
      }
      else {
        unsigned __int16 v61 = v60 + 1;
      }
      int v62 = v61 - 30;
    }
    else
    {
      int v62 = -31;
    }
    unsigned int v64 = DWORD1(v86) + DWORD2(v85);
    if (!(DWORD1(v86) + DWORD2(v85)))
    {
      unsigned int v70 = a2[8];
      if ((v70 & (v70 - 1)) != 0)
      {
        uint64_t v71 = 0;
        while (v70 > *(_DWORD *)((char *)&v85 + v71) >> 1 && v70 > *(_DWORD *)((char *)&v85 + v71 + 4) >> 1)
        {
          v71 += 12;
          if (v71 == 36)
          {
            uint64_t v72 = 0;
            float64x2_t v73 = (float64x2_t)vdupq_n_s64(0x3E10000000000000uLL);
            float64x2_t v74 = (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)(int)v70 * 9.31322575e-10), 0);
            do
            {
              uint64_t v75 = *(void *)&a2[v72];
              v76.i64[0] = (int)v75;
              v76.i64[1] = SHIDWORD(v75);
              *(int32x2_t *)&a2[v72] = vmovn_s64(vcvtq_n_s64_f64(vdivq_f64(vmulq_f64(vcvtq_f64_s64(v76), v73), v74), 0x1EuLL));
              v72 += 3;
            }
            while ((v72 * 4) != 36);
            uint64_t result = 0;
            a2[8] = 0x40000000;
            return result;
          }
        }
      }
      goto LABEL_198;
    }
    unsigned int v65 = HIWORD(v64);
    if (!HIWORD(v64)) {
      unsigned int v65 = DWORD1(v86) + DWORD2(v85);
    }
    if (v65 <= 0xFF)
    {
      unsigned __int16 v66 = 16 * (HIWORD(v64) != 0);
    }
    else
    {
      v65 >>= 8;
      unsigned __int16 v66 = (16 * (HIWORD(v64) != 0)) | 8;
    }
    if (v65 > 0xF)
    {
      v65 >>= 4;
      v66 |= 4u;
    }
    if (v65 > 3)
    {
      v65 >>= 2;
      v66 |= 2u;
    }
    if (v65 <= 1) {
      unsigned __int16 v67 = v66;
    }
    else {
      unsigned __int16 v67 = v66 + 1;
    }
    unsigned int v68 = v67;
    int v69 = v67 - 29;
    if (v68 < 0x1D)
    {
      if (v64 << (29 - v68) < 0x3FFF0001) {
        goto LABEL_196;
      }
    }
    else if (v64 <= 1073676288 << v69)
    {
LABEL_196:
      if (v69 > v62) {
        int v62 = v69;
      }
LABEL_198:
      if (v62 < 1)
      {
        if (v62)
        {
          uint64_t v78 = 0;
          int v79 = -v62;
          do
            a2[v78++] <<= v79;
          while ((v78 * 4) != 36);
        }
      }
      else
      {
        uint64_t v77 = 0;
        do
        {
          a2[v77] = (a2[v77] + (1 << (v62 - 1))) >> v62;
          ++v77;
        }
        while ((v77 * 4) != 36);
      }
      return 0;
    }
    int v69 = v68 - 28;
    goto LABEL_196;
  }
  return 0;
}

uint64_t M3x3Mul(int *a1, int a2, int32x2_t *a3, const int *a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  int v4 = (int)a4;
  uint64_t result = 1;
  switch(a2)
  {
    case -1:
    case 7:
      return result;
    case 1:
      if (a4)
      {
        int32x2_t v16 = *(int32x2_t *)(a1 + 6);
        do
        {
          *a3 = vadd_s32(*a3, v16);
          ++a3;
          --v4;
        }
        while (v4);
      }
      return 0;
    case 2:
      if (!a4) {
        return 0;
      }
      int v17 = a1[4];
      int v18 = *a1;
      uint64_t result = 0;
      while (!((unint64_t)(a3->i32[0] * (uint64_t)v18 + 0x800000008000) >> 48))
      {
        a3->i32[0] = (unint64_t)(a3->i32[0] * (uint64_t)v18 + 0x8000) >> 16;
        __int32 v19 = a3->i32[1];
        if ((unint64_t)(v19 * (uint64_t)v17 + 0x800000008000) >> 48) {
          break;
        }
        a3->i32[1] = (unint64_t)(v19 * (uint64_t)v17 + 0x8000) >> 16;
        ++a3;
        if (!--v4) {
          return result;
        }
      }
      return 1;
    case 3:
      if (!a4) {
        return 0;
      }
      int v20 = a1[4];
      uint64_t v22 = a1[6];
      uint64_t v21 = a1[7];
      int v23 = *a1;
      while (1)
      {
        __int32 v24 = a3->i32[1];
        uint64_t v25 = v22 + ((a3->i32[0] * (uint64_t)v23 + 0x8000) >> 16);
        a3->i32[0] = v25;
        if (v25 != (int)v25) {
          break;
        }
        uint64_t v26 = v21 + ((v24 * (uint64_t)v20 + 0x8000) >> 16);
        a3->i32[1] = v26;
        if (v26 != (int)v26) {
          break;
        }
        uint64_t result = 0;
        ++a3;
        if (!--v4) {
          return result;
        }
      }
      return 1;
    case 4:
    case 5:
      if (!a4) {
        return 0;
      }
      int v9 = a1[3];
      int v8 = a1[4];
      int v11 = *a1;
      int v10 = a1[1];
      while (1)
      {
        __int32 v12 = a3->i32[0];
        __int32 v13 = a3->i32[1];
        uint64_t v14 = a1[6] + ((v13 * (uint64_t)v9 + a3->i32[0] * (uint64_t)v11 + 0x8000) >> 16);
        a3->i32[0] = v14;
        if (v14 != (int)v14) {
          break;
        }
        uint64_t v15 = a1[7] + ((v13 * (uint64_t)v8 + v12 * (uint64_t)v10 + 0x8000) >> 16);
        a3->i32[1] = v15;
        if (v15 != (int)v15) {
          break;
        }
        ++a3;
        if (!--v4) {
          return 0;
        }
      }
      return 1;
    case 6:
      v35[2] = 0x10000;
      if (!a4) {
        return 0;
      }
      unint64_t v27 = (unint64_t)(a1[8] + 0x2000) >> 14;
      double v28 = (double)a1[2] * 9.31322575e-10;
      double v29 = (double)a1[5] * 9.31322575e-10;
      break;
    default:
      return 0;
  }
  while (1)
  {
    int v30 = a3->i32[1];
    unsigned int v31 = vcvtd_n_s64_f64(v28 * ((double)a3->i32[0] * 9.31322575e-10), 0x1EuLL);
    unsigned int v32 = vcvtd_n_s64_f64(v29 * ((double)v30 * 9.31322575e-10), 0x1EuLL);
    signed int v33 = v31 + v27 + v32;
    if (v33 < 1) {
      break;
    }
    --v4;
    v35[0] = a3->i32[0];
    v35[1] = v30;
    a3->i32[0] = VectorMultiplyDivide((uint64_t)v35, a1, v31 + v27 + v32, a4);
    a3->i32[1] = VectorMultiplyDivide((uint64_t)v35, a1 + 1, v33, v34);
    ++a3;
    if (!v4) {
      return 0;
    }
  }
  return 1;
}

uint64_t VectorMultiplyDivide(uint64_t a1, const int *a2, unsigned int a3, const int *a4)
{
  uint64_t v4 = 0;
  LODWORD(v5) = 0;
  unsigned int v6 = 0;
  int v7 = 1;
  do
  {
    v7 ^= 2u;
    unint64_t v8 = *a2 * (uint64_t)*(int *)(a1 + v4);
    unint64_t v9 = HIDWORD(v8);
    if ((_WORD)v7)
    {
      BOOL v10 = __CFADD__(v6, v8);
      v6 += v8;
      if (v10) {
        int v11 = v5;
      }
      else {
        int v11 = (unint64_t)(*a2 * (uint64_t)*(int *)(a1 + v4)) >> 32;
      }
      if (v10) {
        LODWORD(v5) = v9 + 1;
      }
      uint64_t v5 = (v5 + v11);
    }
    else
    {
      BOOL v10 = v6 >= v8;
      v6 -= v8;
      if (v10) {
        int v12 = -HIDWORD(v8);
      }
      else {
        int v12 = ~HIDWORD(v8);
      }
      uint64_t v5 = (v12 + v5);
    }
    a2 += 3;
    v4 += 4;
  }
  while (v4 != 12);
  return (uint64_t)(v6 | (unint64_t)(v5 << 32)) / a3;
}

uint64_t M3x3Concat(long long *a1, int a2, long long *a3, int a4)
{
  int v6 = a2;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (a2 == -1)
  {
    int v6 = M3x3Flags(a1);
    if (v6 == 7) {
      return 1;
    }
  }
  if (a4 == -1)
  {
    a4 = M3x3Flags(a3);
    if (a4 == 7) {
      return 1;
    }
  }
  if (!v6) {
    return 0;
  }
  if (!a4)
  {
    uint64_t result = 0;
    long long v10 = *a1;
    long long v11 = a1[1];
    *((_DWORD *)a3 + 8) = *((_DWORD *)a1 + 8);
    *a3 = v10;
    a3[1] = v11;
    return result;
  }
  if (v6 <= 1 && a4 != 6)
  {
    uint64_t result = 0;
    int v9 = *((_DWORD *)a3 + 7);
    *((_DWORD *)a3 + 6) += *((_DWORD *)a1 + 6);
    *((_DWORD *)a3 + 7) = *((_DWORD *)a1 + 7) + v9;
    return result;
  }
  if (v6 > 3)
  {
    if (v6 > 5)
    {
LABEL_48:
      uint64_t v39 = 0;
      v69[0] = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v67 = v40;
      long long v68 = v40;
      unsigned __int16 v41 = a1 + 2;
      long long v65 = v40;
      long long v66 = v40;
      int v64 = 269488144;
      uint64_t v42 = 2;
      do
      {
        uint64_t v43 = 0;
        uint64_t v44 = v42;
        unint64_t v45 = (int *)a3 + 3 * v42;
        int v47 = v45[1];
        int v46 = v45[2];
        int v48 = *v45;
        uint64_t v49 = v39;
        uint64_t v50 = 3;
        do
        {
          --v50;
          int64_t v51 = (char *)&v65 + v49;
          uint64_t v52 = *(int *)((char *)v41 + v43) * (uint64_t)v46;
          uint64_t v53 = (((unint64_t)v52 >> 13) & 1) + (v52 >> 14);
          *(void *)((char *)v69 + v49) = v53;
          unint64_t v54 = *(int *)((char *)v41 + v43 - 12) * (uint64_t)v47;
          unint64_t v55 = HIDWORD(v54);
          BOOL v56 = __CFADD__(v53, v54);
          int v57 = v53 + v54;
          if (v56)
          {
            int v58 = v55 + 1;
            __int16 v59 = (_DWORD *)(((unint64_t)&v65 + 24 * v44 + 8 * v50) | 4);
            LODWORD(v55) = *((_DWORD *)v51 + 17);
          }
          else
          {
            __int16 v59 = v51 + 68;
            int v58 = *((_DWORD *)v51 + 17);
          }
          *__int16 v59 = v58 + v55;
          unint64_t v60 = *(int *)((char *)v41 + v43 - 24) * (uint64_t)v48;
          unint64_t v61 = HIDWORD(v60);
          *((_DWORD *)v51 + 16) = v57 + v60;
          if (__CFADD__(v57, v60))
          {
            int v62 = HIDWORD(v60) + 1;
            unint64_t v63 = (_DWORD *)(((unint64_t)&v65 + 24 * v44 + 8 * v50) | 4);
            LODWORD(v61) = *(_DWORD *)((char *)v69 + v49 + 4);
          }
          else
          {
            unint64_t v63 = (_DWORD *)((char *)v69 + v49 + 4);
            int v62 = *(_DWORD *)((char *)v69 + v49 + 4);
          }
          _DWORD *v63 = v62 + v61;
          v43 -= 4;
          v49 -= 8;
        }
        while (v43 != -12);
        uint64_t v42 = v44 - 1;
        v39 -= 24;
      }
      while (v44);
      return M3x3WideNorm((unsigned int *)&v65, a3, (char *)&v64);
    }
    LODWORD(v67) = -1431655766;
    *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v23 = 2;
    uint64_t v24 = 24;
    long long v65 = v22;
    long long v66 = v22;
    uint64_t v25 = a3;
    uint64_t v26 = (char *)&v66 + 12;
LABEL_32:
    unint64_t v27 = 0;
    uint64_t v28 = v23;
    uint64_t v29 = 3 * v23;
    int v30 = *((_DWORD *)a3 + 3 * v23 + 2);
    *((_DWORD *)&v65 + v29 + 2) = v30;
    uint64_t v31 = v24;
    uint64_t v32 = 4;
    while (1)
    {
      int v33 = *(_DWORD *)((char *)v25 + v27 + 28);
      int v34 = a1[v27 / 4 + 1];
      if ((unint64_t)(v34 * (uint64_t)v33 + 0x800000008000) >> 48) {
        goto LABEL_48;
      }
      uint64_t v35 = ((*(int *)((char *)a1 + v32) * (uint64_t)*(int *)((char *)a3 + v31) + 0x8000) >> 16)
          + ((((v34 * (uint64_t)v33) << 16) + 0x80000000) >> 32);
      *(_DWORD *)&v26[v27] = v35;
      if (v35 != (int)v35) {
        goto LABEL_48;
      }
      if ((v6 & 1) == 0) {
        goto LABEL_44;
      }
      if (v28 == 2)
      {
        if (a4 == 6)
        {
          uint64_t v36 = *(int *)((char *)&v66 + v27 + 12)
              + ((*(int *)((char *)a1 + v27 + 28) * (uint64_t)*((int *)a3 + 8) + 0x20000000) >> 30);
          *(_DWORD *)((char *)&v66 + v27 + 12) = v36;
          goto LABEL_41;
        }
        *(_DWORD *)((char *)&v66 + v27 + 12) += *(_DWORD *)((char *)a1 + v27 + 28);
      }
      else if (a4 == 6)
      {
        uint64_t v36 = v35 + ((*(int *)((char *)a1 + v27 + 28) * (uint64_t)v30 + 0x20000000) >> 30);
        *(_DWORD *)&v26[v27] = v36;
LABEL_41:
        if (v36 != (int)v36) {
          goto LABEL_48;
        }
      }
LABEL_44:
      v32 += 8;
      v31 += 4;
      v27 -= 4;
      if (v27 == -8)
      {
        uint64_t v23 = v28 - 1;
        v24 -= 12;
        v26 -= 12;
        uint64_t v25 = (long long *)((char *)v25 - 12);
        if (!v28)
        {
          uint64_t result = 0;
          long long v37 = v66;
          *a3 = v65;
          a3[1] = v37;
          *((_DWORD *)a3 + 8) = v67;
          return result;
        }
        goto LABEL_32;
      }
    }
  }
  long long v12 = a3[1];
  long long v70 = *a3;
  long long v71 = v12;
  uint64_t v13 = 2;
  int v72 = *((_DWORD *)a3 + 8);
  uint64_t v14 = a3;
  while (2)
  {
    uint64_t v15 = v13;
    int32x2_t v16 = (int *)a3 + 3 * v13 + 2;
    uint64_t v17 = 28;
    for (uint64_t i = 1; i != -1; --i)
    {
      if (v6 >= 2)
      {
        int v19 = *(_DWORD *)((char *)v14 + v17);
        int v20 = a1[i];
        *(_DWORD *)((char *)v14 + v17) = (unint64_t)(v20 * (uint64_t)v19 + 0x8000) >> 16;
        if ((unint64_t)(v20 * (uint64_t)v19 + 0x800000008000) >> 48)
        {
LABEL_47:
          long long v38 = v71;
          *a3 = v70;
          a3[1] = v38;
          *((_DWORD *)a3 + 8) = v72;
          goto LABEL_48;
        }
      }
      if (v6)
      {
        if (v15 == 2)
        {
          if (a4 != 6)
          {
            *(_DWORD *)((char *)a3 + v17) += *(_DWORD *)((char *)a1 + v17);
            goto LABEL_27;
          }
          uint64_t v21 = *(int *)((char *)a3 + v17)
              + ((*(int *)((char *)a1 + v17) * (uint64_t)*((int *)a3 + 8) + 0x20000000) >> 30);
          *(_DWORD *)((char *)a3 + v17) = v21;
        }
        else
        {
          if (a4 != 6) {
            goto LABEL_27;
          }
          uint64_t v21 = *(int *)((char *)v14 + v17) + ((*(int *)((char *)a1 + v17) * (uint64_t)*v16 + 0x20000000) >> 30);
          *(_DWORD *)((char *)v14 + v17) = v21;
        }
        if (v21 != (int)v21) {
          goto LABEL_47;
        }
      }
LABEL_27:
      v17 -= 4;
    }
    uint64_t result = 0;
    uint64_t v13 = v15 - 1;
    uint64_t v14 = (long long *)((char *)v14 - 12);
    if (v15) {
      continue;
    }
    return result;
  }
}

uint64_t InvertMapping3x3(uint64_t a1, int *a2)
{
  int v10 = -1431655766;
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v8 = v4;
  long long v9 = v4;
  int v5 = M3x3Flags(a2);
  if (M3x3Inverse(a2, v5, (uint64_t)&v8)) {
    return 0;
  }
  if (&v8 != (long long *)a1)
  {
    long long v6 = v9;
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 32) = v10;
  }
  return a1;
}

const unsigned __int8 *BCDtoASCII(const unsigned __int8 *a1, const unsigned __int8 *a2, char (*a3)[18])
{
  char v3 = 0;
  char v4 = 0;
  LOBYTE(v5) = 0;
  long long v6 = a3;
  int v7 = a1;
  while (1)
  {
    if (v4)
    {
      unsigned int v8 = v5 & 0xF;
    }
    else
    {
      if (v7 < a1 || v7 + 1 > a2) {
        goto LABEL_19;
      }
      unsigned int v5 = *v7;
      unsigned int v8 = v5 >> 4;
      ++v7;
    }
    if (v8 > 9)
    {
      switch(v8)
      {
        case 0xAu:
          *(unsigned char *)long long v6 = 46;
          long long v6 = (char (*)[18])((char *)v6 + 1);
          goto LABEL_18;
        case 0xBu:
          if (v3) {
            goto LABEL_19;
          }
          *(unsigned char *)long long v6 = 69;
          long long v6 = (char (*)[18])((char *)v6 + 1);
          break;
        case 0xCu:
          if (v3) {
            goto LABEL_19;
          }
          *(unsigned char *)long long v6 = 69;
          if ((char *)v6 - (char *)a3 + 1 >= 18) {
            goto LABEL_19;
          }
          (*v6)[1] = 45;
          long long v6 = (char (*)[18])((char *)v6 + 2);
          break;
        case 0xEu:
          *(unsigned char *)long long v6 = 45;
          long long v6 = (char (*)[18])((char *)v6 + 1);
          goto LABEL_18;
        case 0xFu:
          *(unsigned char *)long long v6 = 0;
          return v7;
        default:
          goto LABEL_18;
      }
      char v3 = 1;
    }
    else
    {
      *(unsigned char *)long long v6 = v8 | 0x30;
      long long v6 = (char (*)[18])((char *)v6 + 1);
    }
LABEL_18:
    v4 ^= 1u;
    if ((char *)v6 - (char *)a3 >= 18)
    {
LABEL_19:
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DD4440;
      exception[2] = 4;
    }
  }
}

void *TCFFFontSetInfo::GetData(void *this, void *a2, int a3, uint64_t a4)
{
  uint64_t v4 = a2[371];
  unint64_t v5 = a2[372] - v4;
  if (a4 && (a3 + a4 > (unint64_t)a3 ? (BOOL v6 = a3 + a4 > v5) : (BOOL v6 = 1), v6)
    || (uint64_t v7 = a2[370]) == 0
    || (uint64_t v8 = *(void *)(v7 + 8)) == 0)
  {
    this[1] = 0;
    this[2] = 0;
  }
  else
  {
    this[1] = v8 + v4 + a3;
    this[2] = v5 - a3;
  }
  *this = &unk_1F0DD4340;
  return this;
}

uint64_t TCFFFontInfo::GetIndexedArray(uint64_t a1, uint64_t a2, int a3, int a4, void *a5, void *a6)
{
  if (!a4) {
    goto LABEL_7;
  }
  if ((a4 + a3) > *(_DWORD *)a2) {
    goto LABEL_7;
  }
  int v10 = *(unsigned __int8 *)(a2 + 4);
  int v11 = v10 * a4;
  TCFFFontSetInfo::GetData(v24, *(void **)(*(void *)a1 + 296), *(_DWORD *)(a2 + 8) + v10 * a3, (v10 + v10 * a4));
  uint64_t v12 = v24[1];
  uint64_t v13 = v24[2];
  *(void *)(a2 + 24) = v24[1];
  *(void *)(a2 + 32) = v13;
  *a5 = v12;
  int v14 = *(_DWORD *)(a2 + 12);
  memset(v24, 170, sizeof(v24));
  MDataReference::MDataReference((MDataReference *)v24, (const MDataReference *)(a2 + 16), v11, 0);
  unsigned int v15 = ReadBytes((const MDataReference *)v24, (const char *)*(unsigned __int8 *)(a2 + 4)) + v14 - 1;
  if (v14 - 1 >= v15
    || (uint64_t v16 = v15 - v14, v15 == v14)
    || (TCFFFontSetInfo::GetData(&v21, *(void **)(*(void *)a1 + 296), v14, v16),
        uint64_t v17 = v22,
        uint64_t v18 = v23,
        *(void *)(a2 + 48) = v22,
        *(void *)(a2 + 56) = v18,
        (*a6 = v17) == 0))
  {
LABEL_7:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  return v16;
}

uint64_t TCFFFontSetInfo::GetIndexedArrayOffset(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  ASSERT(*(unsigned char *)(a3 + 4) != 0, (const char *)a2);
  ASSERT(*(unsigned __int8 *)(a3 + 4) < 5u, v8);
  ASSERT(*(_DWORD *)a3 >= a4, v9);
  int v10 = *(_DWORD *)(a3 + 8);
  uint64_t v11 = *(unsigned __int8 *)(a3 + 4);
  TCFFFontSetInfo::GetData(v14, *(void **)(a1 + 296), v10 + v11 * a4, v11);
  uint64_t v12 = v14[2];
  *(void *)(a2 + 8) = v14[1];
  *(void *)(a2 + 16) = v12;
  return ReadBytesInc((MDataReference *)a2, (const char *)v11) - 1;
}

void TCFFFontInfo::EnumerateFontDict(uint64_t a1, const char *a2, uint64_t a3, uint64_t (*a4)(const unsigned __int8 *, uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v7 = 8;
  if (a2 == 6) {
    uint64_t v7 = 352;
  }
  int v57 = (int *)(a1 + 352);
  if (a2 == 6) {
    uint64_t v8 = a1 + 352;
  }
  else {
    uint64_t v8 = a1 + 8;
  }
  unsigned int v9 = *(_DWORD *)(v8 + 4);
  uint64_t v10 = *(unsigned int *)(a1 + v7);
  int v59 = (int)a2;
  if (a2) {
    BOOL v11 = (int)a2 < 7;
  }
  else {
    BOOL v11 = 0;
  }
  int v12 = v11;
  if (v12 == 1)
  {
    TCFFFontSetInfo::GetData(&v65, *(void **)(*(void *)a1 + 296), v9, v10);
    uint64_t v13 = v66;
    uint64_t v14 = v67;
    *(void *)(v8 + 24) = v66;
    *(void *)(v8 + 32) = v14;
    BOOL v15 = v13 != 0;
  }
  else
  {
    BOOL v15 = 0;
  }
  ASSERT(v15, a2);
  unsigned int v16 = v10 + v9;
  bzero((void *)(a1 + 54), 0x4BuLL);
  uint64_t v17 = *(const unsigned __int8 **)(v8 + 24);
  unint64_t v64 = *(void *)(v8 + 32);
  BOOL v19 = v59 == 2 || v59 == 4;
  *(_DWORD *)int v58 = v19;
  while (v9 < v16)
  {
    unsigned __int16 v63 = 0;
    int v62 = 0;
    int v20 = CFFScanNextOpCode(v17, &v64, &v62, &v63);
    uint64_t v21 = v20 - v17;
    uint64_t v22 = v63;
    ASSERT(v63 < 0x4BuLL, v23);
    ++*(unsigned char *)(a1 + v22 + 54);
    if (!*(unsigned char *)(v8 + 8))
    {
      switch((int)v22)
      {
        case 15:
          int v61 = -1;
          uint64_t v26 = v62 == 1 && CFFDictGet<unsigned int,0u>(v17, v21, &v61, 4);
          ASSERT(v26, v24);
          int v50 = v61;
          switch(v61)
          {
            case 2:
              int64_t v51 = &ExpertSubsetGlyphID_to_StringID;
              uint64_t v52 = 86;
              goto LABEL_67;
            case 1:
              int64_t v51 = &ExpertGlyphID_to_StringID;
              uint64_t v52 = 165;
              goto LABEL_67;
            case 0:
              int64_t v51 = &StandardRomanGlyphID_to_StringID;
              uint64_t v52 = 228;
LABEL_67:
              *(void *)(a1 + 456) = v51;
              *(void *)(a1 + 464) = v52;
              goto LABEL_24;
          }
          *(void *)(a1 + 456) = 0;
          *(void *)(a1 + 464) = 0;
          memset(v60, 170, sizeof(v60));
          TCFFFontSetInfo::GetData(v60, *(void **)(*(void *)a1 + 296), v50, 1);
          if (!v60[1] || !v60[2])
          {
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = &unk_1F0DD4440;
            exception[2] = 4;
          }
          unsigned int v54 = *(unsigned __int8 *)v60[1];
          *(unsigned char *)(a1 + 480) = v54;
          ASSERT(v54 < 3, v53);
          *(_DWORD *)(a1 + 484) = v61 + 1;
          break;
        case 16:
          ASSERT(v59 == 1, v24);
          int v30 = v17;
          uint64_t v31 = v20 - v17;
          uint64_t v32 = (int *)(a1 + 272);
          uint64_t v33 = 4;
          goto LABEL_39;
        case 17:
          BOOL v34 = 0;
          LODWORD(v60[0]) = 0;
          if (v62 == 1) {
            BOOL v34 = CFFDictGet<unsigned int,0u>(v17, v21, (int *)v60, 4);
          }
          ASSERT(v34, v24);
          TCFFFontSetInfo::GetArrayInfo(*(void *)a1, a1 + 136, v60[0]);
          break;
        case 18:
          if (v62 == 2)
          {
            int v30 = v17;
            uint64_t v31 = v20 - v17;
            uint64_t v32 = v57;
            uint64_t v33 = 8;
LABEL_39:
            BOOL v35 = CFFDictGet<unsigned int,0u>(v30, v31, v32, v33);
          }
          else
          {
            BOOL v35 = 0;
          }
          goto LABEL_59;
        case 19:
          ASSERT(v59 == 6, v24);
          LODWORD(v60[0]) = 0;
          BOOL v45 = CFFDictGet<int,0u>(v17, v21, (int *)v60, 4);
          ASSERT(v45, v46);
          TCFFFontSetInfo::GetArrayInfo(*(void *)a1, a1 + 280, LODWORD(v60[0]) + *(_DWORD *)(a1 + 356));
          int v47 = *(_DWORD *)(a1 + 280);
          if (v47 >= 33899) {
            __int16 v48 = 0x8000;
          }
          else {
            __int16 v48 = 1131;
          }
          if (v47 >= 1239) {
            __int16 v49 = v48;
          }
          else {
            __int16 v49 = 107;
          }
          if (*(_WORD *)(a1 + 392) == 1) {
            __int16 v49 = 0;
          }
          *(_WORD *)(a1 + 344) = v49;
          break;
        case 20:
        case 21:
        case 23:
          break;
        case 22:
          ASSERT(v59 == 6, v24);
          uint64_t v42 = v17;
          uint64_t v43 = v20 - v17;
          uint64_t v44 = (_WORD *)(a1 + 448);
          goto LABEL_57;
        case 24:
          ASSERT((v59 & 0xFFFFFFFE) == 4, v24);
          LODWORD(v60[0]) = 0;
          BOOL v36 = CFFDictGet<unsigned int,0u>(v17, v21, (int *)v60, 4);
          ASSERT(v36, v37);
          long long v38 = *(void **)(*(void *)a1 + 296);
          uint64_t v39 = v38[370];
          if (v39)
          {
            uint64_t v39 = *(void *)(v39 + 8);
            if (v39) {
              v39 += v38[371];
            }
          }
          unint64_t v40 = v39 + v38[372] - v38[371];
          uint64_t v41 = v39 + (LODWORD(v60[0]) + 2);
          if (v41 + 8 > v40 || (ItemVariationStore::Initialize((void *)(a1 + 400), v41, v40) & 1) == 0) {
            goto LABEL_72;
          }
          break;
        default:
          if (v22 == 38)
          {
            uint64_t v42 = v17;
            uint64_t v43 = v20 - v17;
            uint64_t v44 = (_WORD *)(a1 + 392);
LABEL_57:
            BOOL v35 = CFFDictGet<unsigned short,0u>(v42, v43, v44, 2);
LABEL_59:
            ASSERT(v35, v24);
          }
          else if (v22 == 68)
          {
            ASSERT(*(unsigned int *)v58, v24);
            LODWORD(v60[0]) = 0;
            BOOL v27 = CFFDictGet<unsigned int,0u>(v17, v21, (int *)v60, 4);
            ASSERT(v27, v28);
            TCFFFontSetInfo::GetArrayInfo(*(void *)a1, a1 + 208, v60[0]);
            unsigned int v29 = *(_DWORD *)(a1 + 208);
            if (v29 >= 0x10000)
            {
LABEL_72:
              unint64_t v55 = __cxa_allocate_exception(0x10uLL);
              *(void *)unint64_t v55 = &unk_1F0DD4440;
              v55[2] = 4;
            }
            *(_WORD *)(a1 + 200) = v29;
          }
          break;
      }
    }
LABEL_24:
    v9 += v21;
    char v25 = a4(v17, v21, v22, (__int16)v62, a3);
    uint64_t v17 = v20;
    if ((v25 & 1) == 0) {
      return;
    }
  }
}

BOOL CFFDictGet<unsigned int,0u>(const unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4)
{
  v26[3] = *MEMORY[0x1E4F143B8];
  if (a1 == (const unsigned __int8 *)-1 || (uint64_t v4 = a1, v5 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_40:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  BOOL v6 = a3;
  unint64_t v7 = (unint64_t)a3 + a4;
  while (1)
  {
    uint64_t v8 = v4 + 1;
    unsigned int v9 = *v4;
    switch(v9)
    {
      case 0x1Eu:
        memset(v26, 170, 18);
        uint64_t v4 = BCDtoASCII(v8, v5, (char (*)[18])v26);
        int v14 = llround(atof_l((const char *)v26, 0));
        goto LABEL_20;
      case 0x1Du:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
        {
          uint64_t v22 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v22 = &unk_1F0DD4440;
          v22[2] = 4;
        }
        unsigned int v13 = *(_DWORD *)(v4 + 1);
        v4 += 5;
        int v14 = bswap32(v13);
        goto LABEL_20;
      case 0x1Cu:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFDLL || v4 + 3 > v5)
        {
          uint64_t v21 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v21 = &unk_1F0DD4440;
          _OWORD v21[2] = 4;
        }
        int v10 = v4[1];
        int v11 = v4[2];
        v4 += 3;
        int v12 = (v10 << 24) | (v11 << 16);
LABEL_19:
        int v14 = v12 >> 16;
        goto LABEL_20;
    }
    if (v9 < 0x20) {
      return v9 != 23;
    }
    if (v9 == 255)
    {
      if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
      {
        uint64_t v23 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v23 = &unk_1F0DD4440;
        _OWORD v23[2] = 4;
      }
      int v12 = (v4[1] << 24) | (v4[2] << 16);
      v4 += 5;
      goto LABEL_19;
    }
    if (v9 > 0xF6)
    {
      BOOL v16 = v4 != (const unsigned __int8 *)-2 && v4 + 2 <= v5;
      if (v9 > 0xFA)
      {
        if (!v16)
        {
          uint64_t v24 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v24 = &unk_1F0DD4440;
          long long v24[2] = 4;
        }
        int v18 = v4[1];
        v4 += 2;
        int v14 = 64148 - (v18 | (v9 << 8));
      }
      else
      {
        if (!v16)
        {
          char v25 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v25 = &unk_1F0DD4440;
          v25[2] = 4;
        }
        int v17 = v4[1];
        v4 += 2;
        int v14 = (v17 | (v9 << 8)) - 63124;
      }
    }
    else
    {
      int v14 = v9 - 139;
      ++v4;
    }
LABEL_20:
    if ((unint64_t)v6 >= v7) {
      return 0;
    }
    *v6++ = v14;
    if (v4 == (const unsigned __int8 *)-1 || v4 + 1 > v5) {
      goto LABEL_40;
    }
  }
}

BOOL CFFDictGet<unsigned short,0u>(const unsigned __int8 *a1, uint64_t a2, _WORD *a3, uint64_t a4)
{
  void v24[3] = *MEMORY[0x1E4F143B8];
  if (a1 == (const unsigned __int8 *)-1 || (uint64_t v4 = a1, v5 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_40:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  BOOL v6 = a3;
  unint64_t v7 = (unint64_t)a3 + a4;
  while (1)
  {
    uint64_t v8 = v4 + 1;
    unsigned int v9 = *v4;
    switch(v9)
    {
      case 0x1Eu:
        memset(v24, 170, 18);
        uint64_t v4 = BCDtoASCII(v8, v5, (char (*)[18])v24);
        LOWORD(v9) = llround(atof_l((const char *)v24, 0));
        goto LABEL_20;
      case 0x1Du:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
        {
          int v20 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v20 = &unk_1F0DD4440;
          v20[2] = 4;
        }
        unsigned int v9 = *(unsigned __int16 *)(v4 + 3);
        v4 += 5;
        LOWORD(v9) = __rev16(v9);
        goto LABEL_20;
      case 0x1Cu:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFDLL || v4 + 3 > v5)
        {
          BOOL v19 = __cxa_allocate_exception(0x10uLL);
          *(void *)BOOL v19 = &unk_1F0DD4440;
          v19[2] = 4;
        }
        int v10 = v4[1];
        int v11 = v4[2];
        v4 += 3;
        int v12 = (v10 << 24) | (v11 << 16);
LABEL_19:
        unsigned int v9 = v12 >> 16;
        goto LABEL_20;
    }
    if (v9 < 0x20) {
      return v9 != 23;
    }
    if (v9 == 255)
    {
      if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
      {
        uint64_t v21 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v21 = &unk_1F0DD4440;
        _OWORD v21[2] = 4;
      }
      int v12 = (v4[1] << 24) | (v4[2] << 16);
      v4 += 5;
      goto LABEL_19;
    }
    if (v9 > 0xF6)
    {
      BOOL v14 = v4 != (const unsigned __int8 *)-2 && v4 + 2 <= v5;
      if (v9 > 0xFA)
      {
        if (!v14)
        {
          uint64_t v22 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v22 = &unk_1F0DD4440;
          v22[2] = 4;
        }
        __int16 v16 = v4[1];
        v4 += 2;
        LOWORD(v9) = -1388 - (v16 | ((_WORD)v9 << 8));
      }
      else
      {
        if (!v14)
        {
          uint64_t v23 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v23 = &unk_1F0DD4440;
          _OWORD v23[2] = 4;
        }
        __int16 v15 = v4[1];
        v4 += 2;
        LOWORD(v9) = (v15 | ((_WORD)v9 << 8)) + 2412;
      }
    }
    else
    {
      LOWORD(v9) = v9 - 139;
      ++v4;
    }
LABEL_20:
    if ((unint64_t)v6 >= v7) {
      return 0;
    }
    *v6++ = v9;
    if (v4 == (const unsigned __int8 *)-1 || v4 + 1 > v5) {
      goto LABEL_40;
    }
  }
}

BOOL CFFDictGet<int,0u>(const unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4)
{
  v26[3] = *MEMORY[0x1E4F143B8];
  if (a1 == (const unsigned __int8 *)-1 || (uint64_t v4 = a1, v5 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_40:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  BOOL v6 = a3;
  unint64_t v7 = (unint64_t)a3 + a4;
  while (1)
  {
    uint64_t v8 = v4 + 1;
    unsigned int v9 = *v4;
    switch(v9)
    {
      case 0x1Eu:
        memset(v26, 170, 18);
        uint64_t v4 = BCDtoASCII(v8, v5, (char (*)[18])v26);
        int v14 = llround(atof_l((const char *)v26, 0));
        goto LABEL_20;
      case 0x1Du:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
        {
          uint64_t v22 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v22 = &unk_1F0DD4440;
          v22[2] = 4;
        }
        unsigned int v13 = *(_DWORD *)(v4 + 1);
        v4 += 5;
        int v14 = bswap32(v13);
        goto LABEL_20;
      case 0x1Cu:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFDLL || v4 + 3 > v5)
        {
          uint64_t v21 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v21 = &unk_1F0DD4440;
          _OWORD v21[2] = 4;
        }
        int v10 = v4[1];
        int v11 = v4[2];
        v4 += 3;
        int v12 = (v10 << 24) | (v11 << 16);
LABEL_19:
        int v14 = v12 >> 16;
        goto LABEL_20;
    }
    if (v9 < 0x20) {
      return v9 != 23;
    }
    if (v9 == 255)
    {
      if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
      {
        uint64_t v23 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v23 = &unk_1F0DD4440;
        _OWORD v23[2] = 4;
      }
      int v12 = (v4[1] << 24) | (v4[2] << 16);
      v4 += 5;
      goto LABEL_19;
    }
    if (v9 > 0xF6)
    {
      BOOL v16 = v4 != (const unsigned __int8 *)-2 && v4 + 2 <= v5;
      if (v9 > 0xFA)
      {
        if (!v16)
        {
          uint64_t v24 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v24 = &unk_1F0DD4440;
          long long v24[2] = 4;
        }
        int v18 = v4[1];
        v4 += 2;
        int v14 = 64148 - (v18 | (v9 << 8));
      }
      else
      {
        if (!v16)
        {
          char v25 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v25 = &unk_1F0DD4440;
          v25[2] = 4;
        }
        int v17 = v4[1];
        v4 += 2;
        int v14 = (v17 | (v9 << 8)) - 63124;
      }
    }
    else
    {
      int v14 = v9 - 139;
      ++v4;
    }
LABEL_20:
    if ((unint64_t)v6 >= v7) {
      return 0;
    }
    *v6++ = v14;
    if (v4 == (const unsigned __int8 *)-1 || v4 + 1 > v5) {
      goto LABEL_40;
    }
  }
}

uint64_t TCFFFontInfo::EnumerateDict(uint64_t a1, const char *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  int v6 = (int)a2;
  uint64_t result = ASSERT(*(_DWORD *)(a1 + 48) == 1, a2);
  if (v6 == 8)
  {
    unsigned int v9 = *(_DWORD *)(a1 + 272);
    if (v9 < 2)
    {
      if (v9 == 1)
      {
        if (*(_UNKNOWN **)(a1 + 456) == &ExpertSubsetGlyphID_to_StringID) {
          uint64_t v21 = &AdobeExpertSubsetCode_to_StringID;
        }
        else {
          uint64_t v21 = &AdobeExpertCode_to_StringID;
        }
      }
      else
      {
        uint64_t v21 = &AdobeStandardCode_to_StringID;
      }
      *(void *)(a1 + 472) = v21;
      for (uint64_t i = 0; i != 256; ++i)
      {
        if (*(_WORD *)(*(void *)(a1 + 472) + 2 * i)) {
          uint64_t result = a4(0, 0);
        }
      }
    }
    else
    {
      if (*(void *)(a1 + 456)) {
        int v10 = StandardGlyphIDToStringID;
      }
      else {
        int v10 = SpecialGlyphIDToStringID;
      }
      memset(v43, 170, sizeof(v43));
      TCFFFontSetInfo::GetData(v43, *(void **)(*(void *)a1 + 296), v9, 1);
      ByteInCGFloat c = ReadByteInc((MDataReference *)v43);
      uint64_t result = ReadByteInc((MDataReference *)v43);
      int v13 = result;
      if ((ByteInc & 0x7F) != 0)
      {
        uint64_t result = ASSERT((ByteInc & 0x7F) == 1, v12);
        if (v13)
        {
          int v14 = 0;
          int v15 = 1;
          do
          {
            uint64_t v16 = ReadByteInc((MDataReference *)v43);
            int v17 = ReadByteInc((MDataReference *)v43) + 1;
            do
            {
              uint64_t v18 = v10((const TCFFFontInfo *)a1, (unsigned __int16)v15);
              uint64_t result = ((uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))a4)(0, 0, v18, v16, a3);
              ++v15;
              uint64_t v16 = (v16 + 1);
              --v17;
            }
            while (v17);
            ++v14;
          }
          while (v14 != v13);
        }
      }
      else if (result)
      {
        int v34 = 0;
        do
        {
          uint64_t v35 = v10((const TCFFFontInfo *)a1, (unsigned __int16)++v34);
          uint64_t v36 = ReadByteInc((MDataReference *)v43);
          uint64_t result = ((uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))a4)(0, 0, v35, v36, a3);
        }
        while (v13 != v34);
      }
      if (ByteInc < 0)
      {
        uint64_t result = ReadByteInc((MDataReference *)v43);
        if (result)
        {
          int v37 = result;
          do
          {
            uint64_t v38 = ReadByteInc((MDataReference *)v43);
            BytesInCGFloat c = ReadBytesInc((MDataReference *)v43, (const char *)2);
            uint64_t result = ((uint64_t (*)(void, void, void, uint64_t, uint64_t))a4)(0, 0, BytesInc, v38, a3);
            --v37;
          }
          while (v37);
        }
      }
    }
  }
  else
  {
    uint64_t result = ((uint64_t (*)(void, void, void, void, uint64_t))a4)(0, 0, 0, 0, a3);
    if (*(void *)(a1 + 456))
    {
      if (*(_DWORD *)(a1 + 136) >= 2u)
      {
        uint64_t v19 = 1;
        do
        {
          if ((_WORD)v19 && *(void *)(a1 + 464) > (unint64_t)(unsigned __int16)(v19 - 1)) {
            uint64_t v20 = *(unsigned __int16 *)(*(void *)(a1 + 456) + 2 * (unsigned __int16)(v19 - 1));
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t result = ((uint64_t (*)(void, void, uint64_t, uint64_t, uint64_t))a4)(0, 0, v20, v19, a3);
          uint64_t v19 = (v19 + 1);
        }
        while (v19 < *(_DWORD *)(a1 + 136));
      }
    }
    else
    {
      uint64_t v22 = *(void **)(*(void *)a1 + 296);
      uint64_t v23 = v22[370];
      if (v23 && (uint64_t v24 = *(void *)(v23 + 8)) != 0)
      {
        uint64_t v25 = *(int *)(a1 + 484);
        uint64_t v26 = v22[372];
        uint64_t v27 = v22[371];
        v43[1] = v24 + v27 + v25;
        v43[2] = v26 - (v27 + v25);
      }
      else
      {
        v43[1] = 0;
        v43[2] = 0;
      }
      v43[0] = &unk_1F0DD4340;
      if (*(unsigned char *)(a1 + 480))
      {
        if (*(unsigned char *)(a1 + 480) == 1) {
          uint64_t v28 = 1;
        }
        else {
          uint64_t v28 = 2;
        }
        __int16 v29 = ReadBytesInc((MDataReference *)v43, (const char *)2);
        uint64_t result = ReadBytesInc((MDataReference *)v43, (const char *)v28);
        if (*(_DWORD *)(a1 + 136) != 1)
        {
          unsigned int v30 = result;
          LODWORD(v31) = 0;
          __int16 v32 = 0;
          do
          {
            if (v31 > v30)
            {
              __int16 v29 = ReadBytesInc((MDataReference *)v43, (const char *)2);
              __int16 v32 = v30 + 1;
              v30 += ReadBytesInc((MDataReference *)v43, (const char *)v28) + 1;
            }
            unsigned __int16 v33 = v29 + v31 - v32;
            uint64_t v31 = (v31 + 1);
            uint64_t result = ((uint64_t (*)(void, void, void, uint64_t, uint64_t))a4)(0, 0, v33, v31, a3);
          }
          while (v31 < *(_DWORD *)(a1 + 136) - 1);
        }
      }
      else if (*(_DWORD *)(a1 + 136) != 1)
      {
        LODWORD(v40) = 0;
        do
        {
          unsigned __int16 v41 = ReadBytesInc((MDataReference *)v43, (const char *)2);
          uint64_t v40 = (v40 + 1);
          uint64_t result = ((uint64_t (*)(void, void, void, uint64_t, uint64_t))a4)(0, 0, v41, v40, a3);
        }
        while (v40 < *(_DWORD *)(a1 + 136) - 1);
      }
    }
  }
  return result;
}

uint64_t StandardGlyphIDToStringID(const TCFFFontInfo *a1, int a2)
{
  if (a2 && *((void *)a1 + 58) > (unint64_t)(unsigned __int16)(a2 - 1)) {
    return *(unsigned __int16 *)(*((void *)a1 + 57) + 2 * (unsigned __int16)(a2 - 1));
  }
  else {
    return 0;
  }
}

uint64_t SpecialGlyphIDToStringID(const TCFFFontInfo *a1, int a2)
{
  if (!a2)
  {
    LOWORD(result) = 0;
    return (unsigned __int16)result;
  }
  unsigned __int16 v2 = a2 - 1;
  uint64_t v3 = *((unsigned __int8 *)a1 + 480);
  if (v3 != 1)
  {
    if (!*((unsigned char *)a1 + 480))
    {
      unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
      uint64_t v4 = *(void **)(*(void *)a1 + 296);
      uint64_t v5 = v4[370];
      if (v5 && (uint64_t v6 = *(void *)(v5 + 8)) != 0)
      {
        uint64_t v7 = v4[372];
        uint64_t v8 = v4[371];
        uint64_t v9 = *((_DWORD *)a1 + 121) + 2 * v2;
        unint64_t v22 = v6 + v8 + v9;
        unint64_t v23 = v7 - (v8 + v9);
      }
      else
      {
        unint64_t v22 = 0;
        unint64_t v23 = 0;
      }
      uint64_t v21 = &unk_1F0DD4340;
      LOWORD(result) = ReadBytes((const MDataReference *)&v21, (const char *)2);
      return (unsigned __int16)result;
    }
    uint64_t v3 = 2;
  }
  unint64_t v22 = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
  int v11 = *(void **)(*(void *)a1 + 296);
  uint64_t v12 = v11[370];
  if (v12 && (uint64_t v13 = *(void *)(v12 + 8)) != 0)
  {
    uint64_t v14 = *((int *)a1 + 121);
    uint64_t v15 = v11[372];
    uint64_t v16 = v11[371];
    unint64_t v22 = v13 + v16 + v14;
    unint64_t v23 = v15 - (v16 + v14);
  }
  else
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0;
  }
  uint64_t v21 = &unk_1F0DD4340;
  BytesInCGFloat c = ReadBytesInc((MDataReference *)&v21, (const char *)2);
  unsigned int v18 = ReadBytesInc((MDataReference *)&v21, (const char *)v3);
  if (v18 >= v2)
  {
    __int16 v20 = 0;
  }
  else
  {
    do
    {
      unsigned int v19 = v18;
      BytesInCGFloat c = ReadBytesInc((MDataReference *)&v21, (const char *)2);
      unsigned int v18 = v19 + ReadBytesInc((MDataReference *)&v21, (const char *)v3) + 1;
    }
    while (v18 < v2);
    __int16 v20 = ~(_WORD)v19;
  }
  LOWORD(result) = v2 + BytesInc + v20;
  return (unsigned __int16)result;
}

void TCFFFontInfo::EnumerateDictAndDefaults(uint64_t a1, const char *a2, uint64_t a3)
{
  int v4 = (int)a2;
  TCFFFontInfo::EnumerateFontDict(a1, a2, a3, (uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, void, uint64_t))DictParseCallback);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  uint64_t v7 = (unsigned __int16 *)defaultOpCodesArray[v4];
  unsigned int v8 = *v7;
  if (v8 != 0xFFFF)
  {
    uint64_t v9 = (const unsigned __int8 **)(v7 + 8);
    do
    {
      if (!*(unsigned char *)(a1 + v8 + 54))
      {
        if (v8 == 15)
        {
          if (v4 == 1)
          {
            *(void *)(a1 + 456) = &StandardRomanGlyphID_to_StringID;
            *(void *)(a1 + 464) = 228;
          }
          unsigned int v8 = 15;
        }
        else if (v8 == 16)
        {
          ASSERT(v4 == 1, v6);
          BOOL v10 = CFFDictGet<unsigned int,0u>(*(v9 - 1), *(unsigned __int16 *)v9, (int *)(a1 + 272), 4);
          ASSERT(v10, v11);
          unsigned int v8 = *((unsigned __int16 *)v9 - 8);
        }
        uint64_t v12 = (uint64_t)*(v9 - 1);
        uint64_t v13 = *(unsigned __int16 *)v9;
        __int16 v14 = *((_WORD *)v9 - 7);
        ASSERT(v8 < 0x4B, v6);
        uint64_t v15 = a3 + 16 * v8;
        *(void *)(v15 + 976) = v12;
        *(void *)(v15 + 984) = v13;
        *(_WORD *)(a3 + 2 * v8 + 2176) = v14;
      }
      unsigned int v8 = *((unsigned __int16 *)v9 + 4);
      v9 += 3;
    }
    while (v8 != 0xFFFF);
  }
}

uint64_t TCFFFontSetInfo::GetIndexedArrayOffsetAndLength(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, _DWORD *a5)
{
  v15[1] = 0;
  _OWORD v15[2] = 0;
  v15[0] = &unk_1F0DD4340;
  *a4 = TCFFFontSetInfo::GetIndexedArrayOffset(a1, (uint64_t)v15, a2, a3);
  uint64_t result = TCFFFontSetInfo::GetIndexedArrayOffset(a1, (uint64_t)v15, a2, a3 + 1);
  *a5 = result - *a4;
  int v11 = *a4 + *(_DWORD *)(a2 + 12);
  *a4 = v11;
  BOOL v12 = __CFADD__(v11, *a5);
  unsigned int v13 = v11 + *a5;
  if (v12
    || *(void *)(*(void *)(a1 + 296) + 2976) - *(void *)(*(void *)(a1 + 296) + 2968) < (unint64_t)v13)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  return result;
}

uint64_t DictParseCallback(const unsigned __int8 *a1, const char *a2, unsigned int a3, __int16 a4, _WORD *a5)
{
  ASSERT(a3 < 0x4B, a2);
  BOOL v10 = (char *)&a5[8 * a3];
  *((void *)v10 + 122) = a1;
  *((void *)v10 + 123) = a2;
  a5[a3 + 1088] = a4;
  return 1;
}

uint64_t GetFontCallback(const unsigned __int8 *a1, const char *a2, int a3, unsigned int a4, _DWORD *a5)
{
  if (a3 == 62)
  {
    ASSERT(a5[12] == 1, a2);
    a5[12] = 2;
    return 1;
  }
  else
  {
    if (a3 == 52)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DD4440;
      exception[2] = 4;
    }
    return 0;
  }
}

void TCFFFontSetInfo::GetFontDictInfo(uint64_t a1, const char *a2, uint64_t a3, __int16 a4, uint64_t a5)
{
  uint64_t v6 = (uint64_t)a2;
  *(_WORD *)(a5 + 52) = a4;
  *(void *)a5 = a1;
  *(_DWORD *)(a5 + 48) = a2;
  if (a2 == 4)
  {
    TCFFFontInfo::EnumerateFontDict(a5, a2, a5, (uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, void, uint64_t))DictParseCallback);
    *(unsigned char *)(a5 + 16) = 1;
LABEL_9:
    TCFFFontInfo::EnumerateDictAndDefaults(a5, (const char *)v6, a5);
    return;
  }
  TCFFFontSetInfo::GetIndexedArrayOffsetAndLength(a1, a3, a4, (int *)(a5 + 12), (_DWORD *)(a5 + 8));
  TCFFFontInfo::EnumerateFontDict(a5, (const char *)v6, a5, (uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, void, uint64_t))GetFontCallback);
  unsigned int v7 = *(_DWORD *)(a5 + 48);
  TCFFFontInfo::EnumerateDictAndDefaults(a5, (const char *)v7, a5);
  if (v7 != 2 && v7 != 4)
  {
    uint64_t v6 = 6;
    goto LABEL_9;
  }
}

void ProcessEntries(int a1, const unsigned __int8 *a2, unint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (a1 == -1) {
    return;
  }
  uint64_t v6 = a2;
  if (!a2 || CFFDictGet<int,16u>(a2, a3, a4, a5)) {
    return;
  }
  uint64_t v11 = *(void *)(a6 + 8);
  unint64_t v12 = *(unsigned __int16 *)(v11 + 448);
  v11 += 488;
  long long v13 = *(_OWORD *)(v11 + 416);
  long long v69 = *(_OWORD *)(v11 + 400);
  *(_OWORD *)long long v70 = v13;
  long long v71 = *(_OWORD *)(v11 + 432);
  unint64_t v112 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v111[7] = v14;
  v111[8] = v14;
  v111[5] = v14;
  v111[6] = v14;
  v111[3] = v14;
  v111[4] = v14;
  v111[1] = v14;
  v111[2] = v14;
  v111[0] = v14;
  *(_DWORD *)int64_t v90 = 0;
  std::vector<int,TInlineBufferAllocator<int,30ul>>::vector(v111, a3, v90);
  if (v6 == (const unsigned __int8 *)-1) {
    goto LABEL_81;
  }
  uint64_t v15 = &v6[a3];
  if (v6 + 1 > &v6[a3]) {
    goto LABEL_81;
  }
  LODWORD(v16) = 0;
  unsigned __int16 v63 = (int *)((char *)a4 + a5);
  unint64_t v18 = *((void *)&v111[0] + 1);
  int v17 = *(char **)&v111[0];
  uint64_t v66 = *(char **)&v111[0];
  long long v68 = *(char **)&v111[0];
  unsigned int v19 = *(int **)&v111[0];
  unint64_t v64 = v15;
  unint64_t v65 = *((void *)&v111[0] + 1);
LABEL_7:
  unint64_t v21 = (unint64_t)(v6 + 1);
  unsigned int v20 = *v6;
  switch(v20)
  {
    case 0x1Eu:
      memset(v90, 170, 18);
      uint64_t v6 = BCDtoASCII(v6 + 1, v15, (char (*)[18])v90);
      int v24 = llround(atof_l(v90, 0) * 65536.0);
      goto LABEL_18;
    case 0x1Du:
      if (v21 > 0xFFFFFFFFFFFFFFFBLL || v6 + 5 > v15) {
        goto LABEL_81;
      }
      int v22 = v6[3];
      int v23 = v6[4];
      v6 += 5;
      goto LABEL_17;
    case 0x1Cu:
      if (v21 > 0xFFFFFFFFFFFFFFFDLL || v6 + 3 > v15) {
        goto LABEL_81;
      }
      int v22 = v6[1];
      int v23 = v6[2];
      v6 += 3;
LABEL_17:
      int v24 = (v22 << 24) | (v23 << 16);
LABEL_18:
      if ((unint64_t)v68 < v18)
      {
        LODWORD(v16) = v16 + 1;
        *unsigned int v19 = v24;
        uint64_t v25 = v19 + 1;
        long long v68 = (char *)v19;
        goto LABEL_20;
      }
      goto LABEL_81;
  }
  if (v20 >= 0x20)
  {
    if (v20 == 255)
    {
      if (v21 > 0xFFFFFFFFFFFFFFFBLL || v6 + 5 > v15) {
        goto LABEL_81;
      }
      unsigned int v26 = *(_DWORD *)(v6 + 1);
      v6 += 5;
      int v24 = bswap32(v26);
    }
    else
    {
      if (v20 > 0xF6)
      {
        BOOL v54 = v6 != (const unsigned __int8 *)-2 && v6 + 2 <= v15;
        if (v20 > 0xFA)
        {
          if (!v54) {
            goto LABEL_81;
          }
          unint64_t v21 = (unint64_t)(v6 + 2);
          int v52 = 64148 - (v6[1] | (v20 << 8));
        }
        else
        {
          if (!v54) {
            goto LABEL_81;
          }
          unint64_t v21 = (unint64_t)(v6 + 2);
          int v52 = (v6[1] | (v20 << 8)) - 63124;
        }
      }
      else
      {
        int v52 = v20 - 139;
      }
      int v24 = v52 << 16;
      uint64_t v6 = (const unsigned __int8 *)v21;
    }
    goto LABEL_18;
  }
  if (v20 == 23)
  {
    if (!(void)v69
      || ((unint64_t)v71 <= v12
       || (unsigned int v27 = *(_DWORD *)(*((void *)&v71 + 1) + 4 * v12)) == 0
       || (uint64_t v28 = v69 + bswap32(v27), (unint64_t)(v28 + 6) > *((void *)&v69 + 1))
        ? (unint64_t v29 = 0)
        : (unint64_t v29 = bswap32(*(unsigned __int16 *)(v28 + 4)) >> 16),
          *(_DWORD *)v68 < 0x10000u))
    {
      *(void *)int64_t v90 = v111;
      std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v90);
      return;
    }
    unsigned int v67 = *(int *)v68 >> 16;
    unsigned int v30 = v67 + v67 * v29;
    if (v30 > v16)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DD4440;
      exception[2] = 4;
    }
    uint64_t v31 = &v68[-4 * v30];
    if (v17 > v31)
    {
      int v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v59 = &unk_1F0DD4440;
      v59[2] = 4;
    }
    unsigned int v32 = *(unsigned __int16 *)(v69 + bswap32(*(_DWORD *)(v69 + 2)));
    unint64_t v33 = __rev16(v32);
    *(void *)&long long v34 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v34 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v109[2] = v34;
    v109[3] = v34;
    v109[0] = v34;
    v109[1] = v34;
    uint64_t v106 = 0;
    uint64_t v107 = 0;
    uint64_t v108 = 0;
    uint64_t v110 = v109;
    *(void *)int64_t v90 = &v106;
    *(void *)&v90[8] = 0xAAAAAAAAAAAAAA00;
    if (v32)
    {
      std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__vallocate[abi:fe180100](&v106, v33);
      uint64_t v35 = (char *)v107;
      bzero(v107, 2 * v33);
      uint64_t v107 = &v35[2 * v33];
      if (v107 == v106) {
        goto LABEL_84;
      }
      __int16 *v106 = 0x4000;
    }
    *(void *)&long long v36 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v36 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v104 = v36;
    long long v105 = v36;
    long long v102 = v36;
    long long v103 = v36;
    long long v100 = v36;
    long long v101 = v36;
    long long v98 = v36;
    long long v99 = v36;
    long long v96 = v36;
    long long v97 = v36;
    long long v94 = v36;
    long long v95 = v36;
    long long v92 = v36;
    long long v93 = v36;
    *(_OWORD *)&v90[16] = v36;
    long long v91 = v36;
    *(_OWORD *)int64_t v90 = v36;
    v73[0] = 0;
    std::vector<double,TInlineBufferAllocator<double,30ul>>::vector(v90, (unint64_t)v70[0], v73);
    if (v70[0])
    {
      uint64_t v37 = 0;
      uint64_t v38 = v106;
      uint64_t v39 = *(void *)v90;
      do
      {
        *(double *)(v39 + 8 * v37) = ItemVariationStore::VariationRegionList::ComputeScalar(v70[1], v37, v33, v38);
        ++v37;
      }
      while ((ItemVariationStore::VariationRegionList *)v37 != v70[0]);
    }
    *(void *)&long long v40 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v40 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v88 = v40;
    long long v89 = v40;
    long long v86 = v40;
    long long v87 = v40;
    long long v84 = v40;
    long long v85 = v40;
    long long v82 = v40;
    long long v83 = v40;
    long long v80 = v40;
    long long v81 = v40;
    long long v78 = v40;
    long long v79 = v40;
    long long v76 = v40;
    long long v77 = v40;
    long long v74 = v40;
    long long v75 = v40;
    *(_OWORD *)uint64_t v73 = v40;
    int v72 = 0;
    std::vector<double,TInlineBufferAllocator<double,30ul>>::vector(v73, v29, &v72);
    uint64_t v41 = 0;
    unsigned int v42 = v67;
    if (v67 <= 1) {
      uint64_t v43 = 1;
    }
    else {
      uint64_t v43 = v67;
    }
    while (1)
    {
      uint64_t v44 = v73[0];
      if (v29) {
        break;
      }
LABEL_50:
      *(_DWORD *)&v31[4 * v41++] += vcvtd_n_s64_f64(ItemVariationStore::ValueFromBlendRequest((ItemVariationStore *)&v69, v12, *(const double **)v90, v29, v44), 0x10uLL);
      v42 += v29;
      if (v41 == v43)
      {
        int v50 = &v68[-4 * v67 * v29];
        unint64_t v18 = v65;
        int v17 = v66;
        if (v66 >= v50 || (unint64_t)v50 >= v65)
        {
          int v61 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v61 = &unk_1F0DD4440;
          v61[2] = 4;
        }
        v68 -= 4 * v67 * v29;
        unint64_t v16 = (unint64_t)(v50 - v66) >> 2;
        int v72 = v73;
        std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v72);
        v73[0] = (double *)v90;
        std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v73);
        *(void *)int64_t v90 = &v106;
        std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v90);
        uint64_t v6 = (const unsigned __int8 *)v21;
        uint64_t v25 = v19;
        uint64_t v15 = v64;
LABEL_20:
        if (v6 == (const unsigned __int8 *)-1 || (unsigned int v19 = v25, v6 + 1 > v15))
        {
LABEL_81:
          unint64_t v60 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v60 = &unk_1F0DD4440;
          void v60[2] = 4;
        }
        goto LABEL_7;
      }
    }
    BOOL v45 = (int *)&v68[4 * v42 + -4 * v67 + -4 * v67 * v29];
    int64_t v46 = v73[1] - v73[0];
    unint64_t v47 = v29;
    __int16 v48 = v73[0];
    while (v46)
    {
      int v49 = *v45++;
      *v48++ = (double)v49 * 0.0000152587891;
      --v46;
      if (!--v47) {
        goto LABEL_50;
      }
    }
LABEL_84:
    __break(1u);
  }
  else
  {
    if (v16 == ((unint64_t)(v68 - v17) >> 2) && (int)v16 >= 1)
    {
      int v55 = v16;
      BOOL v56 = a4;
      do
      {
        if (v56 >= v63)
        {
          int v62 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v62 = &unk_1F0DD4440;
          v62[2] = 4;
        }
        int v57 = *(_DWORD *)v17;
        v17 += 4;
        *v56++ = v57;
        --v55;
      }
      while (v55);
    }
    *(void *)int64_t v90 = v111;
    std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)v90);
  }
}

void sub_1B534A090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void **a61)
{
  a61 = (void **)(v61 - 256);
  std::vector<int,TInlineBufferAllocator<int,30ul>>::__destroy_vector::operator()[abi:fe180100](&a61);
  _Unwind_Resume(a1);
}

BOOL CFFDictGet<int,30u>(const unsigned __int8 *a1, uint64_t a2, int *a3)
{
  void v24[3] = *MEMORY[0x1E4F143B8];
  if (a1 == (const unsigned __int8 *)-1 || (v3 = a1, int v4 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_37:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  uint64_t v5 = a3;
  unint64_t v6 = (unint64_t)(a3 + 6);
  while (1)
  {
    unsigned int v7 = v3 + 1;
    unsigned int v8 = *v3;
    switch(v8)
    {
      case 0x1Eu:
        memset(v24, 170, 18);
        uint64_t v3 = BCDtoASCII(v7, v4, (char (*)[18])v24);
        int v10 = llround(atof_l((const char *)v24, 0) * 1073741820.0);
        goto LABEL_34;
      case 0x1Du:
        if ((unint64_t)v7 > 0xFFFFFFFFFFFFFFFBLL || v3 + 5 > v4)
        {
          unsigned int v20 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v20 = &unk_1F0DD4440;
          v20[2] = 4;
        }
        int v9 = v3[4];
        v3 += 5;
        goto LABEL_13;
      case 0x1Cu:
        if ((unint64_t)v7 > 0xFFFFFFFFFFFFFFFDLL || v3 + 3 > v4)
        {
          unsigned int v19 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v19 = &unk_1F0DD4440;
          v19[2] = 4;
        }
        int v9 = v3[2];
        v3 += 3;
LABEL_13:
        int v10 = v9 << 30;
        goto LABEL_34;
    }
    if (v8 < 0x20) {
      return v8 != 23;
    }
    if (v8 == 255)
    {
      if ((unint64_t)v7 > 0xFFFFFFFFFFFFFFFBLL || v3 + 5 > v4)
      {
        unint64_t v21 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v21 = &unk_1F0DD4440;
        _OWORD v21[2] = 4;
      }
      int v11 = v3[2];
      int v12 = v3[3];
      int v13 = v3[4];
      v3 += 5;
      int v10 = (v11 << 30) | (v12 << 22) | (v13 << 14);
    }
    else
    {
      if (v8 > 0xF6)
      {
        BOOL v16 = v3 != (const unsigned __int8 *)-2 && v3 + 2 <= v4;
        if (v8 > 0xFA)
        {
          if (!v16)
          {
            int v22 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v22 = &unk_1F0DD4440;
            v22[2] = 4;
          }
          unsigned int v7 = v3 + 2;
          int v14 = 64148 - (v3[1] | (v8 << 8));
        }
        else
        {
          if (!v16)
          {
            int v23 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v23 = &unk_1F0DD4440;
            _OWORD v23[2] = 4;
          }
          unsigned int v7 = v3 + 2;
          int v14 = (v3[1] | (v8 << 8)) - 63124;
        }
      }
      else
      {
        int v14 = v8 - 139;
      }
      int v10 = v14 << 30;
      uint64_t v3 = v7;
    }
LABEL_34:
    if ((unint64_t)v5 >= v6) {
      return 0;
    }
    *v5++ = v10;
    if (v3 == (const unsigned __int8 *)-1 || v3 + 1 > v4) {
      goto LABEL_37;
    }
  }
}

void TCFFParsingContext::InitFontDesc(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  __int16 v3 = 0;
  LOWORD(v4) = 0;
  uint64_t v74 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v71[14] = v5;
  v71[15] = v5;
  v71[12] = v5;
  v71[13] = v5;
  v71[10] = v5;
  v71[11] = v5;
  v71[8] = v5;
  v71[9] = v5;
  v71[6] = v5;
  v71[7] = v5;
  v71[4] = v5;
  v71[5] = v5;
  v71[2] = v5;
  v71[3] = v5;
  v71[0] = v5;
  v71[1] = v5;
  uint64_t v7 = *(void *)(v6 + 744);
  v65[0] = v1;
  v65[1] = v7;
  long long v9 = v8[2];
  long long v67 = v8[1];
  long long v68 = v9;
  long long v66 = *v8;
  long long v70 = v71;
  *(_DWORD *)uint64_t v1 = 131077;
  *(_DWORD *)(v1 + 82) = -1;
  *(_WORD *)(v1 + 72) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  int v10 = (int *)(v1 + 48);
  if (*(_DWORD *)(v7 + 48) != 2)
  {
    __int16 v3 = *(_WORD *)(v7 + 344);
    int v4 = *(_DWORD *)(v7 + 280);
  }
  *(_WORD *)(v1 + 76) = v3;
  *(_WORD *)(v1 + 58) = v4;
  unint64_t v11 = v1 + 58;
  int v12 = *(_DWORD *)(*(void *)v7 + 224);
  __int16 v13 = *(_WORD *)(*(void *)v7 + 288);
  *(void *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 74) = v12;
  *(_WORD *)(v1 + 78) = v13;
  *(_DWORD *)(v1 + 124) = 0;
  *(void *)(v1 + 96) = 0;
  *(void *)(v1 + 32) = 0x100000001;
  *(void *)(v1 + 62) = 0;
  *(_OWORD *)(v1 + 104) = xmmword_1B54013E0;
  *(_DWORD *)(v1 + 444) = 0;
  *(_WORD *)(v1 + 80) = 32;
  if (*(void *)(v7 + 1872))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  unint64_t v69 = 0xAAAAAAAA00000000;
  ProcessEntries(*(__int16 *)(v7 + 2186), *(const unsigned __int8 **)(v7 + 1056), *(void *)(v7 + 1064), (int *)(v1 + 88), 16, (uint64_t)v65);
  int v14 = *(const unsigned __int8 **)(v7 + 1184);
  if (v14) {
    CFFDictGet<unsigned int,0u>(v14, *(void *)(v7 + 1192), (int *)(v2 + 28), 4);
  }
  uint64_t v15 = *(const unsigned __int8 **)(v7 + 1600);
  if (v15)
  {
    BOOL v16 = CFFDictGet<int,30u>(v15, *(void *)(v7 + 1608), (int *)(v2 + 4));
    ASSERT(v16, v17);
    int v18 = *(_DWORD *)(v2 + 4);
    if ((v18 - 0x7FFFFFFF) < 2
      || (v18 - 1073740750) <= 0x864
      && v18 == *(_DWORD *)(v2 + 16)
      && !*(_DWORD *)(v2 + 8)
      && !*(_DWORD *)(v2 + 12))
    {
      *(_OWORD *)(v2 + 4) = xmmword_1B54013F0;
      *(_DWORD *)(v2 + 20) = 0;
      *(_DWORD *)(v2 + 24) = 0;
    }
  }
  ProcessEntries(*(__int16 *)(v7 + 2256), *(const unsigned __int8 **)(v7 + 1616), *(void *)(v7 + 1624), (int *)(v2 + 40), 4, (uint64_t)v65);
  unsigned int v19 = *(const unsigned __int8 **)(v7 + 1568);
  if (v19) {
    CFFDictGet<unsigned short,0u>(v19, *(void *)(v7 + 1576), (_WORD *)(v2 + 60), 2);
  }
  memset(__b, 170, sizeof(__b));
  if (*(_WORD *)(v2 + 2) != 2)
  {
    int v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v59 = &unk_1F0DD4440;
    v59[2] = 4;
  }
  *(_WORD *)(v2 + 66) = 0;
  ProcessEntries(*(__int16 *)(v7 + 2188), *(const unsigned __int8 **)(v7 + 1072), *(void *)(v7 + 1080), __b, 4096, (uint64_t)v65);
  DeltaBlues(__b, (const char *)v20, v2 + 248, (_WORD *)(v2 + 66));
  *(_DWORD *)(v2 + 32) |= -1 << *(_WORD *)(v2 + 66);
  ProcessEntries(*(__int16 *)(v7 + 2190), *(const unsigned __int8 **)(v7 + 1088), *(void *)(v7 + 1096), __b, 4096, (uint64_t)v65);
  DeltaBlues(__b, (const char *)v21, v2 + 248, (_WORD *)(v2 + 66));
  *(_WORD *)(v2 + 68) = 0;
  ProcessEntries(*(__int16 *)(v7 + 2192), *(const unsigned __int8 **)(v7 + 1104), *(void *)(v7 + 1112), __b, 4096, (uint64_t)v65);
  DeltaBlues(__b, (const char *)v22, v2 + 344, (_WORD *)(v2 + 68));
  *(_DWORD *)(v2 + 36) |= -1 << *(_WORD *)(v2 + 68);
  ProcessEntries(*(__int16 *)(v7 + 2194), *(const unsigned __int8 **)(v7 + 1120), *(void *)(v7 + 1128), __b, 4096, (uint64_t)v65);
  DeltaBlues(__b, (const char *)v23, v2 + 344, (_WORD *)(v2 + 68));
  ProcessEntries(*(__int16 *)(v7 + 2218), *(const unsigned __int8 **)(v7 + 1312), *(void *)(v7 + 1320), (int *)(v2 + 440), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2216), *(const unsigned __int8 **)(v7 + 1296), *(void *)(v7 + 1304), (int *)(v2 + 120), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2324), *(const unsigned __int8 **)(v7 + 2160), *(void *)(v7 + 2168), (int *)(v2 + 136), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2322), *(const unsigned __int8 **)(v7 + 2144), *(void *)(v7 + 2152), (int *)(v2 + 124), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2196), *(const unsigned __int8 **)(v7 + 1136), *(void *)(v7 + 1144), (int *)(v2 + 104), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2198), *(const unsigned __int8 **)(v7 + 1152), *(void *)(v7 + 1160), (int *)(v2 + 108), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2264), *(const unsigned __int8 **)(v7 + 1680), *(void *)(v7 + 1688), __b, 4096, (uint64_t)v65);
  unsigned __int16 v25 = v24;
  *(_WORD *)(v2 + 62) = v24;
  int v26 = v24;
  ASSERT(v24 < 0xDu, v27);
  if (v26)
  {
    int v28 = 0;
    unint64_t v29 = (_DWORD *)(v2 + 140);
    uint64_t v30 = v25;
    uint64_t v31 = __b;
    do
    {
      int v32 = *v31++;
      v28 += v32;
      *v29++ = v28;
      --v30;
    }
    while (v30);
  }
  ProcessEntries(*(__int16 *)(v7 + 2266), *(const unsigned __int8 **)(v7 + 1696), *(void *)(v7 + 1704), __b, 4096, (uint64_t)v65);
  unsigned __int16 v34 = v33;
  *(_WORD *)(v2 + 64) = v33;
  int v35 = v33;
  ASSERT(v33 < 0xDu, v36);
  if (v35)
  {
    int v37 = 0;
    uint64_t v38 = (_DWORD *)(v2 + 188);
    uint64_t v39 = v34;
    long long v40 = __b;
    do
    {
      int v41 = *v40++;
      v37 += v41;
      *v38++ = v37;
      --v39;
    }
    while (v39);
  }
  ProcessEntries(*(__int16 *)(v7 + 2258), *(const unsigned __int8 **)(v7 + 1632), *(void *)(v7 + 1640), (int *)(v2 + 236), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2262), *(const unsigned __int8 **)(v7 + 1664), *(void *)(v7 + 1672), (int *)(v2 + 240), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2260), *(const unsigned __int8 **)(v7 + 1648), *(void *)(v7 + 1656), (int *)(v2 + 244), 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2270), *(const unsigned __int8 **)(v7 + 1728), *(void *)(v7 + 1736), v10, 4, (uint64_t)v65);
  ProcessEntries(*(__int16 *)(v7 + 2320), *(const unsigned __int8 **)(v7 + 2128), *(void *)(v7 + 2136), (int *)(v2 + 128), 8, (uint64_t)v65);
  unsigned int v42 = *(const unsigned __int8 **)(v7 + 1712);
  if (v42)
  {
    ProcessEntries(*(__int16 *)(v7 + 2268), v42, *(void *)(v7 + 1720), __b, 4, (uint64_t)v65);
    int v43 = *(_DWORD *)(v2 + 444);
    *(_DWORD *)(v2 + 444) = v43 | 2;
    if (__b[0] > *(_DWORD *)(v2 + 48)) {
      *(_DWORD *)(v2 + 444) = v43 | 3;
    }
  }
  uint64_t v44 = *(const unsigned __int8 **)(v7 + 1792);
  if (v44
    && *(void *)(v7 + 1744)
    && *(void *)(v7 + 1760)
    && CFFDictGet<int,16u>(v44, *(void *)(v7 + 1800), (int *)(v2 + 52), 4))
  {
    BOOL v45 = *(const unsigned __int8 **)(v7 + 1744);
    if (v45 == (const unsigned __int8 *)-1 || (int64_t v46 = &v45[*(void *)(v7 + 1752)], v45 + 1 > v46))
    {
LABEL_70:
      int v57 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v57 = &unk_1F0DD4440;
      v57[2] = 4;
    }
    unint64_t v47 = (_WORD *)(v2 + 56);
    while (1)
    {
      __int16 v48 = v45 + 1;
      unsigned int v49 = *v45;
      if (v49 == 30)
      {
        memset(v73, 170, 18);
        BOOL v45 = BCDtoASCII(v48, v46, (char (*)[18])v73);
        LOWORD(v49) = llround(atof_l(v73, 0));
      }
      else
      {
        if (v49 == 29)
        {
          if ((unint64_t)v48 > 0xFFFFFFFFFFFFFFFBLL || v45 + 5 > v46)
          {
            uint64_t v61 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v61 = &unk_1F0DD4440;
            v61[2] = 4;
          }
          unsigned int v49 = *(unsigned __int16 *)(v45 + 3);
          v45 += 5;
          LOWORD(v49) = __rev16(v49);
          goto LABEL_48;
        }
        if (v49 == 28)
        {
          if ((unint64_t)v48 > 0xFFFFFFFFFFFFFFFDLL || v45 + 3 > v46)
          {
            unint64_t v60 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v60 = &unk_1F0DD4440;
            void v60[2] = 4;
          }
          int v50 = v45[1];
          int v51 = v45[2];
          v45 += 3;
          int v52 = (v50 << 24) | (v51 << 16);
        }
        else
        {
          if (v49 < 0x20)
          {
            if (v49 != 23
              && CFFDictGet<unsigned short,0u>(*(const unsigned __int8 **)(v7 + 1760), *(void *)(v7 + 1768), (_WORD *)(v2 + 70), 2))
            {
              ProcessEntries(*(__int16 *)(v7 + 2276), *(const unsigned __int8 **)(v7 + 1776), *(void *)(v7 + 1784), (int *)(v2 + 44), 4, (uint64_t)v65);
              if (*(__int16 *)(v2 + 56) >= 5) {
                *(_WORD *)(v2 + 56) = -1;
              }
            }
            return;
          }
          if (v49 != 255)
          {
            if (v49 > 0xF6)
            {
              BOOL v54 = v45 != (const unsigned __int8 *)-2 && v45 + 2 <= v46;
              if (v49 > 0xFA)
              {
                if (!v54)
                {
                  unsigned __int16 v63 = __cxa_allocate_exception(0x10uLL);
                  *(void *)unsigned __int16 v63 = &unk_1F0DD4440;
                  v63[2] = 4;
                }
                __int16 v56 = v45[1];
                v45 += 2;
                LOWORD(v49) = -1388 - (v56 | ((_WORD)v49 << 8));
              }
              else
              {
                if (!v54)
                {
                  unint64_t v64 = __cxa_allocate_exception(0x10uLL);
                  *(void *)unint64_t v64 = &unk_1F0DD4440;
                  v64[2] = 4;
                }
                __int16 v55 = v45[1];
                v45 += 2;
                LOWORD(v49) = (v55 | ((_WORD)v49 << 8)) + 2412;
              }
            }
            else
            {
              LOWORD(v49) = v49 - 139;
              ++v45;
            }
            goto LABEL_48;
          }
          if ((unint64_t)v48 > 0xFFFFFFFFFFFFFFFBLL || v45 + 5 > v46)
          {
            int v62 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v62 = &unk_1F0DD4440;
            v62[2] = 4;
          }
          int v52 = (v45[1] << 24) | (v45[2] << 16);
          v45 += 5;
        }
        unsigned int v49 = v52 >> 16;
      }
LABEL_48:
      if ((unint64_t)v47 >= v11) {
        return;
      }
      *v47++ = v49;
      if (v45 == (const unsigned __int8 *)-1 || v45 + 1 > v46) {
        goto LABEL_70;
      }
    }
  }
}

uint64_t TType1CFFDescriptor::TType1CFFDescriptor(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  *(void *)a1 = &unk_1F0DD9500;
  *(_WORD *)(a1 + 8) = 0;
  unsigned int v8 = (void *)(a1 + 8);
  *(unsigned char *)(a1 + 10) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  uint64_t v9 = a1 + 16;
  *(unsigned char *)(a1 + 20) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = &unk_1F0DD4340;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 56) = &unk_1F0DD4340;
  int v10 = (MDataReference *)(a1 + 80);
  *(void *)(a1 + 80) = &unk_1F0DD4340;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 101) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 120) = &unk_1F0DD4340;
  *(void *)(a1 + 144) = &unk_1F0DD4340;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 165) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = &unk_1F0DD4340;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = &unk_1F0DD4340;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 229) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 248) = &unk_1F0DD4340;
  *(void *)(a1 + 256) = 0;
  *(_WORD *)(a1 + 296) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 272) = &unk_1F0DD4340;
  *(void *)(a1 + 304) = a1;
  uint64_t v11 = a1 + 312;
  TCFFFontInfo::TCFFFontInfo((TCFFFontInfo *)(a1 + 312));
  TCFFFontInfo::TCFFFontInfo((TCFFFontInfo *)(a1 + 800));
  bzero((void *)(a1 + 1288), 0x546uLL);
  *(_WORD *)(a1 + 2640) = 0;
  *(_DWORD *)(a1 + 2644) = 0;
  int v12 = (_OWORD *)(a1 + 2696);
  uint64_t v13 = 2648;
  do
  {
    uint64_t v14 = a1 + v13;
    *(_DWORD *)uint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    v13 += 16;
  }
  while ((_OWORD *)(v14 + 16) != v12);
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *int v12 = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(void *)(a1 + 2952) = &unk_1F0DD4218;
  *(void *)(a1 + 2960) = 0;
  *(void *)(a1 + 2976) = 0;
  *(void *)(a1 + 2968) = 0;
  TDataReference::operator=((TDataReference *)(a1 + 2952), a2);
  *(unsigned char *)(a1 + 2984) = a4;
  uint64_t v15 = *(void *)(a1 + 2960);
  if (!v15 || !*(void *)(v15 + 8))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 3;
  }
  uint64_t v16 = a3[2];
  if (v16)
  {
    int v17 = (const char *)a3[1];
    if (!v17)
    {
      uint64_t v33 = a3[5];
      if (!v33) {
        goto LABEL_11;
      }
      uint64_t v34 = *(void *)(v33 + 8);
      if (!v34) {
        goto LABEL_11;
      }
      int v17 = (const char *)(v34 + a3[6]);
    }
    if ((v16 & 0xFFFFFF80) != 0) {
      size_t v18 = 127;
    }
    else {
      size_t v18 = v16;
    }
    strncpy((char *)(a1 + 2825), v17, v18);
    *(unsigned char *)(a1 + 2824) = v18;
    a4 = *(unsigned __int8 *)(a1 + 2984);
  }
LABEL_11:
  if (a4) {
    uint64_t v19 = 5;
  }
  else {
    uint64_t v19 = 4;
  }
  TCFFFontSetInfo::GetData(__s2, *(void **)(a1 + 304), 0, v19);
  __int16 v20 = __s2[2];
  *(char **)(a1 + 88) = __s2[1];
  *(void *)(a1 + 96) = v20;
  *(unsigned char *)unsigned int v8 = ReadByteInc(v10);
  *(unsigned char *)(a1 + 9) = ReadByteInc(v10);
  unsigned int v21 = *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 2984))
  {
    if (v21 == 2)
    {
      *(_DWORD *)(a1 + 324) = ReadByteInc(v10);
      *(_DWORD *)(a1 + 320) = (unsigned __int16)ReadBytes(v10, (const char *)2);
      *(unsigned char *)(a1 + 10) = 1;
      *(_WORD *)(a1 + 364) = *(_WORD *)(a1 + 2640);
      *(void *)(a1 + 312) = v8;
      *(_DWORD *)(a1 + 360) = 4;
      TCFFFontInfo::EnumerateFontDict(v11, (const char *)4, v11, (uint64_t (*)(const unsigned __int8 *, uint64_t, uint64_t, void, uint64_t))DictParseCallback);
      *(unsigned char *)(a1 + 328) = 1;
      TCFFFontInfo::EnumerateDictAndDefaults(v11, (const char *)4, v11);
      TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, a1 + 232, *(_DWORD *)(a1 + 320) + *(_DWORD *)(a1 + 324));
      goto LABEL_20;
    }
LABEL_46:
    int v37 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v37 = &unk_1F0DD4440;
    v37[2] = 4;
  }
  if (v21 > 1) {
    goto LABEL_46;
  }
  ByteInCGFloat c = ReadByteInc(v10);
  char v23 = ReadByteInc(v10);
  *(unsigned char *)(a1 + 10) = v23;
  if ((v23 - 1) > 3u) {
    goto LABEL_46;
  }
  int ArrayInfo = TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, a1 + 104, ByteInc);
  int v25 = TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, a1 + 168, ArrayInfo);
  int v26 = TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, v9, v25);
  TCFFFontSetInfo::GetArrayInfo((uint64_t)v8, a1 + 232, v26);
LABEL_20:
  int v27 = *(_DWORD *)(a1 + 232);
  if (v27 >= 33899) {
    __int16 v28 = 0x8000;
  }
  else {
    __int16 v28 = 1131;
  }
  if (v27 >= 1239) {
    __int16 v29 = v28;
  }
  else {
    __int16 v29 = 107;
  }
  *(_WORD *)(a1 + 296) = v29;
  if (!*(unsigned char *)(a1 + 2984))
  {
    *(_WORD *)(a1 + 2640) = 0;
    size_t v30 = *(unsigned __int8 *)(a1 + 2824);
    if (*(unsigned char *)(a1 + 2824) && *(_DWORD *)(a1 + 104))
    {
      unsigned __int16 v31 = 0;
      while (1)
      {
        __s2[0] = (char *)0xAAAAAAAAAAAAAAAALL;
        unsigned int v38 = -1431655766;
        TCFFFontSetInfo::GetFontName(v8, v31, __s2, &v38);
        BOOL v32 = __s2[0] && v38 == v30;
        if (v32 && !strncmp((const char *)(a1 + 2825), __s2[0], v30)) {
          break;
        }
        if (*(_DWORD *)(a1 + 104) <= ++v31)
        {
          unsigned __int16 v31 = *(_WORD *)(a1 + 2640);
          goto LABEL_42;
        }
      }
      *(_WORD *)(a1 + 2640) = v31;
    }
    else
    {
      unsigned __int16 v31 = 0;
    }
LABEL_42:
    TCFFFontSetInfo::GetFontDictInfo((uint64_t)v8, (const char *)1, a1 + 168, v31, v11);
  }
  *(_DWORD *)(a1 + 2644) = *(_DWORD *)(a1 + 460);
  return a1;
}

void sub_1B534B4CC(_Unwind_Exception *a1)
{
  TDataReference::~TDataReference(v1);
  _Unwind_Resume(a1);
}

void sub_1B534B4D4(void *a1)
{
}

void sub_1B534B4E4()
{
}

void TType1CFFDescriptor::~TType1CFFDescriptor(TType1CFFDescriptor *this)
{
  *(void *)this = &unk_1F0DD9500;
  TDataReference::~TDataReference((TType1CFFDescriptor *)((char *)this + 2952));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0DD9500;
  TDataReference::~TDataReference((TType1CFFDescriptor *)((char *)this + 2952));
  JUMPOUT(0x1BA9994D0);
}

void TSFNTType1CFFDescriptor::TSFNTType1CFFDescriptor(TSFNTType1CFFDescriptor *this, const TSFNTData *a2, int a3, int a4)
{
  TSFNTFont::GetTable(a2, a3, 0, v16);
  int v8 = (*(uint64_t (**)(const TSFNTData *, uint64_t))(*(void *)a2 + 472))(a2, 1851878757);
  if (v8)
  {
    (*(void (**)(void *__return_ptr, const TSFNTData *, uint64_t, uint64_t, void, void))(*(void *)a2 + 88))(v9, a2, 6, 1, 0, 0);
    TStringRef::TStringRef((TStringRef *)v10, (const TStringRef *)v9);
  }
  else
  {
    v10[1] = 0;
    v10[2] = 0;
    v10[0] = &unk_1F0DD43A0;
    char v11 = 0;
    int v12 = &unk_1F0DD4218;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  TTrueTypeFont::ThrowIfInvalid(a2, v7);
  TType1CFFDescriptor::TType1CFFDescriptor((uint64_t)this, (uint64_t)v16, v10, a4);
  TStringRef::~TStringRef(v10);
  if (v8) {
    TFontNameString::~TFontNameString((TFontNameString *)v9);
  }
  TDataReference::~TDataReference((TDataReference *)v16);
  *(void *)this = &unk_1F0DD94E0;
}

void sub_1B534B738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  TFontNameString::~TFontNameString((TFontNameString *)&a9);
  TDataReference::~TDataReference((TDataReference *)(v21 - 64));
  _Unwind_Resume(a1);
}

void TSFNTType1CFF2Descriptor::~TSFNTType1CFF2Descriptor(TSFNTType1CFF2Descriptor *this)
{
  *(void *)this = &unk_1F0DD9500;
  TDataReference::~TDataReference((TSFNTType1CFF2Descriptor *)((char *)this + 2952));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0DD9500;
  TDataReference::~TDataReference((TSFNTType1CFF2Descriptor *)((char *)this + 2952));
  JUMPOUT(0x1BA9994D0);
}

void TCFFParsingContext::TCFFParsingContext(TParsingContext *a1, const TDataReference *a2)
{
}

uint64_t TCFFParsingContext::FontType(TCFFParsingContext *this, char a2)
{
  if (!*((unsigned char *)this + 860)) {
    *((unsigned char *)this + 860) = a2;
  }
  return 1;
}

BOOL TCFFParsingContext::UseSpecialEncoding(TCFFParsingContext *this, int a2)
{
  unsigned int v2 = a2 - 1;
  if ((a2 - 1) <= 0x1FFFFFFD)
  {
    *((void *)this + 105) = a2;
    if (a2 <= 256) {
      int v4 = 256;
    }
    else {
      int v4 = a2;
    }
    size_t v5 = (4 * v4);
    *((void *)this + 102) = v5;
    if (*((void *)this + 103) >= v5)
    {
      uint64_t v9 = (void *)*((void *)this + 101);
      if (!v9) {
        return v2 < 0x1FFFFFFE;
      }
    }
    else
    {
      uint64_t v6 = (*(uint64_t (**)(char *))(*((void *)this + 100) + 48))((char *)this + 800);
      uint64_t v7 = *((void *)this + 101);
      uint64_t v8 = *((void *)this + 100);
      if (v7) {
        uint64_t v9 = (void *)(*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 40))((char *)this + 800, v7, v6);
      }
      else {
        uint64_t v9 = (void *)(*(uint64_t (**)(char *, uint64_t))(v8 + 16))((char *)this + 800, v6);
      }
      *((void *)this + 101) = v9;
      if (!v9)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DD4440;
        exception[2] = 2;
      }
      *((void *)this + 103) = v6;
      size_t v5 = *((void *)this + 102);
    }
    if (v5) {
      bzero(v9, v5);
    }
  }
  return v2 < 0x1FFFFFFE;
}

uint64_t TCFFParsingContext::SpecialEncoding(TCFFParsingContext *this, unsigned int a2, const char *__s)
{
  if (__s)
  {
    uint64_t v4 = *((void *)this + 101);
    if (v4)
    {
      if ((a2 & 0x80000000) == 0 && *__s && *((_DWORD *)this + 210) > (signed int)a2)
      {
        size_t v7 = strlen(__s);
        uint64_t v8 = *((void *)this + 102);
        unint64_t v9 = v7 + v8 + 2;
        *((void *)this + 102) = v9;
        if (*((void *)this + 103) < v9)
        {
          uint64_t v10 = (*(uint64_t (**)(char *))(*((void *)this + 100) + 48))((char *)this + 800);
          uint64_t v11 = *((void *)this + 101);
          uint64_t v12 = *((void *)this + 100);
          if (v11) {
            uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 40))((char *)this + 800, v11, v10);
          }
          else {
            uint64_t v13 = (*(uint64_t (**)(char *, uint64_t))(v12 + 16))((char *)this + 800, v10);
          }
          uint64_t v4 = v13;
          *((void *)this + 101) = v13;
          if (!v13)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            *(void *)exception = &unk_1F0DD4440;
            exception[2] = 2;
          }
          *((void *)this + 103) = v10;
        }
        *(_DWORD *)(v4 + 4 * a2) = v8;
        uint64_t v14 = (unsigned char *)(v4 + (int)v8);
        unsigned char *v14 = v7;
        strlcpy(v14 + 1, __s, v7 + 1);
      }
    }
  }
  return 1;
}

uint64_t TCFFParsingContext::CommenceParse(TCFFParsingContext *this, int *a2, unsigned int *a3)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 93);
  int v4 = *(_DWORD *)(v3 + 48);
  if (!v4)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __dst[6] = v8;
  __dst[7] = v8;
  __dst[4] = v8;
  __dst[5] = v8;
  __dst[2] = v8;
  __dst[3] = v8;
  __dst[0] = v8;
  __dst[1] = v8;
  unsigned __int16 v63 = -21846;
  if (v4 == 3 && (unint64_t v9 = *(const unsigned __int8 **)(v3 + 2096)) != 0)
  {
    unsigned __int16 v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v9, *(void *)(v3 + 2104), &v63, 2)) {
      goto LABEL_88;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(void *)this + 576))(this, __dst);
  }
  else
  {
    uint64_t v10 = *(void **)v3;
    if (!*(unsigned char *)(*(void *)(*(void *)v3 + 296) + 2984))
    {
      __src[0] = (void *)0xAAAAAAAAAAAAAAAALL;
      LODWORD(v62) = 0;
      TCFFFontSetInfo::GetFontName(v10, *(unsigned __int16 *)(v3 + 52), (char **)__src, (unsigned int *)&v62);
      if (v62 >= 0x7F) {
        size_t v11 = 127;
      }
      else {
        size_t v11 = v62;
      }
      if (__src[0]) {
        memmove(__dst, __src[0], v11);
      }
      *((unsigned char *)__dst + v11) = 0;
      (*(void (**)(TCFFParsingContext *, _OWORD *))(*(void *)this + 88))(this, __dst);
    }
  }
  uint64_t v12 = *(const unsigned __int8 **)(v3 + 1584);
  if (v12)
  {
    LODWORD(__src[0]) = 0;
    if (!CFFDictGet<int,0u>(v12, *(void *)(v3 + 1592), (int *)__src, 4))
    {
      BOOL v54 = __cxa_allocate_exception(0x10uLL);
      *(void *)BOOL v54 = &unk_1F0DD4440;
      _OWORD v54[2] = 4;
    }
    if (LODWORD(__src[0]) != 2) {
      LODWORD(__src[0]) = 2;
    }
    (*(void (**)(TCFFParsingContext *, uint64_t))(*(void *)this + 80))(this, 2);
  }
  uint64_t v13 = *(const unsigned __int8 **)(v3 + 1184);
  if (v13)
  {
    LODWORD(__src[0]) = -1;
    if (!CFFDictGet<int,0u>(v13, *(void *)(v3 + 1192), (int *)__src, 4))
    {
      __int16 v55 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v55 = &unk_1F0DD4440;
      v55[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, void))(*(void *)this + 168))(this, LODWORD(__src[0]));
  }
  uint64_t v14 = *(const unsigned __int8 **)(v3 + 976);
  if (v14)
  {
    unsigned __int16 v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v14, *(void *)(v3 + 984), &v63, 2)) {
      goto LABEL_88;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(void *)this + 128))(this, __dst);
  }
  uint64_t v15 = *(const unsigned __int8 **)(v3 + 1232);
  if (v15 && !CFFDictGet<int,0u>(v15, *(void *)(v3 + 1240), (int *)this + 192, 4)) {
    goto LABEL_88;
  }
  uint64_t v16 = *(const unsigned __int8 **)(v3 + 1008);
  if (v16)
  {
    unsigned __int16 v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v16, *(void *)(v3 + 1016), &v63, 2)) {
      goto LABEL_88;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(void *)this + 104))(this, __dst);
  }
  int v17 = *(const unsigned __int8 **)(v3 + 1024);
  if (v17)
  {
    unsigned __int16 v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v17, *(void *)(v3 + 1032), &v63, 2)) {
      goto LABEL_88;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(void *)this + 112))(this, __dst);
  }
  size_t v18 = *(const unsigned __int8 **)(v3 + 1040);
  if (v18)
  {
    unsigned __int16 v63 = -1;
    if (!CFFDictGet<unsigned short,0u>(v18, *(void *)(v3 + 1048), &v63, 2)) {
      goto LABEL_88;
    }
    TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
    (*(void (**)(TCFFParsingContext *, _OWORD *))(*(void *)this + 120))(this, __dst);
  }
  uint64_t v19 = *(const unsigned __int8 **)(v3 + 1488);
  if (!v19) {
    goto LABEL_38;
  }
  unsigned __int16 v63 = -1;
  if (!CFFDictGet<unsigned short,0u>(v19, *(void *)(v3 + 1496), &v63, 2))
  {
LABEL_88:
    int v51 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v51 = &unk_1F0DD4440;
    v51[2] = 4;
  }
  TCFFFontInfo::GetString((TCFFFontInfo *)v3, v63, (char *)__dst);
  (*(void (**)(TCFFParsingContext *, _OWORD *))(*(void *)this + 176))(this, __dst);
LABEL_38:
  __int16 v20 = *(const unsigned __int8 **)(v3 + 1504);
  if (v20)
  {
    LOWORD(__src[0]) = 0;
    if (!CFFDictGet<unsigned short,0u>(v20, *(void *)(v3 + 1512), __src, 2))
    {
      __int16 v56 = __cxa_allocate_exception(0x10uLL);
      *(void *)__int16 v56 = &unk_1F0DD4440;
      v56[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, BOOL))(*(void *)this + 144))(this, LOWORD(__src[0]) != 0);
  }
  uint64_t v21 = *(const unsigned __int8 **)(v3 + 1520);
  if (v21)
  {
    LODWORD(__src[0]) = 0;
    if (!CFFDictGet<int,0u>(v21, *(void *)(v3 + 1528), (int *)__src, 4))
    {
      int v57 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v57 = &unk_1F0DD4440;
      v57[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, void))(*(void *)this + 136))(this, (LODWORD(__src[0]) << 16));
  }
  __int16 v22 = *(const unsigned __int8 **)(v3 + 1536);
  if (v22)
  {
    LODWORD(__src[0]) = 0;
    if (!CFFDictGet<int,0u>(v22, *(void *)(v3 + 1544), (int *)__src, 4))
    {
      int v58 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v58 = &unk_1F0DD4440;
      v58[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, void))(*(void *)this + 152))(this, (LODWORD(__src[0]) << 16));
  }
  char v23 = *(const unsigned __int8 **)(v3 + 1552);
  if (v23)
  {
    LODWORD(__src[0]) = 0;
    if (!CFFDictGet<int,0u>(v23, *(void *)(v3 + 1560), (int *)__src, 4))
    {
      int v59 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v59 = &unk_1F0DD4440;
      v59[2] = 4;
    }
    (*(void (**)(TCFFParsingContext *, void))(*(void *)this + 160))(this, (LODWORD(__src[0]) << 16));
  }
  uint64_t result = *(void *)(v3 + 1872);
  if (result)
  {
    unint64_t v66 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v25 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v25 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)__srCGFloat c = v25;
    long long v65 = v25;
    uint64_t result = CFFDictGet<unsigned short,0u>((const unsigned __int8 *)result, *(void *)(v3 + 1880), __src, 40);
    char v26 = LOWORD(__src[0]) < 2u ? result : 0;
    if ((v26 & 1) == 0)
    {
      unint64_t v60 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v60 = &unk_1F0DD4440;
      void v60[2] = 4;
    }
  }
  unsigned int v27 = *((_DWORD *)this + 192);
  if (v27)
  {
    if ((v27 & 0x80000000) == 0)
    {
      if (v27 <= 1) {
        *((unsigned char *)this + 792) = 1;
      }
      (*(void (**)(TCFFParsingContext *, uint64_t))(*(void *)this + 32))(this, 256);
      uint64_t result = TCFFFontInfo::EnumerateDict(v3, (const char *)8, (uint64_t)this, (uint64_t (*)(void, void))EncodingEnumerationCallback);
    }
  }
  else
  {
    *((unsigned char *)this + 792) = 0;
    uint64_t result = (*(uint64_t (**)(TCFFParsingContext *))(*(void *)this + 24))(this);
  }
  __src[0] = (void *)0xAAAAAAAAAAAAAAAALL;
  unint64_t v62 = 0xAAAAAAAAAAAAAAAALL;
  int v28 = *(unsigned __int16 *)(v3 + 280);
  if (*(_WORD *)(v3 + 280))
  {
    *((_WORD *)this + 352) = v28;
    *((_WORD *)this + 353) = *(unsigned __int8 *)(v3 + 284);
    if (a2)
    {
      *a2 = *(_DWORD *)(v3 + 288);
      *a3 = *(_DWORD *)(v3 + 292);
    }
    else
    {
      uint64_t result = TCFFFontInfo::GetIndexedArray(v3, v3 + 280, 0, v28, &v62, __src);
      if (!result)
      {
        uint64_t v61 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v61 = &unk_1F0DD4440;
        v61[2] = 4;
      }
      uint64_t v29 = *((__int16 *)this + 353)
          + *((__int16 *)this + 353) * *((unsigned __int16 *)this + 352)
          + result;
      *((void *)this + 108) = v62;
      *((void *)this + 109) = v29;
    }
  }
  uint64_t v30 = *(unsigned int *)(v3 + 136);
  int v31 = *(_DWORD *)(v3 + 48);
  if (v31 == 4 || v31 == 1)
  {
    if (v30)
    {
      if ((*(uint64_t (**)(TCFFParsingContext *, void))(*(void *)this + 192))(this, *(unsigned int *)(v3 + 136)))
      {
        BOOL v32 = (unsigned __int8 **)((char *)this + 752);
        TCFFFontInfo::GetIndexedArray(v3, v3 + 136, 0, v30, (void *)this + 94, (void *)this + 95);
        uint64_t result = (*(uint64_t (**)(TCFFParsingContext *))(*(void *)this + 792))(this);
        if (!result) {
          return (*(uint64_t (**)(TCFFParsingContext *, uint64_t))(*(void *)this + 824))(this, v3);
        }
        uint64_t v33 = *v32;
        if (*v32)
        {
          int v34 = -1;
          int v35 = *(unsigned __int8 *)(v3 + 140) - 1;
          int v36 = 0;
          int v37 = 0;
          switch(*(unsigned char *)(v3 + 140))
          {
            case 1:
              goto LABEL_76;
            case 2:
              goto LABEL_75;
            case 3:
              goto LABEL_74;
            case 4:
              int v38 = *v33++;
              int v36 = v38 << 8;
LABEL_74:
              int v39 = *v33++;
              int v37 = (v36 | v39) << 8;
LABEL_75:
              int v40 = *v33++;
              int v34 = ((v37 | v40) << 8) - 1;
LABEL_76:
              int v41 = *v33++;
              v34 += v41;
              break;
            default:
              break;
          }
          int v42 = *(_DWORD *)(v3 + 148);
          int v43 = (_DWORD *)(*((void *)this + 79) + 4);
          do
          {
            int v44 = 0;
            switch(v35)
            {
              case 0:
                goto LABEL_82;
              case 1:
                goto LABEL_81;
              case 2:
                goto LABEL_80;
              case 3:
                int v45 = *v33++;
                int v44 = v45 << 8;
LABEL_80:
                int v46 = *v33++;
                int v44 = (v44 | v46) << 8;
LABEL_81:
                int v47 = *v33++;
                int v44 = (v44 | v47) << 8;
LABEL_82:
                int v48 = *v33++;
                v44 |= v48;
                break;
              default:
                break;
            }
            int v49 = v44 - 1;
            *(v43 - 1) = v34 + v42;
            _DWORD *v43 = v49 - v34;
            v43 += 2;
            int v34 = v49;
            --v30;
          }
          while (v30);
        }
        return result;
      }
      int v52 = 2;
    }
    else
    {
      int v52 = 4;
    }
    uint64_t v53 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v53 = &unk_1F0DD4440;
    v53[2] = v52;
  }
  return result;
}

void sub_1B534C888(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1B534C8CC(_Unwind_Exception *a1)
{
}

void sub_1B534C8D8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B534C8E0);
  }
  __clang_call_terminate(a1);
}

uint64_t EncodingEnumerationCallback(const unsigned __int8 *a1, unint64_t a2, unsigned int a3, uint64_t a4, void *a5)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)a5 + 192))
  {
    size_t v7 = (TCFFFontInfo *)a5[93];
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v10[6] = v8;
    v10[7] = v8;
    _OWORD v10[4] = v8;
    v10[5] = v8;
    v10[2] = v8;
    void v10[3] = v8;
    v10[0] = v8;
    v10[1] = v8;
    TCFFFontInfo::GetString(v7, a3, (char *)v10);
    (*(void (**)(void *, uint64_t, _OWORD *))(*a5 + 40))(a5, a4, v10);
  }
  return 1;
}

void *TCFFParsingContext::ParseGlobalSubrs(TCFFParsingContext *this)
{
  uint64_t result = (void *)*((void *)this + 93);
  uint64_t v3 = *result;
  int v4 = (_WORD *)(*result + 224);
  int v5 = (unsigned __int16)*v4;
  if (*v4)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t result = (void *)TCFFFontInfo::GetIndexedArray((uint64_t)result, (uint64_t)v4, 0, v5, &v9, &v8);
    if (result)
    {
      int v6 = (unsigned __int16)*(_DWORD *)(v3 + 224);
      *((_WORD *)this + 431) = *(_DWORD *)(v3 + 224);
      int v7 = *(unsigned __int8 *)(v3 + 228);
      *((unsigned char *)this + 861) = v7;
      *((void *)this + 110) = v9;
      *((void *)this + 111) = (v7 + v7 * v6 + result);
    }
  }
  return result;
}

uint64_t TCFFParsingContext::ParseCharsetDict(TCFFParsingContext *this, TCFFFontInfo *a2)
{
  return TCFFFontInfo::EnumerateDict((uint64_t)a2, (const char *)9, (uint64_t)this, (uint64_t (*)(void, void))CharsetEnumerationCallback);
}

uint64_t CharsetEnumerationCallback(const unsigned __int8 *a1, unint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (uint64_t *)a5[93];
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v21 = v9;
  long long v22 = v9;
  long long v19 = v9;
  long long v20 = v9;
  long long v17 = v9;
  long long v18 = v9;
  *(_OWORD *)uint64_t v15 = v9;
  long long v16 = v9;
  v14[1] = 0;
  void v14[2] = 0;
  v14[0] = &unk_1F0DD4340;
  uint64_t IndexedArrayOffset = TCFFFontSetInfo::GetIndexedArrayOffset(*v8, (uint64_t)v14, (uint64_t)(v8 + 17), a4);
  TCFFFontInfo::GetString((TCFFFontInfo *)v8, a3, v15);
  uint64_t v11 = a5[95];
  int v12 = TCFFFontSetInfo::GetIndexedArrayOffset(*v8, (uint64_t)v14, (uint64_t)(v8 + 17), a4 + 1);
  (*(void (**)(void *, void, uint64_t, void, char *, uint64_t, void))(*a5 + 200))(a5, 0, IndexedArrayOffset, 0, v15, v11 + IndexedArrayOffset, (v12 - IndexedArrayOffset));
  *(_WORD *)(a5[97] + 2 * (unsigned __int16)a4) = a3;
  *(_WORD *)(a5[98] + 2 * a3) = a4;
  return 1;
}

void TCFF2ParsingContext::TCFF2ParsingContext(TParsingContext *a1, const TDataReference *a2)
{
}

void sub_1B534CD04(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  uint64_t v6 = *((void *)v2 + 116);
  *((void *)v2 + 116) = 0;
  if (v6) {
    MEMORY[0x1BA9994A0](v6, 0x1000C8052888210);
  }
  uint64_t v7 = *v3;
  uint64_t *v3 = 0;
  if (v7) {
    std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>((uint64_t)v3, v7);
  }
  TCFFParsingContext::~TCFFParsingContext(v2);
  _Unwind_Resume(a1);
}

void TCFF2ParsingContext::~TCFF2ParsingContext(TCFF2ParsingContext *this)
{
  *(void *)this = &unk_1F0E00908;
  uint64_t v2 = *((void *)this + 116);
  *((void *)this + 116) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8052888210);
  }
  uint64_t v3 = *((void *)this + 115);
  *((void *)this + 115) = 0;
  if (v3) {
    std::default_delete<FDArrayEntity []>::operator()[abi:fe180100]<FDArrayEntity>((uint64_t)this + 920, v3);
  }
  TCFFParsingContext::~TCFFParsingContext(this);
}

{
  uint64_t vars8;

  TCFF2ParsingContext::~TCFF2ParsingContext(this);
  JUMPOUT(0x1BA9994D0);
}

BOOL TCFF2ParsingContext::EndCFF2FontDict(TCFF2ParsingContext *this, unsigned int a2)
{
  if (*((_DWORD *)this + 234) != a2) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 119);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = *((void *)this + 115) + 488 * a2;
  int v4 = *(unsigned __int16 *)(v3 + 4);
  *(_WORD *)(v2 + 58) = v4;
  *((void *)this + 119) = 0;
  int v5 = *(_DWORD *)(v3 + 8);
  int v6 = *(unsigned __int16 *)(v3 + 2);
  if (v4) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v5 == -1;
  }
  if (v7 && v6 == 0xFFFF) {
    return 1;
  }
  BOOL result = 0;
  if (v4)
  {
    if ((v5 & 0x80000000) == 0) {
      return (v6 - 1) < 4;
    }
  }
  return result;
}

void TCFF2ParsingContext::ParseCFF2data(TCFFParsingContext *this, uint64_t a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  int v2 = *((unsigned __int16 *)this + 458);
  if (!*((_WORD *)this + 458))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  int v5 = (uint64_t *)*((void *)this + 93);
  *((_DWORD *)this + 175) = *((_DWORD *)v5 + 34);
  if (v2 != 1)
  {
    int v48 = -1431655766;
    int v6 = (const unsigned __int8 *)v5[260];
    if (!v6 || !CFFDictGet<unsigned int,0u>(v6, v5[261], &v48, 4)) {
      goto LABEL_33;
    }
    uint64_t v7 = **((void **)this + 93);
    memset(v49, 170, 24);
    TCFFFontSetInfo::GetData(v49, *(void **)(v7 + 296), v48, 5);
    ByteInCGFloat c = ReadByteInc((MDataReference *)v49);
    if (ByteInc == 4)
    {
      uint64_t v9 = 6 * ReadBytes((const MDataReference *)v49, (const char *)4) + 9;
    }
    else if (ByteInc == 3)
    {
      uint64_t v9 = 3 * (unsigned __int16)ReadBytes((const MDataReference *)v49, (const char *)2) + 5;
    }
    else
    {
      if (ByteInc)
      {
        int v41 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v41 = &unk_1F0DD4440;
        v41[2] = 4;
      }
      uint64_t v9 = *((unsigned int *)this + 175) + 1;
    }
    *((void *)this + 118) = v9;
    int v10 = v48;
    TCFFFontSetInfo::GetData(v47, *(void **)(v7 + 296), v48, v9);
    if (!v47[1])
    {
LABEL_33:
      int v39 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v39 = &unk_1F0DD4440;
      v39[2] = 4;
    }
    *((_DWORD *)this + 235) = v10;
    int v5 = (uint64_t *)*((void *)this + 93);
  }
  uint64_t v11 = *v5;
  if (*v5)
  {
    int v12 = *(unsigned __int16 *)(v11 + 8);
    *((_WORD *)this + 425) = v12;
    if (v12)
    {
      *((unsigned char *)this + 848) = *(unsigned char *)(v11 + 12);
      *(void *)((char *)this + 852) = *(void *)(v11 + 16);
    }
  }
  else
  {
    *((_WORD *)this + 425) = 0;
  }
  TCFFParsingContext::CommenceParse(this, 0, 0);
  TCFFParsingContext::ParseGlobalSubrs(this);
  TCFFParsingContext::InitFontDesc((uint64_t)this);
  TCFFParsingContext::FixFontDesc(v13, *((void *)this + 86));
  uint64_t v14 = *((void *)this + 86);
  *(_WORD *)(v14 + 56) = -1;
  uint64_t v15 = *((void *)this + 93);
  if (*((_WORD *)this + 458))
  {
    uint64_t v42 = *((void *)this + 93);
    uint64_t v16 = 0;
    unint64_t v17 = 0;
    long long v18 = (unsigned int *)*((void *)this + 116);
    int v46 = v5 + 26;
    uint64_t v45 = a2 + 8;
    int v43 = (uint64_t *)((char *)this + 648);
    uint64_t v44 = 488 * *((unsigned __int16 *)this + 458);
    do
    {
      uint64_t v19 = *((void *)this + 115);
      memset(v49, 170, sizeof(v49));
      TCFFFontInfo::TCFFFontInfo((TCFFFontInfo *)v49);
      TCFFFontInfo::TCFFFontInfo((TCFFFontInfo *)&v49[488]);
      bzero(&v49[976], 0x546uLL);
      *(void *)&v49[488] = *v5;
      uint64_t v20 = v5[1];
      v49[504] = *((unsigned char *)v5 + 16);
      *(void *)&v49[496] = v20;
      *(void *)&v49[520] = v5[4];
      *(void *)&v49[528] = v5[5];
      long long v21 = *((_OWORD *)v5 + 4);
      *(_OWORD *)&v49[536] = *((_OWORD *)v5 + 3);
      *(_OWORD *)&v49[552] = v21;
      long long v22 = *((_OWORD *)v5 + 5);
      long long v23 = *((_OWORD *)v5 + 6);
      long long v24 = *((_OWORD *)v5 + 7);
      v49[616] = *((unsigned char *)v5 + 128);
      *(_OWORD *)&v49[584] = v23;
      *(_OWORD *)&v49[600] = v24;
      *(_OWORD *)&v49[568] = v22;
      *(_OWORD *)&v49[624] = *(_OWORD *)(v5 + 17);
      *(void *)&v49[648] = v5[20];
      *(void *)&v49[656] = v5[21];
      *(void *)&v49[672] = v5[23];
      *(void *)&v49[680] = v5[24];
      *(_WORD *)&v49[688] = *((_WORD *)v5 + 100);
      *(_OWORD *)&v49[696] = *v46;
      *(void *)&v49[720] = v5[29];
      *(void *)&v49[728] = v5[30];
      *(void *)&v49[744] = v5[32];
      *(void *)&v49[752] = v5[33];
      *(_DWORD *)&v49[760] = *((_DWORD *)v5 + 68);
      *(_OWORD *)&v49[768] = *(_OWORD *)(v5 + 35);
      *(void *)&v49[792] = v5[38];
      *(void *)&v49[800] = v5[39];
      *(void *)&v49[816] = v5[41];
      *(void *)&v49[824] = v5[42];
      *(_WORD *)&v49[832] = *((_WORD *)v5 + 172);
      uint64_t v25 = v5[44];
      v49[848] = *((unsigned char *)v5 + 360);
      *(void *)&v49[840] = v25;
      *(void *)&v49[864] = v5[47];
      *(void *)&v49[872] = v5[48];
      *(_WORD *)&v49[880] = *((_WORD *)v5 + 196);
      long long v26 = *((_OWORD *)v5 + 25);
      long long v27 = *((_OWORD *)v5 + 27);
      *(_OWORD *)&v49[904] = *((_OWORD *)v5 + 26);
      *(_OWORD *)&v49[920] = v27;
      *(_OWORD *)&v49[888] = v26;
      long long v28 = *((_OWORD *)v5 + 28);
      long long v29 = *((_OWORD *)v5 + 29);
      *(void *)&v49[968] = v5[60];
      *(_OWORD *)&v49[936] = v28;
      *(_OWORD *)&v49[952] = v29;
      TCFFFontSetInfo::GetFontDictInfo(v45, (const char *)5, (uint64_t)v46, v17, (uint64_t)v49);
      if (v17 >= *((unsigned __int16 *)this + 458))
      {
        int v37 = 2;
LABEL_32:
        int v38 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v38 = &unk_1F0DD4440;
        v38[2] = v37;
      }
      *((_DWORD *)this + 234) = v17;
      uint64_t v30 = *((void *)this + 115) + v16;
      uint64_t v31 = v30 + 36;
      *((void *)this + 119) = v30 + 36;
      *(_DWORD *)(v30 + 8) = -1;
      *(_DWORD *)(v30 + 2) = 0xFFFF;
      *(_DWORD *)(v30 + 32) = -1;
      *(_WORD *)(v30 + 92) = -1;
      *((void *)this + 93) = v49;
      TCFFParsingContext::CommenceParse(this, (int *)(v19 + v16 + 8), v18);
      if (*((_WORD *)this + 352))
      {
        uint64_t v32 = v19 + v16;
        *(_WORD *)(v32 + 4) = *((_WORD *)this + 352);
        *((_WORD *)this + 352) = 0;
        *(_WORD *)(v32 + 2) = *((_WORD *)this + 353);
        if (*((void *)this + 83))
        {
          uint64_t v33 = *v43;
          *((void *)this + 82) = 0;
          *((void *)this + 83) = 0;
          uint64_t *v43 = 0;
          if (v33)
          {
            *(void *)(v19 + v16 + 16) = v33;
            *(_DWORD *)(v19 + v16 + 8) = 0;
          }
        }
      }
      *(_DWORD *)(v19 + v16 + 484) = *(unsigned __int16 *)&v49[448];
      TCFFParsingContext::InitFontDesc((uint64_t)this);
      TCFFParsingContext::FixFontDesc(v34, v31);
      if (!TCFF2ParsingContext::EndCFF2FontDict(this, v17))
      {
        int v37 = 4;
        goto LABEL_32;
      }
      ++v17;
      v16 += 488;
      ++v18;
    }
    while (v44 != v16);
    uint64_t v14 = *((void *)this + 86);
    uint64_t v15 = v42;
  }
  *((void *)this + 93) = v15;
  CopyFontDesc(v14, *((void *)this + 115) + 36);
  int v35 = (TSFNTOpenTypeCFF2Font *)*((void *)this + 113);
  int v36 = (const ItemVariationStore *)(*((void *)this + 93) + 400);
  TCFF2ParsingContext::SwipeCFF2ResultsToFont(this, v35, v36);
}

void sub_1B534D540(_Unwind_Exception *exception_object)
{
}

void sub_1B534D548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    TCFF2ParsingContext::EndCFF2FontDict(v9, v10);
    *((void *)v9 + 93) = a9;
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1B534D578(_Unwind_Exception *a1)
{
}

void sub_1B534D584(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1B534D58CLL);
  }
  __clang_call_terminate(a1);
}

uint64_t TCFFCIDParsingContext::GDBytes(TCFFCIDParsingContext *this, int a2)
{
  *((_DWORD *)this + 230) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::FDBytes(TCFFCIDParsingContext *this, int a2)
{
  *((_DWORD *)this + 229) = a2;
  return 1;
}

BOOL TCFFCIDParsingContext::CIDCount(TCFFCIDParsingContext *this, __int16 a2)
{
  return *((unsigned __int16 *)this + 462) == a2;
}

uint64_t TCFFCIDParsingContext::CIDMapOffset(TCFFCIDParsingContext *this, int a2)
{
  *((_DWORD *)this + 235) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::SDBytes(TCFFCIDParsingContext *this, __int16 a2)
{
  *(_WORD *)(*((void *)this + 127) + 488 * *((unsigned __int16 *)this + 512) + 2) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::SubrMapOffset(TCFFCIDParsingContext *this, int a2)
{
  *(_DWORD *)(*((void *)this + 127) + 488 * *((unsigned __int16 *)this + 512) + 8) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::SubrCount(TCFFCIDParsingContext *this, __int16 a2)
{
  *(_WORD *)(*((void *)this + 127) + 488 * *((unsigned __int16 *)this + 512) + 4) = a2;
  return 1;
}

uint64_t TCFFCIDParsingContext::CIDStartData(TCFFCIDParsingContext *this)
{
  return 1;
}

void TCFFCIDParsingContext::ParseCFFCIDdata(uint64_t a1, uint64_t a2, int16x4_t *a3, char a4)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void **)(a1 + 744);
  uint64_t v9 = (int *)(*(void *)(a1 + 688) + 88);
  unsigned int v10 = (const unsigned __int8 *)v8[132];
  if (v10)
  {
    if (!CFFDictGet<int,16u>(v10, v8[133], v9, 16))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DD4440;
      exception[2] = 4;
    }
    uint64_t v11 = *(void **)(a1 + 744);
  }
  else
  {
    if (a3) {
      int32x4_t v12 = vshll_n_s16(*a3, 0x10uLL);
    }
    else {
      int32x4_t v12 = (int32x4_t)xmmword_1B5401410;
    }
    *(int32x4_t *)uint64_t v9 = v12;
    uint64_t v11 = v8;
  }
  *(_DWORD *)(a1 + 944) = 0;
  int v28 = -1431655766;
  uint64_t v13 = (const unsigned __int8 *)v8[254];
  if (v13 && CFFDictGet<int,0u>(v13, v8[255], &v28, 4))
  {
    *(_WORD *)(a1 + 924) = v28;
    *(_DWORD *)(a1 + 700) = *((_DWORD *)v11 + 34);
    if ((a4 & 1) == 0)
    {
      LODWORD(__b[0]) = -1431655766;
      uint64_t v14 = (const unsigned __int8 *)v8[152];
      if (!v14
        || ((BOOL v15 = CFFDictGet<unsigned int,0u>(v14, v8[153], (int *)__b, 4), LODWORD(__b[0]) > 2)
          ? (BOOL v16 = v15)
          : (BOOL v16 = 0),
            !v16))
      {
        uint64_t v25 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v25 = &unk_1F0DD4440;
        v25[2] = 4;
      }
      *(_DWORD *)(a1 + 1068) = __b[0];
    }
    *(_DWORD *)(a1 + 916) = 0;
    *(_DWORD *)(a1 + 920) = *((unsigned __int8 *)v11 + 140);
    *(_DWORD *)(a1 + 940) = *((_DWORD *)v11 + 36);
    *(_DWORD *)(a1 + 928) = *(_DWORD *)(a2 + 2644);
    int v30 = -1431655766;
    unint64_t v17 = (const unsigned __int8 *)v8[260];
    if (v17 && CFFDictGet<unsigned int,0u>(v17, v8[261], &v30, 4))
    {
      memset(__b, 170, 24);
      TCFFFontSetInfo::GetData(__b, *(void **)(*v11 + 296), v30, 3);
      ByteInCGFloat c = ReadByteInc((MDataReference *)__b);
      if (ByteInc == 3)
      {
        unsigned int v19 = 3 * (unsigned __int16)ReadBytes((const MDataReference *)__b, (const char *)2) + 5;
      }
      else
      {
        if (ByteInc)
        {
          long long v27 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v27 = &unk_1F0DD4440;
          void v27[2] = 4;
        }
        unsigned int v19 = *(_DWORD *)(a1 + 700) + 1;
      }
      *(_DWORD *)(a1 + 1064) = v19;
      uint64_t v20 = *v11;
      unint64_t v21 = v19;
      TCFFFontSetInfo::GetData(&__dst, *(void **)(v20 + 296), v30, v19);
      *((void *)&__b[0] + 1) = v32;
      *(void *)&__b[1] = v33;
      if (v32)
      {
        if (v33 >= v21) {
          operator new[]();
        }
        long long v22 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v22 = &unk_1F0DD4440;
        v22[2] = 4;
      }
    }
    long long v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v23 = &unk_1F0DD4440;
    _OWORD v23[2] = 4;
  }
  long long v24 = __cxa_allocate_exception(0x10uLL);
  *(void *)long long v24 = &unk_1F0DD4440;
  long long v24[2] = 4;
}

void sub_1B534E504(_Unwind_Exception *a1)
{
}

void sub_1B534E514(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 600))(v2, v3);
    __cxa_rethrow();
  }
  _Unwind_Resume(a1);
}

void sub_1B534E56C(_Unwind_Exception *a1)
{
}

void sub_1B534E578(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *CopyFontDesc(uint64_t a1, uint64_t a2)
{
  if (!*(_WORD *)a1) {
    *(_WORD *)a1 = *(_WORD *)a2;
  }
  if (!*(_WORD *)(a1 + 2)) {
    *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  }
  if (!*(_DWORD *)(a1 + 4))
  {
    long long v2 = *(_OWORD *)(a2 + 4);
    *(void *)(a1 + 20) = *(void *)(a2 + 20);
    *(_OWORD *)(a1 + 4) = v2;
  }
  if (!*(_DWORD *)(a1 + 28)) {
    *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  }
  if (!*(_DWORD *)(a1 + 32)) {
    *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  }
  if (!*(_DWORD *)(a1 + 36)) {
    *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  }
  if (!*(_DWORD *)(a1 + 40)) {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  }
  if (!*(_DWORD *)(a1 + 44)) {
    *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  }
  if (!*(_DWORD *)(a1 + 48)) {
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  }
  if (!*(_DWORD *)(a1 + 52)) {
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  }
  if (*(__int16 *)(a1 + 56) <= 0) {
    *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  }
  if (!*(_WORD *)(a1 + 58)) {
    *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 58);
  }
  if (!*(_WORD *)(a1 + 60)) {
    *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
  }
  if (!*(_WORD *)(a1 + 62)) {
    *(_WORD *)(a1 + 62) = *(_WORD *)(a2 + 62);
  }
  if (!*(_WORD *)(a1 + 64)) {
    *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  }
  if (!*(_WORD *)(a1 + 66)) {
    *(_WORD *)(a1 + 66) = *(_WORD *)(a2 + 66);
  }
  if (!*(_WORD *)(a1 + 68)) {
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  }
  if (!*(_WORD *)(a1 + 70)) {
    *(_WORD *)(a1 + 70) = *(_WORD *)(a2 + 70);
  }
  if (!*(_WORD *)(a1 + 72)) {
    *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  }
  if (!*(_WORD *)(a1 + 74)) {
    *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 74);
  }
  if (!*(_WORD *)(a1 + 76)) {
    *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  }
  if (!*(_WORD *)(a1 + 78)) {
    *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 78);
  }
  if (!*(_WORD *)(a1 + 80)) {
    *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  }
  if (!*(_WORD *)(a1 + 82)) {
    *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  }
  if (!*(_WORD *)(a1 + 84)) {
    *(_WORD *)(a1 + 84) = *(_WORD *)(a2 + 84);
  }
  return memcpy((void *)(a1 + 88), (const void *)(a2 + 88), 0x168uLL);
}

uint64_t TCFF2ParsingContext::IsCFF2(TCFF2ParsingContext *this)
{
  return 1;
}

BOOL CFFDictGet<int,16u>(const unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4)
{
  void v24[3] = *MEMORY[0x1E4F143B8];
  if (a1 == (const unsigned __int8 *)-1 || (int v4 = a1, v5 = &a1[a2], a1 + 1 > &a1[a2]))
  {
LABEL_37:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  int v6 = a3;
  unint64_t v7 = (unint64_t)a3 + a4;
  while (1)
  {
    uint64_t v8 = v4 + 1;
    unsigned int v9 = *v4;
    switch(v9)
    {
      case 0x1Eu:
        memset(v24, 170, 18);
        int v4 = BCDtoASCII(v8, v5, (char (*)[18])v24);
        int v12 = llround(atof_l((const char *)v24, 0) * 65536.0);
        goto LABEL_34;
      case 0x1Du:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
        {
          uint64_t v20 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v20 = &unk_1F0DD4440;
          v20[2] = 4;
        }
        int v10 = v4[3];
        int v11 = v4[4];
        v4 += 5;
        goto LABEL_13;
      case 0x1Cu:
        if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFDLL || v4 + 3 > v5)
        {
          unsigned int v19 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned int v19 = &unk_1F0DD4440;
          v19[2] = 4;
        }
        int v10 = v4[1];
        int v11 = v4[2];
        v4 += 3;
LABEL_13:
        int v12 = (v10 << 24) | (v11 << 16);
        goto LABEL_34;
    }
    if (v9 < 0x20) {
      return v9 != 23;
    }
    if (v9 == 255)
    {
      if ((unint64_t)v8 > 0xFFFFFFFFFFFFFFFBLL || v4 + 5 > v5)
      {
        unint64_t v21 = __cxa_allocate_exception(0x10uLL);
        *(void *)unint64_t v21 = &unk_1F0DD4440;
        _OWORD v21[2] = 4;
      }
      unsigned int v13 = *(_DWORD *)(v4 + 1);
      v4 += 5;
      int v12 = bswap32(v13);
    }
    else
    {
      if (v9 > 0xF6)
      {
        BOOL v16 = v4 != (const unsigned __int8 *)-2 && v4 + 2 <= v5;
        if (v9 > 0xFA)
        {
          if (!v16)
          {
            long long v22 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v22 = &unk_1F0DD4440;
            v22[2] = 4;
          }
          uint64_t v8 = v4 + 2;
          int v14 = 64148 - (v4[1] | (v9 << 8));
        }
        else
        {
          if (!v16)
          {
            long long v23 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v23 = &unk_1F0DD4440;
            _OWORD v23[2] = 4;
          }
          uint64_t v8 = v4 + 2;
          int v14 = (v4[1] | (v9 << 8)) - 63124;
        }
      }
      else
      {
        int v14 = v9 - 139;
      }
      int v12 = v14 << 16;
      int v4 = v8;
    }
LABEL_34:
    if ((unint64_t)v6 >= v7) {
      return 0;
    }
    *v6++ = v12;
    if (v4 == (const unsigned __int8 *)-1 || v4 + 1 > v5) {
      goto LABEL_37;
    }
  }
}

double ItemVariationStore::ValueFromBlendRequest(ItemVariationStore *this, unsigned int a2, const double *a3, uint64_t a4, double *a5)
{
  double result = 0.0;
  if (*((void *)this + 4) > (unint64_t)a2)
  {
    unsigned int v6 = *(_DWORD *)(*((void *)this + 5) + 4 * a2);
    if (v6)
    {
      unint64_t v7 = *((void *)this + 1);
      uint64_t v8 = (unsigned __int16 *)(*(void *)this + bswap32(v6));
      unsigned int v9 = v8 + 3;
      if ((unint64_t)(v8 + 3) <= v7)
      {
        if (a4)
        {
          uint64_t v10 = bswap32(v8[2]) >> 16;
          int v11 = bswap32(v8[1]);
          unint64_t v12 = (unint64_t)&v8[v10 + 3]
              + (((HIWORD(v11) & 0x7FFF) + v10) << (v11 < 0)) * (unint64_t)(bswap32(*v8) >> 16);
          if (v12 >= (unint64_t)v8 && v12 <= v7)
          {
            while (1)
            {
              unsigned int v14 = *v9++;
              unint64_t v15 = bswap32(v14) >> 16;
              if (*((void *)this + 2) <= v15) {
                break;
              }
              double v16 = *a5++;
              double result = result + a3[v15] * v16;
              if (!--a4) {
                return result;
              }
            }
            return 0.0;
          }
        }
      }
    }
  }
  return result;
}

void TType1SFNTFont::~TType1SFNTFont(TType1SFNTFont *this)
{
  *(void *)this = &unk_1F0E02218;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E02218;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1BA9994D0);
}

void TType1SFNTFont::TType1SFNTFont(TType1SFNTFont *this, const TType1Font *a2)
{
  *((_WORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a2;
  *(void *)this = &unk_1F0E00C88;
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v3;
  long long v16 = v3;
  long long v14 = v3;
  FontObject = (const TFontObjectSurrogate *)TType1PSFont::GetFontObject(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v14, FontObject, 1415139377, 0x10000, 0, 0x18u);
  uint64_t v5 = *((void *)&v16 + 1);
  *((_DWORD *)this + 3) = bswap32(*(_DWORD *)(*((void *)&v16 + 1) + 20));
  unsigned int v6 = *(unsigned __int16 *)(v5 + 4);
  if (bswap32(*(_DWORD *)(v5 + 8)) > bswap32(*(_DWORD *)(v5 + 12)) + bswap32(*(_DWORD *)(v5 + 16))) {
    *((_WORD *)this + 4) |= 0x80u;
  }
  TDataReference::~TDataReference((TDataReference *)((char *)&v14 + 8));
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v15 = v7;
  long long v16 = v7;
  long long v14 = v7;
  uint64_t v8 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1SFNTFont *))(*(void *)this + 216))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v14, v8, 1112297028);
  *((_WORD *)this + 4) |= 1u;
  TDataReference::~TDataReference((TDataReference *)((char *)&v14 + 8));
  uint64_t v9 = (*(uint64_t (**)(TType1SFNTFont *))(*(void *)this + 216))(this);
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 56))(v9, 1129205844);
  unsigned int v11 = bswap32(v6) >> 16;
  __int16 v12 = *((_WORD *)this + 4);
  if (v10) {
    v12 |= 2u;
  }
  if ((v11 & 0xA) != 0) {
    v12 |= 0x40u;
  }
  if ((v11 & 4) != 0) {
    v12 |= 0xC0u;
  }
  if ((v11 & 0xE) != 0) {
    char v13 = 1;
  }
  else {
    char v13 = v10;
  }
  if (v13) {
    *((_WORD *)this + 4) = v12;
  }
  *((_WORD *)this + 8) = *(_WORD *)(*(void *)(*((void *)this + 4) + 128) + 56);
  if ((v12 & 0x80) != 0) {
    *((_WORD *)this + 4) = v12 | 0x40;
  }
}

void sub_1B534EEEC(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = v1[3];
  v1[3] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TType1SFNTFont::GetFontDataHeaderSize(TType1SFNTFont *this)
{
  return 24;
}

void *AllocateMemory(size_t a1, char a2)
{
  if (a2) {
    double result = malloc_type_calloc(a1, 1uLL, 0xE6A616E6uLL);
  }
  else {
    double result = malloc_type_malloc(a1, 0x1E8E5A64uLL);
  }
  if (!result)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 20;
  }
  return result;
}

uint64_t SelectStreamType(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned int v3 = *a3;
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)(v4 + 153) == 1 && !*(unsigned char *)(v4 + 152))
  {
    if ((v3 & 4) != 0)
    {
      int v5 = 4;
      goto LABEL_18;
    }
    return 10;
  }
  if ((v3 & 0x80) != 0)
  {
    int v5 = 128;
    goto LABEL_18;
  }
  if ((v3 & 0x40) != 0)
  {
    int v5 = 64;
    goto LABEL_18;
  }
  if ((v3 & 8) != 0)
  {
    int v5 = 8;
    goto LABEL_18;
  }
  if (v3)
  {
    int v5 = 1;
    goto LABEL_18;
  }
  if ((v3 & 0x20) != 0)
  {
    int v5 = 32;
    goto LABEL_18;
  }
  if ((v3 & 2) == 0) {
    return 10;
  }
  int v5 = 2;
LABEL_18:
  uint64_t result = 0;
  *a3 = v5 | v3 & 0xFFFFF000;
  return result;
}

uint64_t GetGlyphNameFromGlyphID(uint64_t a1, memoryContext *a2, uint64_t a3, unsigned __int16 *a4, _DWORD *a5, unsigned char *a6)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 8);
  if (*a4 >= *(unsigned __int16 *)(v7 + 40))
  {
    *a6 = 0;
    return 22;
  }
  else
  {
    *(void *)&__len[1] = 0xAAAAAAAAAAAAAAAALL;
    unsigned int FontTable = ScalerGetFontTable(a2, 1886352244, 0, &__len[1], 1, 0);
    int v35 = -1431655766;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v33 = v12;
    long long v34 = v12;
    long long v31 = v12;
    long long v32 = v12;
    long long v29 = v12;
    long long v30 = v12;
    long long v27 = v12;
    long long v28 = v12;
    long long v25 = v12;
    long long v26 = v12;
    long long v23 = v12;
    long long v24 = v12;
    long long v21 = v12;
    long long v22 = v12;
    *(_OWORD *)unsigned int v19 = v12;
    long long v20 = v12;
    __len[0] = -86;
    char v13 = *(const void **)&__len[1];
    long long v14 = ZGetGlyphName(*(uint64_t *)&__len[1], FontTable, *(unsigned __int16 *)(v7 + 40), *a4, __len, v19, 0x104uLL);
    int v15 = __len[0];
    if (*a5 > __len[0])
    {
      memmove(a6, v14, __len[0]);
      uint64_t v16 = 0;
      a6[v15] = 0;
      *a5 = v15 + 1;
      if (!v13) {
        return v16;
      }
      goto LABEL_7;
    }
    uint64_t v16 = 19;
    if (v13) {
LABEL_7:
    }
      ScalerReleaseFontTable(a2, v13);
  }
  return v16;
}

uint64_t GetGlyphIDFromGlyphName(uint64_t a1, memoryContext *a2, char *a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v7 = *a4;
  uint64_t v8 = *(void *)(a1 + 8);
  unsigned int v19 = (void *)0xAAAAAAAAAAAAAAAALL;
  unsigned int FontTable = ScalerGetFontTable(a2, 1886352244, 0, &v19, 1, 0);
  __int16 v10 = 0;
  unsigned int v11 = v19;
  if (v7 >= 2)
  {
    unsigned int v12 = FontTable;
    uint64_t v13 = 0;
    __int16 v10 = 0;
    unint64_t v14 = v7 >> 1;
    do
    {
      if (*a3)
      {
        if (ZGetGlyphID((uint64_t)v11, v12, a3, *(unsigned __int16 *)(v8 + 40), (unsigned __int16 *)(a5 + 2 * v13)))
        {
          BOOL v15 = 1;
        }
        else
        {
          __int16 v10 = 22;
          BOOL v15 = v14 == 1;
        }
        if (!v15)
        {
          *(_WORD *)(a5 + 2 * v13) = -1;
          __int16 v10 = 22;
        }
      }
      else
      {
        *(_WORD *)(a5 + 2 * v13) = 0;
      }
      while (*a3++)
        ;
      ++v13;
    }
    while (v13 != v14);
  }
  if (v11) {
    ScalerReleaseFontTable(a2, v11);
  }
  return v10;
}

void StreamT1Font(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v194 = *MEMORY[0x1E4F143B8];
  int v5 = *(memoryContext **)a1;
  int v153 = 0;
  unsigned int v154 = 0;
  unsigned int FontProtectionInfo = TFontSurrogate::GetFontProtectionInfo((TFontSurrogate *)(*(void *)v5 + 16), 0);
  if (!*(void *)(*(void *)(a2 + 8) + 56))
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  unsigned int v7 = FontProtectionInfo;
  BOOL v145 = v5;
  ScalerGetFontTable(v5, 1751474532, 0, &v153, 0, 54);
  unsigned int FontTable = ScalerGetFontTable(v5, 1886352244, 0, &v154, 1, 0);
  uint64_t v14 = HIWORD(v7) & 0x30E;
  if (a3)
  {
    if (v14) {
      ZWriteStringF(a2, 203, v8, v9, v10, v11, v12, v13, HIWORD(v7) & 0x30E);
    }
    int v15 = 6;
  }
  else
  {
    size_t v16 = strlen(*(const char **)(*(void *)(a2 + 8) + 56));
    ZWriteStringF(a2, 0, v17, v18, v19, v20, v21, v22, v16);
    if (v14) {
      ZWriteStringF(a2, 203, v23, v24, v25, v26, v27, v28, v14);
    }
    ZWriteStringF(a2, 2, v23, v24, v25, v26, v27, v28, v16);
    v156[0] = -1431655766;
    long long v29 = (char *)ZGetString(3, v156);
    StreamBytesThroughBuffer(a2, v156[0], v29);
    v156[0] = -1431655766;
    long long v30 = (char *)ZGetString(6, v156);
    StreamBytesThroughBuffer(a2, v156[0], v30);
    v156[0] = -1431655766;
    long long v31 = (char *)ZGetString(7, v156);
    StreamBytesThroughBuffer(a2, v156[0], v31);
    DumpFontEncoding(v145, a2, (uint64_t)v154, FontTable);
    int v15 = 8;
  }
  v156[0] = -1431655766;
  long long v32 = (char *)ZGetString(v15, v156);
  StreamBytesThroughBuffer(a2, v156[0], v32);
  long long v33 = v153;
  ZWriteStringF(a2, 11, v34, v35, v36, v37, v38, v39, COERCE__INT64(1.0 / (double)(bswap32(*((unsigned __int16 *)v153 + 9)) >> 16)));
  ZWriteStringF(a2, 12, v40, v41, v42, v43, v44, v45, (__int16)(bswap32(*((unsigned __int16 *)v33 + 18)) >> 16));
  unsigned int v52 = bswap32(v33[2]);
  uint64_t v53 = *(void *)(a2 + 8);
  int v54 = *(_DWORD *)(v53 + 28);
  if (v54 >= 1)
  {
    __int16 v55 = *(int **)(v53 + 32);
    unsigned int v56 = v54 + 1;
    do
    {
      int v57 = *v55;
      int v58 = v55[1];
      v55 += 2;
      v52 += v57 + v58;
      --v56;
    }
    while (v56 > 1);
  }
  ZWriteStringF(a2, 13, v46, v47, v48, v49, v50, v51, (v52 & 0x7FFFF) + 4000000);
  v156[0] = -1431655766;
  int v59 = (char *)ZGetString(46, v156);
  StreamBytesThroughBuffer(a2, v156[0], v59);
  v156[0] = -1431655766;
  unint64_t v60 = (char *)ZGetString(26, v156);
  StreamBytesThroughBuffer(a2, v156[0], v60);
  int v150 = v154;
  int v144 = *(memoryContext **)a1;
  unint64_t v184 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v61 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v61 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v183[1] = v61;
  v183[2] = v61;
  long long v182 = v61;
  v183[0] = v61;
  *(_OWORD *)v181 = v61;
  unint64_t v179 = 0xAAAAAAAAAAAAAAAALL;
  long long v173 = v61;
  long long v174 = v61;
  unint64_t v175 = 0xAAAAAAAAAAAAAAAALL;
  long long v172 = v61;
  long long v171 = v61;
  long long v170 = v61;
  long long v169 = v61;
  long long v168 = v61;
  long long v167 = v61;
  long long v166 = v61;
  long long v165 = v61;
  long long v164 = v61;
  long long v163 = v61;
  long long v161 = v61;
  long long v162 = v61;
  long long v159 = v61;
  long long v160 = v61;
  long long v157 = v61;
  long long v158 = v61;
  *(void *)int v156 = a2;
  uint64_t inited = InitVariationInfo(a1, (uint64_t)v183, *(_DWORD *)(*(void *)(a2 + 8) + 28), *(uint64_t **)(*(void *)(a2 + 8) + 32));
  InitGlyphInfo(a1, (uint64_t)&v157, inited);
  ENewBuffer((uint64_t)v181, (memoryContext **)a2);
  *(_DWORD *)v185 = -1431655766;
  unsigned __int16 v63 = (char *)ZGetString(29, (int *)v185);
  EWriteBytesAny((uint64_t)v181, *(int *)v185, v63);
  uint64_t v64 = *(void *)(a1 + 8);
  if (WORD4(v170)) {
    char v65 = 2;
  }
  else {
    char v65 = 1;
  }
  int v66 = *(int *)(v64 + 100) >> v65;
  BOOL v67 = __OFSUB__(v66, 1);
  int v68 = v66 - 1;
  if (v68 < 0 != v67) {
    goto LABEL_80;
  }
  unsigned int v69 = *(unsigned __int16 *)(v64 + 40);
  if (v68 >= v69) {
    unsigned int v70 = v69;
  }
  else {
    unsigned int v70 = v68;
  }
  long long v71 = *(unsigned int **)(*(void *)(a2 + 8) + 48);
  unsigned int v72 = v70 + 31;
  unsigned int v73 = ((v70 + 31) >> 3) & 0x3FFC;
  *(void *)&long long v74 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v74 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v191 = v74;
  long long v192 = v74;
  long long v189 = v74;
  long long v190 = v74;
  long long v187 = v74;
  long long v188 = v74;
  *(_OWORD *)v185 = v74;
  long long v186 = v74;
  if (v71)
  {
    *v71 |= 0x80000000;
    unsigned int v152 = (unsigned int *)ScalerNewScratch(v144, v73, 1);
    FindComponentsFromGlyfTable(v144, v70, v71, v152, (unsigned int *)v170, (void *)SWORD4(v170), 1);
    int v75 = (v70 - 1) | 0x1F;
    if (v75 >= (int)v70)
    {
      int v76 = v75 + 1;
      int v77 = v70;
      do
      {
        v71[v77 >> 5] &= ~(0x80000000 >> v77);
        ++v77;
      }
      while (v76 != v77);
    }
    unsigned __int16 v78 = 0;
    if ((unsigned __int16)(v72 >> 5))
    {
      unsigned int v79 = v72 >> 5;
      long long v80 = v152;
      do
      {
        unsigned int v81 = *v80;
        if (*v80)
        {
          int v82 = 32;
          do
          {
            v78 += v81 & 1;
            if (v81 < 2) {
              break;
            }
            v81 >>= 1;
            --v82;
          }
          while ((_WORD)v82);
        }
        ++v80;
        int v83 = (__int16)v79--;
      }
      while (v83 > 1);
    }
    unsigned __int16 v147 = ZMergeAndCountLongBits(v71, v152, (__int16)((int)v72 >> 5));
LABEL_39:
    int v148 = v78;
    if (v78)
    {
      long long v89 = (char *)ScalerNewScratch(v144, 2 * v78, 0);
      unsigned int v90 = 0;
      long long v91 = v152;
      long long v92 = v89;
      do
      {
        unsigned int v93 = *v91;
        if (*v91)
        {
          int v94 = 0;
          unsigned int v95 = 0x80000000;
          do
          {
            if ((v95 & v93) != 0)
            {
              *(_WORD *)long long v92 = v90 + v94;
              v92 += 2;
            }
            v95 >>= 1;
            ++v94;
          }
          while (v94 != 32);
        }
        v90 += 32;
        ++v91;
      }
      while (v90 < v70);
      char v149 = 0;
    }
    else
    {
      long long v89 = 0;
      int v148 = 0;
      char v149 = 1;
    }
    goto LABEL_50;
  }
  unsigned int v152 = (unsigned int *)ScalerNewScratch(v144, v73, 1);
  if ((unsigned __int16)(v72 >> 5))
  {
    unsigned __int16 v78 = 0;
    unsigned int v84 = v72 >> 5;
    long long v85 = v152;
    do
    {
      unsigned int v86 = *v85;
      if (*v85)
      {
        int v87 = 32;
        do
        {
          v78 += v86 & 1;
          if (v86 < 2) {
            break;
          }
          v86 >>= 1;
          --v87;
        }
        while ((_WORD)v87);
      }
      ++v85;
      int v88 = (__int16)v84--;
    }
    while (v88 > 1);
    unsigned __int16 v147 = v70;
    goto LABEL_39;
  }
  long long v89 = 0;
  int v148 = 0;
  char v149 = 1;
  unsigned __int16 v147 = v70;
LABEL_50:
  long long v96 = (char *)ScalerNewScratch(*(memoryContext **)a2, 0x400u, 0);
  unint64_t v176 = v96;
  v177 = v96;
  uint64_t v178 = 0x40000000000;
  v180 = (memoryContext **)a2;
  LODWORD(v179) = 0;
  *(_DWORD *)v193 = -1431655766;
  long long v97 = (char *)ZGetString(30, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v97);
  memset(v193, 170, sizeof(v193));
  int v98 = snprintf_l(v193, 0x10uLL, 0, "%d", v148 + 4);
  EWriteBytesAny((uint64_t)v181, v98, v193);
  *(_DWORD *)v193 = -1431655766;
  long long v99 = (char *)ZGetString(31, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v99);
  if ((v149 & 1) == 0)
  {
    unsigned int v100 = v148 + 1;
    unsigned __int16 v101 = 4;
    long long v102 = v89;
    do
    {
      unsigned int v103 = *(unsigned __int16 *)v102;
      v102 += 2;
      WriteCSGlyphData(&v176, (uint64_t)v156, v103, v148, (uint64_t)v89, 1, 0);
      EWriteCSByte(&v176, 11);
      *(_DWORD *)v193 = -1431655766;
      long long v104 = (char *)ZGetString(32, (int *)v193);
      EWriteBytesAny((uint64_t)v181, *(int *)v193, v104);
      memset(v193, 170, sizeof(v193));
      int v105 = snprintf_l(v193, 0x10uLL, 0, "%d", v101);
      EWriteBytesAny((uint64_t)v181, v105, v193);
      EWriteByte((uint64_t)v181, 32);
      memset(v193, 170, sizeof(v193));
      int v106 = snprintf_l(v193, 0x10uLL, 0, "%d", v178 + 4);
      EWriteBytesAny((uint64_t)v181, v106, v193);
      *(_DWORD *)v193 = -1431655766;
      uint64_t v107 = (char *)ZGetString(33, (int *)v193);
      EWriteBytesAny((uint64_t)v181, *(int *)v193, v107);
      EWriteCSString((uint64_t)v181, (uint64_t)&v176);
      *(_DWORD *)v193 = -1431655766;
      uint64_t v108 = (char *)ZGetString(34, (int *)v193);
      EWriteBytesAny((uint64_t)v181, *(int *)v193, v108);
      LODWORD(v178) = 0;
      long long v96 = v177;
      unint64_t v176 = v177;
      ++v101;
      --v100;
    }
    while (v100 > 1);
  }
  *(_DWORD *)v193 = -1431655766;
  uint64_t v109 = (char *)ZGetString(35, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v109);
  *(_DWORD *)v193 = -1431655766;
  uint64_t v110 = (char *)ZGetString(36, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v110);
  memset(v193, 170, sizeof(v193));
  int v111 = snprintf_l(v193, 0x10uLL, 0, "%d", v147);
  EWriteBytesAny((uint64_t)v181, v111, v193);
  *(_DWORD *)v193 = -1431655766;
  unint64_t v112 = (char *)ZGetString(37, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v112);
  if (v71)
  {
    unsigned int v113 = 0;
    do
    {
      unsigned int v114 = v113 + 32;
      if (*v71)
      {
        unsigned int v115 = 0x80000000;
        do
        {
          if ((*v71 & v115) != 0 && v113 < v70)
          {
            unsigned __int8 v155 = -86;
            GetGlyphForStreaming(v113, (unsigned int *)&v157, 1, 0);
            __int16 v117 = WORD6(v171);
            int v118 = SWORD6(v158);
            uint64_t v119 = (char *)ZGetGlyphName((uint64_t)v150, FontTable, (unsigned __int16)v70, (unsigned __int16)v113, (char *)&v155, v185, 0x80uLL);
            EWriteGlyphName((uint64_t)v181, v119, v155);
            EWriteCSNumber(&v176, 2, v120, v121, v122, v123, v124, v125, v117);
            EWriteCSByte(&v176, 13);
            if (((v152[v113 >> 5] << v113) & 0x80000000) != 0)
            {
              if (v117)
              {
                EWriteCSNumber(&v176, 2, v126, v127, v128, v129, v130, v131, 0);
                EWriteCSByte2(&v176, 33);
              }
              if ((v149 & 1) == 0)
              {
                int v132 = 0;
                int v133 = v148 - 1;
                do
                {
                  int v134 = (v133 + v132) >> 1;
                  unsigned int v135 = *(unsigned __int16 *)&v89[2 * v134];
                  if (v135 >= (unsigned __int16)v113)
                  {
                    if (v135 <= (unsigned __int16)v113) {
                      goto LABEL_72;
                    }
                    int v133 = v134 - 1;
                  }
                  else
                  {
                    int v132 = v134 + 1;
                  }
                }
                while (v132 <= v133);
              }
              LOWORD(v134) = -1;
LABEL_72:
              EWriteCSNumber(&v176, 1, v126, v127, v128, v129, v130, v131, (unsigned __int16)(v134 + 4));
              EWriteCSByte(&v176, 10);
            }
            else
            {
              WriteCSGlyphData(&v176, (uint64_t)v156, (unsigned __int16)v113, v148, (uint64_t)v89, 0, v117 - v118);
            }
            EWriteCSByte(&v176, 14);
            memset(v193, 170, sizeof(v193));
            int v136 = snprintf_l(v193, 0x10uLL, 0, "%d", v178 + 4);
            EWriteBytesAny((uint64_t)v181, v136, v193);
            *(_DWORD *)v193 = -1431655766;
            long long v137 = (char *)ZGetString(33, (int *)v193);
            EWriteBytesAny((uint64_t)v181, *(int *)v193, v137);
            EWriteCSString((uint64_t)v181, (uint64_t)&v176);
            *(_DWORD *)v193 = -1431655766;
            int v138 = (char *)ZGetString(35, (int *)v193);
            EWriteBytesAny((uint64_t)v181, *(int *)v193, v138);
            LODWORD(v178) = 0;
            long long v96 = v177;
            unint64_t v176 = v177;
          }
          v115 >>= 1;
          ++v113;
        }
        while (v113 != v114);
      }
      ++v71;
      unsigned int v113 = v114;
    }
    while (v114 < v70);
  }
  *(_DWORD *)v193 = -1431655766;
  int v139 = (char *)ZGetString(39, (int *)v193);
  EWriteBytesAny((uint64_t)v181, *(int *)v193, v139);
  ScalerDisposeBlock(*v180, v96, -1);
  if (v89) {
    ScalerDisposeBlock(v144, v89, -1);
  }
  ScalerDisposeBlock(v144, (char *)v152, -1);
LABEL_80:
  EDumpBuffer((uint64_t)v181);
  ScalerDisposeBlock(**((memoryContext ***)&v182 + 1), (char *)v181[1], -1);
  UninitGlyphInfo((memoryContext **)a1, (uint64_t)&v157);
  int v140 = 8;
  do
  {
    v156[0] = -1431655766;
    long long v141 = (char *)ZGetString(27, v156);
    StreamBytesThroughBuffer(a2, v156[0], v141);
    --v140;
  }
  while ((_WORD)v140);
  v156[0] = -1431655766;
  unint64_t v142 = (char *)ZGetString(28, v156);
  StreamBytesThroughBuffer(a2, v156[0], v142);
  if (v154) {
    ScalerReleaseFontTable(v145, v154);
  }
  ScalerReleaseFontTable(v145, v153);
}

void WriteCSGlyphData(void *a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, int a6, int a7)
{
  uint64_t v107 = (unsigned int *)(a2 + 8);
  GetGlyphForStreaming(a3, (unsigned int *)(a2 + 8), 1, 0);
  if (*(unsigned __int16 *)(a2 + 16) < 0xBu) {
    return;
  }
  if (*(__int16 *)(a2 + 32) < 1)
  {
    uint64_t v20 = *(void *)(a2 + 72);
    if (!v20) {
      return;
    }
    uint64_t v21 = (unsigned __int16 *)(v20 + 10);
    int v104 = a7;
    int v98 = *(unsigned __int8 *)(a2 + 267);
    if (*(unsigned char *)(a2 + 267))
    {
      uint64_t v22 = *(unsigned __int16 *)(a2 + 264);
      uint64_t v23 = ScalerNewScratch(**(memoryContext ***)(a2 + 256), 6 * (int)v22, 0);
      uint64_t v24 = (size_t *)((char *)v23 + 6 * v22);
      uint64_t v25 = ScalerNewScratch(**(memoryContext ***)(a2 + 256), 8 * (int)v22, 0);
      int v26 = 0;
      uint64_t v27 = &v25[v22];
      unsigned int v100 = (char *)v25;
      uint64_t v28 = v25 + 1;
      long long v29 = (char *)v23;
      do
      {
        if (v28 > v27) {
          goto LABEL_117;
        }
        unsigned int v30 = bswap32(*v21) >> 16;
        *((_WORD *)v28 - 4) = __rev16(v30 | 1);
        *((_WORD *)v28 - 3) = v21[1];
        if (v30)
        {
          unsigned int v32 = v21[2];
          unsigned int v31 = bswap32(v32) >> 16;
          *((_WORD *)v28 - 2) = v32;
          LOWORD(v32) = v21[3];
          v21 += 4;
        }
        else
        {
          unsigned int v31 = *((char *)v21 + 4);
          *((_WORD *)v28 - 2) = bswap32(v31) >> 16;
          unsigned int v32 = bswap32(*((char *)v21 + 5)) >> 16;
          v21 += 3;
        }
        *((_WORD *)v28 - 1) = v32;
        if ((v30 & 2) == 0)
        {
          if (v23 >= v24) {
            goto LABEL_117;
          }
          *(_WORD *)uint64_t v23 = bswap32(v31) >> 16;
          uint64_t v23 = (size_t *)((char *)v23 + 6);
          ++v26;
        }
        ++v28;
      }
      while ((v30 & 0x20) != 0);
      GetGlyphForStreaming(a3, v107, 1, 1);
      if (v26 >= 1)
      {
        int v33 = v26;
        uint64_t v34 = v29;
        while (1)
        {
          int v35 = (int)bswap32(*(unsigned __int16 *)v34) >> 16;
          if (v35 < 0 || *(_DWORD *)(a2 + 200) <= (int)(unsigned __int16)v35) {
            break;
          }
          uint64_t v36 = *(void *)(a2 + 168);
          *((_WORD *)v34 + 1) = bswap32(*(unsigned __int16 *)(*(void *)(a2 + 160) + 2 * (unsigned __int16)v35)) >> 16;
          *((_WORD *)v34 + 2) = bswap32(*(unsigned __int16 *)(v36 + 2 * (unsigned __int16)v35)) >> 16;
          v34 += 6;
          if (!--v33) {
            goto LABEL_21;
          }
        }
LABEL_117:
        exception = __cxa_allocate_exception(2uLL);
        _WORD *exception = 5;
        __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
      }
LABEL_21:
      uint64_t v21 = (unsigned __int16 *)v100;
    }
    else
    {
      int v26 = 0;
      long long v29 = 0;
      unsigned int v100 = 0;
    }
    long long v97 = v29;
    unsigned int v103 = v29 + 4;
    while (1)
    {
      int v75 = v21;
      unsigned int v76 = bswap32(*v21) >> 16;
      if (v76)
      {
        unsigned int v77 = bswap32(v21[2]) >> 16;
        v21 += 4;
        unsigned int v78 = bswap32(v75[3]) >> 16;
      }
      else
      {
        LOWORD(v77) = *((char *)v21 + 4);
        LOWORD(v78) = *((char *)v21 + 5);
        v21 += 3;
      }
      unsigned int v79 = bswap32(v75[1]) >> 16;
      if ((v76 & 2) == 0)
      {
        if (v26 < 1)
        {
LABEL_98:
          LOWORD(v82) = 0;
        }
        else
        {
          long long v80 = v103;
          int v81 = v26;
          while (bswap32(*((unsigned __int16 *)v80 - 2)) >> 16 != (unsigned __int16)v77)
          {
            v80 += 6;
            if (!--v81) {
              goto LABEL_98;
            }
          }
          unsigned int v82 = bswap32(*((unsigned __int16 *)v80 - 1)) >> 16;
        }
        GetGlyphForStreaming((__int16)v79, v107, 1, 1);
        if ((v78 & 0x8000) != 0 || *(_DWORD *)(a2 + 200) <= (__int16)v78) {
          goto LABEL_117;
        }
        LOWORD(v77) = v82 - *(_WORD *)(*(void *)(a2 + 160) + 2 * (unsigned __int16)v78);
        a7 = v104;
      }
      EWriteCSNumber(a1, 2, v13, v14, v15, v16, v17, v18, (a7 + (__int16)v77));
      EWriteCSByte2(a1, 33);
      if (a4)
      {
        int v89 = 0;
        int v90 = a4 - 1;
        do
        {
          int v91 = (v90 + v89) >> 1;
          unsigned int v92 = *(unsigned __int16 *)(a5 + 2 * v91);
          if (v92 >= v79)
          {
            if (v92 <= v79) {
              goto LABEL_111;
            }
            int v90 = v91 - 1;
          }
          else
          {
            int v89 = v91 + 1;
          }
        }
        while (v89 <= v90);
      }
      LOWORD(v91) = -1;
LABEL_111:
      EWriteCSNumber(a1, 1, v83, v84, v85, v86, v87, v88, (unsigned __int16)v91 + 4);
      EWriteCSByte(a1, 10);
      if ((v76 & 0x20) == 0)
      {
        if (v98)
        {
          ScalerDisposeBlock(**(memoryContext ***)(a2 + 256), v97, -1);
          unsigned int v93 = **(memoryContext ***)(a2 + 256);
          ScalerDisposeBlock(v93, v100, -1);
        }
        return;
      }
    }
  }
  if (a6) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = *(unsigned __int16 *)(a2 + 36);
  }
  uint64_t v38 = *(unsigned __int16 **)(a2 + 112);
  uint64_t v37 = *(unsigned __int16 **)(a2 + 120);
  if (*(unsigned __int16 *)(a2 + 32) > v37 - v38) {
    return;
  }
  if (!*(_WORD *)(a2 + 34)) {
    return;
  }
  uint64_t v99 = *(void *)(a2 + 168);
  unsigned __int16 v101 = *(char **)(a2 + 160);
  uint64_t v102 = (v99 - (uint64_t)v101) >> 1;
  if (v102 < *(unsigned __int16 *)(a2 + 34)) {
    return;
  }
  int v39 = 0;
  unsigned __int16 v40 = 0;
  long long v96 = *(char **)(a2 + 128);
  do
  {
    unsigned int v42 = *v37++;
    uint64_t v41 = v42;
    if (v102 <= v42) {
      return;
    }
    int v106 = v39;
    unint64_t v43 = *(void *)(a2 + 208);
    uint64_t v44 = (__int16 *)&v101[2 * v41];
    uint64_t v45 = (unsigned __int16 *)(v99 + 2 * v41);
    uint64_t v46 = &v96[v41];
    if ((unint64_t)v44 >= v43 || (unint64_t)v45 >= v43 || (unint64_t)v46 >= v43) {
      goto LABEL_117;
    }
    int v50 = *v38++;
    int v49 = v50;
    if (!v41)
    {
      uint64_t v54 = v19;
      goto LABEL_48;
    }
    int v105 = v37;
    int v51 = v41 - v49;
    if ((unsigned __int16)(v41 - v49) > 0x7FFEu) {
      goto LABEL_47;
    }
    if (*v46)
    {
      unsigned int v55 = (unsigned __int16)*v44--;
      uint64_t v54 = v55;
      LOWORD(v55) = *v45--;
      unsigned __int16 v110 = v55;
      --v46;
    }
    else
    {
      uint64_t v52 = 1 - (unsigned __int16)++v51;
      unsigned int v53 = (__int16)v45[v52];
      if (v46[v52])
      {
        uint64_t v54 = (unsigned __int16)v44[v52];
      }
      else
      {
        uint64_t v54 = (*v44 + v44[v52]) >> 1;
        unsigned int v53 = ((__int16)*v45 + v53) >> 1;
      }
      unsigned __int16 v110 = v53;
    }
    if ((unsigned __int16)v51 < 2u)
    {
LABEL_47:
      uint64_t v54 = v19;
      uint64_t v37 = v105;
      goto LABEL_48;
    }
    unsigned int v95 = v38;
    if (v110 == v40)
    {
      EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v54 - (__int16)v19));
      char v56 = 22;
    }
    else if ((unsigned __int16)v54 == (unsigned __int16)v19)
    {
      EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v110 - (__int16)v40));
      char v56 = 4;
    }
    else
    {
      EWriteCSNumber(a1, 2, v13, v14, v15, v16, v17, v18, ((__int16)v54 - (__int16)v19));
      char v56 = 21;
    }
    EWriteCSByte(a1, v56);
    unsigned __int16 v57 = v54;
    unsigned __int16 v58 = v110;
    unsigned int v108 = v54;
    while (1)
    {
      int v59 = v51 - 1;
      if ((*v46 & 1) == 0) {
        break;
      }
      int v62 = *v45;
      int v63 = *v44;
      if (v62 == v58)
      {
        EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, (v63 - (__int16)v57));
        char v64 = 6;
      }
      else if (v57 == (unsigned __int16)v63)
      {
        EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v62 - (__int16)v58));
        char v64 = 7;
      }
      else
      {
        EWriteCSNumber(a1, 2, v13, v14, v15, v16, v17, v18, (v63 - (__int16)v57));
        char v64 = 5;
      }
      EWriteCSByte(a1, v64);
      uint64_t v60 = (unsigned __int16)*v44;
      LOWORD(v61) = *v45;
LABEL_82:
      --v44;
      --v45;
      --v46;
      int v51 = v59;
      unsigned __int16 v57 = v60;
      unsigned __int16 v58 = v61;
      if ((__int16)v59 <= 0) {
        goto LABEL_85;
      }
    }
    uint64_t v60 = v54;
    LOWORD(v61) = v110;
    if ((_WORD)v51 != 1)
    {
      if (*(v46 - 1))
      {
        uint64_t v60 = (unsigned __int16)*(v44 - 1);
        LOWORD(v61) = *(v45 - 1);
      }
      else
      {
        uint64_t v60 = (*(v44 - 1) + *v44) >> 1;
        unsigned int v61 = ((__int16)*(v45 - 1) + (__int16)*v45) >> 1;
      }
    }
    int v65 = (unsigned __int16)*v44;
    int v66 = (__int16)*v45;
    if (v65 == v57 && v65 == (unsigned __int16)v60)
    {
      EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v61 - (__int16)v58));
      char v67 = 7;
    }
    else if (*v45 == v58 && (unsigned __int16)v61 == (unsigned __int16)v66)
    {
      EWriteCSNumber(a1, 1, v13, v14, v15, v16, v17, v18, ((__int16)v60 - (__int16)v57));
      char v67 = 6;
    }
    else
    {
      int v68 = (__int16)v65;
      int v69 = (__int16)v65 - (__int16)v57;
      uint64_t v70 = (2 * v69);
      uint64_t v71 = (((2 * v69) | 1) / 3);
      int v72 = v66 - (__int16)v58;
      int v73 = (__int16)v60 - v68;
      if ((v70 + 3) > 4 || (2 * ((__int16)v61 - v66) + 3) > 4)
      {
        if ((2 * v72 + 3) > 4 || (2 * v73 + 3) > 4)
        {
          EWriteCSNumber(a1, 6, v70, 1431655766, v15, v16, v17, v18, v71);
          char v67 = 8;
        }
        else
        {
          EWriteCSNumber(a1, 4, v70, 1431655766, v15, v16, v17, v18, v71);
          char v67 = 31;
        }
      }
      else
      {
        EWriteCSNumber(a1, 4, v70, 1431655766, v15, v16, v17, v18, (((2 * v72) | 1) / 3));
        char v67 = 30;
      }
    }
    EWriteCSByte(a1, v67);
    if ((_WORD)v51 != 1)
    {
      char v74 = *(v46 - 1);
      if (v74)
      {
        --v46;
        int v59 = v51 - 2;
        --v45;
        --v44;
      }
      uint64_t v54 = v108;
      goto LABEL_82;
    }
    uint64_t v54 = v108;
LABEL_85:
    uint64_t v38 = v95;
    uint64_t v37 = v105;
    unsigned __int16 v40 = v110;
    if ((unsigned __int16)v60 != (unsigned __int16)v54 || (unsigned __int16)v61 != v110)
    {
      EWriteCSByte(a1, 9);
      unsigned __int16 v40 = v61;
      uint64_t v54 = v60;
    }
LABEL_48:
    int v39 = v106 + 0x10000;
    uint64_t v19 = v54;
  }
  while (*(__int16 *)(a2 + 32) > (v106 + 0x10000) >> 16);
}

void TGlyphOutlineCache::CreateGlyphOutlineCache(TGlyphOutlineCache *this)
{
  if (this >= 0x101)
  {
    if (this >= 0x10000) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_1B53509C8(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10F1C40CC82DE90);
  _Unwind_Resume(a1);
}

void TKeyLookUpCache<256u>::~TKeyLookUpCache(void *a1)
{
  TKeyLookUpCache<256u>::~TKeyLookUpCache(a1);
  JUMPOUT(0x1BA9994D0);
}

void TKeyLookUpCache<256u>::Purge(os_unfair_lock_s *a1)
{
  uint64_t v2 = a1 + 2;
  os_unfair_lock_lock(a1 + 2);
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 4;
  do
  {
    int v5 = *(const void **)&v4[v3]._os_unfair_lock_opaque;
    if (v5)
    {
      CFRelease(v5);
      *(void *)&v4[v3]._os_unfair_lock_opaque = 0;
    }
    v3 += 2;
  }
  while (v3 != 512);
  os_unfair_lock_unlock(v2);
}

void sub_1B5350AA8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

CFTypeRef TKeyLookUpCache<256u>::Copy(os_unfair_lock_s *a1, int a2)
{
  uint64_t v4 = a1 + 2;
  os_unfair_lock_lock(a1 + 2);
  int v5 = *(const void **)&a1[2 * a2 + 4]._os_unfair_lock_opaque;
  if (v5) {
    CFTypeRef v6 = CFRetain(v5);
  }
  else {
    CFTypeRef v6 = 0;
  }
  os_unfair_lock_unlock(v4);
  return v6;
}

void sub_1B5350B1C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void TKeyLookUpCache<256u>::AddPair(os_unfair_lock_s *a1, int a2, const void *a3)
{
  CFTypeRef v6 = a1 + 2;
  os_unfair_lock_lock(a1 + 2);
  unsigned int v7 = &a1[2 * a2];
  uint64_t v10 = *(const void **)&v7[4]._os_unfair_lock_opaque;
  uint64_t v9 = v7 + 4;
  uint64_t v8 = v10;
  if (v10 != a3)
  {
    CFTypeRef v11 = a3 ? CFRetain(a3) : 0;
    *(void *)&v9->_os_unfair_lock_opaque = v11;
    if (v8) {
      CFRelease(v8);
    }
  }
  os_unfair_lock_unlock(v6);
}

void sub_1B5350BB4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void *TKeyLookUpCache<256u>::~TKeyLookUpCache(void *a1)
{
  *a1 = &unk_1F0E00DF8;
  for (uint64_t i = 2; i != 258; ++i)
  {
    uint64_t v3 = (const void *)a1[i];
    if (v3)
    {
      CFRelease(v3);
      a1[i] = 0;
    }
  }
  return a1;
}

void *TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::~TGlyphOutlineDictionaryCache(void *a1)
{
  *a1 = &unk_1F0E00E48;
  uint64_t v2 = (const void **)(a1 + 2);
  std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)(a1 + 3));
  TCFDictionary::~TCFDictionary(v2);
  return a1;
}

void TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::~TGlyphOutlineDictionaryCache(void *a1)
{
  *a1 = &unk_1F0E00E48;
  uint64_t v1 = (const void **)(a1 + 2);
  std::vector<char,TInlineBufferAllocator<char,256ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)(a1 + 3));
  TCFDictionary::~TCFDictionary(v1);
  JUMPOUT(0x1BA9994D0);
}

void TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::Purge(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  uint64_t v3 = *(__CFDictionary **)(a1 + 16);
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  CFDictionaryRemoveAllValues(v3);
  os_unfair_lock_unlock(v2);
}

void sub_1B5350D40(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

const void *TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::Copy(uint64_t a1, unsigned __int32 a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 16);
  if (v5)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v5, (const void *)a2);
    if (Value)
    {
      unsigned int v7 = *(__int32 **)(a1 + 32);
      uint64_t v8 = wmemchr(*(__int32 **)(a1 + 24), a2, ((uint64_t)v7 - *(void *)(a1 + 24)) >> 2);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = v7;
      }
      uint64_t v10 = v9 + 1;
      if (v9 + 1 != v7)
      {
        __int32 v11 = *v9;
        int64_t v12 = (char *)v7 - v10;
        memmove(v9, v10, (char *)v7 - v10);
        *(__int32 *)((char *)v9 + v12) = v11;
      }
      CFDictionaryRef Value = CFRetain(Value);
    }
  }
  else
  {
    CFDictionaryRef Value = 0;
  }
  os_unfair_lock_unlock(v4);
  return Value;
}

void sub_1B5350E0C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void TGlyphOutlineDictionaryCache<unsigned int,64ul,512ul>::AddPair(uint64_t a1, unsigned int a2, const void *a3)
{
  CFTypeRef v6 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  unint64_t v7 = a2;
  CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 16);
  if (v8 && CFDictionaryContainsKey(v8, (const void *)a2))
  {
LABEL_38:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)v7, a3);
    os_unfair_lock_unlock(v6);
    return;
  }
  uint64_t v10 = *(unsigned int **)(a1 + 24);
  uint64_t v9 = *(unsigned int **)(a1 + 32);
  uint64_t v11 = v9 - v10;
  unint64_t v12 = v11 + 1;
  unint64_t v13 = (uint64_t)(*(void *)(a1 + 40) - (void)v10) >> 2;
  unint64_t v14 = 64;
  if (v13 > 0x40) {
    unint64_t v14 = (uint64_t)(*(void *)(a1 + 40) - (void)v10) >> 2;
  }
  if (v12 < v14)
  {
LABEL_20:
    unint64_t v26 = *(void *)(a1 + 40);
    if ((unint64_t)v9 >= v26)
    {
      uint64_t v28 = *(unsigned int **)(a1 + 24);
      uint64_t v29 = v9 - v28;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v31 = v26 - (void)v28;
      if (v31 >> 1 > v30) {
        unint64_t v30 = v31 >> 1;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      uint64_t v43 = a1 + 48;
      if (v32)
      {
        int v33 = TInlineBufferAllocator<unsigned int,64ul>::allocate(a1 + 48, v32);
        uint64_t v28 = *(unsigned int **)(a1 + 24);
        uint64_t v9 = *(unsigned int **)(a1 + 32);
      }
      else
      {
        int v33 = 0;
      }
      uint64_t v34 = &v33[4 * v29];
      *(_DWORD *)uint64_t v34 = a2;
      if (v9 == v28)
      {
        uint64_t v36 = &v33[4 * v29];
      }
      else
      {
        int v35 = v9;
        uint64_t v36 = &v33[4 * v29];
        do
        {
          int v37 = *--v35;
          *((_DWORD *)v36 - 1) = v37;
          v36 -= 4;
        }
        while (v35 != v28);
      }
      uint64_t v27 = v34 + 4;
      *(void *)(a1 + 24) = v36;
      *(void *)(a1 + 32) = v34 + 4;
      uint64_t v38 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = &v33[4 * v32];
      uint64_t v41 = v9;
      uint64_t v42 = v38;
      int v39 = v28;
      unsigned __int16 v40 = v28;
      std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,64ul> &>::~__split_buffer((uint64_t)&v39);
    }
    else
    {
      unsigned int *v9 = a2;
      uint64_t v27 = v9 + 1;
    }
    *(void *)(a1 + 32) = v27;
    goto LABEL_38;
  }
  if (v12 <= 0x200)
  {
    if ((unint64_t)(v11 + 65) >= 0x200) {
      unint64_t v15 = 512;
    }
    else {
      unint64_t v15 = v11 + 65;
    }
    if (v13 < v15)
    {
      uint64_t v43 = a1 + 48;
      uint64_t v16 = TInlineBufferAllocator<unsigned int,64ul>::allocate(a1 + 48, v15);
      uint64_t v18 = *(unsigned int **)(a1 + 24);
      uint64_t v17 = *(unsigned int **)(a1 + 32);
      uint64_t v19 = &v16[4 * v11];
      if (v17 != v18)
      {
        uint64_t v20 = *(unsigned int **)(a1 + 32);
        uint64_t v19 = &v16[4 * v11];
        do
        {
          int v21 = *--v20;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        while (v20 != v18);
      }
      *(void *)(a1 + 24) = v19;
      *(void *)(a1 + 32) = &v16[4 * v11];
      uint64_t v22 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = &v16[4 * v15];
      uint64_t v41 = v17;
      uint64_t v42 = v22;
      int v39 = v18;
      unsigned __int16 v40 = v18;
      std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,64ul> &>::~__split_buffer((uint64_t)&v39);
      uint64_t v9 = *(unsigned int **)(a1 + 32);
    }
    goto LABEL_20;
  }
  if (v10 != v9)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)*v10);
    uint64_t v24 = *(void *)(a1 + 24);
    uint64_t v23 = *(void *)(a1 + 32);
    if (v23 != v24)
    {
      uint64_t v25 = v23 - (v24 + 4);
      if (v23 != v24 + 4) {
        memmove(*(void **)(a1 + 24), (const void *)(v24 + 4), v23 - (v24 + 4));
      }
      uint64_t v9 = (unsigned int *)(v24 + v25);
      *(void *)(a1 + 32) = v24 + v25;
      goto LABEL_20;
    }
  }
  __break(1u);
}

void sub_1B535106C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN28TGlyphOutlineDictionaryCacheIjLm64ELm512EE22kHashIndexKeyCallBacksMUlPKvE_8__invokeES2_(uint64_t a1)
{
  return 2654435761 * a1;
}

char *TInlineBufferAllocator<unsigned int,64ul>::allocate(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (char *)(a1 + 256);
  uint64_t result = *(char **)(a1 + 256);
  uint64_t v4 = &result[4 * a2];
  if (v4 <= v2)
  {
    *(void *)uint64_t v2 = v4;
  }
  else
  {
    if (a2 >> 62) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    return (char *)operator new(4 * a2);
  }
  return result;
}

uint64_t std::__split_buffer<unsigned int,TInlineBufferAllocator<unsigned int,64ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 3) & 0xFFFFFFFFFFFFFFFCLL);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    unint64_t v5 = *(void *)(a1 + 32);
    CFTypeRef v6 = (void *)(v5 + 256);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(void *)(a1 + 24) == *v6) {
        *CFTypeRef v6 = v4;
      }
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

void *TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::~TGlyphOutlineDictionaryCache(void *a1)
{
  *a1 = &unk_1F0E00EC8;
  uint64_t v2 = (const void **)(a1 + 2);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,64ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)(a1 + 3));
  TCFDictionary::~TCFDictionary(v2);
  return a1;
}

void TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::~TGlyphOutlineDictionaryCache(void *a1)
{
  *a1 = &unk_1F0E00EC8;
  uint64_t v1 = (const void **)(a1 + 2);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,64ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)(a1 + 3));
  TCFDictionary::~TCFDictionary(v1);
  JUMPOUT(0x1BA9994D0);
}

void TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::Purge(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  uint64_t v3 = *(__CFDictionary **)(a1 + 16);
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  CFDictionaryRemoveAllValues(v3);
  os_unfair_lock_unlock(v2);
}

void sub_1B5351278(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

const void *TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::Copy(uint64_t a1, unsigned int a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  CFDictionaryRef v5 = *(const __CFDictionary **)(a1 + 16);
  if (v5)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(v5, (const void *)a2);
    if (Value)
    {
      unint64_t v7 = *(unsigned __int16 **)(a1 + 32);
      CFDictionaryRef v8 = v7;
      if (!HIWORD(a2))
      {
        CFDictionaryRef v8 = *(unsigned __int16 **)(a1 + 24);
        if (v8 == v7)
        {
LABEL_8:
          CFDictionaryRef v8 = *(unsigned __int16 **)(a1 + 32);
        }
        else
        {
          uint64_t v9 = *(unsigned __int16 **)(a1 + 24);
          while (*v9 != (unsigned __int16)a2)
          {
            ++v9;
            ++v8;
            if (v9 == v7) {
              goto LABEL_8;
            }
          }
        }
      }
      uint64_t v10 = v8 + 1;
      if (v8 + 1 != v7)
      {
        unsigned __int16 v11 = *v8;
        int64_t v12 = (char *)v7 - v10;
        memmove(v8, v10, (char *)v7 - v10);
        *(unsigned __int16 *)((char *)v8 + v12) = v11;
      }
      CFDictionaryRef Value = CFRetain(Value);
    }
  }
  else
  {
    CFDictionaryRef Value = 0;
  }
  os_unfair_lock_unlock(v4);
  return Value;
}

void sub_1B535136C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void TGlyphOutlineDictionaryCache<unsigned short,64ul,512ul>::AddPair(uint64_t a1, unsigned int a2, const void *a3)
{
  CFTypeRef v6 = (os_unfair_lock_s *)(a1 + 8);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
  unint64_t v7 = a2;
  CFDictionaryRef v8 = *(const __CFDictionary **)(a1 + 16);
  if (v8 && CFDictionaryContainsKey(v8, (const void *)a2))
  {
LABEL_39:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)v7, a3);
    os_unfair_lock_unlock(v6);
    return;
  }
  uint64_t v10 = *(char **)(a1 + 24);
  uint64_t v9 = *(char **)(a1 + 32);
  uint64_t v11 = (v9 - v10) >> 1;
  unint64_t v12 = v11 + 1;
  unint64_t v13 = (uint64_t)(*(void *)(a1 + 40) - (void)v10) >> 1;
  unint64_t v14 = 64;
  if (v13 > 0x40) {
    unint64_t v14 = (uint64_t)(*(void *)(a1 + 40) - (void)v10) >> 1;
  }
  if (v12 < v14)
  {
LABEL_20:
    unint64_t v26 = *(void *)(a1 + 40);
    if ((unint64_t)v9 >= v26)
    {
      uint64_t v28 = *(char **)(a1 + 24);
      uint64_t v29 = v9 - v28;
      if (v9 - v28 <= -3) {
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      }
      uint64_t v30 = v29 >> 1;
      unint64_t v31 = v26 - (void)v28;
      if (v31 <= (v29 >> 1) + 1) {
        unint64_t v32 = v30 + 1;
      }
      else {
        unint64_t v32 = v31;
      }
      if (v31 >= 0x7FFFFFFFFFFFFFFELL) {
        uint64_t v33 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        uint64_t v33 = v32;
      }
      uint64_t v44 = a1 + 48;
      if (v33)
      {
        uint64_t v34 = (char *)TInlineBufferAllocator<unsigned short,64ul>::allocate(a1 + 48, v33);
        uint64_t v28 = *(char **)(a1 + 24);
        uint64_t v9 = *(char **)(a1 + 32);
      }
      else
      {
        uint64_t v34 = 0;
      }
      int v35 = &v34[2 * v30];
      *(_WORD *)int v35 = a2;
      if (v9 == v28)
      {
        int v37 = &v34[2 * v30];
      }
      else
      {
        uint64_t v36 = v9;
        int v37 = &v34[2 * v30];
        do
        {
          __int16 v38 = *((_WORD *)v36 - 1);
          v36 -= 2;
          *((_WORD *)v37 - 1) = v38;
          v37 -= 2;
        }
        while (v36 != v28);
      }
      uint64_t v27 = v35 + 2;
      *(void *)(a1 + 24) = v37;
      *(void *)(a1 + 32) = v35 + 2;
      uint64_t v39 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = &v34[2 * v33];
      uint64_t v42 = v9;
      uint64_t v43 = v39;
      unsigned __int16 v40 = v28;
      uint64_t v41 = v28;
      std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,64ul> &>::~__split_buffer((uint64_t)&v40);
    }
    else
    {
      *(_WORD *)uint64_t v9 = a2;
      uint64_t v27 = v9 + 2;
    }
    *(void *)(a1 + 32) = v27;
    goto LABEL_39;
  }
  if (v12 <= 0x200)
  {
    if ((unint64_t)(v11 + 65) >= 0x200) {
      unint64_t v15 = 512;
    }
    else {
      unint64_t v15 = v11 + 65;
    }
    if (v13 < v15)
    {
      uint64_t v44 = a1 + 48;
      uint64_t v16 = (char *)TInlineBufferAllocator<unsigned short,64ul>::allocate(a1 + 48, v15);
      uint64_t v18 = *(char **)(a1 + 24);
      uint64_t v17 = *(char **)(a1 + 32);
      uint64_t v19 = &v16[2 * v11];
      if (v17 != v18)
      {
        uint64_t v20 = *(char **)(a1 + 32);
        uint64_t v19 = &v16[2 * v11];
        do
        {
          __int16 v21 = *((_WORD *)v20 - 1);
          v20 -= 2;
          *((_WORD *)v19 - 1) = v21;
          v19 -= 2;
        }
        while (v20 != v18);
      }
      *(void *)(a1 + 24) = v19;
      *(void *)(a1 + 32) = &v16[2 * v11];
      uint64_t v22 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = &v16[2 * v15];
      uint64_t v42 = v17;
      uint64_t v43 = v22;
      unsigned __int16 v40 = v18;
      uint64_t v41 = v18;
      std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,64ul> &>::~__split_buffer((uint64_t)&v40);
      uint64_t v9 = *(char **)(a1 + 32);
    }
    goto LABEL_20;
  }
  if (v10 != v9)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), (const void *)*(unsigned __int16 *)v10);
    uint64_t v24 = *(void *)(a1 + 24);
    uint64_t v23 = *(void *)(a1 + 32);
    if (v23 != v24)
    {
      uint64_t v25 = v23 - (v24 + 2);
      if (v23 != v24 + 2) {
        memmove(*(void **)(a1 + 24), (const void *)(v24 + 2), v23 - (v24 + 2));
      }
      uint64_t v9 = (char *)(v24 + v25);
      *(void *)(a1 + 32) = v24 + v25;
      goto LABEL_20;
    }
  }
  __break(1u);
}

void sub_1B53515C8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZN28TGlyphOutlineDictionaryCacheItLm64ELm512EE22kHashIndexKeyCallBacksMUlPKvE_8__invokeES2_(uint64_t a1)
{
  return 2654435761 * a1;
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,64ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    uint64_t v3 = (void *)(a1 + 152);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 152)) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

void *TInlineBufferAllocator<unsigned short,64ul>::allocate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 128);
  uint64_t v2 = (unint64_t *)(a1 + 128);
  uint64_t v3 = v4;
  unint64_t v5 = v4 + 2 * a2;
  if (v5 <= (unint64_t)v2)
  {
    *uint64_t v2 = v5;
    return (void *)v3;
  }
  else
  {
    if (a2 < 0) {
      std::__throw_bad_array_new_length[abi:fe180100]();
    }
    return operator new(2 * a2);
  }
}

uint64_t std::__split_buffer<unsigned short,TInlineBufferAllocator<unsigned short,64ul> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 1) & 0xFFFFFFFFFFFFFFFELL);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    unint64_t v5 = *(void *)(a1 + 32);
    CFTypeRef v6 = (void *)(v5 + 128);
    if (v5 <= (unint64_t)v4 && v6 > v4)
    {
      if (*(void *)(a1 + 24) == *v6) {
        *CFTypeRef v6 = v4;
      }
    }
    else
    {
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t woff2::ComputeULongSum(woff2 *this, unint64_t a2)
{
  uint64_t result = 0;
  unint64_t v4 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0)
  {
    unint64_t v5 = 0;
    do
    {
      uint64_t result = bswap32(*(_DWORD *)((char *)this + v5)) + result;
      v5 += 4;
    }
    while (v5 < v4);
  }
  CFTypeRef v6 = (const unsigned __int8 *)(a2 - v4);
  if (a2 != v4)
  {
    int v7 = 0;
    if (a2 > v4)
    {
      unsigned int v8 = (8 * a2) & 0xFFFFFFE0;
      uint64_t v9 = (unsigned __int8 *)this + v4;
      do
      {
        int v10 = *v9++;
        v7 |= v10 << (~(_BYTE)v8 & 0x18);
        v8 += 8;
        --v6;
      }
      while (v6);
    }
    return (v7 + result);
  }
  return result;
}

uint64_t sc_ScanChar2(int *a1, int *a2, uint64_t a3, unsigned int a4, int a5, int a6)
{
  int v6 = a5;
  unsigned int v7 = a4;
  uint64_t v8 = a3;
  uint64_t v9 = a1;
  uint64_t v11 = *((void *)a1 + 1);
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v12 = *((void *)a1 + 5);
  memset(v251, 170, 20);
  if (a6)
  {
    uint64_t v13 = *(void *)(a3 + 24);
    int v14 = *(__int16 *)(a3 + 44);
    int v15 = *(__int16 *)(a3 + 40);
    int v16 = v14 - v15 - 1;
    if (v14 == v15) {
      int v16 = 0;
    }
    if ((v16 & 0x80000000) == 0)
    {
      uint64_t v17 = *(_WORD **)(a3 + 8);
      int v18 = ~v14 + v15 + (v14 != v15);
      uint64_t v19 = (unsigned __int16)(*(_WORD *)(a3 + 48) + 1);
      uint64_t v20 = *(void **)(a3 + 24);
      do
      {
        *v20++ = v17;
        *uint64_t v17 = 0;
        v17[v19] = 0;
        uint64_t v17 = (_WORD *)((char *)v17 + v19 * 2 + 2);
        BOOL v160 = __CFADD__(v18++, 1);
      }
      while (!v160);
    }
    *(void *)(a3 + 24) = v13 - 8 * v15;
    uint64_t v21 = *(void *)(a3 + 32);
    int v22 = *(__int16 *)(a3 + 46);
    int v23 = *(__int16 *)(a3 + 42);
    int v24 = v22 - v23 - 1;
    if (v22 == v23) {
      int v24 = 0;
    }
    if ((v24 & 0x80000000) == 0)
    {
      uint64_t v25 = *(_WORD **)(a3 + 16);
      int v26 = ~v22 + v23 + (v22 != v23);
      uint64_t v27 = (unsigned __int16)(*(_WORD *)(a3 + 50) + 1);
      uint64_t v28 = *(void **)(a3 + 32);
      do
      {
        *v28++ = v25;
        *uint64_t v25 = 0;
        v25[v27] = 0;
        uint64_t v25 = (_WORD *)((char *)v25 + v27 * 2 + 2);
        BOOL v160 = __CFADD__(v26++, 1);
      }
      while (!v160);
    }
    uint64_t v29 = v21 - 8 * v23;
  }
  else
  {
    uint64_t v30 = *(void *)(a3 + 32);
    int v31 = a5 - a4 - 1;
    if (a5 == a4) {
      int v31 = 0;
    }
    if ((v31 & 0x80000000) == 0)
    {
      unint64_t v32 = *(_WORD **)(a3 + 16);
      int v33 = ~a5 + a4 + (a5 != a4);
      uint64_t v34 = (unsigned __int16)(*(_WORD *)(a3 + 50) + 1);
      int v35 = *(void **)(a3 + 32);
      do
      {
        *v35++ = v32;
        *unint64_t v32 = 0;
        v32[v34] = 0;
        unint64_t v32 = (_WORD *)((char *)v32 + v34 * 2 + 2);
        BOOL v160 = __CFADD__(v33++, 1);
      }
      while (!v160);
    }
    uint64_t v29 = v30 - ((uint64_t)((unint64_t)a4 << 48) >> 45);
  }
  *(void *)(a3 + 32) = v29;
  if (*a1)
  {
    v208 = (__int16 **)(v29 + 8 * a5 - 8);
    v211 = (__int16 **)(v29 + 8 * (int)a4);
    if (*a1 >= 1)
    {
      uint64_t v36 = 0;
      int v37 = a2 + 262;
      v200 = (unsigned int *)(a2 + 263);
      *(void *)v202 = a2 + 1;
      __int16 v223 = a2 + 264;
      *(void *)uint64_t v227 = a2 + 2;
      v217 = (unsigned int *)(a2 + 266);
      v220 = (unsigned int *)(a2 + 4);
      long long v191 = (unsigned int *)(a2 + 262);
      uint64_t v214 = v10;
      uint64_t v230 = v12;
      while (1)
      {
        *(void *)&v251[1] = v37;
        *(void *)&v251[3] = a2;
        uint64_t v38 = *(unsigned __int16 *)(*((void *)v9 + 3) + 2 * v36);
        uint64_t v39 = *(unsigned __int16 *)(*((void *)v9 + 4) + 2 * v36);
        if (v38 != v39) {
          break;
        }
LABEL_72:
        if (++v36 >= *v9) {
          goto LABEL_73;
        }
      }
      v251[0] = 1;
      uint64_t v205 = v36;
      if (*(unsigned char *)(v12 + v38))
      {
        BOOL v40 = 0;
        int v41 = *(_DWORD *)(v11 + 4 * v38);
        *a2 = v41;
        int v44 = v38 + 1;
        int v43 = *(_DWORD *)(v214 + 4 * v38);
        int v49 = 1;
        int v50 = (int *)v200;
        int v51 = *(int **)v202;
        a2[262] = v43;
        int v45 = v39;
        uint64_t v46 = a2;
        uint64_t v47 = v214;
      }
      else
      {
        if ((*(unsigned char *)(v12 + v39) & 1) == 0)
        {
          BOOL v40 = 0;
          int v41 = (*(_DWORD *)(v11 + 4 * v38) + *(_DWORD *)(v11 + 4 * v39) + 1) >> 1;
          *a2 = v41;
          int v42 = *(_DWORD *)(v214 + 4 * v38);
          *(void *)&v251[3] = *(void *)v202;
          int v43 = (v42 + *(_DWORD *)(v214 + 4 * v39) + 1) >> 1;
          *(void *)&v251[1] = v200;
          a2[262] = v43;
          int v44 = v38;
          int v45 = v39;
          uint64_t v46 = a2;
          uint64_t v47 = v214;
          uint64_t v48 = v37;
          goto LABEL_46;
        }
        BOOL v40 = 0;
        int v41 = *(_DWORD *)(v11 + 4 * v39);
        int v45 = v39 - 1;
        *a2 = v41;
        int v43 = *(_DWORD *)(v214 + 4 * v39);
        int v49 = 1;
        int v50 = (int *)v200;
        int v51 = *(int **)v202;
        a2[262] = v43;
        int v44 = v38;
        uint64_t v38 = v39;
        uint64_t v46 = a2;
        uint64_t v47 = v214;
      }
      uint64_t v48 = v37;
LABEL_32:
      if (*(unsigned char *)(v12 + v44))
      {
        uint64_t v52 = v44;
        uint64_t v237 = v38;
        int v240 = v45;
        while (1)
        {
          if (v49 < 262)
          {
            ++v49;
          }
          else
          {
            unint64_t v53 = (unint64_t)(v50 - 1);
            if (a6) {
              sc_lineGen(a3, v46, v48, v53, *(void *)(a3 + 24), *(void *)(a3 + 32));
            }
            else {
              sc_lineGenRows(a3, v46, v48, v53, *(void *)(a3 + 32), (unint64_t)v211, (unint64_t)v208);
            }
            int v45 = v240;
            uint64_t v38 = v237;
            a2[2] = *(v51 - 2);
            a2[3] = *(v51 - 1);
            a2[264] = *(v50 - 2);
            int v49 = 5;
            a2[265] = *(v50 - 1);
            int v50 = (int *)v217;
            int v51 = (int *)v220;
            uint64_t v48 = v223;
            uint64_t v46 = *(int **)v227;
          }
          int v41 = *(_DWORD *)(v11 + 4 * v52);
          *v51++ = v41;
          int v43 = *(_DWORD *)(v47 + 4 * v52);
          *v50++ = v43;
          if (v40) {
            break;
          }
          BOOL v40 = v44 == v45;
          if (v44 == v45) {
            int v44 = v38;
          }
          else {
            ++v44;
          }
          uint64_t v52 = v44;
          if ((*(unsigned char *)(v12 + v44) & 1) == 0) {
            goto LABEL_45;
          }
        }
        v251[0] = v49;
        *(void *)&v251[1] = v50;
        *(void *)&v251[3] = v51;
        uint64_t v8 = a3;
LABEL_68:
        unsigned int v7 = a4;
        int v6 = a5;
        uint64_t v9 = a1;
        unint64_t v69 = (unint64_t)(v50 - 1);
        if (a6)
        {
          sc_lineGen(v8, v46, v48, v69, *(void *)(v8 + 24), *(void *)(v8 + 32));
          sc_mark(*a2, a2[262], a2[1], a2[263], *(_DWORD *)(*(void *)&v251[3] - 8), *(v50 - 2), *(void *)(v8 + 24), *(void *)(v8 + 32), *(_DWORD *)(v8 + 48), HIWORD(*(_DWORD *)(v8 + 48)));
        }
        else
        {
          sc_lineGenRows(v8, v46, v48, v69, *(void *)(v8 + 32), (unint64_t)v211, (unint64_t)v208);
          sc_markRows(*a2, a2[262], a2[1], a2[263], *(_DWORD *)(*(void *)&v251[3] - 8), *(v50 - 2), *(void *)(v8 + 32), *(_WORD *)(v8 + 50), (unint64_t)v211, (unint64_t)v208);
        }
        uint64_t v36 = v205;
        int v37 = (int *)v191;
        goto LABEL_72;
      }
LABEL_45:
      v251[0] = v49;
      *(void *)&v251[1] = v50;
      *(void *)&v251[3] = v51;
LABEL_46:
      int v54 = v44;
      int v55 = v41;
      int v56 = v43;
      uint64_t v238 = v38;
      int v241 = v45;
      while (1)
      {
        v244 = v48;
        BOOL v247 = v40;
        int v57 = v54 == v45 ? v38 : v54 + 1;
        unsigned __int16 v58 = v46;
        if (*(unsigned char *)(v12 + v57))
        {
          int v41 = *(_DWORD *)(v11 + 4 * v57);
          int v43 = *(_DWORD *)(v47 + 4 * v57);
          uint64_t v60 = v54;
          int v59 = *(_DWORD *)(v11 + 4 * v54);
          int v61 = *(_DWORD *)(v47 + 4 * v54);
        }
        else
        {
          int v59 = *(_DWORD *)(v11 + 4 * v54);
          uint64_t v60 = v54;
          int v41 = (v59 + *(_DWORD *)(v11 + 4 * v57) + 1) >> 1;
          int v61 = *(_DWORD *)(v47 + 4 * v54);
          int v43 = (v61 + *(_DWORD *)(v47 + 4 * v57) + 1) >> 1;
          int v57 = v54;
        }
        if (sc_DrawParabola(v55, v56, v59, v61, v41, v43, (int **)&v251[3], (int **)&v251[1], v251, 0xFFFFFFFF))
        {
          uint64_t v62 = v11;
          uint64_t v63 = *(void *)&v251[1];
          unint64_t v64 = *(void *)&v251[1] - 4;
          if (a6) {
            sc_lineGen(a3, v58, v244, v64, *(void *)(a3 + 24), *(void *)(a3 + 32));
          }
          else {
            sc_lineGenRows(a3, v58, v244, v64, *(void *)(a3 + 32), (unint64_t)v211, (unint64_t)v208);
          }
          uint64_t v66 = *(void *)&v251[3];
          a2[2] = *(_DWORD *)(*(void *)&v251[3] - 8);
          a2[3] = *(_DWORD *)(v66 - 4);
          a2[264] = *(_DWORD *)(v63 - 8);
          a2[265] = *(_DWORD *)(v63 - 4);
          *(void *)&v251[1] = v217;
          *(void *)&v251[3] = v220;
          v251[0] = 5;
          uint64_t v11 = v62;
          int v67 = *(_DWORD *)(v62 + 4 * v60);
          uint64_t v47 = v214;
          int v68 = sc_DrawParabola(v55, v56, v67, *(_DWORD *)(v214 + 4 * v60), v41, v43, (int **)&v251[3], (int **)&v251[1], v251, 0xFFFFFFFF);
          uint64_t v48 = v223;
          uint64_t v46 = *(int **)v227;
          BOOL v65 = v247;
          if (v68) {
            return 15;
          }
        }
        else
        {
          uint64_t v48 = v244;
          BOOL v65 = v247;
          uint64_t v46 = v58;
        }
        int v45 = v241;
        if (v54 == v241 || v65) {
          break;
        }
        BOOL v40 = v57 == v241;
        uint64_t v38 = v238;
        if (v57 == v241) {
          int v54 = v238;
        }
        else {
          int v54 = v57 + 1;
        }
        uint64_t v12 = v230;
        int v55 = v41;
        int v56 = v43;
        if (*(unsigned char *)(v230 + v54))
        {
          int v49 = v251[0];
          int v44 = v54;
          int v50 = *(int **)&v251[1];
          int v51 = *(int **)&v251[3];
          goto LABEL_32;
        }
      }
      int v50 = *(int **)&v251[1];
      uint64_t v12 = v230;
      uint64_t v8 = a3;
      goto LABEL_68;
    }
LABEL_73:
    if (v208 >= v211)
    {
      int v70 = *(unsigned __int16 *)(v8 + 50) + 1;
      uint64_t v71 = *v211;
      unint64_t v72 = (unint64_t)*v208;
      do
        uint64_t v71 = sortTransitions(v71, v70);
      while ((unint64_t)v71 <= v72);
    }
    if (a6 && ((*(_WORD *)(v8 + 44) + ~*(_WORD *)(v8 + 40)) & 0x8000) == 0)
    {
      int v73 = (__int16)(*(_WORD *)(v8 + 44) + ~*(_WORD *)(v8 + 40));
      int v74 = *(unsigned __int16 *)(v8 + 48) + 1;
      int v75 = *(__int16 **)(v8 + 8);
      do
      {
        int v75 = sortTransitions(v75, v74);
        BOOL v76 = (unsigned __int16)v73-- == 0;
      }
      while (!v76);
    }
    if (v208 >= v211)
    {
      if (*(unsigned __int16 *)(v8 + 40) == *(unsigned __int16 *)(v8 + 44))
      {
        int v81 = *v211;
        unint64_t v82 = (unint64_t)*v208;
        if (*v211 <= *v208)
        {
          uint64_t v83 = *(__int16 *)(v8 + 50);
          do
          {
            __int16 *v81 = 1;
            uint64_t v84 = &v81[v83];
            __int16 *v84 = *(_WORD *)(v8 + 40) + 1;
            v81[1] = *(_WORD *)(v8 + 40);
            v84[1] = 1;
            int v81 = (__int16 *)((char *)v81 + v83 * 2 + 4);
          }
          while ((unint64_t)v81 <= v82);
        }
      }
    }
    else
    {
      int v77 = *(unsigned __int16 *)(v8 + 50) + 1;
      SET(*v211, v77, *(_WORD *)(v8 + 40));
      int v78 = *(unsigned __int16 *)(v8 + 44);
      int v79 = *(unsigned __int16 *)(v8 + 40);
      if (v78 == v79) {
        LOWORD(v78) = v79 + 1;
      }
      OFF((uint64_t)*v211, v77, v78);
      int v6 = (__int16)(v7 + 1);
    }
    int v85 = v6 - v7;
    uint64_t v239 = *(unsigned __int16 *)(v8 + 50);
    if ((__int16)v85 >= 1)
    {
      uint64_t v86 = (int)v7;
      uint64_t v87 = v239 + 2;
      uint64_t v88 = *(_WORD **)(*(void *)(v8 + 32) + 8 * v86 + 8 * (unsigned __int16)v85 - 8);
      int v89 = *(int **)v8;
      unint64_t v90 = (unint64_t)*(unsigned __int16 *)(v8 + 54) >> 5;
      int v228 = *(__int16 *)(v8 + 40) + 32;
      uint64_t v224 = v90;
      uint64_t v91 = -2 - v239;
      unint64_t v231 = v90;
      while (1)
      {
        v248 = v89;
        int v92 = (unsigned __int16)*v88;
        BOOL v93 = *v88 != 0;
        int v94 = &v88[v87];
        uint64_t v97 = (__int16)*(v94 - 1);
        unsigned int v95 = v94 - 1;
        uint64_t v96 = v97;
        BOOL v98 = v97 != 0;
        if ((unsigned __int16)v92 | (unsigned __int16)v97) {
          break;
        }
        int v100 = 0;
        long long v137 = v89;
        int v136 = v89;
        int v104 = v89;
LABEL_180:
        int v89 = &v137[v90];
        int *v104 = v100;
        int v138 = v104 + 1;
        if (v138 < v89)
        {
          int v139 = &v137[v224];
          if (&v137[v224] <= v136 + 2) {
            int v139 = v136 + 2;
          }
          bzero(v138, (((char *)v139 - (char *)v136 - 5) & 0xFFFFFFFFFFFFFFFCLL) + 4);
        }
        int v140 = (__int16)v85--;
        v88 += v91;
        if (v140 <= 1) {
          goto LABEL_185;
        }
      }
      int v245 = v85;
      int v99 = 0;
      int v100 = 0;
      int v101 = (unsigned __int16)v96;
      v242 = v88;
      uint64_t v102 = v88 + 1;
      int v103 = v228;
      int v104 = v89;
      int v105 = &v95[-v96];
      while (v93)
      {
        int v106 = *v102;
        if (v98)
        {
          int v107 = *v105;
          if (v106 < v107)
          {
            --v92;
            ++v102;
            if (!v99)
            {
              if (v103 <= v106)
              {
                *v104++ = v100;
                v103 += 32;
                int v100 = 0;
              }
              if (v103 <= v106)
              {
                int v130 = v103 + 32;
                if (v103 + 32 <= v106 + 1) {
                  int v131 = v106 + 1;
                }
                else {
                  int v131 = v103 + 32;
                }
                unsigned int v132 = v131 + ~v103;
                bzero(v104, ((v132 >> 3) & 0x1FFFFFFC) + 4);
                int v104 = (int *)((char *)v104 + ((v132 >> 3) & 0x1FFFFFFC) + 4);
                int v103 = (v132 & 0xFFFFFFE0) + v130;
              }
LABEL_168:
              v100 |= 0xFFFFFFFF >> (v106 - v103);
              int v99 = 1;
              goto LABEL_169;
            }
            BOOL v160 = __CFADD__(v99++, 1);
            if (!v160) {
              goto LABEL_169;
            }
            if (v103 < v106)
            {
              *v104++ = v100;
              v103 += 32;
              int v100 = -1;
            }
            if (v103 < v106)
            {
              int v108 = v103 + 32;
              if (v103 + 32 <= v106) {
                int v109 = v106;
              }
              else {
                int v109 = v103 + 32;
              }
              unsigned int v110 = v109 + ~v103;
              memset(v104, 255, ((v110 >> 3) & 0x1FFFFFFC) + 4);
              int v104 = (int *)((char *)v104 + ((v110 >> 3) & 0x1FFFFFFC) + 4);
              int v103 = (v110 & 0xFFFFFFE0) + v108;
            }
            goto LABEL_130;
          }
          if (v106 <= v107)
          {
            --v92;
            ++v102;
            --v101;
            ++v105;
            goto LABEL_169;
          }
          --v101;
          ++v105;
          int v112 = v99 - 1;
          if (v99 == 1)
          {
            if (v103 < v107)
            {
              *v104++ = v100;
              v103 += 32;
              int v100 = -1;
            }
            if (v103 < v107)
            {
              int v133 = v103 + 32;
              if (v103 + 32 <= v107) {
                int v134 = v107;
              }
              else {
                int v134 = v103 + 32;
              }
              unsigned int v135 = v134 + ~v103;
              memset(v104, 255, ((v135 >> 3) & 0x1FFFFFFC) + 4);
              int v104 = (int *)((char *)v104 + ((v135 >> 3) & 0x1FFFFFFC) + 4);
              int v103 = (v135 & 0xFFFFFFE0) + v133;
            }
            int v99 = 0;
            char v119 = v103 - v107;
            goto LABEL_131;
          }
          if (!v99)
          {
            if (v103 <= v107)
            {
              *v104++ = v100;
              v103 += 32;
              int v100 = 0;
            }
            if (v103 <= v107)
            {
              int v120 = v103 + 32;
              if (v103 + 32 <= v107 + 1) {
                int v121 = v107 + 1;
              }
              else {
                int v121 = v103 + 32;
              }
              unsigned int v122 = v121 + ~v103;
              bzero(v104, ((v122 >> 3) & 0x1FFFFFFC) + 4);
              int v104 = (int *)((char *)v104 + ((v122 >> 3) & 0x1FFFFFFC) + 4);
              int v103 = (v122 & 0xFFFFFFE0) + v120;
            }
            char v123 = v107 - v103;
LABEL_151:
            int v99 = -1;
            v100 |= 0xFFFFFFFF >> v123;
            goto LABEL_169;
          }
LABEL_110:
          int v99 = v112;
          goto LABEL_169;
        }
        --v92;
        ++v102;
        if (!v99)
        {
          if (v103 <= v106)
          {
            *v104++ = v100;
            v103 += 32;
            int v100 = 0;
          }
          if (v103 <= v106)
          {
            int v127 = v103 + 32;
            if (v103 + 32 <= v106 + 1) {
              int v128 = v106 + 1;
            }
            else {
              int v128 = v103 + 32;
            }
            unsigned int v129 = v128 + ~v103;
            bzero(v104, ((v129 >> 3) & 0x1FFFFFFC) + 4);
            int v104 = (int *)((char *)v104 + ((v129 >> 3) & 0x1FFFFFFC) + 4);
            int v103 = (v129 & 0xFFFFFFE0) + v127;
          }
          int v101 = 0;
          goto LABEL_168;
        }
        BOOL v160 = __CFADD__(v99++, 1);
        if (v160)
        {
          if (v103 < v106)
          {
            *v104++ = v100;
            v103 += 32;
            int v100 = -1;
          }
          if (v103 < v106)
          {
            int v113 = v103 + 32;
            if (v103 + 32 <= v106) {
              int v114 = v106;
            }
            else {
              int v114 = v103 + 32;
            }
            unsigned int v115 = v114 + ~v103;
            memset(v104, 255, ((v115 >> 3) & 0x1FFFFFFC) + 4);
            int v104 = (int *)((char *)v104 + ((v115 >> 3) & 0x1FFFFFFC) + 4);
            int v103 = (v115 & 0xFFFFFFE0) + v113;
          }
          int v101 = 0;
LABEL_130:
          int v99 = 0;
          char v119 = v103 - v106;
LABEL_131:
          v100 &= -1 << v119;
          goto LABEL_169;
        }
        int v101 = 0;
LABEL_169:
        BOOL v93 = (unsigned __int16)v92 != 0;
        BOOL v98 = (unsigned __int16)v101 != 0;
        if (!((unsigned __int16)v92 | (unsigned __int16)v101))
        {
          int v136 = v104;
          uint64_t v8 = a3;
          uint64_t v87 = v239 + 2;
          int v85 = v245;
          uint64_t v88 = v242;
          unint64_t v90 = v231;
          uint64_t v91 = -2 - v239;
          long long v137 = v248;
          goto LABEL_180;
        }
      }
      int v111 = *v105++;
      int v106 = v111;
      --v101;
      int v112 = v99 - 1;
      if (v99 == 1)
      {
        if (v103 < v106)
        {
          *v104++ = v100;
          v103 += 32;
          int v100 = -1;
        }
        if (v103 < v106)
        {
          int v116 = v103 + 32;
          if (v103 + 32 <= v106) {
            int v117 = v106;
          }
          else {
            int v117 = v103 + 32;
          }
          unsigned int v118 = v117 + ~v103;
          memset(v104, 255, ((v118 >> 3) & 0x1FFFFFFC) + 4);
          int v104 = (int *)((char *)v104 + ((v118 >> 3) & 0x1FFFFFFC) + 4);
          int v103 = (v118 & 0xFFFFFFE0) + v116;
        }
        int v92 = 0;
        goto LABEL_130;
      }
      if (!v99)
      {
        if (v103 <= v106)
        {
          *v104++ = v100;
          v103 += 32;
          int v100 = 0;
        }
        if (v103 <= v106)
        {
          int v124 = v103 + 32;
          if (v103 + 32 <= v106 + 1) {
            int v125 = v106 + 1;
          }
          else {
            int v125 = v103 + 32;
          }
          unsigned int v126 = v125 + ~v103;
          bzero(v104, ((v126 >> 3) & 0x1FFFFFFC) + 4);
          int v104 = (int *)((char *)v104 + ((v126 >> 3) & 0x1FFFFFFC) + 4);
          int v103 = (v126 & 0xFFFFFFE0) + v124;
        }
        int v92 = 0;
        char v123 = v106 - v103;
        goto LABEL_151;
      }
      int v92 = 0;
      goto LABEL_110;
    }
LABEL_185:
    if (a6)
    {
      __int16 v185 = *(_WORD *)(v8 + 46);
      int v243 = (__int16)(v185 - 1);
      int v249 = *(__int16 *)(v8 + 40);
      __int16 v141 = *(_WORD *)(v8 + 44);
      int v142 = (__int16)(v141 - 1);
      v234 = *(__int16 ***)(v8 + 32);
      v236 = *(__int16 ***)(v8 + 24);
      unint64_t v143 = (unint64_t)*(unsigned __int16 *)(v8 + 54) >> 5;
      uint64_t v144 = *(void *)v8 + 4 * (*(unsigned __int16 *)(v8 + 52) - 1) * (int)v143;
      unint64_t v193 = v143;
      if (v143 == 1) {
        uint64_t v144 = *(void *)v8 + 4 * *(unsigned __int16 *)(v8 + 52) - 4;
      }
      long long v186 = (unsigned int *)v144;
      int v246 = *(__int16 *)(v8 + 42);
      int v187 = *(unsigned __int16 *)(v8 + 48);
      int v229 = (__int16)v187;
      int v232 = (__int16)(v141 - 1);
      if (v246 <= (__int16)(v185 - 1))
      {
        BOOL v145 = v234[*(__int16 *)(v8 + 42)];
        char v146 = v141 - 1 - v249;
        uint64_t v147 = (uint64_t)(v142 - v249) >> 5;
        if (v143 == 1) {
          uint64_t v147 = 0;
        }
        uint64_t v201 = v147;
        if (v143 != 1) {
          char v146 = (v141 - 1 - v249) & 0x1F;
        }
        unsigned int v198 = 0x80000000 >> v146;
        uint64_t v189 = 2 * (__int16)(v239 + 2);
        int v203 = v141;
        uint64_t v218 = v186;
        int v215 = *(__int16 *)(v8 + 42);
        while (1)
        {
          int v148 = *v145;
          v195 = &v145[(unint64_t)v189 / 2];
          if (*v145) {
            break;
          }
LABEL_224:
          v218 -= v193;
          BOOL v145 = (__int16 *)((char *)v145 + v189);
          BOOL v76 = v215++ == v243;
          if (v76) {
            goto LABEL_226;
          }
        }
        uint64_t v149 = *(v195 - 1);
        int v150 = (unsigned __int16)*(v195 - 1);
        int v151 = v195[-v149 - 1];
        uint64_t v152 = v189 - 2 * v149;
        int v153 = v145;
        int v212 = v150;
        int v209 = v151;
        uint64_t v206 = v152;
        while (1)
        {
          int v155 = v153[1];
          ++v153;
          int v154 = v155;
          int v156 = v151;
          if (v150)
          {
            int v156 = v151;
            if (v151 < v154)
            {
              uint64_t v157 = v152;
              int v158 = v150;
              do
              {
                --v158;
                int v156 = *(__int16 *)((char *)v145 + v157);
                if (!(_WORD)v158) {
                  break;
                }
                v157 += 2;
              }
              while (v156 < v154);
            }
          }
          if (v154 != v156) {
            goto LABEL_213;
          }
          if ((a6 & 0x10000) != 0)
          {
            v225 = v153;
            unsigned int v221 = nUpperXings(v234, v236, (__int16)v215, v154, (__int16)v239, (__int16)v187, v249, v203, v243);
            unsigned int v159 = nLowerXings(v234, v236, (__int16)v215, v154, (__int16)v239, (__int16)v187, v249, v203, v246);
            int v153 = v225;
            uint64_t v152 = v206;
            int v151 = v209;
            int v150 = v212;
            int v142 = v232;
            BOOL v160 = v221 >= 2 && v159 >= 2;
            if (!v160) {
              goto LABEL_213;
            }
          }
          if (v154 <= v142)
          {
            if (v154 == v249)
            {
              long long v161 = v218;
              unsigned int v162 = *v218 | 0x80000000;
            }
            else
            {
              int v163 = v154 + ~v249;
              if (v193 == 1)
              {
                if ((*v218 & (0x40000000u >> v163)) != 0) {
                  goto LABEL_213;
                }
                unsigned int v162 = *v218 | (2 * (0x40000000u >> v163));
                long long v161 = v218;
              }
              else
              {
                unsigned int v164 = 0x80000000 >> v163;
                long long v161 = &v218[v163 >> 5];
                unsigned int v165 = *v161;
                if ((*v161 & (0x80000000 >> v163)) != 0) {
                  goto LABEL_213;
                }
                int v166 = v163 & 0x1F;
                if (v166 == 31)
                {
                  if ((v161[1] & 0x80000000) != 0) {
                    goto LABEL_213;
                  }
                }
                else if (((v165 << v166) & 0x40000000) != 0)
                {
                  goto LABEL_213;
                }
                unsigned int v162 = v165 | v164;
              }
            }
            *long long v161 = v162;
          }
          else
          {
            v218[v201] |= v198;
          }
LABEL_213:
          if (!--v148) {
            goto LABEL_224;
          }
        }
      }
LABEL_226:
      if (v249 <= v142)
      {
        long long v167 = v236[v249];
        uint64_t v188 = (uint64_t)((unint64_t)(v187 + 2) << 48) >> 47;
        int v213 = v249;
        while (1)
        {
          int v168 = *v167;
          v196 = (char *)v167 + v188;
          if (*v167) {
            break;
          }
LABEL_252:
          long long v167 = (__int16 *)((char *)v167 + v188);
          BOOL v76 = v213++ == v142;
          if (v76) {
            return 0;
          }
        }
        uint64_t v169 = *((__int16 *)v196 - 1);
        uint64_t v170 = (uint64_t)(v213 - v249) >> 5;
        if (v193 == 1) {
          uint64_t v170 = 0;
        }
        uint64_t v190 = (uint64_t)&v186[v170 - v193];
        int v171 = *(__int16 *)&v196[-2 * v169 - 2];
        v199 = &v186[v170];
        char v172 = (v213 - v249) & 0x1F;
        if (v193 == 1) {
          char v172 = v213 - v249;
        }
        unsigned int v219 = 0x80000000 >> v172;
        int v173 = *((unsigned __int16 *)v196 - 1);
        uint64_t v216 = (uint64_t)&v186[(v246 - v243) * (int)v193 + v170];
        uint64_t v174 = v188 - 2 * v169;
        unint64_t v175 = v167;
        int v210 = *(__int16 *)&v196[-2 * v169 - 2];
        int v207 = v173;
        *(void *)v204 = v174;
        while (1)
        {
          int v177 = v175[1];
          ++v175;
          int v176 = v177;
          int v178 = v171;
          if (v173)
          {
            int v178 = v171;
            if (v171 < v176)
            {
              uint64_t v179 = v174;
              int v180 = v173;
              do
              {
                --v180;
                int v178 = *(__int16 *)((char *)v167 + v179);
                if (!(_WORD)v180) {
                  break;
                }
                v179 += 2;
              }
              while (v178 < v176);
            }
          }
          if (v176 != v178) {
            goto LABEL_251;
          }
          if ((a6 & 0x10000) != 0)
          {
            v226 = v175;
            unsigned int v222 = nUpperXings(v236, v234, (__int16)v213, v176, v229, (__int16)v239, v246, v185, v142);
            unsigned int v181 = nLowerXings(v236, v234, (__int16)v213, v176, v229, (__int16)v239, v246, v185, v249);
            unint64_t v175 = v226;
            uint64_t v174 = *(void *)v204;
            int v173 = v207;
            int v171 = v210;
            int v142 = v232;
            if (v222 < 2 || v181 < 2) {
              goto LABEL_251;
            }
          }
          v183 = (_DWORD *)v216;
          if (v176 > v243) {
            goto LABEL_250;
          }
          v183 = v199;
          if (v176 == v246) {
            goto LABEL_250;
          }
          unint64_t v184 = (_DWORD *)(v190 - 4 * (int)v193 * (uint64_t)(v176 + ~v246));
          if ((*v184 & v219) == 0) {
            break;
          }
LABEL_251:
          if (!--v168) {
            goto LABEL_252;
          }
        }
        v183 = &v184[v193];
LABEL_250:
        *v183 |= v219;
        goto LABEL_251;
      }
    }
  }
  return 0;
}

uint64_t sc_lineGen(uint64_t result, int *a2, int *a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  int v6 = a3 + 2;
  if ((unint64_t)(a3 + 2) <= a4)
  {
    uint64_t v10 = result;
    uint64_t v11 = (unsigned int *)(a2 + 2);
    int v12 = *a3;
    int v13 = a3[1];
    int v14 = *a2;
    uint64_t v15 = a2[1];
    do
    {
      uint64_t v16 = v15;
      int v17 = v13;
      unsigned int v18 = *v11++;
      uint64_t v15 = v18;
      int v19 = *v6++;
      int v13 = v19;
      uint64_t result = sc_mark(v16, v17, v15, v19, v14, v12, a5, a6, *(_DWORD *)(v10 + 48), HIWORD(*(_DWORD *)(v10 + 48)));
      int v12 = v17;
      int v14 = v16;
    }
    while ((unint64_t)v6 <= a4);
  }
  return result;
}

uint64_t sc_lineGenRows(uint64_t result, int *a2, int *a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7)
{
  if (a7 >= a6)
  {
    uint64_t v8 = a3 + 2;
    if ((unint64_t)(a3 + 2) <= a4)
    {
      uint64_t v12 = result;
      int v13 = (unsigned int *)(a2 + 2);
      int v14 = *a3;
      int v15 = a3[1];
      int v16 = *a2;
      uint64_t v17 = a2[1];
      do
      {
        uint64_t v18 = v17;
        int v22 = v17;
        int v19 = v15;
        unsigned int v20 = *v13++;
        uint64_t v17 = v20;
        int v21 = *v8++;
        int v15 = v21;
        uint64_t result = sc_markRows(v18, v19, v17, v21, v16, v14, a5, *(_WORD *)(v12 + 50), a6, a7);
        int v14 = v19;
        int v16 = v22;
      }
      while ((unint64_t)v8 <= a4);
    }
  }
  return result;
}

uint64_t sc_DrawParabola(int a1, int a2, int a3, int a4, int a5, int a6, int **a7, int **a8, int *a9, unsigned int a10)
{
  char v14 = 0;
  int v42 = a6 + 2;
  int v43 = a5 + 2;
  int v16 = a5 + 1;
  int v17 = a6 + 1;
  while (1)
  {
    int v18 = a1 - a3 - a3 + a5;
    int v19 = a2 - a4 - a4 + a6;
    if ((a10 & 0x80000000) != 0)
    {
      if (v18 >= 0) {
        unsigned int v21 = a1 - a3 - a3 + a5;
      }
      else {
        unsigned int v21 = -v18;
      }
      if (v19 >= 0) {
        unsigned int v22 = a2 - a4 - a4 + a6;
      }
      else {
        unsigned int v22 = -v19;
      }
      if (v21 <= v22) {
        int v23 = 2 * v22;
      }
      else {
        int v23 = v22 + v21;
      }
      unsigned int v24 = v23 + v21;
      unsigned int v25 = 1;
      unsigned int v26 = 1;
      if (v24 >= 0x81)
      {
        do
        {
          ++v26;
          BOOL v27 = v24 > 0x203;
          v24 >>= 2;
        }
        while (v27);
      }
      if (v26 >= 8) {
        a10 = 8;
      }
      else {
        a10 = v26;
      }
      int v20 = 1 << a10;
      int v28 = (1 << a10) + *a9;
      *a9 = v28;
      if (v28 > 262) {
        goto LABEL_28;
      }
    }
    else
    {
      int v20 = 1 << a10;
    }
    if (a10 < 6) {
      break;
    }
    --a10;
    int v29 = (v43 + a3 + a3 + a1) >> 2;
    int v30 = (v42 + a4 + a4 + a2) >> 2;
    sc_DrawParabola(a1, a2, (a3 + a1 + 1) >> 1, (a4 + a2 + 1) >> 1, v29, v30, a7, a8, a9, a10);
    a3 = (v16 + a3) >> 1;
    a4 = (v17 + a4) >> 1;
    char v14 = 1;
    a1 = v29;
    a2 = v30;
  }
  char v31 = 2 * a10;
  int v32 = v18 - ((a1 - a3) << (a10 + 1));
  int v33 = 2 * v18;
  int v34 = v19 - ((a2 - a4) << (a10 + 1));
  int v35 = 2 * v19;
  uint64_t v36 = *a7;
  int v37 = *a8;
  uint64_t v38 = 1 << (2 * a10 - 1);
  int v39 = (a2 << (2 * a10)) + v38;
  int v40 = (a1 << (2 * a10)) + v38;
  do
  {
    v40 += v32;
    v39 += v34;
    int *v36 = v40 >> v31;
    int *v37 = v39 >> v31;
    if (*v36 == *(v36 - 1) && v39 >> v31 == *(v37 - 1))
    {
      --*a9;
    }
    else
    {
      ++v36;
      ++v37;
    }
    v32 += v33;
    v34 += v35;
    --v20;
  }
  while (v20);
  unsigned int v25 = 0;
  *a7 = v36;
  *a8 = v37;
LABEL_28:
  if (v14) {
    return 0;
  }
  else {
    return v25;
  }
}

uint64_t sc_mark(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7, uint64_t a8, __int16 a9, __int16 a10)
{
  int v15 = result;
  unsigned int v16 = (result + 31) >> 6;
  unsigned int v17 = (a2 + 31) >> 6;
  unsigned int v18 = (a3 + 31) >> 6;
  unsigned int v19 = (a4 + 31) >> 6;
  int v208 = (result + 31) & 0xFFFFFFC0;
  int v20 = (__int16)((a2 + 31) >> 6);
  int v21 = (__int16)(((int)result + 31) >> 6);
  unsigned int v198 = (a2 + 31) & 0xFFFFFFC0;
  int v22 = a4 - a2;
  int v23 = a3 - result;
  __int16 v24 = a9 + 1;
  __int16 v25 = a10 + 1;
  unsigned int v26 = (__int16 **)(a8 + 8 * (__int16)((a2 + 31) >> 6));
  BOOL v27 = (uint64_t *)(a7 + 8 * (__int16)(((int)result + 31) >> 6));
  uint64_t v218 = v27;
  int v216 = a3 - result;
  int v217 = v20;
  if (((a4 - a2) & 0x80000000) == 0 && v23 >= 1)
  {
    uint64_t result = a2 & 0x3F;
    int v28 = v15 & 0x3F;
    if (result == 32)
    {
      int v29 = (v15 - a5) * v22;
      int v30 = (a2 - a6) * v23;
      __int16 v211 = (a4 + 31) >> 6;
      unsigned int v181 = 32;
      if (v28 == 32)
      {
        if (v29 < v30 || v15 < a5 && a4 == a2 && a2 == a6)
        {
          __int16 v191 = (a3 + 31) >> 6;
          int v199 = a4 - a2;
          int v175 = v25;
          __int16 v31 = v20;
          SET(*v26, v25, v21);
          OFF(*v218, (__int16)(a9 + 1), v31 + 1);
          if (v15 < a5) {
            SET((__int16 *)*v218, (__int16)(a9 + 1), v217);
          }
          if (a2 < a6) {
            OFF((uint64_t)*v26, v175, v21 + 1);
          }
          int v32 = 0;
          __int16 v24 = a9 + 1;
          __int16 v25 = a10 + 1;
LABEL_55:
          int v22 = v199;
          int v20 = v217;
LABEL_56:
          LOWORD(v18) = v191;
          LOWORD(v19) = v211;
          uint64_t result = v181;
          goto LABEL_126;
        }
        if (a3 > v15 && v15 > a5)
        {
          int v206 = a4 - a2;
          __int16 v195 = (a3 + 31) >> 6;
          OFF(*v218, (__int16)(a9 + 1), v20 + 1);
          uint64_t result = 32;
          LOWORD(v19) = v211;
          LOWORD(v18) = v195;
          int v20 = v217;
          int v22 = v206;
          __int16 v25 = a10 + 1;
          __int16 v24 = a9 + 1;
        }
        int v32 = 0;
        if (a4 > a2 && a2 > a6)
        {
          __int16 v55 = v24;
          __int16 v56 = v25;
          int v57 = v22;
          __int16 v58 = v18;
          SET(*v26, v25, v21);
LABEL_121:
          uint64_t result = v181;
          LOWORD(v19) = v211;
          LOWORD(v18) = v58;
          int v20 = v217;
          int v22 = v57;
          __int16 v25 = v56;
          __int16 v24 = v55;
          int v32 = 0;
          goto LABEL_126;
        }
        goto LABEL_126;
      }
      if (v29 < v30 || v15 < a5 && a4 == a2 && a2 == a6)
      {
        __int16 v191 = (a3 + 31) >> 6;
        int v199 = a4 - a2;
        SET(*v26, (__int16)(a10 + 1), v21);
        if (a2 < a6) {
          OFF((uint64_t)*v26, (__int16)(a10 + 1), v21);
        }
        int v32 = 1;
        __int16 v24 = a9 + 1;
        __int16 v25 = a10 + 1;
        goto LABEL_55;
      }
      int v32 = 1;
      if (a4 <= a2 || a2 <= a6) {
        goto LABEL_126;
      }
      int v59 = a4 - a2;
      __int16 v60 = (a3 + 31) >> 6;
      SET(*v26, (__int16)(a10 + 1), v21);
      uint64_t result = 32;
      LOWORD(v19) = v211;
      LOWORD(v18) = v60;
      int v20 = v217;
      int v22 = v59;
      __int16 v25 = a10 + 1;
      __int16 v24 = a9 + 1;
    }
    else if (v28 == 32)
    {
      if ((v15 - a5) * v22 < (a2 - a6) * v23 || v15 < a5 && a4 == a2 && a2 == a6)
      {
        unsigned int v181 = a2 & 0x3F;
        __int16 v211 = (a4 + 31) >> 6;
        __int16 v191 = (a3 + 31) >> 6;
        int v201 = a4 - a2;
        int v37 = v24;
        int v38 = (__int16)((a2 + 31) >> 6);
        int v39 = (__int16 **)v27;
        OFF(*v27, v24, v20);
        if (v15 < a5) {
          SET(*v39, v37, v38);
        }
        int v32 = 0;
        __int16 v24 = a9 + 1;
        __int16 v25 = a10 + 1;
        int v22 = v201;
        int v20 = v38;
        goto LABEL_56;
      }
      int v32 = 0;
      if (a3 > v15 && v15 > a5)
      {
        unsigned int v181 = a2 & 0x3F;
        __int16 v55 = a9 + 1;
        __int16 v56 = a10 + 1;
        int v57 = a4 - a2;
        __int16 v58 = (a3 + 31) >> 6;
        __int16 v211 = (a4 + 31) >> 6;
        OFF(*v27, (__int16)(a9 + 1), v20);
        goto LABEL_121;
      }
LABEL_126:
      int v61 = (__int16)v19;
      int v62 = (__int16)v18;
      if ((__int16)v19 == v20)
      {
        if ((__int16)v18 != v21)
        {
          uint64_t v63 = &v218[v32 ^ 1u];
          unint64_t v64 = a7 + 8 * (__int16)v18;
          if ((unint64_t)v63 < v64)
          {
            if (result == 32) {
              __int16 v65 = v17 + 1;
            }
            else {
              __int16 v65 = v17;
            }
            int v66 = v24;
            __int16 v67 = v65;
            do
            {
              uint64_t v68 = *v63++;
              uint64_t result = OFF(v68, v66, v67);
            }
            while ((unint64_t)v63 < v64);
          }
        }
      }
      else if ((__int16)v18 == v21)
      {
        unint64_t v69 = a8 + 8 * (__int16)v19;
        int v70 = &v26[result == 32];
        if ((unint64_t)v70 < v69)
        {
          int v71 = v25;
          do
          {
            unint64_t v72 = *v70++;
            uint64_t result = (uint64_t)SET(v72, v71, v21);
          }
          while ((unint64_t)v70 < v69);
        }
      }
      else
      {
        if (result == 32)
        {
          int v73 = v216 << 6;
          LOWORD(v17) = v17 + 1;
          ++v26;
        }
        else
        {
          int v73 = (v198 - a2 + 32) * v216;
        }
        if (v32)
        {
          int v74 = v22 * (v208 - v15 + 32);
          int v75 = v22 << 6;
        }
        else
        {
          int v75 = v22 << 6;
          LOWORD(v16) = v16 + 1;
          ++v218;
          int v74 = v22 << 6;
        }
        int v76 = v73 - v74;
        int v77 = v25;
        int v78 = -v75;
        int v79 = v24;
        while (1)
        {
          while (v76 < 1)
          {
            if (v61 == (__int16)v17) {
              return result;
            }
            long long v80 = *v26++;
            uint64_t result = (uint64_t)SET(v80, v77, v16);
            LOWORD(v17) = v17 + 1;
            v76 += v216 << 6;
          }
          if (v62 == (__int16)v16) {
            break;
          }
          uint64_t v81 = *v218++;
          uint64_t result = OFF(v81, v79, v17);
          LOWORD(v16) = v16 + 1;
          v76 += v78;
        }
      }
      return result;
    }
    int v32 = 1;
    goto LABEL_126;
  }
  if (v22 >= 1 && v23 <= 0)
  {
    uint64_t result = a2 & 0x3F;
    int v33 = v15 & 0x3F;
    if (result == 32)
    {
      int v34 = (v15 - a5) * v22;
      int v35 = (a2 - a6) * v23;
      __int16 v212 = (a4 + 31) >> 6;
      unsigned int v182 = 32;
      if (v33 == 32)
      {
        if (v34 < v35 || a3 == v15 && v15 == a5 && a2 < a6)
        {
          __int16 v188 = a10 + 1;
          __int16 v192 = (a3 + 31) >> 6;
          int v200 = a4 - a2;
          int v176 = v25;
          SET(*v26, v25, v21);
          SET((__int16 *)*v218, (__int16)(a9 + 1), v217);
          if (v15 > a5) {
            OFF(*v218, (__int16)(a9 + 1), v217 + 1);
          }
          if (a2 < a6) {
            OFF((uint64_t)*v26, v176, v21 + 1);
          }
          int v36 = 0;
          __int16 v24 = a9 + 1;
LABEL_85:
          __int16 v25 = v188;
          int v22 = v200;
          int v20 = v217;
LABEL_86:
          LOWORD(v18) = v192;
          LOWORD(v19) = v212;
          uint64_t result = v182;
          goto LABEL_175;
        }
        if (a4 > a2 && a2 > a6)
        {
          int v207 = a4 - a2;
          unsigned int v196 = (a3 + 31) >> 6;
          SET(*v26, (__int16)(a10 + 1), v21);
          uint64_t result = 32;
          LOWORD(v19) = v212;
          LOWORD(v18) = v196;
          int v22 = v207;
          __int16 v25 = a10 + 1;
          __int16 v24 = a9 + 1;
        }
        int v36 = 0;
        if (a3 < v15)
        {
          int v20 = v217;
          if (v15 >= a5) {
            goto LABEL_175;
          }
          int v82 = v24;
          uint64_t v83 = (__int16 *)*v218;
          __int16 v84 = v217;
          __int16 v187 = v24;
          __int16 v85 = v25;
          int v86 = v22;
          __int16 v87 = v18;
          goto LABEL_161;
        }
        int v20 = v217;
        goto LABEL_175;
      }
      if (v34 < v35 || a3 == v15 && v15 == a5 && a2 < a6)
      {
        __int16 v188 = a10 + 1;
        __int16 v192 = (a3 + 31) >> 6;
        int v200 = a4 - a2;
        int v51 = v25;
        SET(*v26, v25, v21);
        if (a2 < a6) {
          OFF((uint64_t)*v26, v51, v21);
        }
        int v36 = 1;
        __int16 v24 = a9 + 1;
        goto LABEL_85;
      }
      int v36 = 1;
      if (a4 <= a2 || a2 <= a6) {
        goto LABEL_175;
      }
      int v89 = a4 - a2;
      __int16 v90 = (a3 + 31) >> 6;
      SET(*v26, (__int16)(a10 + 1), v21);
      uint64_t result = 32;
      __int16 v24 = a9 + 1;
      LOWORD(v19) = v212;
      LOWORD(v18) = v90;
      int v20 = v217;
      int v22 = v89;
      __int16 v25 = a10 + 1;
    }
    else if (v33 == 32)
    {
      if ((v15 - a5) * v22 < (a2 - a6) * v23 || a3 == v15 && v15 == a5 && a2 < a6)
      {
        unsigned int v182 = a2 & 0x3F;
        __int16 v212 = (a4 + 31) >> 6;
        __int16 v192 = (a3 + 31) >> 6;
        int v203 = a4 - a2;
        int v44 = v24;
        int v45 = (__int16)((a2 + 31) >> 6);
        SET((__int16 *)*v27, v24, v20);
        if (v15 > a5) {
          OFF(*v218, v44, v45);
        }
        int v36 = 0;
        __int16 v24 = a9 + 1;
        __int16 v25 = a10 + 1;
        int v22 = v203;
        int v20 = v45;
        goto LABEL_86;
      }
      int v36 = 0;
      if (a3 < v15 && v15 < a5)
      {
        int v82 = v24;
        unsigned int v182 = result;
        __int16 v187 = a9 + 1;
        uint64_t v83 = (__int16 *)*v27;
        __int16 v84 = v20;
        __int16 v85 = a10 + 1;
        int v86 = v22;
        __int16 v87 = v18;
        __int16 v212 = (a4 + 31) >> 6;
LABEL_161:
        SET(v83, v82, v84);
        uint64_t result = v182;
        __int16 v24 = v187;
        LOWORD(v19) = v212;
        LOWORD(v18) = v87;
        int v20 = v217;
        int v22 = v86;
        __int16 v25 = v85;
        int v36 = 0;
      }
LABEL_175:
      int v91 = (__int16)v19;
      if ((__int16)v19 == v20)
      {
        if ((__int16)v18 != v21)
        {
          __int16 v92 = (a3 & 0x3F) == 0x20 ? v18 + 1 : v18;
          unint64_t v93 = a7 + 8 * v92;
          int v94 = (__int16 **)(v218 - 1);
          if ((unint64_t)(v218 - 1) >= v93)
          {
            int v95 = v24;
            do
            {
              uint64_t v96 = *v94--;
              uint64_t result = (uint64_t)SET(v96, v95, v217);
            }
            while ((unint64_t)v94 >= v93);
          }
        }
      }
      else
      {
        if ((__int16)v18 != v21)
        {
          if (result == 32)
          {
            int v101 = v216 << 6;
            LOWORD(v17) = v17 + 1;
            ++v26;
            int v102 = v216 << 6;
          }
          else
          {
            int v102 = (v198 - a2 + 32) * v216;
            int v101 = v216 << 6;
          }
          int v103 = v22 << 6;
          if (v36) {
            int v104 = v22 * (v15 - v208 + 32);
          }
          else {
            int v104 = v22 << 6;
          }
          int v105 = v102 + v104;
          int v106 = v25;
          if ((a3 & 0x3F) == 0x20) {
            __int16 v107 = v18 + 1;
          }
          else {
            __int16 v107 = v18;
          }
          int v108 = v107;
          int v109 = v24;
          while (1)
          {
            if (v105 <= 0)
            {
              LOWORD(v16) = v16 - 1;
              if (v108 > (__int16)v16) {
                return result;
              }
              int v112 = (__int16 *)*--v218;
              uint64_t result = (uint64_t)SET(v112, v109, v17);
              int v111 = v103;
            }
            else
            {
              if (v91 == (__int16)v17) {
                return result;
              }
              unsigned int v110 = *v26++;
              uint64_t result = (uint64_t)SET(v110, v106, v16);
              LOWORD(v17) = v17 + 1;
              int v111 = v101;
            }
            v105 += v111;
          }
        }
        unint64_t v97 = a8 + 8 * (__int16)v19;
        BOOL v98 = &v26[result == 32];
        if ((unint64_t)v98 < v97)
        {
          int v99 = v25;
          do
          {
            int v100 = *v98++;
            uint64_t result = (uint64_t)SET(v100, v99, v21);
          }
          while ((unint64_t)v98 < v97);
        }
      }
      return result;
    }
    int v36 = 1;
    goto LABEL_175;
  }
  if (v22 <= 0 && v23 < 0)
  {
    int v40 = result & 0x3F;
    int v183 = a2 & 0x3F;
    if (v183 == 32)
    {
      int v41 = (result - a5) * v22;
      int v42 = (a2 - a6) * v23;
      int v202 = a4 - a2;
      __int16 v193 = (a3 + 31) >> 6;
      __int16 v213 = (a4 + 31) >> 6;
      if (v40 == 32)
      {
        if (v41 < v42 || (int)result > a5 && a4 == a2 && a2 == a6)
        {
          __int16 v185 = a9 + 1;
          __int16 v189 = a10 + 1;
          int v177 = v25;
          OFF((uint64_t)*v26, v25, v21 + 1);
          uint64_t result = (uint64_t)SET((__int16 *)*v218, (__int16)(a9 + 1), v217);
          if (v15 > a5) {
            uint64_t result = OFF(*v218, v185, (unsigned __int16)v217 + 1);
          }
          if (a2 > a6) {
            uint64_t result = (uint64_t)SET(*v26, v177, v21);
          }
          int v43 = 0;
LABEL_102:
          __int16 v24 = v185;
          __int16 v25 = v189;
          int v23 = v216;
          int v20 = v217;
          int v22 = v202;
LABEL_103:
          LOWORD(v18) = v193;
          LOWORD(v19) = v213;
          goto LABEL_219;
        }
        if (a4 < a2 && a2 < a6)
        {
          uint64_t result = OFF((uint64_t)*v26, (__int16)(a10 + 1), (unsigned __int16)v21 + 1);
          LOWORD(v19) = v213;
          int v23 = v216;
          LOWORD(v18) = v193;
          int v22 = v202;
          __int16 v25 = a10 + 1;
          __int16 v24 = a9 + 1;
        }
        int v43 = 0;
        if (a3 < v15)
        {
          int v20 = v217;
          if (v15 >= a5) {
            goto LABEL_219;
          }
          int v113 = v24;
          int v114 = (__int16 *)*v218;
          __int16 v115 = v217;
          __int16 v116 = v24;
          __int16 v117 = v25;
          goto LABEL_214;
        }
        int v20 = v217;
        goto LABEL_219;
      }
      if (v41 < v42 || (int)result > a5 && a4 == a2 && a2 == a6)
      {
        __int16 v185 = a9 + 1;
        __int16 v189 = a10 + 1;
        int v53 = v25;
        uint64_t result = OFF((uint64_t)*v26, v25, v21);
        if (a2 > a6) {
          uint64_t result = (uint64_t)SET(*v26, v53, v21);
        }
        int v43 = 1;
        goto LABEL_102;
      }
      int v43 = 1;
      if (a4 >= a2 || a2 >= a6) {
        goto LABEL_219;
      }
      uint64_t result = OFF((uint64_t)*v26, (__int16)(a10 + 1), v21);
      LOWORD(v19) = v213;
      int v23 = v216;
      LOWORD(v18) = v193;
      int v20 = v217;
      int v22 = v202;
      __int16 v25 = a10 + 1;
      __int16 v24 = a9 + 1;
    }
    else if (v40 == 32)
    {
      if (((int)result - a5) * v22 < (a2 - a6) * v23 || (int)result > a5 && a4 == a2 && a2 == a6)
      {
        __int16 v213 = (a4 + 31) >> 6;
        __int16 v193 = (a3 + 31) >> 6;
        int v205 = a4 - a2;
        int v179 = v24;
        int v52 = (__int16)((a2 + 31) >> 6);
        uint64_t result = (uint64_t)SET((__int16 *)*v27, v24, v20);
        if (v15 > a5) {
          uint64_t result = OFF(*v218, v179, v52);
        }
        int v43 = 0;
        __int16 v24 = a9 + 1;
        __int16 v25 = a10 + 1;
        int v23 = v216;
        int v22 = v205;
        int v20 = v52;
        goto LABEL_103;
      }
      int v43 = 0;
      if (a3 < (int)result && (int)result < a5)
      {
        int v113 = (__int16)(a9 + 1);
        int v114 = (__int16 *)*v27;
        __int16 v115 = v20;
        __int16 v116 = a9 + 1;
        __int16 v117 = a10 + 1;
        int v202 = v22;
        __int16 v193 = v18;
        __int16 v213 = (a4 + 31) >> 6;
LABEL_214:
        uint64_t result = (uint64_t)SET(v114, v113, v115);
        LOWORD(v19) = v213;
        int v23 = v216;
        LOWORD(v18) = v193;
        int v20 = v217;
        int v22 = v202;
        __int16 v25 = v117;
        __int16 v24 = v116;
        int v43 = 0;
      }
LABEL_219:
      if (v20 == (__int16)v19)
      {
        if ((__int16)v18 != v21)
        {
          __int16 v118 = (a3 & 0x3F) == 0x20 ? v18 + 1 : v18;
          unint64_t v119 = a7 + 8 * v118;
          int v120 = (__int16 **)(v218 - 1);
          if ((unint64_t)(v218 - 1) >= v119)
          {
            int v121 = v24;
            do
            {
              unsigned int v122 = *v120--;
              uint64_t result = (uint64_t)SET(v122, v121, v217);
            }
            while ((unint64_t)v120 >= v119);
          }
        }
      }
      else if ((__int16)v18 == v21)
      {
        if ((a4 & 0x3F) == 0x20) {
          __int16 v123 = v19 + 1;
        }
        else {
          __int16 v123 = v19;
        }
        unint64_t v124 = a8 + 8 * v123;
        int v125 = (uint64_t *)(v26 - 1);
        if ((unint64_t)(v26 - 1) >= v124)
        {
          int v126 = v25;
          do
          {
            uint64_t v127 = *v125--;
            uint64_t result = OFF(v127, v126, v21);
          }
          while ((unint64_t)v125 >= v124);
        }
      }
      else
      {
        int v128 = v198 - a2 - 32;
        if (v183 == 32) {
          int v128 = -64;
        }
        int v129 = v22 << 6;
        if (v43) {
          int v130 = v22 * (v15 - v208 + 32);
        }
        else {
          int v130 = v22 << 6;
        }
        int v131 = v130 + v128 * v23;
        int v132 = v23 << 6;
        if ((a4 & 0x3F) == 0x20) {
          __int16 v133 = v19 + 1;
        }
        else {
          __int16 v133 = v19;
        }
        int v134 = a3 & 0x3F;
        int v135 = v133;
        int v136 = v25;
        if (v134 == 32) {
          __int16 v137 = v18 + 1;
        }
        else {
          __int16 v137 = v18;
        }
        int v138 = v137;
        int v139 = v24;
        while (1)
        {
          while (v131 < 1)
          {
            LOWORD(v17) = v17 - 1;
            if (v135 > (__int16)v17) {
              return result;
            }
            uint64_t v140 = (uint64_t)*--v26;
            uint64_t result = OFF(v140, v136, v16);
            v131 -= v132;
          }
          LOWORD(v16) = v16 - 1;
          if (v138 > (__int16)v16) {
            break;
          }
          __int16 v141 = (__int16 *)*--v218;
          uint64_t result = (uint64_t)SET(v141, v139, v17);
          v131 += v129;
        }
      }
      return result;
    }
    int v43 = 1;
    goto LABEL_219;
  }
  if ((v22 & 0x80000000) == 0 || v23 < 0) {
    return result;
  }
  int v46 = result & 0x3F;
  int v184 = a2 & 0x3F;
  unsigned int v204 = a4 - a2;
  if (v184 == 32)
  {
    int v47 = (result - a5) * v22;
    int v48 = (a2 - a6) * v23;
    if (v46 == 32)
    {
      __int16 v186 = a9 + 1;
      if (v47 < v48 || a3 == result && result == a5 && a2 > a6)
      {
        __int16 v214 = (a4 + 31) >> 6;
        __int16 v190 = a10 + 1;
        __int16 v194 = (a3 + 31) >> 6;
        int v178 = v25;
        OFF((uint64_t)*v26, v25, v21 + 1);
        int v49 = (__int16)(a9 + 1);
        uint64_t result = OFF(*v218, (__int16)v49, (unsigned __int16)v217 + 1);
        if (v15 < a5) {
          uint64_t result = (uint64_t)SET((__int16 *)*v218, v49, v217);
        }
        if (a2 > a6) {
          uint64_t result = (uint64_t)SET(*v26, v178, v21);
        }
        int v50 = 0;
        __int16 v24 = a9 + 1;
LABEL_169:
        __int16 v25 = v190;
        int v20 = v217;
LABEL_170:
        LOWORD(v18) = v194;
        LOWORD(v19) = v214;
        goto LABEL_268;
      }
      if (a4 < a2 && a2 < a6)
      {
        __int16 v197 = (a3 + 31) >> 6;
        __int16 v215 = (a4 + 31) >> 6;
        uint64_t result = OFF((uint64_t)*v26, (__int16)(a10 + 1), (unsigned __int16)v21 + 1);
        LOWORD(v19) = v215;
        LOWORD(v18) = v197;
        int v20 = v217;
        __int16 v25 = a10 + 1;
        __int16 v24 = a9 + 1;
      }
      int v50 = 0;
      if (a3 > v15 && v15 > a5)
      {
        int v142 = v24;
        __int16 v143 = v217 + 1;
        uint64_t v144 = *v218;
LABEL_262:
        __int16 v145 = v25;
        __int16 v146 = v18;
        __int16 v147 = v19;
        uint64_t result = OFF(v144, v142, v143);
        LOWORD(v19) = v147;
        LOWORD(v18) = v146;
        int v20 = v217;
        __int16 v25 = v145;
        __int16 v24 = v186;
        int v50 = 0;
        goto LABEL_268;
      }
      goto LABEL_268;
    }
    if (v47 < v48 || a3 == result && result == a5 && a2 > a6)
    {
      __int16 v214 = (a4 + 31) >> 6;
      __int16 v190 = a10 + 1;
      __int16 v194 = (a3 + 31) >> 6;
      int v88 = v25;
      uint64_t result = OFF((uint64_t)*v26, v25, v21);
      if (a2 > a6) {
        uint64_t result = (uint64_t)SET(*v26, v88, v21);
      }
      int v50 = 1;
      __int16 v24 = a9 + 1;
      goto LABEL_169;
    }
    int v50 = 1;
    if (a4 >= a2 || a2 >= a6) {
      goto LABEL_268;
    }
    __int16 v148 = (a3 + 31) >> 6;
    unsigned int v149 = (a4 + 31) >> 6;
    uint64_t result = OFF((uint64_t)*v26, (__int16)(a10 + 1), v21);
    LOWORD(v19) = v149;
    LOWORD(v18) = v148;
    int v20 = v217;
    __int16 v25 = a10 + 1;
    __int16 v24 = a9 + 1;
LABEL_267:
    int v50 = 1;
    goto LABEL_268;
  }
  if (v46 != 32) {
    goto LABEL_267;
  }
  if (((int)result - a5) * v22 < (a2 - a6) * v23 || a3 == result && result == a5 && a2 > a6)
  {
    __int16 v214 = (a4 + 31) >> 6;
    __int16 v194 = (a3 + 31) >> 6;
    int v180 = v24;
    int v54 = (__int16)((a2 + 31) >> 6);
    uint64_t result = OFF(*v27, v24, v20);
    if (v15 < a5) {
      uint64_t result = (uint64_t)SET((__int16 *)*v218, v180, v54);
    }
    int v50 = 0;
    __int16 v24 = a9 + 1;
    __int16 v25 = a10 + 1;
    int v20 = v54;
    goto LABEL_170;
  }
  int v50 = 0;
  if (a3 > (int)result && (int)result > a5)
  {
    int v142 = v24;
    uint64_t v144 = *v27;
    __int16 v143 = v20;
    __int16 v186 = a9 + 1;
    goto LABEL_262;
  }
LABEL_268:
  int v150 = (__int16)v18;
  if (v20 == (__int16)v19)
  {
    if ((__int16)v18 != v21)
    {
      unint64_t v151 = a7 + 8 * (__int16)v18;
      uint64_t v152 = &v218[v50 ^ 1u];
      if ((unint64_t)v152 < v151)
      {
        int v153 = v24;
        do
        {
          uint64_t v154 = *v152++;
          uint64_t result = OFF(v154, v153, v217);
        }
        while ((unint64_t)v152 < v151);
      }
    }
  }
  else
  {
    uint64_t v155 = v204;
    if ((__int16)v18 != v21)
    {
      int v162 = v198 - a2 - 32;
      if (v184 == 32) {
        int v162 = -64;
      }
      int v163 = v162 * v216;
      if (v50)
      {
        int v164 = v204 * (v208 - v15 + 32);
      }
      else
      {
        int v164 = v204 << 6;
        LOWORD(v16) = v16 + 1;
        ++v218;
      }
      if ((a4 & 0x3F) == 0x20) {
        __int16 v165 = v19 + 1;
      }
      else {
        __int16 v165 = v19;
      }
      int v166 = v165;
      int v167 = v163 - v164;
      int v168 = v25;
      int v169 = v24;
      while (1)
      {
        if (v167 <= 0)
        {
          if (v150 == (__int16)v16) {
            return result;
          }
          uint64_t v173 = *v218++;
          uint64_t v174 = v155;
          uint64_t result = OFF(v173, v169, v17);
          uint64_t v155 = v174;
          LOWORD(v16) = v16 + 1;
          int v172 = v174;
        }
        else
        {
          LOWORD(v17) = v17 - 1;
          if (v166 > (__int16)v17) {
            return result;
          }
          uint64_t v170 = (uint64_t)*--v26;
          uint64_t v171 = v155;
          uint64_t result = OFF(v170, v168, v16);
          uint64_t v155 = v171;
          int v172 = v216;
        }
        v167 -= v172 << 6;
      }
    }
    if ((a4 & 0x3F) == 0x20) {
      __int16 v156 = v19 + 1;
    }
    else {
      __int16 v156 = v19;
    }
    unint64_t v157 = a8 + 8 * v156;
    int v158 = (uint64_t *)(v26 - 1);
    if ((unint64_t)(v26 - 1) >= v157)
    {
      int v159 = v25;
      __int16 v160 = v16 + (v50 ^ 1);
      do
      {
        uint64_t v161 = *v158--;
        uint64_t result = OFF(v161, v159, v160);
      }
      while ((unint64_t)v158 >= v157);
    }
  }
  return result;
}

uint64_t sc_markRows(uint64_t result, int a2, int a3, int a4, int a5, int a6, uint64_t a7, unsigned __int16 a8, unint64_t a9, unint64_t a10)
{
  char v11 = a4;
  char v12 = a3;
  int v14 = (result + 31) & 0xFFFFFFC0;
  uint64_t v15 = (((int)result + 31) >> 6);
  int v16 = (a2 + 31) >> 6;
  int v17 = (a4 + 31) >> 6;
  unsigned int v18 = (a2 + 31) & 0xFFFFFFC0;
  uint64_t v19 = (a4 - a2);
  uint64_t v20 = (a3 - result);
  int v21 = a8 + 1;
  int v22 = (__int16 **)(a7 + 8 * v16);
  unint64_t v23 = a7 + 8 * v17;
  int v178 = (a3 + 31) >> 6;
  int v179 = v21;
  if ((v19 & 0x80000000) == 0 && (int)v20 >= 1)
  {
    if ((unint64_t)v22 > a10 || v23 < a9) {
      return result;
    }
    if ((unint64_t)v22 < a9)
    {
      BOOL v24 = 0;
LABEL_34:
      unsigned int v33 = 0;
      goto LABEL_35;
    }
    BOOL v24 = (result & 0x3F) == 32;
    if ((a2 & 0x3F) != 0x20) {
      goto LABEL_34;
    }
    int v28 = (result - a5) * v19;
    int v29 = (a2 - a6) * v20;
    if ((result & 0x3F) == 0x20)
    {
      if (v28 < v29 || (int)result < a5 && a4 == a2 && a2 == a6)
      {
        unsigned int v132 = (a2 + 31) & 0xFFFFFFC0;
        int v142 = (result + 31) & 0xFFFFFFC0;
        unsigned int v154 = result;
        int v166 = a3 - result;
        int v126 = a4 - a2;
        int v30 = a8 + 1;
        uint64_t v31 = (((int)result + 31) >> 6);
        SET(*v22, v21, v15);
        if (a2 < a6) {
          OFF((uint64_t)*v22, v30, v31 + 1);
        }
        BOOL v24 = 1;
LABEL_83:
        unsigned int v33 = 1;
        uint64_t v15 = v31;
        uint64_t result = v154;
        LODWORD(v20) = v166;
        LODWORD(v19) = v126;
        unsigned int v18 = v132;
        int v14 = v142;
        goto LABEL_35;
      }
      BOOL v24 = 1;
      if (a4 > a2)
      {
        unsigned int v33 = 1;
        if (a2 <= a6) {
          goto LABEL_35;
        }
        unsigned int v158 = result;
        int v170 = a3 - result;
        uint64_t v77 = (((int)result + 31) >> 6);
        int v78 = a4 - a2;
        int v146 = (result + 31) & 0xFFFFFFC0;
        unsigned int v79 = (a2 + 31) & 0xFFFFFFC0;
        SET(*v22, v21, v15);
        unsigned int v18 = v79;
        int v14 = v146;
        uint64_t result = v158;
        LODWORD(v19) = v78;
        LODWORD(v20) = v170;
        uint64_t v15 = v77;
        BOOL v24 = 1;
      }
    }
    else
    {
      if (v28 < v29 || (int)result < a5 && a4 == a2 && a2 == a6)
      {
        unsigned int v132 = (a2 + 31) & 0xFFFFFFC0;
        int v142 = (result + 31) & 0xFFFFFFC0;
        unsigned int v154 = result;
        int v166 = a3 - result;
        int v126 = a4 - a2;
        int v51 = a8 + 1;
        uint64_t v31 = (((int)result + 31) >> 6);
        SET(*v22, v21, v15);
        if (a2 < a6) {
          OFF((uint64_t)*v22, v51, v31);
        }
        BOOL v24 = 0;
        goto LABEL_83;
      }
      BOOL v24 = 0;
      unsigned int v33 = 1;
      if (a4 <= a2 || a2 <= a6)
      {
LABEL_35:
        if (v17 != v16)
        {
          if (v178 == v15)
          {
            if (v23 <= a10) {
              unint64_t v34 = v23;
            }
            else {
              unint64_t v34 = a10 + 8;
            }
            for (uint64_t i = &v22[v33]; (unint64_t)i < v34; ++i)
            {
              if ((unint64_t)i >= a9)
              {
                uint64_t v36 = v15;
                uint64_t result = (uint64_t)SET(*i, v179, v15);
                uint64_t v15 = v36;
              }
            }
          }
          else
          {
            if (v33)
            {
              int v45 = v20 << 6;
              ++v16;
              ++v22;
            }
            else
            {
              int v45 = (v18 - a2 + 32) * v20;
            }
            int v63 = v19 << 6;
            if (v24) {
              int v64 = v15 + 1;
            }
            else {
              int v64 = v15;
            }
            if (!v24) {
              int v63 = v19 * (v14 - result + 32);
            }
            int v65 = v45 - v63;
            int v66 = v20 << 6;
            int v67 = -64 * v19;
            while (1)
            {
              while (v65 >= 1)
              {
                if (v64 == v178) {
                  return result;
                }
                ++v64;
                v65 += v67;
              }
              if (v17 == v16 || (unint64_t)v22 > a10) {
                break;
              }
              if ((unint64_t)v22 >= a9) {
                uint64_t result = (uint64_t)SET(*v22, v179, v64);
              }
              ++v22;
              ++v16;
              v65 += v66;
            }
          }
        }
        return result;
      }
      unsigned int v159 = result;
      int v171 = a3 - result;
      uint64_t v81 = (((int)result + 31) >> 6);
      int v82 = a4 - a2;
      int v147 = (result + 31) & 0xFFFFFFC0;
      unsigned int v83 = (a2 + 31) & 0xFFFFFFC0;
      SET(*v22, v21, v15);
      unsigned int v18 = v83;
      int v14 = v147;
      uint64_t result = v159;
      LODWORD(v19) = v82;
      LODWORD(v20) = v171;
      uint64_t v15 = v81;
      BOOL v24 = 0;
    }
    unsigned int v33 = 1;
    goto LABEL_35;
  }
  if ((int)v19 >= 1 && (int)v20 <= 0)
  {
    if ((unint64_t)v22 > a10 || v23 < a9) {
      return result;
    }
    if ((unint64_t)v22 < a9)
    {
      BOOL v25 = 0;
LABEL_54:
      unsigned int v41 = 0;
      goto LABEL_55;
    }
    BOOL v25 = (result & 0x3F) == 32;
    if ((a2 & 0x3F) != 0x20) {
      goto LABEL_54;
    }
    int v37 = (result - a5) * v19;
    int v38 = (a2 - a6) * v20;
    if ((result & 0x3F) == 0x20)
    {
      if (v37 < v38 || a3 == result && result == a5 && a2 < a6)
      {
        unsigned int v133 = (a2 + 31) & 0xFFFFFFC0;
        int v143 = (result + 31) & 0xFFFFFFC0;
        unsigned int v155 = result;
        int v167 = a3 - result;
        int v127 = a4 - a2;
        uint64_t v39 = (((int)result + 31) >> 6);
        SET(*v22, v21, v15);
        if (a2 < a6) {
          OFF((uint64_t)*v22, v179, v39 + 1);
        }
        BOOL v25 = 1;
        unsigned int v41 = 1;
        uint64_t v15 = v39;
LABEL_151:
        uint64_t result = v155;
        LODWORD(v20) = v167;
        LODWORD(v19) = v127;
        unsigned int v18 = v133;
        int v14 = v143;
        goto LABEL_55;
      }
      BOOL v25 = 1;
      if (a4 > a2)
      {
        unsigned int v41 = 1;
        if (a2 <= a6) {
          goto LABEL_55;
        }
        unsigned int v160 = result;
        int v172 = a3 - result;
        uint64_t v87 = (((int)result + 31) >> 6);
        int v88 = a4 - a2;
        unsigned int v136 = (a2 + 31) & 0xFFFFFFC0;
        int v148 = (result + 31) & 0xFFFFFFC0;
        SET(*v22, v21, v15);
        unsigned int v18 = v136;
        int v14 = v148;
        uint64_t result = v160;
        LODWORD(v20) = v172;
        LODWORD(v19) = v88;
        uint64_t v15 = v87;
        BOOL v25 = 1;
      }
    }
    else
    {
      if (v37 < v38 || a3 == result && result == a5 && a2 < a6)
      {
        unsigned int v133 = (a2 + 31) & 0xFFFFFFC0;
        int v143 = (result + 31) & 0xFFFFFFC0;
        unsigned int v155 = result;
        int v167 = a3 - result;
        unsigned int v125 = ((int)result + 31) >> 6;
        int v127 = a4 - a2;
        int v75 = a8 + 1;
        SET(*v22, v21, v15);
        if (a2 < a6) {
          OFF((uint64_t)*v22, v75, v125);
        }
        BOOL v25 = 0;
        unsigned int v41 = 1;
        uint64_t v15 = v125;
        goto LABEL_151;
      }
      BOOL v25 = 0;
      unsigned int v41 = 1;
      if (a4 <= a2 || a2 <= a6)
      {
LABEL_55:
        if (v17 != v16)
        {
          if (v178 != v15)
          {
            int v53 = (v18 - a2 + 32) * v20;
            int v54 = v20 << 6;
            if (v41)
            {
              ++v16;
              __int16 v55 = v22 + 1;
            }
            else
            {
              __int16 v55 = v22;
            }
            if (v41) {
              int v56 = v20 << 6;
            }
            else {
              int v56 = v53;
            }
            int v57 = v19 << 6;
            if (v25) {
              int v58 = v19 << 6;
            }
            else {
              int v58 = v19 * (result - v14 + 32);
            }
            int v59 = v56 + v58;
            if ((v12 & 0x3F) == 0x20) {
              int v60 = v178 + 1;
            }
            else {
              int v60 = v178;
            }
            while (1)
            {
              if (v59 <= 0)
              {
                if ((int)v15 <= v60) {
                  return result;
                }
                uint64_t v15 = (v15 - 1);
                int v62 = v57;
              }
              else
              {
                if (v16 == v17 || (unint64_t)v55 > a10) {
                  return result;
                }
                if ((unint64_t)v55 >= a9)
                {
                  uint64_t v61 = v15;
                  uint64_t result = (uint64_t)SET(*v55, v179, v15);
                  uint64_t v15 = v61;
                }
                ++v55;
                ++v16;
                int v62 = v54;
              }
              v59 += v62;
            }
          }
          if (v23 <= a10) {
            unint64_t v42 = v23;
          }
          else {
            unint64_t v42 = a10 + 8;
          }
          for (unsigned __int16 j = &v22[v41]; (unint64_t)j < v42; ++j)
          {
            if ((unint64_t)j >= a9)
            {
              uint64_t v44 = v15;
              uint64_t result = (uint64_t)SET(*j, v179, v15);
              uint64_t v15 = v44;
            }
          }
        }
        return result;
      }
      unsigned int v161 = result;
      int v173 = a3 - result;
      uint64_t v89 = (((int)result + 31) >> 6);
      int v90 = a4 - a2;
      unsigned int v137 = (a2 + 31) & 0xFFFFFFC0;
      int v149 = (result + 31) & 0xFFFFFFC0;
      SET(*v22, v21, v15);
      unsigned int v18 = v137;
      int v14 = v149;
      uint64_t result = v161;
      LODWORD(v20) = v173;
      LODWORD(v19) = v90;
      uint64_t v15 = v89;
      BOOL v25 = 0;
    }
    unsigned int v41 = 1;
    goto LABEL_55;
  }
  if ((int)v19 <= 0 && (v20 & 0x80000000) != 0)
  {
    if ((unint64_t)v22 < a9 || v23 > a10) {
      return result;
    }
    if ((unint64_t)v22 > a10)
    {
      BOOL v26 = 0;
LABEL_75:
      int v50 = 0;
      goto LABEL_170;
    }
    BOOL v26 = (result & 0x3F) == 32;
    if ((a2 & 0x3F) != 0x20) {
      goto LABEL_75;
    }
    int v46 = (result - a5) * v19;
    int v47 = (a2 - a6) * v20;
    if ((result & 0x3F) == 0x20)
    {
      if (v46 < v47 || (int)result > a5 && a4 == a2 && a2 == a6)
      {
        unsigned int v134 = (a2 + 31) & 0xFFFFFFC0;
        int v144 = (result + 31) & 0xFFFFFFC0;
        unsigned int v156 = result;
        int v168 = a3 - result;
        unsigned int v123 = ((int)result + 31) >> 6;
        int v128 = a4 - a2;
        OFF((uint64_t)*v22, v21, v15 + 1);
        if (a2 > a6)
        {
          uint64_t v49 = v123;
          SET(*v22, v179, v123);
          BOOL v26 = 1;
LABEL_145:
          int v50 = 1;
          uint64_t v15 = v49;
LABEL_169:
          uint64_t result = v156;
          LODWORD(v20) = v168;
          LODWORD(v19) = v128;
          unsigned int v18 = v134;
          int v14 = v144;
          goto LABEL_170;
        }
        BOOL v26 = 1;
        goto LABEL_168;
      }
      BOOL v26 = 1;
      if (a4 < a2)
      {
        int v50 = 1;
        if (a2 >= a6) {
          goto LABEL_170;
        }
        uint64_t v104 = (((int)result + 31) >> 6);
        unsigned int v162 = result;
        int v174 = a3 - result;
        int v130 = a4 - a2;
        unsigned int v138 = (a2 + 31) & 0xFFFFFFC0;
        int v150 = (result + 31) & 0xFFFFFFC0;
        OFF((uint64_t)*v22, v21, v15 + 1);
        unsigned int v18 = v138;
        int v14 = v150;
        uint64_t result = v162;
        LODWORD(v20) = v174;
        LODWORD(v19) = v130;
        uint64_t v15 = v104;
        BOOL v26 = 1;
      }
    }
    else
    {
      if (v46 < v47 || (int)result > a5 && a4 == a2 && a2 == a6)
      {
        unsigned int v134 = (a2 + 31) & 0xFFFFFFC0;
        int v144 = (result + 31) & 0xFFFFFFC0;
        unsigned int v156 = result;
        int v168 = a3 - result;
        unsigned int v123 = ((int)result + 31) >> 6;
        int v128 = a4 - a2;
        OFF((uint64_t)*v22, v21, v15);
        if (a2 > a6)
        {
          uint64_t v49 = v123;
          SET(*v22, v179, v123);
          BOOL v26 = 0;
          goto LABEL_145;
        }
        BOOL v26 = 0;
LABEL_168:
        int v50 = 1;
        uint64_t v15 = v123;
        goto LABEL_169;
      }
      BOOL v26 = 0;
      int v50 = 1;
      if (a4 >= a2 || a2 >= a6)
      {
LABEL_170:
        if (v17 != v16)
        {
          if (v178 == v15)
          {
            if ((v11 & 0x3F) == 0x20) {
              int v91 = v17 + 1;
            }
            else {
              int v91 = v17;
            }
            unint64_t v92 = a7 + 8 * v91;
            if (v92 >= a9) {
              unint64_t v93 = v92;
            }
            else {
              unint64_t v93 = a9;
            }
            for (uint64_t k = (uint64_t *)(v22 - 1); (unint64_t)k >= v93; --k)
            {
              if ((unint64_t)k <= a10)
              {
                uint64_t v95 = v15;
                uint64_t result = OFF(*k, v179, v15);
                uint64_t v15 = v95;
              }
            }
          }
          else
          {
            if (v50) {
              int v96 = -64;
            }
            else {
              int v96 = v18 - a2 - 32;
            }
            int v97 = v19 << 6;
            if (v26) {
              int v98 = v19 << 6;
            }
            else {
              int v98 = v19 * (result - v14 + 32);
            }
            int v99 = v98 + v96 * v20;
            int v100 = v20 << 6;
            if ((v11 & 0x3F) == 0x20) {
              ++v17;
            }
            if ((v12 & 0x3F) == 0x20) {
              int v101 = v178 + 1;
            }
            else {
              int v101 = v178;
            }
            while (1)
            {
              int v102 = (uint64_t *)(v22 - 1);
              while (v99 < 1)
              {
                if (v16 <= v17 || (unint64_t)v102 < a9) {
                  return result;
                }
                if ((unint64_t)v102 <= a10)
                {
                  uint64_t v103 = v15;
                  uint64_t result = OFF(*v102, v179, v15);
                  uint64_t v15 = v103;
                }
                v99 -= v100;
                --v102;
                --v16;
              }
              if ((int)v15 <= v101) {
                break;
              }
              int v22 = (__int16 **)(v102 + 1);
              uint64_t v15 = (v15 - 1);
              v99 += v97;
            }
          }
        }
        return result;
      }
      unsigned int v163 = result;
      int v175 = a3 - result;
      uint64_t v105 = (((int)result + 31) >> 6);
      int v131 = a4 - a2;
      unsigned int v139 = (a2 + 31) & 0xFFFFFFC0;
      int v151 = (result + 31) & 0xFFFFFFC0;
      OFF((uint64_t)*v22, v21, v15);
      unsigned int v18 = v139;
      int v14 = v151;
      uint64_t result = v163;
      LODWORD(v20) = v175;
      LODWORD(v19) = v131;
      uint64_t v15 = v105;
      BOOL v26 = 0;
    }
    int v50 = 1;
    goto LABEL_170;
  }
  if ((v19 & 0x80000000) == 0 || (v20 & 0x80000000) != 0 || (unint64_t)v22 < a9 || v23 > a10) {
    return result;
  }
  if ((unint64_t)v22 > a10)
  {
    __int16 v27 = 0;
LABEL_128:
    int v74 = 0;
    goto LABEL_214;
  }
  __int16 v27 = (result & 0x3F) == 32;
  if ((a2 & 0x3F) != 0x20) {
    goto LABEL_128;
  }
  int v68 = (result - a5) * v19;
  int v69 = (a2 - a6) * v20;
  if ((result & 0x3F) == 0x20)
  {
    if (v68 < v69 || a3 == result && result == a5 && a2 > a6)
    {
      unsigned int v135 = (a2 + 31) & 0xFFFFFFC0;
      int v145 = (result + 31) & 0xFFFFFFC0;
      unsigned int v157 = result;
      unsigned int v169 = a3 - result;
      int v124 = ((int)result + 31) >> 6;
      unsigned int v129 = a4 - a2;
      int v70 = a8 + 1;
      OFF((uint64_t)*v22, v21, v15 + 1);
      if (a2 > a6)
      {
        int v72 = v70;
        int v73 = v124;
        SET(*v22, v72, v124);
        __int16 v27 = 1;
LABEL_158:
        int v74 = 1;
        LODWORD(v15) = v73;
LABEL_213:
        uint64_t result = v157;
        uint64_t v20 = v169;
        uint64_t v19 = v129;
        unsigned int v18 = v135;
        int v14 = v145;
        goto LABEL_214;
      }
      __int16 v27 = 1;
      goto LABEL_212;
    }
    __int16 v27 = 1;
    if (a4 < a2)
    {
      int v74 = 1;
      if (a2 >= a6) {
        goto LABEL_214;
      }
      int v119 = ((int)result + 31) >> 6;
      unsigned int v164 = result;
      unsigned int v176 = a3 - result;
      uint64_t v120 = (a4 - a2);
      unsigned int v140 = (a2 + 31) & 0xFFFFFFC0;
      int v152 = (result + 31) & 0xFFFFFFC0;
      OFF((uint64_t)*v22, v21, v15 + 1);
      unsigned int v18 = v140;
      int v14 = v152;
      uint64_t result = v164;
      uint64_t v20 = v176;
      uint64_t v19 = v120;
      LODWORD(v15) = v119;
      __int16 v27 = 1;
    }
    goto LABEL_254;
  }
  if (v68 < v69 || a3 == result && result == a5 && a2 > a6)
  {
    unsigned int v135 = (a2 + 31) & 0xFFFFFFC0;
    int v145 = (result + 31) & 0xFFFFFFC0;
    unsigned int v157 = result;
    unsigned int v169 = a3 - result;
    int v124 = ((int)result + 31) >> 6;
    unsigned int v129 = a4 - a2;
    int v84 = a8 + 1;
    OFF((uint64_t)*v22, v21, v15);
    if (a2 > a6)
    {
      int v86 = v84;
      int v73 = v124;
      SET(*v22, v86, v124);
      __int16 v27 = 0;
      goto LABEL_158;
    }
    __int16 v27 = 0;
LABEL_212:
    int v74 = 1;
    LODWORD(v15) = v124;
    goto LABEL_213;
  }
  __int16 v27 = 0;
  int v74 = 1;
  if (a4 < a2 && a2 < a6)
  {
    unsigned int v165 = result;
    unsigned int v177 = a3 - result;
    int v121 = ((int)result + 31) >> 6;
    uint64_t v122 = (a4 - a2);
    unsigned int v141 = (a2 + 31) & 0xFFFFFFC0;
    int v153 = (result + 31) & 0xFFFFFFC0;
    OFF((uint64_t)*v22, v21, v15);
    unsigned int v18 = v141;
    int v14 = v153;
    uint64_t result = v165;
    uint64_t v20 = v177;
    uint64_t v19 = v122;
    LODWORD(v15) = v121;
    __int16 v27 = 0;
LABEL_254:
    int v74 = 1;
  }
LABEL_214:
  if (v17 != v16)
  {
    if (v178 != v15)
    {
      if (v74) {
        int v111 = -64;
      }
      else {
        int v111 = v18 - a2 - 32;
      }
      int v112 = v111 * v20;
      if (v27) {
        int v113 = v15 + 1;
      }
      else {
        int v113 = v15;
      }
      if (v27) {
        int v114 = v19 << 6;
      }
      else {
        int v114 = v19 * (v14 - result + 32);
      }
      int v115 = v112 - v114;
      if ((v11 & 0x3F) == 0x20) {
        ++v17;
      }
      while (1)
      {
        if (v115 <= 0)
        {
          if (v113 == v178) {
            return result;
          }
          ++v113;
          int v116 = v19;
        }
        else
        {
          if (v16 <= v17) {
            return result;
          }
          if ((unint64_t)--v22 < a9) {
            return result;
          }
          --v16;
          if ((unint64_t)v22 <= a10)
          {
            uint64_t v117 = v20;
            uint64_t v118 = v19;
            uint64_t result = OFF((uint64_t)*v22, v179, v113);
            uint64_t v19 = v118;
            uint64_t v20 = v117;
            int v116 = v117;
          }
          else
          {
            int v116 = v20;
          }
        }
        v115 -= v116 << 6;
      }
    }
    if ((v11 & 0x3F) == 0x20) {
      int v106 = v17 + 1;
    }
    else {
      int v106 = v17;
    }
    unint64_t v107 = a7 + 8 * v106;
    if (v107 >= a9) {
      unint64_t v108 = v107;
    }
    else {
      unint64_t v108 = a9;
    }
    int v109 = (uint64_t *)(v22 - 1);
    if ((unint64_t)(v22 - 1) >= v108)
    {
      __int16 v110 = v15 + v27;
      do
      {
        if ((unint64_t)v109 <= a10) {
          uint64_t result = OFF(*v109, v179, v110);
        }
        --v109;
      }
      while ((unint64_t)v109 >= v108);
    }
  }
  return result;
}

__int16 *SET(__int16 *result, int a2, __int16 a3)
{
  uint64_t v3 = *result + 1;
  *uint64_t result = v3;
  if (v3 != (__int16)v3 || (__int16)v3 >= a2)
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  result[v3] = a3;
  return result;
}

uint64_t OFF(uint64_t result, int a2, __int16 a3)
{
  uint64_t v3 = (__int16 *)(result + 2 * a2);
  int v4 = *v3;
  int v5 = ++*v3;
  if (v4 + 1 == (__int16)(v4 + 1))
  {
    BOOL v7 = __OFSUB__(v5, a2);
    BOOL v6 = v5 - a2 < 0;
  }
  else
  {
    BOOL v7 = 0;
    BOOL v6 = 0;
  }
  if (v6 == v7)
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  v3[~v4] = a3;
  return result;
}

void sc_FindExtrema4(uint64_t a1, __int16 *a2, int a3, memoryContext **a4)
{
  int v5 = a2[20];
  int v6 = a2[21];
  int v73 = *a4;
  int v69 = a2[22];
  int v70 = a2[23];
  int v7 = v70 - v6 + 1;
  int v71 = v69 - v5;
  if (a3) {
    int v8 = v69 - v5 + 1;
  }
  else {
    int v8 = 0;
  }
  int v9 = v7 + v8;
  uint64_t v10 = ScalerNewScratch(*a4, 2 * (v7 + v8), 1);
  unsigned int v74 = v70 - v6 + 1;
  char v11 = (__int16 *)v10 + v7;
  v93[0] = MEMORY[0x1E4F143A8];
  v93[1] = 0x40000000;
  int v94 = ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke;
  uint64_t v95 = &__block_descriptor_tmp_7;
  char v12 = v10;
  int v96 = v10;
  int v97 = (char *)v10 + 2 * v9;
  int v13 = *(_DWORD *)a1;
  int v75 = (char *)v10;
  if (*(int *)a1 < 1)
  {
    int v54 = ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke;
  }
  else
  {
    uint64_t v14 = 0;
    int v90 = (char *)v10 - 2 * v6;
    uint64_t v15 = *(void *)(a1 + 24);
    uint64_t v16 = *(void *)(a1 + 32);
    uint64_t v87 = &v11[-v5];
    int v78 = v11;
    int v76 = v6;
    int v77 = v5;
    uint64_t v85 = a1;
    do
    {
      uint64_t v17 = *(unsigned __int16 *)(v16 + 2 * v14);
      uint64_t v18 = *(unsigned __int16 *)(v15 + 2 * v14);
      if (v18 != v17)
      {
        uint64_t v19 = *(void *)(a1 + 8);
        uint64_t v20 = *(void *)(a1 + 16);
        int v21 = (int *)(v19 + 4 * v18);
        int v22 = (int *)(v20 + 4 * v18);
        if (*v21 == *(_DWORD *)(v19 + 4 * *(unsigned __int16 *)(v16 + 2 * v14)) && *v22 == *(_DWORD *)(v20 + 4 * v17))
        {
          LODWORD(v17) = v17 - 1;
          *(unsigned char *)(*(void *)(a1 + 40) + v18) |= 1u;
        }
        int v81 = v17;
        uint64_t v82 = v14;
        if ((int)v17 >= (int)v18)
        {
          uint64_t v23 = 0;
          int v24 = v21[v17 - v18];
          int v25 = (v24 + 31) >> 6;
          int v26 = v22[v17 - v18];
          int v27 = (v26 + 31) >> 6;
          uint64_t v89 = (v17 + 1);
          uint64_t v83 = v19 + 4 * v18 - 8;
          uint64_t v84 = v20 + 4 * v18 - 8;
          int v79 = 1 - v18;
          uint64_t v28 = v18;
          uint64_t v80 = v18;
          int v86 = v18;
          do
          {
            int v29 = v26;
            int v26 = *v22;
            int v30 = (*v22 + 31) >> 6;
            int v31 = *v21;
            int v32 = (__int16 *)&v90[2 * v27];
            int v91 = v22 + 1;
            unint64_t v92 = v21 + 1;
            if (*v22 <= v29)
            {
              if (v26 >= v29)
              {
                if (v31 == v24)
                {
                  uint64_t v42 = *(void *)(v85 + 40);
                  *(unsigned char *)(v42 + v28) |= 1u;
                  if ((int)v28 - v86 - 2 >= 0)
                  {
                    uint64_t v43 = v42 + v80 - 2;
                    uint64_t v44 = v23;
                    do
                    {
                      *(_DWORD *)(v83 + 4 * v44 + 4) = *(_DWORD *)(v83 + 4 * v44);
                      *(_DWORD *)(v84 + 4 * v44 + 4) = *(_DWORD *)(v84 + 4 * v44);
                      *(unsigned char *)(v43 + v44 + 1) = *(unsigned char *)(v43 + v44);
                      --v44;
                    }
                    while (v79 + v86 != v44);
                  }
                  ++v86;
                }
              }
              else
              {
                int v32 = (__int16 *)&v90[2 * v30];
                int v38 = v94((uint64_t)v93, (unint64_t)v32, v27 - v30);
                if (v27 != v30 && v38 != 0)
                {
                  int v40 = v30 - v27;
                  do
                  {
                    unsigned int v41 = v32++;
                    ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v41, 1);
                    BOOL v37 = __CFADD__(v40++, 1);
                  }
                  while (!v37);
                }
              }
            }
            else
            {
              int v33 = v94((uint64_t)v93, (unint64_t)v32, v30 - v27);
              if (v30 != v27 && v33 != 0)
              {
                int v35 = v27 - v30;
                do
                {
                  uint64_t v36 = v32++;
                  ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v36, 1);
                  BOOL v37 = __CFADD__(v35++, 1);
                }
                while (!v37);
              }
            }
            int v27 = v30;
            if ((v26 & 0x3F) == 0x20 && v94((uint64_t)v93, (unint64_t)v32, 1u)) {
              ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v32, 2);
            }
            int v45 = (v31 + 31) >> 6;
            if (a3)
            {
              int v46 = &v87[v25];
              if (v31 <= v24)
              {
                if (v31 < v24)
                {
                  int v50 = &v87[v45];
                  int v51 = v94((uint64_t)v93, (unint64_t)v50, v25 - v45);
                  if (v25 == v45 || !v51)
                  {
                    int v46 = &v87[v45];
                  }
                  else
                  {
                    int v52 = v45 - v25;
                    do
                    {
                      int v46 = v50 + 1;
                      ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v50++, 1);
                      BOOL v37 = __CFADD__(v52++, 1);
                    }
                    while (!v37);
                  }
                }
              }
              else
              {
                int v47 = v94((uint64_t)v93, (unint64_t)&v87[v25], v45 - v25);
                if (v45 != v25 && v47)
                {
                  int v48 = v25 - v45;
                  uint64_t v49 = &v87[v25];
                  do
                  {
                    int v46 = v49 + 1;
                    ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v49, 1);
                    uint64_t v49 = v46;
                    BOOL v37 = __CFADD__(v48++, 1);
                  }
                  while (!v37);
                }
              }
              if ((v31 & 0x3F) == 0x20) {
                ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(v46, 2);
              }
            }
            ++v28;
            ++v23;
            int v25 = (v31 + 31) >> 6;
            int v24 = v31;
            int v22 = v91;
            int v21 = v92;
          }
          while (v28 != v89);
        }
        else
        {
          int v86 = v18;
        }
        uint64_t v14 = v82;
        __int16 v53 = v86;
        if (v86 >= v81) {
          __int16 v53 = v81;
        }
        a1 = v85;
        uint64_t v15 = *(void *)(v85 + 24);
        uint64_t v16 = *(void *)(v85 + 32);
        *(_WORD *)(v15 + 2 * v82) = v53;
        *(_WORD *)(v16 + 2 * v82) = v81;
        int v13 = *(_DWORD *)v85;
        char v11 = v78;
        int v6 = v76;
        int v5 = v77;
      }
      ++v14;
    }
    while (v14 < v13);
    int v54 = v94;
    char v12 = v75;
  }
  int v55 = v54((uint64_t)v93, (unint64_t)v12, v74);
  int v56 = 0;
  if (v74 && v55)
  {
    int v56 = 0;
    int v57 = ~v70 + v6;
    int v58 = v75;
    do
    {
      int v60 = *(__int16 *)v58;
      v58 += 2;
      int v59 = v60;
      if (v56 <= v60) {
        int v56 = v59;
      }
      BOOL v37 = __CFADD__(v57++, 1);
    }
    while (!v37);
  }
  if (!a3 || !v94((uint64_t)v93, (unint64_t)v11, v71 + 1) || v71 == -1)
  {
    BOOL v66 = v56 == 0;
    int v67 = a2;
    int v63 = v73;
LABEL_82:
    LOWORD(v61) = 2;
    goto LABEL_83;
  }
  int v61 = 0;
  int v62 = ~v69 + v5;
  int v63 = v73;
  do
  {
    __int16 v64 = *v11++;
    int v65 = v64;
    if (v61 <= v64) {
      int v61 = v65;
    }
    BOOL v37 = __CFADD__(v62++, 1);
  }
  while (!v37);
  BOOL v66 = v56 == 0;
  int v67 = a2;
  if (!v61) {
    goto LABEL_82;
  }
LABEL_83:
  v67[24] = v61;
  if (v66) {
    __int16 v68 = 2;
  }
  else {
    __int16 v68 = v56;
  }
  v67[25] = v68;
  ScalerDisposeBlock(v63, v75, -1);
}

uint64_t ___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke(uint64_t a1, unint64_t a2, unsigned int a3)
{
  if ((a3 & 0x80000000) != 0
    || *(void *)(a1 + 32) > a2
    || ((v3 = *(void *)(a1 + 40), unint64_t v4 = a2 + 2 * a3, v3 >= a2) ? (v5 = v4 >= v3, v6 = v4 == v3) : (v5 = 1, v6 = 0),
        !v6 && v5))
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return 1;
}

__int16 *___Z15sc_FindExtrema4P15fnt_ElementTypeP13sc_BitMapDataiP13fsg_SplineKey_block_invoke_2(__int16 *result, int a2)
{
  int v2 = *result + a2;
  *result += a2;
  if (v2 != (__int16)v2)
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return result;
}

__int16 *sortTransitions(__int16 *a1, int a2)
{
  if (*a1 >= 2) {
    std::__sort<std::__less<short,short> &,short *>();
  }
  unint64_t v4 = &a1[a2];
  if (*v4 >= 2) {
    std::__sort<std::__less<short,short> &,short *>();
  }
  return v4 + 1;
}

uint64_t nUpperXings(__int16 **a1, __int16 **a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9)
{
  if (a3 >= a9)
  {
    uint64_t result = 0;
  }
  else
  {
    int v9 = a1[a3 + 1];
    unint64_t v10 = (unint64_t)v9;
    while (1)
    {
      if (v10 >= (unint64_t)&v9[*v9])
      {
LABEL_6:
        uint64_t result = 0;
        goto LABEL_9;
      }
      int v11 = *(unsigned __int16 *)(v10 + 2);
      if (v11 == (unsigned __int16)a4) {
        break;
      }
      v10 += 2;
      if ((__int16)v11 > a4) {
        goto LABEL_6;
      }
    }
    uint64_t result = 1;
LABEL_9:
    int v13 = &v9[a5];
    uint64_t v15 = v13[1];
    uint64_t v14 = v13 + 1;
    uint64_t v16 = &v14[-v15];
    while (v14 > v16)
    {
      int v17 = (unsigned __int16)*(v14 - 1);
      if (v17 == (unsigned __int16)a4)
      {
        if (result) {
          return 2;
        }
        uint64_t result = 1;
        break;
      }
      --v14;
      if ((__int16)v17 < a4) {
        break;
      }
    }
  }
  if (a4 > a7)
  {
    int v18 = (__int16)(a3 + 1);
    uint64_t v19 = a2[a4 - 1];
    unint64_t v20 = (unint64_t)v19;
    while (1)
    {
      if (v20 >= (unint64_t)&v19[*v19])
      {
LABEL_22:
        int v22 = 0;
        goto LABEL_24;
      }
      int v21 = *(unsigned __int16 *)(v20 + 2);
      if (v21 == (unsigned __int16)v18) {
        break;
      }
      v20 += 2;
      if ((__int16)v21 > v18) {
        goto LABEL_22;
      }
    }
    int v22 = 1;
LABEL_24:
    uint64_t v23 = &v19[a6];
    uint64_t v25 = v23[1];
    int v24 = v23 + 1;
    int v26 = &v24[-v25];
    while (v24 > v26)
    {
      int v27 = (unsigned __int16)*(v24 - 1);
      if (v27 == (unsigned __int16)v18)
      {
        ++v22;
        break;
      }
      --v24;
      if ((__int16)v27 < v18) {
        break;
      }
    }
    uint64_t result = (v22 + result);
  }
  if (a4 < a8 && (int)result <= 1)
  {
    int v28 = (__int16)(a3 + 1);
    int v29 = a2[a4];
    unint64_t v30 = (unint64_t)v29;
    while (1)
    {
      if (v30 >= (unint64_t)&v29[*v29])
      {
LABEL_37:
        int v32 = 0;
        goto LABEL_39;
      }
      int v31 = *(unsigned __int16 *)(v30 + 2);
      if (v31 == (unsigned __int16)v28) {
        break;
      }
      v30 += 2;
      if ((__int16)v31 > v28) {
        goto LABEL_37;
      }
    }
    int v32 = 1;
LABEL_39:
    int v33 = &v29[a6];
    uint64_t v35 = v33[1];
    unint64_t v34 = v33 + 1;
    uint64_t v36 = &v34[-v35];
    while (v34 > v36)
    {
      int v37 = (unsigned __int16)*(v34 - 1);
      if (v37 == (unsigned __int16)v28) {
        return (++v32 + result);
      }
      --v34;
      if ((__int16)v37 < v28) {
        return (v32 + result);
      }
    }
    return (v32 + result);
  }
  return result;
}

uint64_t nLowerXings(__int16 **a1, __int16 **a2, int a3, int a4, int a5, int a6, int a7, int a8, __int16 a9)
{
  if (a3 <= a9)
  {
    uint64_t result = 0;
  }
  else
  {
    int v9 = a1[a3 - 1];
    unint64_t v10 = (unint64_t)v9;
    while (1)
    {
      if (v10 >= (unint64_t)&v9[*v9])
      {
LABEL_6:
        uint64_t result = 0;
        goto LABEL_9;
      }
      int v11 = *(unsigned __int16 *)(v10 + 2);
      if (v11 == (unsigned __int16)a4) {
        break;
      }
      v10 += 2;
      if ((__int16)v11 > a4) {
        goto LABEL_6;
      }
    }
    uint64_t result = 1;
LABEL_9:
    int v13 = &v9[a5];
    uint64_t v15 = v13[1];
    uint64_t v14 = v13 + 1;
    uint64_t v16 = &v14[-v15];
    while (v14 > v16)
    {
      int v17 = (unsigned __int16)*(v14 - 1);
      if (v17 == (unsigned __int16)a4)
      {
        if (result) {
          return 2;
        }
        uint64_t result = 1;
        break;
      }
      --v14;
      if ((__int16)v17 < a4) {
        break;
      }
    }
  }
  if (a4 > a7)
  {
    int v18 = a2[a4 - 1];
    unint64_t v19 = (unint64_t)v18;
    while (1)
    {
      if (v19 >= (unint64_t)&v18[*v18])
      {
LABEL_22:
        int v21 = 0;
        goto LABEL_24;
      }
      int v20 = *(unsigned __int16 *)(v19 + 2);
      if (v20 == (unsigned __int16)a3) {
        break;
      }
      v19 += 2;
      if ((__int16)v20 > a3) {
        goto LABEL_22;
      }
    }
    int v21 = 1;
LABEL_24:
    int v22 = &v18[a6];
    uint64_t v24 = v22[1];
    uint64_t v23 = v22 + 1;
    uint64_t v25 = &v23[-v24];
    while (v23 > v25)
    {
      int v26 = (unsigned __int16)*(v23 - 1);
      if (v26 == (unsigned __int16)a3)
      {
        ++v21;
        break;
      }
      --v23;
      if ((__int16)v26 < a3) {
        break;
      }
    }
    uint64_t result = (v21 + result);
  }
  if (a4 < a8 && (int)result <= 1)
  {
    int v27 = a2[a4];
    unint64_t v28 = (unint64_t)v27;
    while (1)
    {
      if (v28 >= (unint64_t)&v27[*v27])
      {
LABEL_37:
        int v30 = 0;
        goto LABEL_39;
      }
      int v29 = *(unsigned __int16 *)(v28 + 2);
      if (v29 == (unsigned __int16)a3) {
        break;
      }
      v28 += 2;
      if ((__int16)v29 > a3) {
        goto LABEL_37;
      }
    }
    int v30 = 1;
LABEL_39:
    int v31 = &v27[a6];
    uint64_t v33 = v31[1];
    int v32 = v31 + 1;
    unint64_t v34 = &v32[-v33];
    while (v32 > v34)
    {
      int v35 = (unsigned __int16)*(v32 - 1);
      if (v35 == (unsigned __int16)a3) {
        return (++v30 + result);
      }
      --v32;
      if ((__int16)v35 < a3) {
        return (v30 + result);
      }
    }
    return (v30 + result);
  }
  return result;
}

uint64_t FPRMNewMappedRefFromMappedFork(unsigned int *a1, uint64_t a2, void *a3)
{
  if (a2 < 70) {
    return 4294967246;
  }
  int v4 = a2;
  uint64_t v6 = CheckMapHeaderCommon(a1, a2);
  if (v6) {
    return v6;
  }
  *a3 = 0;
  int v7 = malloc_type_malloc(0x38uLL, 0x10300402A82DD23uLL);
  if (!v7) {
    return 4294967188;
  }
  int v8 = v7;
  *int v7 = -1;
  v7[1] = v4;
  *((unsigned char *)v7 + 48) = 1;
  unsigned int v9 = a1[2];
  v7[6] = bswap32(a1[3]);
  unsigned int v10 = a1[1];
  *((void *)v7 + 4) = (char *)a1 + bswap32(*a1);
  uint64_t v11 = (uint64_t)a1 + bswap32(v10);
  *((void *)v7 + 1) = a1;
  *((void *)v7 + 2) = v11;
  v7[10] = bswap32(v9);
  uint64_t v12 = CheckMapCommon(a1, v11);
  if (v12) {
    free(v8);
  }
  else {
    *a3 = v8;
  }
  return v12;
}

uint64_t CheckMapHeaderCommon(unsigned int *a1, unsigned int a2)
{
  unsigned int v2 = bswap32(a1[1]);
  if (v2 > a2 - 30 || v2 - 0x1000000 < 0xFF000028) {
    return -199;
  }
  unsigned int v4 = bswap32(a1[3]);
  if (v4 - 131357 < 0xFFFDFF01) {
    return -199;
  }
  unint64_t v5 = a2 - 40;
  if (v5 < v4) {
    return -199;
  }
  unsigned int v6 = v4 + v2;
  if (v4 + v2 > a2) {
    return -199;
  }
  unsigned int v7 = bswap32(*a1);
  __int16 v8 = -199;
  if (v7 >= 0x28 && v7 <= a2)
  {
    unsigned int v9 = a1[2];
    unint64_t v10 = bswap32(v9);
    if (v5 >= v10 && !BYTE3(v10) && v10 + v7 <= a2)
    {
      if (v2 > v7)
      {
        if (v10 + v7 > v2) {
          return v8;
        }
        return 0;
      }
      if (v2 < v7)
      {
        if (v6 > v7) {
          return v8;
        }
        return 0;
      }
      if (!v9) {
        return 0;
      }
    }
  }
  return v8;
}

uint64_t CheckMapCommon(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = bswap32(a1[3]);
  unsigned int v3 = bswap32(a1[2]);
  unsigned int v4 = v3 + bswap32(*a1);
  unsigned int v5 = bswap32(a1[1]) + v2;
  if (v4 > v5) {
    unsigned int v5 = v4;
  }
  if (v5 > 0xFFFFFE) {
    return -199;
  }
  unsigned int v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 & 0x100) != 0) {
    return -199;
  }
  unint64_t v7 = a2 + v2;
  __int16 v8 = (unsigned __int16 *)(a2 + __rev16(v6));
  unsigned int v9 = v8 + 1;
  if ((unint64_t)(v8 + 1) > v7) {
    return -199;
  }
  unsigned int v10 = bswap32(*v8) >> 16;
  unsigned __int16 v11 = v10 + 1;
  __int16 v12 = -199;
  if ((((_WORD)v10 + 1) & 0x8000) == 0 && (unint64_t)&v9[4 * (__int16)v11] <= v7)
  {
    unsigned int v13 = *(unsigned __int16 *)(a2 + 26);
    if (v13 == 0xFFFF)
    {
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v14 = a2 + __rev16(v13);
      if (v14 > v7) {
        return v12;
      }
    }
    if (v10 <= 0x7FFE)
    {
      uint64_t v15 = 0;
      LOWORD(v16) = 0;
      unsigned int v17 = v3 - 4;
LABEL_14:
      int v18 = &v9[4 * v15];
      unsigned int v19 = bswap32(v18[2]);
      int v20 = HIWORD(v19) + 1;
      int v21 = (unsigned __int16)(HIWORD(v19) + 1);
      if (v21 == v20)
      {
        int v22 = (char *)v8 + (bswap32(v18[3]) >> 16);
        if ((unint64_t)&v22[12 * v21] <= v7)
        {
          __int16 v23 = 0;
          while (1)
          {
            unsigned int v24 = *(unsigned __int16 *)&v22[12 * v23 + 2];
            if (v24 != 0xFFFF)
            {
              if (!v14) {
                break;
              }
              uint64_t v25 = (unsigned __int8 *)(v14 + __rev16(v24));
              if ((unint64_t)v25 >= v7 || (unint64_t)&v25[*v25 + 1] > v7) {
                break;
              }
            }
            if (bswap32(*(_DWORD *)&v22[12 * v23 + 4] & 0xFFFFFF00) > v17) {
              break;
            }
            if (v21 <= ++v23)
            {
              int v16 = v21 + (__int16)v16;
              __int16 v12 = -199;
              if (v16 != v16 << 15 >> 15 || (v16 & 0x1FFFF) != ((__int16)v16 & 0x1FFFF)) {
                return v12;
              }
              if (++v15 != v11) {
                goto LABEL_14;
              }
              return 0;
            }
          }
        }
      }
      return -199;
    }
    return 0;
  }
  return v12;
}

unsigned int *GetResourcePtrCommon(unsigned int *result, int a2, unsigned __int16 a3, int a4, void *a5, int *a6, unsigned __int8 *a7, unsigned char *a8)
{
  if (!result) {
    return result;
  }
  __int16 v8 = result;
  uint64_t v9 = *((void *)result + 2);
  uint64_t v10 = bswap32(*(unsigned __int16 *)(v9 + 24)) >> 16;
  unsigned int v11 = bswap32(*(unsigned __int16 *)(v9 + v10)) >> 16;
  if (v11 > 0x7FFE) {
    return 0;
  }
  uint64_t v15 = v9 + (bswap32(*(unsigned __int16 *)(v9 + 26)) >> 16);
  int v16 = (unsigned __int16)(v11 + 1);
  for (uint64_t i = (unsigned __int16 *)(v10 + v9 + 6); bswap32(*((_DWORD *)i - 1)) != a2; i += 4)
  {
    if (!--v16) {
      return 0;
    }
  }
  unsigned int v18 = (bswap32(*i) >> 16) + 1;
  int v19 = a4 - 1;
  int v20 = (_DWORD *)((bswap32(i[1]) >> 16) + v10 + v9 + 4);
  while (!a7)
  {
    if (a4 == -1)
    {
      if (bswap32(*((unsigned __int16 *)v20 - 2)) >> 16 == a3) {
        goto LABEL_20;
      }
    }
    else if (!v19)
    {
      goto LABEL_20;
    }
LABEL_17:
    --v19;
    v20 += 3;
    if (!--v18) {
      return 0;
    }
  }
  unsigned int v21 = *((unsigned __int16 *)v20 - 1);
  if (v21 == 0xFFFF) {
    goto LABEL_17;
  }
  int v22 = (unsigned __int8 *)(v15 + __rev16(v21));
  unsigned int v23 = *a7;
  if (v23 != *v22 || TextCompare(a7 + 1, v22 + 1, v23, *a7, 0, 1)) {
    goto LABEL_17;
  }
LABEL_20:
  unsigned int v24 = *v20 & 0xFFFFFF00;
  if (a6) {
    *a6 = (int)bswap32(*((unsigned __int16 *)v20 - 2)) >> 16;
  }
  unsigned int v25 = bswap32(v24);
  if (a8)
  {
    unsigned int v26 = *((unsigned __int16 *)v20 - 1);
    if (v26 == 0xFFFF)
    {
      *a8 = 0;
    }
    else
    {
      int v27 = (unsigned __int8 *)(v15 + __rev16(v26));
      memmove(a8, v27, *v27 + 1);
    }
  }
  unint64_t v28 = v8[10];
  if (v25 > v28) {
    return 0;
  }
  int v29 = (unsigned int *)(*((void *)v8 + 4) + v25);
  signed int v30 = bswap32(*v29);
  uint64_t v31 = v30 >= 0 ? v30 : -(uint64_t)v30;
  if (v31 + (unint64_t)v25 > v28) {
    return 0;
  }
  char v32 = *(unsigned char *)v20;
  uint64_t result = v29 + 1;
  if (a5) {
    *a5 = v30;
  }
  if ((v32 & 1) != 0 && *result == 1919262632) {
    return 0;
  }
  return result;
}

uint64_t FPRMGetResourceCount(uint64_t result, int a2)
{
  if (result)
  {
    uint64_t v2 = *(void *)(result + 16);
    uint64_t v3 = bswap32(*(unsigned __int16 *)(v2 + 24)) >> 16;
    unsigned int v4 = bswap32(*(unsigned __int16 *)(v2 + v3)) >> 16;
    if (v4 > 0x7FFE)
    {
      return 0;
    }
    else
    {
      int v5 = (unsigned __int16)(v4 + 1);
      for (uint64_t i = (unsigned __int16 *)(v3 + v2 + 6); bswap32(*((_DWORD *)i - 1)) != a2; i += 4)
      {
        if (!--v5) {
          return 0;
        }
      }
      return (bswap32(*i) >> 16) + 1;
    }
  }
  return result;
}

BOOL THierVariationsFont::IsHierVariationsFont(THierVariationsFont *this, const TSFNTFont *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  qmemcpy(v6, "lgvhdaehaehhxtmhpxam", sizeof(v6));
  BOOL HasTableTags = TSFNTFont::HasTableTags(this, (uint64_t)v6, 5);
  if (HasTableTags) {
    TTrueTypeFont::ThrowIfInvalid(this, v3);
  }
  return HasTableTags;
}

void HierVariationsFontCreate(const TFileDataSurrogate *a1)
{
}

void sub_1B5355FDC(_Unwind_Exception *a1, int a2)
{
  unsigned int v6 = v4;
  TDataReference::~TDataReference(v6);
  TFileDataSurrogate::~TFileDataSurrogate(v3);
  TSFNTFont::~TSFNTFont(v2);
  MEMORY[0x1BA9994D0](v2, 0x10F1C405421BE5ALL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  _Unwind_Resume(a1);
}

void THierVariationsDataForkFont::~THierVariationsDataForkFont(THierVariationsDataForkFont *this)
{
  *(void *)this = &unk_1F0E01188;
  *((void *)this + 2) = &unk_1F0E01398;
  uint64_t v2 = *((void *)this + 32);
  *((void *)this + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  TDataReference::~TDataReference((THierVariationsDataForkFont *)((char *)this + 224));
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 25);
  TSFNTFont::~TSFNTFont(this);
}

{
  uint64_t vars8;

  THierVariationsDataForkFont::~THierVariationsDataForkFont(this);
  JUMPOUT(0x1BA9994D0);
}

void non-virtual thunk to'THierVariationsDataForkFont::~THierVariationsDataForkFont(THierVariationsDataForkFont *this)
{
}

{
  uint64_t vars8;

  THierVariationsDataForkFont::~THierVariationsDataForkFont((THierVariationsDataForkFont *)((char *)this - 16));
  JUMPOUT(0x1BA9994D0);
}

uint64_t THierVariationsDataForkFont::GetRefCon(THierVariationsDataForkFont *this)
{
  return *((unsigned int *)this + 54);
}

uint64_t THierVariationsDataForkFont::GetFontRef(THierVariationsDataForkFont *this)
{
  return (uint64_t)this + 200;
}

void THierVariationsFontHandler::~THierVariationsFontHandler(THierVariationsFontHandler *this)
{
  *(void *)this = &unk_1F0E00F60;
  if (*((unsigned char *)this + 568)) {
    MEMORY[0x1BA9993B0]((char *)this + 144);
  }
  std::vector<unsigned int,TInlineBufferAllocator<unsigned int,2ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)this + 96);
  *(void *)this = &unk_1F0E00088;
  TDataReference::~TDataReference((THierVariationsFontHandler *)((char *)this + 16));
}

{
  uint64_t vars8;

  THierVariationsFontHandler::~THierVariationsFontHandler(this);
  JUMPOUT(0x1BA9994D0);
}

void THierVariationsDataForkFont::MakeHandler()
{
}

void sub_1B5356444(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10F1C40F8E32245);
  _Unwind_Resume(a1);
}

void THierVariationsFontDataHandler::~THierVariationsFontDataHandler(THierVariationsFontDataHandler *this)
{
  THierVariationsFontHandler::~THierVariationsFontHandler(this);
  JUMPOUT(0x1BA9994D0);
}

void THierVariationsFontHandler::GetOutlinePath(uint64_t a1, unsigned int a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 136);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  if (!*(unsigned char *)(a1 + 568))
  {
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 504))(*(void *)(a1 + 8));
    if (!v8) {
      goto LABEL_25;
    }
    if (*(unsigned char *)(a1 + 568))
    {
      MEMORY[0x1BA9993B0](a1 + 144);
      *(unsigned char *)(a1 + 568) = 0;
    }
    int v20 = &unk_1F0E010F8;
    unsigned int v21 = (void **)v8;
    unsigned int v23 = &v20;
    MEMORY[0x1BA9993A0](a1 + 144, a2, &v20, 0);
    std::__function::__value_func<HVF::Part const* ()(unsigned long,HVF::PartCache &)>::~__value_func[abi:fe180100](&v20);
    *(unsigned char *)(a1 + 568) = 1;
    *(_DWORD *)(a1 + 140) = 0;
LABEL_8:
    uint64_t v9 = *(void *)(a1 + 408);
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
      unsigned int v11 = *(__int16 **)(a1 + 96);
      __int16 v12 = *(__int16 **)(a1 + 104);
      if (v11 != v12)
      {
        unint64_t v13 = v10;
        for (uint64_t i = *(__int16 **)(a1 + 96); i != v12; ++i)
        {
          __int16 v15 = *i;
          if (*i)
          {
            unint64_t v19 = ((uint64_t)v11 - *(void *)(a1 + 96)) >> 1;
            if (v19 >= v13) {
              break;
            }
            double v18 = (double)v15 * 0.0000610351562;
            if (!*(unsigned char *)(a1 + 568)) {
              goto LABEL_28;
            }
            uint64_t v16 = *(void *)(a1 + 296);
            if (!v16) {
              std::__throw_bad_function_call[abi:fe180100]();
            }
            (*(void (**)(void **__return_ptr))(*(void *)v16 + 48))(&v20);
            if (!v25) {
              std::__throw_bad_function_call[abi:fe180100]();
            }
            (*(void (**)(uint64_t, double *))(*(void *)v25 + 48))(v25, &v18);
            std::__function::__value_func<void ()(double const&)>::~__value_func[abi:fe180100](v24);
            std::__function::__value_func<double ()(void)>::~__value_func[abi:fe180100](&v20);
          }
          ++v11;
        }
      }
      int v20 = 0;
      unsigned int v21 = &v20;
      uint64_t v22 = 0x2000000000;
      LODWORD(v23) = 0;
      if (!*(unsigned char *)(a1 + 568)) {
        goto LABEL_28;
      }
      HVF::PartTransformRenderer::renderToContext();
      if (a4) {
        *a4 = 1;
      }
      unsigned int v17 = *(_DWORD *)(a1 + 140) + 1;
      *(_DWORD *)(a1 + 140) = v17;
      if (v17 >= 0x11)
      {
        if (*(unsigned char *)(a1 + 568))
        {
          MEMORY[0x1BA9993B0](a1 + 144);
          *(unsigned char *)(a1 + 568) = 0;
        }
      }
      _Block_object_dispose(&v20, 8);
    }
LABEL_25:
    os_unfair_lock_unlock(v7);
    return;
  }
  HVF::PartTransformRenderer::setRenderPart((HVF::PartTransformRenderer *)(a1 + 144));
  if (*(unsigned char *)(a1 + 568)) {
    goto LABEL_8;
  }
LABEL_28:
  __break(1u);
}

void sub_1B53568C8()
{
}

void sub_1B53568E0(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x1B53568D8);
}

uint64_t ___ZNK26THierVariationsFontHandler14GetOutlinePathEjRK18TGlyphOutlineBatchPb_block_invoke(uint64_t a1, int a2, double *a3)
{
  switch(a2)
  {
    case 0:
      uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
      int v4 = *(_DWORD *)(v3 + 24);
      *(_DWORD *)(v3 + 24) = v4 + 1;
      if (!v4) {
        (***(void (****)(void, void))(a1 + 40))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
      }
      break;
    case 2:
      (*(void (**)(void, double, double))(**(void **)(a1 + 40) + 8))(*(void *)(a1 + 40), *a3, a3[1]);
      break;
    case 3:
      (*(void (**)(void, double, double))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40), *a3, a3[1]);
      break;
    case 4:
      (*(void (**)(void, double, double, double, double))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), *a3, a3[1], a3[2], a3[3]);
      break;
    case 5:
      (*(void (**)(void, double, double, double, double, double, double))(**(void **)(a1 + 40) + 32))(*(void *)(a1 + 40), *a3, a3[1], a3[2], a3[3], a3[4], a3[5]);
      break;
    case 8:
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
      int v6 = *(_DWORD *)(v5 + 24) - 1;
      *(_DWORD *)(v5 + 24) = v6;
      if (!v6) {
        (*(void (**)(void))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40));
      }
      break;
    default:
      return 0;
  }
  return 0;
}

const CGPath *THierVariationsFontHandler::CopyGlyphPath(THierVariationsFontHandler *this, uint64_t a2, BOOL *a3)
{
  int v4 = (const CGPath *)TFontHandler::CopyGlyphPath(this, a2, a3);
  if (qword_1EB2CD258 != -1) {
    dispatch_once(&qword_1EB2CD258, &__block_literal_global_4);
  }
  if (_MergedGlobals_1 == 1)
  {
    if (a3) {
      *a3 = 0;
    }
    CGPathRef CopyByNormalizing = CGPathCreateCopyByNormalizing(v4, 0);
    if (CopyByNormalizing)
    {
      CGPathRef v6 = CopyByNormalizing;
      CGPathRelease(v4);
      return v6;
    }
  }
  return v4;
}

uint64_t ___ZNK26THierVariationsFontHandler13CopyGlyphPathEjPb_block_invoke()
{
  uint64_t result = _os_feature_enabled_impl();
  if ((result & 1) != 0
    || (uint64_t result = dyld_program_sdk_at_least(), (result & 1) == 0) && (uint64_t result = _CFAppVersionCheck(), result))
  {
    _MergedGlobals_1 = 1;
  }
  return result;
}

uint64_t THierVariationsFontHandler::GetVariationValues(THierVariationsFontHandler *this, uint64_t a2)
{
  if (a2 == (uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 1) {
    return *((void *)this + 12);
  }
  else {
    return 0;
  }
}

uint64_t THierVariationsFontHandler::CanStreamPostScriptType1(THierVariationsFontHandler *this)
{
  return 1;
}

uint64_t THierVariationsDataForkFont::GetKind(THierVariationsDataForkFont *this)
{
  return 8;
}

uint64_t THierVariationsDataForkFont::GetNumberOfGlyphs(THierVariationsDataForkFont *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 32) + 40))();
}

uint64_t THierVariationsDataForkFont::GetLoader(THierVariationsDataForkFont *this)
{
  return *((void *)this + 32);
}

void std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::~__func()
{
}

void *std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F0E010F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F0E010F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::operator()(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), *a2, a3, 0);
}

uint64_t std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1},std::allocator<HVF::Loader::operator std::function<HVF::Part const* ()(unsigned long,HVF::PartCache &)>(void)::{lambda(unsigned long,HVF::PartCache &)#1}>,HVF::Part const* ()(unsigned long,HVF::PartCache &)>::target_type()
{
}

void *std::__function::__value_func<HVF::Part const* ()(unsigned long,HVF::PartCache &)>::~__value_func[abi:fe180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(double const&)>::~__value_func[abi:fe180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<double ()(void)>::~__value_func[abi:fe180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void TVector::~TVector(TVector *this)
{
}

float64x2_t TType1GlyphOutlineBatch::TType1GlyphOutlineBatch(uint64_t a1, uint64_t a2, void *a3, double a4)
{
  uint64_t v4 = a3[1];
  v5.i64[0] = (int)*a3;
  v5.i64[1] = (int)HIDWORD(*a3);
  float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3E10000000000000uLL);
  *(float64x2_t *)(a1 + 24) = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v5), v6), a4);
  *(void *)a1 = &unk_1F0E013B8;
  *(void *)(a1 + 16) = a2;
  v5.i64[0] = (int)v4;
  v5.i64[1] = SHIDWORD(v4);
  *(float64x2_t *)(a1 + 40) = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v5), v6), a4);
  uint64_t v7 = a3[2];
  v5.i64[0] = (int)v7;
  v5.i64[1] = SHIDWORD(v7);
  float64x2_t result = vmulq_n_f64(vmulq_f64(vcvtq_f64_s64(v5), v6), a4);
  *(float64x2_t *)(a1 + 56) = result;
  return result;
}

void TType1GlyphOutlineBatch::~TType1GlyphOutlineBatch(TType1GlyphOutlineBatch *this)
{
}

uint64_t TType1GlyphOutlineBatch::NewPath(TType1GlyphOutlineBatch *this)
{
  return (***((uint64_t (****)(void))this + 2))(*((void *)this + 2));
}

uint64_t TType1GlyphOutlineBatch::MoveTo(TType1GlyphOutlineBatch *this, double a2, double a3)
{
  return (*(uint64_t (**)(double, double))(**((void **)this + 2) + 8))(*((double *)this + 7) + *((double *)this + 5) * a3 + a2 * *((double *)this + 3), *((double *)this + 8) + *((double *)this + 6) * a3 + a2 * *((double *)this + 4));
}

uint64_t TType1GlyphOutlineBatch::LineTo(TType1GlyphOutlineBatch *this, double a2, double a3)
{
  return (*(uint64_t (**)(double, double))(**((void **)this + 2) + 16))(*((double *)this + 7) + *((double *)this + 5) * a3 + a2 * *((double *)this + 3), *((double *)this + 8) + *((double *)this + 6) * a3 + a2 * *((double *)this + 4));
}

uint64_t TType1GlyphOutlineBatch::QuadaticCurveTo(TType1GlyphOutlineBatch *this, double a2, double a3, double a4, double a5)
{
  return (*(uint64_t (**)(double, double, double, double))(**((void **)this + 2) + 24))(*((double *)this + 7) + *((double *)this + 5) * a3 + a2 * *((double *)this + 3), *((double *)this + 8) + *((double *)this + 6) * a3 + a2 * *((double *)this + 4), *((double *)this + 7) + *((double *)this + 5) * a5 + a4 * *((double *)this + 3), *((double *)this + 8) + *((double *)this + 6) * a5 + a4 * *((double *)this + 4));
}

uint64_t TType1GlyphOutlineBatch::CubicCurveTo(TType1GlyphOutlineBatch *this, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v7 = *((double *)this + 5);
  double v8 = *((double *)this + 6);
  double v9 = *((double *)this + 3);
  double v10 = *((double *)this + 4);
  double v11 = *((double *)this + 7);
  return (*(uint64_t (**)(double, double, double, double, double, double))(**((void **)this + 2) + 32))(v11 + v7 * a3 + a2 * v9, *((double *)this + 8) + v8 * a3 + a2 * v10, v11 + v7 * a5 + a4 * v9, *((double *)this + 8) + v8 * a5 + a4 * v10, v11 + v7 * a7 + a6 * v9, *((double *)this + 8) + v8 * a7 + a6 * v10);
}

uint64_t TType1GlyphOutlineBatch::EndPath(TType1GlyphOutlineBatch *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 2) + 40))();
}

void TInterpreterContext::~TInterpreterContext(TInterpreterContext *this)
{
  *(void *)this = &unk_1F0E01408;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8052888210);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E01408;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8052888210);
  }
  JUMPOUT(0x1BA9994D0);
}

uint64_t TInterpreterContext::GetBuildChar(TInterpreterContext *this)
{
  if (!*((_DWORD *)this + 8)) {
    return 0;
  }
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    operator new[]();
  }
  return v1;
}

uint64_t TInterpreterContext::LoadSubroutine(TInterpreterContext *this, unsigned int a2, const unsigned __int8 *a3, unsigned int a4, int a5, const unsigned __int8 *a6, unint64_t a7, const unsigned __int8 **a8)
{
  if (a4 <= a2) {
    goto LABEL_25;
  }
  if (!a3) {
    goto LABEL_24;
  }
  if (!a5) {
    goto LABEL_24;
  }
  unint64_t v8 = a5 + a5 * a4;
  if (a7 <= v8) {
    goto LABEL_24;
  }
  double v9 = &a3[a5 * a2];
  unsigned int v10 = -1;
  int v11 = 0;
  int v12 = 0;
  unint64_t v13 = v9;
  switch(a5)
  {
    case 1:
      goto LABEL_9;
    case 2:
      goto LABEL_8;
    case 3:
      goto LABEL_7;
    case 4:
      unint64_t v13 = v9 + 1;
      int v11 = *v9 << 8;
LABEL_7:
      int v14 = *v13++;
      int v12 = (v11 | v14) << 8;
LABEL_8:
      int v15 = *v13++;
      unsigned int v10 = ((v12 | v15) << 8) - 1;
LABEL_9:
      v10 += *v13;
      break;
    default:
      break;
  }
  unsigned int v16 = -1;
  int v17 = 0;
  int v18 = 0;
  unint64_t v19 = &v9[a5];
  switch(a5)
  {
    case 1:
      goto LABEL_14;
    case 2:
      goto LABEL_13;
    case 3:
      goto LABEL_12;
    case 4:
      int v20 = *v19++;
      int v17 = v20 << 8;
LABEL_12:
      int v21 = *v19++;
      int v18 = (v17 | v21) << 8;
LABEL_13:
      int v22 = *v19++;
      unsigned int v16 = ((v18 | v22) << 8) - 1;
LABEL_14:
      v16 += *v19;
      break;
    default:
      break;
  }
  if (v10 > v16 || a7 - v8 < v16)
  {
LABEL_24:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    int v29 = 4;
    goto LABEL_26;
  }
  unsigned int v23 = (void *)*((void *)this + 2);
  if ((unint64_t)(v23 + 6) >= *((void *)this + 29))
  {
LABEL_25:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    int v29 = -21;
LABEL_26:
    exception[2] = v29;
  }
  _OWORD v23[2] = *a8;
  unsigned int v24 = v23 + 3;
  *((void *)this + 2) = v23 + 3;
  if (!a6 || v10 >= v16) {
    goto LABEL_22;
  }
  uint64_t v25 = &a6[v10];
  void v23[3] = v25;
  _OWORD v23[4] = &a6[v16];
  v23[5] = v25;
  *a8 = v25;
  uint64_t v26 = *((void *)this + 2);
  if (!v26)
  {
    unsigned int v24 = 0;
LABEL_22:
    uint64_t v26 = 0;
    *((void *)this + 2) = v24 - 3;
  }
  return v26;
}

void TType1RenderingContext::~TType1RenderingContext(TType1RenderingContext *this)
{
}

void TType1RenderingContext::TType1RenderingContext(TType1RenderingContext *this, TInterpreterContext *a2, char a3)
{
  *(void *)this = &unk_1F0E015A8;
  *((void *)this + 2) = 0;
  *((void *)this + 1) = &off_1F0E01538;
  *((void *)this + 3) = &off_1F0E01538;
  *((_OWORD *)this + 2) = xmmword_1B54020D0;
  *((void *)this + 6) = 0x8000000080000000;
  *((unsigned char *)this + 56) = a3;
  *((void *)this + 9) = 0;
  *((void *)this + 8) = &off_1F0E01538;
  *((void *)this + 11) = 0;
  *((void *)this + 10) = &off_1F0E01538;
  *((unsigned char *)this + 96) = 1;
  *((void *)this + 13) = a2;
  *((void *)this + 14) = 0;
}

void TType1CubicOutlineContext::~TType1CubicOutlineContext(TType1CubicOutlineContext *this)
{
}

void TType1FontHandler::ParseOutline(TType1FontHandler *this, unsigned int a2, TType1RenderingContext *a3)
{
  (*(void (**)(void **__return_ptr))(**((void **)this + 1) + 488))(v5);
  (*(void (**)(TType1FontHandler *, void **, TType1RenderingContext *))(*(void *)this + 136))(this, v5, a3);
  TCharString::~TCharString(v5);
}

void sub_1B5357624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t TType1FontHandler::DeriveRawMetrics(TType1FontHandler *this, TInterpreterContext *a2, uint64_t a3, double *a4, int a5)
{
  unint64_t v28 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v26 = v9;
  long long v27 = v9;
  long long v24 = v9;
  long long v25 = v9;
  long long v22 = v9;
  long long v23 = v9;
  long long v21 = v9;
  TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)&v21, a2, a5 ^ 1);
  uint64_t result = (*(uint64_t (**)(TType1FontHandler *, uint64_t, long long *))(*(void *)this + 128))(this, a3, &v21);
  if (*((void *)this + 2))
  {
    TType1Font::ApplyFontMatrix(*((void *)this + 1), (double)(int)v22 * 0.0000152587891, (double)SDWORD1(v22) * 0.0000152587891, &v20);
    double v16 = v20;
    uint64_t result = TType1Font::ApplyFontMatrix(*((void *)this + 1), (double)(int)v23 * 0.0000152587891, (double)SDWORD1(v23) * 0.0000152587891, &v20);
    if (!a5) {
      goto LABEL_18;
    }
  }
  else
  {
    v12.n128_u64[0] = 0x3EF0000000000000;
    double v16 = (double)(int)v22 * 0.0000152587891;
    if (!a5) {
      goto LABEL_18;
    }
  }
  v11.n128_u64[0] = 0;
  double v17 = 0.0;
  double v18 = 0.0;
  double v19 = 0.0;
  if ((int)v24 > SDWORD2(v23))
  {
    v12.n128_u64[0] = 0;
    v11.n128_f64[0] = (double)SDWORD2(v23) * 0.0000152587891;
    v14.n128_f64[0] = (double)SHIDWORD(v23) * 0.0000152587891;
    v15.n128_f64[0] = (double)(int)v24 * 0.0000152587891;
    v13.n128_f64[0] = (double)SDWORD1(v24) * 0.0000152587891;
    if (SDWORD1(v24) > SHIDWORD(v23))
    {
      double v17 = (double)SHIDWORD(v23) * 0.0000152587891;
    }
    else
    {
      v11.n128_f64[0] = 0.0;
      double v17 = 0.0;
    }
    if (SDWORD1(v24) > SHIDWORD(v23)) {
      double v18 = (double)(int)v24 * 0.0000152587891;
    }
    else {
      double v18 = 0.0;
    }
    if (SDWORD1(v24) > SHIDWORD(v23)) {
      double v19 = (double)SDWORD1(v24) * 0.0000152587891;
    }
    else {
      double v19 = 0.0;
    }
  }
  if (*((void *)this + 2))
  {
    TType1Font::ApplyFontMatrix(*((void *)this + 1), v11.n128_f64[0], v17, &v20);
    TType1Font::ApplyFontMatrix(*((void *)this + 1), v18, v19, &v20);
  }
  uint64_t result = (*(uint64_t (**)(void, __n128, __n128, __n128, __n128, __n128))(**((void **)this + 1) + 72))(*((void *)this + 1), v11, v12, v13, v14, v15);
  double v16 = (double)result * 0.0498046875;
LABEL_18:
  if (a4) {
    *a4 = v16;
  }
  return result;
}

double TType1FontHandler::CalculateH2VTranslate(TType1FontHandler *this, const TType1RenderingContext *a2, int *a3)
{
  int v6 = a3[12];
  double v7 = 0.0;
  if (v6 <= a3[10])
  {
    double v9 = 0.0;
  }
  else
  {
    int v8 = a3[13];
    double v9 = 0.0;
    if (v8 > a3[11])
    {
      double v9 = (double)v8 * 0.0000152587891;
      if (*((void *)a2 + 2))
      {
        TType1Font::ApplyFontMatrix(*((void *)a2 + 1), (double)v6 * 0.0000152587891, v9, v12);
        double v9 = v12[1];
      }
      double v7 = (double)(*(unsigned int (**)(void))(**((void **)a2 + 1) + 72))(*((void *)a2 + 1))
         * 0.0498046875;
    }
  }
  if (*((void *)a2 + 2))
  {
    TType1Font::ApplyFontMatrix(*((void *)a2 + 1), (double)a3[8] * 0.0000152587891, (double)a3[9] * 0.0000152587891, v12);
    double v10 = v12[0];
  }
  else
  {
    double v10 = (double)a3[8] * 0.0000152587891;
  }
  double result = v10 * -0.5;
  *(double *)this = result;
  *((double *)this + 1) = -(v7 + v9);
  return result;
}

void TType1FontHandler::DeriveBounds(TType1FontHandler *this, TInterpreterContext *a2, uint64_t a3, double *a4, double *a5, double *a6, double *a7, char a8)
{
  unint64_t v30 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v15 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v15 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v28 = v15;
  long long v29 = v15;
  long long v26 = v15;
  long long v27 = v15;
  v24[1] = v15;
  long long v25 = v15;
  v24[0] = v15;
  TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)v24, a2, 0);
  (*(void (**)(TType1FontHandler *, uint64_t, _OWORD *))(*(void *)this + 128))(this, a3, v24);
  if ((int)v26 <= SDWORD2(v25) || SDWORD1(v26) <= SHIDWORD(v25))
  {
    *a4 = 0.0;
    *a5 = 0.0;
    *a6 = 0.0;
    *a7 = 0.0;
  }
  else
  {
    double v16 = (double)SDWORD2(v25) * 0.0000152587891;
    double v17 = (double)SHIDWORD(v25) * 0.0000152587891;
    double v18 = (double)(int)v26 * 0.0000152587891;
    double v19 = (double)SDWORD1(v26) * 0.0000152587891;
    if (*((void *)this + 2))
    {
      TType1Font::ApplyFontMatrix(*((void *)this + 1), v16, (double)SHIDWORD(v25) * 0.0000152587891, &v22);
      double v16 = v22;
      double v17 = *(double *)&v23;
      TType1Font::ApplyFontMatrix(*((void *)this + 1), v18, v19, &v22);
      double v18 = v22;
      double v19 = *(double *)&v23;
    }
    if (a8)
    {
      double v22 = NAN;
      uint64_t v23 = -1;
      TType1FontHandler::CalculateH2VTranslate((TType1FontHandler *)&v22, this, (int *)v24);
      double v20 = v22;
      double v21 = *(double *)&v23;
      *a4 = v16 + v22;
      *a5 = v17 + v21;
      *a6 = v18 + v20;
      *a7 = v19 + v21;
    }
    else
    {
      *a4 = v16;
      *a5 = v17;
      *a6 = v18;
      *a7 = v19;
    }
  }
}

double TType1FontHandler::DeriveVerticalTranslate@<D0>(TType1FontHandler *this@<X0>, TInterpreterContext *a2@<X1>, uint64_t a3@<X2>, TType1FontHandler *a4@<X8>)
{
  unint64_t v10 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v7 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[5] = v7;
  v9[6] = v7;
  v9[3] = v7;
  v9[4] = v7;
  v9[1] = v7;
  v9[2] = v7;
  v9[0] = v7;
  TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)v9, a2, 0);
  (*(void (**)(TType1FontHandler *, uint64_t, _OWORD *))(*(void *)this + 128))(this, a3, v9);
  return TType1FontHandler::CalculateH2VTranslate(a4, this, (int *)v9);
}

uint64_t TType1FontHandler::StreamPSDownload(TType1PSFont **a1, uint64_t a2, int a3, char *a4, unsigned int *a5, unsigned __int16 *a6, __CFData *a7)
{
  __int16 v10 = a3;
  if (TFontHandler::T1StreamPSDownload(a1, a3, a4, a5, a6, 0, a7)) {
    return 1;
  }
  return TFontHandler::StreamPSDownload((TFontHandler *)a1, a2, v10, a4, a5, a6);
}

void TType1InterpreterContext::~TType1InterpreterContext(TType1InterpreterContext *this)
{
  *(void *)this = &unk_1F0E01408;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8052888210);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E01408;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8052888210);
  }
  JUMPOUT(0x1BA9994D0);
}

uint64_t TType1FontType1CharStringHandler::GetOutlinePath(uint64_t a1, uint64_t a2, void (***a3)(void, uint64_t))
{
  memset(__b, 170, sizeof(__b));
  TType1InterpreterContext::TType1InterpreterContext((TType1InterpreterContext *)__b, *(const TType1Font **)(a1 + 8));
  int v6 = *(void **)(a1 + 16);
  if (v6)
  {
    memset(&v11[2], 255, 32);
    uint64_t v12 = -1;
    v11[0] = xmmword_1B5402210;
    v11[1] = unk_1B5402220;
    unsigned int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
    TType1GlyphOutlineBatch::TType1GlyphOutlineBatch((uint64_t)v11, (uint64_t)a3, v6, (double)v7);
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v19 = v8;
    long long v20 = v8;
    long long v17 = v8;
    long long v18 = v8;
    long long v15 = v8;
    long long v16 = v8;
    long long v13 = v8;
    long long v14 = v8;
    TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)&v13, (TInterpreterContext *)__b, 0);
    *(void *)&long long v13 = &unk_1F0E01430;
    *((void *)&v20 + 1) = v11;
    (**(void (***)(_OWORD *, uint64_t))&v11[0])(v11, a2);
    LOBYTE(v19) = 1;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 128))(a1, a2, &v13);
    (*(void (**)(void))(**((void **)&v20 + 1) + 40))(*((void *)&v20 + 1));
  }
  else
  {
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v19 = v9;
    long long v20 = v9;
    long long v17 = v9;
    long long v18 = v9;
    long long v15 = v9;
    long long v16 = v9;
    long long v13 = v9;
    long long v14 = v9;
    TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)&v13, (TInterpreterContext *)__b, 0);
    *(void *)&long long v13 = &unk_1F0E01430;
    *((void *)&v20 + 1) = a3;
    (**a3)(a3, a2);
    LOBYTE(v19) = 1;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 128))(a1, a2, &v13);
    (*(void (**)(void))(**((void **)&v20 + 1) + 40))(*((void *)&v20 + 1));
  }
  uint64_t result = __b[3];
  __b[0] = &unk_1F0E01408;
  __b[3] = 0;
  if (result) {
    return MEMORY[0x1BA9994A0](result, 0x1000C8052888210);
  }
  return result;
}

void sub_1B5358020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a39) {
    MEMORY[0x1BA9994A0](a39, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TType1FontType1CharStringHandler::GetHorizontalAdvances(const TType1Font **this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  memset(__b, 170, sizeof(__b));
  TType1InterpreterContext::TType1InterpreterContext((TType1InterpreterContext *)__b, this[1]);
  if (a4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * a4;
    do
    {
      *a3++ = (*((double (**)(const TType1Font **, void *, void, void, void))*this + 18))(this, __b, a2[v8++], 0, 0);
      v9 -= 8;
    }
    while (a4 != v8);
  }
  uint64_t result = __b[3];
  __b[0] = &unk_1F0E01408;
  __b[3] = 0;
  if (result) {
    return MEMORY[0x1BA9994A0](result, 0x1000C8052888210);
  }
  return result;
}

uint64_t TType1FontType1CharStringHandler::GetRawMetrics(const TType1Font **this, uint64_t a2, double *a3, double *a4, uint64_t a5)
{
  memset(__b, 170, sizeof(__b));
  TType1InterpreterContext::TType1InterpreterContext((TType1InterpreterContext *)__b, this[1]);
  *a3 = (*((double (**)(const TType1Font **, void *, uint64_t, double *, uint64_t))*this + 18))(this, __b, a2, a4, a5);
  uint64_t v10 = __b[3];
  __b[0] = &unk_1F0E01408;
  __b[3] = 0;
  if (v10) {
    MEMORY[0x1BA9994A0](v10, 0x1000C8052888210);
  }
  return 1;
}

void sub_1B535828C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
    MEMORY[0x1BA9994A0](a13, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TType1FontType1CharStringHandler::GetBounds(TType1FontType1CharStringHandler *this, unsigned int a2, double *a3, double *a4, double *a5, double *a6)
{
  return 0;
}

uint64_t TType1FontType1CharStringHandler::GetHorizontalToVerticalTranslate(const TType1Font **a1, uint64_t a2, _OWORD *a3)
{
  memset(__b, 170, sizeof(__b));
  TType1InterpreterContext::TType1InterpreterContext((TType1InterpreterContext *)__b, a1[1]);
  (*((void (**)(long long *__return_ptr, const TType1Font **, void *, uint64_t))*a1 + 20))(&v8, a1, __b, a2);
  *a3 = v8;
  uint64_t v6 = __b[3];
  __b[0] = &unk_1F0E01408;
  __b[3] = 0;
  if (v6) {
    MEMORY[0x1BA9994A0](v6, 0x1000C8052888210);
  }
  return 1;
}

void sub_1B53583B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    MEMORY[0x1BA9994A0](a15, 0x1000C8052888210);
  }
  _Unwind_Resume(exception_object);
}

float64x2_t TType1FontType1CharStringHandler::GetFontInfo(int **this, FPFontInfo *a2)
{
  double FontInfo = TFontHandler::GetFontInfo((TFontHandler *)this, a2);
  (*((void (**)(int **, int *, int *, int *, void, double))*this + 4))(this, &a2->var2, &a2->var3, &a2->var4, 0, FontInfo);
  uint64_t v6 = this[1];
  unint64_t v7 = *((unsigned __int16 *)v6 + 75);
  if (v7 >= 2)
  {
    long long v8 = this[4];
    if (v8)
    {
      uint64_t v9 = *((void *)v6 + 16);
      uint64_t v10 = (int *)(v9 + 120);
      float64x2_t v11 = 0uLL;
      double v12 = 0.0;
      float64x2_t v13 = (float64x2_t)vdupq_n_s64(0x3EF0000000000000uLL);
      double v14 = 0.0;
      float64x2_t v15 = 0uLL;
      float64x2_t v16 = 0uLL;
      do
      {
        int v17 = *v8++;
        double v18 = (double)v17 * 0.0000152587891;
        uint64_t v20 = *((void *)v10 - 3);
        uint64_t v19 = *((void *)v10 - 2);
        v21.i64[0] = (int)v19;
        v21.i64[1] = SHIDWORD(v19);
        float64x2_t v11 = vmlaq_n_f64(v11, vmulq_f64(vcvtq_f64_s64(v21), v13), v18);
        uint64_t v22 = *((void *)v10 - 4);
        v21.i64[0] = (int)v22;
        v21.i64[1] = SHIDWORD(v22);
        float64x2_t v15 = vmlaq_n_f64(v15, vmulq_f64(vcvtq_f64_s64(v21), v13), v18);
        v21.i64[0] = (int)v20;
        v21.i64[1] = SHIDWORD(v20);
        float64x2_t v16 = vmlaq_n_f64(v16, vmulq_f64(vcvtq_f64_s64(v21), v13), v18);
        double v14 = v14 + v18 * ((double)*v10 * 0.0000152587891);
        double v12 = v12 + v18 * ((double)*(v10 - 2) * 0.0000152587891);
        v10 += 90;
        --v7;
      }
      while (v7);
      double v23 = (double)*(int *)(v9 + 44) * 0.0000152587891;
      a2->var9 = (int)v12;
      a2->var10 = (int)-v12;
      *(float64x2_t *)&a2->var14 = v11;
      __asm { FMOV            V1.2D, #31.0 }
      float64x2_t v29 = vminnmq_f64(vrndaq_f64(vmulq_n_f64(vsubq_f64(v16, v15), v23)), _Q1);
      CGPoint v30 = (CGPoint)vsubq_f64(v15, v29);
      float64x2_t result = vsubq_f64(vaddq_f64(v16, v29), (float64x2_t)v30);
      a2->var7 = (int)result.f64[0];
      a2->var8 = (int)v14;
      a2->var18.origin = v30;
      a2->var18.size = (CGSize)result;
    }
  }
  return result;
}

uint64_t TType1FontType1CharStringHandler::GetFontBounds(uint64_t this, double *a2, double *a3, double *a4, double *a5, int a6)
{
  uint64_t v11 = *(void *)(this + 8);
  unint64_t v12 = *(unsigned __int16 *)(v11 + 150);
  if (v12 < 2 || (float64x2_t v13 = *(int **)(this + 32)) == 0)
  {
    this = (*(uint64_t (**)(void, double *, double *, double *, double *))(*(void *)v11 + 280))(*(void *)(this + 8), a2, a3, a4, a5);
    if (!a6) {
      return this;
    }
    goto LABEL_9;
  }
  double v14 = *(int **)(v11 + 128);
  float64x2_t v15 = v14 + 25;
  double v16 = 0.0;
  double v17 = 0.0;
  double v18 = 0.0;
  double v19 = 0.0;
  do
  {
    int v20 = *v13++;
    double v21 = (double)v20 * 0.0000152587891;
    double v19 = v19 + v21 * ((double)*(v15 - 3) * 0.0000152587891);
    double v18 = v18 + v21 * ((double)*(v15 - 2) * 0.0000152587891);
    double v17 = v17 + v21 * ((double)*(v15 - 1) * 0.0000152587891);
    double v16 = v16 + v21 * ((double)*v15 * 0.0000152587891);
    v15 += 90;
    --v12;
  }
  while (v12);
  double v22 = (double)v14[11] * 0.0000152587891;
  double v23 = fmin(round((v17 - v19) * v22), 31.0);
  double v24 = v19 - v23;
  double v25 = fmin(round((v16 - v18) * v22), 31.0);
  double v26 = v18 - v25;
  *a2 = v24;
  *a3 = v26;
  *a4 = v17 + v23 - v24;
  *a5 = v16 + v25 - v26;
  if (a6)
  {
    int v28 = v14[32];
    int v27 = v14[33];
    if (v28 | v27)
    {
      *a2 = *a2 - (double)v28 * 0.0000152587891;
      double v29 = (double)v27 * 0.0000152587891 + *a3;
LABEL_13:
      *a3 = v29;
      return this;
    }
LABEL_9:
    int v30 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 216))(v11);
    if (v30) {
      double v31 = (double)(unsigned __int16)v30;
    }
    else {
      double v31 = *a4;
    }
    *a2 = *a2 + v31 * -0.5;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 72))(v11);
    double v29 = (double)this * 0.0498046875 - *a5;
    goto LABEL_13;
  }
  return this;
}

uint64_t GetArgs(uint64_t result, uint64_t a2)
{
  if (((result - a2) & 0x200000000) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = -22;
  }
  return result;
}

uint64_t GetArgsAndResetOSubrArgs(TType1InterpreterContext *a1, int a2)
{
  if (*((_DWORD *)a1 + 425)) {
    *((_DWORD *)a1 + 425) = 0;
  }
  uint64_t v2 = *((void *)a1 + 1);
  if ((int)((unint64_t)(v2 - *((void *)a1 + 26)) >> 2) < a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = -22;
  }
  return v2 - 4 * a2;
}

uint64_t TType1RenderingContext::rrCurveTo(TType1RenderingContext *this, unsigned int *a2, TVector *a3)
{
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  (*(void (**)(TVector *, void, void))(*(void *)a3 + 16))(a3, *a2, a2[1]);
  uint64_t v9 = *((void *)a3 + 1);
  v13[0] = &off_1F0E01538;
  v13[1] = v9;
  (*(void (**)(TVector *, uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v5, v6);
  uint64_t v10 = *((void *)a3 + 1);
  v12[0] = &off_1F0E01538;
  v12[1] = v10;
  (*(void (**)(TVector *, uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v7, v8);
  return (*(uint64_t (**)(TType1RenderingContext *, void *, void *, TVector *))(*(void *)this + 16))(this, v13, v12, a3);
}

uint64_t GetArgs(TType1InterpreterContext *a1, int *a2, unsigned int a3)
{
  if (*((_DWORD *)a1 + 425)) {
    *((_DWORD *)a1 + 425) = 0;
  }
  uint64_t v3 = *((void *)a1 + 1);
  unint64_t v4 = (unint64_t)(v3 - *((void *)a1 + 26)) >> 2;
  *a2 = v4;
  BOOL v5 = __OFSUB__(v4, a3);
  int v6 = v4 - a3;
  if (v6 < 0 != v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = -22;
  }
  *a2 = v6;
  return v3 - 4 * a3;
}

uint64_t TType1RenderingContext::hhCurveTo(TType1RenderingContext *this, unsigned int *a2, TVector *a3)
{
  (*(void (**)(TVector *, void))(*(void *)a3 + 24))(a3, *a2);
  uint64_t v6 = *((void *)a3 + 1);
  v10[0] = &off_1F0E01538;
  v10[1] = v6;
  (*(void (**)(TVector *, void, void))(*(void *)a3 + 16))(a3, a2[1], a2[2]);
  uint64_t v7 = *((void *)a3 + 1);
  v9[0] = &off_1F0E01538;
  v9[1] = v7;
  (*(void (**)(TVector *, void))(*(void *)a3 + 24))(a3, a2[3]);
  return (*(uint64_t (**)(TType1RenderingContext *, void *, void *, TVector *))(*(void *)this + 16))(this, v10, v9, a3);
}

uint64_t TCharString::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  LODWORD(v4) = *(unsigned __int8 *)(a2 + 28);
  *(unsigned char *)(a1 + 28) = v4;
  if (v4)
  {
    *(unsigned char *)(a2 + 28) = 0;
  }
  else if (!v3)
  {
    TDataReference::operator=((TDataReference *)(a1 + 32), a2 + 32);
  }
  return a1;
}

void TType1FontType1CharStringHandlerWithVariations::~TType1FontType1CharStringHandlerWithVariations(TType1FontType1CharStringHandlerWithVariations *this)
{
}

void TType1Font::MakeHandler(uint64_t a1, void *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  if (*a2) {
    BOOL v2 = a2[1] == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2) {
    operator new();
  }
  operator new();
}

void sub_1B5359630(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a2)
  {
    if (a27) {
      MEMORY[0x1BA9994A0](a27, 0x1000C8052888210);
    }
    uint64_t v28 = 0;
    while (1)
    {
      double v29 = *(void **)((char *)&STACK[0x720] + v28 + 72);
      if (v29)
      {
        *(unint64_t *)((char *)&STACK[0x720] + v28 + 80) = (unint64_t)v29;
        operator delete(v29);
      }
      v28 -= 24;
      if (v28 == -96)
      {
        __cxa_begin_catch(a1);
        __cxa_end_catch();
        JUMPOUT(0x1B5359618);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t TType1FontType1CharStringHandler::StreamPSDownload(uint64_t a1, uint64_t a2, int a3, char *a4, unsigned int *a5, unsigned __int16 *a6, __CFData *a7)
{
  __int16 v10 = a3;
  if (TFontHandler::T1StreamPSDownload((TType1PSFont **)a1, a3, a4, a5, a6, *(const int **)(a1 + 32), a7)) {
    return 1;
  }
  return TFontHandler::StreamPSDownload((TFontHandler *)a1, a2, v10, a4, a5, a6);
}

char *std::vector<int>::__assign_with_size[abi:fe180100]<int *,int *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float64x2_t result = std::vector<int>::__vallocate[abi:fe180100](v7, v11);
    float64x2_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_15:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      double v18 = v9;
      double v19 = __src;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  unint64_t v12 = (void **)(result + 8);
  double v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_15;
  }
  double v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    float64x2_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    double v18 = v9;
    double v19 = v16;
LABEL_17:
    float64x2_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_18:
  *unint64_t v12 = &v9[v17];
  return result;
}

void woff2::ConvertWOFF2ToTTF(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v305 = *MEMORY[0x1E4F143B8];
  unint64_t v288 = 0xAAAAAAAAAAAAAAAALL;
  v289 = 0;
  uint64_t v291 = 0;
  v290 = 0;
  v293[1] = 0;
  v293[0] = 0;
  v292 = (uint64_t *)v293;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)v283 = v3;
  long long v284 = v3;
  *(_OWORD *)v285 = 0u;
  *(_OWORD *)__p = 0u;
  long long v287 = 0u;
  v302[0] = a1;
  v302[1] = a2;
  if (a2 < 4) {
    goto LABEL_198;
  }
  if (a2 < 8) {
    goto LABEL_198;
  }
  if (*(_DWORD *)a1 != 843468663) {
    goto LABEL_198;
  }
  v283[0] = bswap32(*(_DWORD *)(a1 + 4));
  if (a2 < 0xC) {
    goto LABEL_198;
  }
  if (bswap32(*(_DWORD *)(a1 + 8)) != a2) {
    goto LABEL_198;
  }
  if (a2 < 0xE) {
    goto LABEL_198;
  }
  unsigned int v6 = *(unsigned __int16 *)(a1 + 12);
  unint64_t v7 = __rev16(v6);
  LOWORD(v283[2]) = v7;
  if (a2 < 0x14) {
    goto LABEL_198;
  }
  if (!v6) {
    goto LABEL_198;
  }
  if (a2 < 0x18) {
    goto LABEL_198;
  }
  DWORD2(v284) = bswap32(*(_DWORD *)(a1 + 20));
  if (a2 < 0x28) {
    goto LABEL_198;
  }
  unsigned int v9 = *(_DWORD *)(a1 + 28);
  unint64_t v10 = bswap32(v9);
  unint64_t v11 = bswap32(*(_DWORD *)(a1 + 32));
  BOOL v12 = a2 >= 0x2C;
  if (v9)
  {
    if (a2 < 0x2C || a2 <= v10) {
      goto LABEL_198;
    }
    BOOL v12 = a2 - v10 >= v11;
  }
  if (!v12) {
    goto LABEL_198;
  }
  if (a2 < 0x30) {
    goto LABEL_198;
  }
  unsigned int v13 = *(_DWORD *)(a1 + 40);
  unsigned int v260 = bswap32(v13);
  unint64_t v258 = bswap32(*(_DWORD *)(a1 + 44));
  v302[2] = 48;
  unsigned int v255 = v13;
  if (v13)
  {
    if (a2 <= v260 || a2 - v260 < v258) {
      goto LABEL_198;
    }
  }
  unsigned int v262 = v9;
  int v264 = v11;
  std::vector<woff2::Table>::resize((char **)v285, v7);
  unint64_t v15 = v285[0];
  double v14 = v285[1];
  uint64_t v257 = a3;
  int v16 = v264;
  unsigned int v17 = v262;
  v268 = (char *)LOWORD(v283[2]);
  if (LOWORD(v283[2]))
  {
    v251 = v285[1];
    int v253 = v10;
    BOOL v18 = 0;
    double v19 = 0;
    unsigned __int32 v20 = 0;
    unint64_t v273 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v285[1] - (char *)v285[0]) >> 3);
    int v249 = v285[0];
    double v21 = (int32x2_t *)((char *)v285[0] + 12);
    while (1)
    {
      if ((char *)v273 == v19) {
        goto LABEL_467;
      }
      uint64_t v22 = v302[2];
      uint64_t v23 = v302[2] + 1;
      if ((unint64_t)(v302[2] + 1) > v302[1]) {
        goto LABEL_48;
      }
      unsigned int v24 = *(unsigned __int8 *)(v302[0] + v302[2]++);
      __int32 v278 = v20;
      BOOL v265 = v18;
      if ((v24 & 0x3F) == 0x3F)
      {
        unint64_t v25 = v22 + 5;
        if (v25 > v302[1]) {
          goto LABEL_48;
        }
        unsigned int v26 = bswap32(*(_DWORD *)(v302[0] + v23));
        v302[2] = v25;
      }
      else
      {
        unsigned int v26 = *(_DWORD *)&woff2::kKnownTags[4 * (v24 & 0x3F)];
      }
      BOOL v27 = v26 == 1819239265 || v26 == 1735162214;
      BOOL v28 = v27 ? v24 > 0x3F : v24 < 0x40;
      int v29 = v28 ? 0 : 256;
      LODWORD(v299) = -1431655766;
      if ((woff2::ReadBase128(v302, (int *)&v299) & 1) == 0) {
        break;
      }
      __int32 v30 = (int)v299;
      LODWORD(v296) = v299;
      unsigned int v31 = v299;
      __int32 v32 = v278;
      if (!v28)
      {
        if (!woff2::ReadBase128(v302, (int *)&v296)) {
          break;
        }
        __int32 v32 = v278;
        unsigned int v31 = v296;
        if (v26 == 1819239265 && v296 != 0) {
          break;
        }
      }
      if (__CFADD__(v32, v31)) {
        break;
      }
      v21[-1].i32[0] = v29 | (v24 >> 6);
      v21[-1].i32[1] = v32;
      unsigned __int32 v20 = v31 + v32;
      v21[-2].i32[1] = v26;
      *double v21 = vdup_n_s32(v31);
      v21[1].i32[1] = v30;
      BOOL v18 = ++v19 >= v268;
      v21 += 5;
      if (v268 == v19)
      {
LABEL_48:
        double v14 = v251;
        LODWORD(v10) = v253;
        int v16 = v264;
        unsigned int v17 = v262;
        unint64_t v15 = v249;
        if (!v18) {
          goto LABEL_198;
        }
        goto LABEL_49;
      }
    }
    double v14 = v251;
    LODWORD(v10) = v253;
    int v16 = v264;
    unsigned int v17 = v262;
    unint64_t v15 = v249;
    if (!v265) {
      goto LABEL_198;
    }
  }
LABEL_49:
  if (v15 == v14) {
    goto LABEL_467;
  }
  int v34 = *(v14 - 8);
  int v35 = *(v14 - 7);
  HIDWORD(v284) = v35 + v34;
  if (__CFADD__(v35, v34)) {
    goto LABEL_198;
  }
  v283[1] = 0;
  unint64_t v36 = v302[2];
  if (v283[0] == 1953784678)
  {
    if ((unint64_t)(v302[2] + 4) > v302[1]) {
      goto LABEL_198;
    }
    unsigned int v37 = *(_DWORD *)(v302[0] + v302[2]);
    v283[1] = bswap32(v37);
    v302[2] += 4;
    if (v37 != 512 && v37 != 256) {
      goto LABEL_198;
    }
    LODWORD(v299) = -1431655766;
    if (!woff2::Read255UShort(v302, (unsigned int *)&v299)) {
      goto LABEL_198;
    }
    unint64_t v38 = v299;
    if (!v299) {
      goto LABEL_198;
    }
    uint64_t v39 = (char *)__p[1];
    int v40 = (char *)v287;
    unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - (unint64_t)__p[1]) >> 3);
    unint64_t v42 = v299 - v41;
    int v254 = v10;
    if (v299 <= v41)
    {
      if (v299 < v41)
      {
        int v55 = (char *)__p[1] + 40 * v299;
        while (v40 != v55)
        {
          int v56 = (void *)*((void *)v40 - 3);
          if (v56)
          {
            *((void *)v40 - 2) = v56;
            operator delete(v56);
          }
          v40 -= 40;
        }
        *(void *)&long long v287 = v55;
      }
    }
    else if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v287 + 1) - v287) >> 3) >= v42)
    {
      bzero((void *)v287, 40 * ((40 * v42 - 40) / 0x28) + 40);
      *(void *)&long long v287 = &v40[40 * ((40 * v42 - 40) / 0x28) + 40];
    }
    else
    {
      unint64_t v43 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v287 + 1) - (unint64_t)__p[1]) >> 3);
      if (v43 <= v299) {
        unint64_t v43 = v299;
      }
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v287 + 1) - (unint64_t)__p[1]) >> 3) >= 0x333333333333333) {
        unint64_t v44 = 0x666666666666666;
      }
      else {
        unint64_t v44 = v43;
      }
      if (v44 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      int v45 = (char *)operator new(40 * v44);
      int v46 = &v45[40 * v41];
      int v47 = &v45[40 * v44];
      size_t v48 = 40 * ((40 * v42 - 40) / 0x28) + 40;
      bzero(v46, v48);
      if (v40 == v39)
      {
        __p[1] = v46;
        *(void *)&long long v287 = &v46[v48];
        *((void *)&v287 + 1) = v47;
      }
      else
      {
        uint64_t v49 = 0;
        do
        {
          int v50 = &v46[v49];
          int v51 = &v40[v49];
          uint64_t v52 = *(void *)&v40[v49 - 40];
          *((_DWORD *)v50 - 8) = *(_DWORD *)&v40[v49 - 32];
          *((void *)v50 - 5) = v52;
          *(_OWORD *)(v50 - 24) = *(_OWORD *)&v40[v49 - 24];
          *((void *)v50 - 1) = *(void *)&v40[v49 - 8];
          *((void *)v51 - 3) = 0;
          *((void *)v51 - 2) = 0;
          *((void *)v51 - 1) = 0;
          v49 -= 40;
        }
        while (&v40[v49] != v39);
        int v40 = (char *)__p[1];
        __int16 v53 = (char *)v287;
        __p[1] = &v46[v49];
        *(void *)&long long v287 = &v46[v48];
        *((void *)&v287 + 1) = v47;
        while (v53 != v40)
        {
          int v54 = (void *)*((void *)v53 - 3);
          if (v54)
          {
            *((void *)v53 - 2) = v54;
            operator delete(v54);
          }
          v53 -= 40;
        }
      }
      if (v40) {
        operator delete(v40);
      }
    }
    unint64_t v57 = 0;
    if (v38 <= 1) {
      uint64_t v58 = 1;
    }
    else {
      uint64_t v58 = v38;
    }
    v269 = (void *)v58;
    do
    {
      int v59 = __p[1];
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - (unint64_t)__p[1]) >> 3) <= v57) {
        goto LABEL_467;
      }
      LODWORD(v296) = -1431655766;
      if (!woff2::Read255UShort(v302, (unsigned int *)&v296)) {
        goto LABEL_198;
      }
      if (!v296) {
        goto LABEL_198;
      }
      unint64_t v60 = v296;
      uint64_t v61 = v302[2] + 4;
      if ((unint64_t)(v302[2] + 4) > v302[1]) {
        goto LABEL_198;
      }
      v59[10 * v57] = bswap32(*(_DWORD *)(v302[0] + v302[2]));
      v302[2] = v61;
      int v62 = (char **)&v59[10 * v57 + 4];
      std::vector<unsigned short>::resize(v62, v60);
      unint64_t v63 = 0;
      unsigned int v64 = 0;
      unsigned int v65 = 0;
      unint64_t v274 = v57;
      v279 = &v59[10 * v57 + 6];
      BOOL v66 = v285[0];
      unint64_t v67 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v285[1] - (char *)v285[0]) >> 3);
      do
      {
        LODWORD(v295.__begin_) = -1431655766;
        if (!woff2::Read255UShort(v302, (unsigned int *)&v295)) {
          goto LABEL_198;
        }
        unsigned int begin = v295.__begin_;
        if (v67 <= LODWORD(v295.__begin_)) {
          goto LABEL_198;
        }
        if (v63 >= (uint64_t)(*v279 - (void)*v62) >> 1) {
          goto LABEL_467;
        }
        *(_WORD *)&(*v62)[2 * v63] = v295.__begin_;
        int v69 = v66[10 * begin];
        if (v69 == 1819239265) {
          unsigned int v64 = begin;
        }
        if (v69 == 1735162214) {
          unsigned int v65 = begin;
        }
        ++v63;
      }
      while (v60 != v63);
      if (v65 | v64)
      {
        if (v64 < v65 || v64 - v65 != 1) {
          goto LABEL_198;
        }
      }
      unint64_t v57 = v274 + 1;
    }
    while ((void *)(v274 + 1) != v269);
    unint64_t v36 = v302[2];
    LODWORD(v10) = v254;
    int v16 = v264;
    unsigned int v17 = v262;
  }
  *(void *)&long long v284 = v36;
  if (!HIDWORD(v36))
  {
    unint64_t v71 = (v36 + DWORD2(v284) + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (v71 <= a2)
    {
      if (v17)
      {
        if (v71 != v10) {
          goto LABEL_198;
        }
        LODWORD(v71) = v16 + v10;
        if ((v16 + v10) <= 0xFFFFFFFC) {
          unint64_t v71 = (v16 + v10 + 3) & 0xFFFFFFFC;
        }
        else {
          unint64_t v71 = v71;
        }
      }
      if (v255)
      {
        if (v71 != v260) {
          goto LABEL_198;
        }
        LODWORD(v71) = v258 + v260;
        if (v258 + v260 <= 0xFFFFFFFC) {
          unint64_t v71 = (v258 + v260 + 3) & 0xFFFFFFFC;
        }
        else {
          unint64_t v71 = v71;
        }
      }
      if (v71 == ((a2 + 3) & 0xFFFFFFFFFFFFFFFCLL))
      {
        memset(v302, 170, sizeof(v302));
        if (v283[1])
        {
          int v72 = __p[1];
          uint64_t v73 = (uint64_t)(v287 - (unint64_t)__p[1]) >> 3;
          uint64_t v74 = 12;
          if (v283[1] == 0x20000)
          {
            BOOL v75 = 1;
          }
          else
          {
            uint64_t v74 = 0;
            BOOL v75 = v283[1] == 0x10000;
          }
          uint64_t v76 = (858993460 * v73 + 12);
          if (!v75) {
            uint64_t v76 = 0;
          }
          size_t v77 = v74 - 0x6666666666666664 * v73 + v76;
          if ((void *)v287 != __p[1])
          {
            do
            {
              v77 += 8 * (v72[3] - v72[2]);
              v72 += 5;
            }
            while (v72 != (void *)v287);
          }
        }
        else
        {
          size_t v77 = (16 * LOWORD(v283[2])) | 0xC;
        }
        LOBYTE(v299) = 0;
        std::vector<unsigned char>::vector(v302, v77, &v299);
        v299 = 0;
        v300 = 0;
        uint64_t v301 = 0;
        std::vector<woff2::Table>::__init_with_size[abi:fe180100]<woff2::Table*,woff2::Table*>(&v299, v285[0], (uint64_t)v285[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)v285[1] - (char *)v285[0]) >> 3));
        if (v283[1])
        {
          int v78 = __p[1];
          v266 = (woff2 *)v287;
          if (__p[1] != (void *)v287)
          {
            while (1)
            {
              v297 = 0;
              uint64_t v298 = 0;
              v296 = &v297;
              int v79 = (unsigned __int16 *)v78[2];
              v270 = v78;
              v275 = (unsigned __int16 *)v78[3];
              if (v79 != v275)
              {
                do
                {
                  unint64_t v80 = *v79;
                  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v285[1] - (char *)v285[0]) >> 3) <= v80) {
                    goto LABEL_467;
                  }
                  int v81 = (unsigned int *)((char *)v285[0] + 40 * *v79);
                  uint64_t v82 = &v297;
                  uint64_t v83 = &v297;
                  if (v297)
                  {
                    unsigned int v84 = *v81;
                    uint64_t v85 = v297;
                    while (1)
                    {
                      while (1)
                      {
                        uint64_t v82 = (uint64_t **)v85;
                        unsigned int v86 = *((_DWORD *)v85 + 7);
                        if (v86 <= v84) {
                          break;
                        }
                        uint64_t v85 = *v82;
                        uint64_t v83 = v82;
                        if (!*v82) {
                          goto LABEL_144;
                        }
                      }
                      if (v86 >= v84) {
                        break;
                      }
                      uint64_t v85 = v82[1];
                      if (!v85)
                      {
                        uint64_t v83 = v82 + 1;
                        goto LABEL_144;
                      }
                    }
                    uint64_t v87 = v82;
                  }
                  else
                  {
LABEL_144:
                    uint64_t v87 = operator new(0x28uLL);
                    v87[7] = *v81;
                    *((_WORD *)v87 + 16) = 0;
                    *(void *)uint64_t v87 = 0;
                    *((void *)v87 + 1) = 0;
                    *((void *)v87 + 2) = v82;
                    *uint64_t v83 = (uint64_t *)v87;
                    int v88 = (uint64_t *)v87;
                    if (*v296)
                    {
                      v296 = (uint64_t **)*v296;
                      int v88 = *v83;
                    }
                    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(v297, v88);
                    ++v298;
                  }
                  *((_WORD *)v87 + 16) = v80;
                  ++v79;
                }
                while (v79 != v275);
                uint64_t v89 = v296;
                if (v296 != &v297) {
                  break;
                }
              }
LABEL_158:
              std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::destroy((uint64_t)&v296, v297);
              int v78 = v270 + 5;
              if (v270 + 5 == (void *)v266) {
                goto LABEL_164;
              }
            }
            unsigned __int16 v90 = 0;
            uint64_t v91 = v270[2];
            unint64_t v92 = (v270[3] - v91) >> 1;
            while (v92 > v90)
            {
              *(_WORD *)(v91 + 2 * v90) = *((_WORD *)v89 + 16);
              unint64_t v93 = v89[1];
              if (v93)
              {
                do
                {
                  int v94 = (uint64_t **)v93;
                  unint64_t v93 = (uint64_t *)*v93;
                }
                while (v93);
              }
              else
              {
                do
                {
                  int v94 = (uint64_t **)v89[2];
                  BOOL v27 = *v94 == (uint64_t *)v89;
                  uint64_t v89 = v94;
                }
                while (!v27);
              }
              ++v90;
              uint64_t v89 = v94;
              if (v94 == &v297) {
                goto LABEL_158;
              }
            }
            goto LABEL_467;
          }
        }
        else
        {
          unint64_t v95 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * (((char *)v300 - (char *)v299) >> 3));
          if (v300 == v299) {
            uint64_t v96 = 0;
          }
          else {
            uint64_t v96 = v95;
          }
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *,false>((unint64_t)v299, (unint64_t)v300, v96, 1);
        }
LABEL_164:
        int v97 = (_DWORD *)v302[0];
        if (v302[1] != v302[0])
        {
          if (v283[1])
          {
            *(_DWORD *)v302[0] = bswap32(v283[0]);
            v97[1] = bswap32(v283[1]);
            v97[2] = bswap32(-858993459 * (((unint64_t)v287 - (unint64_t)__p[1]) >> 3));
            int v98 = (void *)v287;
            if ((void *)v287 == __p[1])
            {
              uint64_t v100 = 12;
              uint64_t v101 = v287;
            }
            else
            {
              unint64_t v99 = 0;
              uint64_t v100 = 12;
              do
              {
                *(_DWORD *)((char *)v97 + v100) = 0;
                v100 += 4;
                ++v99;
                int v98 = __p[1];
                uint64_t v101 = v287;
              }
              while (v99 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - (unint64_t)__p[1]) >> 3));
            }
            if (v283[1] == 0x20000)
            {
              unint64_t v108 = (char *)v97 + v100;
              *unint64_t v108 = 0;
              *((unsigned char *)v97 + (v100 | 1)) = 0;
              *((unsigned char *)v97 + (v100 | 2)) = 0;
              *((unsigned char *)v97 + (v100 | 3)) = 0;
              *(void *)(v108 + 4) = 0;
              v100 += 12;
              int v98 = __p[1];
              uint64_t v101 = v287;
            }
            int v109 = (char *)__p[1];
            if ((void *)v287 != __p[1])
            {
              unint64_t v110 = 0;
              uint64_t v111 = 12;
              do
              {
                v271 = v109;
                uint64_t v276 = v111;
                int v112 = (int *)&v109[40 * v110];
                *((unsigned char *)v97 + v111) = BYTE3(v100);
                *((unsigned char *)v97 + (v111 | 1)) = BYTE2(v100);
                *((unsigned char *)v97 + (v111 | 2)) = BYTE1(v100);
                *((unsigned char *)v97 + (v111 | 3)) = v100;
                v112[1] = v100;
                v280 = (unsigned int *)(v112 + 1);
                int v113 = (unsigned __int16 *)*((void *)v112 + 2);
                int v114 = (unsigned __int16 *)*((void *)v112 + 3);
                while (v113 != v114)
                {
                  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v285[1] - (char *)v285[0]) >> 3) <= *v113) {
                    goto LABEL_467;
                  }
                  unsigned int v115 = *((_DWORD *)v285[0] + 10 * *v113);
                  LODWORD(v296) = v115;
                  if (0x6DB6DB6DB6DB6DB7 * ((v290 - (unsigned char *)v289) >> 3) <= v110) {
                    goto LABEL_467;
                  }
                  *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v289 + 7 * v110 + 4, v115, &v296)+ 8) = v100;
                  ++v113;
                }
                unint64_t v116 = *v280;
                if (v302[1] - v302[0] <= v116) {
                  goto LABEL_467;
                }
                uint64_t v111 = v276 + 4;
                v271[10 * v110++ + 2] = woff2::ComputeULongSum((woff2 *)(v302[0] + v116), v100 - v116);
                int v109 = (char *)__p[1];
              }
              while (v110 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - (unint64_t)__p[1]) >> 3));
            }
          }
          else
          {
            if (LOWORD(v283[2]))
            {
              uint64_t v103 = v102;
              uint64_t v104 = 0;
              uint64_t v105 = v299;
              uint64_t v106 = ((char *)v300 - (char *)v299) / 40;
              while (v290 != v289 && v106 != v104)
              {
                *((_DWORD *)std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v289 + 4, *v105, v105)+ 8) = v103;
                unsigned int v107 = *v105;
                v105 += 10;
                if (++v104 >= (unint64_t)LOWORD(v283[2])) {
                  goto LABEL_188;
                }
              }
              goto LABEL_467;
            }
          }
LABEL_188:
          if (v302[1] != v302[0])
          {
            int v117 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v257 + 16))(v257, v302[0], v302[1] - v302[0]);
            if (v117)
            {
              if (v302[1] == v302[0]) {
                goto LABEL_467;
              }
              LODWORD(v288) = woff2::ComputeULongSum((woff2 *)v302[0], v302[1] - v302[0]);
            }
            if (v299) {
              operator delete(v299);
            }
            if (v302[0])
            {
              v302[1] = v302[0];
              operator delete((void *)v302[0]);
            }
            if (!v117 || (float)((float)HIDWORD(v284) / (float)a2) > 100.0) {
              goto LABEL_198;
            }
            uint64_t v125 = v284;
            memset(v282, 170, sizeof(v282));
            std::vector<unsigned char>::vector(v282, HIDWORD(v284));
            size_t v126 = HIDWORD(v284);
            if (!HIDWORD(v284)) {
              goto LABEL_458;
            }
            int v127 = (uint8_t *)v282[0];
            if (v282[1] != v282[0])
            {
              size_t v128 = DWORD2(v284);
              size_t v129 = compression_decode_scratch_buffer_size(COMPRESSION_BROTLI);
              if (v129) {
                int v130 = malloc_type_malloc(v129, 0x4768D495uLL);
              }
              else {
                int v130 = 0;
              }
              size_t v131 = compression_decode_buffer(v127, v126, (const uint8_t *)(a1 + v125), v128, v130, COMPRESSION_BROTLI);
              free(v130);
              if (v131 != v126 || v290 == v289) {
                goto LABEL_458;
              }
              unint64_t v281 = 0;
              while (1)
              {
                v250 = v282[0];
                if (v282[1] == v282[0]) {
                  goto LABEL_467;
                }
                unint64_t v259 = HIDWORD(v284);
                int v132 = (*(uint64_t (**)(uint64_t))(*(void *)v257 + 32))(v257);
                unint64_t v303 = 0xAAAAAAAAAAAAAAAALL;
                unsigned int v304 = -1431655766;
                unsigned int v133 = (char *)v289;
                if (0x6DB6DB6DB6DB6DB7 * ((v290 - (unsigned char *)v289) >> 3) <= v281) {
                  goto LABEL_467;
                }
                int v134 = v132;
                if (v283[1]) {
                  break;
                }
                unsigned int v135 = (char *)v285[0];
                unsigned int v136 = (char *)v285[1];
                if (v285[0] == v285[1]) {
                  goto LABEL_281;
                }
                unsigned int v137 = 0;
                unsigned int v138 = 0;
                unint64_t v139 = 0;
                do
                {
                  if ((unint64_t)v138 >= v139)
                  {
                    uint64_t v141 = (v138 - v137) >> 3;
                    unint64_t v142 = v141 + 1;
                    if ((unint64_t)(v141 + 1) >> 61) {
                      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
                    }
                    if ((uint64_t)(v139 - (void)v137) >> 2 > v142) {
                      unint64_t v142 = (uint64_t)(v139 - (void)v137) >> 2;
                    }
                    if (v139 - (unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v143 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v143 = v142;
                    }
                    if (v143) {
                      unint64_t v143 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(v143);
                    }
                    else {
                      uint64_t v144 = 0;
                    }
                    int v145 = (char *)(v143 + 8 * v141);
                    *(void *)int v145 = v135;
                    unsigned int v140 = v145 + 8;
                    while (v138 != v137)
                    {
                      uint64_t v146 = *((void *)v138 - 1);
                      v138 -= 8;
                      *((void *)v145 - 1) = v146;
                      v145 -= 8;
                    }
                    unint64_t v139 = v143 + 8 * v144;
                    if (v137) {
                      operator delete(v137);
                    }
                    unsigned int v137 = v145;
                  }
                  else
                  {
                    *(void *)unsigned int v138 = v135;
                    unsigned int v140 = v138 + 8;
                  }
                  v135 += 40;
                  unsigned int v138 = v140;
                }
                while (v135 != v136);
LABEL_244:
                if (v137 == v140)
                {
                  LOBYTE(v148) = 1;
                  unsigned int v140 = v137;
                }
                else
                {
                  int v147 = v137;
                  while (1)
                  {
                    int v148 = *(_DWORD **)v147;
                    if (**(_DWORD **)v147 == 1735162214) {
                      break;
                    }
                    v147 += 8;
                    if (v147 == v140)
                    {
                      int v148 = 0;
                      break;
                    }
                  }
                  int v149 = v137;
                  while (**(_DWORD **)v149 != 1819239265)
                  {
                    v149 += 8;
                    if (v149 == v140)
                    {
                      if (v148) {
                        goto LABEL_456;
                      }
                      goto LABEL_282;
                    }
                  }
                  if (!v148 || ((*(_DWORD *)(*(void *)v149 + 4) ^ v148[1]) & 0x100) != 0) {
                    goto LABEL_456;
                  }
                  LOBYTE(v148) = 0;
                }
LABEL_282:
                if (v283[1])
                {
                  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - (unint64_t)__p[1]) >> 3) <= v281) {
                    goto LABEL_467;
                  }
                  unsigned int v162 = (unint64_t *)((char *)__p[1] + 40 * v281 + 8);
                }
                else
                {
                  unsigned int v162 = &v288;
                }
                if ((v148 & 1) == 0)
                {
                  uint64_t v163 = 0;
                  int v241 = &v133[56 * v281];
                  int v263 = *(_DWORD *)v162;
                  v242 = v241 + 4;
                  v244 = v241 + 16;
                  int v245 = v241 + 8;
                  uint64_t v239 = v250 + 8;
                  unint64_t v164 = (v140 - v137) >> 3;
                  if (v164 <= 1) {
                    unint64_t v164 = 1;
                  }
                  unint64_t v246 = v164;
                  do
                  {
                    uint64_t v261 = v163;
                    uint64_t v165 = *(void *)&v137[8 * v163];
                    uint64_t v167 = *(unsigned int *)(v165 + 8);
                    v294[0] = *(_DWORD *)v165;
                    unsigned int v166 = v294[0];
                    v294[1] = v167;
                    int v168 = (void **)std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::find<std::pair<unsigned int,unsigned int>>((uint64_t)&v292, v294[0], v167);
                    if (!v281 && v293 != v168) {
                      goto LABEL_457;
                    }
                    unint64_t v169 = *(unsigned int *)(v165 + 12);
                    if (v169 + v167 > v259) {
                      goto LABEL_457;
                    }
                    if (v166 == 1751672161)
                    {
                      if (v169 < 0x24) {
                        goto LABEL_457;
                      }
                      _WORD *v242 = bswap32(*(unsigned __int16 *)&v250[v167 + 34]) >> 16;
                    }
                    v277 = (unsigned int *)v165;
                    if (v293 == v168)
                    {
                      if (*(unsigned char *)(v165 + 5))
                      {
                        if (v166 != 1819239265)
                        {
                          if (v166 == 1752003704)
                          {
                            *(_DWORD *)(v165 + 20) = v134;
                            if (!v169) {
                              goto LABEL_457;
                            }
                            v248 = &v250[v167];
                            unsigned int v185 = v250[v167];
                            char v243 = v250[v167];
                            if (v185 > 3 || (v185 & 3) == 0) {
                              goto LABEL_456;
                            }
                            unint64_t v256 = (unsigned __int16)*v242;
                            uint64_t v240 = *(unsigned __int16 *)v241;
                            if (v240 <= (unsigned __int16)(v256 - 1)) {
                              goto LABEL_456;
                            }
                            unint64_t v187 = 0;
                            __int16 v188 = 0;
                            int v189 = 0;
                            unint64_t v267 = 1;
                            v272 = 0;
                            while (1)
                            {
                              unint64_t v190 = v267;
                              v267 += 2;
                              if (v267 > v169) {
                                break;
                              }
                              unsigned int v191 = bswap32(*(unsigned __int16 *)&v248[v190]) >> 16;
                              if ((unint64_t)v188 >= v187)
                              {
                                uint64_t v192 = v188 - v272;
                                if (v188 - v272 <= -3) {
                                  std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
                                }
                                uint64_t v193 = v192 >> 1;
                                if (v187 - (unint64_t)v272 <= (v192 >> 1) + 1) {
                                  uint64_t v194 = v193 + 1;
                                }
                                else {
                                  uint64_t v194 = v187 - (void)v272;
                                }
                                if (v187 - (unint64_t)v272 >= 0x7FFFFFFFFFFFFFFELL) {
                                  uint64_t v195 = 0x7FFFFFFFFFFFFFFFLL;
                                }
                                else {
                                  uint64_t v195 = v194;
                                }
                                if (v195) {
                                  uint64_t v195 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v195);
                                }
                                else {
                                  uint64_t v196 = 0;
                                }
                                __int16 v197 = (char *)(v195 + 2 * v193);
                                *(_WORD *)__int16 v197 = v191;
                                unsigned int v198 = v197 + 2;
                                if (v188 == v272)
                                {
                                  int v199 = v272;
                                }
                                else
                                {
                                  int v199 = v272;
                                  do
                                  {
                                    __int16 v200 = *((_WORD *)v188 - 1);
                                    v188 -= 2;
                                    *((_WORD *)v197 - 1) = v200;
                                    v197 -= 2;
                                  }
                                  while (v188 != v272);
                                }
                                unint64_t v187 = v195 + 2 * v196;
                                if (v199) {
                                  operator delete(v272);
                                }
                                v272 = v197;
                                __int16 v188 = v198;
                              }
                              else
                              {
                                *(_WORD *)__int16 v188 = v191;
                                v188 += 2;
                              }
                              if (v256 <= (unsigned __int16)++v189)
                              {
                                unint64_t v252 = 0;
                                int v201 = 0;
                                int v202 = 0;
                                unint64_t v203 = 0;
                                while (1)
                                {
                                  if (v243)
                                  {
                                    if (v203 >= (uint64_t)(*v244 - *v245) >> 1) {
                                      goto LABEL_467;
                                    }
                                    LOWORD(v204) = *(_WORD *)(*v245 + 2 * v203);
                                  }
                                  else
                                  {
                                    if (v267 + 2 > v169)
                                    {
LABEL_414:
                                      if (!v202) {
                                        goto LABEL_454;
                                      }
                                      int v223 = 0;
                                      unsigned int v170 = 0;
LABEL_428:
                                      operator delete(v202);
                                      if (v272)
                                      {
                                        operator delete(v272);
                                        if (v223) {
                                          goto LABEL_436;
                                        }
                                      }
                                      else if (v223)
                                      {
                                        goto LABEL_436;
                                      }
LABEL_456:
                                      if (v137) {
                                        goto LABEL_457;
                                      }
LABEL_458:
                                      if (v282[0])
                                      {
                                        v282[1] = v282[0];
                                        operator delete(v282[0]);
                                      }
                                      goto LABEL_198;
                                    }
                                    unsigned int v204 = bswap32(*(unsigned __int16 *)&v248[v267]) >> 16;
                                    v267 += 2;
                                  }
                                  if ((unint64_t)v201 >= v252)
                                  {
                                    uint64_t v205 = v201 - v202;
                                    if (v201 - v202 <= -3) {
                                      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
                                    }
                                    uint64_t v206 = v205 >> 1;
                                    if (v252 - (unint64_t)v202 <= (v205 >> 1) + 1) {
                                      uint64_t v207 = v206 + 1;
                                    }
                                    else {
                                      uint64_t v207 = v252 - (void)v202;
                                    }
                                    if (v252 - (unint64_t)v202 >= 0x7FFFFFFFFFFFFFFELL) {
                                      uint64_t v208 = 0x7FFFFFFFFFFFFFFFLL;
                                    }
                                    else {
                                      uint64_t v208 = v207;
                                    }
                                    if (v208) {
                                      uint64_t v208 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v208);
                                    }
                                    else {
                                      uint64_t v209 = 0;
                                    }
                                    int v210 = (char *)(v208 + 2 * v206);
                                    *(_WORD *)int v210 = v204;
                                    __int16 v211 = v210 + 2;
                                    while (v201 != v202)
                                    {
                                      __int16 v212 = *((_WORD *)v201 - 1);
                                      v201 -= 2;
                                      *((_WORD *)v210 - 1) = v212;
                                      v210 -= 2;
                                    }
                                    unint64_t v252 = v208 + 2 * v209;
                                    if (v202) {
                                      operator delete(v202);
                                    }
                                    int v202 = v210;
                                    int v201 = v211;
                                  }
                                  else
                                  {
                                    *(_WORD *)int v201 = v204;
                                    v201 += 2;
                                  }
                                  if (++v203 == v256)
                                  {
                                    if (v256 >= v240)
                                    {
                                      __int16 v215 = v201;
                                    }
                                    else
                                    {
                                      unint64_t v213 = v256;
                                      do
                                      {
                                        if ((v243 & 2) != 0)
                                        {
                                          if (v213 >= (uint64_t)(*v244 - *v245) >> 1) {
                                            goto LABEL_467;
                                          }
                                          LOWORD(v214) = *(_WORD *)(*v245 + 2 * v213);
                                        }
                                        else
                                        {
                                          if (v267 + 2 > v169) {
                                            goto LABEL_414;
                                          }
                                          unsigned int v214 = bswap32(*(unsigned __int16 *)&v248[v267]) >> 16;
                                          v267 += 2;
                                        }
                                        if ((unint64_t)v201 >= v252)
                                        {
                                          uint64_t v216 = v201 - v202;
                                          if (v201 - v202 <= -3) {
                                            std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
                                          }
                                          uint64_t v217 = v216 >> 1;
                                          if (v252 - (unint64_t)v202 <= (v216 >> 1) + 1) {
                                            uint64_t v218 = v217 + 1;
                                          }
                                          else {
                                            uint64_t v218 = v252 - (void)v202;
                                          }
                                          if (v252 - (unint64_t)v202 >= 0x7FFFFFFFFFFFFFFELL) {
                                            uint64_t v219 = 0x7FFFFFFFFFFFFFFFLL;
                                          }
                                          else {
                                            uint64_t v219 = v218;
                                          }
                                          if (v219) {
                                            uint64_t v219 = (uint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v219);
                                          }
                                          else {
                                            uint64_t v220 = 0;
                                          }
                                          unsigned int v221 = (char *)(v219 + 2 * v217);
                                          *(_WORD *)unsigned int v221 = v214;
                                          __int16 v215 = v221 + 2;
                                          while (v201 != v202)
                                          {
                                            __int16 v222 = *((_WORD *)v201 - 1);
                                            v201 -= 2;
                                            *((_WORD *)v221 - 1) = v222;
                                            v221 -= 2;
                                          }
                                          unint64_t v252 = v219 + 2 * v220;
                                          if (v202) {
                                            operator delete(v202);
                                          }
                                          int v202 = v221;
                                        }
                                        else
                                        {
                                          *(_WORD *)int v201 = v214;
                                          __int16 v215 = v201 + 2;
                                        }
                                        ++v213;
                                        int v201 = v215;
                                      }
                                      while (v213 != v240);
                                    }
                                    size_t v224 = (2 * (v256 + v240));
                                    memset(v302, 170, sizeof(v302));
                                    std::vector<unsigned char>::vector(v302, v224);
                                    v225 = (woff2 *)v302[0];
                                    if (v302[1] != v302[0])
                                    {
                                      unint64_t v226 = 0;
                                      uint64_t v227 = 0;
                                      if (v240 <= 1) {
                                        uint64_t v228 = 1;
                                      }
                                      else {
                                        uint64_t v228 = v240;
                                      }
                                      while (1)
                                      {
                                        if (v226 < v256)
                                        {
                                          if ((v188 - v272) >> 1 <= v226) {
                                            goto LABEL_467;
                                          }
                                          *(_WORD *)((char *)v225 + v227) = bswap32(*(unsigned __int16 *)&v272[2 * v226]) >> 16;
                                          v227 += 2;
                                        }
                                        if ((v215 - v202) >> 1 == v226) {
                                          break;
                                        }
                                        *(_WORD *)((char *)v225 + v227) = bswap32(*(unsigned __int16 *)&v202[2 * v226]) >> 16;
                                        v227 += 2;
                                        if (v228 == ++v226)
                                        {
                                          unsigned int v170 = woff2::ComputeULongSum(v225, v224);
                                          int v223 = (*(uint64_t (**)(uint64_t, woff2 *, size_t))(*(void *)v257 + 16))(v257, v225, v224);
                                          if (v302[0])
                                          {
                                            v302[1] = v302[0];
                                            operator delete((void *)v302[0]);
                                          }
                                          goto LABEL_428;
                                        }
                                      }
                                    }
                                    goto LABEL_467;
                                  }
                                }
                              }
                            }
LABEL_454:
                            if (!v272) {
                              goto LABEL_456;
                            }
                          }
                          else
                          {
                            if (v166 != 1735162214) {
                              goto LABEL_457;
                            }
                            *(_DWORD *)(v165 + 20) = v134;
                            if (v137 == v140)
                            {
LABEL_315:
                              BOOL v247 = 0;
                            }
                            else
                            {
                              int v172 = v137;
                              while (1)
                              {
                                BOOL v247 = *(_DWORD **)v172;
                                if (**(_DWORD **)v172 == 1819239265) {
                                  break;
                                }
                                v172 += 8;
                                if (v172 == v140) {
                                  goto LABEL_315;
                                }
                              }
                            }
                            unint64_t v173 = *(unsigned int *)(v165 + 16);
                            v272 = (char *)operator new(0x70uLL);
                            *((_OWORD *)v272 + 5) = 0u;
                            *((_OWORD *)v272 + 6) = 0u;
                            *((_OWORD *)v272 + 3) = 0u;
                            *((_OWORD *)v272 + 4) = 0u;
                            *((_OWORD *)v272 + 1) = 0u;
                            *((_OWORD *)v272 + 2) = 0u;
                            *(_OWORD *)v272 = 0u;
                            (*(void (**)(uint64_t))(*(void *)v257 + 32))(v257);
                            if (v173 >= 6)
                            {
                              int v174 = &v250[v167];
                              __int16 v238 = *(_WORD *)&v250[v167 + 2];
                              uint64_t v175 = bswap32(*(unsigned __int16 *)&v250[v167 + 4]) >> 16;
                              *(_WORD *)int v241 = v175;
                              if (v173 >= 8)
                              {
                                unsigned int v176 = *((unsigned __int16 *)v174 + 3);
                                *((_WORD *)v241 + 1) = __rev16(v176);
                                char v177 = v176 ? 2 : 1;
                                if (v247[6] == (v175 + 1) << v177)
                                {
                                  unsigned int v178 = *(_DWORD *)(v165 + 16);
                                  if (v178 >= 0x24)
                                  {
                                    uint64_t v179 = 0;
                                    int v180 = v272 + 8;
                                    unsigned int v181 = 36;
                                    while (v179 + 12 <= v173)
                                    {
                                      uint64_t v182 = bswap32(*(_DWORD *)&v239[v167 + v179]);
                                      if (v182 > v178 - v181) {
                                        break;
                                      }
                                      *(v180 - 1) = &v174[v181];
                                      void *v180 = v182;
                                      v181 += v182;
                                      v180 += 2;
                                      v179 += 4;
                                      if (v179 == 28)
                                      {
                                        int v183 = (unsigned int *)*((void *)v272 + 3);
                                        v299 = (unsigned int *)*((void *)v272 + 2);
                                        v300 = v183;
                                        uint64_t v301 = 0;
                                        int v184 = (uint64_t *)*((void *)v272 + 7);
                                        v296 = (uint64_t **)*((void *)v272 + 6);
                                        v297 = v184;
                                        uint64_t v298 = 0;
                                        unint64_t v237 = *((void *)v272 + 11);
                                        if ((v238 & 0x100) == 0 || v178 - v181 >= (v175 + 7) >> 3)
                                        {
                                          memset(&v295, 170, sizeof(v295));
                                          std::vector<unsigned int>::vector(&v295, v175 + 1);
                                          memset(&v294[3], 0, 24);
                                          if ((((*(unsigned __int16 *)v241 + 31) >> 3) & 0x3FFCuLL) <= v237) {
                                            operator new[]();
                                          }
                                          if (v295.__begin_)
                                          {
                                            v295.__end_ = v295.__begin_;
                                            operator delete(v295.__begin_);
                                          }
                                        }
                                        break;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          operator delete(v272);
                          goto LABEL_456;
                        }
                        unsigned int v170 = 0;
                      }
                      else
                      {
                        if (v166 == 1751474532)
                        {
                          if (v169 < 0xC) {
                            goto LABEL_457;
                          }
                          *(_DWORD *)&v239[v167] = 0;
                          unint64_t v169 = *(unsigned int *)(v165 + 12);
                        }
                        *(_DWORD *)(v165 + 20) = v134;
                        int v171 = (woff2 *)&v250[*(unsigned int *)(v165 + 8)];
                        unsigned int v170 = woff2::ComputeULongSum(v171, v169);
                        if (((*(uint64_t (**)(uint64_t, woff2 *, unint64_t))(*(void *)v257 + 16))(v257, v171, v169) & 1) == 0)
                        {
LABEL_457:
                          operator delete(v137);
                          goto LABEL_458;
                        }
                      }
LABEL_436:
                      *((_DWORD *)std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned int,unsigned int> const&>,std::tuple<>>(&v292, v294[0], v294[1], v294)+ 9) = v170;
                    }
                    else
                    {
                      unsigned int v170 = *((_DWORD *)std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned int,unsigned int> const&>,std::tuple<>>(&v292, v166, v167, v294)+ 9);
                    }
                    unsigned int v229 = v277[6];
                    unint64_t v303 = __PAIR64__(bswap32(v277[5]), bswap32(v170));
                    unsigned int v304 = bswap32(v229);
                    uint64_t v230 = std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)v241 + 4, *v277, v277);
                    if (!(*(unsigned int (**)(uint64_t, unint64_t *, void, uint64_t))(*(void *)v257 + 24))(v257, &v303, (*((_DWORD *)v230 + 8) + 4), 12))goto LABEL_456; {
                    int v231 = 0;
                    }
                    unint64_t v232 = 0;
                    do
                    {
                      v231 += bswap32(*(_DWORD *)((char *)&v303 + v232));
                      BOOL v12 = v232 >= 8;
                      v232 += 4;
                    }
                    while (!v12);
                      goto LABEL_456;
                    unsigned int v233 = v277[5];
                    unsigned int v234 = v277[6];
                    if ((*(uint64_t (**)(uint64_t))(*(void *)v257 + 32))(v257) < (unint64_t)(v234 + v233)) {
                      goto LABEL_456;
                    }
                    int v134 = (*(uint64_t (**)(uint64_t))(*(void *)v257 + 32))(v257);
                    v263 += v170 + v231;
                    uint64_t v163 = v261 + 1;
                  }
                  while (v261 + 1 != v246);
                  if (v137 != v140)
                  {
                    v235 = v137;
                    while (1)
                    {
                      v236 = *(_DWORD **)v235;
                      if (**(_DWORD **)v235 == 1751474532) {
                        break;
                      }
                      v235 += 8;
                      if (v235 == v140) {
                        goto LABEL_287;
                      }
                    }
                    if (v236[6] < 0xCu) {
                      goto LABEL_456;
                    }
                    LODWORD(v302[0]) = bswap32(-1313820742 - v263);
                    if (((*(uint64_t (**)(uint64_t, uint64_t *, void, uint64_t))(*(void *)v257 + 24))(v257, v302, (v236[5] + 8), 4) & 1) == 0)goto LABEL_456; {
                  }
                    }
                }
LABEL_287:
                if (v137) {
                  operator delete(v137);
                }
                if (++v281 >= 0x6DB6DB6DB6DB6DB7 * ((v290 - (unsigned char *)v289) >> 3)) {
                  goto LABEL_458;
                }
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v287 - (unint64_t)__p[1]) >> 3) <= v281) {
                goto LABEL_467;
              }
              int v150 = (char *)__p[1] + 40 * v281;
              int v151 = (unsigned __int16 *)*((void *)v150 + 2);
              int v152 = (unsigned __int16 *)*((void *)v150 + 3);
              if (v151 != v152)
              {
                unsigned int v137 = 0;
                int v153 = 0;
                unint64_t v154 = 0;
                while (0xCCCCCCCCCCCCCCCDLL * (((char *)v285[1] - (char *)v285[0]) >> 3) > *v151)
                {
                  unsigned int v155 = (char *)v285[0] + 40 * *v151;
                  if ((unint64_t)v153 >= v154)
                  {
                    uint64_t v156 = (v153 - v137) >> 3;
                    unint64_t v157 = v156 + 1;
                    if ((unint64_t)(v156 + 1) >> 61) {
                      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
                    }
                    if ((uint64_t)(v154 - (void)v137) >> 2 > v157) {
                      unint64_t v157 = (uint64_t)(v154 - (void)v137) >> 2;
                    }
                    if (v154 - (unint64_t)v137 >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v158 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v158 = v157;
                    }
                    if (v158) {
                      unint64_t v158 = (unint64_t)std::__allocate_at_least[abi:fe180100]<std::allocator<TScalerVariation>>(v158);
                    }
                    else {
                      uint64_t v159 = 0;
                    }
                    unsigned int v160 = (char *)(v158 + 8 * v156);
                    *(void *)unsigned int v160 = v155;
                    unsigned int v140 = v160 + 8;
                    while (v153 != v137)
                    {
                      uint64_t v161 = *((void *)v153 - 1);
                      v153 -= 8;
                      *((void *)v160 - 1) = v161;
                      v160 -= 8;
                    }
                    unint64_t v154 = v158 + 8 * v159;
                    if (v137) {
                      operator delete(v137);
                    }
                    unsigned int v137 = v160;
                  }
                  else
                  {
                    *(void *)int v153 = v155;
                    unsigned int v140 = v153 + 8;
                  }
                  ++v151;
                  int v153 = v140;
                  if (v151 == v152) {
                    goto LABEL_244;
                  }
                }
                goto LABEL_467;
              }
LABEL_281:
              unsigned int v140 = 0;
              unsigned int v137 = 0;
              LOBYTE(v148) = 1;
              goto LABEL_282;
            }
          }
        }
LABEL_467:
        __break(1u);
        return;
      }
    }
  }
LABEL_198:
  uint64_t v118 = (char *)__p[1];
  if (__p[1])
  {
    int v119 = (char *)v287;
    uint64_t v120 = __p[1];
    if ((void *)v287 != __p[1])
    {
      do
      {
        int v121 = (void *)*((void *)v119 - 3);
        if (v121)
        {
          *((void *)v119 - 2) = v121;
          operator delete(v121);
        }
        v119 -= 40;
      }
      while (v119 != v118);
      uint64_t v120 = __p[1];
    }
    *(void *)&long long v287 = v118;
    operator delete(v120);
  }
  if (v285[0])
  {
    v285[1] = v285[0];
    operator delete(v285[0]);
  }
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(v293[0]);
  uint64_t v122 = v289;
  if (v289)
  {
    uint64_t v123 = (uint64_t)v290;
    int v124 = v289;
    if (v290 != v289)
    {
      do
      {
        v123 -= 56;
      }
      while ((unsigned char *)v123 != v122);
      int v124 = v289;
    }
    v290 = v122;
    operator delete(v124);
  }
}

void sub_1B535C6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,char a63)
{
  if (a56) {
    MEMORY[0x1BA9994A0](a56, 0x1000C8077774924);
  }
  if (a36) {
    MEMORY[0x1BA9994A0](a36, 0x1000C8005A209FELL);
  }
  BOOL v66 = *(void **)(v64 - 232);
  if (v66)
  {
    *(void *)(v64 - 224) = v66;
    operator delete(v66);
  }
  unint64_t v67 = *(void **)(v64 - 208);
  if (v67)
  {
    *(void *)(v64 - 200) = v67;
    operator delete(v67);
  }
  operator delete(__p);
  if (v63) {
    operator delete(v63);
  }
  if (a60) {
    operator delete(a60);
  }
  _Unwind_Resume(a1);
}

void woff2::anonymous namespace'::WOFF2Header::~WOFF2Header(woff2::_anonymous_namespace_::WOFF2Header *this)
{
  uint64_t v2 = *((void *)this + 7);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 8);
    uint64_t v4 = (void *)*((void *)this + 7);
    if (v3 != v2)
    {
      do
      {
        BOOL v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(void *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 40;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 7);
    }
    *((void *)this + 8) = v2;
    operator delete(v4);
  }
  unsigned int v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
}

void woff2::anonymous namespace'::RebuildMetadata::~RebuildMetadata(woff2::_anonymous_namespace_::RebuildMetadata *this)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*((void **)this + 5));
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 2);
    uint64_t v4 = (void *)*((void *)this + 1);
    if (v3 != v2)
    {
      do
      {
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 1);
    }
    *((void *)this + 2) = v2;
    operator delete(v4);
  }
}

void std::vector<woff2::Table>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    double v21 = &v3[40 * a2];
    goto LABEL_19;
  }
  unint64_t v7 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3) >= v6)
  {
    size_t v22 = 40 * ((40 * v6 - 40) / 0x28) + 40;
    bzero(a1[1], v22);
    double v21 = &v4[v22];
LABEL_19:
    a1[1] = v21;
    return;
  }
  if (a2 > 0x666666666666666) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v10 = 0x666666666666666;
  }
  else {
    unint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<woff2::Table>>(v10);
  BOOL v12 = &v11[40 * v5];
  double v14 = &v11[40 * v13];
  size_t v15 = 40 * ((40 * v6 - 40) / 0x28) + 40;
  bzero(v12, v15);
  int v16 = &v12[v15];
  BOOL v18 = *a1;
  unsigned int v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      long long v19 = *(_OWORD *)(v17 - 40);
      long long v20 = *(_OWORD *)(v17 - 24);
      *((void *)v12 - 1) = *((void *)v17 - 1);
      *(_OWORD *)(v12 - 24) = v20;
      *(_OWORD *)(v12 - 40) = v19;
      v12 -= 40;
      v17 -= 40;
    }
    while (v17 != v18);
    unsigned int v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
  {
    operator delete(v17);
  }
}

void std::vector<unsigned short>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    long long v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  unint64_t v6 = a2 - v5;
  unint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    long long v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  unint64_t v8 = v7 - v3;
  if (v8 <= a2) {
    unint64_t v9 = a2;
  }
  else {
    unint64_t v9 = v8;
  }
  if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t v11 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(v10);
  BOOL v12 = *a1;
  uint64_t v13 = a1[1];
  double v14 = &v11[2 * v5];
  int v16 = &v11[2 * v15];
  bzero(v14, 2 * v6);
  unsigned int v17 = &v14[2 * v6];
  while (v13 != v12)
  {
    __int16 v18 = *((_WORD *)v13 - 1);
    v13 -= 2;
    *((_WORD *)v14 - 1) = v18;
    v14 -= 2;
  }
  *a1 = v14;
  a1[1] = v17;
  a1[2] = v16;
  if (v12)
  {
    operator delete(v12);
  }
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<woff2::Table>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(40 * a1);
}

void *std::__allocate_at_least[abi:fe180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:fe180100]();
  }
  return operator new(2 * a1);
}

void std::vector<woff2::anonymous namespace'::WOFF2FontInfo>::resize(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v4 = (char *)a1[1];
  unint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((v4 - (unsigned char *)*a1) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      unsigned int v26 = &v5[56 * a2];
      while (v4 != v26)
      {
        v4 -= 56;
      }
      a1[1] = v26;
    }
  }
  else
  {
    unint64_t v8 = a1[2];
    if (0x6DB6DB6DB6DB6DB7 * ((v8 - v4) >> 3) >= v7)
    {
      BOOL v27 = &v4[56 * v7];
      do
      {
        *((_OWORD *)v4 + 1) = 0uLL;
        *((_OWORD *)v4 + 2) = 0uLL;
        *((void *)v4 + 6) = 0;
        *(_OWORD *)uint64_t v4 = 0uLL;
        *((void *)v4 + 4) = v4 + 40;
        v4 += 56;
      }
      while (v4 != v27);
      a1[1] = v27;
    }
    else
    {
      if (a2 > 0x492492492492492) {
        std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
      }
      unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v5) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0x249249249249249) {
        unint64_t v11 = 0x492492492492492;
      }
      else {
        unint64_t v11 = v10;
      }
      if (v11 > 0x492492492492492) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      BOOL v12 = (char *)operator new(56 * v11);
      uint64_t v13 = &v12[56 * v6];
      double v14 = &v12[56 * a2];
      uint64_t v15 = v13;
      do
      {
        *((_OWORD *)v15 + 1) = 0uLL;
        *((_OWORD *)v15 + 2) = 0uLL;
        *((void *)v15 + 6) = 0;
        *(_OWORD *)uint64_t v15 = 0uLL;
        *((void *)v15 + 4) = v15 + 40;
        v15 += 56;
      }
      while (v15 != v14);
      int v16 = &v12[56 * v11];
      if (v4 == v5)
      {
        *a1 = v13;
        a1[1] = v14;
        a1[2] = v16;
      }
      else
      {
        uint64_t v17 = 0;
        do
        {
          __int16 v18 = &v13[v17];
          long long v19 = &v4[v17];
          int v20 = *(_DWORD *)&v4[v17 - 56];
          *((_WORD *)v18 - 26) = *(_WORD *)&v4[v17 - 52];
          *((_DWORD *)v18 - 14) = v20;
          *((_OWORD *)v18 - 3) = *(_OWORD *)&v4[v17 - 48];
          *((void *)v18 - 4) = *(void *)&v4[v17 - 32];
          *((void *)v19 - 6) = 0;
          *((void *)v19 - 5) = 0;
          *((void *)v19 - 4) = 0;
          *((void *)v18 - 3) = *(void *)&v4[v17 - 24];
          double v21 = &v4[v17 - 16];
          uint64_t v22 = *(void *)v21;
          *(void *)&v13[v17 - 16] = *(void *)v21;
          uint64_t v23 = (uint64_t)&v13[v17 - 16];
          uint64_t v24 = *(void *)&v4[v17 - 8];
          *((void *)v18 - 1) = v24;
          if (v24)
          {
            *(void *)(v22 + 16) = v23;
            *((void *)v19 - 3) = v21;
            *(void *)double v21 = 0;
            *(void *)&v4[v17 - 8] = 0;
          }
          else
          {
            *((void *)v18 - 3) = v23;
          }
          v17 -= 56;
        }
        while (&v4[v17] != v5);
        uint64_t v4 = (char *)*a1;
        uint64_t v25 = (uint64_t)a1[1];
        *a1 = &v13[v17];
        a1[1] = v14;
        a1[2] = v16;
        while ((char *)v25 != v4)
        {
          v25 -= 56;
        }
      }
      if (v4)
      {
        operator delete(v4);
      }
    }
  }
}

unsigned __int8 *woff2::anonymous namespace'::StoreOffsetTable(woff2::_anonymous_namespace_ *this, unsigned __int8 *a2, int a3, unsigned int a4)
{
  uint64_t v4 = &a2[(void)this];
  *uint64_t v4 = HIBYTE(a3);
  v4[1] = BYTE2(a3);
  v4[2] = BYTE1(a3);
  v4[3] = a3;
  *((_WORD *)v4 + 2) = __rev16(a4);
  unsigned int v5 = -1;
  while (a4 >> (v5++ + 2))
    ;
  unint64_t v7 = (_WORD *)((char *)this + (void)a2);
  void v7[3] = bswap32(16 << v5) >> 16;
  v7[4] = bswap32(v5) >> 16;
  v7[5] = bswap32(16 * a4 - (16 << v5)) >> 16;
  return a2 + 12;
}

uint64_t woff2::anonymous namespace'::StoreTableEntry(woff2::_anonymous_namespace_ *this, unsigned __int8 *a2, unsigned int a3)
{
  *(_DWORD *)((char *)this + a2) = bswap32(a3);
  *(_DWORD *)((char *)this + (a2 + 4)) = 0;
  *(_DWORD *)((char *)this + (a2 + 8)) = 0;
  *(_DWORD *)((char *)this + (a2 + 12)) = 0;
  return (a2 + 16);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:fe180100](a1, a2);
    unint64_t v6 = (unsigned char *)a1[1];
    unint64_t v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B535CFD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<woff2::Table>::__init_with_size[abi:fe180100]<woff2::Table*,woff2::Table*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x666666666666667) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    float64x2_t result = std::__allocate_at_least[abi:fe180100]<std::allocator<woff2::Table>>(a4);
    unint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    v4[2] = &result[5 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      float64x2_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1B535D078(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = v10;
          uint64_t v11 = a2 - v10;
          unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v10) >> 3);
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                unsigned int v49 = *(_DWORD *)(a2 - 40);
                unint64_t v48 = a2 - 40;
                if (v49 < *(_DWORD *)v10)
                {
                  uint64_t v133 = *(void *)(v10 + 32);
                  long long v117 = *(_OWORD *)v10;
                  long long v125 = *(_OWORD *)(v10 + 16);
                  long long v50 = *(_OWORD *)v48;
                  long long v51 = *(_OWORD *)(v48 + 16);
                  *(void *)(v10 + 32) = *(void *)(v48 + 32);
                  *(_OWORD *)unint64_t v10 = v50;
                  *(_OWORD *)(v10 + 16) = v51;
                  *(void *)(v48 + 32) = v133;
                  *(_OWORD *)unint64_t v48 = v117;
                  *(_OWORD *)(v48 + 16) = v125;
                }
                break;
              case 3uLL:
                std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)v10, (unsigned int *)(v10 + 40), (unsigned int *)(a2 - 40));
                break;
              case 4uLL:
                std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(v10, v10 + 40, v10 + 80, a2 - 40);
                break;
              case 5uLL:
                std::__sort5[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(v10, v10 + 40, v10 + 80, v10 + 120, a2 - 40);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v11 <= 959)
          {
            uint64_t v52 = (_DWORD *)(v10 + 40);
            BOOL v54 = v10 == a2 || v52 == (_DWORD *)a2;
            if (a4)
            {
              if (!v54)
              {
                uint64_t v55 = 0;
                unint64_t v56 = v10;
                do
                {
                  unint64_t v57 = v52;
                  unsigned int v58 = *v52;
                  if (v58 < *(_DWORD *)v56)
                  {
                    long long v118 = *(_OWORD *)(v56 + 44);
                    long long v126 = *(_OWORD *)(v56 + 60);
                    int v134 = *(_DWORD *)(v56 + 76);
                    uint64_t v59 = v55;
                    while (1)
                    {
                      uint64_t v60 = v10 + v59;
                      long long v61 = *(_OWORD *)(v10 + v59 + 16);
                      *(_OWORD *)(v60 + 40) = *(_OWORD *)(v10 + v59);
                      *(_OWORD *)(v60 + 56) = v61;
                      *(void *)(v60 + 72) = *(void *)(v10 + v59 + 32);
                      if (!v59) {
                        break;
                      }
                      v59 -= 40;
                      if (v58 >= *(_DWORD *)(v60 - 40))
                      {
                        uint64_t v62 = v10 + v59 + 40;
                        goto LABEL_90;
                      }
                    }
                    uint64_t v62 = v10;
LABEL_90:
                    *(_DWORD *)uint64_t v62 = v58;
                    *(_DWORD *)(v62 + 36) = v134;
                    *(_OWORD *)(v62 + 20) = v126;
                    *(_OWORD *)(v62 + 4) = v118;
                  }
                  uint64_t v52 = v57 + 10;
                  v55 += 40;
                  unint64_t v56 = (unint64_t)v57;
                }
                while (v57 + 10 != (_DWORD *)a2);
              }
            }
            else if (!v54)
            {
              uint64_t v96 = -2;
              uint64_t v97 = 1;
              unint64_t v98 = v10;
              do
              {
                unsigned int v99 = *v52;
                if (*v52 < *(_DWORD *)v98)
                {
                  long long v121 = *(_OWORD *)(v98 + 44);
                  long long v129 = *(_OWORD *)(v98 + 60);
                  unsigned int v137 = *(_DWORD *)(v98 + 76);
                  uint64_t v100 = v96;
                  uint64_t v101 = v52;
                  do
                  {
                    long long v102 = *(_OWORD *)(v101 - 6);
                    *(_OWORD *)uint64_t v101 = *(_OWORD *)(v101 - 10);
                    *((_OWORD *)v101 + 1) = v102;
                    *((void *)v101 + 4) = *((void *)v101 - 1);
                    BOOL v4 = __CFADD__(v100++, 1);
                    if (v4) {
                      goto LABEL_141;
                    }
                    uint64_t v103 = v101 - 10;
                    unsigned int v104 = *(v101 - 20);
                    v101 -= 10;
                  }
                  while (v99 < v104);
                  unsigned int *v103 = v99;
                  v103[9] = v137;
                  *(_OWORD *)(v103 + 5) = v129;
                  *(_OWORD *)(v103 + 1) = v121;
                }
                unint64_t v98 = v10 + 40 * v97++;
                v52 += 10;
                --v96;
              }
              while (v52 != (_DWORD *)a2);
            }
            return;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v63 = (v12 - 2) >> 1;
              int64_t v64 = v63;
              do
              {
                int64_t v65 = v64;
                if (v63 >= v64)
                {
                  uint64_t v66 = (2 * v64) | 1;
                  unint64_t v67 = v10 + 40 * v66;
                  if (2 * v65 + 2 < (uint64_t)v12)
                  {
                    unsigned int v69 = *(_DWORD *)v67;
                    unsigned int v68 = *(_DWORD *)(v67 + 40);
                    if (*(_DWORD *)v67 <= v68) {
                      unsigned int v69 = *(_DWORD *)(v67 + 40);
                    }
                    if (*(_DWORD *)v67 < v68)
                    {
                      v67 += 40;
                      uint64_t v66 = 2 * v65 + 2;
                    }
                  }
                  else
                  {
                    unsigned int v69 = *(_DWORD *)v67;
                  }
                  unint64_t v70 = v10 + 40 * v65;
                  unsigned int v71 = *(_DWORD *)v70;
                  if (v69 >= *(_DWORD *)v70)
                  {
                    int v135 = *(_DWORD *)(v70 + 36);
                    long long v119 = *(_OWORD *)(v70 + 4);
                    long long v127 = *(_OWORD *)(v70 + 20);
                    do
                    {
                      unint64_t v72 = v67;
                      long long v73 = *(_OWORD *)v67;
                      long long v74 = *(_OWORD *)(v67 + 16);
                      *(void *)(v70 + 32) = *(void *)(v67 + 32);
                      *(_OWORD *)unint64_t v70 = v73;
                      *(_OWORD *)(v70 + 16) = v74;
                      if (v63 < v66) {
                        break;
                      }
                      uint64_t v75 = (2 * v66) | 1;
                      unint64_t v67 = v10 + 40 * v75;
                      uint64_t v66 = 2 * v66 + 2;
                      if (v66 < (uint64_t)v12)
                      {
                        unsigned int v77 = *(_DWORD *)v67;
                        unsigned int v76 = *(_DWORD *)(v67 + 40);
                        if (*(_DWORD *)v67 <= v76) {
                          unsigned int v77 = *(_DWORD *)(v67 + 40);
                        }
                        if (*(_DWORD *)v67 >= v76) {
                          uint64_t v66 = v75;
                        }
                        else {
                          v67 += 40;
                        }
                      }
                      else
                      {
                        unsigned int v77 = *(_DWORD *)v67;
                        uint64_t v66 = v75;
                      }
                      unint64_t v70 = v72;
                    }
                    while (v77 >= v71);
                    *(_DWORD *)unint64_t v72 = v71;
                    *(_DWORD *)(v72 + 36) = v135;
                    *(_OWORD *)(v72 + 20) = v127;
                    *(_OWORD *)(v72 + 4) = v119;
                  }
                }
                int64_t v64 = v65 - 1;
              }
              while (v65);
              int64_t v78 = v11 / 0x28uLL;
              do
              {
                uint64_t v79 = 0;
                uint64_t v136 = *(void *)(v10 + 32);
                long long v120 = *(_OWORD *)v10;
                long long v128 = *(_OWORD *)(v10 + 16);
                unint64_t v80 = v10;
                do
                {
                  uint64_t v81 = v80 + 40 * v79 + 40;
                  uint64_t v82 = (2 * v79) | 1;
                  uint64_t v83 = 2 * v79 + 2;
                  if (v83 < v78 && *(_DWORD *)v81 < *(_DWORD *)(v81 + 40))
                  {
                    v81 += 40;
                    uint64_t v82 = v83;
                  }
                  long long v84 = *(_OWORD *)v81;
                  long long v85 = *(_OWORD *)(v81 + 16);
                  *(void *)(v80 + 32) = *(void *)(v81 + 32);
                  *(_OWORD *)unint64_t v80 = v84;
                  *(_OWORD *)(v80 + 16) = v85;
                  unint64_t v80 = v81;
                  uint64_t v79 = v82;
                }
                while (v82 <= (uint64_t)((unint64_t)(v78 - 2) >> 1));
                a2 -= 40;
                if (v81 == a2)
                {
                  *(void *)(v81 + 32) = v136;
                  *(_OWORD *)uint64_t v81 = v120;
                  *(_OWORD *)(v81 + 16) = v128;
                }
                else
                {
                  long long v86 = *(_OWORD *)a2;
                  long long v87 = *(_OWORD *)(a2 + 16);
                  *(void *)(v81 + 32) = *(void *)(a2 + 32);
                  *(_OWORD *)uint64_t v81 = v86;
                  *(_OWORD *)(v81 + 16) = v87;
                  *(void *)(a2 + 32) = v136;
                  *(_OWORD *)a2 = v120;
                  *(_OWORD *)(a2 + 16) = v128;
                  uint64_t v88 = v81 - v10 + 40;
                  if (v88 >= 41)
                  {
                    unint64_t v89 = (v88 / 0x28uLL - 2) >> 1;
                    unint64_t v90 = v10 + 40 * v89;
                    unsigned int v91 = *(_DWORD *)v81;
                    if (*(_DWORD *)v90 < *(_DWORD *)v81)
                    {
                      int v113 = *(_DWORD *)(v81 + 36);
                      long long v107 = *(_OWORD *)(v81 + 4);
                      long long v110 = *(_OWORD *)(v81 + 20);
                      do
                      {
                        uint64_t v92 = v90;
                        long long v93 = *(_OWORD *)v90;
                        long long v94 = *(_OWORD *)(v90 + 16);
                        *(void *)(v81 + 32) = *(void *)(v90 + 32);
                        *(_OWORD *)uint64_t v81 = v93;
                        *(_OWORD *)(v81 + 16) = v94;
                        if (!v89) {
                          break;
                        }
                        unint64_t v89 = (v89 - 1) >> 1;
                        unint64_t v90 = v10 + 40 * v89;
                        uint64_t v81 = v92;
                      }
                      while (*(_DWORD *)v90 < v91);
                      *(_DWORD *)uint64_t v92 = v91;
                      *(_DWORD *)(v92 + 36) = v113;
                      *(_OWORD *)(v92 + 20) = v110;
                      *(_OWORD *)(v92 + 4) = v107;
                    }
                  }
                }
              }
              while (v78-- > 2);
            }
            return;
          }
          unint64_t v13 = v12 >> 1;
          unint64_t v14 = v10 + 40 * (v12 >> 1);
          if ((unint64_t)v11 >= 0x1401)
          {
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)a1, (unsigned int *)(a1 + 40 * (v12 >> 1)), (unsigned int *)(a2 - 40));
            uint64_t v15 = 5 * v13;
            int v16 = (unsigned int *)(a1 + 40 * v13 - 40);
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)(a1 + 40), v16, (unsigned int *)(a2 - 80));
            uint64_t v17 = (unsigned int *)(a1 + 40 + 8 * v15);
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)(a1 + 80), v17, (unsigned int *)(a2 - 120));
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)v16, (unsigned int *)v14, v17);
            uint64_t v130 = *(void *)(a1 + 32);
            long long v114 = *(_OWORD *)a1;
            long long v122 = *(_OWORD *)(a1 + 16);
            long long v18 = *(_OWORD *)v14;
            long long v19 = *(_OWORD *)(v14 + 16);
            *(void *)(a1 + 32) = *(void *)(v14 + 32);
            *(_OWORD *)a1 = v18;
            *(_OWORD *)(a1 + 16) = v19;
            *(void *)(v14 + 32) = v130;
            *(_OWORD *)unint64_t v14 = v114;
            *(_OWORD *)(v14 + 16) = v122;
          }
          else
          {
            std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)(a1 + 40 * (v12 >> 1)), (unsigned int *)a1, (unsigned int *)(a2 - 40));
          }
          --a3;
          unsigned int v20 = *(_DWORD *)a1;
          if ((a4 & 1) != 0 || *(_DWORD *)(a1 - 40) < v20) {
            break;
          }
          int v112 = *(_DWORD *)(a1 + 36);
          long long v106 = *(_OWORD *)(a1 + 4);
          long long v109 = *(_OWORD *)(a1 + 20);
          if (v20 >= *(_DWORD *)(a2 - 40))
          {
            unint64_t v38 = a1 + 40;
            do
            {
              unint64_t v10 = v38;
              if (v38 >= a2) {
                break;
              }
              v38 += 40;
            }
            while (v20 >= *(_DWORD *)v10);
          }
          else
          {
            unint64_t v36 = (unsigned int *)(a1 + 40);
            do
            {
              if (v36 == (unsigned int *)a2) {
                goto LABEL_141;
              }
              unsigned int v37 = *v36;
              v36 += 10;
            }
            while (v20 >= v37);
            unint64_t v10 = (unint64_t)(v36 - 10);
          }
          unint64_t v39 = a2;
          if (v10 < a2)
          {
            unint64_t v39 = a2;
            while (v39 != a1)
            {
              unsigned int v40 = *(_DWORD *)(v39 - 40);
              v39 -= 40;
              if (v20 >= v40) {
                goto LABEL_57;
              }
            }
LABEL_141:
            __break(1u);
          }
LABEL_57:
          if (v10 < v39)
          {
            uint64_t v132 = *(void *)(v10 + 32);
            long long v116 = *(_OWORD *)v10;
            long long v124 = *(_OWORD *)(v10 + 16);
            long long v41 = *(_OWORD *)v39;
            long long v42 = *(_OWORD *)(v39 + 16);
            *(void *)(v10 + 32) = *(void *)(v39 + 32);
            *(_OWORD *)unint64_t v10 = v41;
            *(_OWORD *)(v10 + 16) = v42;
            *(void *)(v39 + 32) = v132;
            *(_OWORD *)unint64_t v39 = v116;
            *(_OWORD *)(v39 + 16) = v124;
            unint64_t v43 = (unsigned int *)(v10 + 40);
            do
            {
              if (v43 == (unsigned int *)a2) {
                goto LABEL_141;
              }
              unsigned int v44 = *v43;
              v43 += 10;
            }
            while (v20 >= v44);
            unint64_t v10 = (unint64_t)(v43 - 10);
            while (v39 != a1)
            {
              unsigned int v45 = *(_DWORD *)(v39 - 40);
              v39 -= 40;
              if (v20 >= v45) {
                goto LABEL_57;
              }
            }
            goto LABEL_141;
          }
          BOOL v4 = v10 - 40 >= a1;
          BOOL v5 = v10 - 40 == a1;
          if (v10 - 40 != a1)
          {
            long long v46 = *(_OWORD *)(v10 - 40);
            long long v47 = *(_OWORD *)(v10 - 24);
            *(void *)(a1 + 32) = *(void *)(v10 - 8);
            *(_OWORD *)a1 = v46;
            *(_OWORD *)(a1 + 16) = v47;
          }
          a4 = 0;
          *(_DWORD *)(v10 - 40) = v20;
          *(_DWORD *)(v10 - 4) = v112;
          *(_OWORD *)(v10 - 20) = v109;
          *(_OWORD *)(v10 - 36) = v106;
        }
        uint64_t v21 = 0;
        int v111 = *(_DWORD *)(a1 + 36);
        long long v105 = *(_OWORD *)(a1 + 4);
        long long v108 = *(_OWORD *)(a1 + 20);
        do
        {
          uint64_t v22 = (unsigned int *)(a1 + v21 + 40);
          if (v22 == (unsigned int *)a2) {
            goto LABEL_141;
          }
          v21 += 40;
        }
        while (*v22 < v20);
        unint64_t v23 = a1 + v21;
        unint64_t v24 = a2;
        if (v21 != 40)
        {
          while (v24 != a1)
          {
            unsigned int v25 = *(_DWORD *)(v24 - 40);
            v24 -= 40;
            if (v25 < v20) {
              goto LABEL_21;
            }
          }
          goto LABEL_141;
        }
        unint64_t v24 = a2;
        do
        {
          if (v23 >= v24) {
            break;
          }
          unsigned int v26 = *(_DWORD *)(v24 - 40);
          v24 -= 40;
        }
        while (v26 >= v20);
LABEL_21:
        if (v23 >= v24)
        {
          unint64_t v10 = a1 + v21;
        }
        else
        {
          unint64_t v27 = v24;
          unint64_t v10 = v23;
          do
          {
            uint64_t v131 = *(void *)(v10 + 32);
            long long v115 = *(_OWORD *)v10;
            long long v123 = *(_OWORD *)(v10 + 16);
            long long v28 = *(_OWORD *)v27;
            long long v29 = *(_OWORD *)(v27 + 16);
            *(void *)(v10 + 32) = *(void *)(v27 + 32);
            *(_OWORD *)unint64_t v10 = v28;
            *(_OWORD *)(v10 + 16) = v29;
            *(void *)(v27 + 32) = v131;
            *(_OWORD *)unint64_t v27 = v115;
            *(_OWORD *)(v27 + 16) = v123;
            __int32 v30 = (unsigned int *)(v10 + 40);
            do
            {
              if (v30 == (unsigned int *)a2) {
                goto LABEL_141;
              }
              unsigned int v31 = *v30;
              v30 += 10;
            }
            while (v31 < v20);
            unint64_t v10 = (unint64_t)(v30 - 10);
            do
            {
              if (v27 == a1) {
                goto LABEL_141;
              }
              unsigned int v32 = *(_DWORD *)(v27 - 40);
              v27 -= 40;
            }
            while (v32 >= v20);
          }
          while (v10 < v27);
        }
        if (v10 - 40 != a1)
        {
          long long v33 = *(_OWORD *)(v10 - 40);
          long long v34 = *(_OWORD *)(v10 - 24);
          *(void *)(a1 + 32) = *(void *)(v10 - 8);
          *(_OWORD *)a1 = v33;
          *(_OWORD *)(a1 + 16) = v34;
        }
        *(_DWORD *)(v10 - 40) = v20;
        *(_DWORD *)(v10 - 4) = v111;
        *(_OWORD *)(v10 - 20) = v108;
        *(_OWORD *)(v10 - 36) = v105;
        if (v23 >= v24) {
          break;
        }
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *,false>(a1, v10 - 40, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v35 = std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(a1, v10 - 40);
      if (std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(v10, a2))
      {
        break;
      }
      if (!v35) {
        goto LABEL_37;
      }
    }
    a2 = v10 - 40;
    if (!v35) {
      continue;
    }
    break;
  }
}

long long *std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(long long *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3 = *a2;
  unsigned int v4 = *a3;
  if (*a2 >= *(_DWORD *)result)
  {
    if (v4 < v3)
    {
      long long v10 = *(_OWORD *)a2;
      long long v11 = *((_OWORD *)a2 + 1);
      uint64_t v12 = *((void *)a2 + 4);
      uint64_t v13 = *((void *)a3 + 4);
      long long v14 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v14;
      *((void *)a2 + 4) = v13;
      *((void *)a3 + 4) = v12;
      *(_OWORD *)a3 = v10;
      *((_OWORD *)a3 + 1) = v11;
      if (*a2 < *(_DWORD *)result)
      {
        long long v15 = *result;
        long long v16 = result[1];
        uint64_t v17 = *((void *)result + 4);
        uint64_t v18 = *((void *)a2 + 4);
        long long v19 = *((_OWORD *)a2 + 1);
        *float64x2_t result = *(_OWORD *)a2;
        result[1] = v19;
        *((void *)result + 4) = v18;
        *((void *)a2 + 4) = v17;
        *(_OWORD *)a2 = v15;
        *((_OWORD *)a2 + 1) = v16;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v20 = *result;
      long long v21 = result[1];
      uint64_t v22 = *((void *)result + 4);
      uint64_t v23 = *((void *)a2 + 4);
      long long v24 = *((_OWORD *)a2 + 1);
      *float64x2_t result = *(_OWORD *)a2;
      result[1] = v24;
      *((void *)result + 4) = v23;
      *((void *)a2 + 4) = v22;
      *(_OWORD *)a2 = v20;
      *((_OWORD *)a2 + 1) = v21;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      long long v6 = *((_OWORD *)a2 + 1);
      uint64_t v7 = *((void *)a2 + 4);
      uint64_t v25 = *((void *)a3 + 4);
      long long v26 = *((_OWORD *)a3 + 1);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_OWORD *)a2 + 1) = v26;
      *((void *)a2 + 4) = v25;
    }
    else
    {
      long long v5 = *result;
      long long v6 = result[1];
      uint64_t v7 = *((void *)result + 4);
      uint64_t v8 = *((void *)a3 + 4);
      long long v9 = *((_OWORD *)a3 + 1);
      *float64x2_t result = *(_OWORD *)a3;
      result[1] = v9;
      *((void *)result + 4) = v8;
    }
    *((void *)a3 + 4) = v7;
    *(_OWORD *)a3 = v5;
    *((_OWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      long long v6 = (long long *)(a2 - 40);
      if (*(_DWORD *)(a2 - 40) < *(_DWORD *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        long long v8 = *(_OWORD *)(a1 + 16);
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a2 - 8);
        long long v11 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v11;
        *(void *)(a1 + 32) = v10;
        *(void *)(a2 - 8) = v9;
        *long long v6 = v7;
        *(_OWORD *)(a2 - 24) = v8;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)a1, (unsigned int *)(a1 + 40), (unsigned int *)(a2 - 40));
      return 1;
    case 4uLL:
      std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(a1, a1 + 40, a1 + 80, a2 - 40);
      return 1;
    case 5uLL:
      std::__sort5[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40);
      return 1;
    default:
      uint64_t v12 = (_DWORD *)(a1 + 80);
      std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)a1, (unsigned int *)(a1 + 40), (unsigned int *)(a1 + 80));
      uint64_t v13 = a1 + 120;
      if (a1 + 120 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    unsigned int v16 = *(_DWORD *)v13;
    if (*(_DWORD *)v13 < *v12)
    {
      long long v21 = *(_OWORD *)(v13 + 4);
      long long v22 = *(_OWORD *)(v13 + 20);
      int v23 = *(_DWORD *)(v13 + 36);
      uint64_t v17 = v14;
      while (1)
      {
        uint64_t v18 = a1 + v17;
        long long v19 = *(_OWORD *)(a1 + v17 + 96);
        *(_OWORD *)(v18 + 120) = *(_OWORD *)(a1 + v17 + 80);
        *(_OWORD *)(v18 + 136) = v19;
        *(void *)(v18 + 152) = *(void *)(a1 + v17 + 112);
        if (v17 == -80) {
          break;
        }
        v17 -= 40;
        if (v16 >= *(_DWORD *)(v18 + 40))
        {
          uint64_t v20 = a1 + v17 + 120;
          goto LABEL_12;
        }
      }
      uint64_t v20 = a1;
LABEL_12:
      *(_DWORD *)uint64_t v20 = v16;
      *(_OWORD *)(v20 + 4) = v21;
      *(_OWORD *)(v20 + 20) = v22;
      *(_DWORD *)(v20 + 36) = v23;
      if (++v15 == 8) {
        return v13 + 40 == a2;
      }
    }
    uint64_t v12 = (_DWORD *)v13;
    v14 += 40;
    v13 += 40;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>((long long *)a1, (unsigned int *)a2, (unsigned int *)a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    __n128 result = *(__n128 *)a3;
    long long v9 = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 32);
    uint64_t v11 = *(void *)(a4 + 32);
    long long v12 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v12;
    *(void *)(a3 + 32) = v11;
    *(void *)(a4 + 32) = v10;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v9;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      __n128 result = *(__n128 *)a2;
      long long v13 = *(_OWORD *)(a2 + 16);
      uint64_t v14 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(a3 + 32);
      long long v16 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v16;
      *(void *)(a2 + 32) = v15;
      *(void *)(a3 + 32) = v14;
      *(__n128 *)a3 = result;
      *(_OWORD *)(a3 + 16) = v13;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        __n128 result = *(__n128 *)a1;
        long long v17 = *(_OWORD *)(a1 + 16);
        uint64_t v18 = *(void *)(a1 + 32);
        uint64_t v19 = *(void *)(a2 + 32);
        long long v20 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v20;
        *(void *)(a1 + 32) = v19;
        *(void *)(a2 + 32) = v18;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = std::__sort4[abi:fe180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,woff2::Table *>(a1, a2, a3, a4).n128_u64[0];
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    __n128 result = *(__n128 *)a4;
    long long v11 = *(_OWORD *)(a4 + 16);
    uint64_t v12 = *(void *)(a4 + 32);
    uint64_t v13 = *(void *)(a5 + 32);
    long long v14 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v14;
    *(void *)(a4 + 32) = v13;
    *(void *)(a5 + 32) = v12;
    *(__n128 *)a5 = result;
    *(_OWORD *)(a5 + 16) = v11;
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      __n128 result = *(__n128 *)a3;
      long long v15 = *(_OWORD *)(a3 + 16);
      uint64_t v16 = *(void *)(a3 + 32);
      uint64_t v17 = *(void *)(a4 + 32);
      long long v18 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v18;
      *(void *)(a3 + 32) = v17;
      *(void *)(a4 + 32) = v16;
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v15;
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        __n128 result = *(__n128 *)a2;
        long long v19 = *(_OWORD *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 32);
        uint64_t v21 = *(void *)(a3 + 32);
        long long v22 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v22;
        *(void *)(a2 + 32) = v21;
        *(void *)(a3 + 32) = v20;
        *(__n128 *)a3 = result;
        *(_OWORD *)(a3 + 16) = v19;
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          __n128 result = *(__n128 *)a1;
          long long v23 = *(_OWORD *)(a1 + 16);
          uint64_t v24 = *(void *)(a1 + 32);
          uint64_t v25 = *(void *)(a2 + 32);
          long long v26 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v26;
          *(void *)(a1 + 32) = v25;
          *(void *)(a2 + 32) = v24;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v23;
        }
      }
    }
  }
  return result;
}

void std::allocator_traits<std::allocator<woff2::anonymous namespace'::WOFF2FontInfo>>::destroy[abi:fe180100]<woff2::anonymous namespace'::WOFF2FontInfo,void,void>(uint64_t a1)
{
  std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*(void **)(a1 + 40));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(void *)(a1 + 16) = v2;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned int>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned int>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        long long v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      long long v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    long long v7 = a1 + 1;
LABEL_9:
    long long v9 = (uint64_t *)v7;
    long long v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *long long v7 = 0;
    v7[1] = 0;
    void v7[2] = v9;
    *long long v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    long long v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      long long v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t woff2::anonymous namespace'::Pad4(uint64_t a1)
{
  char v8 = 0;
  __int16 v7 = 0;
  unint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) + 3;
  if (v2 < (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1)) {
    return 0;
  }
  unint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  if (v3 <= 0xFFFFFFFFFFFFFFFCLL) {
    int v5 = (v3 + 3) & 0xFFFFFFFC;
  }
  else {
    int v5 = v3;
  }
  if (v5 == v4) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, __int16 *, void))(*(void *)a1 + 16))(a1, &v7, (v5 - v4));
  if (result) {
    return 1;
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::find<std::pair<unsigned int,unsigned int>>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v3 = a1 + 8;
  uint64_t v4 = v5;
  if (!v5) {
    return v3;
  }
  uint64_t v6 = v3;
  do
  {
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    BOOL v8 = v7 == a2;
    if (v7 >= a2) {
      char v9 = 1;
    }
    else {
      char v9 = -1;
    }
    if (v8)
    {
      unsigned int v10 = *(_DWORD *)(v4 + 32);
      BOOL v11 = v10 == a3;
      char v9 = v10 >= a3 ? 1 : -1;
      if (v11) {
        char v9 = 0;
      }
    }
    BOOL v12 = (v9 & 0x80) == 0;
    if (v9 < 0) {
      uint64_t v13 = (uint64_t *)(v4 + 8);
    }
    else {
      uint64_t v13 = (uint64_t *)v4;
    }
    if (v12) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v13;
  }
  while (*v13);
  if (v3 == v6) {
    return v3;
  }
  unsigned int v14 = *(_DWORD *)(v6 + 28);
  BOOL v15 = v14 == a2;
  if (v14 <= a2) {
    char v16 = 1;
  }
  else {
    char v16 = -1;
  }
  if (v15)
  {
    unsigned int v17 = *(_DWORD *)(v6 + 32);
    BOOL v18 = v17 == a3;
    BOOL v19 = v17 > a3;
    char v16 = -1;
    if (!v19) {
      char v16 = 1;
    }
    if (v18) {
      char v16 = 0;
    }
  }
  if (v16 < 0) {
    return v3;
  }
  return v6;
}

void *std::__tree<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::__map_value_compare<std::pair<unsigned int,unsigned int>,std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>,std::less<std::pair<unsigned int,unsigned int>>,true>,std::allocator<std::__value_type<std::pair<unsigned int,unsigned int>,unsigned int>>>::__emplace_unique_key_args<std::pair<unsigned int,unsigned int>,std::piecewise_construct_t const&,std::tuple<std::pair<unsigned int,unsigned int> const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, unsigned int a3, void *a4)
{
  unsigned int v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (!v6)
  {
    BOOL v8 = a1 + 1;
    goto LABEL_21;
  }
  do
  {
    while (1)
    {
      BOOL v8 = v6;
      unsigned int v9 = *((_DWORD *)v6 + 7);
      if (v9 == a2) {
        break;
      }
      if (v9 <= a2)
      {
        if (v9 >= a2) {
          char v13 = 1;
        }
        else {
          char v13 = -1;
        }
        if ((v13 & 0x80) == 0) {
          return v8;
        }
        goto LABEL_18;
      }
LABEL_12:
      uint64_t v6 = (uint64_t *)*v8;
      unsigned int v7 = (uint64_t **)v8;
      if (!*v8) {
        goto LABEL_21;
      }
    }
    unsigned int v10 = *((_DWORD *)v8 + 8);
    BOOL v11 = v10 == a3;
    if (v10 > a3) {
      goto LABEL_12;
    }
    if (v10 >= a3) {
      char v12 = 1;
    }
    else {
      char v12 = -1;
    }
    if (v11) {
      char v12 = 0;
    }
    if ((v12 & 0x80) == 0) {
      return v8;
    }
LABEL_18:
    uint64_t v6 = (uint64_t *)v8[1];
  }
  while (v6);
  unsigned int v7 = (uint64_t **)(v8 + 1);
LABEL_21:
  unsigned int v14 = v8;
  BOOL v8 = operator new(0x28uLL);
  *(void *)((char *)v8 + 28) = *a4;
  *((_DWORD *)v8 + 9) = 0;
  *BOOL v8 = 0;
  v8[1] = 0;
  v8[2] = v14;
  *unsigned int v7 = v8;
  BOOL v15 = (uint64_t *)**a1;
  char v16 = v8;
  if (v15)
  {
    *a1 = v15;
    char v16 = *v7;
  }
  std::__tree_balance_after_insert[abi:fe180100]<std::__tree_node_base<void *> *>(a1[1], v16);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v8;
}

void TCFFArray::TCFFArray(TCFFArray *this, unsigned int a2)
{
  *(void *)this = &unk_1F0E01858;
  *((_WORD *)this + 4) = 0;
  *((unsigned char *)this + 10) = a2;
  std::vector<unsigned char>::vector((void *)this + 2, a2);
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 6) = AllocateMemory(0x80uLL, 0);
  *((void *)this + 7) = 128;
  uint64_t v3 = *((void *)this + 2);
  if (*((void *)this + 3) == v3) {
    std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]();
  }
  uint64_t v4 = *((unsigned __int8 *)this + 10);
  uint64_t v5 = (char *)(v4 + v3 - 1);
  char v6 = 1;
  switch(*((unsigned char *)this + 10))
  {
    case 1:
      goto LABEL_6;
    case 2:
      goto LABEL_5;
    case 3:
      goto LABEL_4;
    case 4:
      char v6 = 0;
      *v5-- = 1;
LABEL_4:
      *v5-- = v6;
      char v6 = 0;
LABEL_5:
      LOBYTE(v4) = 0;
      *v5-- = v6;
LABEL_6:
      *uint64_t v5 = v4;
      break;
    default:
      return;
  }
}

void sub_1B535E428(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void TCFFArray::TCFFArray(TCFFArray *this, unsigned int a2, const unsigned __int8 *a3)
{
  *(void *)this = &unk_1F0E01858;
  *((_WORD *)this + 4) = 256;
  if (a2 < 0xFFFFFF) {
    char v6 = 3;
  }
  else {
    char v6 = 4;
  }
  if (a2 >= 0xFFFF) {
    char v7 = v6;
  }
  else {
    char v7 = 2;
  }
  if (a2 >= 0xFF) {
    char v8 = v7;
  }
  else {
    char v8 = 1;
  }
  *((unsigned char *)this + 10) = v8;
  std::vector<unsigned char>::vector((void *)this + 2, 2 * (v8 & 0x7F));
  *((unsigned char *)this + 40) = 0;
  *((void *)this + 6) = AllocateMemory(a2, 0);
  *((void *)this + 7) = a2;
  uint64_t v9 = *((void *)this + 2);
  if (*((void *)this + 3) == v9) {
    goto LABEL_23;
  }
  unint64_t v10 = *((unsigned __int8 *)this + 10);
  BOOL v11 = (unsigned char *)(v10 + v9 - 1);
  uint64_t v12 = 1;
  switch(*((unsigned char *)this + 10))
  {
    case 1:
      goto LABEL_15;
    case 2:
      goto LABEL_14;
    case 3:
      goto LABEL_13;
    case 4:
      LOBYTE(v12) = 0;
      *v11-- = 1;
LABEL_13:
      *v11-- = v12;
      LOBYTE(v12) = 0;
LABEL_14:
      LOBYTE(v10) = 0;
      *v11-- = v12;
LABEL_15:
      *BOOL v11 = v10;
      unint64_t v10 = *((unsigned __int8 *)this + 10);
      BOOL v11 = (unsigned char *)*((void *)this + 2);
      uint64_t v12 = *((void *)this + 3);
      break;
    default:
      break;
  }
  if (v12 - (uint64_t)v11 <= v10) {
LABEL_23:
  }
    std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]();
  int v13 = v10 - 1;
  unsigned int v14 = &v11[v10];
  int v15 = a2 + 1;
  char v16 = &v14[v10 - 1];
  switch(v13)
  {
    case 0:
      goto LABEL_21;
    case 1:
      goto LABEL_20;
    case 2:
      goto LABEL_19;
    case 3:
      *v16-- = v15;
      v15 >>= 8;
LABEL_19:
      *v16-- = v15;
      v15 >>= 8;
LABEL_20:
      *v16-- = v15;
      v15 >>= 8;
LABEL_21:
      *char v16 = v15;
      break;
    default:
      break;
  }
  memcpy(*((void **)this + 6), a3, a2);
}

void sub_1B535E5FC(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void TCFFArray::~TCFFArray(void **this)
{
  *this = &unk_1F0E01858;
  if (!*((unsigned char *)this + 40)) {
    free(this[6]);
  }
  unint64_t v2 = this[2];
  if (v2)
  {
    this[3] = v2;
    operator delete(v2);
  }
}

{
  uint64_t vars8;

  TCFFArray::~TCFFArray(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TCFFArray::GetOffset(TCFFArray *this, int a2)
{
  uint64_t v5 = *((void *)this + 2);
  uint64_t v3 = (char *)this + 16;
  uint64_t v4 = v5;
  int v6 = *(v3 - 6);
  unint64_t v7 = (v6 * a2);
  if (*((void *)v3 + 1) - v5 <= v7) {
    std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]();
  }
  return BytesToCard((const unsigned __int8 *)(v4 + v7), v6);
}

unint64_t TCFFArray::AppendData(TCFFArray *this, uint64_t a2, unsigned int a3, const unsigned __int8 *a4)
{
  uint64_t v4 = a2;
  if (a3)
  {
    if (*((unsigned char *)this + 40))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      __int16 v13 = 1;
    }
    else
    {
      unint64_t v8 = a3 + a2;
      if (*((void *)this + 7) >= v8)
      {
        unint64_t v10 = (char *)*((void *)this + 6);
        goto LABEL_7;
      }
      size_t v9 = malloc_good_size(a3 + a2);
      unint64_t v10 = (char *)reallocf(*((void **)this + 6), v9);
      *((void *)this + 6) = v10;
      if (v10)
      {
        *((void *)this + 7) = v9;
LABEL_7:
        memcpy(&v10[v4], a4, a3);
        return v8;
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      __int16 v13 = 20;
    }
    exception[4] = v13;
  }
  return v4;
}

uint64_t TCFFArray::AppendOffset(TCFFArray *this, unsigned int a2)
{
  if (a2 < 0xFFFFFF) {
    char v4 = 3;
  }
  else {
    char v4 = 4;
  }
  if (a2 >= 0xFFFF) {
    char v5 = v4;
  }
  else {
    char v5 = 2;
  }
  uint64_t v6 = *((void *)this + 2);
  if (a2 >= 0xFF) {
    unsigned __int8 v7 = v5;
  }
  else {
    unsigned __int8 v7 = 1;
  }
  unsigned int v8 = bswap32(*((unsigned __int16 *)this + 4));
  uint64_t v9 = HIWORD(v8);
  unsigned int v10 = (unsigned __int16)(HIWORD(v8) + 1);
  unint64_t v11 = v7 * v10 + v7;
  unint64_t v12 = *((void *)this + 3) - v6;
  if (v11 <= v12)
  {
    if (v11 < v12) {
      *((void *)this + 3) = v6 + v11;
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)this + 2, v11 - v12);
  }
  unsigned int v13 = *((unsigned __int8 *)this + 10);
  if (v13 < v7)
  {
    if (v10)
    {
      int v14 = v10 - 1;
      unsigned int v15 = (v10 - 1) * v7;
      while (1)
      {
        int Offset = TCFFArray::GetOffset(this, v14);
        uint64_t v17 = *((void *)this + 2);
        if (*((void *)this + 3) - v17 <= (unint64_t)v15) {
          break;
        }
        BOOL v18 = (unsigned char *)(v17 + v15 + v7 - 1);
        switch(v7)
        {
          case 1u:
            goto LABEL_22;
          case 2u:
            goto LABEL_21;
          case 3u:
            goto LABEL_20;
          case 4u:
            *v18-- = Offset;
            Offset >>= 8;
LABEL_20:
            *v18-- = Offset;
            Offset >>= 8;
LABEL_21:
            *v18-- = Offset;
            Offset >>= 8;
LABEL_22:
            *BOOL v18 = Offset;
            break;
          default:
            break;
        }
        --v14;
        v15 -= v7;
        if (v14 == -1) {
          goto LABEL_24;
        }
      }
LABEL_32:
      std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]();
    }
LABEL_24:
    *((unsigned char *)this + 10) = v7;
    unsigned int v13 = v7;
  }
  unint64_t v19 = v13 * v10;
  uint64_t v20 = *((void *)this + 2);
  if (*((void *)this + 3) - v20 <= v19) {
    goto LABEL_32;
  }
  signed int v21 = v13 - 1;
  int v22 = a2 + 1;
  long long v23 = (unsigned char *)(v20 + v19 + v21);
  switch(v21)
  {
    case 0:
      goto LABEL_30;
    case 1:
      goto LABEL_29;
    case 2:
      goto LABEL_28;
    case 3:
      *v23-- = v22;
      v22 >>= 8;
LABEL_28:
      *v23-- = v22;
      v22 >>= 8;
LABEL_29:
      *v23-- = v22;
      v22 >>= 8;
LABEL_30:
      *long long v23 = v22;
      break;
    default:
      break;
  }
  *((_WORD *)this + 4) = __rev16(v10);
  return v9;
}

uint64_t TCFFArray::Add(TCFFArray *this, unsigned int a2, const unsigned __int8 *a3)
{
  uint64_t v6 = TCFFArray::GetOffset(this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  if (a3) {
    unsigned int appended = TCFFArray::AppendData(this, v6, a2, a3);
  }
  else {
    unsigned int appended = v6 + a2;
  }
  return TCFFArray::AppendOffset(this, appended);
}

uint64_t TCFFArray::GetLength(TCFFArray *this)
{
  if (!*((_WORD *)this + 4)) {
    return 2;
  }
  int v2 = __rev16(*((unsigned __int16 *)this + 4));
  unint64_t v3 = TCFFArray::GetOffset(this, v2) - 1;
  if (*((void *)this + 7) < v3) {
    LODWORD(v3) = *((void *)this + 7);
  }
  return *((unsigned __int8 *)this + 10) + *((unsigned __int8 *)this + 10) * v2 + v3 + 3;
}

uint64_t TCFFArray::StreamOut(TCFFArray *this, TBufferedStreamingContext *a2)
{
  unsigned int v4 = *((unsigned __int16 *)this + 4);
  uint64_t result = TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)this + 8, 2uLL);
  if (v4)
  {
    int v6 = __rev16(v4);
    unsigned __int8 v11 = *((unsigned char *)this + 10);
    TBufferedStreamingContext::BufferString((uint64_t)a2, &v11, 1uLL);
    TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 2), *((unsigned __int8 *)this + 10) + *((unsigned __int8 *)this + 10) * v6);
    unint64_t v7 = TCFFArray::GetOffset(this, v6) - 1;
    unsigned int v8 = (const unsigned __int8 *)*((void *)this + 6);
    unint64_t v9 = *((void *)this + 7);
    if (v9 >= v7) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = v9;
    }
    return TBufferedStreamingContext::BufferString((uint64_t)a2, v8, v10);
  }
  return result;
}

void TCFFStringArray::~TCFFStringArray(void **this)
{
  TCFFArray::~TCFFArray(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TCFFStringArray::AddString(TCFFStringArray *this, uint64_t a2, const char *a3)
{
  unint64_t v6 = kStdStrs;
  size_t v7 = a2;
  unint64_t v8 = 3120;
  while (strlen(*(const char **)(v6 + v8)) != v7 || memcmp(a3, *(const void **)(v6 + v8), v7))
  {
    v8 -= 8;
    if (v6 + v8 < v6) {
      goto LABEL_7;
    }
  }
  if ((unsigned __int16)(v8 >> 3) == 391)
  {
LABEL_7:
    LOWORD(v9) = (*(uint64_t (**)(TCFFStringArray *, uint64_t, const char *))(*(void *)this + 24))(this, a2, a3)+ 391;
    return (unsigned __int16)v9;
  }
  return (unsigned __int16)(v8 >> 3);
}

uint64_t TCFFStringArray::AddString(TCFFStringArray *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(TCFFStringArray *, const unsigned __int8 *))(*(void *)this + 56))(this, a2 + 1);
}

uint64_t TCFFStringArray::AddString(TCFFStringArray *this, const char *__s)
{
  size_t v4 = strlen(__s);
  char v5 = *(uint64_t (**)(TCFFStringArray *, size_t, const char *))(*(void *)this + 40);
  return v5(this, v4, __s);
}

void TCFFDict::TCFFDict(TCFFDict *this)
{
  TCFFArray::TCFFArray(this, 1u);
  *int v2 = &unk_1F0E018E0;
  *((void *)this + 8) = AllocateMemory(0x20uLL, 0);
}

void sub_1B535EDC4(_Unwind_Exception *a1)
{
  TCFFArray::~TCFFArray(v1);
  _Unwind_Resume(a1);
}

void TCFFDict::~TCFFDict(void **this)
{
  *this = &unk_1F0E018E0;
  free(this[8]);
  TCFFArray::~TCFFArray(this);
}

{
  uint64_t vars8;

  *this = &unk_1F0E018E0;
  free(this[8]);
  TCFFArray::~TCFFArray(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TCFFDict::EncodeNumber(uint64_t this, int a2, unsigned char *a3, unsigned __int8 *a4)
{
  switch(this)
  {
    case 3:
      a3[3] = 0;
      a3[2] = a2;
      a3[1] = BYTE1(a2);
      LOBYTE(v4) = 28;
      break;
    case 2:
      if ((__int16)a2 < 108)
      {
        if ((__int16)a2 > -108) {
          return this;
        }
        __int16 v5 = -108 - a2;
        int v6 = 251;
      }
      else
      {
        __int16 v5 = a2 - 108;
        int v6 = 247;
      }
      a3[2] = 0;
      a3[1] = v5;
      int v4 = v6 + ((unsigned __int16)(v5 & 0xFF00) >> 8);
      break;
    case 1:
      a3[1] = 0;
      LOBYTE(v4) = a2 - 117;
      break;
    default:
      a3[5] = 0;
      a3[4] = a2;
      a3[3] = BYTE1(a2);
      a3[2] = BYTE2(a2);
      LOBYTE(v4) = 29;
      a3[1] = HIBYTE(a2);
      break;
  }
  *a3 = v4;
  return this;
}

uint64_t TCFFDict::EncodeNumber(TCFFDict *this, unsigned char *a2, unsigned __int8 *a3)
{
  if ((this + 1131) > 0x8D6)
  {
    unsigned int v3 = this >> 8;
    if (this == (__int16)this)
    {
      a2[3] = 0;
      a2[2] = (_BYTE)this;
      uint64_t result = 3;
      LOBYTE(v4) = 28;
    }
    else
    {
      a2[5] = 0;
      a2[4] = (_BYTE)this;
      a2[3] = BYTE1(this);
      a2[2] = BYTE2(this);
      unsigned int v3 = this >> 24;
      uint64_t result = 5;
      LOBYTE(v4) = 29;
    }
  }
  else if ((unsigned __int16)((_WORD)this + 107) > 0xD6u)
  {
    if ((__int16)this > 107) {
      LOWORD(v3) = (_WORD)this;
    }
    else {
      unsigned int v3 = -(int)this;
    }
    if ((__int16)this <= 107) {
      int v6 = -5;
    }
    else {
      int v6 = -9;
    }
    LOWORD(v3) = v3 - 108;
    a2[2] = 0;
    int v4 = v6 + ((unsigned __int16)(v3 & 0xFF00) >> 8);
    uint64_t result = 2;
  }
  else
  {
    LOBYTE(v3) = 0;
    LOBYTE(v4) = (_BYTE)this - 117;
    uint64_t result = 1;
  }
  a2[1] = v3;
  *a2 = v4;
  return result;
}

uint64_t TCFFDict::EncodeNumber(TCFFDict *this, double a2, unsigned __int8 *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)long long v33 = v4;
  long long v34 = v4;
  snprintf_l(v33, 0x20uLL, 0, "%-.8g", a2);
  *(unsigned char *)this = 30;
  char v5 = v33[0];
  if (v33[0])
  {
    int v6 = 0;
    char v7 = 0;
    int v8 = 0;
    uint64_t v9 = &v33[1];
    unsigned int v10 = 2;
    while (1)
    {
      switch(v5)
      {
        case '+':
          if (v7 & 1 | ((v6 & 1) == 0))
          {
            if (v6 & 1 | (v10 != 2)) {
              goto LABEL_45;
            }
            int v6 = 0;
            goto LABEL_33;
          }
          unint64_t v24 = (unint64_t)v10 >> 1;
          char v28 = *((unsigned char *)this + v24);
          char v26 = v28 & 0xF | 0xB0;
          char v27 = v28 & 0xF0 | 0xB;
          break;
        case ',':
        case '/':
        case ':':
        case ';':
        case '<':
        case '=':
        case '>':
        case '?':
        case '@':
        case 'A':
        case 'B':
        case 'C':
        case 'D':
          goto LABEL_45;
        case '-':
          if (!(v6 & 1 | (v10 != 2)))
          {
            int v6 = 0;
            *((unsigned char *)this + 1) = *((unsigned char *)this + 1) & 0xF | 0xE0;
LABEL_33:
            unsigned int v10 = 2;
            goto LABEL_14;
          }
          if (v7 & 1 | ((v6 & 1) == 0)) {
            goto LABEL_45;
          }
          unint64_t v24 = (unint64_t)v10 >> 1;
          char v25 = *((unsigned char *)this + v24);
          char v26 = v25 & 0xF | 0xC0;
          char v27 = v25 & 0xF0 | 0xC;
          break;
        case '.':
          if ((v8 | v6)) {
            goto LABEL_45;
          }
          int v6 = 0;
          unint64_t v20 = (unint64_t)v10 >> 1;
          char v21 = *((unsigned char *)this + v20);
          char v22 = v21 & 0xF | 0xA0;
          char v23 = v21 & 0xF0 | 0xA;
          if ((v10 & 1) == 0) {
            char v23 = v22;
          }
          *((unsigned char *)this + v20) = v23;
          int v8 = 1;
          goto LABEL_13;
        case '0':
          if (v8 & 1 | ((v6 & 1) == 0)) {
            goto LABEL_4;
          }
          int v8 = 0;
          goto LABEL_13;
        case '1':
        case '2':
        case '3':
        case '4':
        case '5':
        case '6':
        case '7':
        case '8':
        case '9':
LABEL_4:
          unint64_t v11 = (unint64_t)v10 >> 1;
          if (v7 & 1 | ((v6 & 1) == 0))
          {
            int v12 = v10 & 1;
            char v13 = *((unsigned char *)this + v11);
          }
          else
          {
            int v12 = v10 & 1;
            char v14 = *((unsigned char *)this + v11);
            char v13 = v14 & 0xF | 0xB0;
            char v15 = v14 & 0xF0 | 0xB;
            if (v10) {
              char v13 = v15;
            }
            char v7 = 1;
          }
          char v16 = v13 & 0xF | (16 * v5);
          char v17 = v13 & 0xF0 | v5 & 0xF;
          if (v12) {
            char v18 = v17;
          }
          else {
            char v18 = v16;
          }
          *((unsigned char *)this + v11) = v18;
          goto LABEL_13;
        case 'E':
          goto LABEL_17;
        default:
          if (v5 != 101) {
            goto LABEL_45;
          }
LABEL_17:
          if (v6 & 1 | (v10 == 2) || ((v8 ^ 1) & 1) != 0) {
            goto LABEL_45;
          }
          int v8 = 0;
          int v6 = 1;
          goto LABEL_13;
      }
      if ((v10 & 1) == 0) {
        char v27 = v26;
      }
      *((unsigned char *)this + v24) = v27;
      char v7 = 1;
LABEL_13:
      if (v10 >= 0x10)
      {
LABEL_45:
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DFC400;
        exception[4] = 1;
      }
LABEL_14:
      ++v10;
      int v19 = *v9++;
      char v5 = v19;
      if (!v19) {
        goto LABEL_39;
      }
    }
  }
  unsigned int v10 = 2;
LABEL_39:
  unint64_t v29 = v10 + 1;
  if (v10) {
    char v30 = 15;
  }
  else {
    char v30 = -16;
  }
  *((unsigned char *)this + ((unint64_t)v10 >> 1)) |= v30;
  if (((_BYTE)v10 + 1))
  {
    *((unsigned char *)this + (v29 >> 1)) |= 0xFu;
    LODWORD(v29) = v10 + 2;
  }
  return v29 >> 1;
}

uint64_t TCFFDict::EncodeNumber(TCFFDict *this, unsigned __int8 *a2, TCFFDict *a3, unsigned __int8 *a4)
{
  if (!a2) {
    return TCFFDict::EncodeNumber(this, a3, (unsigned __int8 *)a3);
  }
  if ((this & ~(-1 << (char)a2)) == 0)
  {
    this = (TCFFDict *)((int)this >> (char)a2);
    return TCFFDict::EncodeNumber(this, a3, (unsigned __int8 *)a3);
  }
  if ((this & 1) == 0)
  {
    do
    {
      char v4 = (char)this;
      a2 = (unsigned __int8 *)(a2 - 1);
      LODWORD(this) = (int)this >> 1;
    }
    while ((v4 & 2) == 0);
  }
  return TCFFDict::EncodeNumber(a3, (double)(int)this / (double)(1 << (char)a2), a2);
}

void *TCFFDict::AddOpcode(const void **this, __int16 a2)
{
  uint64_t v4 = bswap32(*((unsigned __int16 *)this + 4)) >> 16;
  size_t v5 = 2 * v4 + 2;
  size_t v6 = malloc_size(this[8]);
  uint64_t result = (void *)this[8];
  if (v5 > v6)
  {
    uint64_t result = reallocf(result, v5);
    this[8] = result;
    if (!result)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      exception[4] = 20;
    }
  }
  *((_WORD *)result + v4) = a2;
  return result;
}

unint64_t TCFFDict::AddNumberArray(TCFFDict *this, unint64_t appended, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    char v7 = a4;
    int v8 = a3;
    do
    {
      unsigned int v10 = *(_DWORD *)v7;
      v7 += 4;
      --v8;
      v13[0] = 0;
      v13[1] = 0;
      __int16 v14 = 0;
      unsigned int v11 = TCFFDict::EncodeNumber((TCFFDict *)v10, a5, (TCFFDict *)v13, a4);
      unsigned int appended = TCFFArray::AppendData(this, appended, v11, (const unsigned __int8 *)v13);
    }
    while (v8);
  }
  return appended;
}

uint64_t TCFFDict::AddEntry(const void **this, __int16 a2)
{
  TCFFDict::AddOpcode(this, a2);
  unsigned int v3 = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  return TCFFArray::AppendOffset((TCFFArray *)this, v3);
}

uint64_t TCFFDict::AddEntry(const void **this, __int16 a2, unsigned __int8 a3)
{
  unsigned __int8 v5 = a3;
  TCFFDict::AddOpcode(this, a2);
  return TCFFArray::Add((TCFFArray *)this, 1u, &v5);
}

uint64_t TCFFDict::AddEntry(const void **this, __int16 a2, __int16 a3)
{
  *(_WORD *)unsigned __int8 v5 = a3;
  TCFFDict::AddOpcode(this, a2);
  return TCFFArray::Add((TCFFArray *)this, 2u, v5);
}

uint64_t TCFFDict::AddEntry(const void **this, __int16 a2, unsigned int a3, const unsigned __int8 *a4)
{
  TCFFDict::AddOpcode(this, a2);
  return TCFFArray::Add((TCFFArray *)this, a3, a4);
}

uint64_t TCFFDict::AddNumericEntry(const void **this, __int16 a2, TCFFDict *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  TCFFDict::AddOpcode(this, a2);
  uint64_t v5 = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  v10[0] = 0;
  v10[1] = 0;
  __int16 v11 = 0;
  unsigned int v7 = TCFFDict::EncodeNumber(a3, v10, v6);
  unsigned int appended = TCFFArray::AppendData((TCFFArray *)this, v5, v7, (const unsigned __int8 *)v10);
  return TCFFArray::AppendOffset((TCFFArray *)this, appended);
}

uint64_t TCFFDict::AddNumericEntry(const void **this, __int16 a2, TCFFDict *a3, unsigned __int8 *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  TCFFDict::AddOpcode(this, a2);
  uint64_t v7 = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  v12[0] = 0;
  v12[1] = 0;
  __int16 v13 = 0;
  unsigned int v9 = TCFFDict::EncodeNumber(a3, a4, (TCFFDict *)v12, v8);
  unsigned int appended = TCFFArray::AppendData((TCFFArray *)this, v7, v9, (const unsigned __int8 *)v12);
  return TCFFArray::AppendOffset((TCFFArray *)this, appended);
}

uint64_t TCFFDict::AddNumericArrayEntry(const void **this, __int16 a2, int a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  TCFFDict::AddOpcode(this, a2);
  int Offset = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16);
  unsigned int v10 = TCFFDict::AddNumberArray((TCFFDict *)this, (Offset - 1), a3, a4, a5);
  return TCFFArray::AppendOffset((TCFFArray *)this, v10);
}

uint64_t TCFFDict::AddStringIDEntry(uint64_t this, uint64_t a2, const unsigned __int8 *a3, TCFFStringArray *a4)
{
  v9[3] = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = this;
    size_t v6 = (TCFFDict *)(*(uint64_t (**)(TCFFStringArray *, const unsigned __int8 *))(*(void *)a4 + 48))(a4, a3);
    memset(v9, 170, 18);
    uint64_t v8 = TCFFDict::EncodeNumber(v6, v9, v7);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v5 + 64))(v5, a2, v8, v9);
  }
  return this;
}

uint64_t TCFFDict::GetLength(TCFFDict *this)
{
  int v1 = __rev16(*((unsigned __int16 *)this + 4));
  int v2 = 0;
  if (*((_WORD *)this + 4))
  {
    unsigned int v3 = (unsigned __int16 *)(*((void *)this + 8) + 2 * (v1 - 1));
    int v4 = v1;
    do
    {
      unsigned int v5 = *v3--;
      if (v5 > 0x1F) {
        ++v2;
      }
      --v4;
    }
    while (v4);
  }
  return v1 + v2 + TCFFArray::GetOffset(this, v1) - 1;
}

uint64_t TCFFDict::StreamOut(TCFFDict *this, TBufferedStreamingContext *a2)
{
  uint64_t result = TCFFArray::GetOffset(this, 0);
  if (*((_WORD *)this + 4))
  {
    unsigned int v5 = result;
    uint64_t v6 = 0;
    unsigned int v7 = __rev16(*((unsigned __int16 *)this + 4));
    if (v7 <= 1) {
      uint64_t v8 = 1;
    }
    else {
      uint64_t v8 = v7;
    }
    do
    {
      uint64_t v9 = v6 + 1;
      unsigned int v10 = *(unsigned __int16 *)(*((void *)this + 8) + 2 * v6);
      unsigned int Offset = TCFFArray::GetOffset(this, (int)v6 + 1);
      if (Offset > v5)
      {
        unsigned int v12 = Offset;
        TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)(*((void *)this + 6) + v5 - 1), Offset - v5);
        unsigned int v5 = v12;
      }
      unsigned __int8 v13 = v10 - 32;
      if (v10 < 0x20)
      {
        unsigned __int8 v13 = v10;
      }
      else
      {
        unsigned __int8 v14 = 12;
        TBufferedStreamingContext::BufferString((uint64_t)a2, &v14, 1uLL);
      }
      unsigned __int8 v15 = v13;
      uint64_t result = TBufferedStreamingContext::BufferString((uint64_t)a2, &v15, 1uLL);
      uint64_t v6 = v9;
    }
    while (v8 != v9);
  }
  return result;
}

void TCFFDictArray::TCFFDictArray(TCFFDictArray *this, const TCFFDict *a2)
{
  TCFFArray::TCFFArray(this, 1u);
  *(void *)unsigned int v3 = &unk_1F0E01958;
  TCFFDictArray::Add(v3, a2);
}

void sub_1B535FA98(_Unwind_Exception *a1)
{
  TCFFArray::~TCFFArray(v1);
  _Unwind_Resume(a1);
}

void TCFFDictArray::~TCFFDictArray(void **this)
{
  TCFFArray::~TCFFArray(this);
  JUMPOUT(0x1BA9994D0);
}

void TCFFDictArray::Add(TCFFDictArray *this, unsigned int a2, const unsigned __int8 *a3)
{
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &unk_1F0DFC400;
  exception[4] = 1;
}

uint64_t TCFFDictArray::Add(TCFFDictArray *this, const TCFFDict *a2)
{
  *(void *)uint64_t v8 = a2;
  unsigned int v4 = bswap32(*((unsigned __int16 *)this + 4)) >> 16;
  TCFFArray::AppendData(this, 8 * v4, 8u, v8);
  int Offset = TCFFArray::GetOffset(this, v4);
  unsigned int v6 = Offset + (*(uint64_t (**)(const TCFFDict *))(*(void *)a2 + 16))(a2) - 1;
  return TCFFArray::AppendOffset(this, v6);
}

uint64_t TCFFDictArray::StreamOut(TCFFDictArray *this, TBufferedStreamingContext *a2)
{
  uint64_t result = TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)this + 8, 2uLL);
  if (*((_WORD *)this + 4))
  {
    unsigned int v5 = __rev16(*((unsigned __int16 *)this + 4));
    unsigned __int8 v9 = *((unsigned char *)this + 10);
    TBufferedStreamingContext::BufferString((uint64_t)a2, &v9, 1uLL);
    TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 2), *((unsigned __int8 *)this + 10) + *((unsigned __int8 *)this + 10) * v5);
    uint64_t v6 = 0;
    if (v5 <= 1) {
      unsigned int v7 = 1;
    }
    else {
      unsigned int v7 = v5;
    }
    uint64_t v8 = 8 * v7;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, TBufferedStreamingContext *))(**(void **)(*((void *)this + 6) + v6)
                                                                              + 32))(*(void *)(*((void *)this + 6) + v6), a2);
      v6 += 8;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t TCFFEncoding::GetStreamOutFormat(TCFFEncoding *this)
{
  return *((unsigned __int8 *)this + 8);
}

void TCFFEncoding0::~TCFFEncoding0(TCFFEncoding0 *this)
{
  *(void *)this = &unk_1F0E019D0;
  uint64_t v2 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8077774924);
  }
  *(void *)this = &unk_1F0E01998;
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    MEMORY[0x1BA9994A0](v3, 0x1000C8033FC2DF1);
  }
}

{
  uint64_t vars8;

  TCFFEncoding0::~TCFFEncoding0(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TCFFEncoding0::GetLength(TCFFEncoding0 *this)
{
  if (*((unsigned char *)this + 9)) {
    int v1 = 3 * *((unsigned __int8 *)this + 9) + 1;
  }
  else {
    int v1 = 0;
  }
  return *((unsigned __int8 *)this + 24) + v1 + 2;
}

uint64_t TCFFEncoding0::StreamOut(TCFFEncoding0 *this, TBufferedStreamingContext *a2)
{
  unsigned __int8 v9 = *((unsigned char *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, &v9, 1uLL);
  unsigned __int8 v10 = *((unsigned char *)this + 24);
  TBufferedStreamingContext::BufferString((uint64_t)a2, &v10, 1uLL);
  uint64_t result = TBufferedStreamingContext::BufferString((uint64_t)a2, *((const unsigned __int8 **)this + 4), *((unsigned __int8 *)this + 24));
  if (*((unsigned char *)this + 9))
  {
    unsigned __int8 v11 = *((unsigned char *)this + 9);
    uint64_t result = TBufferedStreamingContext::BufferString((uint64_t)a2, &v11, 1uLL);
    if (*((unsigned char *)this + 9))
    {
      unsigned int v5 = (unsigned __int8 *)*((void *)this + 2);
      unint64_t v6 = (unint64_t)&v5[3 * *((unsigned __int8 *)this + 9)];
      unsigned int v7 = v5;
      do
      {
        unsigned __int8 v8 = *v7;
        v7 += 3;
        unsigned __int8 v12 = v8;
        TBufferedStreamingContext::BufferString((uint64_t)a2, &v12, 1uLL);
        uint64_t result = TBufferedStreamingContext::BufferString((uint64_t)a2, v5 + 1, 2uLL);
        unsigned int v5 = v7;
      }
      while ((unint64_t)v7 < v6);
    }
  }
  return result;
}

uint64_t TCFFCharSet::GetStreamOutFormat(TCFFCharSet *this)
{
  return *((unsigned __int8 *)this + 8);
}

void TCFFCharSet0::~TCFFCharSet0(TCFFCharSet0 *this)
{
  *(void *)this = &unk_1F0E01A08;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C80BDFB0063);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E01A08;
  uint64_t v2 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C80BDFB0063);
  }
  JUMPOUT(0x1BA9994D0);
}

uint64_t TCFFCharSet0::GetLength(TCFFCharSet0 *this)
{
  return (2 * *((unsigned __int16 *)this + 5)) | 1u;
}

uint64_t TCFFCharSet0::StreamOut(TCFFCharSet0 *this, TBufferedStreamingContext *a2)
{
  unsigned __int8 v7 = *((unsigned char *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, &v7, 1uLL);
  unsigned int v4 = (const unsigned __int8 *)*((void *)this + 2);
  unint64_t v5 = 2 * *((unsigned __int16 *)this + 5);
  return TBufferedStreamingContext::BufferString((uint64_t)a2, v4, v5);
}

void TCFFFontSet::TCFFFontSet(TCFFFontSet *this, char a2, char a3, char a4, const char *__s)
{
  *(void *)this = &unk_1F0E01A40;
  *((unsigned char *)this + 8) = a2;
  *((unsigned char *)this + 9) = a3;
  *((unsigned char *)this + 10) = 4;
  *((unsigned char *)this + 11) = a4;
  unsigned __int8 v7 = (TCFFFontSet *)((char *)this + 16);
  unsigned int v8 = strlen(__s);
  TCFFArray::TCFFArray(v7, v8, (const unsigned __int8 *)__s);
  TCFFDict::TCFFDict((TCFFFontSet *)((char *)this + 80));
  TCFFArray::TCFFArray((TCFFFontSet *)((char *)this + 152), 1u);
  *((void *)this + 19) = &unk_1F0E01890;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((void *)this + 27) = 0;
  TCFFArray::TCFFArray((TCFFFontSet *)((char *)this + 240), 1u);
  TCFFDict::TCFFDict((TCFFFontSet *)((char *)this + 304));
  *((void *)this + 47) = 0;
}

void sub_1B53600CC(_Unwind_Exception *a1)
{
  TCFFArray::~TCFFArray(v4);
  TCFFArray::~TCFFArray(v3);
  TCFFDict::~TCFFDict(v2);
  TCFFArray::~TCFFArray(v1);
  _Unwind_Resume(a1);
}

void TCFFFontSet::~TCFFFontSet(TCFFFontSet *this)
{
  *(void *)this = &unk_1F0E01A40;
  uint64_t v2 = *((void *)this + 28);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 29);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 27);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 47);
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  *((void *)this + 38) = &unk_1F0E018E0;
  free(*((void **)this + 46));
  TCFFArray::~TCFFArray((void **)this + 38);
  TCFFArray::~TCFFArray((void **)this + 30);
  TCFFArray::~TCFFArray((void **)this + 19);
  *((void *)this + 10) = &unk_1F0E018E0;
  free(*((void **)this + 18));
  TCFFArray::~TCFFArray((void **)this + 10);
  TCFFArray::~TCFFArray((void **)this + 2);
}

void TCFFFontSet::AddEncoding(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  int v3 = 0;
  int v4 = 0;
  while (1)
  {
    if (*(_WORD *)(a2 + v2 + 2))
    {
      int v5 = *(__int16 *)(a2 + v2);
      if (v5 <= v4) {
        int v6 = v4;
      }
      else {
        int v6 = *(__int16 *)(a2 + v2);
      }
      if (v5 > 255) {
        ++v3;
      }
      else {
        int v4 = v6;
      }
    }
    v2 += 4;
    if (v2 == 1024) {
      operator new[]();
    }
  }
}

void sub_1B5360460(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994A0](v2, 0x1000C8033FC2DF1);
  MEMORY[0x1BA9994A0](v1, 0x1000C8077774924);
  _Unwind_Resume(a1);
}

uint64_t TCFFFontSet::AddBlueValuesToDict(__int16 a1, unsigned int a2, uint64_t a3, int a4, int a5, const void **this)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  TCFFDict::AddOpcode(this, a1);
  unint64_t v11 = TCFFArray::GetOffset((TCFFArray *)this, bswap32(*((unsigned __int16 *)this + 4)) >> 16) - 1;
  if (a2)
  {
    uint64_t v12 = 0;
    int v13 = 0;
    uint64_t v14 = 8 * a2;
    int v15 = 1;
    do
    {
      int v17 = (v15 & a4) == 0 || v12 == 0;
      if (v17 != a5)
      {
        int v18 = *(_DWORD *)(a3 + v12 + 4);
        *(void *)char v25 = 0;
        uint64_t v26 = 0;
        __int16 v27 = 0;
        unsigned int v19 = TCFFDict::EncodeNumber((TCFFDict *)(v18 - v13), (unsigned __int8 *)0x10, (TCFFDict *)v25, v10);
        unint64_t appended = TCFFArray::AppendData((TCFFArray *)this, v11, v19, v25);
        int v13 = *(_DWORD *)(a3 + v12);
        *(void *)char v25 = 0;
        uint64_t v26 = 0;
        __int16 v27 = 0;
        unsigned int v22 = TCFFDict::EncodeNumber((TCFFDict *)(v13 - v18), (unsigned __int8 *)0x10, (TCFFDict *)v25, v21);
        unint64_t v11 = TCFFArray::AppendData((TCFFArray *)this, appended, v22, v25);
      }
      v15 *= 2;
      v12 += 8;
    }
    while (v14 != v12);
  }
  return TCFFArray::AppendOffset((TCFFArray *)this, v11);
}

uint64_t TCFFFontSet::AddStemSnapToDict(TCFFFontSet *this, int a2, int *a3, const void **a4, TCFFDict *a5)
{
  LODWORD(v7) = a2;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  TCFFDict::AddOpcode(a4, (__int16)this);
  unint64_t appended = TCFFArray::GetOffset((TCFFArray *)a4, bswap32(*((unsigned __int16 *)a4 + 4)) >> 16) - 1;
  if (v7)
  {
    int v10 = 0;
    uint64_t v7 = v7;
    do
    {
      int v11 = *a3++;
      v14[0] = 0;
      v14[1] = 0;
      __int16 v15 = 0;
      unsigned int v12 = TCFFDict::EncodeNumber((TCFFDict *)(v11 - v10), (unsigned __int8 *)0x10, (TCFFDict *)v14, v8);
      unint64_t appended = TCFFArray::AppendData((TCFFArray *)a4, appended, v12, (const unsigned __int8 *)v14);
      int v10 = v11;
      --v7;
    }
    while (v7);
  }
  return TCFFArray::AppendOffset((TCFFArray *)a4, appended);
}

void TCFFFontSet::AddSubrsToDict(TCFFFontSet *this, unsigned __int8 a2, unsigned __int16 a3, const unsigned __int8 *a4, const unsigned __int8 *a5, unint64_t a6, TCFFArray **a7, TCFFDict *a8, BOOL a9)
{
}

void sub_1B5360880(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x1091C4015871C78);
  _Unwind_Resume(a1);
}

uint64_t TCFFFontSet::AddBlueValues(uint64_t a1, __int16 a2, unsigned int a3, uint64_t a4, int a5, int a6)
{
  return TCFFFontSet::AddBlueValuesToDict(a2, a3, a4, a5, a6, (const void **)(a1 + 304));
}

uint64_t TCFFFontSet::AddStemSnap(const void **this, TCFFFontSet *a2, int a3, int *a4, TCFFDict *a5)
{
  return TCFFFontSet::AddStemSnapToDict(a2, a3, a4, this + 38, a5);
}

void TCFFFontSet::AddSubrs(TCFFArray **this, TCFFFontSet *a2, unsigned __int8 a3, const unsigned __int8 *a4, const unsigned __int8 *a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, BOOL a9)
{
}

void TCFFFontSet::StreamOut(TCFFFontSet *this, TBufferedStreamingContext *a2)
{
  LOBYTE(v9[0]) = *((unsigned char *)this + 8);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v9, 1uLL);
  LOBYTE(v9[0]) = *((unsigned char *)this + 9);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v9, 1uLL);
  LOBYTE(v9[0]) = *((unsigned char *)this + 10);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v9, 1uLL);
  LOBYTE(v9[0]) = *((unsigned char *)this + 11);
  TBufferedStreamingContext::BufferString((uint64_t)a2, (const unsigned __int8 *)v9, 1uLL);
  TCFFArray::StreamOut((TCFFFontSet *)((char *)this + 16), a2);
  *(void *)&long long v4 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v9[2] = v4;
  v9[3] = v4;
  v9[0] = v4;
  v9[1] = v4;
  TCFFDictArray::TCFFDictArray((TCFFDictArray *)v9, (TCFFFontSet *)((char *)this + 80));
  TCFFDictArray::StreamOut((TCFFDictArray *)v9, a2);
  TCFFArray::StreamOut((TCFFFontSet *)((char *)this + 152), a2);
  uint64_t v5 = *((void *)this + 27);
  if (v5)
  {
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(void *)v5 + 32))(v5, a2);
  }
  else
  {
    *(_WORD *)int v10 = 0;
    TBufferedStreamingContext::BufferString((uint64_t)a2, v10, 2uLL);
  }
  uint64_t v6 = *((void *)this + 28);
  if (v6) {
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(void *)v6 + 16))(v6, a2);
  }
  uint64_t v7 = *((void *)this + 29);
  if (v7) {
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(void *)v7 + 24))(v7, a2);
  }
  TCFFArray::StreamOut((TCFFFontSet *)((char *)this + 240), a2);
  TCFFDict::StreamOut((TCFFFontSet *)((char *)this + 304), a2);
  uint64_t v8 = *((void *)this + 47);
  if (v8) {
    (*(void (**)(uint64_t, TBufferedStreamingContext *))(*(void *)v8 + 32))(v8, a2);
  }
  TCFFArray::~TCFFArray((void **)v9);
}

void sub_1B5360AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void TType1CFFFontSet::~TType1CFFFontSet(TType1CFFFontSet *this)
{
  TCFFFontSet::~TCFFFontSet(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TType1CFFFontSet::AddCharString(TType1CFFFontSet *this, const TType1PSFont *a2, uint64_t a3)
{
  v8[117] = *(void **)MEMORY[0x1E4F143B8];
  memset(v8, 170, 0x3A8uLL);
  TType1ToType2CharStringConversionContext::TType1ToType2CharStringConversionContext((TType1ToType2CharStringConversionContext *)v8, a2, a3);
  TCFFArray::Add((TType1CFFFontSet *)((char *)this + 240), v8[36], (const unsigned __int8 *)v8[35]);
  uint64_t v6 = TCFFStringArray::AddString((TType1CFFFontSet *)((char *)this + 152), LODWORD(v8[34]), (const char *)v8[33]);
  TType1ToType2CharStringConversionContext::~TType1ToType2CharStringConversionContext(v8);
  return v6;
}

void sub_1B5360BC8(_Unwind_Exception *exception_object)
{
}

void TType1PSFont::BuildCFFFontSet(TType1PSFont *this, const unsigned int *a2, const unsigned __int16 *a3, const void **a4)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (*(uint64_t (**)(TType1PSFont *))(*(void *)this + 40))(this);
  uint64_t v8 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(void *)this + 88))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 0, v8, (TCFFStringArray *)(a4 + 19));
  unsigned __int8 v9 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(void *)this + 104))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 1, v9, (TCFFStringArray *)(a4 + 19));
  int v10 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(void *)this + 72))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 2, v10, (TCFFStringArray *)(a4 + 19));
  int v11 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(void *)this + 80))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 3, v11, (TCFFStringArray *)(a4 + 19));
  unsigned int v12 = (const unsigned __int8 *)(*(uint64_t (**)(TType1PSFont *))(*(void *)this + 96))(this);
  TCFFDict::AddStringIDEntry((uint64_t)(a4 + 10), 4, v12, (TCFFStringArray *)(a4 + 19));
  if ((*(unsigned int (**)(void))(**((void **)this + 4) + 312))()) {
    TCFFDict::AddNumericEntry(a4 + 10, 33, (TCFFDict *)1);
  }
  int v13 = (unsigned int *)*((void *)this + 4);
  uint64_t v14 = (TCFFDict *)v13[38];
  if (v14)
  {
    TCFFDict::AddNumericEntry(a4 + 10, 34, v14, (unsigned __int8 *)0x10);
    int v13 = (unsigned int *)*((void *)this + 4);
  }
  __int16 v15 = (TCFFDict *)(*(uint64_t (**)(unsigned int *))(*(void *)v13 + 296))(v13);
  if (v15 != -100) {
    TCFFDict::AddNumericEntry(a4 + 10, 35, v15);
  }
  uint64_t v16 = (TCFFDict *)(*(uint64_t (**)(void))(**((void **)this + 4) + 304))(*((void *)this + 4));
  if (v16 != 50) {
    TCFFDict::AddNumericEntry(a4 + 10, 36, v16);
  }
  if (*(_WORD *)(v7 + 60)) {
    TCFFDict::AddNumericEntry(a4 + 10, 37, (TCFFDict *)*(unsigned __int16 *)(v7 + 60));
  }
  unint64_t v36 = a4 + 10;
  unsigned int v17 = (*(uint64_t (**)(void))(**((void **)this + 4) + 72))(*((void *)this + 4));
  if (v17) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = 1000;
  }
  *(_OWORD *)unsigned int v40 = *(_OWORD *)(v7 + 4);
  *(void *)&v40[16] = *(void *)(v7 + 20);
  int v19 = *(_DWORD *)&v40[16];
  v20.i64[0] = __PAIR64__(*(unsigned int *)&v40[8], *(unsigned int *)v40);
  v20.i64[1] = *(void *)&v40[12];
  if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_s32(v20, (int32x4_t)xmmword_1B54000F0)))) & 1) == 0
    && !*(_DWORD *)&v40[4]
    && !*(_DWORD *)&v40[20]
    && v18 == 1000)
  {
LABEL_32:
    TCFFDict::AddNumericEntry(v36, 13, (TCFFDict *)*(unsigned int *)(v7 + 28));
    TCFFDict::AddNumericArrayEntry(v36, 5, 4, (unsigned __int8 *)(v7 + 88), (unsigned __int8 *)0x10);
    uint64_t v28 = (TCFFDict *)*(unsigned int *)(v7 + 40);
    if (v28) {
      TCFFDict::AddNumericEntry(v36, 40, v28, (unsigned __int8 *)0x10);
    }
    memset(v39, 170, sizeof(v39));
    __int16 v38 = -21846;
    unint64_t v37 = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v29 = (*(uint64_t (**)(TType1PSFont *, __int16 *, void *, unint64_t *, void *, void *))(*(void *)this + 152))(this, &v38, &v39[2], &v37, &v39[1], v39);
    if (v29) {
      (*((void (**)(const void **, TType1PSFont *, void, uint64_t, unint64_t, uint64_t))*a4 + 3))(a4, this, v38, v29, v37, v39[0] - v29);
    }
    unsigned int v30 = (*(uint64_t (**)(void))(**((void **)this + 4) + 168))(*((void *)this + 4));
    if (v30 >= 0xFFFF) {
      int v32 = 0xFFFF;
    }
    else {
      int v32 = v30;
    }
    if (a2)
    {
      int v33 = 0;
      if (v32)
      {
        unsigned int v34 = (v32 + 31) >> 5;
        uint64_t v35 = a2;
        do
        {
          if (*v35)
          {
            v31.i32[0] = *v35;
            int8x8_t v31 = vcnt_s8(v31);
            v31.i16[0] = vaddlv_u8((uint8x8_t)v31);
            v33 += v31.i32[0];
          }
          ++v35;
          --v34;
        }
        while (v34);
      }
    }
    operator new[]();
  }
  if (*(int *)v40 >= 0) {
    int v21 = *(_DWORD *)v40;
  }
  else {
    int v21 = -*(_DWORD *)v40;
  }
  if (*(int *)&v40[12] >= 0) {
    int v22 = *(_DWORD *)&v40[12];
  }
  else {
    int v22 = -*(_DWORD *)&v40[12];
  }
  if (v21 == v22)
  {
    int v23 = v21 - 0x40000000 / v18;
    if (v23 < 0) {
      int v23 = -v23;
    }
    if (v23 < 2) {
      goto LABEL_31;
    }
    double v24 = (double)*(int *)&v40[12];
    double v25 = fabs((double)*(int *)&v40[12] * 9.31322575e-10);
    double v26 = (double)*(int *)v40;
  }
  else
  {
    double v26 = (double)*(int *)v40;
    double v24 = (double)*(int *)&v40[12];
    double v25 = hypot((double)*(int *)v40 * 9.31322575e-10, (double)*(int *)&v40[12] * 9.31322575e-10);
    int v19 = *(_DWORD *)&v40[16];
  }
  double v27 = 1.0 / v25 / (double)v18;
  *(_DWORD *)unsigned int v40 = (int)(v26 * v27);
  *(_DWORD *)&unsigned __int8 v40[4] = (int)(v27 * (double)*(int *)&v40[4]);
  *(_DWORD *)&v40[8] = (int)(v27 * (double)*(int *)&v40[8]);
  *(_DWORD *)&v40[12] = (int)(v24 * v27);
  *(_DWORD *)&v40[16] = (int)(v27 * (double)v19);
  *(_DWORD *)&v40[20] = (int)(v27 * (double)*(int *)&v40[20]);
LABEL_31:
  TCFFDict::AddNumericArrayEntry(v36, 39, 6, v40, (unsigned __int8 *)0x1E);
  goto LABEL_32;
}

void sub_1B5361958(_Unwind_Exception *exception_object)
{
}

void std::vector<unsigned char>::__throw_out_of_range[abi:fe180100]()
{
}

void *std::vector<unsigned char>::__init_with_size[abi:fe180100]<unsigned char const*,unsigned char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:fe180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B5361A20(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void THandlerStreamingContext::THandlerStreamingContext(THandlerStreamingContext *this, const TFontHandler *a2, __CFData *a3)
{
  *(void *)this = &unk_1F0E01BC8;
  operator new();
}

void sub_1B5361CBC(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v2, 0x1091C40AFF6A363);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *(void *)(v1 + 8);
  *(void *)(v1 + 8) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  _Unwind_Resume(a1);
}

void THandlerStreamingContext::~THandlerStreamingContext(THandlerStreamingContext *this)
{
  *(void *)this = &unk_1F0E01BC8;
  (*(void (**)(void))(**((void **)this + 1) + 40))(*((void *)this + 1));
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
}

{
  uint64_t vars8;

  THandlerStreamingContext::~THandlerStreamingContext(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t HandlerFlushStreamCallback(__CFData *a1, CFIndex length, UInt8 *bytes)
{
  return 1;
}

BOOL HandlerFlushEExecCallback(THandlerStreamingBuffers *a1, unsigned int a2, unsigned __int8 *a3)
{
  return THandlerStreamingBuffers::WriteBytes(a1, a2, a3) != 0;
}

BOOL HandlerFlushCharStringCallback(THandlerStreamingBuffers *a1, unsigned int a2, unsigned __int8 *a3)
{
  return THandlerStreamingBuffers::WriteBytes(a1, a2, a3) != 0;
}

uint64_t THandlerStreamingContext::StreamT1Font(uint64_t a1, uint64_t a2, char *__s, _DWORD *a4, uint64_t a5, char a6)
{
  uint64_t v137 = *MEMORY[0x1E4F143B8];
  if (!__s)
  {
LABEL_56:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  if (a6)
  {
    uint64_t v8 = 6;
  }
  else
  {
    size_t v11 = strlen(__s);
    THandlerStreamingBuffers::WriteStringF(*(THandlerStreamingBuffers **)(a1 + 8), (THandlerStreamingBuffers *)0x2F, v12, v11, __s, 0x10000);
    THandlerStreamingBuffers::WriteStringF(*(THandlerStreamingBuffers **)(a1 + 8), (THandlerStreamingBuffers *)2, v13, v11, __s);
    uint64_t v14 = *(THandlerStreamingBuffers **)(a1 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    ZString = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)3, v133.i64, v15);
    THandlerStreamingBuffers::WriteBytes(v14, v133.u64[0], ZString);
    unsigned int v17 = *(THandlerStreamingBuffers **)(a1 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    int v19 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)6, v133.i64, v18);
    THandlerStreamingBuffers::WriteBytes(v17, v133.u64[0], v19);
    int32x4_t v20 = *(THandlerStreamingBuffers **)(a1 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    int v22 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)7, v133.i64, v21);
    THandlerStreamingBuffers::WriteBytes(v20, v133.u64[0], v22);
    int v23 = *(THandlerStreamingBuffers **)(a1 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    double v25 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x18, v133.i64, v24);
    THandlerStreamingBuffers::WriteBytes(v23, v133.u64[0], v25);
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 16))(a1, a5);
    uint64_t v8 = 8;
  }
  double v26 = *(THandlerStreamingBuffers **)(a1 + 8);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  double v27 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)v8, v133.i64, (unint64_t *)__s);
  THandlerStreamingBuffers::WriteBytes(v26, v133.u64[0], v27);
  unsigned int v28 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 552) + 8) + 72))(*(void *)(*(void *)(a1 + 552) + 8));
  double v30 = 1.0;
  if (v28) {
    double v30 = 1000.0 / (double)v28;
  }
  THandlerStreamingBuffers::WriteStringF(*(THandlerStreamingBuffers **)(a1 + 8), (THandlerStreamingBuffers *)0xB, v29, 0x3F50624DD2F1A9FCLL, 0x3F50624DD2F1A9FCLL);
  BoundingBoCGFloat x = FPFontGetBoundingBox(a2);
  CGFloat y = v32;
  CGFloat width = v34;
  CGFloat height = v36;
  if (v30 != 1.0)
  {
    CGAffineTransformMakeScale(&v127, v30, v30);
    v138.origin.CGFloat x = BoundingBox;
    v138.origin.CGFloat y = y;
    v138.size.CGFloat width = width;
    v138.size.CGFloat height = height;
    CGRect v139 = CGRectApplyAffineTransform(v138, &v127);
    BoundingBoCGFloat x = v139.origin.x;
    CGFloat y = v139.origin.y;
    CGFloat width = v139.size.width;
    CGFloat height = v139.size.height;
  }
  uint64_t v38 = a1;
  unint64_t v39 = *(THandlerStreamingBuffers **)(a1 + 8);
  v140.origin.CGFloat x = BoundingBox;
  v140.origin.CGFloat y = y;
  v140.size.CGFloat width = width;
  v140.size.CGFloat height = height;
  double MinX = CGRectGetMinX(v140);
  v141.origin.CGFloat x = BoundingBox;
  v141.origin.CGFloat y = y;
  v141.size.CGFloat width = width;
  v141.size.CGFloat height = height;
  double MinY = CGRectGetMinY(v141);
  v142.origin.CGFloat x = BoundingBox;
  v142.origin.CGFloat y = y;
  v142.size.CGFloat width = width;
  v142.size.CGFloat height = height;
  double MaxX = CGRectGetMaxX(v142);
  v143.origin.CGFloat x = BoundingBox;
  v143.origin.CGFloat y = y;
  v143.size.CGFloat width = width;
  v143.size.CGFloat height = height;
  double MaxY = CGRectGetMaxY(v143);
  LODWORD(v44) = vcvtmd_s64_f64(MinX);
  LODWORD(v45) = vcvtmd_s64_f64(MinY);
  LODWORD(v46) = vcvtpd_s64_f64(MaxX);
  LODWORD(v47) = vcvtpd_s64_f64(MaxY);
  THandlerStreamingBuffers::WriteStringF(v39, (THandlerStreamingBuffers *)0xC, v48, v44, v45, v46, v47);
  unsigned int v49 = *(THandlerStreamingBuffers **)(a1 + 8);
  uint64_t v50 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 552) + 8) + 432))(*(void *)(*(void *)(a1 + 552) + 8));
  if (v50)
  {
    v132[0] = (void **)0xAAAAAAAAAAAAAAAALL;
    v51.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    v51.i64[1] = 0xAAAAAAAAAAAAAAAALL;
    int64x2_t v133 = v51;
    *(int64x2_t *)int v134 = v51;
    (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)v50 + 480))(v50, 1751474532, v132);
    if (v132[0] < (void **)0xC) {
      unsigned int v52 = 0;
    }
    else {
      unsigned int v52 = bswap32(*(_DWORD *)(*(void *)(v133.i64[1] + 8) + *(void *)v134 + 8));
    }
    uint64_t v53 = v38;
    TDataReference::~TDataReference((TDataReference *)&v133);
  }
  else
  {
    unsigned int v52 = 0;
    uint64_t v53 = v38;
  }
  *(void *)int v134 = 0;
  int64x2_t v133 = 0uLL;
  (*(void (**)(void))(**(void **)(*(void *)(v53 + 552) + 8) + 392))();
  uint64_t v55 = (__int16 *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v53 + 552) + 88))(*(void *)(v53 + 552), (v133.i64[1] - v133.i64[0]) >> 5);
  if (!v55 || (uint64_t v56 = v133.i64[1] - v133.i64[0], v133.i64[1] == v133.i64[0]))
  {
    if (!v133.i64[0]) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if ((unint64_t)v56 < 0x20)
  {
    __break(1u);
    goto LABEL_56;
  }
  uint64_t v57 = v56 >> 5;
  unsigned int v58 = (int *)v133.i64[0];
  do
  {
    int v59 = *v58;
    v58 += 8;
    int v60 = v59 + v52;
    int v61 = *v55++;
    unsigned int v52 = v60 + v61;
    --v57;
  }
  while (v57);
LABEL_22:
  v133.i64[1] = v133.i64[0];
  operator delete((void *)v133.i64[0]);
LABEL_23:
  THandlerStreamingBuffers::WriteStringF(v49, (THandlerStreamingBuffers *)0xD, v54, (v52 & 0x7FFFF) + 4000000);
  uint64_t v62 = *(THandlerStreamingBuffers **)(v38 + 8);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  int64_t v64 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x2E, v133.i64, v63);
  THandlerStreamingBuffers::WriteBytes(v62, v133.u64[0], v64);
  int64_t v65 = *(THandlerStreamingBuffers **)(v38 + 8);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  unint64_t v67 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1A, v133.i64, v66);
  THandlerStreamingBuffers::WriteBytes(v65, v133.u64[0], v67);
  *(void *)&long long v68 = -1;
  *((void *)&v68 + 1) = -1;
  *(_OWORD *)&v129.CGFloat c = v68;
  *(_OWORD *)&v129.tCGFloat x = v68;
  *(_OWORD *)&v129.a = v68;
  unint64_t v130 = 0xAAAAAAAAAAAAAA00;
  LOBYTE(v129.a) = 0;
  if (v30 != 1.0)
  {
    CGAffineTransformMakeScale(&v129, v30, v30);
    LOBYTE(v130) = 1;
  }
  unsigned int v69 = (*(uint64_t (**)(void))(**(void **)(*(void *)(v38 + 552) + 8) + 168))(*(void *)(*(void *)(v38 + 552) + 8));
  if (v69 >= 0xFFFF) {
    int v70 = 0xFFFF;
  }
  else {
    int v70 = v69;
  }
  int v125 = v70;
  unsigned int v71 = *(THandlerStreamingBuffers **)(v38 + 16);
  v133.i32[0] = 1998898061;
  THandlerStreamingBuffers::WriteBytes(v71, 4uLL, (unsigned __int8 *)&v133);
  unint64_t v72 = *(THandlerStreamingBuffers **)(v38 + 16);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  long long v74 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1D, v133.i64, v73);
  THandlerStreamingBuffers::WriteBytes(v72, v133.u64[0], v74);
  if (v125)
  {
    if (a4) {
      *a4 |= 0x80000000;
    }
    unsigned int v76 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    unsigned int v77 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1E, v133.i64, v75);
    THandlerStreamingBuffers::WriteBytes(v76, v133.u64[0], v77);
    THandlerEExecBuffer::WriteNumber(*(THandlerEExecBuffer **)(v38 + 16), 4);
    int64_t v78 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v80 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1F, v133.i64, v79);
    THandlerStreamingBuffers::WriteBytes(v78, v133.u64[0], v80);
    uint64_t v81 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    uint64_t v83 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x23, v133.i64, v82);
    THandlerStreamingBuffers::WriteBytes(v81, v133.u64[0], v83);
    long long v84 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    long long v86 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x24, v133.i64, v85);
    THandlerStreamingBuffers::WriteBytes(v84, v133.u64[0], v86);
    THandlerEExecBuffer::WriteNumber(*(THandlerEExecBuffer **)(v38 + 16), v125);
    long long v87 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    unint64_t v89 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x25, v133.i64, v88);
    THandlerStreamingBuffers::WriteBytes(v87, v133.u64[0], v89);
    unsigned int v91 = v125;
    if (a4)
    {
      uint64_t v92 = a4;
      for (unsigned int i = 0; i < v91; i += 32)
      {
        if (*v92)
        {
          int v94 = 0;
          unsigned int v95 = 0x80000000;
          do
          {
            if ((*v92 & v95) != 0 && i + v94 < v91)
            {
              double v128 = NAN;
              double GlyphIdealAdvanceAndSideBearing = FPFontGetGlyphIdealAdvanceAndSideBearing(a2);
              double v128 = v30 * v128;
              CFStringRef v98 = TFont::CopyGlyphName(*(TFont **)(*(void *)(v38 + 552) + 8));
              CFStringRef v99 = v98;
              if (v98)
              {
                *(void *)&long long v100 = 0xAAAAAAAAAAAAAAAALL;
                *((void *)&v100 + 1) = 0xAAAAAAAAAAAAAAAALL;
                *(_OWORD *)&v134[8] = v100;
                long long v135 = v100;
                int64x2_t v133 = 0uLL;
                *(void *)int v134 = 0;
                uint64_t v136 = &v134[8];
                CString = (char *)GetCStringPtr<TInlineVector<char,30ul>>(v98, &v133, 0x600u);
                if (CString) {
                  THandlerEExecBuffer::WriteGlyphName(*(THandlerEExecBuffer **)(v38 + 16), CString);
                }
                CFRelease(v99);
                v132[0] = (void **)&v133;
                std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](v132);
              }
              long long v102 = *(THandlerStreamingBuffers **)(v38 + 24);
              v133.i32[0] = 1869051240;
              THandlerStreamingBuffers::WriteBytes(v102, 4uLL, (unsigned __int8 *)&v133);
              uint64_t v103 = *(THandlerStreamingBuffers **)(v38 + 24);
              v133.i64[0] = __PAIR64__(llround(v30 * GlyphIdealAdvanceAndSideBearing), llround(v128));
              THandlerCharStringBuffer::WriteNumbers(v103, v133.i32, (unsigned __int8 *)2);
              unsigned int v104 = *(THandlerStreamingBuffers **)(v38 + 24);
              v133.i8[0] = 13;
              THandlerStreamingBuffers::WriteBytes(v104, 1uLL, (unsigned __int8 *)&v133);
              long long v105 = (const CGPath *)FPFontCopyOriginalGlyphPath(a2);
              long long v106 = v105;
              if (v105)
              {
                if (CGPathIsEmpty(v105))
                {
                  CGPathRef CopyByNormalizing = v106;
                }
                else
                {
                  CGPathRef CopyByNormalizing = CGPathCreateCopyByNormalizing(v106, 0);
                  CGPathRelease(v106);
                  v132[0] = 0;
                  v132[1] = (void **)v132;
                  v132[2] = (void **)0x3802000000;
                  v132[3] = (void **)__Block_byref_object_copy_;
                  v132[4] = (void **)__Block_byref_object_dispose_;
                  v132[5] = *(void ***)&v128;
                  v132[6] = 0;
                  v133.i64[0] = 0;
                  v133.i64[1] = (uint64_t)&v133;
                  *(void *)int v134 = 0x4002000000;
                  *(void *)&v134[8] = __Block_byref_object_copy__1;
                  *(void *)&v134[16] = __Block_byref_object_dispose__2;
                  *(void *)&long long v135 = -256;
                  *((void *)&v135 + 1) = -1;
                  uint64_t v136 = (unsigned char *)0xAAAAAAAAAAAAAA00;
                  block[0] = MEMORY[0x1E4F143A8];
                  block[1] = 0x40000000;
                  block[2] = ___ZNK24THandlerStreamingContext13WriteContoursEPK6CGPathhd_block_invoke;
                  block[3] = &unk_1E60F4D10;
                  block[5] = &v133;
                  block[6] = v38;
                  block[4] = v132;
                  CGPathApplyWithBlock(CopyByNormalizing, block);
                  _Block_object_dispose(&v133, 8);
                  _Block_object_dispose(v132, 8);
                }
                CGPathRelease(CopyByNormalizing);
              }
              long long v108 = *(THandlerStreamingBuffers **)(v38 + 24);
              v133.i8[0] = 14;
              THandlerStreamingBuffers::WriteBytes(v108, 1uLL, (unsigned __int8 *)&v133);
              THandlerEExecBuffer::WriteSize(*(THandlerEExecBuffer **)(v38 + 16), *(void *)(*(void *)(v38 + 24) + 24));
              long long v109 = *(THandlerStreamingBuffers **)(v38 + 16);
              v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
              int v111 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x21, v133.i64, v110);
              THandlerStreamingBuffers::WriteBytes(v109, v133.u64[0], v111);
              (*(void (**)(void))(**(void **)(v38 + 24) + 40))();
              int v112 = *(THandlerStreamingBuffers **)(v38 + 16);
              v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
              long long v114 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x23, v133.i64, v113);
              THandlerStreamingBuffers::WriteBytes(v112, v133.u64[0], v114);
              unsigned int v91 = v125;
            }
            v95 >>= 1;
            ++v94;
          }
          while (v94 != 32);
        }
        ++v92;
      }
    }
    long long v115 = *(THandlerStreamingBuffers **)(v38 + 16);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    long long v116 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x27, v133.i64, v90);
    THandlerStreamingBuffers::WriteBytes(v115, v133.u64[0], v116);
  }
  (*(void (**)(void))(**(void **)(v38 + 16) + 40))(*(void *)(v38 + 16));
  int v118 = 8;
  do
  {
    long long v119 = *(THandlerStreamingBuffers **)(v38 + 8);
    v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
    long long v120 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1B, v133.i64, v117);
    THandlerStreamingBuffers::WriteBytes(v119, v133.u64[0], v120);
    --v118;
  }
  while ((_WORD)v118);
  long long v121 = *(THandlerStreamingBuffers **)(v38 + 8);
  v133.i64[0] = 0xAAAAAAAAAAAAAAAALL;
  long long v122 = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x1C, v133.i64, v117);
  return THandlerStreamingBuffers::WriteBytes(v121, v133.u64[0], v122);
}

void sub_1B5362ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v46 = *(void **)(v44 - 240);
  if (v46)
  {
    *(void *)(v44 - 232) = v46;
    operator delete(v46);
  }
  _Unwind_Resume(exception_object);
}

uint64_t THandlerStreamingContext::StreamPSEncoding(void *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v5 = (THandlerStreamingBuffers *)a1[1];
  unint64_t v9 = 0xAAAAAAAAAAAAAAAALL;
  ZString = (unsigned __int8 *)THandlerStreamingBuffers::GetZString((THandlerStreamingBuffers *)0x18, (uint64_t *)&v9, a3);
  THandlerStreamingBuffers::WriteBytes(v5, v9, ZString);
  uint64_t v7 = *(uint64_t (**)(void *, uint64_t))(*a1 + 16);
  return v7(a1, a2);
}

void THandlerStreamingContext::StreamEncodingData(THandlerStreamingContext *this, const unsigned __int16 *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (*(uint64_t (**)(void))(**(void **)(*((void *)this + 69) + 8) + 168))(*(void *)(*((void *)this + 69) + 8));
  uint64_t v5 = 0;
  if (v4 >= 0xFFFF) {
    unsigned int v6 = 0xFFFF;
  }
  else {
    unsigned int v6 = v4;
  }
  do
  {
    if (a2[v5]) {
      BOOL v7 = a2[v5] >= v6;
    }
    else {
      BOOL v7 = 1;
    }
    if (!v7)
    {
      CFStringRef v8 = TFont::CopyGlyphName(*(TFont **)(*((void *)this + 69) + 8));
      CFStringRef v9 = v8;
      if (v8)
      {
        *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v18[0] = v10;
        v18[1] = v10;
        int64x2_t v16 = 0uLL;
        uint64_t v17 = 0;
        int v19 = v18;
        CString = GetCStringPtr<TInlineVector<char,30ul>>(v8, &v16, 0x600u);
        unsigned int v12 = CString;
        if (CString)
        {
          size_t v14 = strlen(CString);
          if (v14 != 7 || strncmp(v12, ".notdef", 7uLL)) {
            THandlerStreamingBuffers::WriteStringF(*((THandlerStreamingBuffers **)this + 1), (THandlerStreamingBuffers *)0x19, v13, v5, v14, v12);
          }
        }
        CFRelease(v9);
        __int16 v15 = &v16;
        std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)&v15);
      }
    }
    ++v5;
  }
  while (v5 != 256);
}

void sub_1B5362D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14)
{
  a13 = (void **)&a14;
  std::vector<char,TInlineBufferAllocator<char,30ul>>::__destroy_vector::operator()[abi:fe180100](&a13);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__n128 __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void ___ZNK24THandlerStreamingContext13WriteContoursEPK6CGPathhd_block_invoke(void *a1, uint64_t a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[6];
  switch(*(_DWORD *)a2)
  {
    case 0:
      unsigned int v4 = *(THandlerStreamingBuffers **)(v3 + 24);
      uint64_t v5 = *(void *)(a1[4] + 8);
      double v7 = *(double *)(v5 + 40);
      double v6 = *(double *)(v5 + 48);
      CFStringRef v8 = *(double **)(a2 + 8);
      double v9 = *v8;
      double v10 = v8[1];
      if (v6 == v10)
      {
        int v89 = llround(v9 - v7);
        THandlerCharStringBuffer::WriteNumbers(v4, &v89, (unsigned __int8 *)1);
        char v11 = 22;
      }
      else if (v7 == v9)
      {
        int v89 = llround(v10 - v6);
        THandlerCharStringBuffer::WriteNumbers(v4, &v89, (unsigned __int8 *)1);
        char v11 = 4;
      }
      else
      {
        int v89 = llround(v9 - v7);
        int v90 = llround(v10 - v6);
        THandlerCharStringBuffer::WriteNumbers(v4, &v89, (unsigned __int8 *)2);
        char v11 = 21;
      }
      LOBYTE(v89) = v11;
      THandlerStreamingBuffers::WriteBytes(v4, 1uLL, (unsigned __int8 *)&v89);
      uint64_t v81 = *(void *)(a1[4] + 8);
      *(double *)(v81 + 40) = v9;
      *(double *)(v81 + 48) = v10;
      uint64_t v82 = *(void *)(a1[5] + 8);
      if (!*(unsigned char *)(v82 + 56))
      {
        *(_OWORD *)(v82 + 40) = *(_OWORD *)(*(void *)(a1[4] + 8) + 40);
        *(unsigned char *)(v82 + 56) = 1;
      }
      break;
    case 1:
      double v12 = WriteDelta<(unsigned char)6,(unsigned char)7,(unsigned char)5>(*(THandlerStreamingBuffers **)(v3 + 24), *(double *)(*(void *)(a1[4] + 8) + 40), *(double *)(*(void *)(a1[4] + 8) + 48), **(double **)(a2 + 8), *(double *)(*(void *)(a2 + 8) + 8));
      uint64_t v13 = *(void *)(a1[4] + 8);
      *(double *)(v13 + 40) = v12;
      *(void *)(v13 + 48) = v14;
      break;
    case 2:
      uint64_t v15 = *(void *)(a1[4] + 8);
      double v16 = *(double *)(v15 + 48);
      uint64_t v17 = *(double **)(a2 + 8);
      double v18 = v17[2];
      double v19 = v17[3];
      unsigned int v20 = llround(*(double *)(v15 + 40));
      unsigned int v21 = llround(v16);
      unsigned int v22 = llround(*v17);
      unsigned int v23 = llround(v18);
      unsigned int v24 = llround(v19);
      unsigned int v25 = v22 - v20;
      if (v22 == v20 && v23 == v22)
      {
        long long v74 = *(THandlerStreamingBuffers **)(v3 + 24);
        long long v84 = (THandlerStreamingBuffers **)(v3 + 24);
        long long v73 = v74;
        int v75 = v24 - v21;
        goto LABEL_58;
      }
      unsigned int v27 = llround(v17[1]);
      unsigned int v28 = v27 - v21;
      if (v27 == v21 && v24 == v27)
      {
        int64_t v78 = *(THandlerStreamingBuffers **)(v3 + 24);
        long long v84 = (THandlerStreamingBuffers **)(v3 + 24);
        unsigned int v77 = v78;
        int v79 = v23 - v20;
        goto LABEL_63;
      }
      int v30 = 2 * v25;
      int v31 = (int)((2 * v25) | 1) / 3;
      unsigned int v32 = v31 + v20;
      unsigned int v33 = (int)((2 * v28) | 1) / 3 + v21;
      unsigned int v34 = v23 - v22;
      int v35 = (int)((2 * (v23 - v22)) | 1) / 3;
      unsigned int v36 = v23 - v35;
      int v37 = 2 * (v24 - v27);
      unsigned int v38 = v24 - (v37 | 1) / 3;
      if ((v30 + 3) <= 4 && (v37 + 3) <= 4)
      {
        long long v85 = *(THandlerStreamingBuffers **)(v3 + 24);
        long long v84 = (THandlerStreamingBuffers **)(v3 + 24);
        uint64_t v83 = v85;
        int v89 = (int)((2 * v28) | 1) / 3;
        int v90 = v36 - v32;
        unsigned int v91 = v38 - v33;
        int v92 = v35;
        goto LABEL_68;
      }
      unsigned int v40 = 2 * v34 + 3;
      long long v42 = *(THandlerStreamingBuffers **)(v3 + 24);
      long long v84 = (THandlerStreamingBuffers **)(v3 + 24);
      uint64_t v41 = v42;
      if (2 * v28 + 3 <= 4 && v40 <= 4)
      {
        int v89 = v31;
        int v90 = v36 - v32;
        unsigned int v91 = v38 - v33;
        int v92 = (v37 | 1) / 3;
        goto LABEL_70;
      }
      int v89 = v31;
      int v90 = (int)((2 * v28) | 1) / 3;
      unsigned int v91 = v36 - v32;
      int v92 = v38 - v33;
      int v93 = v35;
      int v94 = (v37 | 1) / 3;
      goto LABEL_47;
    case 3:
      uint64_t v44 = *(void *)(a1[4] + 8);
      uint64_t v45 = *(double **)(a2 + 8);
      double v18 = v45[4];
      double v19 = v45[5];
      unsigned int v46 = llround(*(double *)(v44 + 40));
      unsigned int v47 = llround(*(double *)(v44 + 48));
      unsigned int v48 = llround(*v45);
      unsigned int v49 = llround(v45[2]);
      unsigned int v50 = llround(v18);
      unsigned int v51 = llround(v19);
      if (v48 == v46 && v49 == v48 && v50 == v49)
      {
        unsigned int v76 = *(THandlerStreamingBuffers **)(v3 + 24);
        long long v84 = (THandlerStreamingBuffers **)(v3 + 24);
        long long v73 = v76;
        int v75 = v51 - v47;
LABEL_58:
        int v89 = v75;
        THandlerCharStringBuffer::WriteNumbers(v73, &v89, (unsigned __int8 *)1);
        char v61 = 7;
      }
      else
      {
        unsigned int v54 = llround(v45[1]);
        unsigned int v55 = llround(v45[3]);
        if (v54 == v47 && v55 == v54 && v51 == v55)
        {
          unint64_t v80 = *(THandlerStreamingBuffers **)(v3 + 24);
          long long v84 = (THandlerStreamingBuffers **)(v3 + 24);
          unsigned int v77 = v80;
          int v79 = v50 - v46;
LABEL_63:
          int v89 = v79;
          THandlerCharStringBuffer::WriteNumbers(v77, &v89, (unsigned __int8 *)1);
          char v61 = 6;
        }
        else if (v48 == v46 && v51 == v55)
        {
          long long v86 = *(THandlerStreamingBuffers **)(v3 + 24);
          long long v84 = (THandlerStreamingBuffers **)(v3 + 24);
          uint64_t v83 = v86;
          int v89 = v54 - v47;
          int v90 = v49 - v46;
          unsigned int v91 = v55 - v54;
          int v92 = v50 - v49;
LABEL_68:
          THandlerCharStringBuffer::WriteNumbers(v83, &v89, (unsigned __int8 *)4);
          char v61 = 30;
        }
        else
        {
          int v59 = *(THandlerStreamingBuffers **)(v3 + 24);
          long long v84 = (THandlerStreamingBuffers **)(v3 + 24);
          uint64_t v41 = v59;
          if (v54 == v47 && v50 == v49)
          {
            int v89 = v48 - v46;
            int v90 = v49 - v48;
            unsigned int v91 = v55 - v47;
            int v92 = v51 - v55;
LABEL_70:
            THandlerCharStringBuffer::WriteNumbers(v41, &v89, (unsigned __int8 *)4);
            char v61 = 31;
          }
          else
          {
            int v89 = v48 - v46;
            int v90 = v54 - v47;
            unsigned int v91 = v49 - v48;
            int v92 = v55 - v54;
            int v93 = v50 - v49;
            int v94 = v51 - v55;
LABEL_47:
            THandlerCharStringBuffer::WriteNumbers(v41, &v89, (unsigned __int8 *)6);
            char v61 = 8;
          }
        }
      }
      long long v87 = *v84;
      LOBYTE(v89) = v61;
      THandlerStreamingBuffers::WriteBytes(v87, 1uLL, (unsigned __int8 *)&v89);
      uint64_t v88 = *(void *)(a1[4] + 8);
      *(double *)(v88 + 40) = v18;
      *(double *)(v88 + 48) = v19;
      break;
    case 4:
      uint64_t v62 = *(void *)(a1[5] + 8);
      if (*(unsigned char *)(v62 + 56))
      {
        double v63 = *(double *)(v62 + 40);
        double v64 = *(double *)(v62 + 48);
        uint64_t v65 = *(void *)(a1[4] + 8);
        double v66 = *(double *)(v65 + 40);
        double v67 = *(double *)(v65 + 48);
        BOOL v68 = v63 == v66 && v64 == v67;
        if (v68
          || (v69 = WriteDelta<(unsigned char)6,(unsigned char)7,(unsigned char)5>(*(THandlerStreamingBuffers **)(v3 + 24), v66, v67, v63, v64), uint64_t v70 = *(void *)(a1[4] + 8), *(double *)(v70 + 40) = v69, *(void *)(v70 + 48) = v71, v62 = *(void *)(a1[5] + 8), *(unsigned char *)(v62 + 56)))
        {
          *(unsigned char *)(v62 + 56) = 0;
        }
      }
      unint64_t v72 = *(THandlerStreamingBuffers **)(v3 + 24);
      LOBYTE(v89) = 9;
      THandlerStreamingBuffers::WriteBytes(v72, 1uLL, (unsigned __int8 *)&v89);
      break;
    default:
      return;
  }
}

void TType1StreamingContext::~TType1StreamingContext(TType1StreamingContext *this)
{
  THandlerStreamingContext::~THandlerStreamingContext(this);
  JUMPOUT(0x1BA9994D0);
}

void TType1StreamingContext::StreamEncoding(THandlerStreamingContext *this, const void *a2)
{
  uint64_t v3 = *(void *)(*((void *)this + 70) + 8);
  uint64_t v4 = *(void *)(v3 + 88);
  if (v4)
  {
    unint64_t v5 = *(void *)(v3 + 96);
    memcpy(v9, a2, sizeof(v9));
    for (uint64_t i = 0; i != 29; ++i)
    {
      unint64_t v7 = kComponentCodes[i];
      if ((__int16)v9[v7] == -1 && v5 > v7) {
        v9[v7] = *(_WORD *)(v4 + 2 * v7);
      }
    }
    THandlerStreamingContext::StreamEncodingData(this, v9);
  }
  else
  {
    THandlerStreamingContext::StreamEncodingData(this, (const unsigned __int16 *)a2);
  }
}

double WriteDelta<(unsigned char)6,(unsigned char)7,(unsigned char)5>(THandlerStreamingBuffers *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a3 == a5)
  {
    v9[0] = llround(a4 - a2);
    THandlerCharStringBuffer::WriteNumbers(a1, v9, (unsigned __int8 *)1);
    char v7 = 6;
  }
  else if (a2 == a4)
  {
    v9[0] = llround(a5 - a3);
    THandlerCharStringBuffer::WriteNumbers(a1, v9, (unsigned __int8 *)1);
    char v7 = 7;
  }
  else
  {
    v9[0] = llround(a4 - a2);
    v9[1] = llround(a5 - a3);
    THandlerCharStringBuffer::WriteNumbers(a1, v9, (unsigned __int8 *)2);
    char v7 = 5;
  }
  LOBYTE(v9[0]) = v7;
  THandlerStreamingBuffers::WriteBytes(a1, 1uLL, (unsigned __int8 *)v9);
  return a4;
}

void TType2InterpreterContext::~TType2InterpreterContext(TType2InterpreterContext *this)
{
  *(void *)this = &unk_1F0E01C40;
  TDataReference::~TDataReference((TType2InterpreterContext *)((char *)this + 3144));
  TDataReference::~TDataReference((TType2InterpreterContext *)((char *)this + 3112));
  *(void *)this = &unk_1F0E01408;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    MEMORY[0x1BA9994A0](v2, 0x1000C8052888210);
  }
}

{
  uint64_t vars8;

  TType2InterpreterContext::~TType2InterpreterContext(this);
  JUMPOUT(0x1BA9994D0);
}

void TType2CFFInterpreterContext::~TType2CFFInterpreterContext(TType2CFFInterpreterContext *this)
{
  TType2InterpreterContext::~TType2InterpreterContext(this);
  JUMPOUT(0x1BA9994D0);
}

void TType2CFF2InterpreterContext::~TType2CFF2InterpreterContext(TType2CFF2InterpreterContext *this)
{
  TType2InterpreterContext::~TType2InterpreterContext(this);
  JUMPOUT(0x1BA9994D0);
}

void TType2CIDInterpreterContext::~TType2CIDInterpreterContext(TType2CIDInterpreterContext *this)
{
  TType2InterpreterContext::~TType2InterpreterContext(this);
  JUMPOUT(0x1BA9994D0);
}

void TType1FontType2CharStringHandler::~TType1FontType2CharStringHandler(TType1FontType2CharStringHandler *this)
{
}

void TType1FontType2CharStringHandler::ParseOutline(TType1FontType2CharStringHandler *this, unsigned int a2, TType1RenderingContext *a3)
{
  *((_DWORD *)a3 + 8) = *(_DWORD *)(*((void *)a3 + 13) + 3108);
}

void TType1FontType2CharStringHandler::GetOutlinePath(uint64_t a1, uint64_t a2, void (***a3)(void, uint64_t))
{
  memset(__b, 170, sizeof(__b));
  TType2CFFInterpreterContext::TType2CFFInterpreterContext((TType2CFFInterpreterContext *)__b, *(const TOpenTypeFont **)(a1 + 8));
  double v6 = *(void **)(a1 + 16);
  if (v6)
  {
    memset(&v10[2], 255, 32);
    uint64_t v11 = -1;
    v10[0] = xmmword_1B54023D0;
    v10[1] = unk_1B54023E0;
    unsigned int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))(*(void *)(a1 + 8));
    TType1GlyphOutlineBatch::TType1GlyphOutlineBatch((uint64_t)v10, (uint64_t)a3, v6, (double)v7);
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v18 = v8;
    long long v19 = v8;
    long long v16 = v8;
    long long v17 = v8;
    long long v14 = v8;
    long long v15 = v8;
    long long v12 = v8;
    long long v13 = v8;
    TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)&v12, (TInterpreterContext *)__b, 0);
    *(void *)&long long v12 = &unk_1F0E01430;
    *((void *)&v19 + 1) = v10;
    (**(void (***)(_OWORD *, uint64_t))&v10[0])(v10, a2);
    LOBYTE(v18) = 1;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 128))(a1, a2, &v12);
    (*(void (**)(void))(**((void **)&v19 + 1) + 40))(*((void *)&v19 + 1));
  }
  else
  {
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v18 = v9;
    long long v19 = v9;
    long long v16 = v9;
    long long v17 = v9;
    long long v14 = v9;
    long long v15 = v9;
    long long v12 = v9;
    long long v13 = v9;
    TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)&v12, (TInterpreterContext *)__b, 0);
    *(void *)&long long v12 = &unk_1F0E01430;
    *((void *)&v19 + 1) = a3;
    (**a3)(a3, a2);
    LOBYTE(v18) = 1;
    (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)a1 + 128))(a1, a2, &v12);
    (*(void (**)(void))(**((void **)&v19 + 1) + 40))(*((void *)&v19 + 1));
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
}

void sub_1B53638C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
}

void TType1FontType2CharStringHandler::GetHorizontalAdvances(const TOpenTypeFont **this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  memset(__b, 170, sizeof(__b));
  TType2CFFInterpreterContext::TType2CFFInterpreterContext((TType2CFFInterpreterContext *)__b, this[1]);
  if (a4)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 8 * a4;
    do
    {
      *a3++ = (*((double (**)(const TOpenTypeFont **, unsigned char *, void, void, void))*this + 18))(this, __b, a2[v8++], 0, 0);
      v9 -= 8;
    }
    while (a4 != v8);
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
}

uint64_t TType1FontType2CharStringHandler::GetRawMetrics(const TOpenTypeFont **this, uint64_t a2, double *a3, double *a4, uint64_t a5)
{
  memset(__b, 170, sizeof(__b));
  TType2CFFInterpreterContext::TType2CFFInterpreterContext((TType2CFFInterpreterContext *)__b, this[1]);
  *a3 = (*((double (**)(const TOpenTypeFont **, unsigned char *, uint64_t, double *, uint64_t))*this + 18))(this, __b, a2, a4, a5);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
  return 1;
}

void sub_1B5363A80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)va);
  _Unwind_Resume(a1);
}

uint64_t TType1FontType2CharStringHandler::GetBounds(TType1FontType2CharStringHandler *this, unsigned int a2, double *a3, double *a4, double *a5, double *a6)
{
  return 0;
}

BOOL TType1FontType2CharStringHandler::GetHorizontalToVerticalTranslate(void *a1, uint64_t a2, _OWORD *a3)
{
  double v6 = (const TOpenTypeFont *)a1[1];
  uint64_t v7 = (*(uint64_t (**)(const TOpenTypeFont *))(*(void *)v6 + 432))(v6);
  if (!v7)
  {
    memset(__b, 170, sizeof(__b));
    TType2CFFInterpreterContext::TType2CFFInterpreterContext((TType2CFFInterpreterContext *)__b, v6);
    (*(void (**)(long long *__return_ptr, void *, unsigned char *, uint64_t))(*a1 + 160))(&v9, a1, __b, a2);
    *a3 = v9;
    TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
  }
  return v7 == 0;
}

void sub_1B5363B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)va);
  _Unwind_Resume(a1);
}

void std::vector<short,TInlineBufferAllocator<short,30ul>>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 1;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    long long v19 = &v3[2 * a2];
    goto LABEL_16;
  }
  unint64_t v6 = a2 - v5;
  uint64_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 1)
  {
    bzero(a1[1], 2 * v6);
    long long v19 = &v4[2 * v6];
LABEL_16:
    a1[1] = v19;
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
  }
  unint64_t v8 = (unint64_t)(a1 + 3);
  unint64_t v9 = v7 - v3;
  if (v9 <= a2) {
    unint64_t v10 = a2;
  }
  else {
    unint64_t v10 = v9;
  }
  if (v9 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v11 = v10;
  }
  long long v12 = (char *)TInlineBufferAllocator<unsigned short,30ul>::allocate((uint64_t)(a1 + 3), v11);
  long long v13 = *a1;
  long long v14 = a1[1];
  long long v15 = &v12[2 * v5];
  long long v16 = &v12[2 * v11];
  bzero(v15, 2 * v6);
  long long v17 = &v15[2 * v6];
  while (v14 != v13)
  {
    __int16 v18 = *((_WORD *)v14 - 1);
    v14 -= 2;
    *((_WORD *)v15 - 1) = v18;
    v15 -= 2;
  }
  *a1 = v15;
  a1[1] = v17;
  unsigned int v20 = a1[2];
  a1[2] = v16;
  if (v13)
  {
    if (v8 > (unint64_t)v13 || (char *)a1 + 84 <= v13)
    {
      operator delete(v13);
    }
    else if (v20 == a1[11])
    {
      a1[11] = v13;
    }
  }
}

void TType1FontType2CFF2CharStringHandler::~TType1FontType2CFF2CharStringHandler(TType1FontType2CFF2CharStringHandler *this)
{
  *(void *)this = &unk_1F0E01C68;
  uint64_t v1 = (void **)((char *)this + 32);
  uint64_t v2 = (void **)((char *)this + 128);
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](&v2);
  uint64_t v2 = v1;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](&v2);
}

{
  void **v1;
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E01C68;
  uint64_t v1 = (void **)((char *)this + 32);
  uint64_t v2 = (void **)((char *)this + 128);
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100](&v2);
  uint64_t v2 = v1;
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100](&v2);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TType1FontType2CFF2CharStringHandler::GetRawMetrics(TType1FontType2CFF2CharStringHandler *this, unsigned int a2, double *a3, double *a4)
{
  *a3 = 0.0;
  return 0;
}

void TType1FontType2CFF2CharStringHandler::GetHorizontalAdvances(TType1FontType2CFF2CharStringHandler *this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  memset(v11, 170, sizeof(v11));
  unint64_t v8 = (const TOpenTypeFont *)*((void *)this + 1);
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)v11, v8, 1);
  v11[0] = &unk_1F0E01F18;
  v11[409] = v8;
  if (a4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 8 * a4;
    do
    {
      TType2CFF2InterpreterContext::SetFontDict((TType2CFF2InterpreterContext *)v11, a2[v9]);
      *a3++ = (*(double (**)(TType1FontType2CFF2CharStringHandler *, void *, void, void, void))(*(void *)this + 144))(this, v11, a2[v9++], 0, 0);
      v10 -= 8;
    }
    while (a4 != v9);
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)v11);
}

uint64_t TType2CFF2InterpreterContext::SetFontDict(TType2CFF2InterpreterContext *this, unsigned int a2)
{
  unsigned int FDIndexCFF2 = TSFNTOpenTypeCFF2Font::GetFDIndexCFF2(*((TSFNTOpenTypeCFF2Font **)this + 409), a2);
  uint64_t result = TSFNTOpenTypeCFF2Font::GetLocalSubrOffsetsAndData(*((TSFNTOpenTypeCFF2Font **)this + 409), FDIndexCFF2, (unsigned __int16 *)this + 80, (unsigned __int16 *)this + 81, (unsigned __int16 *)this + 1588, (TType2CFF2InterpreterContext *)((char *)this + 3112), (TType2CFF2InterpreterContext *)((char *)this + 3144));
  *((void *)this + 23) = result;
  uint64_t v5 = *((void *)this + 390);
  if (v5)
  {
    uint64_t v5 = *(void *)(v5 + 8);
    if (v5) {
      v5 += *((void *)this + 391);
    }
  }
  *((void *)this + 21) = v5;
  uint64_t v6 = *((void *)this + 394);
  if (v6)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6) {
      v6 += *((void *)this + 395);
    }
  }
  *((void *)this + 22) = v6;
  __int16 v7 = *(_WORD *)(*(void *)(*((void *)this + 409) + 608) + 488 * FDIndexCFF2 + 484);
  *((_WORD *)this + 1604) = v7;
  *((_WORD *)this + 1605) = v7;
  return result;
}

void TType1FontType2CFF2CharStringHandler::GetOutlinePath(void *a1, uint64_t a2, void (***a3)(void, uint64_t), unsigned char *a4)
{
  memset(__b, 170, sizeof(__b));
  unint64_t v8 = (const TOpenTypeFont *)a1[1];
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)__b, v8, 1);
  __b[0] = &unk_1F0E01F18;
  __b[409] = v8;
  TType2CFF2InterpreterContext::SetFontDict((TType2CFF2InterpreterContext *)__b, a2);
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v11 = v9;
  long long v12 = v9;
  _OWORD v10[4] = v9;
  v10[5] = v9;
  unsigned __int8 v10[2] = v9;
  void v10[3] = v9;
  v10[0] = v9;
  v10[1] = v9;
  TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)v10, (TInterpreterContext *)__b, 0);
  *(void *)&v10[0] = &unk_1F0E01430;
  *((void *)&v12 + 1) = a3;
  (**a3)(a3, a2);
  LOBYTE(v11) = 1;
  (*(void (**)(void *, uint64_t, _OWORD *))(*a1 + 128))(a1, a2, v10);
  (*(void (**)(void))(**((void **)&v12 + 1) + 40))(*((void *)&v12 + 1));
  if (a4 && a1[4] != a1[5]) {
    *a4 = 1;
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
}

void sub_1B536413C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)va);
  _Unwind_Resume(a1);
}

void TType1FontType2CIDCharStringHandler::~TType1FontType2CIDCharStringHandler(TType1FontType2CIDCharStringHandler *this)
{
}

void TType1FontType2CIDCharStringHandler::GetOutlinePath(void *a1, uint64_t a2, void (***a3)(void, uint64_t))
{
  memset(__b, 170, sizeof(__b));
  uint64_t v6 = (const TOpenTypeFont *)a1[1];
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)__b, v6, 0);
  __b[409] = v6;
  __b[0] = &unk_1F0E01F58;
  memset(v25, 170, sizeof(v25));
  __n128 v7 = TType2CIDInterpreterContext::SetFontDict((TType2CIDInterpreterContext *)__b, a2, (TFractMatrix *)v25);
  unint64_t v8 = (void *)a1[2];
  if (v8
    || ((LODWORD(v25[0]) - 1073741) <= 1 ? (BOOL v9 = HIDWORD(v25[0]) == 0) : (BOOL v9 = 0),
        v9 ? (BOOL v10 = LODWORD(v25[1]) == 0) : (BOOL v10 = 0),
        !v10 || (HIDWORD(v25[1]) - 1073741) > 1 || v25[2]))
  {
    double v12 = (double)(*(unsigned int (**)(void, __n128))(*(void *)a1[1] + 72))(a1[1], v7);
    if (a1[2]) {
      long long v13 = v8;
    }
    else {
      long long v13 = v25;
    }
    if (!a1[2]) {
      double v12 = 1.0;
    }
    memset(&v15[2], 255, 32);
    uint64_t v16 = -1;
    v15[0] = xmmword_1B54023D0;
    v15[1] = unk_1B54023E0;
    TType1GlyphOutlineBatch::TType1GlyphOutlineBatch((uint64_t)v15, (uint64_t)a3, v13, v12);
    *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v23 = v14;
    long long v24 = v14;
    long long v21 = v14;
    long long v22 = v14;
    long long v19 = v14;
    long long v20 = v14;
    long long v17 = v14;
    long long v18 = v14;
    TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)&v17, (TInterpreterContext *)__b, 0);
    *(void *)&long long v17 = &unk_1F0E01430;
    *((void *)&v24 + 1) = v15;
    (**(void (***)(_OWORD *, uint64_t))&v15[0])(v15, a2);
    LOBYTE(v23) = 1;
    (*(void (**)(void *, uint64_t, long long *))(*a1 + 128))(a1, a2, &v17);
    (*(void (**)(void))(**((void **)&v24 + 1) + 40))(*((void *)&v24 + 1));
  }
  else
  {
    *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v23 = v11;
    long long v24 = v11;
    long long v21 = v11;
    long long v22 = v11;
    long long v19 = v11;
    long long v20 = v11;
    long long v17 = v11;
    long long v18 = v11;
    TType1RenderingContext::TType1RenderingContext((TType1RenderingContext *)&v17, (TInterpreterContext *)__b, 0);
    *(void *)&long long v17 = &unk_1F0E01430;
    *((void *)&v24 + 1) = a3;
    (**a3)(a3, a2);
    LOBYTE(v23) = 1;
    (*(void (**)(void *, uint64_t, long long *))(*a1 + 128))(a1, a2, &v17);
    (*(void (**)(void))(**((void **)&v24 + 1) + 40))(*((void *)&v24 + 1));
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
}

void sub_1B5364484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

__n128 TType2CIDInterpreterContext::SetFontDict(TType2CIDInterpreterContext *this, unsigned __int16 a2, TFractMatrix *a3)
{
  unsigned int v5 = (*(uint64_t (**)(void))(**((void **)this + 409) + 552))(*((void *)this + 409));
  *((void *)this + 23) = TOpenTypeCIDFont::GetLocalSubrOffsetsAndData(*((TOpenTypeCIDFont **)this + 409), v5, (unsigned __int16 *)this + 80, (unsigned __int16 *)this + 81, (unsigned __int16 *)this + 1588, (TType2CIDInterpreterContext *)((char *)this + 3112), (TType2CIDInterpreterContext *)((char *)this + 3144));
  uint64_t v6 = *((void *)this + 390);
  if (v6)
  {
    uint64_t v6 = *(void *)(v6 + 8);
    if (v6) {
      v6 += *((void *)this + 391);
    }
  }
  *((void *)this + 21) = v6;
  uint64_t v7 = *((void *)this + 394);
  if (v7)
  {
    uint64_t v7 = *(void *)(v7 + 8);
    if (v7) {
      v7 += *((void *)this + 395);
    }
  }
  *((void *)this + 22) = v7;
  uint64_t LocalParseData = TOpenTypeCIDFont::GetLocalParseData(*((TOpenTypeCIDFont **)this + 409));
  *((_DWORD *)this + 775) = *(_DWORD *)(LocalParseData + 120);
  *((_DWORD *)this + 776) = *(_DWORD *)(LocalParseData + 440);
  if (a3)
  {
    __n128 result = *(__n128 *)(LocalParseData + 4);
    *((void *)a3 + 2) = *(void *)(LocalParseData + 20);
    *(__n128 *)a3 = result;
  }
  return result;
}

uint64_t TType1FontType2CIDCharStringHandler::GetRawMetrics(TType1FontType2CIDCharStringHandler *this, uint64_t a2, double *a3, double *a4, uint64_t a5)
{
  memset(v13, 170, sizeof(v13));
  BOOL v10 = (const TOpenTypeFont *)*((void *)this + 1);
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)v13, v10, 0);
  v13[0] = &unk_1F0E01F58;
  v13[409] = v10;
  __n128 v11 = TType2CIDInterpreterContext::SetFontDict((TType2CIDInterpreterContext *)v13, a2, 0);
  *a3 = (*(double (**)(TType1FontType2CIDCharStringHandler *, void *, uint64_t, double *, uint64_t, __n128))(*(void *)this + 144))(this, v13, a2, a4, a5, v11);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)v13);
  return 1;
}

void sub_1B5364688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void TType1FontType2CIDCharStringHandler::GetHorizontalAdvances(TType1FontType2CIDCharStringHandler *this, const unsigned __int16 *a2, double *a3, uint64_t a4)
{
  memset(v12, 170, sizeof(v12));
  unint64_t v8 = (const TOpenTypeFont *)*((void *)this + 1);
  TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)v12, v8, 0);
  v12[0] = &unk_1F0E01F58;
  v12[409] = v8;
  if (a4)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 8 * a4;
    do
    {
      __n128 v11 = TType2CIDInterpreterContext::SetFontDict((TType2CIDInterpreterContext *)v12, a2[v9], 0);
      *a3++ = (*(double (**)(TType1FontType2CIDCharStringHandler *, void *, void, void, void, __n128))(*(void *)this + 144))(this, v12, a2[v9++], 0, 0, v11);
      v10 -= 8;
    }
    while (a4 != v9);
  }
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)v12);
}

uint64_t TType1FontType2CIDCharStringHandler::GetBounds(TType1FontType2CIDCharStringHandler *this, unsigned int a2, double *a3, double *a4, double *a5, double *a6)
{
  return 0;
}

BOOL TType1FontType2CIDCharStringHandler::GetHorizontalToVerticalTranslate(void *a1, uint64_t a2, _OWORD *a3)
{
  uint64_t v6 = (const TOpenTypeFont *)a1[1];
  uint64_t v7 = (*(uint64_t (**)(const TOpenTypeFont *))(*(void *)v6 + 432))(v6);
  if (!v7)
  {
    memset(__b, 170, sizeof(__b));
    TType2InterpreterContext::TType2InterpreterContext((TType2InterpreterContext *)__b, v6, 0);
    __b[0] = &unk_1F0E01F58;
    __b[409] = v6;
    __n128 v8 = TType2CIDInterpreterContext::SetFontDict((TType2CIDInterpreterContext *)__b, a2, 0);
    (*(void (**)(long long *__return_ptr, void *, void *, uint64_t, __n128))(*a1 + 160))(&v10, a1, __b, a2, v8);
    *a3 = v10;
    TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)__b);
  }
  return v7 == 0;
}

void sub_1B53648F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  TType2InterpreterContext::~TType2InterpreterContext((TType2InterpreterContext *)va);
  _Unwind_Resume(a1);
}

void TType1FontType2CharStringHandler::throwUnimplemented(TType1FontType2CharStringHandler *this, const unsigned __int8 *a2)
{
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &unk_1F0DD4440;
  exception[2] = -24;
}

uint64_t TType1FontType2CharStringHandler::GetStandardEncodingGlyphID(TType1FontType2CharStringHandler *this, int a2)
{
  uint64_t v2 = *((void *)this + 37);
  if (!v2) {
    goto LABEL_8;
  }
  unsigned int v3 = *(unsigned __int16 *)(v2 + 2 * (unsigned __int16)FPGetStandardEncodingSID(unsigned char)::gStdSIDs[a2]);
  unsigned int v4 = (*(uint64_t (**)(TType1FontType2CharStringHandler *))(*(void *)this + 168))(this);
  if (v4 >= 0xFFFF) {
    unsigned int v5 = 0xFFFF;
  }
  else {
    unsigned int v5 = v4;
  }
  if (v3 >= v5)
  {
    LODWORD(v2) = 0;
LABEL_8:
    int v6 = 0;
    int v7 = 0;
    return v6 | v2 | v7;
  }
  int v6 = v3 & 0xFF00;
  LODWORD(v2) = v3;
  int v7 = 0x10000;
  return v6 | v2 | v7;
}

void TType1FontType2CharStringHandler::ProcessSEAC(TType1FontType2CharStringHandler **this, unsigned int a2, unsigned int a3, unsigned __int8 a4, unsigned __int8 a5, TType1RenderingContext *a6)
{
  if (TType1FontType2CharStringHandler::GetStandardEncodingGlyphID(this[1], a4) < 0x10000
    || TType1FontType2CharStringHandler::GetStandardEncodingGlyphID(this[1], a5) < 0x10000
    || (unint64_t v11 = *((void *)a6 + 14) + 1, *((void *)a6 + 14) = v11, v11 > 0x3F))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = -21;
  }
  (*(void (**)(void **__return_ptr))(*(void *)this[1] + 488))(v15);
  (*((void (**)(TType1FontType2CharStringHandler **, void **, TType1RenderingContext *))*this + 17))(this, v15, a6);
  TCharString::~TCharString(v15);
  uint64_t v14 = *((void *)a6 + 2);
  uint64_t v13 = *((void *)a6 + 4);
  *((void *)a6 + 2) = 0;
  v15[1] = (void *)__PAIR64__(a3, a2);
  *((void *)a6 + 9) = __PAIR64__(a3, a2);
  (*(void (**)(void **__return_ptr))(*(void *)this[1] + 488))(v15);
  (*((void (**)(TType1FontType2CharStringHandler **, void **, TType1RenderingContext *))*this + 17))(this, v15, a6);
  TCharString::~TCharString(v15);
  *((void *)a6 + 2) = v14;
  *((void *)a6 + 4) = v13;
  *((void *)a6 + 9) = 0;
}

void sub_1B5364C18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  TCharString::~TCharString((void **)va);
  _Unwind_Resume(a1);
}

uint64_t TType1RenderingContext::xySetY2CurveTo(TType1RenderingContext *this, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, TVector *a8)
{
  (*(void (**)(TVector *))(*(void *)a8 + 16))(a8);
  uint64_t v14 = *((void *)a8 + 1);
  v18[0] = &off_1F0E01538;
  v18[1] = v14;
  (*(void (**)(TVector *, uint64_t, uint64_t))(*(void *)a8 + 16))(a8, a4, a5);
  uint64_t v15 = *((void *)a8 + 1);
  v17[0] = &off_1F0E01538;
  v17[1] = v15;
  (*(void (**)(TVector *, uint64_t))(*(void *)a8 + 24))(a8, a6);
  *((_DWORD *)a8 + 3) = a7;
  return (*(uint64_t (**)(TType1RenderingContext *, void *, void *, TVector *))(*(void *)this + 16))(this, v18, v17, a8);
}

uint64_t TType1RenderingContext::xxSetY1CurveTo(TType1RenderingContext *this, int a2, uint64_t a3, int a4, uint64_t a5, TVector *a6)
{
  (*(void (**)(TVector *))(*(void *)a6 + 24))(a6);
  uint64_t v11 = *((void *)a6 + 1);
  v15[0] = &off_1F0E01538;
  v15[1] = v11;
  (*(void (**)(TVector *, uint64_t))(*(void *)a6 + 24))(a6, a3);
  *((_DWORD *)a6 + 3) = a4;
  uint64_t v12 = *((void *)a6 + 1);
  v14[0] = &off_1F0E01538;
  v14[1] = v12;
  (*(void (**)(TVector *, uint64_t))(*(void *)a6 + 24))(a6, a5);
  return (*(uint64_t (**)(TType1RenderingContext *, void *, void *, TVector *))(*(void *)this + 16))(this, v15, v14, a6);
}

uint64_t TType1RenderingContext::xySetX2CurveTo(TType1RenderingContext *this, int a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, TVector *a8)
{
  (*(void (**)(TVector *))(*(void *)a8 + 16))(a8);
  uint64_t v14 = *((void *)a8 + 1);
  v18[0] = &off_1F0E01538;
  v18[1] = v14;
  (*(void (**)(TVector *, uint64_t, uint64_t))(*(void *)a8 + 16))(a8, a4, a5);
  uint64_t v15 = *((void *)a8 + 1);
  v17[0] = &off_1F0E01538;
  v17[1] = v15;
  *((_DWORD *)a8 + 2) = a6;
  (*(void (**)(TVector *, uint64_t))(*(void *)a8 + 32))(a8, a7);
  return (*(uint64_t (**)(TType1RenderingContext *, void *, void *, TVector *))(*(void *)this + 16))(this, v18, v17, a8);
}

void TOpenTypeFont::MakeHandler()
{
}

void sub_1B5365194(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10E1C4016C4A6AELL);
  _Unwind_Resume(a1);
}

void TOpenTypeCIDFont::MakeHandler()
{
}

void sub_1B5365220(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10E1C4016C4A6AELL);
  _Unwind_Resume(a1);
}

void TSFNTOpenTypeCFF2Font::MakeHandler()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1B5365564(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unsigned int v4 = va_arg(va1, void **);
  uint64_t v6 = va_arg(va1, void);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  std::vector<double,TInlineBufferAllocator<double,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)va1);
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,30ul>>::__destroy_vector::operator()[abi:fe180100]((void ***)va1);
  MEMORY[0x1BA9994D0](v2, 0x10F1C405C1B6C48);
  _Unwind_Resume(a1);
}

uint64_t TType1FontType2CFF2CharStringHandler::GetVariationValues(TType1FontType2CFF2CharStringHandler *this, uint64_t a2)
{
  if (a2 == (uint64_t)(*((void *)this + 5) - *((void *)this + 4)) >> 1) {
    return *((void *)this + 4);
  }
  else {
    return 0;
  }
}

uint64_t TType1FontType2CFF2CharStringHandler::CanStreamPostScriptType1(TType1FontType2CFF2CharStringHandler *this)
{
  return 1;
}

void TType2CFFInterpreterContext::TType2CFFInterpreterContext(TType2CFFInterpreterContext *this, const TOpenTypeFont *a2)
{
  TType2InterpreterContext::TType2InterpreterContext(this, a2, 0);
  *(void *)uint64_t v3 = &unk_1F0E01ED8;
  unint64_t v4 = *((unsigned __int16 *)a2 + 72);
  *(_WORD *)(v3 + 160) = v4;
  uint64_t v5 = *((unsigned __int16 *)a2 + 73);
  *(_WORD *)(v3 + 162) = v5;
  if (v4 >= 0x846C) {
    __int16 v6 = 0x8000;
  }
  else {
    __int16 v6 = 1131;
  }
  if (v4 < 0x4D8) {
    __int16 v6 = 107;
  }
  *(_WORD *)(v3 + 3176) = v6;
  uint64_t v7 = *((void *)a2 + 14);
  *(void *)(v3 + 184) = *((void *)a2 + 15);
  *(void *)(v3 + 168) = v7;
  if (v7) {
    *(void *)(v3 + 176) = v7 + v5 + v5 * (unint64_t)v4;
  }
  uint64_t v8 = *((void *)a2 + 16);
  if (v8)
  {
    *(_DWORD *)(v3 + 3100) = *(_DWORD *)(v8 + 120);
    *(_DWORD *)(v3 + 3104) = *(_DWORD *)(v8 + 440);
  }
}

void TType2InterpreterContext::TType2InterpreterContext(TType2InterpreterContext *this, const TOpenTypeFont *a2, int a3)
{
  char v3 = a3;
  *(void *)this = &unk_1F0E01C40;
  uint64_t v5 = (char *)this + 248;
  if (a3) {
    uint64_t v6 = 513;
  }
  else {
    uint64_t v6 = 64;
  }
  uint64_t v7 = TInterpreterContext::TInterpreterContext((uint64_t)this, (uint64_t)a2, (uint64_t)this + 248, v6, (uint64_t)this + 2304, 32);
  *(void *)uint64_t v7 = &unk_1F0E01C40;
  *(unsigned char *)(v7 + 3096) = 0;
  *(_DWORD *)(v7 + 3100) = 0;
  *(void *)(v7 + 3104) = 0;
  *(void *)(v7 + 3112) = &unk_1F0DD4218;
  *(void *)(v7 + 3120) = 0;
  *(void *)(v7 + 3136) = 0;
  *(void *)(v7 + 3128) = 0;
  *(void *)(v7 + 3144) = &unk_1F0DD4218;
  *(void *)(v7 + 3152) = 0;
  *(void *)(v7 + 3168) = 0;
  *(void *)(v7 + 3160) = 0;
  *(_WORD *)(v7 + 3176) = 0;
  unint64_t v8 = *((unsigned __int16 *)a2 + 159);
  *(_WORD *)(v7 + 3178) = v8;
  uint64_t v9 = *((unsigned __int8 *)a2 + 317);
  *(_WORD *)(v7 + 3180) = v9;
  if (v8 >= 0x846C) {
    __int16 v10 = 0x8000;
  }
  else {
    __int16 v10 = 1131;
  }
  if (v8 < 0x4D8) {
    __int16 v10 = 107;
  }
  *(_WORD *)(v7 + 3182) = v10;
  uint64_t v11 = *((void *)a2 + 40);
  *(void *)(v7 + 3200) = *((void *)a2 + 41);
  *(void *)(v7 + 3184) = v11;
  *(void *)(v7 + 3192) = v11 + v9 + v9 * (unint64_t)v8;
  __int16 v12 = *((_WORD *)a2 + 140);
  *(_WORD *)(v7 + 3208) = v12;
  *(_WORD *)(v7 + 3210) = v12;
  long long v13 = *(_OWORD *)((char *)a2 + 232);
  long long v14 = *(_OWORD *)((char *)a2 + 248);
  *(_OWORD *)(v7 + 3248) = *(_OWORD *)((char *)a2 + 264);
  *(_OWORD *)(v7 + 3232) = v14;
  *(_OWORD *)(v7 + 3216) = v13;
  *(unsigned char *)(v7 + 3264) = v3;
  bzero(v5, 0xB20uLL);
}

uint64_t TType1PSFont::GetFont@<X0>(TType1PSFont *this@<X0>, const TFont *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(TType1PSFont *, const TFont *))(*(void *)this + 40))(this, a2);
  switch((int)result)
  {
    case 14:
    case 18:
      operator new();
    case 15:
    case 19:
      operator new();
    case 16:
      operator new();
    case 17:
      operator new();
    case 22:
      operator new();
    case 23:
    case 24:
      operator new();
    case 25:
    case 26:
      operator new();
    case 27:
    case 28:
      operator new();
    case 29:
      operator new();
    default:
      *a3 = 0;
      return result;
  }
}

void sub_1B5365AE4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9994D0](v1, 0x10E1C40C523F46BLL);
  _Unwind_Resume(a1);
}

void *TType1PSFont::GetFontObject(TType1PSFont *this)
{
  uint64_t result = (void *)*((void *)this + 3);
  if (!result)
  {
    uint64_t result = operator new(0x10uLL, MEMORY[0x1E4FBA2D0]);
    if (!result)
    {
      *((void *)this + 3) = 0;
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      exception[4] = 5;
    }
    uint64_t v3 = *((void *)this + 4);
    *uint64_t result = &unk_1F0E02350;
    result[1] = v3;
    *((void *)this + 3) = result;
  }
  return result;
}

uint64_t TType1PSFont::GetGlyphNames(uint64_t this, int a2, const unsigned __int16 *a3, uint64_t a4, char *a5, unsigned int *a6)
{
  if (!a5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    __int16 v15 = 8;
    goto LABEL_12;
  }
  int v7 = a2;
  if (a2)
  {
    unint64_t v8 = a5;
    uint64_t v11 = this;
    unsigned int v12 = 0;
    while (1)
    {
      unsigned int v13 = *a3++;
      this = (*(uint64_t (**)(uint64_t, void, uint64_t, char *))(*(void *)v11 + 184))(v11, v13, a4, v8);
      if (!this)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DFC400;
        __int16 v15 = 22;
        goto LABEL_12;
      }
      v12 += this;
      if (!*v8) {
        break;
      }
      v8 += this;
      a4 = (a4 - this);
      if (!--v7) {
        goto LABEL_9;
      }
    }
    *a6 = v12;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    __int16 v15 = 19;
LABEL_12:
    exception[4] = v15;
  }
  unsigned int v12 = 0;
LABEL_9:
  *a6 = v12;
  return this;
}

uint64_t TType1PSFont::GetGlyphIDs(TType1PSFont *this, int a2, const char *__s, unsigned __int16 *a4)
{
  if (!a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    __int16 v12 = 8;
    goto LABEL_10;
  }
  int v6 = a2;
  do
  {
    size_t v8 = strlen(__s);
    uint64_t result = (*(uint64_t (**)(TType1PSFont *, const char *, size_t))(*(void *)this + 192))(this, __s, v8);
    *a4 = result;
    while (*(unsigned __int8 *)__s++)
      ;
    ++a4;
    --v6;
  }
  while (v6);
  if (result == 0xFFFF)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    __int16 v12 = 22;
LABEL_10:
    exception[4] = v12;
  }
  return result;
}

uint64_t TType1PSFont::GetGlyphName(TType1PSFont *this, uint64_t a2, unsigned int a3, char *a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *a4 = 0;
  unsigned int v8 = (*(uint64_t (**)(void))(**((void **)this + 4) + 168))(*((void *)this + 4));
  if (v8 >= 0xFFFF) {
    unsigned int v9 = 0xFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  if (v9 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 8;
  }
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[14] = v10;
  v15[15] = v10;
  v15[12] = v10;
  v15[13] = v10;
  _OWORD v15[10] = v10;
  v15[11] = v10;
  unsigned __int8 v15[8] = v10;
  v15[9] = v10;
  v15[6] = v10;
  v15[7] = v10;
  _OWORD v15[4] = v10;
  v15[5] = v10;
  void v15[2] = v10;
  void v15[3] = v10;
  v15[0] = v10;
  v15[1] = v10;
  if (a2)
  {
    (*(void (**)(TType1PSFont *, uint64_t, _OWORD *))(*(void *)this + 232))(this, a2, v15);
    uint64_t v11 = (char *)v15 + 1;
    uint64_t v12 = LOBYTE(v15[0]) - 1;
    if (LOBYTE(v15[0]) == 1) {
      return v12;
    }
  }
  else
  {
    uint64_t v12 = 7;
    uint64_t v11 = "/.notdef";
  }
  if (v12 < a3)
  {
    memcpy(a4, v11 + 1, v12);
    a4[v12] = 0;
  }
  return v12;
}

uint64_t TType1PSFont::GetGlyphID(TType1PSFont *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 4) + 168))(*((void *)this + 4));
  if (v6 >= 0xFFFF) {
    int v7 = 0xFFFF;
  }
  else {
    int v7 = v6;
  }
  if (v7)
  {
    for (unsigned __int16 i = 0; i < (unsigned __int16)v7; ++i)
    {
      *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
      v13[14] = v9;
      v13[15] = v9;
      v13[12] = v9;
      v13[13] = v9;
      v13[10] = v9;
      v13[11] = v9;
      v13[8] = v9;
      _OWORD v13[9] = v9;
      v13[6] = v9;
      void v13[7] = v9;
      _OWORD v13[4] = v9;
      v13[5] = v9;
      void v13[2] = v9;
      void v13[3] = v9;
      v13[0] = v9;
      v13[1] = v9;
      if (i)
      {
        (*(void (**)(TType1PSFont *, void, _OWORD *))(*(void *)this + 232))(this, i, v13);
        int v10 = LOBYTE(v13[0]);
        uint64_t v11 = (char *)v13 + 1;
        if (!LOBYTE(v13[0])) {
          continue;
        }
      }
      else
      {
        int v10 = 8;
        uint64_t v11 = "/.notdef";
      }
      if (v10 - 1 == a3 && !memcmp(v11 + 1, a2, a3)) {
        return i;
      }
    }
  }
  return 0;
}

uint64_t TType1PSFont::GetFontDesc(TType1PSFont *this)
{
  return *(void *)(*((void *)this + 4) + 128);
}

uint64_t TType1PSFont::CreateMMWeightVector(TType1PSFont *this, unsigned int a2, const FontVariation *a3)
{
  if (*(unsigned __int16 *)(*((void *)this + 4) + 150) > 1u)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 8;
  }
  return 0;
}

void TFontObjectSurrogate::~TFontObjectSurrogate(TFontObjectSurrogate *this)
{
}

TSFNTFont *TFontObjectSurrogate::GetFormat(TFontObjectSurrogate *this)
{
  uint64_t result = (TSFNTFont *)*((void *)this + 1);
  if (result)
  {
    unsigned int v3 = (*(uint64_t (**)(TSFNTFont *))(*(void *)result + 40))(result) - 22;
    if (v3 >= 8)
    {
      return TFontSurrogate::GetFormat(this);
    }
    else
    {
      return (TSFNTFont *)dword_1B54027C0[v3];
    }
  }
  return result;
}

uint64_t TFontObjectSurrogate::GetTableOffset(TFontObjectSurrogate *this, int a2, unsigned int *a3)
{
  uint64_t v4 = *((void *)this + 1);
  if (!v4) {
    return 0xFFFFFFFFLL;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 40))(v4) - 23 < 7)
  {
    if ((*(unsigned int (**)(TFontObjectSurrogate *))(*(void *)this + 16))(this) == a2)
    {
      if (!a3) {
        return 0;
      }
      uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
      unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
      uint64_t result = 0;
      *a3 = v8;
      return result;
    }
    return 0xFFFFFFFFLL;
  }
  return TFontSurrogate::GetTableOffset(this, a2, a3);
}

uint64_t TFontObjectSurrogate::GetTableIndex(TFontObjectSurrogate *this, int a2, unsigned int *a3)
{
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 40))(result) - 23 >= 7)
    {
      return TFontSurrogate::GetTableIndex(this, a2, a3);
    }
    else if ((*(unsigned int (**)(TFontObjectSurrogate *))(*(void *)this + 16))(this) == a2)
    {
      if (a3)
      {
        uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1));
        *a3 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 24))(v7);
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t TFontObjectSurrogate::GetTablePart@<X0>(TFontObjectSurrogate *this@<X0>, unsigned int *a2@<X4>, unsigned int a3@<W1>, uint64_t a4@<X2>, unsigned int a5@<W3>, void *a6@<X8>)
{
  uint64_t v12 = *((void *)this + 1);
  if (v12
    && (int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 40))(v12), a3 == -1)
    && (v13 - 23) <= 6
    && (uint64_t v14 = (*(uint64_t (**)(void))(**((void **)this + 1) + 56))(*((void *)this + 1)),
        unsigned int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14),
        a5 + a4 <= v15))
  {
    *a2 = v15;
    if (a5) {
      uint64_t v17 = a5;
    }
    else {
      uint64_t v17 = v15 - a4;
    }
    long long v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(**((void **)this + 1) + 48);
    uint64_t v19 = *((void *)this + 1);
    return v18(v19, a4, v17);
  }
  else
  {
    return TFontSurrogate::GetTablePart((uint64_t)this, a2, a3, a4, a5, a6);
  }
}

uint64_t TFontObjectSurrogate::GetFontTableSize(TFontObjectSurrogate *this, uint64_t a2)
{
  unsigned int v6 = 0;
  int v2 = (*(uint64_t (**)(TFontObjectSurrogate *, uint64_t, unsigned int *))(*(void *)this + 24))(this, a2, &v6);
  uint64_t result = v6;
  if (v2 == -1 || v6 == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 4;
  }
  return result;
}

void TFontObjectTable::TFontObjectTable(TFontObjectTable *this, const TFontObjectSurrogate *a2, uint64_t a3)
{
  uint64_t v4 = (TFontObjectTable *)((char *)this + 8);
  *(void *)this = 0;
  *((void *)this + 1) = &unk_1F0DD4218;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 6) = a2;
  int v12 = -1431655766;
  (*(void (**)(uint64_t *__return_ptr, const TFontObjectSurrogate *, uint64_t, void, int *))(*(void *)a2 + 40))(&v9, a2, a3, 0, &v12);
  if (v4 != (TDataReference *)&v9)
  {
    TDataReference::DucRefCount(v4);
    uint64_t v5 = v10;
    uint64_t v10 = 0;
    *((void *)this + 2) = v5;
    *(_OWORD *)((char *)this + 24) = v11;
  }
  TDataReference::~TDataReference((TDataReference *)&v9);
  *(_DWORD *)this = v12;
  uint64_t v6 = *((void *)this + 2);
  if (!v6 || (uint64_t v7 = *(void *)(v6 + 8)) == 0)
  {
    *((void *)this + 5) = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 4;
  }
  *((void *)this + 5) = v7 + *((void *)this + 3);
}

void sub_1B536684C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  TDataReference::~TDataReference(v2);
  _Unwind_Resume(a1);
}

void TFontObjectTable::TFontObjectTable(TFontObjectTable *this, const TFontObjectSurrogate *a2, uint64_t a3, uint64_t a4, int a5)
{
  *((_DWORD *)this + 1) = 0;
  uint64_t v6 = (TFontObjectTable *)((char *)this + 8);
  *((void *)this + 1) = &unk_1F0DD4218;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 6) = a2;
  int v22 = -1431655766;
  if (!a5)
  {
    (*(void (**)(uint64_t *__return_ptr, const TFontObjectSurrogate *, uint64_t, void, int *))(*(void *)a2 + 40))(&v19, a2, a3, 0, &v22);
    if (v6 != (TDataReference *)&v19)
    {
      TDataReference::DucRefCount(v6);
      uint64_t v15 = v20;
      uint64_t v20 = 0;
      *((void *)this + 2) = v15;
      *(_OWORD *)((char *)this + 24) = v21;
    }
    TDataReference::~TDataReference((TDataReference *)&v19);
    int v7 = v22;
    *(_DWORD *)this = v22;
    uint64_t v16 = *((void *)this + 2);
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 8);
      if (v17)
      {
        *((void *)this + 5) = v17 + *((void *)this + 3);
        goto LABEL_15;
      }
    }
LABEL_16:
    *((void *)this + 5) = 0;
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 4;
  }
  int v7 = a5;
  unsigned int v8 = a4;
  (*(void (**)(uint64_t *__return_ptr, const TFontObjectSurrogate *, uint64_t, uint64_t, int *))(*(void *)a2 + 40))(&v19, a2, a3, a4, &v22);
  if (v6 != (TDataReference *)&v19)
  {
    TDataReference::DucRefCount(v6);
    uint64_t v9 = v20;
    uint64_t v20 = 0;
    *((void *)this + 2) = v9;
    *(_OWORD *)((char *)this + 24) = v21;
  }
  TDataReference::~TDataReference((TDataReference *)&v19);
  unsigned int v10 = v22;
  *(_DWORD *)this = v22;
  uint64_t v11 = *((void *)this + 2);
  if (!v11) {
    goto LABEL_16;
  }
  uint64_t v12 = *(void *)(v11 + 8);
  if (!v12) {
    goto LABEL_16;
  }
  *((void *)this + 5) = v12 + *((void *)this + 3);
  unsigned int v13 = v7 + v8;
  if (__CFADD__(v7, v8) || v13 < v8 || v13 > v10)
  {
    uint64_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v14 = &unk_1F0DFC400;
    v14[4] = 5;
  }
LABEL_15:
  *((_DWORD *)this + 1) = v7;
}

void sub_1B5366AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  TDataReference::~TDataReference(v2);
  _Unwind_Resume(a1);
}

void TFontObjectTable::TFontObjectTable(TFontObjectTable *this, const TFontObjectSurrogate *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6)
{
  unsigned int v6 = a5;
  *((_DWORD *)this + 1) = 0;
  uint64_t v9 = (TFontObjectTable *)((char *)this + 8);
  *((void *)this + 1) = &unk_1F0DD4218;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 6) = a2;
  int v26 = -1431655766;
  if (!a6)
  {
    (*(void (**)(long long *__return_ptr, const TFontObjectSurrogate *, uint64_t, void, int *))(*(void *)a2 + 40))(&v24, a2, a3, 0, &v26);
    if (v9 != (TDataReference *)&v24)
    {
      TDataReference::DucRefCount(v9);
      uint64_t v18 = *((void *)&v24 + 1);
      *((void *)&v24 + 1) = 0;
      *((void *)this + 2) = v18;
      *(_OWORD *)((char *)this + 24) = v25;
    }
    TDataReference::~TDataReference((TDataReference *)&v24);
    unsigned int v12 = v26;
    *(_DWORD *)this = v26;
    uint64_t v19 = *((void *)this + 2);
    if (v19)
    {
      uint64_t v20 = *(void *)(v19 + 8);
      if (v20)
      {
        uint64_t v15 = (unsigned int *)(v20 + *((void *)this + 3));
        *((void *)this + 5) = v15;
        unsigned int v10 = v12;
        goto LABEL_15;
      }
    }
LABEL_24:
    *((void *)this + 5) = 0;
    goto LABEL_25;
  }
  unsigned int v10 = a6;
  (*(void (**)(long long *__return_ptr, const TFontObjectSurrogate *, uint64_t, uint64_t, int *))(*(void *)a2 + 40))(&v24, a2, a3, a5, &v26);
  if (v9 != (TDataReference *)&v24)
  {
    TDataReference::DucRefCount(v9);
    uint64_t v11 = *((void *)&v24 + 1);
    *((void *)&v24 + 1) = 0;
    *((void *)this + 2) = v11;
    *(_OWORD *)((char *)this + 24) = v25;
  }
  TDataReference::~TDataReference((TDataReference *)&v24);
  unsigned int v12 = v26;
  *(_DWORD *)this = v26;
  uint64_t v13 = *((void *)this + 2);
  if (!v13) {
    goto LABEL_24;
  }
  uint64_t v14 = *(void *)(v13 + 8);
  if (!v14) {
    goto LABEL_24;
  }
  uint64_t v15 = (unsigned int *)(v14 + *((void *)this + 3));
  *((void *)this + 5) = v15;
  unsigned int v16 = v10 + v6;
  if (__CFADD__(v10, v6) || v16 < v6 || v16 > v12)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
LABEL_15:
  *((_DWORD *)this + 1) = v10;
  if (v6 || v10 < 4)
  {
    if (v12 < 5)
    {
      unsigned int v21 = 0;
    }
    else
    {
      *(void *)&long long v22 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v22 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v24 = v22;
      long long v25 = v22;
      (*(void (**)(long long *__return_ptr))(**((void **)this + 6) + 40))(&v24);
      unsigned int v21 = bswap32(*(_DWORD *)(*(void *)(*((void *)&v24 + 1) + 8) + v25));
      TDataReference::~TDataReference((TDataReference *)&v24);
    }
  }
  else
  {
    unsigned int v21 = bswap32(*v15);
  }
  if ((v21 ^ a4) >> 16 || (unsigned __int16)v21 < (unsigned __int16)a4)
  {
LABEL_25:
    long long v23 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v23 = &unk_1F0DFC400;
    _OWORD v23[4] = 4;
  }
}

void sub_1B5366DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  TDataReference::~TDataReference(v9);
  _Unwind_Resume(a1);
}

uint64_t TType1PSFont::GetFullName(TType1PSFont *this)
{
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = *(int *)(v1 + 56);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(v1 + 48) + v2;
  }
}

uint64_t TType1PSFont::GetFamilyName(TType1PSFont *this)
{
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = *(int *)(v1 + 60);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(v1 + 48) + v2;
  }
}

uint64_t TType1PSFont::GetVersion(TType1PSFont *this)
{
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = *(int *)(v1 + 64);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(v1 + 48) + v2;
  }
}

uint64_t TType1PSFont::GetWeight(TType1PSFont *this)
{
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = *(int *)(v1 + 68);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(v1 + 48) + v2;
  }
}

uint64_t TType1PSFont::GetNotice(TType1PSFont *this)
{
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = *(int *)(v1 + 72);
  if (v2 == -1) {
    return 0;
  }
  else {
    return *(void *)(v1 + 48) + v2;
  }
}

uint64_t TType1PSFont::GetFontName(TType1PSFont *this)
{
  uint64_t v1 = *((void *)this + 4);
  uint64_t v2 = *(int *)(v1 + 76);
  if (v2 == -1 || (uint64_t v3 = *(void *)(v1 + 48)) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  return v3 + v2;
}

uint64_t TType1PSFont::GetOverrideMetrics()
{
  return 0;
}

const __CFAllocator *TFPFontImpl::Retain(TFPFontImpl *this, const __CFAllocator *a2, const void *a3)
{
  return a2;
}

void TFPFontImpl::Release(TFPFontImpl *this, const __CFAllocator *a2, const void *a3)
{
  if (a2 && !(*(unsigned int (**)(const __CFAllocator *))(*(void *)a2 + 32))(a2))
  {
    uint64_t v4 = *(void (**)(const __CFAllocator *))(*(void *)a2 + 8);
    v4(a2);
  }
}

uint64_t FPFontCreateVariationFromPostScriptNameSuffix(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2) {
      return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    }
  }
  return result;
}

void sub_1B5367088(void *a1)
{
}

uint64_t FPFontIsSFNT(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 56))(result);
  }
  return result;
}

void sub_1B53670D8(void *a1)
{
}

uint64_t FPFontCopySFNTData(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 64))(result);
  }
  return result;
}

void sub_1B5367128(void *a1)
{
}

uint64_t FPFontCopyMetadata(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 88))(result);
  }
  return result;
}

void sub_1B5367178(void *a1)
{
}

uint64_t FPFontIsSuitcase(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 360))(result);
  }
  return result;
}

void sub_1B53671D0(void *a1)
{
}

uint64_t FPFontCopyNameTablePostScriptName(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 112))(result);
  }
  return result;
}

void sub_1B5367220(void *a1)
{
}

uint64_t FPFontCopyVariationPostScriptNamePrefix(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 120))(result);
  }
  return result;
}

void sub_1B5367270(void *a1)
{
}

uint64_t FPFontCopyAdditionalPostScriptNames(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 128))(result);
  }
  return result;
}

void sub_1B53672C0(void *a1)
{
}

uint64_t FPFontCopyAllNames(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 136))(result);
  }
  return result;
}

void sub_1B5367310(void *a1)
{
}

uint64_t FPFontCopyFullName(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 144))(result);
  }
  return result;
}

void sub_1B5367360(void *a1)
{
}

uint64_t FPFontCopyFamilyName(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result);
  }
  return result;
}

void sub_1B53673B0(void *a1)
{
}

uint64_t FPFontGetDefaultInstance(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 168))(result);
  }
  return result;
}

void sub_1B5367400(void *a1)
{
}

uint64_t FPFontIsNamedInstance(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 176))(result);
  }
  return result;
}

void sub_1B5367450(void *a1)
{
}

uint64_t FPFontGetInstanceNameID(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 184))(result);
  }
  return result;
}

void sub_1B53674A0(void *a1)
{
}

uint64_t FPFontHasNamedInstanceWithOpticalSize(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 192))(result);
  }
  return result;
}

void sub_1B53674F0(void *a1)
{
}

uint64_t FPFontGetVariationAxisFlags(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 216))(result);
  }
  return result;
}

void sub_1B5367540(void *a1)
{
}

uint64_t FPFontGetVariationAxisNameID(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 224))(result);
  }
  return result;
}

void sub_1B5367590(void *a1)
{
}

uint64_t FPFontGetFontInfo(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0;
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 256))(a1);
      *(_OWORD *)a2 = *(_OWORD *)v5;
      long long v6 = *(_OWORD *)(v5 + 16);
      long long v7 = *(_OWORD *)(v5 + 32);
      long long v8 = *(_OWORD *)(v5 + 64);
      *(_OWORD *)(a2 + 48) = *(_OWORD *)(v5 + 48);
      *(_OWORD *)(a2 + 64) = v8;
      *(_OWORD *)(a2 + 16) = v6;
      *(_OWORD *)(a2 + 32) = v7;
      long long v9 = *(_OWORD *)(v5 + 80);
      long long v10 = *(_OWORD *)(v5 + 96);
      long long v11 = *(_OWORD *)(v5 + 112);
      *(void *)(a2 + 128) = *(void *)(v5 + 128);
      *(_OWORD *)(a2 + 96) = v10;
      *(_OWORD *)(a2 + 112) = v11;
      *(_OWORD *)(a2 + 80) = v9;
      return 1;
    }
  }
  return result;
}

void sub_1B5367638(void *a1)
{
}

uint64_t FPFontGetNumberOfLongGlyphs(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 264))(result);
  }
  return result;
}

void sub_1B5367690(void *a1)
{
}

uint64_t FPFontShouldAutoHint()
{
  return 1;
}

double FPFontGetStems(uint64_t a1, double *a2, double *a3)
{
  double v6 = 0.0;
  double v7 = 0.0;
  if (a1) {
    (*(void (**)(uint64_t, double *, double *))(*(void *)a1 + 336))(a1, &v6, &v7);
  }
  if (a2)
  {
    double result = v6;
    *a2 = v6;
  }
  if (a3)
  {
    double result = v7;
    *a3 = v7;
  }
  return result;
}

void sub_1B5367728(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1) {
    JUMPOUT(0x1B536770CLL);
  }
  JUMPOUT(0x1B5367704);
}

uint64_t FPFontGetTypoMetrics(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 280))(result);
  }
  return result;
}

void sub_1B5367780(void *a1)
{
}

uint64_t FPFontGetWinMetrics(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 288))(result);
  }
  return result;
}

void sub_1B53677D8(void *a1)
{
}

uint64_t FPFontGetSubscriptX(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 296))(result);
  }
  return result;
}

void sub_1B5367830(void *a1)
{
}

uint64_t FPFontGetSubscriptY(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 304))(result);
  }
  return result;
}

void sub_1B5367888(void *a1)
{
}

uint64_t FPFontGetSuperscriptX(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 312))(result);
  }
  return result;
}

void sub_1B53678E0(void *a1)
{
}

uint64_t FPFontGetSuperscriptY(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 320))(result);
  }
  return result;
}

void sub_1B5367938(void *a1)
{
}

uint64_t FPFontGetStrikeout(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 328))(result);
  }
  return result;
}

void sub_1B5367990(void *a1)
{
}

uint64_t FPFontCopyURLPerRegistryOrdering(const char *a1, TFPFontImpl *a2)
{
  if (!a1) {
    return 0;
  }
  if (strcmp(a1, "Adobe")) {
    return 0;
  }
  FontNamePerint Script = TFPFontImpl::FindFontNamePerScript(a2, v3);
  if (!FontNamePerScript) {
    return 0;
  }
  uint64_t v6 = FontNamePerScript;
  if (!FontServicesLibraryCore(0) || !getXTCopyFontWithNameSymbolLoc()) {
    return 0;
  }
  XTCopyFontWithNameSymbolLoCGFloat c = (uint64_t (*)(uint64_t, void, void))getXTCopyFontWithNameSymbolLoc();
  if (XTCopyFontWithNameSymbolLoc)
  {
    return XTCopyFontWithNameSymbolLoc(v6, 0, 0);
  }
  else
  {
    dlerror();
    uint64_t v8 = abort_report_np();
    return FPFontCopyCharacterSet(v8);
  }
}

uint64_t FPFontCopyCharacterSet(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 376))(result);
  }
  return result;
}

void sub_1B5367A98(void *a1)
{
}

uint64_t FPFontGetOS2UnicodeRanges(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 384))(result);
  }
  return result;
}

void sub_1B5367AEC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t FPFontGetProtectionInfo(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 392))(result);
  }
  return result;
}

void sub_1B5367B50(void *a1)
{
}

uint64_t FPFontGetType1Encoding(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 400))(result);
  }
  return result;
}

void sub_1B5367BA8(void *a1)
{
}

uint64_t FPFontGetTrueTypeEncoding(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 408))(result);
  }
  return result;
}

void sub_1B5367C00(void *a1)
{
}

uint64_t FPFontGetGlyphsForText(uint64_t result, uint64_t a2)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 424))(result, a2 & 0xFFFFFFFFFFFFLL);
  }
  return result;
}

void sub_1B5367C5C(void *a1)
{
}

uint64_t FPFontGetGlyphsForCharacters(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 432))(result);
  }
  return result;
}

void sub_1B5367CB4(void *a1)
{
}

uint64_t FPFontGetLongGlyphsForCharacters(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 440))(result);
  }
  return result;
}

void sub_1B5367D0C(void *a1)
{
}

uint64_t FPFontGetGlyphsForCharacterRange(uint64_t a1, uint64_t a2, CFRange a3)
{
  CFIndex length = a3.length;
  CFIndex location = a3.location;
  BOOL valid = IsValidCharacterRange(a3);
  uint64_t result = 0;
  if (a1)
  {
    if (valid) {
      return (*(uint64_t (**)(uint64_t, uint64_t, CFIndex, CFIndex))(*(void *)a1 + 448))(a1, a2, location, length);
    }
  }
  return result;
}

void sub_1B5367DA8(void *a1)
{
}

BOOL IsValidCharacterRange(CFRange a1)
{
  uint64_t v1 = 0;
  if ((a1.length & 0x8000000000000000) == 0)
  {
    CFIndex v2 = a1.location + a1.length;
    CFIndex v3 = 1114112;
    if (a1.location + a1.length < 1114112) {
      CFIndex v3 = a1.location + a1.length;
    }
    unint64_t v4 = (unint64_t)a1.location >> 16;
    if (v2 > 0 && a1.location < 1) {
      CFIndex v6 = v3;
    }
    else {
      CFIndex v6 = 0;
    }
    CFIndex v7 = v3 - a1.location;
    BOOL v8 = v4 > 0x10;
    if (v4 <= 0x10) {
      CFIndex location = a1.location;
    }
    else {
      CFIndex location = 0;
    }
    if (v8) {
      CFIndex v7 = v6;
    }
    if (location == a1.location && v7 == a1.length)
    {
      CFIndex v10 = 57344;
      if (v2 < 57344) {
        CFIndex v10 = a1.location + a1.length;
      }
      BOOL v11 = v2 > 55296 && a1.location < 55297;
      uint64_t v12 = v10 - 55296;
      if (!v11) {
        uint64_t v12 = 0;
      }
      uint64_t v13 = v10 - a1.location;
      if ((unint64_t)a1.location >> 11 != 27) {
        uint64_t v13 = v12;
      }
      return v13 < 1;
    }
  }
  return v1;
}

uint64_t FPFontGetLongGlyphsForCharacterRange(uint64_t a1, uint64_t a2, CFRange a3)
{
  CFIndex length = a3.length;
  CFIndex location = a3.location;
  BOOL valid = IsValidCharacterRange(a3);
  uint64_t result = 0;
  if (a1)
  {
    if (valid) {
      return (*(uint64_t (**)(uint64_t, uint64_t, CFIndex, CFIndex))(*(void *)a1 + 456))(a1, a2, location, length);
    }
  }
  return result;
}

void sub_1B5367ED4(void *a1)
{
}

uint64_t FPFontGetGlyphsXo(uint64_t result, _WORD *a2, _WORD *a3)
{
  int v5 = 0;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, char *, int *))(*(void *)result + 520))(result, (char *)&v5 + 2, &v5);
  }
  if (a2) {
    *a2 = HIWORD(v5);
  }
  if (a3) {
    *a3 = v5;
  }
  return result;
}

void sub_1B5367F64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  if (!v1) {
    JUMPOUT(0x1B5367F48);
  }
  JUMPOUT(0x1B5367F40);
}

uint64_t FPFontGetGlyphsForCIDs(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 464))(result);
  }
  return result;
}

void sub_1B5367FBC(void *a1)
{
}

uint64_t FPFontGetGlyphForGlyphName(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 544))(result);
  }
  return result;
}

void sub_1B5368014(void *a1)
{
}

uint64_t FPFontGetGlyphNameMaxLength()
{
  return 257;
}

uint64_t FPFontCopyGlyphNameForGlyph(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 536))(result);
  }
  return result;
}

void sub_1B5368074(void *a1)
{
}

double FPFontGetGlyphIdealAdvanceAndSideBearing(uint64_t a1)
{
  double v1 = 0.0;
  if (a1) {
    return (*(double (**)(uint64_t))(*(void *)a1 + 560))(a1);
  }
  return v1;
}

void sub_1B53680DC(void *a1)
{
}

double FPFontGetGlyphIdealVerticalBounds(uint64_t a1)
{
  if (!a1) {
    return *MEMORY[0x1E4F1DB28];
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 576))(a1);
  return result;
}

double FPFontGetGlyphDeviceVerticalAdvance(uint64_t a1)
{
  if (!a1) {
    return *MEMORY[0x1E4F1DB30];
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 592))(a1);
  return result;
}

double FPFontGetGlyphDeviceBounds(uint64_t a1)
{
  if (!a1) {
    return *MEMORY[0x1E4F1DB28];
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 600))(a1);
  return result;
}

double FPFontGetGlyphDeviceVerticalBounds(uint64_t a1)
{
  if (!a1) {
    return *MEMORY[0x1E4F1DB28];
  }
  (*(void (**)(uint64_t))(*(void *)a1 + 608))(a1);
  return result;
}

uint64_t FPFontCopyOriginalGlyphPath(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 640))(result);
  }
  return result;
}

void sub_1B53682AC(void *a1)
{
}

uint64_t FPFontCopyHintedGlyphPath(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 648))(result);
  }
  return result;
}

void sub_1B5368304(void *a1)
{
}

uint64_t FPFontCanCreatePostScriptSubset(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 496))(result);
  }
  return result;
}

void sub_1B536835C(void *a1)
{
}

uint64_t FPFontCreatePostScriptSubset(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 504))(result);
  }
  return result;
}

void sub_1B53683B4(void *a1)
{
}

uint64_t FPFontCreatePostScriptEncoding(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 512))(result);
  }
  return result;
}

void sub_1B536840C(void *a1)
{
}

void FPFontPurgeCaches(TFPFontImpl *a1, const char *a2)
{
}

void sub_1B5368434(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t FPFontPurgeFromCaches(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 656))(result);
  }
  return result;
}

void sub_1B5368494(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t FPFontCopySplicedStash(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 672))(result);
  }
  return result;
}

void sub_1B53684F8(void *a1)
{
}

uint64_t FPFontGetFormat(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 664))(result);
  }
  return result;
}

void sub_1B5368550(void *a1)
{
}

double FPFontGetVariationScalar(uint64_t a1)
{
  double v1 = 0.0;
  if (a1) {
    return (*(double (**)(uint64_t))(*(void *)a1 + 680))(a1);
  }
  return v1;
}

void sub_1B53685B8(void *a1)
{
}

uint64_t FPFontGetVariationScalars(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 688))(result);
  }
  return result;
}

void sub_1B536860C(void *a1)
{
}

uint64_t FPFontGetVariationValues(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = 0;
  if (!a2)
  {
    a2 = &v2;
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)result + 232))(result, a2);
  }
  *a2 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)result + 232))(result, a2);
  }
  return result;
}

void sub_1B5368678(void *a1)
{
}

uint64_t FPFontEnumerateNamedInstances(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 240))(result);
  }
  return result;
}

void sub_1B53686C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t FPFontGetTupleCount(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 696))(result);
  }
  return result;
}

void sub_1B5368728(void *a1)
{
}

uint64_t FPFontGetControlPoints(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 704))(result);
  }
  return result;
}

void sub_1B5368780(void *a1)
{
}

uint64_t getXTCopyFontWithNameSymbolLoc(void)
{
  uint64_t v3 = 0;
  unint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v0 = getXTCopyFontWithNameSymbolLoc(void)::ptr;
  uint64_t v6 = getXTCopyFontWithNameSymbolLoc(void)::ptr;
  if (!getXTCopyFontWithNameSymbolLoc(void)::ptr)
  {
    v2[0] = MEMORY[0x1E4F143A8];
    v2[1] = 0x40000000;
    v2[2] = ___ZL30getXTCopyFontWithNameSymbolLocv_block_invoke;
    v2[3] = &unk_1E60F4D70;
    v2[4] = &v3;
    ___ZL30getXTCopyFontWithNameSymbolLocv_block_invoke((uint64_t)v2);
    uint64_t v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_1B5368918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL23FontServicesLibraryCorePPc_block_invoke_0()
{
  uint64_t result = _sl_dlopen();
  FontServicesLibraryCore(char **)::frameworkLibrarCGFloat y = result;
  return result;
}

void *___ZL30getXTCopyFontWithNameSymbolLocv_block_invoke(uint64_t a1)
{
  uint64_t v5 = 0;
  uint64_t v2 = (void *)FontServicesLibraryCore(&v5);
  uint64_t v3 = v5;
  if (!v2)
  {
    uint64_t v3 = (void *)abort_report_np();
    goto LABEL_5;
  }
  if (v5) {
LABEL_5:
  }
    free(v3);
  uint64_t result = dlsym(v2, "XTCopyFontWithName");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  getXTCopyFontWithNameSymbolLoc(void)::ptr = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void TElement::Parse(TElement *this, _xmlNode *a2)
{
  (*(void (**)(TElement *))(*(void *)this + 16))(this);
  if (*((unsigned char *)this + 8))
  {
    children = a2->children;
    if (children)
    {
      CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      do
      {
        if (!*((unsigned char *)this + 8)) {
          break;
        }
        if (children->type == XML_ELEMENT_NODE)
        {
          CFStringRef v6 = CFStringCreateWithCString(v5, (const char *)children->name, 0x8000100u);
          if (v6)
          {
            CFStringRef v7 = v6;
            (*(void (**)(TElement *, _xmlNode *, CFStringRef))(*(void *)this + 32))(this, children, v6);
            CFRelease(v7);
          }
          else
          {
            *((unsigned char *)this + 8) = 0;
          }
        }
        children = children->next;
      }
      while (children);
    }
  }
}

void TElement::ParseAllAttributes(TElement *this, _xmlNode *a2)
{
  if (a2)
  {
    if (*((unsigned char *)this + 8))
    {
      properties = a2->properties;
      if (properties)
      {
        CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFStringRef v6 = (void (**)(xmlChar *))MEMORY[0x1E4FBA9D0];
        do
        {
          CFStringRef v7 = CFStringCreateWithCString(v5, (const char *)properties->name, 0x8000100u);
          if (v7)
          {
            CFStringRef v8 = v7;
            Prop = xmlGetProp(a2, properties->name);
            if (Prop)
            {
              CFIndex v10 = Prop;
              CFStringRef v11 = CFStringCreateWithCString(v5, (const char *)Prop, 0x8000100u);
              (*(void (**)(TElement *, CFStringRef, CFStringRef))(*(void *)this + 24))(this, v8, v11);
              CFRelease(v11);
              (*v6)(v10);
            }
            CFRelease(v8);
          }
          properties = properties->next;
        }
        while (properties);
      }
    }
  }
}

uint64_t TElement::ParseSubElement(uint64_t this, _xmlNode *a2, const __CFString *a3)
{
  *(unsigned char *)(this + 8) = 0;
  return this;
}

void TPosingFont::TPosingFont(TPosingFont *this)
{
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F0E02408;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((void *)this + 2) = Mutable;
  *((void *)this + 3) = 0;
  if (!Mutable) {
    *((unsigned char *)this + 8) = 0;
  }
}

void TPosingFont::~TPosingFont(TPosingFont *this)
{
  *(void *)this = &unk_1F0E02408;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TPosingFont::~TPosingFont(this);
  JUMPOUT(0x1BA9994D0);
}

CFDictionaryRef TPosingFont::Build(CFDictionaryRef *this, _xmlNode *a2)
{
  TElement::Parse((TElement *)this, a2);
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  if (!CFDictionaryContainsKey(this[2], @"Components")) {
    *((unsigned char *)this + 8) = 0;
  }
  if (CFDictionaryContainsKey(this[2], @"name") && CFDictionaryContainsKey(this[2], @"version"))
  {
    if (*((unsigned char *)this + 8)) {
      return this[2];
    }
    return 0;
  }
  CFDictionaryRef result = 0;
  *((unsigned char *)this + 8) = 0;
  return result;
}

void TPosingFont::ParseAttribute(TPosingFont *this, __CFString *cf1, const __CFString *value)
{
  if (!*((unsigned char *)this + 8)) {
    return;
  }
  if (cf1 == @"name") {
    goto LABEL_5;
  }
  if (!cf1)
  {
LABEL_12:
    *((unsigned char *)this + 8) = 0;
    return;
  }
  if (!CFEqual(cf1, @"name"))
  {
    if (cf1 == @"version" || CFEqual(cf1, @"version"))
    {
      CFStringRef v6 = (__CFDictionary *)*((void *)this + 2);
      CFStringRef v7 = @"version";
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_5:
  CFStringRef v6 = (__CFDictionary *)*((void *)this + 2);
  CFStringRef v7 = @"name";
LABEL_6:
  CFDictionarySetValue(v6, v7, value);
}

void TPosingFont::ParseSubElement(TPosingFont *this, _xmlNode *a2, __CFString *cf1)
{
  if (*((unsigned char *)this + 8))
  {
    if (cf1 == @"Name") {
      goto LABEL_5;
    }
    if (!cf1)
    {
LABEL_11:
      *((unsigned char *)this + 8) = 0;
      return;
    }
    if (CFEqual(cf1, @"Name"))
    {
LABEL_5:
      CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (!*((void *)this + 3))
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        *((void *)this + 3) = Mutable;
        if (Mutable)
        {
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), @"FontNames", Mutable);
          CFRelease(*((CFTypeRef *)this + 3));
        }
        else
        {
          *((unsigned char *)this + 8) = 0;
        }
      }
      v11[1] = (CFTypeRef)0xAAAAAAAAAAAAAA01;
      v11[0] = &unk_1F0E02440;
      unsigned __int8 v11[2] = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v11[2]) {
        LOBYTE(v11[1]) = 0;
      }
      TElement::Parse((TElement *)v11, a2);
      if (LOBYTE(v11[1]))
      {
        if (CFDictionaryContainsKey((CFDictionaryRef)v11[2], @"type")
          && CFDictionaryContainsKey((CFDictionaryRef)v11[2], @"string"))
        {
          if (LOBYTE(v11[1]))
          {
            CFTypeRef v8 = v11[2];
            *((unsigned char *)this + 8) = v11[2] != 0;
            if (v8) {
              CFArrayAppendValue(*((CFMutableArrayRef *)this + 3), v8);
            }
            goto LABEL_23;
          }
        }
        else
        {
          LOBYTE(v11[1]) = 0;
        }
      }
      *((unsigned char *)this + 8) = 0;
LABEL_23:
      TName::~TName((TName *)v11);
      return;
    }
    if (cf1 == @"FontMetrics" || CFEqual(cf1, @"FontMetrics"))
    {
      if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"FontMetrics")) {
        goto LABEL_11;
      }
      v11[1] = (CFTypeRef)0xAAAAAAAAAAAAAA01;
      unsigned __int8 v11[2] = (CFTypeRef)0xAAAAAAAAAAAAAAAALL;
      v11[0] = &unk_1F0E02478;
      unsigned __int8 v11[2] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v11[2]) {
        LOBYTE(v11[1]) = 0;
      }
      TElement::Parse((TElement *)v11, a2);
      if (!LOBYTE(v11[1])) {
        goto LABEL_39;
      }
      if (!CFDictionaryGetCount((CFDictionaryRef)v11[2]))
      {
        CFRelease(v11[2]);
        unsigned __int8 v11[2] = 0;
      }
      if (LOBYTE(v11[1]))
      {
        CFTypeRef v9 = v11[2];
        *((unsigned char *)this + 8) = v11[2] != 0;
        if (v9) {
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), @"FontMetrics", v9);
        }
      }
      else
      {
LABEL_39:
        *((unsigned char *)this + 8) = 0;
      }
      TFontMetrics::~TFontMetrics((TFontMetrics *)v11);
    }
    else
    {
      if (cf1 != @"Components" && !CFEqual(cf1, @"Components")
        || CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"Components"))
      {
        goto LABEL_11;
      }
      memset(v11, 170, sizeof(v11));
      TComponents::TComponents((TComponents *)v11);
      CFTypeRef v10 = TComponents::Build(v11, a2);
      *((unsigned char *)this + 8) = v10 != 0;
      if (v10) {
        CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), @"Components", v10);
      }
      TComponents::~TComponents((TComponents *)v11);
    }
  }
}

void sub_1B5369198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TComponents::~TComponents((TComponents *)va);
  _Unwind_Resume(a1);
}

CFTypeRef TComponents::Build(CFTypeRef *this, _xmlNode *a2)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  if (!CFArrayGetCount((CFArrayRef)this[2]))
  {
    CFRelease(this[2]);
    this[2] = 0;
  }
  if (*((unsigned char *)this + 8)) {
    return this[2];
  }
  else {
    return 0;
  }
}

void TName::~TName(TName *this)
{
  *(void *)this = &unk_1F0E02440;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TName::~TName(this);
  JUMPOUT(0x1BA9994D0);
}

void TName::ParseAttribute(TName *this, __CFString *cf1, const __CFString *value)
{
  if (cf1 == @"type") {
    goto LABEL_4;
  }
  if (!cf1)
  {
LABEL_14:
    *((unsigned char *)this + 8) = 0;
    return;
  }
  if (!CFEqual(cf1, @"type"))
  {
    if (cf1 == @"string" || CFEqual(cf1, @"string"))
    {
      CFAllocatorRef v6 = (__CFDictionary *)*((void *)this + 2);
      CFStringRef v7 = @"string";
      goto LABEL_5;
    }
    if (cf1 == @"language" || CFEqual(cf1, @"language"))
    {
      CFAllocatorRef v6 = (__CFDictionary *)*((void *)this + 2);
      CFStringRef v7 = @"language";
      goto LABEL_5;
    }
    goto LABEL_14;
  }
LABEL_4:
  CFAllocatorRef v6 = (__CFDictionary *)*((void *)this + 2);
  CFStringRef v7 = @"type";
LABEL_5:
  CFDictionarySetValue(v6, v7, value);
}

void TFontMetrics::~TFontMetrics(TFontMetrics *this)
{
  *(void *)this = &unk_1F0E02478;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TFontMetrics::~TFontMetrics(this);
  JUMPOUT(0x1BA9994D0);
}

void TFontMetrics::ParseAttribute(TFontMetrics *this, __CFString *cf1, const __CFString *value)
{
  if (cf1 == @"unitsPerEm") {
    goto LABEL_72;
  }
  if (!cf1) {
    goto LABEL_75;
  }
  int v6 = CFEqual(cf1, @"unitsPerEm");
  if (cf1 == @"xMin") {
    goto LABEL_72;
  }
  if (v6) {
    goto LABEL_72;
  }
  int v7 = CFEqual(cf1, @"xMin");
  if (cf1 == @"yMin") {
    goto LABEL_72;
  }
  if (v7) {
    goto LABEL_72;
  }
  int v8 = CFEqual(cf1, @"yMin");
  if (cf1 == @"xMax") {
    goto LABEL_72;
  }
  if (v8) {
    goto LABEL_72;
  }
  int v9 = CFEqual(cf1, @"xMax");
  if (cf1 == @"yMax") {
    goto LABEL_72;
  }
  if (v9) {
    goto LABEL_72;
  }
  int v10 = CFEqual(cf1, @"yMax");
  if (cf1 == @"macStyle") {
    goto LABEL_72;
  }
  if (v10) {
    goto LABEL_72;
  }
  int v11 = CFEqual(cf1, @"macStyle");
  if (cf1 == @"lowestRecPPEM") {
    goto LABEL_72;
  }
  if (v11) {
    goto LABEL_72;
  }
  int v12 = CFEqual(cf1, @"lowestRecPPEM");
  if (cf1 == @"ascender") {
    goto LABEL_72;
  }
  if (v12) {
    goto LABEL_72;
  }
  int v13 = CFEqual(cf1, @"ascender");
  if (cf1 == @"descender") {
    goto LABEL_72;
  }
  if (v13) {
    goto LABEL_72;
  }
  int v14 = CFEqual(cf1, @"descender");
  if (cf1 == @"lineGap") {
    goto LABEL_72;
  }
  if (v14) {
    goto LABEL_72;
  }
  int v15 = CFEqual(cf1, @"lineGap");
  if (cf1 == @"vertTypoAscender") {
    goto LABEL_72;
  }
  if (v15) {
    goto LABEL_72;
  }
  int v16 = CFEqual(cf1, @"vertTypoAscender");
  if (cf1 == @"vertTypoDescender") {
    goto LABEL_72;
  }
  if (v16) {
    goto LABEL_72;
  }
  int v17 = CFEqual(cf1, @"vertTypoDescender");
  if (cf1 == @"vertTypoLineGap") {
    goto LABEL_72;
  }
  if (v17) {
    goto LABEL_72;
  }
  int v18 = CFEqual(cf1, @"vertTypoLineGap");
  if (cf1 == @"advanceWidthMax") {
    goto LABEL_72;
  }
  if (v18) {
    goto LABEL_72;
  }
  int v19 = CFEqual(cf1, @"advanceWidthMax");
  if (cf1 == @"advanceHeightMax") {
    goto LABEL_72;
  }
  if (v19) {
    goto LABEL_72;
  }
  int v20 = CFEqual(cf1, @"advanceHeightMax");
  if (cf1 == @"minLeftSideBearing") {
    goto LABEL_72;
  }
  if (v20) {
    goto LABEL_72;
  }
  int v21 = CFEqual(cf1, @"minLeftSideBearing");
  if (cf1 == @"minRightSideBearing") {
    goto LABEL_72;
  }
  if (v21) {
    goto LABEL_72;
  }
  int v22 = CFEqual(cf1, @"minRightSideBearing");
  if (cf1 == @"minTopSideBearing") {
    goto LABEL_72;
  }
  if (v22) {
    goto LABEL_72;
  }
  int v23 = CFEqual(cf1, @"minTopSideBearing");
  if (cf1 == @"minBottomSideBearing") {
    goto LABEL_72;
  }
  if (v23) {
    goto LABEL_72;
  }
  int v24 = CFEqual(cf1, @"minBottomSideBearing");
  if (cf1 == @"xMaxExtent") {
    goto LABEL_72;
  }
  if (v24) {
    goto LABEL_72;
  }
  int v25 = CFEqual(cf1, @"xMaxExtent");
  if (cf1 == @"yMaxExtent") {
    goto LABEL_72;
  }
  if (v25) {
    goto LABEL_72;
  }
  int v26 = CFEqual(cf1, @"yMaxExtent");
  if (cf1 == @"caretSlopeRise") {
    goto LABEL_72;
  }
  if (v26) {
    goto LABEL_72;
  }
  int v27 = CFEqual(cf1, @"caretSlopeRise");
  if (cf1 == @"caretSlopeRun") {
    goto LABEL_72;
  }
  if (v27) {
    goto LABEL_72;
  }
  int v28 = CFEqual(cf1, @"caretSlopeRun");
  if (cf1 == @"caretOffset") {
    goto LABEL_72;
  }
  if (v28) {
    goto LABEL_72;
  }
  int v29 = CFEqual(cf1, @"caretOffset");
  if (cf1 == @"vertCaretSlopeRise") {
    goto LABEL_72;
  }
  if (v29) {
    goto LABEL_72;
  }
  int v30 = CFEqual(cf1, @"vertCaretSlopeRise");
  if (cf1 == @"vertCaretSlopeRun") {
    goto LABEL_72;
  }
  if (v30) {
    goto LABEL_72;
  }
  int v31 = CFEqual(cf1, @"vertCaretSlopeRun");
  if (cf1 == @"vertCaretOffset") {
    goto LABEL_72;
  }
  if (v31) {
    goto LABEL_72;
  }
  int v32 = CFEqual(cf1, @"vertCaretOffset");
  if (cf1 == @"italicAngle"
    || v32
    || (int v33 = CFEqual(cf1, @"italicAngle"), cf1 == @"underlinePosition")
    || v33
    || (int v34 = CFEqual(cf1, @"underlinePosition"), cf1 == @"underlineThickness")
    || v34
    || (int v35 = CFEqual(cf1, @"underlineThickness"), cf1 == @"isFixedPitch")
    || v35
    || (int v36 = CFEqual(cf1, @"isFixedPitch"), cf1 == @"numGlyphs")
    || v36
    || (int v37 = CFEqual(cf1, @"numGlyphs"), cf1 == @"weightClass")
    || v37
    || (int v38 = CFEqual(cf1, @"weightClass"), cf1 == @"widthClass")
    || v38
    || (int v39 = CFEqual(cf1, @"widthClass"), cf1 == @"familyClass")
    || v39
    || CFEqual(cf1, @"familyClass"))
  {
LABEL_72:
    unsigned int v40 = (__CFDictionary *)*((void *)this + 2);
    CFDictionarySetValue(v40, cf1, value);
  }
  else
  {
LABEL_75:
    *((unsigned char *)this + 8) = 0;
  }
}

void TComponents::TComponents(TComponents *this)
{
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F0E024B0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *((void *)this + 2) = Mutable;
  if (!Mutable) {
    *((unsigned char *)this + 8) = 0;
  }
}

void TComponents::~TComponents(TComponents *this)
{
  *(void *)this = &unk_1F0E024B0;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TComponents::~TComponents(this);
  JUMPOUT(0x1BA9994D0);
}

void TComponents::ParseSubElement(TComponents *this, _xmlNode *a2, __CFString *cf1)
{
  if (!*((unsigned char *)this + 8)) {
    return;
  }
  if (cf1 != @"ComponentDef")
  {
    if (!cf1) {
      goto LABEL_27;
    }
    if (CFEqual(cf1, @"ComponentDef")) {
      goto LABEL_5;
    }
    if (cf1 != @"LanguagePreferedList" && !CFEqual(cf1, @"LanguagePreferedList"))
    {
LABEL_27:
      *((unsigned char *)this + 8) = 0;
      return;
    }
    v13[1] = (CFDictionaryRef)0xAAAAAAAAAAAAAA01;
    void v13[2] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
    v13[0] = (CFDictionaryRef)&unk_1F0E02520;
    void v13[2] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!v13[2]) {
      LOBYTE(v13[1]) = 0;
    }
    TElement::Parse((TElement *)v13, a2);
    if (LOBYTE(v13[1]))
    {
      if (CFArrayGetCount(v13[2]))
      {
        if (LOBYTE(v13[1]) && v13[2])
        {
          int v7 = (__CFArray *)*((void *)this + 2);
          context[0] = v7;
          context[1] = v13[2];
          if (atomic_load_explicit((atomic_ullong *volatile)&qword_1EB2CD268, memory_order_acquire) != -1)
          {
            int v17 = &v15;
            int v16 = &v17;
            std::__call_once(&qword_1EB2CD268, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:fe180100]<std::tuple<TLanguagePreferedList::GetSystemPreferredLanguages(void)::$_0 &&>>);
          }
          CFArrayRef v8 = (const __CFArray *)_MergedGlobals_2;
          if (_MergedGlobals_2)
          {
            v18.CFIndex length = CFArrayGetCount((CFArrayRef)_MergedGlobals_2);
            v18.CFIndex location = 0;
            CFArrayApplyFunction(v8, v18, (CFArrayApplierFunction)ExtractLanguageSpecificComponent, context);
          }
          CFIndex Count = CFArrayGetCount(v13[2]);
          if (Count >= 1)
          {
            for (CFIndex i = 0; i != Count; ++i)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v13[2], i);
              CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"ComponentDef");
              if (Value) {
                CFArrayAppendValue(v7, Value);
              }
            }
          }
          goto LABEL_30;
        }
      }
      else
      {
        CFRelease(v13[2]);
        void v13[2] = 0;
      }
    }
    *((unsigned char *)this + 8) = 0;
LABEL_30:
    TLanguagePreferedList::~TLanguagePreferedList((TLanguagePreferedList *)v13);
    return;
  }
LABEL_5:
  memset(v13, 170, sizeof(v13));
  TComponentDef::TComponentDef((TComponentDef *)v13);
  CFDictionaryRef v6 = TComponentDef::Build(v13, a2);
  if (v6) {
    CFArrayAppendValue(*((CFMutableArrayRef *)this + 2), v6);
  }
  else {
    *((unsigned char *)this + 8) = 0;
  }
  TComponentDef::~TComponentDef((TComponentDef *)v13);
}

void sub_1B5369CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFDictionaryRef TComponentDef::Build(CFDictionaryRef *this, _xmlNode *a2)
{
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  if (!CFDictionaryContainsKey(this[2], @"name")) {
    *((unsigned char *)this + 8) = 0;
  }
  if (!CFDictionaryGetCount(this[2]))
  {
    CFRelease(this[2]);
    this[2] = 0;
  }
  if (*((unsigned char *)this + 8)) {
    return this[2];
  }
  else {
    return 0;
  }
}

void TComponentDef::TComponentDef(TComponentDef *this)
{
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F0E024E8;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *((void *)this + 2) = Mutable;
  if (!Mutable) {
    *((unsigned char *)this + 8) = 0;
  }
}

void TComponentDef::~TComponentDef(TComponentDef *this)
{
  *(void *)this = &unk_1F0E024E8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TComponentDef::~TComponentDef(this);
  JUMPOUT(0x1BA9994D0);
}

void TComponentDef::ParseAttribute(TComponentDef *this, __CFString *cf1, const __CFString *value)
{
  if (cf1 == @"name" || cf1 && CFEqual(cf1, @"name"))
  {
    CFAllocatorRef v5 = (__CFDictionary *)*((void *)this + 2);
    CFDictionarySetValue(v5, @"name", value);
  }
  else
  {
    *((unsigned char *)this + 8) = 0;
  }
}

void TComponentDef::ParseSubElement(TComponentDef *this, _xmlNode *a2, __CFString *cf1)
{
  if (!*((unsigned char *)this + 8)) {
    return;
  }
  if (cf1 != @"Matrix")
  {
    if (!cf1)
    {
LABEL_6:
      *((unsigned char *)this + 8) = 0;
      return;
    }
    if (!CFEqual(cf1, @"Matrix"))
    {
      if (cf1 == @"UnicodeCharSet" || CFEqual(cf1, @"UnicodeCharSet"))
      {
        if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"UnicodeCharSet")) {
          goto LABEL_6;
        }
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAA01;
        theDict[0] = 0;
        *(void *)&long long v14 = &unk_1F0E02638;
        TElement::Parse((TElement *)&v14, a2);
        if (BYTE8(v14))
        {
          if (theDict[0])
          {
            CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), @"UnicodeCharSet", theDict[0]);
LABEL_32:
            TUnicodeCharSet::~TUnicodeCharSet((TUnicodeCharSet *)&v14);
            return;
          }
          BYTE8(v14) = 0;
        }
        *((unsigned char *)this + 8) = 0;
        goto LABEL_32;
      }
      if (cf1 == @"cmapOverride" || CFEqual(cf1, @"cmapOverride"))
      {
        if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"cmapOverride")) {
          goto LABEL_6;
        }
        *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v14 = v8;
        *(_OWORD *)CFMutableDictionaryRef theDict = v8;
        TcmapOverride::TcmapOverride((TcmapOverride *)&v14);
        if (TcmapOverride::Build((CFArrayRef *)&v14, a2))
        {
          int v9 = (__CFDictionary *)*((void *)this + 2);
          CmapOverrideDataStruct = TcmapOverride::GetCmapOverrideDataStruct((CFArrayRef *)&v14);
          CFDictionarySetValue(v9, @"cmapOverride", CmapOverrideDataStruct);
        }
        else
        {
          *((unsigned char *)this + 8) = 0;
        }
        TcmapOverride::~TcmapOverride((TcmapOverride *)&v14);
        return;
      }
      if (cf1 != @"Tracking" && !CFEqual(cf1, @"Tracking"))
      {
        if (cf1 != @"ToUnicode" && !CFEqual(cf1, @"ToUnicode")
          || CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"ToUnicode"))
        {
          goto LABEL_6;
        }
        *(void *)&long long v11 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
        long long v14 = v11;
        *(_OWORD *)CFMutableDictionaryRef theDict = v11;
        TToUnicode::TToUnicode((TToUnicode *)&v14);
        if (TcmapOverride::Build((CFArrayRef *)&v14, a2))
        {
          int v12 = (__CFDictionary *)*((void *)this + 2);
          int v13 = TToUnicode::GetToUnicodeDataStruct((CFArrayRef *)&v14);
          CFDictionarySetValue(v12, @"ToUnicode", v13);
        }
        else
        {
          *((unsigned char *)this + 8) = 0;
        }
        TToUnicode::~TToUnicode((TToUnicode *)&v14);
        return;
      }
      if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"Tracking")) {
        goto LABEL_6;
      }
      *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAA01;
      theDict[0] = 0;
      *(void *)&long long v14 = &unk_1F0E025C8;
      TElement::Parse((TElement *)&v14, a2);
      if (BYTE8(v14))
      {
        if (theDict[0])
        {
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), @"Tracking", theDict[0]);
LABEL_48:
          TTracking::~TTracking((TTracking *)&v14);
          return;
        }
        BYTE8(v14) = 0;
      }
      *((unsigned char *)this + 8) = 0;
      goto LABEL_48;
    }
  }
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"Matrix")) {
    goto LABEL_6;
  }
  theDict[0] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  theDict[1] = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAA01;
  *(void *)&long long v14 = &unk_1F0E02600;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  theDict[0] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  theDict[1] = 0;
  if (!theDict[0]) {
    BYTE8(v14) = 0;
  }
  TElement::Parse((TElement *)&v14, a2);
  if (!BYTE8(v14)) {
    goto LABEL_16;
  }
  if (CFDictionaryGetCount(theDict[0]) != 6)
  {
    BYTE8(v14) = 0;
    CFRelease(theDict[0]);
    theDict[0] = 0;
  }
  if (!BYTE8(v14)) {
    goto LABEL_16;
  }
  CFDictionaryRef Mutable = CFArrayCreateMutable(v6, 6, MEMORY[0x1E4F1D510]);
  theDict[1] = Mutable;
  if (!Mutable) {
    goto LABEL_16;
  }
  TMatrix::AddStashedElement(theDict[0], Mutable, @"xx");
  TMatrix::AddStashedElement(theDict[0], theDict[1], @"xy");
  TMatrix::AddStashedElement(theDict[0], theDict[1], @"yx");
  TMatrix::AddStashedElement(theDict[0], theDict[1], @"yy");
  TMatrix::AddStashedElement(theDict[0], theDict[1], @"tx");
  TMatrix::AddStashedElement(theDict[0], theDict[1], @"ty");
  if (theDict[1]) {
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), @"Matrix", theDict[1]);
  }
  else {
LABEL_16:
  }
    *((unsigned char *)this + 8) = 0;
  TMatrix::~TMatrix((TMatrix *)&v14);
}

void sub_1B536A31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFIndex TcmapOverride::Build(CFArrayRef *this, _xmlNode *a2)
{
  TElement::Parse((TElement *)this, a2);
  if (!*((unsigned char *)this + 8)) {
    return 0;
  }
  CFIndex result = CFArrayGetCount(this[2]);
  if (result) {
    return (CFIndex)this[2];
  }
  return result;
}

__CFData *TcmapOverride::GetCmapOverrideDataStruct(CFArrayRef *this)
{
  CFDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    *(void *)bytes = CFArrayGetCount(this[2]);
    CFDataAppendBytes(Mutable, bytes, 8);
    v5.CFIndex length = *(void *)bytes;
    v5.CFIndex location = 0;
    CFArraySortValues(this[2], v5, MEMORY[0x1E4F1C258], 0);
    v6.CFIndex length = *(void *)bytes;
    v6.CFIndex location = 0;
    CFArrayApplyFunction(this[2], v6, (CFArrayApplierFunction)cmapOverrideApplier, Mutable);
    this[3] = Mutable;
  }
  return Mutable;
}

__CFData *TToUnicode::GetToUnicodeDataStruct(CFArrayRef *this)
{
  CFDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    *(void *)bytes = CFArrayGetCount(this[2]);
    CFDataAppendBytes(Mutable, bytes, 8);
    v5.CFIndex length = *(void *)bytes;
    v5.CFIndex location = 0;
    CFArraySortValues(this[2], v5, MEMORY[0x1E4F1C258], 0);
    v6.CFIndex length = *(void *)bytes;
    v6.CFIndex location = 0;
    CFArrayApplyFunction(this[2], v6, (CFArrayApplierFunction)toUnicodeApplier, Mutable);
    this[3] = Mutable;
  }
  return Mutable;
}

void TLanguagePreferedList::~TLanguagePreferedList(TLanguagePreferedList *this)
{
  *(void *)this = &unk_1F0E02520;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TLanguagePreferedList::~TLanguagePreferedList(this);
  JUMPOUT(0x1BA9994D0);
}

void TLanguagePreferedList::ParseSubElement(CFMutableArrayRef *this, _xmlNode *a2, __CFString *cf1)
{
  if (*((unsigned char *)this + 8))
  {
    if (cf1 == @"LanguagePreferedComponentDef" || cf1 && CFEqual(cf1, @"LanguagePreferedComponentDef"))
    {
      CFDictionaryRef theDict = (CFDictionaryRef)0xAAAAAAAAAAAAAAAALL;
      unint64_t v8 = 0xAAAAAAAAAAAAAAAALL;
      unint64_t v6 = 0xAAAAAAAAAAAAAA01;
      CFRange v5 = &unk_1F0E02558;
      CFDictionaryRef theDict = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      unint64_t v8 = 0;
      if (!theDict) {
        LOBYTE(v6) = 0;
      }
      TElement::Parse((TElement *)&v5, a2);
      if (!(_BYTE)v6) {
        goto LABEL_16;
      }
      if (!CFDictionaryContainsKey(theDict, @"ComponentDef")
        || !CFDictionaryContainsKey(theDict, @"LanguageList"))
      {
        LOBYTE(v6) = 0;
      }
      if (!CFDictionaryGetCount(theDict))
      {
        CFRelease(theDict);
        CFDictionaryRef theDict = 0;
      }
      if ((_BYTE)v6 && theDict) {
        CFArrayAppendValue(this[2], theDict);
      }
      else {
LABEL_16:
      }
        *((unsigned char *)this + 8) = 0;
      TLanguagePreferedComponentDef::~TLanguagePreferedComponentDef((TLanguagePreferedComponentDef *)&v5);
    }
    else
    {
      *((unsigned char *)this + 8) = 0;
    }
  }
}

void sub_1B536A6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ExtractLanguageSpecificComponent(const void *a1, CFArrayRef *a2)
{
  CFIndex Count = CFArrayGetCount(a2[1]);
  if (Count >= 1)
  {
    CFIndex v5 = Count;
    CFIndex v6 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a2[1], v6);
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"LanguageList");
      CFIndex v9 = CFArrayGetCount(Value);
      if (v9 >= 1) {
        break;
      }
LABEL_11:
      if (++v6 == v5) {
        return;
      }
    }
    CFIndex v10 = v9;
    CFIndex v11 = 0;
    while (1)
    {
      int v12 = CFArrayGetValueAtIndex(Value, v11);
      if (v12 == a1 || a1 && v12 && CFEqual(v12, a1))
      {
        int v13 = CFDictionaryGetValue(ValueAtIndex, @"ComponentDef");
        if (v13) {
          break;
        }
      }
      if (v10 == ++v11) {
        goto LABEL_11;
      }
    }
    CFArrayAppendValue(*a2, v13);
    long long v14 = a2[1];
    CFArrayRemoveValueAtIndex(v14, v6);
  }
}

void TLanguagePreferedComponentDef::~TLanguagePreferedComponentDef(TLanguagePreferedComponentDef *this)
{
  *(void *)this = &unk_1F0E02558;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
}

{
  uint64_t vars8;

  TLanguagePreferedComponentDef::~TLanguagePreferedComponentDef(this);
  JUMPOUT(0x1BA9994D0);
}

void TLanguagePreferedComponentDef::ParseSubElement(TLanguagePreferedComponentDef *this, _xmlNode *a2, __CFString *cf1)
{
  if (!*((unsigned char *)this + 8)) {
    return;
  }
  if (cf1 != @"ComponentDef")
  {
    if (!cf1)
    {
LABEL_6:
      *((unsigned char *)this + 8) = 0;
      return;
    }
    if (!CFEqual(cf1, @"ComponentDef"))
    {
      if (cf1 != @"language" && !CFEqual(cf1, @"language")) {
        goto LABEL_6;
      }
      if (!CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"LanguageList"))
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        *((void *)this + 3) = Mutable;
        if (Mutable) {
          CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), @"LanguageList", Mutable);
        }
      }
      v8[1] = (CFDictionaryRef)0xAAAAAAAAAAAAAA01;
      v8[2] = 0;
      v8[0] = (CFDictionaryRef)&unk_1F0E02590;
      TElement::Parse((TElement *)v8, a2);
      if (LOBYTE(v8[1]))
      {
        if (v8[2])
        {
          CFArrayAppendValue(*((CFMutableArrayRef *)this + 3), v8[2]);
LABEL_21:
          TLanguage::~TLanguage((TLanguage *)v8);
          return;
        }
        LOBYTE(v8[1]) = 0;
      }
      *((unsigned char *)this + 8) = 0;
      goto LABEL_21;
    }
  }
  if (CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), @"ComponentDef")) {
    goto LABEL_6;
  }
  memset(v8, 170, sizeof(v8));
  TComponentDef::TComponentDef((TComponentDef *)v8);
  CFDictionaryRef v6 = TComponentDef::Build(v8, a2);
  if (v6) {
    CFDictionarySetValue(*((CFMutableDictionaryRef *)this + 2), @"ComponentDef", v6);
  }
  else {
    *((unsigned char *)this + 8) = 0;
  }
  TComponentDef::~TComponentDef((TComponentDef *)v8);
}

void sub_1B536AA74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TLanguage::~TLanguage((TLanguage *)va);
  _Unwind_Resume(a1);
}

void TLanguage::~TLanguage(TLanguage *this)
{
  *(void *)this = &unk_1F0E02590;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TLanguage::~TLanguage(this);
  JUMPOUT(0x1BA9994D0);
}

uint64_t TLanguage::ParseAttribute(uint64_t this, __CFString *cf1, CFTypeRef cf)
{
  uint64_t v4 = this;
  if (cf1 == @"string" || cf1 && (this = CFEqual(cf1, @"string"), this))
  {
    *(void *)(v4 + 16) = cf;
    return (uint64_t)CFRetain(cf);
  }
  else
  {
    *(unsigned char *)(v4 + 8) = 0;
  }
  return this;
}

void TTracking::~TTracking(TTracking *this)
{
  *(void *)this = &unk_1F0E025C8;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TTracking::~TTracking(this);
  JUMPOUT(0x1BA9994D0);
}

CFNumberRef TTracking::ParseAttribute(CFNumberRef this, __CFString *cf1, CFStringRef str)
{
  uint64_t v4 = (uint64_t)this;
  if (cf1 == @"trackingValue" || cf1 && (this = (CFNumberRef)CFEqual(cf1, @"trackingValue"), this))
  {
    double valuePtr = CFStringGetDoubleValue(str);
    this = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
    *(void *)(v4 + 16) = this;
  }
  else
  {
    *(unsigned char *)(v4 + 8) = 0;
  }
  return this;
}

void TMatrix::~TMatrix(TMatrix *this)
{
  *(void *)this = &unk_1F0E02600;
  uint64_t v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
}

{
  uint64_t vars8;

  TMatrix::~TMatrix(this);
  JUMPOUT(0x1BA9994D0);
}

void TMatrix::AddStashedElement(TMatrix *this, __CFArray *a2, const __CFString *key)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(this, key);
  double valuePtr = CFStringGetDoubleValue(Value);
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
  CFArrayAppendValue(a2, v5);
  CFRelease(v5);
}

void TMatrix::ParseAttribute(TMatrix *this, __CFString *cf1, const __CFString *a3)
{
  if ((cf1 == @"xx"
     || cf1
     && ((int v6 = CFEqual(cf1, @"xx"), cf1 == @"xy")
      || v6
      || (int v7 = CFEqual(cf1, @"xy"), cf1 == @"yx")
      || v7
      || (int v8 = CFEqual(cf1, @"yx"), cf1 == @"yy")
      || v8
      || (int v9 = CFEqual(cf1, @"yy"), cf1 == @"tx")
      || v9
      || (int v10 = CFEqual(cf1, @"tx"), cf1 == @"ty")
      || v10
      || CFEqual(cf1, @"ty")))
    && !CFDictionaryContainsKey(*((CFDictionaryRef *)this + 2), cf1))
  {
    CFIndex v11 = (__CFDictionary *)*((void *)this + 2);
    CFDictionarySetValue(v11, cf1, a3);
  }
  else
  {
    *((unsigned char *)this + 8) = 0;
  }
}

void TUnicodeCharSet::~TUnicodeCharSet(TUnicodeCharSet *this)
{
  *(void *)this = &unk_1F0E02638;
  uint64_t v1 = (const void *)*((void *)this + 2);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  TUnicodeCharSet::~TUnicodeCharSet(this);
  JUMPOUT(0x1BA9994D0);
}

CFCharacterSetRef TUnicodeCharSet::ParseAttribute(CFCharacterSetRef this, __CFString *cf1, const __CFString *a3)
{
  uint64_t v4 = (uint64_t)this;
  if (cf1 != @"uset" && (!cf1 || (this = (CFCharacterSetRef)CFEqual(cf1, @"uset"), !this))
    || (this = CreateCFCharacterSetFromUSetPattern(a3), (*(void *)(v4 + 16) = this) == 0))
  {
    *(unsigned char *)(v4 + 8) = 0;
  }
  return this;
}

CFCharacterSetRef CreateCFCharacterSetFromUSetPattern(const __CFString *a1)
{
  MEMORY[0x1F4188790](a1);
  CFStringRef v2 = v1;
  v47[1] = *MEMORY[0x1E4F143B8];
  CFIndex Length = CFStringGetLength(v1);
  MEMORY[0x1F4188790](Length);
  CFNumberRef v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v6 & 1) == 0) {
    memset(v5, 170, 2 * Length + 2);
  }
  v48.CFIndex location = 0;
  v48.CFIndex length = Length;
  CFStringGetCharacters(v2, v48, (UniChar *)v5);
  *(_WORD *)&v5[2 * Length] = 0;
  int v37 = 0;
  if (!uset_openPattern()) {
    return 0;
  }
  if (v37)
  {
    CopCGFloat y = 0;
    goto LABEL_56;
  }
  int v42 = 0;
  CFAllocatorRef v36 = (CFAllocatorRef)*MEMORY[0x1E4F1CF80];
  CFCharacterSetRef Mutable = CFCharacterSetCreateMutable(v36);
  if (!Mutable)
  {
    CopCGFloat y = 0;
    goto LABEL_55;
  }
  memset(v46, 170, sizeof(v46));
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  unint64_t v43 = 0;
  int v29 = (UniChar *)v46;
  v47[0] = v46;
  ItemCFIndex Count = uset_getItemCount();
  if (ItemCount < 1)
  {
LABEL_51:
    CopCGFloat y = CFCharacterSetCreateCopy(v36, Mutable);
    goto LABEL_54;
  }
  int v9 = 0;
  int v33 = (UniChar *)v47;
  CFAllocatorRef v35 = (CFAllocatorRef)*MEMORY[0x1E4F1CFA0];
  while (1)
  {
    int v39 = -1431655766;
    int v40 = -1431655766;
    if (v44 == v43) {
      int v10 = 0;
    }
    else {
      int v10 = v43;
    }
    Iteuint64_t m = uset_getItem();
    int v12 = Item;
    int v13 = v42;
    if (v42 != 15) {
      goto LABEL_33;
    }
    unint64_t v14 = Item + 1;
    int v16 = (UniChar *)v43;
    char v15 = v44;
    unint64_t v17 = v44 - v43;
    if (v14 <= v17)
    {
      if (v14 >= v17) {
        goto LABEL_30;
      }
      int v22 = &v43[v14];
LABEL_29:
      uint64_t v44 = (UniChar *)v22;
      goto LABEL_30;
    }
    unint64_t v18 = v14 - v17;
    if (v14 - v17 <= (v45 - (char *)v44) >> 1)
    {
      bzero(v44, 2 * v18);
      int v22 = &v15[v18];
      goto LABEL_29;
    }
    if (Item <= -2) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    if (v45 - (char *)v43 <= v14) {
      uint64_t v19 = Item + 1;
    }
    else {
      uint64_t v19 = v45 - (char *)v43;
    }
    uint64_t v28 = v45 - (char *)v43;
    if ((unint64_t)(v45 - (char *)v43) >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v20 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v20 = v19;
    }
    int v21 = (char *)v47[0];
    uint64_t v32 = v20;
    if (v47[0] + 2 * v20 <= (unint64_t)v33)
    {
      uint64_t v30 = v47[0] + 2 * v20;
      v47[0] = v30;
    }
    else
    {
      int v34 = (char *)v47[0];
      if (v20 < 0) {
        std::__throw_bad_array_new_length[abi:fe180100]();
      }
      int v21 = (char *)operator new(2 * v20);
      uint64_t v30 = (uint64_t)v34;
    }
    unint64_t v31 = v14 - v17;
    int v34 = v21;
    int v23 = &v21[2 * v17];
    bzero(v23, 2 * v18);
    int v10 = (const UniChar *)v23;
    if (v15 == v16)
    {
      uint64_t v24 = v32;
      int v25 = (char *)v30;
    }
    else
    {
      uint64_t v24 = v32;
      int v25 = (char *)v30;
      do
      {
        __int16 v26 = *--v15;
        *((_WORD *)v10-- - 1) = v26;
      }
      while (v15 != v16);
    }
    unint64_t v43 = v10;
    uint64_t v44 = (UniChar *)&v23[2 * v31];
    uint64_t v45 = &v34[2 * v24];
    if (!v16) {
      goto LABEL_31;
    }
    if (v29 > v16 || v33 <= v16)
    {
      operator delete(v16);
    }
    else if ((char *)v16 + v28 == v25)
    {
      v47[0] = v16;
    }
LABEL_30:
    int v10 = v43;
LABEL_31:
    if (!v10) {
      break;
    }
    int v42 = 0;
    uset_getItem();
    int v13 = v42;
LABEL_33:
    if (v13 > 0) {
      break;
    }
    if (v12 <= 0)
    {
      v49.CFIndex location = v40;
      v49.CFIndex length = v39 - v40 + 1;
      CFCharacterSetAddCharactersInRange(Mutable, v49);
    }
    else
    {
      CFStringRef v38 = (const __CFString *)0xAAAAAAAAAAAAAAAALL;
      CFStringRef v38 = CFStringCreateWithCharactersNoCopy(v36, v10, v12, v35);
      CFCharacterSetAddCharactersInString(Mutable, v38);
      TCFString::~TCFString((const void **)&v38);
    }
    if (++v9 == ItemCount) {
      goto LABEL_51;
    }
  }
  CopCGFloat y = 0;
LABEL_54:
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,2048ul>>::__destroy_vector::operator()[abi:fe180100]((uint64_t)&v43);
LABEL_55:
  TCFRetained<__CFCharacterSet *>::~TCFRetained((const void **)&Mutable);
LABEL_56:
  uset_close();
  return Copy;
}

void sub_1B536B408(_Unwind_Exception *a1)
{
  std::vector<unsigned short,TInlineBufferAllocator<unsigned short,2048ul>>::__destroy_vector::operator()[abi:fe180100](v1 + 112);
  TCFRetained<__CFCharacterSet *>::~TCFRetained((const void **)(v1 + 96));
  _Unwind_Resume(a1);
}

void TcmapOverride::TcmapOverride(TcmapOverride *this)
{
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F0E02670;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *((void *)this + 2) = Mutable;
  *((void *)this + 3) = 0;
  if (!Mutable) {
    *((unsigned char *)this + 8) = 0;
  }
}

void TcmapOverride::~TcmapOverride(TcmapOverride *this)
{
  *(void *)this = &unk_1F0E02670;
  CFStringRef v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
}

{
  uint64_t vars8;

  TcmapOverride::~TcmapOverride(this);
  JUMPOUT(0x1BA9994D0);
}

void TcmapOverride::ParseSubElement(CFMutableArrayRef *this, _xmlNode *a2, __CFString *cf1)
{
  if (*((unsigned char *)this + 8))
  {
    if ((cf1 == @"map" || cf1 && CFEqual(cf1, @"map"))
      && (*(void *)&long long v8 = 0xAAAAAAAAAAAAAA01,
          *((void *)&v8 + 1) = 0xAAAA0000AAAAAAAALL,
          int v7 = &unk_1F0E026A8,
          TElement::Parse((TElement *)&v7, a2),
          (_BYTE)v8)
      && BYTE12(v8)
      && BYTE13(v8))
    {
      uint64_t v6 = __ROR8__(*(void *)((char *)&v8 + 4), 32);
      CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &v6);
      CFArrayAppendValue(this[2], v5);
      CFRelease(v5);
    }
    else
    {
      *((unsigned char *)this + 8) = 0;
    }
  }
}

void cmapOverrideApplier(const __CFNumber *a1, __CFData *a2)
{
  unint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
  uint64_t v3 = __ROR8__(valuePtr, 32);
  CFDataAppendBytes(a2, (const UInt8 *)&v3, 8);
}

void TMap::~TMap(TMap *this)
{
}

uint64_t TMap::ParseAttribute(uint64_t this, __CFString *cf1, CFStringRef theString)
{
  uint64_t v4 = this;
  if (cf1 != @"charValue")
  {
    if (cf1)
    {
      this = CFEqual(cf1, @"charValue");
      if (this) {
        goto LABEL_4;
      }
      if (cf1 == @"glyphRefID" || (this = CFEqual(cf1, @"glyphRefID"), this))
      {
        if (!*(unsigned char *)(v4 + 21))
        {
          *(unsigned char *)(v4 + 21) = 1;
          this = CFStringGetIntValue(theString);
          *(_DWORD *)(v4 + 16) = this;
          return this;
        }
        goto LABEL_5;
      }
      if (cf1 == @"charName") {
        return this;
      }
      this = CFEqual(cf1, @"charName");
      if (cf1 == @"glyphName") {
        return this;
      }
      if (this) {
        return this;
      }
      this = CFEqual(cf1, @"glyphName");
      if (this) {
        return this;
      }
    }
LABEL_5:
    *(unsigned char *)(v4 + 8) = 0;
    return this;
  }
LABEL_4:
  if (*(unsigned char *)(v4 + 20)) {
    goto LABEL_5;
  }
  *(unsigned char *)(v4 + 20) = 1;
  this = TElement::CFStringGetUnicodeHexValue((TElement *)v4, theString);
  *(_DWORD *)(v4 + 12) = this;
  if (!this) {
    goto LABEL_5;
  }
  return this;
}

uint64_t TElement::CFStringGetUnicodeHexValue(TElement *this, CFStringRef theString)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (CFStringGetLength(theString) < 2 || !CFStringHasPrefix(theString, @"u")) {
    goto LABEL_25;
  }
  ConstStringPtr PascalStringPtr = CFStringGetPascalStringPtr(theString, 0x600u);
  if (PascalStringPtr)
  {
    CFNumberRef v5 = (char *)(PascalStringPtr + 2);
    unsigned __int8 v6 = *PascalStringPtr - 1;
    if (*PascalStringPtr != 1)
    {
      LODWORD(result) = 0;
      long long v8 = &v5[v6];
      do
      {
        int v10 = *v5++;
        int v9 = v10;
        if ((v10 - 48) >= 0xA)
        {
          if ((v9 - 65) >= 6)
          {
            if ((v9 - 97) >= 6) {
              goto LABEL_25;
            }
            int v11 = -87;
          }
          else
          {
            int v11 = -55;
          }
        }
        else
        {
          int v11 = -48;
        }
        uint64_t result = (16 * result + v9 + v11);
      }
      while (v5 < v8);
      return result;
    }
    return 0;
  }
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  void v17[2] = v12;
  v17[3] = v12;
  v17[0] = v12;
  v17[1] = v12;
  if (!CFStringGetPascalString(theString, (StringPtr)v17, 64, 0x600u))
  {
LABEL_25:
    uint64_t result = 0;
    *((unsigned char *)this + 8) = 0;
    return result;
  }
  if (LOBYTE(v17[0]) == 1) {
    return 0;
  }
  LODWORD(result) = 0;
  int v13 = (char *)v17 + 2;
  do
  {
    int v15 = *v13++;
    int v14 = v15;
    if ((v15 - 48) >= 0xA)
    {
      if ((v14 - 65) >= 6)
      {
        if ((v14 - 97) >= 6) {
          goto LABEL_25;
        }
        int v16 = -87;
      }
      else
      {
        int v16 = -55;
      }
    }
    else
    {
      int v16 = -48;
    }
    uint64_t result = (16 * result + v14 + v16);
  }
  while (v13 < (char *)v17 + (LOBYTE(v17[0]) - 1) + 2);
  return result;
}

void TToUnicode::TToUnicode(TToUnicode *this)
{
  *((unsigned char *)this + 8) = 1;
  *(void *)this = &unk_1F0E026E0;
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *((void *)this + 2) = Mutable;
  *((void *)this + 3) = 0;
  if (!Mutable) {
    *((unsigned char *)this + 8) = 0;
  }
}

void TToUnicode::~TToUnicode(TToUnicode *this)
{
  *(void *)this = &unk_1F0E026E0;
  CFStringRef v2 = (const void *)*((void *)this + 2);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (v3) {
    CFRelease(v3);
  }
}

{
  uint64_t vars8;

  TToUnicode::~TToUnicode(this);
  JUMPOUT(0x1BA9994D0);
}

void TToUnicode::ParseSubElement(CFMutableArrayRef *this, _xmlNode *a2, __CFString *cf1)
{
  if (*((unsigned char *)this + 8))
  {
    if ((cf1 == @"mapChar" || cf1 && CFEqual(cf1, @"mapChar"))
      && (*(void *)&long long v8 = 0xAAAAAAAAAAAAAA01,
          *((void *)&v8 + 1) = 0xAAAA0000AAAAAAAALL,
          int v7 = &unk_1F0E02718,
          TElement::Parse((TElement *)&v7, a2),
          (_BYTE)v8)
      && BYTE12(v8)
      && BYTE13(v8))
    {
      uint64_t v6 = __ROR8__(*(void *)((char *)&v8 + 4), 32);
      CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &v6);
      CFArrayAppendValue(this[2], v5);
      CFRelease(v5);
    }
    else
    {
      *((unsigned char *)this + 8) = 0;
    }
  }
}

void toUnicodeApplier(const __CFNumber *a1, __CFData *a2)
{
  unint64_t valuePtr = 0xAAAAAAAAAAAAAAAALL;
  CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
  uint64_t v3 = __ROR8__(valuePtr, 32);
  CFDataAppendBytes(a2, (const UInt8 *)&v3, 8);
}

void TMapChar::~TMapChar(TMapChar *this)
{
}

ConstStringPtr TMapChar::ParseAttribute(ConstStringPtr this, __CFString *cf1, CFStringRef theString)
{
  uint64_t v4 = (uint64_t)this;
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (cf1 == @"fromCharValue") {
    goto LABEL_46;
  }
  if (!cf1) {
    goto LABEL_41;
  }
  this = (ConstStringPtr)CFEqual(cf1, @"fromCharValue");
  if (this)
  {
LABEL_46:
    if (!*(unsigned char *)(v4 + 20))
    {
      *(unsigned char *)(v4 + 20) = 1;
      this = CFStringGetPascalStringPtr(theString, 0x600u);
      if (!this)
      {
        *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
        *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
        v19[2] = v14;
        v19[3] = v14;
        v19[0] = v14;
        v19[1] = v14;
        this = (ConstStringPtr)CFStringGetPascalString(theString, (StringPtr)v19, 64, 0x600u);
        if (this && LOBYTE(v19[0]) >= 2u && BYTE1(v19[0]) == 48 && (BYTE2(v19[0]) | 0x20) == 0x78)
        {
          if (LOBYTE(v19[0]) == 2)
          {
            int v8 = 0;
          }
          else
          {
            int v8 = 0;
            int v15 = (char *)v19 + 3;
            do
            {
              int v17 = *v15++;
              int v16 = v17;
              if ((v17 - 48) >= 0xA)
              {
                if ((v16 - 65) >= 6)
                {
                  if ((v16 - 97) > 5) {
                    goto LABEL_39;
                  }
                  int v18 = -87;
                }
                else
                {
                  int v18 = -55;
                }
              }
              else
              {
                int v18 = -48;
              }
              int v8 = 16 * v8 + v16 + v18;
            }
            while (v15 < (char *)v19 + (LOBYTE(v19[0]) - 2) + 3);
          }
        }
        else
        {
LABEL_39:
          int v8 = 0;
          *(unsigned char *)(v4 + 8) = 0;
        }
LABEL_40:
        *(_DWORD *)(v4 + 12) = v8;
        if (v8) {
          return this;
        }
        goto LABEL_41;
      }
      unsigned int v6 = *this;
      unsigned __int8 v7 = v6 - 2;
      if (v6 >= 2 && this[1] == 48 && (this[2] | 0x20) == 0x78 && (_BYTE)v6 != 2)
      {
        int v8 = 0;
        int v9 = (char *)(this + 3);
        unint64_t v10 = (unint64_t)&this[v7 + 3];
        do
        {
          int v12 = *v9++;
          int v11 = v12;
          if ((v12 - 48) >= 0xA)
          {
            if ((v11 - 65) >= 6)
            {
              if ((v11 - 97) > 5) {
                goto LABEL_24;
              }
              int v13 = -87;
            }
            else
            {
              int v13 = -55;
            }
          }
          else
          {
            int v13 = -48;
          }
          int v8 = 16 * v8 + v11 + v13;
        }
        while ((unint64_t)v9 < v10);
        goto LABEL_40;
      }
LABEL_24:
      *(_DWORD *)(v4 + 12) = 0;
    }
LABEL_41:
    *(unsigned char *)(v4 + 8) = 0;
    return this;
  }
  if (cf1 != @"toCharValue")
  {
    this = (ConstStringPtr)CFEqual(cf1, @"toCharValue");
    if (!this) {
      goto LABEL_41;
    }
  }
  if (*(unsigned char *)(v4 + 21)) {
    goto LABEL_41;
  }
  *(unsigned char *)(v4 + 21) = 1;
  this = (ConstStringPtr)TElement::CFStringGetUnicodeHexValue((TElement *)v4, theString);
  *(_DWORD *)(v4 + 16) = this;
  if (!this) {
    goto LABEL_41;
  }
  return this;
}

CFArrayRef XMLSplicedFontCreateFromData(char *buffer, int size)
{
  if (InitXMLParser(void)::once != -1) {
    dispatch_once(&InitXMLParser(void)::once, &__block_literal_global_5);
  }
  MemorCGFloat y = xmlReadMemory(buffer, size, "noname.xml", 0, 0);
  if (!Memory) {
    return 0;
  }
  CFNumberRef v5 = Memory;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[0] = v6;
  v11[1] = v6;
  TPosingFont::TPosingFont((TPosingFont *)v11);
  RootElement = xmlDocGetRootElement(v5);
  values = TPosingFont::Build((CFDictionaryRef *)v11, RootElement);
  CFArrayRef v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  xmlFreeDoc(v5);
  TPosingFont::~TPosingFont((TPosingFont *)v11);
  return v8;
}

void sub_1B536BF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  TPosingFont::~TPosingFont((TPosingFont *)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned short,TInlineBufferAllocator<unsigned short,2048ul>>::__destroy_vector::operator()[abi:fe180100](uint64_t a1)
{
  CFStringRef v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    uint64_t v3 = (void *)(a1 + 4120);
    if (a1 + 24 <= (unint64_t)v2)
    {
      BOOL v4 = v3 >= v2;
      BOOL v5 = v3 == v2;
    }
    else
    {
      BOOL v4 = 0;
      BOOL v5 = 0;
    }
    if (!v5 && v4)
    {
      if (*(void *)(a1 + 16) == *(void *)(a1 + 4120)) {
        void *v3 = v2;
      }
    }
    else
    {
      operator delete(v2);
    }
  }
}

const void **TCFRetained<__CFCharacterSet *>::~TCFRetained(const void **a1)
{
  CFStringRef v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

CFArrayRef std::__call_once_proxy[abi:fe180100]<std::tuple<TLanguagePreferedList::GetSystemPreferredLanguages(void)::$_0 &&>>()
{
  CFArrayRef result = CFLocaleCopyPreferredLanguages();
  _MergedGlobals_2 = (uint64_t)result;
  return result;
}

uint64_t TextCompare(unsigned __int8 *a1, unsigned __int8 *a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  if (a3 >= a4) {
    unsigned int v6 = a4;
  }
  else {
    unsigned int v6 = a3;
  }
  if (a3 < a4) {
    __int16 v7 = -1;
  }
  else {
    __int16 v7 = 1;
  }
  if (a3 == a4) {
    __int16 v8 = 0;
  }
  else {
    __int16 v8 = v7;
  }
  for (; v6; --v6)
  {
    int v14 = *a1++;
    int v13 = v14;
    int v16 = *a2++;
    int v15 = v16;
    if (v13 != v16)
    {
      unsigned __int8 v17 = v13;
      unsigned __int8 v18 = v15;
      if (!a6)
      {
        if ((char)v13 <= -40) {
          unsigned __int8 v17 = stripTab[v13 - 128];
        }
        if ((char)v15 <= -40) {
          unsigned __int8 v18 = stripTab[v15 - 128];
        }
      }
      if (!a5)
      {
        if ((v17 - 96) <= 0x6Fu) {
          unsigned __int8 v17 = upperTab[v17 - 96];
        }
        if ((v18 - 96) <= 0x6Fu) {
          unsigned __int8 v18 = upperTab[v18 - 96];
        }
      }
      unsigned int SortWord = GetSortWord(v17);
      unsigned int v20 = GetSortWord(v18);
      if (SortWord > v20) {
        return 1;
      }
      if (SortWord < v20) {
        return -1;
      }
    }
  }
  return v8;
}

uint64_t GetSortWord(unsigned int a1)
{
  if (a1 > 0x5F)
  {
    if (a1 == 96) {
      return 24832;
    }
    if (a1 <= 0x7A) {
      return (unsigned __int16)(((_WORD)a1 << 8) - 8064);
    }
    if ((a1 & 0x80) != 0 && a1 <= 0xD8) {
      return (unsigned __int16)cmpTab[a1 - 128];
    }
  }
  return (unsigned __int16)((_WORD)a1 << 8);
}

int8x8_t GetScalerTransformInfo(uint64_t a1, memoryContext *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 24);
  if (*(unsigned char *)(v5 + 489))
  {
    *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v51[12] = v6;
    long long v50 = v6;
    *(_OWORD *)unsigned int v51 = v6;
    *(_OWORD *)CFRange v49 = v6;
    uint64_t v7 = *(void *)(v5 + 80);
    if (v5 + 96 != v7)
    {
      long long v8 = *(_OWORD *)(v5 + 96);
      long long v9 = *(_OWORD *)(v5 + 112);
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(v5 + 128);
      *(_OWORD *)uint64_t v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      uint64_t v5 = *(void *)(a1 + 24);
    }
    if (sbit_FontMatch(a2, a1, (uint64_t)v49, *(unsigned __int8 *)(v5 + 484), 1)) {
      *(_WORD *)(*(void *)(a1 + 24) + 489) = 514;
    }
    *(void *)(a3 + 32) = *(void *)&v51[8];
    int8x8_t result = (int8x8_t)v49[0];
    long long v11 = v50;
    *(_OWORD *)a3 = *(_OWORD *)v49;
    *(_OWORD *)(a3 + 16) = v11;
  }
  else
  {
    int v12 = *(memoryContext **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    __int16 v14 = *(_WORD *)(v13 + 130);
    unsigned int v15 = *(unsigned __int8 *)(v5 + 484);
    v49[0] = (void *)0xAAAAAAAAAAAAAAAALL;
    if (!*(unsigned char *)(v13 + 159)) {
      goto LABEL_34;
    }
    int v16 = ScalerNewScratch(v12, *(_DWORD *)(v13 + 20) + 2408, 1);
    *(void *)(a1 + 40) = v16;
    v16[6] = (size_t)(v16 + 301);
    unsigned __int8 v17 = ScalerNewScratch(*(memoryContext **)a1, *(_DWORD *)(v13 + 24) + 136, 0);
    v17[1] = (size_t)(v17 + 17);
    v16[23] = 0;
    uint64_t v18 = *(int *)(v13 + 28);
    uint64_t v19 = *(int *)(v13 + 32);
    uint64_t v20 = v16[6];
    uint64_t v21 = (uint64_t)v17 + 4 * v19 + 136;
    v16[24] = (size_t)(v17 + 17);
    v16[25] = v21;
    uint64_t v22 = v21 + 4 * v19;
    size_t v23 = v22 + 2 * v18;
    v16[26] = v22;
    v16[27] = v23;
    size_t v24 = v23 + 2 * v18;
    v16[28] = v24;
    v16[29] = v24 + v19;
    *((_DWORD *)v16 + 73) = v18;
    *((_DWORD *)v16 + 74) = v19;
    uint64_t v25 = 1358921729;
    uint64_t v26 = v20 + 4 * v19;
    uint64_t v27 = v26 + 4 * v19;
    uint64_t v28 = v27 + 2 * v19;
    if (v20)
    {
      uint64_t v25 = v28 + 2 * v19;
    }
    else
    {
      uint64_t v20 = 1358921729;
      uint64_t v26 = 1358921729;
      uint64_t v27 = 1358921729;
      uint64_t v28 = 1358921729;
    }
    v16[30] = v20;
    v16[31] = v26;
    _OWORD v16[32] = v27;
    v16[33] = v28;
    v16[38] = v25;
    CreateGlyphElement(a1, *(_DWORD *)(v13 + 84), v15, *(unsigned char *)(*(void *)(a1 + 24) + 490) == 0);
    if (*(unsigned char *)(*(void *)(a1 + 24) + 488))
    {
      int v29 = (unsigned __int8 *)(v13 + 92);
      uint64_t v30 = (unsigned __int8 *)(v13 + 93);
      unint64_t v31 = (unsigned __int8 *)(v13 + 94);
      uint64_t v32 = (unsigned __int8 *)(v13 + 95);
    }
    else
    {
      int v29 = (unsigned __int8 *)(v13 + 88);
      uint64_t v30 = (unsigned __int8 *)(v13 + 89);
      unint64_t v31 = (unsigned __int8 *)(v13 + 90);
      uint64_t v32 = (unsigned __int8 *)(v13 + 91);
    }
    uint64_t v33 = *v29;
    if ((int)v19 > (int)v33
      && (uint64_t v34 = *v30, (int)v19 > (int)v34)
      && (uint64_t v35 = *v31, (int)v19 > (int)v35)
      && (uint64_t v36 = *v32, (int)v19 > (int)v36))
    {
      size_t v37 = v16[24];
      *(_DWORD *)a3 = *(_DWORD *)(v37 + 4 * v33) << 10;
      size_t v38 = v16[25];
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(v38 + 4 * v33) << 10;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(v37 + 4 * v34) << 10;
      *(_DWORD *)(a3 + 12) = *(_DWORD *)(v38 + 4 * v34) << 10;
      *(_DWORD *)(a3 + 16) = (*(_DWORD *)(v37 + 4 * v35) - *(_DWORD *)(v37 + 4 * v36)) << 10;
      *(_DWORD *)(a3 + 20) = (*(_DWORD *)(v38 + 4 * v35) - *(_DWORD *)(v38 + 4 * v36)) << 10;
      *(_DWORD *)(a3 + 24) = *(_DWORD *)(v37 + 4 * v36) << 10;
      *(_DWORD *)(a3 + 28) = *(_DWORD *)(v38 + 4 * v36) << 10;
      ScalerDisposeBlock(*(memoryContext **)a1, (char *)v16, -1);
      ScalerDisposeBlock(*(memoryContext **)a1, (char *)v17, -1);
      *(void *)(a3 + 32) = 0;
    }
    else
    {
LABEL_34:
      if (*(unsigned char *)(v5 + 488))
      {
        ScalerGetFontTable(v12, 1986553185, 0, v49, 1, 36);
        int v39 = (unsigned __int16 *)v49[0];
        if (v49[0])
        {
          double v40 = (double)v14 * 0.0000152587891;
          *(_DWORD *)a3 = vcvtd_n_s64_f64((double)((int)bswap32(*((unsigned __int16 *)v49[0] + 2)) >> 16) * 0.0000152587891 / v40, 0x10uLL);
          *(_DWORD *)(a3 + 8) = vcvtd_n_s64_f64((double)(((int)bswap32(v39[3]) >> 16) - ((int)bswap32(v39[4]) >> 16))* 0.0000152587891/ v40, 0x10uLL);
          unsigned int v41 = vcvtd_n_s64_f64((double)((int)bswap32(v39[4]) >> 16) * 0.0000152587891 / v40, 0x10uLL);
        }
        else
        {
          unsigned int v41 = 0;
          *(_DWORD *)a3 = 0x8000;
          *(_DWORD *)(a3 + 8) = -32768;
          *(_OWORD *)(a3 + 16) = xmmword_1B5402A40;
        }
        *(_DWORD *)(a3 + 32) = v41;
        *(_DWORD *)(a3 + 36) = 0;
        uint64_t v44 = (_DWORD *)(a3 + 4);
        *(_DWORD *)(a3 + 12) = 0;
      }
      else
      {
        ScalerGetFontTable(v12, 1751672161, 0, v49, 1, 36);
        int v39 = (unsigned __int16 *)v49[0];
        if (v49[0])
        {
          double v42 = (double)v14 * 0.0000152587891;
          *(_DWORD *)(a3 + 4) = vcvtd_n_s64_f64((double)((int)bswap32(*((unsigned __int16 *)v49[0] + 2)) >> 16)* 0.0000152587891/ v42, 0x10uLL);
          *(_DWORD *)(a3 + 12) = vcvtd_n_s64_f64((double)(((int)bswap32(v39[3]) >> 16) - ((int)bswap32(v39[4]) >> 16))* 0.0000152587891/ v42, 0x10uLL);
          unsigned int v43 = vcvtd_n_s64_f64((double)((int)bswap32(v39[4]) >> 16) * 0.0000152587891 / v42, 0x10uLL);
        }
        else
        {
          unsigned int v43 = 0;
          *(_DWORD *)(a3 + 4) = 0x8000;
          *(_OWORD *)(a3 + 12) = xmmword_1B5402A50;
          *(_DWORD *)(a3 + 28) = 0;
        }
        *(_DWORD *)(a3 + 32) = 0;
        *(_DWORD *)(a3 + 36) = v43;
        uint64_t v44 = (_DWORD *)a3;
        *(_DWORD *)(a3 + 8) = 0;
      }
      *uint64_t v44 = 0;
      if (v39)
      {
        double v45 = (double)v14 * 0.0000152587891;
        *(_DWORD *)(a3 + 20) = vcvtd_n_s64_f64((double)((int)bswap32(v39[9]) >> 16) * 0.0000152587891 / v45, 0x10uLL);
        *(_DWORD *)(a3 + 16) = vcvtd_n_s64_f64((double)((int)bswap32(v39[10]) >> 16) * 0.0000152587891 / v45, 0x10uLL);
        *(_DWORD *)(a3 + 28) = 0;
        *(_DWORD *)(a3 + 24) = vcvtd_n_s64_f64((double)((int)bswap32(v39[11]) >> 16) * 0.0000152587891 / v45, 0x10uLL);
        ScalerReleaseFontTable(v12, v39);
      }
      int v46 = M3x3Flags((_DWORD *)(v5 + 96));
      M3x3Mul((int *)(v5 + 96), v46, (int32x2_t *)a3, (const int *)4);
      if (v15)
      {
        v47.i64[0] = 0x800000008000;
        v47.i64[1] = 0x800000008000;
        int8x16_t v48 = (int8x16_t)vaddq_s32(*(int32x4_t *)a3, v47);
        v47.i64[0] = 0xFFFF0000FFFF0000;
        v47.i64[1] = 0xFFFF0000FFFF0000;
        *(int8x16_t *)a3 = vandq_s8(v48, (int8x16_t)v47);
        int8x8_t result = vand_s8((int8x8_t)vadd_s32(*(int32x2_t *)(a3 + 32), (int32x2_t)0x800000008000), (int8x8_t)0xFFFF0000FFFF0000);
        *(int8x8_t *)(a3 + 32) = result;
      }
    }
  }
  return result;
}

void *CreateScalerTransformBlock(void *a1, memoryContext *a2, char a3, int a4, long long *a5, int *a6, int *a7)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  unsigned int v38 = 0;
  *(void *)&long long v14 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v37[29] = v14;
  v37[30] = v14;
  v37[27] = v14;
  v37[28] = v14;
  v37[25] = v14;
  v37[26] = v14;
  v37[23] = v14;
  v37[24] = v14;
  v37[21] = v14;
  v37[22] = v14;
  v37[19] = v14;
  v37[20] = v14;
  v37[17] = v14;
  v37[18] = v14;
  v37[15] = v14;
  v37[16] = v14;
  v37[13] = v14;
  v37[14] = v14;
  v37[11] = v14;
  v37[12] = v14;
  v37[9] = v14;
  v37[10] = v14;
  v37[7] = v14;
  v37[8] = v14;
  v37[5] = v14;
  v37[6] = v14;
  v37[3] = v14;
  v37[4] = v14;
  v37[1] = v14;
  v37[2] = v14;
  v37[0] = v14;
  LODWORD(v37[13]) = 0;
  uint64_t v15 = a1[1];
  if (*(unsigned char *)(v15 + 153) == 1)
  {
    unsigned int v16 = sbit_CalculateTransformSpaceNeeded(a2, *(_DWORD *)(v15 + 164));
    uint64_t v15 = a1[1];
    int v17 = 96;
  }
  else
  {
    int v17 = 0;
    unsigned int v16 = 0;
  }
  BYTE11(v37[30]) = 0;
  LODWORD(v37[0]) = 2019979885;
  DWORD2(v37[0]) = 496;
  DWORD2(v37[1]) = 4 * *(unsigned __int16 *)(v15 + 150) + 496;
  DWORD2(v37[2]) = DWORD2(v37[1]) + *(_DWORD *)(v15 + 12);
  DWORD2(v37[3]) = DWORD2(v37[2]) + *(_DWORD *)(v15 + 16);
  HIDWORD(v37[3]) = v16;
  BYTE4(v37[30]) = a3 & 1;
  BYTE5(v37[30]) = (a3 & 0x10) != 0;
  WORD3(v37[30]) = 0;
  BYTE8(v37[30]) = (a3 & 8) != 0;
  *(_WORD *)((char *)&v37[30] + 9) = 0;
  HIDWORD(v37[30]) = 0;
  double v18 = sqrt((double)*a7 * (double)*a7 + (double)a7[1] * (double)a7[1]);
  DWORD2(v37[4]) = DWORD2(v37[3]) + v16;
  DWORD2(v37[5]) = a4;
  HIDWORD(v37[5]) = v18;
  v37[6] = identityMatrix;
  v37[7] = unk_1B54013C8;
  LODWORD(v37[8]) = 0x40000000;
  int v19 = (int)((double)a4 * (double)a6[1] / 4718592.0);
  LODWORD(v37[6]) = (int)((double)a4 * (double)*a6 / 4718592.0);
  LODWORD(v37[7]) = v19;
  long long v39 = v37[6];
  long long v40 = v37[7];
  int v41 = 0x40000000;
  if (M3x3Concat(a5, -1, &v37[6], -1))
  {
    v37[6] = v39;
    v37[7] = v40;
    LODWORD(v37[8]) = v41;
  }
  HIDWORD(v37[25]) = 0;
  *((void *)&v37[13] + 1) = 0;
  DWORD1(v37[13]) = 0;
  int v20 = v37[7];
  int v21 = SLODWORD(v37[7]) >> 16;
  if (SLODWORD(v37[7]) > 16646144) {
    int v21 = 255;
  }
  LODWORD(v37[30]) = v21;
  if (!BYTE4(v37[30]))
  {
    uint64_t v26 = a1[1];
    if (*(_WORD *)(v26 + 130) != 1024)
    {
      BYTE4(v37[30]) = 0;
      goto LABEL_22;
    }
    int v27 = *(__int16 *)(v26 + 140);
    BYTE4(v37[30]) = v27 > 18;
    if (v27 < 19) {
      goto LABEL_22;
    }
  }
  if (M3x3Flags(&v37[6]) == 6
    || v20 * (uint64_t)SLODWORD(v37[6]) == SHIDWORD(v37[6]) * (uint64_t)SDWORD1(v37[6])
    || DecomposeMapping((uint64_t)&v37[6], (*(unsigned __int8 *)(a1[1] + 128) >> 3) & 1))
  {
    goto LABEL_16;
  }
  int v22 = DWORD1(v37[8]);
  uint64_t v23 = a1[1];
  int v24 = *(__int16 *)(v23 + 140);
  int v25 = v24 << 16;
  if (v24 >= 9) {
    int v25 = 589824;
  }
  if (SDWORD1(v37[8]) < v25 || SDWORD1(v37[9]) < v25)
  {
LABEL_16:
    HIDWORD(v37[25]) = 66047;
LABEL_17:
    WORD2(v37[30]) = 0;
    BYTE11(v37[30]) = 1;
LABEL_22:
    DWORD2(v37[3]) = 496;
    HIDWORD(v37[3]) = v16;
    unsigned int v28 = v16 + 496;
    DWORD2(v37[4]) = v16 + 496;
    if (v16 >= 0xFFFFFE10)
    {
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 5;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
    unsigned int v38 = v28 + v17;
    if (__CFADD__(v28, v17))
    {
      uint64_t v36 = __cxa_allocate_exception(2uLL);
      _WORD *v36 = 5;
      __cxa_throw(v36, MEMORY[0x1E4FBA3C8], 0);
    }
    int v29 = ScalerNewBlock(a2, v28 + v17, 3, 0, 0, 1, 0);
    DWORD2(v37[0]) = 1358921729;
    DWORD2(v37[1]) = 1358921729;
    DWORD2(v37[2]) = 1358921729;
    goto LABEL_25;
  }
  if (DWORD1(v37[8]) != DWORD1(v37[9])) {
    LODWORD(v37[30]) |= 0x1000u;
  }
  if (HIDWORD(v37[6]) | DWORD1(v37[6])) {
    LODWORD(v37[30]) |= 0x1400u;
  }
  HIDWORD(v37[20]) = *(unsigned __int8 *)(v23 + 160);
  DWORD2(v37[20]) = (DWORD2(v37[5]) + 0x8000) >> 16;
  DWORD1(v37[20]) = *(_DWORD *)(v23 + 72);
  BYTE8(v37[29]) = *(unsigned char *)(a1[2] + 56);
  if (SDWORD1(v37[8]) <= SDWORD1(v37[9])) {
    int v22 = DWORD1(v37[9]);
  }
  LODWORD(v37[18]) = v22;
  SetGlobalGSDefaults((uint64_t)&v37[13]);
  unsigned int v38 = 496;
  AddToSizeAndCheck(&v38, 4 * *(unsigned __int16 *)(a1[1] + 150));
  AddToSizeAndCheck(&v38, *(_DWORD *)(a1[1] + 12));
  AddToSizeAndCheck(&v38, *(_DWORD *)(a1[1] + 16));
  AddToSizeAndCheck(&v38, v16);
  AddToSizeAndCheck(&v38, v17);
  int v29 = ScalerNewBlock(a2, v38, 3, 0, 1, 1, 0);
  if (!v29) {
    goto LABEL_17;
  }
  if (!BYTE4(v37[30])) {
    goto LABEL_22;
  }
  if ((a3 & 0x40) != 0) {
    BYTE11(v37[30]) |= 2u;
  }
LABEL_25:
  memcpy(v29, v37, 0x1F0uLL);
  a1[3] = v29;
  v29[2] = (char *)v29 + *((unsigned int *)v29 + 2);
  _OWORD v29[4] = (char *)v29 + *((unsigned int *)v29 + 6);
  v29[6] = (char *)v29 + *((unsigned int *)v29 + 10);
  v29[8] = (char *)v29 + *((unsigned int *)v29 + 14);
  uint64_t v30 = (char *)v29 + *((unsigned int *)v29 + 18);
  v29[10] = v30;
  unint64_t v31 = (unsigned __int8 *)a1[1];
  if (v31[153] != 1) {
    return v29;
  }
  if ((a3 & 4) == 0 && !*((unsigned char *)v29 + 484))
  {
    if (v31[152]) {
      return v29;
    }
    goto LABEL_31;
  }
  if (!*((unsigned char *)v29 + 484))
  {
LABEL_31:
    if (M3x3Flags((_DWORD *)v29 + 24) != 6
      && *((int *)v29 + 28) * (uint64_t)*((int *)v29 + 24) != *((int *)v29 + 27) * (uint64_t)*((int *)v29 + 25))
    {
      DecomposeMapping((uint64_t)(v29 + 12), (v31[128] >> 3) & 1);
    }
  }
  if (v29 + 12 != (void *)v30)
  {
    long long v32 = *((_OWORD *)v29 + 6);
    long long v33 = *((_OWORD *)v29 + 7);
    *((_DWORD *)v30 + 8) = *((_DWORD *)v29 + 32);
    *(_OWORD *)uint64_t v30 = v32;
    *((_OWORD *)v30 + 1) = v33;
  }
  if (sbit_FontMatch(a2, (uint64_t)a1, 0, 0, 1)) {
    *(_WORD *)((char *)v29 + 489) = 514;
  }
  return v29;
}

_DWORD *AddToSizeAndCheck(_DWORD *result, int a2)
{
  BOOL v2 = __CFADD__(*result, a2);
  *result += a2;
  if (v2)
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 5;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  return result;
}

void CleanUpTransformBlock(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1[1];
    if (v1)
    {
      if (*(_DWORD *)v1 == 2019979885)
      {
        BOOL v2 = *(void **)(v1 + 216);
        if (v2)
        {
          free(v2);
          *(void *)(v1 + 216) = 0;
          *(_DWORD *)(v1 + 212) = 0;
        }
      }
    }
  }
}

void TXMLSplicedFont::CreateSpliceFonts(TXMLSplicedFont *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v12 = v3;
  long long v13 = v3;
  (*(void (**)(long long *__return_ptr))(*(void *)this + 32))(&v12);
  if (*((void *)&v12 + 1))
  {
    uint64_t v4 = *(void *)(*((void *)&v12 + 1) + 8);
    if (v4)
    {
      if ((uint64_t)(*((void *)&v13 + 1) - v13) >= 1)
      {
        CFArrayRef v5 = XMLSplicedFontCreateFromData((char *)(v4 + v13), DWORD2(v13) - (int)v13);
        CFArrayRef v6 = v5;
        if (!v5)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = &unk_1F0DD4440;
          exception[2] = 4;
        }
        CFIndex Count = CFArrayGetCount(v5);
        if (Count >= 1)
        {
          for (CFIndex i = 0; i != Count; ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v6, i);
            if (ValueAtIndex)
            {
              CFTypeID v10 = CFGetTypeID(ValueAtIndex);
              if (v10 == CFDictionaryGetTypeID()) {
                operator new();
              }
            }
          }
        }
        CFRelease(v6);
      }
    }
  }
  TDataReference::~TDataReference((TDataReference *)&v12);
}

void sub_1B536CF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  TDataReference::~TDataReference((TDataReference *)&a9);
  long long v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void TXMLSplicedFont::~TXMLSplicedFont(TXMLSplicedFont *this)
{
  *(void *)this = &unk_1F0E028E8;
  *((void *)this + 2) = &unk_1F0E02AD0;
  TCFDictionary::~TCFDictionary((const void **)this + 9);
  TFileDataSurrogate::~TFileDataSurrogate((const TFileFragmentReference **)this + 6);
  TFont::~TFont(this);
}

{
  uint64_t vars8;

  TXMLSplicedFont::~TXMLSplicedFont(this);
  JUMPOUT(0x1BA9994D0);
}

void non-virtual thunk to'TXMLSplicedFont::~TXMLSplicedFont(TXMLSplicedFont *this)
{
}

{
  uint64_t vars8;

  TXMLSplicedFont::~TXMLSplicedFont((TXMLSplicedFont *)((char *)this - 16));
  JUMPOUT(0x1BA9994D0);
}

uint64_t TXMLSplicedFont::GetKind(TXMLSplicedFont *this)
{
  return 32;
}

uint64_t TXMLSplicedFont::GetFontRef(TXMLSplicedFont *this)
{
  return (uint64_t)this + 48;
}

uint64_t TXMLSplicedFont::GetUnitsPerEm(TXMLSplicedFont *this)
{
  CFDictionaryRef v1 = (const __CFDictionary *)*((void *)this + 9);
  if (v1
    && (CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v1, @"FontMetrics")) != 0
    && (CFDictionaryRef v3 = Value, CFDictionaryGetCount(Value) >= 1)
    && (CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(v3, @"unitsPerEm")) != 0)
  {
    LOWORD(result) = CFStringGetIntValue(v4);
  }
  else
  {
    LOWORD(result) = 1;
  }
  return (unsigned __int16)result;
}

void TXMLSplicedFont::GetPostscriptName(TXMLSplicedFont *this@<X0>, TFontNameString *a2@<X8>)
{
  CFDictionaryRef v2 = (const __CFDictionary *)*((void *)this + 9);
  if (!v2 || (CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v2, @"name")) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DD4440;
    exception[2] = 4;
  }
  TFontNameString::TFontNameString(a2, 6, Value, @"en", 0);
}

void TXMLSplicedFont::GetName(TXMLSplicedFont *this@<X0>, int a2@<W1>, unsigned int a3@<W2>, int a4@<W4>, uint64_t a5@<X8>)
{
  if (a2 != 6)
  {
    CFDictionaryRef v7 = (const __CFDictionary *)*((void *)this + 9);
    if (!v7
      || (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v7, @"FontNames")) == 0
      || (CFArrayRef v12 = Value, (Count = CFArrayGetCount(Value)) == 0))
    {
LABEL_28:
      *(void *)(a5 + 8) = 0;
      *(void *)(a5 + 16) = 0;
      *(unsigned char *)(a5 + 24) = 0;
      *(void *)(a5 + 32) = &unk_1F0DD4218;
      *(void *)(a5 + 40) = 0;
      *(void *)(a5 + 48) = 0;
      *(void *)(a5 + 56) = 0;
      *(void *)a5 = &unk_1F0DD4360;
      *(void *)(a5 + 66) = 0;
      *(void *)(a5 + 80) = 0;
      *(void *)(a5 + 88) = 0;
      return;
    }
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFIndex v14 = Count - 1;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v12, v14);
      if (!ValueAtIndex) {
        goto LABEL_25;
      }
      CFDictionaryRef v16 = ValueAtIndex;
      CFStringRef v17 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"type");
      if (!v17 || CFStringGetIntValue(v17) != a2) {
        goto LABEL_25;
      }
      if ((a3 > 3 || a3 == 2) && a3 != 0xFFFF) {
        goto LABEL_25;
      }
      if (a4 == 0xFFFF)
      {
        CFStringRef v18 = 0;
      }
      else
      {
        CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(v16, @"language");
        if (v18)
        {
          CFTypeRef cf1 = CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator, v18);
          CFLocaleIdentifier CanonicalLocaleIdentifierFromScriptManagerCodes = CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator, a4, -128);
          CFLocaleIdentifier v23 = CanonicalLocaleIdentifierFromScriptManagerCodes;
          if (cf1 == CanonicalLocaleIdentifierFromScriptManagerCodes)
          {
            TCFString::~TCFString((const void **)&v23);
            TCFString::~TCFString(&cf1);
          }
          else
          {
            if (!CanonicalLocaleIdentifierFromScriptManagerCodes || !cf1)
            {
              TCFString::~TCFString((const void **)&v23);
              TCFString::~TCFString(&cf1);
              goto LABEL_25;
            }
            int v20 = CFEqual(cf1, CanonicalLocaleIdentifierFromScriptManagerCodes);
            TCFString::~TCFString((const void **)&v23);
            TCFString::~TCFString(&cf1);
            if (!v20) {
              goto LABEL_25;
            }
          }
        }
      }
      CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(v16, @"string");
      if (v21)
      {
        TFontNameString::TFontNameString((TFontNameString *)a5, a2, v21, v18, 0x8000100u);
        return;
      }
LABEL_25:
      if (--v14 == -1) {
        goto LABEL_28;
      }
    }
  }
  CFArrayRef v6 = *(void (**)(void))(*(void *)this + 80);
  v6();
}

void sub_1B536D450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  CFArrayRef v6 = va_arg(va1, const void *);
  TCFString::~TCFString((const void **)va);
  TCFString::~TCFString((const void **)va1);
  _Unwind_Resume(a1);
}

void TXMLSplicedFont::GetNames(const __CFDictionary **this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  uint64_t v33 = a2 + 16;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  (*((void (**)(char **__return_ptr))*this + 10))(&v34);
  unint64_t v5 = *(void *)(a2 + 8);
  unint64_t v4 = *(void *)(a2 + 16);
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a2) >> 5);
    if (v7 + 1 > 0x2AAAAAAAAAAAAAALL) {
      std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)a2) >> 5);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= v7 + 1) {
      uint64_t v9 = v7 + 1;
    }
    if (v8 >= 0x155555555555555) {
      unint64_t v10 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    uint64_t v43 = v33;
    if (v10) {
      long long v11 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TFontNameString>>(v33, v10);
    }
    else {
      long long v11 = 0;
    }
    long long v39 = v11;
    long long v40 = (TFontNameString *)&v11[96 * v7];
    int v41 = v40;
    uint64_t v42 = &v11[96 * v10];
    TFontNameString::TFontNameString(v40, (const TFontNameString *)&v34);
    int v41 = (TFontNameString *)((char *)v41 + 96);
    std::vector<TFontNameString>::__swap_out_circular_buffer((uint64_t *)a2, &v39);
    unint64_t v6 = *(void *)(a2 + 8);
    std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)&v39);
  }
  else
  {
    TFontNameString::TFontNameString(*(TFontNameString **)(a2 + 8), (const TFontNameString *)&v34);
    unint64_t v6 = v5 + 96;
    *(void *)(a2 + 8) = v6;
  }
  *(void *)(a2 + 8) = v6;
  TFontNameString::~TFontNameString((TFontNameString *)&v34);
  CFDictionaryRef v12 = this[9];
  if (v12)
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v12, @"FontNames");
    CFArrayRef v14 = Value;
    if (Value)
    {
      CFIndex Count = CFArrayGetCount(Value);
      if (Count)
      {
        CFIndex v16 = Count - 1;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, v16);
          CFDictionaryRef v18 = ValueAtIndex;
          if (ValueAtIndex)
          {
            CFStringRef v19 = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"type");
            CFStringRef v20 = (const __CFString *)CFDictionaryGetValue(v18, @"language");
            CFStringRef v21 = (const __CFString *)CFDictionaryGetValue(v18, @"string");
            if (v19)
            {
              CFStringRef v22 = v21;
              if (v21)
              {
                IntCFArrayRef Value = CFStringGetIntValue(v19);
                __int16 v24 = IntValue;
                unint64_t v26 = *(void *)(a2 + 8);
                unint64_t v25 = *(void *)(a2 + 16);
                if (v26 >= v25)
                {
                  unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(void *)a2) >> 5);
                  unint64_t v29 = v28 + 1;
                  if (v28 + 1 > 0x2AAAAAAAAAAAAAALL) {
                    std::vector<char,TInlineBufferAllocator<char,1024ul>>::__throw_length_error[abi:fe180100]();
                  }
                  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *(void *)a2) >> 5);
                  if (2 * v30 > v29) {
                    unint64_t v29 = 2 * v30;
                  }
                  if (v30 >= 0x155555555555555) {
                    unint64_t v31 = 0x2AAAAAAAAAAAAAALL;
                  }
                  else {
                    unint64_t v31 = v29;
                  }
                  uint64_t v38 = v33;
                  if (v31) {
                    long long v32 = (char *)std::__allocate_at_least[abi:fe180100]<std::allocator<TFontNameString>>(v33, v31);
                  }
                  else {
                    long long v32 = 0;
                  }
                  uint64_t v34 = v32;
                  uint64_t v35 = (TFontNameString *)&v32[96 * v28];
                  uint64_t v36 = v35;
                  size_t v37 = &v32[96 * v31];
                  TFontNameString::TFontNameString(v35, v24, v22, v20, 0x8000100u);
                  uint64_t v36 = (TFontNameString *)((char *)v36 + 96);
                  std::vector<TFontNameString>::__swap_out_circular_buffer((uint64_t *)a2, &v34);
                  unint64_t v27 = *(void *)(a2 + 8);
                  std::__split_buffer<TFontNameString>::~__split_buffer((uint64_t)&v34);
                }
                else
                {
                  TFontNameString::TFontNameString(*(TFontNameString **)(a2 + 8), IntValue, v22, v20, 0x8000100u);
                  unint64_t v27 = v26 + 96;
                  *(void *)(a2 + 8) = v27;
                }
                *(void *)(a2 + 8) = v27;
              }
            }
          }
          --v16;
        }
        while (v16 != -1);
      }
    }
  }
}

void sub_1B536D78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::vector<TFontNameString>::__destroy_vector::operator()[abi:fe180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t TXMLSplicedFont::GetSomeNames(TXMLSplicedFont *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 104))();
}

const __CFDictionary *TXMLSplicedFont::GetAscent(TXMLSplicedFont *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 9);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"FontMetrics");
    if (result)
    {
      CFDictionaryRef v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v2, @"ascender");
        if (result) {
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
        }
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetDescent(TXMLSplicedFont *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 9);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"FontMetrics");
    if (result)
    {
      CFDictionaryRef v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v2, @"descender");
        if (result) {
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
        }
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetLineGap(TXMLSplicedFont *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 9);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"FontMetrics");
    if (result)
    {
      CFDictionaryRef v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v2, @"lineGap");
        if (result) {
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
        }
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetMaxAdvance(TXMLSplicedFont *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 9);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"FontMetrics");
    if (result)
    {
      CFDictionaryRef v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v2, @"advanceMax");
        if (result) {
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
        }
      }
    }
  }
  return result;
}

uint64_t TXMLSplicedFont::GetAvgAdvance(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetXHeight(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetCapHeight(TXMLSplicedFont *this)
{
  return 0;
}

const __CFDictionary *TXMLSplicedFont::GetMinLeftSideBearing(TXMLSplicedFont *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 9);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"FontMetrics");
    if (result)
    {
      CFDictionaryRef v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v2, @"sideBearingMin");
        if (result) {
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
        }
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetMinRightSideBearing(TXMLSplicedFont *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 9);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"FontMetrics");
    if (result)
    {
      CFDictionaryRef v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v2, @"otherSideBearingMin");
        if (result) {
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
        }
      }
    }
  }
  return result;
}

uint64_t TXMLSplicedFont::GetStemH(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetStemV(TXMLSplicedFont *this)
{
  return 0;
}

void TXMLSplicedFont::GetCaretInfo(TXMLSplicedFont *this, __int16 *a2, __int16 *a3, unsigned __int16 *a4)
{
  *a4 = 0;
  *a3 = 0;
  *a2 = 0;
  CFDictionaryRef v4 = (const __CFDictionary *)*((void *)this + 9);
  if (v4)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v4, @"FontMetrics");
    if (Value)
    {
      CFDictionaryRef v9 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        CFStringRef v10 = (const __CFString *)CFDictionaryGetValue(v9, @"caretSlopeNumeratorv");
        if (v10) {
          *a2 = (int)CFStringGetDoubleValue(v10);
        }
        CFStringRef v11 = (const __CFString *)CFDictionaryGetValue(v9, @"caretSlopeDenominator");
        if (v11) {
          *a3 = (int)CFStringGetDoubleValue(v11);
        }
        CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(v9, @"caretOffset");
        if (v12) {
          *a4 = (int)CFStringGetDoubleValue(v12);
        }
      }
    }
  }
}

void TXMLSplicedFont::GetBounds(TXMLSplicedFont *this, double *a2, double *a3, double *a4, double *a5)
{
  *a5 = 0.0;
  *a4 = 0.0;
  *a3 = 0.0;
  *a2 = 0.0;
  CFDictionaryRef v5 = (const __CFDictionary *)*((void *)this + 9);
  if (v5)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v5, @"FontMetrics");
    if (Value)
    {
      CFDictionaryRef v11 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        CFStringRef v12 = (const __CFString *)CFDictionaryGetValue(v11, @"xMin");
        if (v12)
        {
          DoubleCFDictionaryRef Value = CFStringGetDoubleValue(v12);
          CFStringRef v14 = (const __CFString *)CFDictionaryGetValue(v11, @"yMin");
          if (v14)
          {
            double v15 = CFStringGetDoubleValue(v14);
            CFStringRef v16 = (const __CFString *)CFDictionaryGetValue(v11, @"xMax");
            if (v16)
            {
              double v17 = CFStringGetDoubleValue(v16);
              CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(v11, @"yMax");
              if (v18)
              {
                double v19 = CFStringGetDoubleValue(v18);
                *a2 = DoubleValue;
                *a3 = v15;
                *a4 = v17 - DoubleValue;
                *a5 = v19 - v15;
              }
            }
          }
        }
      }
    }
  }
}

double TXMLSplicedFont::GetItalicAngle(TXMLSplicedFont *this)
{
  CFDictionaryRef v1 = (const __CFDictionary *)*((void *)this + 9);
  if (!v1) {
    return 0.0;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v1, @"FontMetrics");
  if (!Value) {
    return 0.0;
  }
  CFDictionaryRef v3 = Value;
  if (CFDictionaryGetCount(Value) < 1) {
    return 0.0;
  }
  CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(v3, @"italicAngle");
  if (!v4) {
    return 0.0;
  }
  return CFStringGetDoubleValue(v4);
}

const __CFDictionary *TXMLSplicedFont::GetUnderlinePosition(TXMLSplicedFont *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 9);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"FontMetrics");
    if (result)
    {
      CFDictionaryRef v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v2, @"underlinePosition");
        if (result) {
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
        }
      }
    }
  }
  return result;
}

const __CFDictionary *TXMLSplicedFont::GetUnderlineThickness(TXMLSplicedFont *this)
{
  CFDictionaryRef result = (const __CFDictionary *)*((void *)this + 9);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, @"FontMetrics");
    if (result)
    {
      CFDictionaryRef v2 = result;
      if (CFDictionaryGetCount(result) < 1)
      {
        return 0;
      }
      else
      {
        CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(v2, @"underlineThickness");
        if (result) {
          return (const __CFDictionary *)(int)CFStringGetDoubleValue((CFStringRef)result);
        }
      }
    }
  }
  return result;
}

uint64_t TXMLSplicedFont::IsMonospaced(TXMLSplicedFont *this)
{
  return 0;
}

BOOL TXMLSplicedFont::IsItalic(TXMLSplicedFont *this)
{
  return (*(double (**)(TXMLSplicedFont *))(*(void *)this + 288))(this) != 0.0;
}

void TXMLSplicedFont::GetHorizontalMetrics(TXMLSplicedFont *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, int *a10, BOOL *a11, BOOL *a12, double *a13, int *a14, int *a15, double *a16, double *a17, double *a18, double *a19, __int16 *a20,__int16 *a21)
{
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a8 = 0;
  *a7 = 0;
  *a9 = 0;
  *a10 = 0;
  *a15 = 0;
  *a14 = 0;
  *a11 = 0;
  *a12 = 0;
  *a13 = 0.0;
  *a20 = 0;
  *a21 = 0;
  *a19 = 0.0;
  *a18 = 0.0;
  *a17 = 0.0;
  *a16 = 0.0;
  CFDictionaryRef v21 = (const __CFDictionary *)*((void *)this + 9);
  if (v21)
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v21, @"FontMetrics");
    if (Value)
    {
      CFDictionaryRef v27 = Value;
      if (CFDictionaryGetCount(Value) >= 1)
      {
        CFStringRef v28 = (const __CFString *)CFDictionaryGetValue(v27, @"xMin");
        if (v28)
        {
          DoubleCFDictionaryRef Value = CFStringGetDoubleValue(v28);
          CFStringRef v30 = (const __CFString *)CFDictionaryGetValue(v27, @"yMin");
          if (v30)
          {
            double v31 = CFStringGetDoubleValue(v30);
            CFStringRef v32 = (const __CFString *)CFDictionaryGetValue(v27, @"xMax");
            if (v32)
            {
              double v33 = CFStringGetDoubleValue(v32);
              CFStringRef v34 = (const __CFString *)CFDictionaryGetValue(v27, @"yMax");
              if (v34)
              {
                double v35 = CFStringGetDoubleValue(v34);
                *a16 = DoubleValue;
                *a17 = v31;
                *a18 = v33 - DoubleValue;
                *a19 = v35 - v31;
              }
            }
          }
        }
        CFStringRef v36 = (const __CFString *)CFDictionaryGetValue(v27, @"ascender");
        if (v36) {
          *a2 = (int)CFStringGetDoubleValue(v36);
        }
        CFStringRef v37 = (const __CFString *)CFDictionaryGetValue(v27, @"descender");
        if (v37) {
          *a3 = (int)CFStringGetDoubleValue(v37);
        }
        CFStringRef v38 = (const __CFString *)CFDictionaryGetValue(v27, @"lineGap");
        if (v38) {
          *a4 = (int)CFStringGetDoubleValue(v38);
        }
        CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(v27, @"advanceMax");
        if (v39) {
          *a7 = (int)CFStringGetDoubleValue(v39);
        }
        CFStringRef v40 = (const __CFString *)CFDictionaryGetValue(v27, @"sideBearingMin");
        if (v40) {
          *a9 = (int)CFStringGetDoubleValue(v40);
        }
        CFStringRef v41 = (const __CFString *)CFDictionaryGetValue(v27, @"otherSideBearingMin");
        if (v41) {
          *a10 = (int)CFStringGetDoubleValue(v41);
        }
        CFStringRef v42 = (const __CFString *)CFDictionaryGetValue(v27, @"underlinePosition");
        if (v42) {
          *a14 = (int)CFStringGetDoubleValue(v42);
        }
        CFStringRef v43 = (const __CFString *)CFDictionaryGetValue(v27, @"underlineThickness");
        if (v43) {
          *a15 = (int)CFStringGetDoubleValue(v43);
        }
        CFStringRef v44 = (const __CFString *)CFDictionaryGetValue(v27, @"italicAngle");
        if (v44)
        {
          double v45 = CFStringGetDoubleValue(v44);
          *a13 = v45;
        }
        else
        {
          double v45 = *a13;
        }
        *a12 = v45 != 0.0;
      }
    }
  }
}

uint64_t TXMLSplicedFont::GetGlyphsPerCharacters(TXMLSplicedFont *this, const unsigned __int16 *a2, unsigned __int16 *a3, unsigned int *a4)
{
  *a4 = 0;
  return 0;
}

uint64_t TXMLSplicedFont::GetCharactersPerGlyphs(TXMLSplicedFont *this, const unsigned __int16 *a2, unsigned __int16 *a3)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetCharactersForGlyph(TXMLSplicedFont *this, unsigned int a2, unsigned __int16 *a3)
{
  return 0;
}

uint64_t TXMLSplicedFont::CopyCharacterSet(TXMLSplicedFont *this)
{
  return 0;
}

void TXMLSplicedFont::GetOS2UnicodeRanges(TXMLSplicedFont *this, unsigned int a2, unsigned int *a3, float a4)
{
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
}

uint64_t TXMLSplicedFont::GetNumberOfGlyphs(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetVerticalMetrics(TXMLSplicedFont *this, int *a2, int *a3, int *a4, int *a5, int *a6, int *a7, int *a8, int *a9, double *a10, double *a11, double *a12, double *a13)
{
  uint64_t result = (*(uint64_t (**)(TXMLSplicedFont *, double *, double *, double *, double *))(*(void *)this + 280))(this, a10, a11, a12, a13);
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a9 = 0;
  *a8 = 0;
  return result;
}

void TXMLSplicedFont::GetGlyphName(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F0DD43A0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &unk_1F0DD4218;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
}

uint64_t TXMLSplicedFont::VerifyGlyphName(TXMLSplicedFont *this, unsigned int a2, const char *a3)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetGlyphID(TXMLSplicedFont *this, const char *a2)
{
  return 0;
}

uint64_t TXMLSplicedFont::GetRefCon(TXMLSplicedFont *this)
{
  return 0;
}

uint64_t TType1OTFCIDFont::LookupCIDMap(TType1OTFCIDFont *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 4) + 552))(*((void *)this + 4));
}

void sub_1B536E288(void *a1)
{
  __cxa_begin_catch(a1);
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = &unk_1F0DFC400;
  exception[4] = 5;
}

void sub_1B536E2D8(_Unwind_Exception *a1)
{
}

uint64_t TType1OTFCIDFont::LookupCIDMap(TType1OTFCIDFont *this, unsigned __int16 a2, unsigned int *a3, unsigned int *a4)
{
  CFStringRef v4 = (unsigned int *)*((void *)this + 4);
  int v5 = v4[89];
  if (v5 >= 5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 5;
  }
  CFStringRef v10 = (unsigned __int8 *)v4[88];
  unsigned int v11 = v4[94];
  while (1)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v19[1] = v12;
    *(_OWORD *)CFStringRef v20 = v12;
    v19[0] = v12;
    long long v13 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFCIDFont *))(*(void *)this + 216))(this);
    uint64_t v14 = (*(uint64_t (**)(TType1OTFCIDFont *))(*(void *)this + 120))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v19, v13, v14, v11 + v5 * a2, 2 * v5);
    TType1CIDFont::GetCIDFDIndex(v20[1], v10, v5, a3, a4, v15);
    if (!a2 || *a4) {
      break;
    }
    TDataReference::~TDataReference((TDataReference *)((char *)v19 + 8));
    a2 = 0;
  }
  uint64_t v16 = (*(uint64_t (**)(void, void))(**((void **)this + 4) + 552))(*((void *)this + 4), a2);
  TDataReference::~TDataReference((TDataReference *)((char *)v19 + 8));
  return v16;
}

void sub_1B536E4A8(_Unwind_Exception *a1)
{
  TDataReference::~TDataReference(v1);
  _Unwind_Resume(a1);
}

void TType1OTFCIDFont::GetCIDDecryptedOutline(TType1OTFCIDFont *this@<X0>, int a2@<W2>, int a3@<W3>, void *a4@<X8>)
{
  unint64_t v12 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v11[1] = v8;
  _OWORD v11[2] = v8;
  v11[0] = v8;
  CFDictionaryRef v9 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFCIDFont *))(*(void *)this + 216))(this);
  uint64_t v10 = (*(uint64_t (**)(TType1OTFCIDFont *))(*(void *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v11, v9, v10, (a2 + *(_DWORD *)(*((void *)this + 4) + 364) - 1), a3);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  operator new[]();
}

void sub_1B536E5C8(_Unwind_Exception *a1)
{
  TDataReference::~TDataReference((TDataReference *)(v1 | 8));
  _Unwind_Resume(a1);
}

uint64_t TType1OTFCIDFont::GetOneSubrMap(uint64_t a1, uint64_t a2, int a3, _DWORD *a4)
{
  int v7 = *(__int16 *)(a2 + 2);
  uint64_t v8 = *(__int16 *)(a2 + 2);
  if (atomic_load((unint64_t *)(a2 + 16)))
  {
    unint64_t v10 = atomic_load((unint64_t *)(a2 + 16));
    unsigned int v11 = (const unsigned __int8 *)(v10 + (int)v8 * a3);
    uint64_t v12 = BytesToCard(v11, *(__int16 *)(a2 + 2));
    unsigned int v13 = BytesToCard(&v11[v7], v8);
    unint64_t v14 = *(void *)(a2 + 24);
    if (v14 <= v12 || v14 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      exception[4] = 5;
    }
    *a4 = v13 - v12;
  }
  else
  {
    unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = v17;
    *(_OWORD *)CFStringRef v28 = v17;
    v27[0] = v17;
    CFStringRef v18 = (const TFontObjectSurrogate *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 216))(a1);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v27, v18, v19, (*(_DWORD *)(a2 + 8) + v7 * a3), 2 * v7);
    unsigned int v20 = v27[0];
    unint64_t v21 = v28[1];
    uint64_t v12 = BytesToCard(v28[1], v7);
    unsigned int v22 = BytesToCard(&v21[v8], v7);
    if (v12 >= v20 || (v22 <= v20 ? (BOOL v23 = v22 >= v12) : (BOOL v23 = 0), !v23))
    {
      unint64_t v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v26 = &unk_1F0DFC400;
      void v26[4] = 5;
    }
    *a4 = v22 - v12;
    TDataReference::~TDataReference((TDataReference *)((char *)v27 + 8));
  }
  return v12;
}

void sub_1B536E7E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

void TType1OTFCIDFont::GetDecryptedSubrData(TType1OTFCIDFont *this, int a2, unsigned int a3, char *a4, int a5, int a6)
{
  uint64_t v11 = *(void *)(*((void *)this + 4) + 448);
  unint64_t v17 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v12 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v12 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v15[1] = v12;
  *(_OWORD *)__srCGFloat c = v12;
  v15[0] = v12;
  unsigned int v13 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1OTFCIDFont *))(*(void *)this + 216))(this);
  uint64_t v14 = (*(uint64_t (**)(TType1OTFCIDFont *))(*(void *)this + 120))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v15, v13, v14, (a2 + *(_DWORD *)(v11 + 4 * a6) - 1), a3);
  memcpy(a4, __src[1], a3);
  TDataReference::~TDataReference((TDataReference *)((char *)v15 + 8));
}

const unsigned __int8 *TType1OTFCIDFont::GetSubrData(const void **this, const unsigned __int8 **a2, __int16 *a3, const unsigned __int8 **a4)
{
  TType1CIDFont::GetSubrData(this, a2, a3, a4);
  uint64_t v8 = *a2;
  if (v8 && *a3) {
    return &v8[*a3 + *a3 * (uint64_t)(*((int (**)(const void **))*this + 18))(this)];
  }
  uint64_t result = 0;
  *a4 = 0;
  return result;
}

unsigned __int8 *TType1OTFCIDFont::LoadSubrArrayDataPerFD(TType1OTFCIDFont *this, int a2, unsigned __int8 **a3)
{
  CFDictionaryRef v3 = *a3;
  if (!*a3)
  {
    __int16 v8 = -21846;
    __int16 v7 = -21846;
    memset(v6, 170, sizeof(v6));
    CFDictionaryRef v3 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)this + 368))();
    *a3 = v3;
  }
  return v3;
}

uint64_t TType1OTFCIDFont::GetGlobalSubrCount(TType1OTFCIDFont *this)
{
  return *(unsigned __int16 *)(*((void *)this + 4) + 318);
}

uint64_t TType1OTFCIDFont::GetGlobalSubrArrayAndObjectData(TType1OTFCIDFont *this, __int16 *a2, const unsigned __int8 **a3, const unsigned __int8 **a4, const unsigned __int8 **a5, const unsigned __int8 **a6)
{
  uint64_t v6 = *((void *)this + 4);
  uint64_t result = *(void *)(v6 + 320);
  if (result
    && (__int16 v8 = *(unsigned __int8 *)(v6 + 317),
        unint64_t v9 = *(void *)(v6 + 328),
        unint64_t v10 = *(unsigned __int8 *)(v6 + 317)
            + *(unsigned __int16 *)(v6 + 318) * (unint64_t)*(unsigned __int8 *)(v6 + 317),
        v9 > v10))
  {
    uint64_t v11 = (const unsigned __int8 *)(result + v10);
    *a2 = v8;
    *a3 = v11;
    *a4 = v11;
    long long v12 = (const unsigned __int8 *)(result + v9);
  }
  else
  {
    long long v12 = 0;
    uint64_t result = 0;
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
  }
  *a5 = v12;
  *a6 = v12;
  return result;
}

uint64_t GetSfntGlyph(uint64_t a1, int a2, unsigned int *a3, _DWORD *a4)
{
  double v15 = (void *)0xAAAAAAAAAAAAAAAALL;
  __int16 v7 = *(memoryContext **)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  if (*(_WORD *)(v8 + 144)) {
    unsigned int v10 = 8;
  }
  else {
    unsigned int v10 = 4;
  }
  if (*(_WORD *)(v8 + 144)) {
    char v11 = 2;
  }
  else {
    char v11 = 1;
  }
  ScalerGetTableParts(v7, *(_DWORD *)(v8 + 96), a2 << v11, v10, &v15, 0);
  if (*(_WORD *)(*(void *)(a1 + 8) + 144))
  {
    unsigned int v12 = bswap32(*(_DWORD *)v15);
    unsigned int v13 = bswap32(*((_DWORD *)v15 + 1));
  }
  else
  {
    unsigned int v12 = (bswap32(*(unsigned __int16 *)v15) >> 15) & 0x1FFFE;
    unsigned int v13 = (bswap32(*((unsigned __int16 *)v15 + 1)) >> 15) & 0x1FFFE;
  }
  ScalerReleaseFontTable(*(memoryContext **)a1, v15);
  if (v13 < v12 || v13 > *(_DWORD *)(*(void *)(a1 + 8) + 108)) {
    return 0;
  }
  *a3 = v12;
  *a4 = v13 - v12;
  return 1;
}

void T1CIDMetricsTable::~T1CIDMetricsTable(T1CIDMetricsTable *this)
{
  *(void *)this = &unk_1F0E02B08;
  TDataReference::~TDataReference((T1CIDMetricsTable *)((char *)this + 40));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F0E02B08;
  TDataReference::~TDataReference((T1CIDMetricsTable *)((char *)this + 40));
  JUMPOUT(0x1BA9994D0);
}

void T1CIDMetricsTable::T1CIDMetricsTable(T1CIDMetricsTable *this, const TFontObjectSurrogate *a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  int v9 = a5;
  *(void *)this = &unk_1F0E02B08;
  *((void *)this + 1) = 0;
  unint64_t v26 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v24[1] = v13;
  long long v25 = v13;
  v24[0] = v13;
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v24, a2, a3, a4, a5, 2u);
  *((_DWORD *)this + 4) = v24[0];
  *((_WORD *)this + 10) = bswap32((unsigned __int16)**((_WORD **)&v25 + 1)) >> 16;
  *((_DWORD *)this + 6) = v9 + 2;
  TDataReference::~TDataReference((TDataReference *)((char *)v24 + 8));
  TFontObjectTable::TFontObjectTable((T1CIDMetricsTable *)((char *)this + 32), a2, a3, *((unsigned int *)this + 6), *((_DWORD *)this + 4) - *((_DWORD *)this + 6));
  uint64_t v14 = (unsigned __int16 *)*((void *)this + 9);
  double v15 = (char *)v14 + *((unsigned int *)this + 8);
  switch(*((_WORD *)this + 10))
  {
    case 0:
      if (a6 * a7 >= *((_DWORD *)this + 4) - *((_DWORD *)this + 6)) {
        return;
      }
      uint64_t v16 = (uint64_t)v14 + a6 * a7;
      break;
    case 2:
      *(void *)&v24[0] = *((void *)this + 9);
      *((void *)&v24[0] + 1) = v15;
      unint64_t v21 = TBinarySearch::DoBinarySearch((TBinarySearch *)v24, a6);
      if (!v21) {
        return;
      }
      uint64_t v16 = (uint64_t)v21 + 4;
      break;
    case 4:
      *(void *)&v24[0] = *((void *)this + 9);
      *((void *)&v24[0] + 1) = v15;
      CFStringRef v18 = (unsigned __int16 *)TBinarySearch::DoBinarySearch((TBinarySearch *)v24, a6);
      if (!v18) {
        return;
      }
      uint64_t v19 = bswap32(v18[2]) >> 16;
      if (v19 <= 9 || *((_DWORD *)this + 4) - v9 <= v19)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = &unk_1F0DFC400;
        exception[4] = 5;
      }
      uint64_t v16 = (uint64_t)v14 + v19 + (int)(a6 - (bswap32(v18[1]) >> 16)) * (uint64_t)a7 - 2;
      break;
    case 6:
      *(void *)&v24[0] = *((void *)this + 9);
      *((void *)&v24[0] + 1) = v15;
      unsigned int v20 = TBinarySingleSearch::DoBinarySearch((TBinarySingleSearch *)v24, a6);
      if (!v20) {
        return;
      }
      uint64_t v16 = (uint64_t)v20 + 2;
      break;
    case 8:
      unsigned int v17 = bswap32(*v14) >> 16;
      if (v17 > a6 || v17 + (bswap32(v14[1]) >> 16) <= a6) {
        return;
      }
      uint64_t v16 = (uint64_t)v14 + (int)(a6 - v17) * (uint64_t)a7 + 4;
      break;
    default:
      BOOL v23 = __cxa_allocate_exception(0x10uLL);
      *(void *)BOOL v23 = &unk_1F0DFC400;
      _OWORD v23[4] = 5;
  }
  *((void *)this + 1) = v16;
}

void sub_1B536EEC0(_Unwind_Exception *a1)
{
  TDataReference::~TDataReference((TDataReference *)(v1 + 40));
  _Unwind_Resume(a1);
}

void TType1CIDFont::GetAltGlyphMetricsParametres(const void **this, unsigned __int16 *a2, int *a3, unsigned int *a4, int *a5, int *a6, unsigned int *a7, unsigned int *a8, int *a9, int *a10, int *a11)
{
  BOOL v46 = *a2 < *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8);
  CFStringRef v42 = a6;
  *a6 = 0;
  *a4 = 0;
  *a11 = 2097152001;
  *a10 = 2097152001;
  *a9 = 2097152001;
  *a8 = 2097152001;
  *a7 = 2097152001;
  CFStringRef v43 = a5;
  CFStringRef v44 = a3;
  *a5 = 2097152001;
  *a3 = 2097152001;
  CIDFont = (unsigned __int16 *)TType1CIDFont::GetCIDFont(this);
  BOOL v19 = 0;
  unsigned int v20 = *a2;
  if (CIDFont[40] > v20)
  {
    BOOL v21 = 0;
    char v22 = v46;
  }
  else
  {
    BOOL v21 = 0;
    char v22 = v46;
    if (CIDFont[41] >= v20)
    {
      unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
      *(void *)&long long v23 = 0xAAAAAAAAAAAAAAAALL;
      *((void *)&v23 + 1) = 0xAAAAAAAAAAAAAAAALL;
      long long v50 = v23;
      long long v51 = v23;
      long long v48 = v23;
      long long v49 = v23;
      long long v47 = v23;
      __int16 v24 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
      T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v47, v24, 1095519576, 0x10000, 12, *a2, 10);
      long long v25 = (unsigned __int16 *)*((void *)&v47 + 1);
      if (*((void *)&v47 + 1))
      {
        *a2 -= bswap32((unsigned __int16)**((_WORD **)&v47 + 1)) >> 16;
        *CFStringRef v44 = bswap32(v25[1]) & 0xFFFF0000;
        *a4 = bswap32(v25[2]) & 0xFFFF0000;
        int *v43 = bswap32(v25[3]) & 0xFFFF0000;
        *CFStringRef v42 = bswap32(v25[4]) & 0xFFFF0000;
        BOOL v21 = *v44 < 2097152000;
        BOOL v19 = *v43 < 2097152000;
      }
      else
      {
        BOOL v19 = 0;
        BOOL v21 = 0;
      }
      *(void *)&long long v47 = &unk_1F0E02B08;
      TDataReference::~TDataReference((TDataReference *)((char *)&v49 + 8));
      char v22 = 1;
    }
  }
  unint64_t v26 = (unsigned __int16 *)TType1CIDFont::GetCIDFont(this);
  unsigned int v27 = *a2;
  if (v26[42] <= v27 && v26[43] >= v27)
  {
    unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v29 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v29 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v50 = v29;
    long long v51 = v29;
    long long v48 = v29;
    long long v49 = v29;
    long long v47 = v29;
    CFStringRef v30 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v47, v30, 1380930625, 0x10000, 12, *a2, 6);
    uint64_t v31 = *((void *)&v47 + 1);
    BOOL v28 = *((void *)&v47 + 1) != 0;
    if (*((void *)&v47 + 1))
    {
      *a2 -= bswap32((unsigned __int16)**((_WORD **)&v47 + 1)) >> 16;
      *a10 = bswap32(*(unsigned __int16 *)(v31 + 2)) & 0xFFFF0000;
      *a9 = bswap32(*(unsigned __int16 *)(v31 + 4)) & 0xFFFF0000;
    }
    *(void *)&long long v47 = &unk_1F0E02B08;
    TDataReference::~TDataReference((TDataReference *)((char *)&v49 + 8));
  }
  else
  {
    BOOL v28 = 0;
    if ((v22 & 1) == 0) {
      *a2 = 0;
    }
  }
  unint64_t v52 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v32 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v32 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v50 = v32;
  long long v51 = v32;
  long long v48 = v32;
  long long v49 = v32;
  long long v47 = v32;
  double v33 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
  T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v47, v33, 1447447896, 0x20000, 24, *a2, 6);
  uint64_t v34 = *((void *)&v47 + 1);
  if (*((void *)&v47 + 1))
  {
    double v35 = a11;
    *a11 = bswap32((unsigned __int16)**((_WORD **)&v47 + 1)) & 0xFFFF0000;
    *a7 = bswap32(*(unsigned __int16 *)(v34 + 2)) & 0xFFFF0000;
    *a8 = bswap32(*(unsigned __int16 *)(v34 + 4)) & 0xFFFF0000;
    *(void *)&long long v47 = &unk_1F0E02B08;
    CFStringRef v36 = (TDataReference *)((char *)&v49 + 8);
  }
  else
  {
    *(void *)&long long v47 = &unk_1F0E02B08;
    TDataReference::~TDataReference((TDataReference *)((char *)&v49 + 8));
    *(void *)&long long v50 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v37 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v37 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v48 = v37;
    long long v49 = v37;
    long long v47 = v37;
    CFStringRef v38 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)&v47, v38, 1447447896, 18, 6);
    uint64_t v39 = *((void *)&v49 + 1);
    double v35 = a11;
    *a11 = bswap32((unsigned __int16)**((_WORD **)&v49 + 1)) & 0xFFFF0000;
    *a7 = bswap32(*(unsigned __int16 *)(v39 + 2)) & 0xFFFF0000;
    *a8 = bswap32(*(unsigned __int16 *)(v39 + 4)) & 0xFFFF0000;
    CFStringRef v36 = (TDataReference *)((char *)&v47 + 8);
  }
  TDataReference::~TDataReference(v36);
  if (v28)
  {
    if (v21) {
      return;
    }
    int v40 = -*v35;
    CFStringRef v41 = v44;
  }
  else
  {
    if (v19) {
      return;
    }
    int v40 = *v35;
    CFStringRef v41 = v43;
  }
  *CFStringRef v41 = v40;
}

uint64_t TType1CIDFont::GetAltGlyphFDIndex(const void **this, unsigned __int16 *a2)
{
  BOOL v4 = *a2 < *((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8);
  CIDFont = (unsigned __int16 *)TType1CIDFont::GetCIDFont(this);
  unsigned int v6 = *a2;
  if (CIDFont[40] <= v6 && CIDFont[41] >= v6)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v8 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v19 = v8;
    long long v20 = v8;
    long long v17 = v8;
    long long v18 = v8;
    long long v16 = v8;
    int v9 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v16, v9, 1095519576, 0x10000, 12, *a2, 10);
    if (*((void *)&v16 + 1)) {
      *a2 -= bswap32((unsigned __int16)**((_WORD **)&v16 + 1)) >> 16;
    }
    *(void *)&long long v16 = &unk_1F0E02B08;
    TDataReference::~TDataReference((TDataReference *)((char *)&v18 + 8));
    BOOL v4 = 1;
  }
  unsigned int v10 = (unsigned __int16 *)TType1CIDFont::GetCIDFont(this);
  unsigned int v11 = *a2;
  if (v10[42] <= v11 && v10[43] >= v11)
  {
    unint64_t v21 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    long long v19 = v13;
    long long v20 = v13;
    long long v17 = v13;
    long long v18 = v13;
    long long v16 = v13;
    uint64_t v14 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    T1CIDMetricsTable::T1CIDMetricsTable((T1CIDMetricsTable *)&v16, v14, 1380930625, 0x10000, 12, *a2, 6);
    if (*((void *)&v16 + 1)) {
      *a2 -= bswap32((unsigned __int16)**((_WORD **)&v16 + 1)) >> 16;
    }
    *(void *)&long long v16 = &unk_1F0E02B08;
    TDataReference::~TDataReference((TDataReference *)((char *)&v18 + 8));
  }
  else if (!v4)
  {
    *a2 = 0;
  }
  return (*((uint64_t (**)(const void **, void))*this + 43))(this, *a2);
}

uint64_t TType1CIDFont::GetFontDesc(TType1CIDFont *this)
{
  if (TType1CIDRenderingContext::gCIDRendering) {
    return (*(uint64_t (**)(TType1CIDFont *, void))(*(void *)this + 312))(this, *(__int16 *)(TType1CIDRenderingContext::gCIDRendering + 88));
  }
  else {
    return *(void *)(*((void *)this + 4) + 128);
  }
}

uint64_t TType1CIDFont::GetFontDesc(const void **this, int a2)
{
  return *((void *)TType1CIDFont::GetCIDFont(this) + 7) + 488 * a2 + 36;
}

uint64_t TType1CIDFont::GetOverrideMetrics(uint64_t a1, _DWORD *a2)
{
  if (!*(unsigned char *)(TType1CIDRenderingContext::gCIDRendering + 23)) {
    return 0;
  }
  int v3 = *(_DWORD *)(TType1CIDRenderingContext::gCIDRendering + 24);
  uint64_t result = *(unsigned int *)(TType1CIDRenderingContext::gCIDRendering + 28);
  a2[2] = result;
  *a2 -= v3;
  a2[7] = v3;
  a2[5] -= result;
  return result;
}

uint64_t TType1CIDFont::GetCIDBytes(TType1CIDFont *this, unsigned __int8 **a2)
{
  switch((int)a2)
  {
    case 1:
      int v2 = 0;
      int v3 = *(unsigned __int8 **)this;
      goto LABEL_9;
    case 2:
      int v5 = 0;
      unsigned int v6 = *(unsigned __int8 **)this;
      goto LABEL_8;
    case 3:
      int v7 = 0;
      long long v8 = *(unsigned __int8 **)this;
      goto LABEL_7;
    case 4:
      int v9 = *(unsigned __int8 **)this;
      long long v8 = (unsigned __int8 *)(*(void *)this + 1);
      *(void *)this = v8;
      int v7 = *v9 << 8;
LABEL_7:
      unsigned int v6 = v8 + 1;
      *(void *)this = v8 + 1;
      int v5 = (v7 | *v8) << 8;
LABEL_8:
      int v3 = v6 + 1;
      *(void *)this = v6 + 1;
      int v2 = (v5 | *v6) << 8;
LABEL_9:
      *(void *)this = v3 + 1;
      uint64_t result = v2 | *v3;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t TType1CIDFont::GetCIDFDIndex(TType1CIDFont *this, unsigned __int8 *a2, unsigned __int16 a3, _DWORD *a4, unsigned int *a5, unsigned int *a6)
{
  int v9 = (int)a2;
  long long v13 = this;
  __int16 CIDBytes = TType1CIDFont::GetCIDBytes((TType1CIDFont *)&v13, (unsigned __int8 **)(unsigned __int16)a2);
  int v11 = TType1CIDFont::GetCIDBytes((TType1CIDFont *)&v13, (unsigned __int8 **)a3);
  *a4 = v11;
  long long v13 = (TType1CIDFont *)((char *)v13 + v9);
  *a5 = (unsigned __int16)(TType1CIDFont::GetCIDBytes((TType1CIDFont *)&v13, (unsigned __int8 **)a3) - v11);
  return CIDBytes;
}

uint64_t TType1CIDFont::LookupCIDMap(const void **this, unsigned int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v5 = a2;
  if (*((unsigned __int16 *)TType1CIDFont::GetCIDFont(this) + 8) <= a2) {
    unsigned int v5 = 0;
  }
  unsigned int v7 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 2);
  int v8 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 3);
  unsigned int v19 = v7;
  int v9 = v8 + v7;
  int v10 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 5);
  int v11 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 8) + v10;
  do
  {
    unsigned int v12 = v5;
    unint64_t v23 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v13 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v13 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v21[1] = v13;
    *(_OWORD *)char v22 = v13;
    v21[0] = v13;
    uint64_t v14 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
    uint64_t v15 = (*((uint64_t (**)(const void **))*this + 15))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v21, v14, v15, v11 + v9 * v5, 2 * v9);
    CIDFDIndeCGFloat x = TType1CIDFont::GetCIDFDIndex(v22[1], (unsigned __int8 *)v19, v8, a3, a4, v16);
    unsigned int v5 = *a4;
    TDataReference::~TDataReference((TDataReference *)((char *)v21 + 8));
  }
  while (!v5 && v12);
  return CIDFDIndex;
}

uint64_t TType1CIDFont::LookupCIDMap(TType1CIDFont *this, uint64_t a2)
{
  int v4 = -1431655766;
  int v3 = -1431655766;
  return (*(uint64_t (**)(TType1CIDFont *, uint64_t, int *, int *))(*(void *)this + 336))(this, a2, &v4, &v3);
}

void TType1CIDFont::GetCIDDecryptedOutline(const void **this@<X0>, int a2@<W2>, int a3@<W3>, void *a4@<X8>)
{
  int v8 = *((_DWORD *)TType1CIDFont::GetCIDFont(this) + 5);
  unint64_t v13 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = v9;
  void v12[2] = v9;
  v12[0] = v9;
  int v10 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
  uint64_t v11 = (*((uint64_t (**)(const void **))*this + 15))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v12, v10, v11, (v8 + a2), a3);
  *a4 = 0xAAAAAAAAAAAAAAAALL;
  operator new[]();
}

void sub_1B536FC18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *int v2 = 0;
  MEMORY[0x1BA9994A0](v3, 0x1000C8077774924);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

uint64_t TType1CIDFont::GetCharOutline(TType1CIDFont *this, uint64_t a2, unsigned __int16 *a3)
{
  unsigned int v6 = (*(uint64_t (**)(void))(**((void **)this + 4) + 168))(*((void *)this + 4));
  if (v6 >= 0xFFFF) {
    unsigned int v7 = 0xFFFF;
  }
  else {
    unsigned int v7 = v6;
  }
  if (v7 <= a2)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    __int16 v12 = 8;
    goto LABEL_9;
  }
  int v13 = -1431655766;
  unsigned int v14 = -1431655766;
  uint64_t v8 = (*(uint64_t (**)(TType1CIDFont *, uint64_t, unsigned int *, int *))(*(void *)this + 336))(this, a2, &v14, &v13);
  if ((int)v8 >= *((__int16 *)TType1CIDFont::GetCIDFont((const void **)this) + 9))
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    __int16 v12 = 5;
LABEL_9:
    exception[4] = v12;
  }
  *(_WORD *)(TType1CIDRenderingContext::gCIDRendering + 88) = v8;
  uint64_t v9 = v14;
  *a3 = v13;
  return (*(uint64_t (**)(TType1CIDFont *, uint64_t, uint64_t))(*(void *)this + 352))(this, v8, v9);
}

uint64_t TType1CIDFont::GetOneSubrMap(const void **a1, uint64_t a2, int a3, _DWORD *a4)
{
  int v7 = *(__int16 *)(a2 + 2);
  uint64_t v8 = *(__int16 *)(a2 + 2);
  if (atomic_load((unint64_t *)(a2 + 16)))
  {
    unint64_t v10 = atomic_load((unint64_t *)(a2 + 16));
    uint64_t v11 = (const unsigned __int8 *)(v10 + (int)v8 * a3);
    uint64_t v12 = BytesToCard(v11, *(__int16 *)(a2 + 2));
    unsigned int v13 = BytesToCard(&v11[v7], v8);
    unint64_t v14 = *(void *)(a2 + 24);
    if (v14 <= v12 || v14 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = &unk_1F0DFC400;
      exception[4] = 5;
    }
    *a4 = v13 - v12;
  }
  else
  {
    unint64_t v29 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v17 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v17 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v27[1] = v17;
    *(_OWORD *)BOOL v28 = v17;
    v27[0] = v17;
    long long v18 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*a1 + 27))(a1);
    uint64_t v19 = (*((uint64_t (**)(const void **))*a1 + 15))(a1);
    CIDFont = TType1CIDFont::GetCIDFont(a1);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v27, v18, v19, (CIDFont[5] + v7 * a3 + *(_DWORD *)(a2 + 8)), 2 * v7);
    unsigned int v21 = v27[0];
    char v22 = v28[1];
    uint64_t v12 = BytesToCard(v28[1], v7);
    unsigned int v23 = BytesToCard(&v22[v8], v7);
    if (v12 >= v21 || v23 > v21)
    {
      unint64_t v26 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v26 = &unk_1F0DFC400;
      void v26[4] = 5;
    }
    *a4 = v23 - v12;
    TDataReference::~TDataReference((TDataReference *)((char *)v27 + 8));
  }
  return v12;
}

void sub_1B5370008(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

std::vector<char>::pointer TType1CIDFont::LoadCIDSubr(const void **a1, uint64_t a2, std::vector<char> *a3, uint64_t a4)
{
  uint64_t v8 = *((void *)TType1CIDFont::GetCIDFont(a1) + 7);
  if (*(__int16 *)(v8 + 488 * (int)a2 + 2) < 0) {
    return 0;
  }
  unsigned int v15 = -1431655766;
  uint64_t v9 = (*((uint64_t (**)(const void **, uint64_t, uint64_t, unsigned int *))*a1 + 48))(a1, v8 + 488 * (int)a2, a4, &v15);
  uint64_t v10 = *(__int16 *)(v8 + 488 * (int)a2 + 92);
  uint64_t v11 = v15;
  std::vector<char>::pointer begin = a3->__begin_;
  unint64_t v13 = a3->__end_ - a3->__begin_;
  if (v15 <= v13)
  {
    if (v15 < v13) {
      a3->__end_ = &begin[v15];
    }
  }
  else
  {
    std::vector<char>::__append(a3, v15 - v13);
    std::vector<char>::pointer begin = a3->__begin_;
    uint64_t v11 = v15;
  }
  (*((void (**)(const void **, uint64_t, uint64_t, std::vector<char>::pointer, uint64_t, uint64_t))*a1 + 47))(a1, v9, v11, begin, v10, a2);
  return begin;
}

void TType1CIDFont::GetDecryptedSubrData(const void **this, int a2, int a3, char *a4, int a5)
{
  unint64_t v16 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v10 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v10 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v14[1] = v10;
  *(_OWORD *)unsigned int v15 = v10;
  v14[0] = v10;
  uint64_t v11 = (const TFontObjectSurrogate *)(*((uint64_t (**)(const void **))*this + 27))(this);
  uint64_t v12 = (*((uint64_t (**)(const void **))*this + 15))(this);
  CIDFont = TType1CIDFont::GetCIDFont(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v14, v11, v12, (CIDFont[5] + a2), a3);
  LenIVDecrypt((unsigned __int8 *)a4, v15[1], a3, a5);
  TDataReference::~TDataReference((TDataReference *)((char *)v14 + 8));
}

void sub_1B537026C(_Unwind_Exception *a1)
{
  TDataReference::~TDataReference((TDataReference *)(v1 | 8));
  _Unwind_Resume(a1);
}

uint64_t TType1CIDFont::LoadSubrArrayDataPerFD(TType1CIDFont *this, int a2, unsigned __int8 **a3)
{
  return 0;
}

uint64_t TType1CIDFont::GetSubrData(const void **this, const unsigned __int8 **a2, __int16 *a3, const unsigned __int8 **a4)
{
  uint64_t v6 = TType1CIDRenderingContext::gCIDRendering;
  if (!TType1CIDRenderingContext::gCIDRendering)
  {
    *a3 = 0;
LABEL_5:
    uint64_t result = 0;
    *a2 = 0;
    return result;
  }
  uint64_t v9 = *((void *)TType1CIDFont::GetCIDFont(this) + 7);
  int v10 = *(__int16 *)(v6 + 88);
  uint64_t v11 = v9 + 488 * *(__int16 *)(v6 + 88);
  *a3 = *(_WORD *)(v11 + 2);
  uint64_t v12 = (unint64_t *)(v11 + 16);
  if (atomic_load(v12))
  {
    unint64_t v14 = (const unsigned __int8 *)atomic_load(v12);
    *a2 = v14;
    *a4 = &v14[*(void *)(v9 + 488 * v10 + 24)];
    return (uint64_t)*a2;
  }
  if (!*(_WORD *)(v9 + 488 * v10 + 4)) {
    goto LABEL_5;
  }
  __int16 v20 = -21846;
  __int16 v19 = -21846;
  unint64_t v18 = 0xAAAAAAAAAAAAAAAALL;
  CIDFont = TType1CIDFont::GetCIDFont(this);
  long long v17 = (const unsigned __int8 *)(*(uint64_t (**)(void *, void, __int16 *, __int16 *, unint64_t *))(*(void *)CIDFont + 24))(CIDFont, *(unsigned __int16 *)(v6 + 20), &v20, &v19, &v18);
  *a2 = v17;
  *a4 = &v17[v18];
  uint64_t result = (uint64_t)*a2;
  if (!*a2) {
    goto LABEL_5;
  }
  return result;
}

uint64_t TType1CIDFont::GetSubrCount(const void **this)
{
  return *(unsigned __int16 *)(*((void *)TType1CIDFont::GetCIDFont(this) + 7)
                             + 488 * *(__int16 *)(TType1CIDRenderingContext::gCIDRendering + 88)
                             + 4);
}

double TType1CIDFont::GetORUTransform(uint64_t a1, uint64_t a2)
{
  *(void *)&double result = 0x10000;
  *(_OWORD *)a2 = xmmword_1B53FFAE0;
  *(void *)(a2 + 16) = 0;
  if (*(unsigned char *)(TType1CIDRenderingContext::gCIDRendering + 22))
  {
    *(void *)&double result = 0x1000000000000;
    *(_OWORD *)a2 = xmmword_1B5402A80;
    *(_DWORD *)(a2 + 20) = 0;
  }
  return result;
}

void TType1CIDFont::~TType1CIDFont(TType1CIDFont *this)
{
  *(void *)this = &unk_1F0E02218;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = &unk_1F0E02218;
  uint64_t v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  JUMPOUT(0x1BA9994D0);
}

void TType1CIDFont::TType1CIDFont(TType1CIDFont *this, const TType1Font *a2)
{
  *((_WORD *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = a2;
  *(void *)this = &unk_1F0E02B40;
  *((_WORD *)this + 20) = 0;
  unint64_t v11 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v3 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9[1] = v3;
  long long v10 = v3;
  v9[0] = v3;
  FontObject = (const TFontObjectSurrogate *)TType1PSFont::GetFontObject(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v9, FontObject, 1128875040, 0x10000, 0, 0x16u);
  __int16 v5 = *(_WORD *)(*((void *)&v10 + 1) + 4);
  TDataReference::~TDataReference((TDataReference *)((char *)v9 + 8));
  if ((v5 & 0x100) != 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = &unk_1F0DFC400;
    exception[4] = 4;
  }
  *((_WORD *)this + 4) = 0x8000;
  int v6 = *(_DWORD *)(*((void *)this + 4) + 176);
  if ((v6 & 1) != 0 && !*((_WORD *)this + 20))
  {
    if ((v6 & 4) != 0)
    {
      __int16 v7 = 1200;
    }
    else
    {
      if ((v6 & 2) == 0) {
        return;
      }
      __int16 v7 = 600;
    }
    *((_WORD *)this + 20) = v7;
  }
}

void sub_1B5370640(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_1F0E02218;
  uint64_t v3 = v1[3];
  v1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TType1CIDFont::EncodeCIDGlyph(TType1CIDFont *this, unsigned int a2, char *a3)
{
  int v6 = (const char *)((*(uint64_t (**)(TType1CIDFont *))(*(void *)this + 320))(this) + 1);
  uint64_t v7 = (*(uint64_t (**)(TType1CIDFont *))(*(void *)this + 328))(this);
  uint64_t v8 = DetermineROS(v6, (const char *)(v7 + 1));
  if ((v8 & 0xFF00000000) != 0) {
    int v9 = v8;
  }
  else {
    int v9 = 0xFFFF;
  }
  uint64_t result = MakeGlyphNameForCIDPerROS(a2, v9, a3 + 1, 0xFFuLL);
  *a3 = result;
  return result;
}

void TType1CIDFont::FindCharName(TType1CIDFont *this, uint64_t a2, unsigned __int8 *a3)
{
  unint64_t v14 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v12[1] = v6;
  long long v13 = v6;
  v12[0] = v6;
  uint64_t v7 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1CIDFont *))(*(void *)this + 216))(this);
  TFontObjectTable::TFontObjectTable((TFontObjectTable *)v12, v7, 1886352244, 0x40000, 0, 0);
  if ((unint64_t)LODWORD(v12[0]) - 32 <= 2 * (unint64_t)a2)
  {
    TDataReference::~TDataReference((TDataReference *)((char *)v12 + 8));
    goto LABEL_10;
  }
  unsigned int v8 = *(unsigned __int16 *)(*((void *)&v13 + 1) + 2 * a2 + 32);
  TDataReference::~TDataReference((TDataReference *)((char *)v12 + 8));
  if (v8 == 0xFFFF)
  {
LABEL_10:
    (*(void (**)(TType1CIDFont *, uint64_t, unsigned __int8 *))(*(void *)this + 400))(this, a2, a3 + 1);
    *a3 = a3[1] + 1;
    a3[1] = 47;
    return;
  }
  if (v8 >= 0x100) {
    uint64_t v9 = 4;
  }
  else {
    uint64_t v9 = 2;
  }
  uint64_t v10 = v9 + 2;
  int v11 = v9;
  do
  {
    a3[v10] = kHexChar[v8 & 0xF];
    v8 >>= 4;
    --v10;
    --v11;
  }
  while (v11);
  *a3 = v9 + 2;
  *(_WORD *)(a3 + 1) = 24879;
}

uint64_t TType1CIDFont::GetFontDataTableTag(TType1CIDFont *this)
{
  return 1128875040;
}

uint64_t TType1CIDFont::GetGlyphID(TType1CIDFont *this, const unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  if (a3 >= 2 && v3 == 97)
  {
    __int16 v5 = a2 + 1;
    size_t v6 = a3 - 1;
    if (v6 <= 0x7F) {
      size_t v7 = 128 - v6;
    }
    else {
      size_t v7 = 0;
    }
    memset((char *)v31 + v6, 170, v7);
    memcpy(v31, v5, v6);
    *((unsigned char *)v31 + v6) = 0;
    unsigned __int16 v8 = HexToInt((const char *)v31);
    unint64_t v33 = 0xAAAAAAAAAAAAAAAALL;
    *(void *)&long long v9 = 0xAAAAAAAAAAAAAAAALL;
    *((void *)&v9 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v31[1] = v9;
    long long v32 = v9;
    v31[0] = v9;
    uint64_t v10 = (const TFontObjectSurrogate *)(*(uint64_t (**)(TType1CIDFont *))(*(void *)this + 216))(this);
    TFontObjectTable::TFontObjectTable((TFontObjectTable *)v31, v10, 1886352244, 0x40000, 0, 0);
    if (LODWORD(v31[0]) >= 0x21)
    {
      unsigned int v11 = LODWORD(v31[0]) + 131040;
      if (((LODWORD(v31[0]) + 131040) & 0x1FFFE) != 0)
      {
        uint64_t v12 = 0;
        if (((v11 >> 1) & 0xFFFE) != 0) {
          uint64_t v13 = (unsigned __int16)(v11 >> 1);
        }
        else {
          uint64_t v13 = 1;
        }
        while (*(unsigned __int16 *)(*((void *)&v32 + 1) + 32 + 2 * v12) != v8)
        {
          if (v13 == ++v12) {
            goto LABEL_13;
          }
        }
        TDataReference::~TDataReference((TDataReference *)((char *)v31 + 8));
        return (unsigned __int16)v12;
      }
    }
LABEL_13:
    TDataReference::~TDataReference((TDataReference *)((char *)v31 + 8));
    goto LABEL_39;
  }
  if (a3 >= 9 && v3 == 117)
  {
    if (a2[1] == 110 && a2[2] == 105)
    {
      uint64_t v14 = 0;
      while (a3 - 7 != v14)
      {
        int v15 = a2[v14++ + 7];
        if (v15 == 46)
        {
          unsigned int v16 = a3 - 7 - v14;
          long long v17 = &a2[v14 + 7];
          if (v16 > 3 && *v17 == 99)
          {
            unint64_t v18 = &a2[v14];
            if (a2[v14 + 8] == 105)
            {
              int v19 = v18[9];
              unsigned int v20 = a3 - v14 - 10;
              unsigned int v21 = v18 + 10;
              if (v19 == 100)
              {
                long long v17 = v21;
                unsigned int v16 = v20;
              }
            }
          }
          size_t v22 = v16;
          if (v16 <= 0x7F) {
            size_t v23 = 128 - v16;
          }
          else {
            size_t v23 = 0;
          }
          __int16 v24 = (char *)v31 + v16;
          memset(v24, 170, v23);
          long long v25 = v17;
          size_t v26 = v22;
          goto LABEL_38;
        }
      }
    }
    goto LABEL_39;
  }
  LOWORD(v12) = 0;
  if (a3 < 4 || v3 != 99) {
    return (unsigned __int16)v12;
  }
  if (a2[1] != 105 || a2[2] != 100)
  {
LABEL_39:
    LOWORD(v12) = 0;
    return (unsigned __int16)v12;
  }
  size_t v27 = a3 - 3;
  BOOL v28 = a2 + 3;
  if (v27 <= 0x7F) {
    size_t v29 = 128 - v27;
  }
  else {
    size_t v29 = 0;
  }
  __int16 v24 = (char *)v31 + v27;
  memset((char *)v31 + v27, 170, v29);
  long long v25 = v28;
  size_t v26 = v27;
LABEL_38:
  memcpy(v31, v25, v26);
  *__int16 v24 = 0;
  LOWORD(v12) = StringToInt((const char *)v31);
  return (unsigned __int16)v12;
}

uint64_t TType1CIDFont::GetRegistry(const void **this)
{
  uint64_t v2 = *((int *)TType1CIDFont::GetCIDFont(this) + 17);
  if (v2 == -1) {
    return 0;
  }
  CIDFont = TType1CIDFont::GetCIDFont(this);
  return (*(uint64_t (**)(void *))(*(void *)CIDFont + 16))(CIDFont) + v2;
}

uint64_t TType1CIDFont::GetOrdering(const void **this)
{
  uint64_t v2 = *((int *)TType1CIDFont::GetCIDFont(this) + 18);
  if (v2 == -1) {
    return 0;
  }
  CIDFont = TType1CIDFont::GetCIDFont(this);
  return (*(uint64_t (**)(void *))(*(void *)CIDFont + 16))(CIDFont) + v2;
}

uint64_t TType1CIDFont::GetFontEncoding(TType1CIDFont *this, unsigned __int16 *a2)
{
  return 0;
}

unint64_t memoryContext::GetFreeEntry(memoryContext *this)
{
  uint64_t v2 = (memoryContext *)*((void *)this + 1);
  unsigned int v3 = *((_DWORD *)this + 4);
  if (v3)
  {
    unint64_t result = *((void *)this + 1);
    while (*(_DWORD *)(result + 8) != 1718773093)
    {
      result += 56;
      if (result >= (unint64_t)v2 + 56 * v3) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v5 = v3 + 8;
    size_t v6 = operator new[](56 * v5 + 16, MEMORY[0x1E4FBA2D0]);
    if (!v6)
    {
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 20;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
    size_t v7 = v6;
    *size_t v6 = 56;
    v6[1] = v5;
    unsigned __int16 v8 = v6 + 2;
    if (v3 == -8) {
      goto LABEL_10;
    }
    long long v9 = v6 + 5;
    uint64_t v10 = 56 * v5;
    unsigned int v11 = v6 + 4;
    do
    {
      *(v9 - 1) = &unk_1F0DD4218;
      void *v9 = 0;
      v9[1] = 0;
      _OWORD v9[2] = 0;
      v9 += 7;
      v11 += 7;
      v10 -= 56;
    }
    while (v10);
    if (v3)
    {
LABEL_10:
      uint64_t v12 = 0;
      unint64_t v13 = 0;
      do
      {
        uint64_t v14 = *((void *)this + 1) + v12 * 8;
        int v15 = &v7[v12];
        int v16 = *(_DWORD *)(v14 + 8);
        _OWORD v15[2] = *(void *)v14;
        *((_DWORD *)v15 + 6) = v16;
        TDataReference::operator=((TDataReference *)&v7[v12 + 4], v14 + 16);
        *((_DWORD *)v15 + 16) = *(_DWORD *)(v14 + 48);
        ++v13;
        unint64_t v17 = *((unsigned int *)this + 4);
        v12 += 7;
      }
      while (v13 < v17);
      uint64_t v2 = (memoryContext *)*((void *)this + 1);
    }
    else
    {
      LODWORD(v17) = 0;
    }
    if (v2 != (memoryContext *)((char *)this + 24) && v2)
    {
      unint64_t v18 = (char *)v2 - 16;
      uint64_t v19 = *((void *)v2 - 1);
      if (v19)
      {
        unsigned int v20 = (char *)v2 - 40;
        uint64_t v21 = 56 * v19;
        do
        {
          TDataReference::~TDataReference((TDataReference *)&v20[v21]);
          v21 -= 56;
        }
        while (v21);
      }
      MEMORY[0x1BA9994A0](v18, 0x10E0C80781A2FC6);
      LODWORD(v17) = *((_DWORD *)this + 4);
    }
    *((void *)this + 1) = v8;
    size_t v22 = &v8[7 * v17];
    _OWORD *v22 = 0u;
    v22[1] = 0u;
    v22[2] = 0u;
    v22[3] = 0u;
    unsigned int v22[4] = 0u;
    v22[5] = 0u;
    _OWORD v22[6] = 0u;
    v22[7] = 0u;
    v22[8] = 0u;
    v22[9] = 0u;
    v22[10] = 0u;
    v22[11] = 0u;
    v22[12] = 0u;
    v22[13] = 0u;
    v22[14] = 0u;
    v22[15] = 0u;
    v22[16] = 0u;
    v22[17] = 0u;
    v22[18] = 0u;
    v22[19] = 0u;
    v22[20] = 0u;
    v22[21] = 0u;
    v22[22] = 0u;
    v22[23] = 0u;
    v22[24] = 0u;
    v22[25] = 0u;
    uint64_t v23 = 3;
    v22[26] = 0u;
    v22[27] = 0u;
    do
    {
      LODWORD(v7[7 * v17 + v23]) = 1718773093;
      v23 += 7;
    }
    while (v23 != 59);
    *((_DWORD *)this + 4) = v17 + 8;
    return (unint64_t)v22 + 392;
  }
  return result;
}

void memoryContext::memoryContext(memoryContext *this, cacheCallContext *a2)
{
  uint64_t v3 = 0;
  int v4 = (char *)this + 24;
  *(void *)this = a2;
  *((void *)this + 1) = v4;
  *((void *)this + 2) = 0x38000000010;
  do
  {
    uint64_t v5 = (void *)((char *)this + v3);
    v5[5] = &unk_1F0DD4218;
    _OWORD v5[6] = 0;
    v5[7] = 0;
    v5[8] = 0;
    v3 += 56;
  }
  while (v3 != 896);
  bzero(v4, 0x380uLL);
  unsigned int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    unint64_t v7 = *((void *)this + 1);
    unint64_t v8 = v7 + 56 * v6;
    do
    {
      *(_DWORD *)(v7 + 8) = 1718773093;
      v7 += 56;
    }
    while (v7 < v8);
  }
}

void memoryContext::~memoryContext(memoryContext *this)
{
  unint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    unsigned int v3 = *((_DWORD *)this + 4);
    if (v3)
    {
      unint64_t v4 = v2 + 56 * v3;
      do
      {
        int v5 = *(_DWORD *)(v2 + 8);
        if (v5 != 1718773093)
        {
          if (v5 == 1718578804) {
            ScalerReleaseFontTable(this, *(const void **)v2);
          }
          else {
            ScalerDisposeBlock(this, *(char **)v2, v5);
          }
        }
        v2 += 56;
      }
      while (v2 < v4);
      unint64_t v2 = *((void *)this + 1);
    }
    if ((memoryContext *)v2 != (memoryContext *)((char *)this + 24) && v2 != 0)
    {
      unint64_t v7 = v2 - 16;
      uint64_t v8 = *(void *)(v2 - 8);
      if (v8)
      {
        unint64_t v9 = v2 - 40;
        uint64_t v10 = 56 * v8;
        do
        {
          TDataReference::~TDataReference((TDataReference *)(v9 + v10));
          v10 -= 56;
        }
        while (v10);
      }
      MEMORY[0x1BA9994A0](v7, 0x10E0C80781A2FC6);
    }
  }
  for (uint64_t i = 880; i != -16; i -= 56)
    TDataReference::~TDataReference((memoryContext *)((char *)this + i));
}

void ScalerReleaseFontTable(memoryContext *a1, const void *a2)
{
  if (*(const void **)(*(void *)a1 + 32) == a2)
  {
    *(void *)(*(void *)a1 + 32) = 0;
  }
  else
  {
    unsigned int v2 = *((_DWORD *)a1 + 4);
    if (v2)
    {
      unint64_t v3 = *((void *)a1 + 1);
      unint64_t v4 = v3 + 56 * v2;
      while (*(const void **)v3 != a2)
      {
        v3 += 56;
        if (v3 >= v4) {
          goto LABEL_6;
        }
      }
      if (*(_DWORD *)(v3 + 8) == 1718578804)
      {
        *(_DWORD *)(v3 + 8) = 1718773093;
        unsigned int v6 = &unk_1F0DD4218;
        uint64_t v7 = 0;
        long long v8 = 0uLL;
        if ((void **)(v3 + 16) != &v6)
        {
          TDataReference::DucRefCount((TDataReference *)(v3 + 16));
          uint64_t v5 = v7;
          uint64_t v7 = 0;
          *(void *)(v3 + 24) = v5;
          *(_OWORD *)(v3 + 32) = v8;
        }
        TDataReference::~TDataReference((TDataReference *)&v6);
        *(void *)unint64_t v3 = 1358921729;
        *(_DWORD *)(v3 + 48) = 0;
      }
    }
    else
    {
LABEL_6:
      puts("ScalerMemoryOFA2.c: FindABlock didn't!");
    }
  }
}

void sub_1B5371188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ScalerDisposeBlock(memoryContext *a1, char *a2, int a3)
{
  unsigned int v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    unint64_t v6 = *((void *)a1 + 1);
    unint64_t v7 = v6 + 56 * v3;
    while (*(char **)v6 != a2)
    {
      v6 += 56;
      if (v6 >= v7) {
        goto LABEL_5;
      }
    }
    if (*(_DWORD *)(v6 + 8) == a3)
    {
      *(_DWORD *)(v6 + 8) = 1718773093;
      unint64_t v9 = &unk_1F0DD4218;
      uint64_t v10 = 0;
      long long v11 = 0uLL;
      if ((void **)(v6 + 16) != &v9)
      {
        TDataReference::DucRefCount((TDataReference *)(v6 + 16));
        uint64_t v8 = v10;
        uint64_t v10 = 0;
        *(void *)(v6 + 24) = v8;
        *(_OWORD *)(v6 + 32) = v11;
      }
      TDataReference::~TDataReference((TDataReference *)&v9);
      *(void *)unint64_t v6 = 1358921729;
      *(_DWORD *)(v6 + 48) = 0;
      if ((a3 - 5) >= 2 && a2) {
        free(a2 - 8);
      }
    }
  }
  else
  {
LABEL_5:
    puts("ScalerMemoryOFA2.c: FindABlock didn't!");
  }
}

void sub_1B53712BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t ScalerGetFontTable(memoryContext *a1, uint64_t a2, unsigned int a3, void *a4, int a5, int a6)
{
  unsigned int v26 = 0;
  long long v11 = (void *)(*(void *)a1 + 16);
  FreeEntrCGFloat y = memoryContext::GetFreeEntry(a1);
  TFontSurrogate::GetTable(v11, &v26, a2, a3, &v23);
  if ((uint64_t *)(FreeEntry + 16) != &v23)
  {
    TDataReference::DucRefCount((TDataReference *)(FreeEntry + 16));
    uint64_t v13 = v24;
    uint64_t v24 = 0;
    *(void *)(FreeEntry + 24) = v13;
    *(_OWORD *)(FreeEntry + 32) = v25;
  }
  TDataReference::~TDataReference((TDataReference *)&v23);
  uint64_t v14 = *(void *)(FreeEntry + 24);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 8);
    if (v15)
    {
      uint64_t v16 = *(void *)(FreeEntry + 32);
      uint64_t v17 = v15 + v16;
      *a4 = v17;
      uint64_t result = v26;
      if (!a6 || v26 >= a6 + a3)
      {
        *(void *)FreeEntrCGFloat y = v17;
        *(_DWORD *)(FreeEntry + 8) = 1718578804;
        *(_DWORD *)(FreeEntry + 48) = *(_DWORD *)(FreeEntry + 40) - v16;
        return result;
      }
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = 3;
      uint64_t v21 = (struct type_info *)MEMORY[0x1E4FBA3C8];
LABEL_16:
      __cxa_throw(exception, v21, 0);
    }
  }
  *a4 = 0;
  if (!a5)
  {
    uint64_t v19 = __cxa_allocate_exception(2uLL);
    if (v26) {
      int v20 = 7;
    }
    else {
      int v20 = 10;
    }
    *uint64_t v19 = OFAErrors(v20);
    uint64_t v21 = (struct type_info *)MEMORY[0x1E4FBA3C8];
    exception = v19;
    goto LABEL_16;
  }
  return 0;
}

void sub_1B5371430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

uint64_t ScalerGetTableParts(memoryContext *a1, unsigned int a2, unsigned int a3, unsigned int a4, void *a5, int a6)
{
  unsigned int v24 = 0;
  uint64_t v11 = *(void *)a1 + 16;
  FreeEntrCGFloat y = memoryContext::GetFreeEntry(a1);
  TFontSurrogate::GetTablePart(v11, &v24, a2, a3, a4, &v21);
  if ((uint64_t *)(FreeEntry + 16) != &v21)
  {
    TDataReference::DucRefCount((TDataReference *)(FreeEntry + 16));
    uint64_t v13 = v22;
    uint64_t v22 = 0;
    *(void *)(FreeEntry + 24) = v13;
    *(_OWORD *)(FreeEntry + 32) = v23;
  }
  TDataReference::~TDataReference((TDataReference *)&v21);
  uint64_t v14 = *(void *)(FreeEntry + 24);
  if (v14 && (uint64_t v15 = *(void *)(v14 + 8)) != 0)
  {
    uint64_t v16 = *(void *)(FreeEntry + 32);
    uint64_t v17 = v15 + v16;
    *a5 = v17;
    *(void *)FreeEntrCGFloat y = v17;
    *(_DWORD *)(FreeEntry + 8) = 1718578804;
    *(_DWORD *)(FreeEntry + 48) = *(_DWORD *)(FreeEntry + 40) - v16;
    return v24;
  }
  else
  {
    *a5 = 0;
    if (!a6)
    {
      exception = __cxa_allocate_exception(2uLL);
      if (v24) {
        int v20 = 7;
      }
      else {
        int v20 = 10;
      }
      _WORD *exception = OFAErrors(v20);
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
    return 0;
  }
}

void sub_1B537157C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  TDataReference::~TDataReference((TDataReference *)va);
  _Unwind_Resume(a1);
}

void *ScalerNewBlock(memoryContext *a1, signed int a2, int a3, void *a4, int a5, int a6, _WORD *a7)
{
  if ((a3 - 7) > 0xFFFFFFFD)
  {
    if (a3 == 5)
    {
      uint64_t v14 = *(void *)a1;
    }
    else
    {
      if (a3 != 6) {
        goto LABEL_17;
      }
      uint64_t v14 = *(void *)a1;
      if (*(unsigned char *)(*(void *)a1 + 61))
      {
        uint64_t v15 = *(unsigned int *)(v14 + 56);
        int v16 = *(_DWORD *)(v14 + 48) - v15;
        *(_DWORD *)(v14 + 52) = a2 + 36;
        if (v16 >= a2 + 36)
        {
          uint64_t v17 = *(void *)(v14 + 40) + v15;
          *(_DWORD *)(v14 + 56) = v15 + a2 + 36;
        }
        else
        {
          uint64_t v17 = 0;
        }
        if (v17) {
          uint64_t result = (void *)(v17 + 36);
        }
        else {
          uint64_t result = 0;
        }
        goto LABEL_18;
      }
    }
    uint64_t v20 = *(unsigned int *)(v14 + 56);
    signed int v21 = *(_DWORD *)(v14 + 48) - v20;
    *(_DWORD *)(v14 + 52) = a2;
    if (v21 >= a2)
    {
      uint64_t result = (void *)(*(void *)(v14 + 40) + v20);
      *(_DWORD *)(v14 + 56) = v20 + a2;
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (a4)
  {
    unsigned int v11 = *((_DWORD *)a1 + 4);
    if (v11)
    {
      FreeEntrCGFloat y = *((void *)a1 + 1);
      unint64_t v13 = FreeEntry + 56 * v11;
      while (*(void **)FreeEntry != a4)
      {
        FreeEntry += 56;
        if (FreeEntry >= v13) {
          goto LABEL_7;
        }
      }
      uint64_t result = ResizeRawMemory(a4, a2, 0);
      if (result) {
        goto LABEL_30;
      }
      goto LABEL_18;
    }
LABEL_7:
    puts("ScalerMemoryOFA2.c: FindABlock didn't!");
LABEL_17:
    uint64_t result = 0;
    goto LABEL_18;
  }
  FreeEntrCGFloat y = memoryContext::GetFreeEntry(a1);
  uint64_t result = AllocRawMemory(a2, a6);
  if (result)
  {
LABEL_30:
    *(_DWORD *)(FreeEntry + 8) = a3;
    *(void *)FreeEntrCGFloat y = result;
    *(_DWORD *)(FreeEntry + 48) = a2;
    return result;
  }
LABEL_18:
  if (!a5 && !result)
  {
    if (a3 == 5) {
      int v22 = 9;
    }
    else {
      int v22 = 6;
    }
    if (a3 == 6) {
      int v23 = 8;
    }
    else {
      int v23 = v22;
    }
    __int16 v24 = OFAErrors(v23);
    if (!a7)
    {
      exception = __cxa_allocate_exception(2uLL);
      _WORD *exception = v24;
      __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
    }
    uint64_t result = 0;
    *a7 = v24;
  }
  return result;
}

uint64_t ScalerGetBlockSize(memoryContext *a1, const void *a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    unint64_t v3 = *((void *)a1 + 1);
    unint64_t v4 = v3 + 56 * v2;
    while (*(const void **)v3 != a2)
    {
      v3 += 56;
      if (v3 >= v4) {
        goto LABEL_5;
      }
    }
    return *(unsigned int *)(v3 + 48);
  }
  else
  {
LABEL_5:
    puts("ScalerMemoryOFA2.c: FindABlock didn't!");
    return 0;
  }
}

void ScalerDetachBlock(memoryContext *a1, const void *a2)
{
  unsigned int v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    unint64_t v3 = *((void *)a1 + 1);
    unint64_t v4 = v3 + 56 * v2;
    while (*(const void **)v3 != a2)
    {
      v3 += 56;
      if (v3 >= v4) {
        goto LABEL_5;
      }
    }
    *(_DWORD *)(v3 + 8) = 1718773093;
    unint64_t v6 = &unk_1F0DD4218;
    uint64_t v7 = 0;
    long long v8 = 0uLL;
    if ((void **)(v3 + 16) != &v6)
    {
      TDataReference::DucRefCount((TDataReference *)(v3 + 16));
      uint64_t v5 = v7;
      uint64_t v7 = 0;
      *(void *)(v3 + 24) = v5;
      *(_OWORD *)(v3 + 32) = v8;
    }
    TDataReference::~TDataReference((TDataReference *)&v6);
    *(void *)unint64_t v3 = 1358921729;
    *(_DWORD *)(v3 + 48) = 0;
  }
  else
  {
LABEL_5:
    puts("ScalerMemoryOFA2.c: FindABlock didn't!");
  }
}

void sub_1B5371880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

size_t *ScalerNewScratch(memoryContext *a1, unsigned int a2, int a3)
{
  FreeEntrCGFloat y = memoryContext::GetFreeEntry(a1);
  uint64_t result = AllocRawMemory(a2, a3);
  if (!result)
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 20;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  *(_DWORD *)(FreeEntry + 8) = -1;
  *(void *)FreeEntrCGFloat y = result;
  *(_DWORD *)(FreeEntry + 48) = a2;
  return result;
}

const char *StreamT3Font(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v158 = *MEMORY[0x1E4F143B8];
  *(void *)unsigned int v155 = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v95 = *(unsigned int **)(v4 + 48);
  unint64_t v154 = 0xAAAAAAAAAAAAAAAALL;
  *(void *)&long long v5 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  long long v153 = v5;
  long long v152 = v5;
  long long v151 = v5;
  long long v150 = v5;
  long long v149 = v5;
  long long v148 = v5;
  long long v147 = v5;
  long long v146 = v5;
  long long v145 = v5;
  long long v144 = v5;
  long long v143 = v5;
  long long v142 = v5;
  long long v141 = v5;
  long long v140 = v5;
  long long v139 = v5;
  long long v138 = v5;
  long long v137 = v5;
  long long v136 = v5;
  long long v135 = v5;
  long long v134 = v5;
  long long v133 = v5;
  long long v132 = v5;
  long long v131 = v5;
  long long v130 = v5;
  long long v129 = v5;
  long long v128 = v5;
  long long v127 = v5;
  long long v126 = v5;
  long long v125 = v5;
  long long v124 = v5;
  long long v123 = v5;
  long long v122 = v5;
  long long v121 = v5;
  long long v120 = v5;
  long long v119 = v5;
  long long v118 = v5;
  v117[2] = v5;
  v117[1] = v5;
  v117[0] = v5;
  LODWORD(v128) = 0;
  memset(__b, 170, sizeof(__b));
  *(void *)&long long v6 = 0xAAAAAAAAAAAAAAAALL;
  *((void *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)((char *)v115 + 12) = v6;
  v114[1] = v6;
  v115[0] = v6;
  v114[0] = v6;
  v157[7] = v6;
  v157[6] = v6;
  v157[5] = v6;
  v157[4] = v6;
  v157[3] = v6;
  v157[2] = v6;
  v157[1] = v6;
  v157[0] = v6;
  if (!*(void *)(v4 + 56))
  {
    exception = __cxa_allocate_exception(2uLL);
    _WORD *exception = 1;
    __cxa_throw(exception, MEMORY[0x1E4FBA3C8], 0);
  }
  *((void *)&v147 + 1) = 0;
  unint64_t v113 = 0xAAAAAAAAAA000000;
  uint64_t v111 = 1358921729;
  uint64_t v112 = 1358921729;
  uint64_t v7 = *(void *)(a1 + 8);
  long long v105 = *(memoryContext **)a1;
  uint64_t v106 = v7;
  uint64_t v107 = 1358921729;
  long long v108 = v117;
  long long v109 = &v146;
  long long v110 = __b;
  __b[1] = 0;
  bzero(v117, 0x1F0uLL);
  DWORD1(v123) = 0x10000;
  DWORD1(v124) = 0x10000;
  BYTE8(v145) = 0;
  unsigned int v8 = sbit_CalculateTransformSpaceNeeded(v105, *(_DWORD *)(v7 + 164));
  DWORD2(v118) = 0;
  HIDWORD(v118) = v8;
  *(void *)&long long v119 = ScalerNewScratch(v105, v8, 0);
  DWORD2(v119) = v8;
  unint64_t v9 = ScalerNewScratch(v105, 0x60u, 0);
  uint64_t v10 = v9;
  unsigned int v11 = v117;
  *(void *)&long long v120 = v9;
  if (v9 != (size_t *)&identityMatrix)
  {
    *(_OWORD *)unint64_t v9 = identityMatrix;
    *((_OWORD *)v9 + 1) = unk_1B54013C8;
    *((_DWORD *)v9 + 8) = 0x40000000;
    unsigned int v11 = v108;
  }
  uint64_t v12 = v11 + 6;
  if (v12 != &identityMatrix)
  {
    *uint64_t v12 = identityMatrix;
    v12[1] = unk_1B54013C8;
    *((_DWORD *)v12 + 8) = 0x40000000;
  }
  *((unsigned char *)v9 + 92) = 0;
  if (!sbit_FontMatch(v105, (uint64_t)&v105, (uint64_t)v114, 0, 1))
  {
    int v89 = __cxa_allocate_exception(2uLL);
    *int v89 = 5;
    __cxa_throw(v89, MEMORY[0x1E4FBA3C8], 0);
  }
  if (v10 != (size_t *)&identityMatrix)
  {
    *(_OWORD *)uint64_t v10 = identityMatrix;
    *((_OWORD *)v10 + 1) = unk_1B54013C8;
    *((_DWORD *)v10 + 8) = 0x40000000;
  }
  uint64_t v13 = *((unsigned int *)v10 + 11);
  *(_DWORD *)(a2 + 131112) = 0;
  v98[0] = -1431655766;
  uint64_t v14 = (char *)ZGetString(100, v98);
  StreamBytesThroughBuffer(a2, v98[0], v14);
  v98[0] = -1431655766;
  uint64_t v15 = (char *)ZGetString(101, v98);
  StreamBytesThroughBuffer(a2, v98[0], v15);
  v98[0] = -1431655766;
  int v16 = (char *)ZGetString(102, v98);
  StreamBytesThroughBuffer(a2, v98[0], v16);
  ZWriteStringF(a2, 103, v17, v18, v19, v20, v21, v22, 0);
  v98[0] = -1431655766;
  int v23 = (char *)ZGetString(7, v98);
  StreamBytesThroughBuffer(a2, v98[0], v23);
  unsigned int FontTable = ScalerGetFontTable(v105, 1886352244, 0, v155, 0, 0);
  __int16 v24 = *(const void **)v155;
  DumpFontEncoding(v105, a2, *(uint64_t *)v155, FontTable);
  v98[0] = -1431655766;
  long long v25 = (char *)ZGetString(106, v98);
  StreamBytesThroughBuffer(a2, v98[0], v25);
  v98[0] = -1431655766;
  unsigned int v26 = (char *)ZGetString(116, v98);
  StreamBytesThroughBuffer(a2, v98[0], v26);
  v98[0] = -1431655766;
  size_t v27 = (char *)ZGetString(117, v98);
  StreamBytesThroughBuffer(a2, v98[0], v27);
  v98[0] = -1431655766;
  BOOL v28 = (char *)ZGetString(118, v98);
  StreamBytesThroughBuffer(a2, v98[0], v28);
  ZWriteStringF(a2, 108, v29, v30, v31, v32, v33, v34, v13);
  unsigned int v41 = *((unsigned __int16 *)v10 + 43);
  unsigned int v42 = *(unsigned __int16 *)(v106 + 40);
  if (v41 >= v42) {
    unsigned int v41 = v42 - 1;
  }
  CFStringRef v43 = v95;
  unsigned int v93 = v41;
  if (v95)
  {
    unsigned int v44 = v41 + 31;
    uint64_t v45 = (unsigned __int16)((v41 + 31) >> 5);
    if ((unsigned __int16)(v44 >> 5))
    {
      uint64_t v45 = 0;
      int v46 = v44 >> 5;
      do
      {
        unsigned int v47 = *v43;
        if (*v43)
        {
          int v48 = 32;
          do
          {
            uint64_t v45 = (v47 & 1) + v45;
            if (v47 < 2) {
              break;
            }
            v47 >>= 1;
            --v48;
          }
          while ((_WORD)v48);
        }
        ++v43;
        int v46 = (__int16)(v46 - 1);
      }
      while (v46 > 0);
    }
  }
  else
  {
    uint64_t v45 = 256;
  }
  ZWriteStringF(a2, 109, v35, v36, v37, v38, v39, v40, v45);
  unsigned int v49 = v93;
  if ((v93 & 0x80000000) == 0)
  {
    unsigned int v50 = 0;
    if (a3) {
      int v51 = 110;
    }
    else {
      int v51 = 122;
    }
    if (a3) {
      int v52 = 111;
    }
    else {
      int v52 = 123;
    }
    int v91 = v52;
    int v92 = v51;
    uint64_t v53 = v95;
    while (1)
    {
      if (v53 && ((v53[v50 >> 5] << v50) & 0x80000000) == 0) {
        goto LABEL_43;
      }
      unsigned __int8 v104 = -86;
      memset(v103, 170, sizeof(v103));
      memset(v100, 170, sizeof(v100));
      unint64_t v99 = 0xAAAAAAAAAAAAAAAALL;
      unsigned int v101 = v50;
      *(void *)CFStringRef v98 = 0;
      long long v102 = xmmword_1B5402AC0;
      sbit_IsThereAGlyphImage((uint64_t)&v105, (int *)&v101);
      sbit_GetBitMapInfo(&v105, (uint64_t)&v101, v50, (int32x2_t *)v98, v103, 0);
      ZGetGlyphName(*(uint64_t *)v155, FontTable, *(unsigned __int16 *)(v106 + 40), (unsigned __int16)v50, (char *)&v104, (char *)v157, 0x80uLL);
      uint64_t v97 = (void *)0xAAAAAAAAAAAAAAAALL;
      sbit_GetBitMapData((uint64_t)&v105, &v101, 0, &v97, 0, -1);
      int v60 = (char *)v97;
      int v61 = *(_DWORD *)v97;
      *(_WORD *)uint64_t v97 = bswap32(*(_DWORD *)v97) >> 16;
      if (v61 <= 0)
      {
        ZWriteStringF(a2, v92, v54, v55, v56, v57, v58, v59, v104);
        int v65 = 2;
      }
      else
      {
        int v62 = 0;
        double v63 = v60 + 2;
        double v64 = (unsigned int *)(v60 + 4);
        int v65 = 2;
        do
        {
          unsigned int v66 = *v64;
          int v67 = *v64 + 31;
          if ((int)*v64 < -31) {
            int v67 = *v64 + 62;
          }
          BOOL v68 = &v64[v67 >> 5];
          *(_WORD *)double v63 = bswap32(v66) >> 16;
          uint64_t v69 = (v68[1] + 0x8000) >> 16;
          v63[2] = (v68[1] + 0x8000) >> 16;
          uint64_t v70 = (v68[2] + 0x8000) >> 16;
          uint64_t v71 = v63 + 4;
          v63[3] = (v68[2] + 0x8000) >> 16;
          double v64 = v68 + 3;
          unsigned int v72 = v66 - 1;
          if (v66 != 1)
          {
            do
            {
              unsigned int v73 = *v64;
              unsigned int v74 = v64[1];
              v64 += 2;
              uint64_t v56 = (v73 + 0x8000) >> 16;
              uint64_t v57 = (v74 + 0x8000) >> 16;
              *uint64_t v71 = v56 - v69;
              v71[1] = v57 - v70;
              v71 += 2;
              uint64_t v70 = v57;
              uint64_t v69 = v56;
              --v72;
            }
            while (v72);
          }
          v65 += 2 * v66 + 2;
          ++v62;
          double v63 = v71;
        }
        while (v62 != v61);
        ZWriteStringF(a2, v92, v69, v70, v56, v57, v58, v59, v104);
        if (v65 <= 0) {
          goto LABEL_42;
        }
      }
      ZWriteDataHex(a2, v65, (char *)v97, a3);
LABEL_42:
      int v156 = -1431655766;
      int v75 = (char *)ZGetString(v91, &v156);
      StreamBytesThroughBuffer(a2, v156, v75);
      ScalerDisposeBlock(v105, (char *)v97, -1);
      uint64_t v53 = v95;
      unsigned int v49 = v93;
LABEL_43:
      if (v50++ == v49)
      {
        __int16 v24 = *(const void **)v155;
        break;
      }
    }
  }
  ScalerDisposeBlock(v105, *((char **)v108 + 8), -1);
  ScalerDisposeBlock(v105, *((char **)v108 + 10), -1);
  ScalerReleaseFontTable(v105, v24);
  v98[0] = -1431655766;
  unsigned int v77 = (char *)ZGetString(112, v98);
  StreamBytesThroughBuffer(a2, v98[0], v77);
  long long v84 = *(unsigned char **)(*(void *)(a2 + 8) + 56);
  uint64_t v85 = *v84;
  if (*v84)
  {
    uint64_t v85 = 0;
    while (v84[++v85])
      ;
  }
  return ZWriteStringF(a2, 113, v78, v79, v80, v81, v82, v83, v85);
}

uint64_t sub_1B53721F8()
{
  return MEMORY[0x1F40E3340]();
}

uint64_t sub_1B5372208()
{
  return MEMORY[0x1F40E3368]();
}

uint64_t sub_1B5372218()
{
  return MEMORY[0x1F40E3388]();
}

uint64_t sub_1B5372228()
{
  return MEMORY[0x1F40E3418]();
}

uint64_t sub_1B5372238()
{
  return MEMORY[0x1F40E3420]();
}

uint64_t sub_1B5372248()
{
  return MEMORY[0x1F40E37C0]();
}

uint64_t sub_1B5372258()
{
  return MEMORY[0x1F40E37D0]();
}

uint64_t sub_1B5372268()
{
  return MEMORY[0x1F40E37E0]();
}

uint64_t sub_1B5372278()
{
  return MEMORY[0x1F40E37F0]();
}

uint64_t sub_1B5372288()
{
  return MEMORY[0x1F40E3800]();
}

uint64_t sub_1B5372298()
{
  return MEMORY[0x1F40E3818]();
}

uint64_t sub_1B53722A8()
{
  return MEMORY[0x1F40E3820]();
}

uint64_t sub_1B53722B8()
{
  return MEMORY[0x1F40E3830]();
}

uint64_t sub_1B53722C8()
{
  return MEMORY[0x1F40E3B70]();
}

uint64_t sub_1B53722D8()
{
  return MEMORY[0x1F40E4550]();
}

uint64_t sub_1B53722E8()
{
  return MEMORY[0x1F40E4B80]();
}

uint64_t sub_1B53722F8()
{
  return MEMORY[0x1F40E4BC8]();
}

uint64_t sub_1B5372308()
{
  return MEMORY[0x1F40E4BE0]();
}

uint64_t sub_1B5372318()
{
  return MEMORY[0x1F40E4BF0]();
}

uint64_t sub_1B5372328()
{
  return MEMORY[0x1F40E4C00]();
}

uint64_t sub_1B5372338()
{
  return MEMORY[0x1F40E4C08]();
}

uint64_t sub_1B5372348()
{
  return MEMORY[0x1F40E4C68]();
}

uint64_t sub_1B5372358()
{
  return MEMORY[0x1F40E4C80]();
}

uint64_t sub_1B5372368()
{
  return MEMORY[0x1F40E4CA8]();
}

uint64_t sub_1B5372378()
{
  return MEMORY[0x1F40E4CB8]();
}

uint64_t sub_1B5372388()
{
  return MEMORY[0x1F40E4CD8]();
}

uint64_t sub_1B5372398()
{
  return MEMORY[0x1F40E4CF8]();
}

uint64_t sub_1B53723A8()
{
  return MEMORY[0x1F40E4D10]();
}

uint64_t sub_1B53723B8()
{
  return MEMORY[0x1F40E4D30]();
}

uint64_t sub_1B53723C8()
{
  return MEMORY[0x1F40E4D48]();
}

uint64_t sub_1B53723D8()
{
  return MEMORY[0x1F40E4D70]();
}

uint64_t sub_1B53723E8()
{
  return MEMORY[0x1F40E4DA8]();
}

uint64_t sub_1B53723F8()
{
  return MEMORY[0x1F40E4DB8]();
}

uint64_t sub_1B5372408()
{
  return MEMORY[0x1F40E4E30]();
}

uint64_t sub_1B5372418()
{
  return MEMORY[0x1F40E4E60]();
}

uint64_t sub_1B5372428()
{
  return MEMORY[0x1F40E4E70]();
}

uint64_t sub_1B5372438()
{
  return MEMORY[0x1F40E4EC8]();
}

uint64_t sub_1B5372448()
{
  return MEMORY[0x1F40E5660]();
}

uint64_t sub_1B5372458()
{
  return MEMORY[0x1F40E5680]();
}

uint64_t sub_1B5372468()
{
  return MEMORY[0x1F4186958]();
}

uint64_t sub_1B5372478()
{
  return MEMORY[0x1F4186968]();
}

uint64_t sub_1B5372488()
{
  return MEMORY[0x1F4186978]();
}

uint64_t sub_1B5372498()
{
  return MEMORY[0x1F413A268]();
}

uint64_t sub_1B53724A8()
{
  return MEMORY[0x1F413A270]();
}

uint64_t sub_1B53724B8()
{
  return MEMORY[0x1F413A278]();
}

uint64_t sub_1B53724C8()
{
  return MEMORY[0x1F413A280]();
}

uint64_t sub_1B53724D8()
{
  return MEMORY[0x1F413A288]();
}

uint64_t sub_1B53724E8()
{
  return MEMORY[0x1F413A290]();
}

uint64_t sub_1B53724F8()
{
  return MEMORY[0x1F413A298]();
}

uint64_t sub_1B5372508()
{
  return MEMORY[0x1F413A2A0]();
}

uint64_t sub_1B5372518()
{
  return MEMORY[0x1F413A2A8]();
}

uint64_t sub_1B5372528()
{
  return MEMORY[0x1F413A2B0]();
}

uint64_t sub_1B5372538()
{
  return MEMORY[0x1F413A2B8]();
}

uint64_t sub_1B5372548()
{
  return MEMORY[0x1F413A2C0]();
}

uint64_t sub_1B5372558()
{
  return MEMORY[0x1F413A2C8]();
}

uint64_t sub_1B5372568()
{
  return MEMORY[0x1F41832C0]();
}

uint64_t sub_1B5372578()
{
  return MEMORY[0x1F40E6000]();
}

uint64_t sub_1B5372588()
{
  return MEMORY[0x1F4183340]();
}

uint64_t sub_1B5372598()
{
  return MEMORY[0x1F4183568]();
}

uint64_t sub_1B53725A8()
{
  return MEMORY[0x1F41835C0]();
}

uint64_t sub_1B53725B8()
{
  return MEMORY[0x1F41835C8]();
}

uint64_t sub_1B53725C8()
{
  return MEMORY[0x1F4183638]();
}

uint64_t sub_1B53725D8()
{
  return MEMORY[0x1F4183640]();
}

uint64_t sub_1B53725E8()
{
  return MEMORY[0x1F4183658]();
}

uint64_t sub_1B53725F8()
{
  return MEMORY[0x1F4183730]();
}

uint64_t sub_1B5372608()
{
  return MEMORY[0x1F4183740]();
}

uint64_t sub_1B5372618()
{
  return MEMORY[0x1F4183748]();
}

uint64_t sub_1B5372628()
{
  return MEMORY[0x1F4183750]();
}

uint64_t sub_1B5372638()
{
  return MEMORY[0x1F4183788]();
}

uint64_t sub_1B5372648()
{
  return MEMORY[0x1F4183790]();
}

uint64_t sub_1B5372658()
{
  return MEMORY[0x1F4183798]();
}

uint64_t sub_1B5372668()
{
  return MEMORY[0x1F41837A0]();
}

uint64_t sub_1B5372678()
{
  return MEMORY[0x1F41837E0]();
}

uint64_t sub_1B5372688()
{
  return MEMORY[0x1F4183808]();
}

uint64_t sub_1B5372698()
{
  return MEMORY[0x1F4183838]();
}

uint64_t sub_1B53726A8()
{
  return MEMORY[0x1F4183870]();
}

uint64_t sub_1B53726B8()
{
  return MEMORY[0x1F4183878]();
}

uint64_t sub_1B53726C8()
{
  return MEMORY[0x1F40E6190]();
}

uint64_t sub_1B53726D8()
{
  return MEMORY[0x1F40E61C8]();
}

uint64_t sub_1B53726E8()
{
  return MEMORY[0x1F40E61D8]();
}

uint64_t sub_1B53726F8()
{
  return MEMORY[0x1F40E61E8]();
}

uint64_t sub_1B5372708()
{
  return MEMORY[0x1F40E61F8]();
}

uint64_t sub_1B5372718()
{
  return MEMORY[0x1F40E6200]();
}

uint64_t sub_1B5372728()
{
  return MEMORY[0x1F40E6248]();
}

uint64_t sub_1B5372738()
{
  return MEMORY[0x1F40E6258]();
}

uint64_t sub_1B5372748()
{
  return MEMORY[0x1F40E6260]();
}

uint64_t sub_1B5372758()
{
  return MEMORY[0x1F40E6268]();
}

uint64_t sub_1B5372768()
{
  return MEMORY[0x1F40E6278]();
}

uint64_t sub_1B5372778()
{
  return MEMORY[0x1F40E6290]();
}

uint64_t sub_1B5372788()
{
  return MEMORY[0x1F40E62A0]();
}

uint64_t sub_1B5372798()
{
  return MEMORY[0x1F4183880]();
}

uint64_t sub_1B53727A8()
{
  return MEMORY[0x1F41838B8]();
}

uint64_t sub_1B53727B8()
{
  return MEMORY[0x1F41838C8]();
}

uint64_t sub_1B53727C8()
{
  return MEMORY[0x1F41838D0]();
}

uint64_t sub_1B53727D8()
{
  return MEMORY[0x1F41838D8]();
}

uint64_t sub_1B53727E8()
{
  return MEMORY[0x1F4183920]();
}

uint64_t sub_1B53727F8()
{
  return MEMORY[0x1F4183928]();
}

uint64_t sub_1B5372808()
{
  return MEMORY[0x1F4183950]();
}

uint64_t sub_1B5372818()
{
  return MEMORY[0x1F4183958]();
}

uint64_t sub_1B5372828()
{
  return MEMORY[0x1F41839B0]();
}

uint64_t sub_1B5372838()
{
  return MEMORY[0x1F41839F8]();
}

uint64_t sub_1B5372848()
{
  return MEMORY[0x1F4183A08]();
}

uint64_t sub_1B5372858()
{
  return MEMORY[0x1F4183A28]();
}

uint64_t sub_1B5372868()
{
  return MEMORY[0x1F4183A38]();
}

uint64_t sub_1B5372878()
{
  return MEMORY[0x1F4183A60]();
}

uint64_t sub_1B5372888()
{
  return MEMORY[0x1F4183A78]();
}

uint64_t sub_1B5372898()
{
  return MEMORY[0x1F4183A80]();
}

uint64_t sub_1B53728A8()
{
  return MEMORY[0x1F4183A88]();
}

uint64_t sub_1B53728B8()
{
  return MEMORY[0x1F4183AA0]();
}

uint64_t sub_1B53728D8()
{
  return MEMORY[0x1F4183AB0]();
}

uint64_t sub_1B53728E8()
{
  return MEMORY[0x1F4183AD8]();
}

uint64_t sub_1B53728F8()
{
  return MEMORY[0x1F4183AF0]();
}

uint64_t sub_1B5372908()
{
  return MEMORY[0x1F4183B10]();
}

uint64_t sub_1B5372918()
{
  return MEMORY[0x1F4183B30]();
}

uint64_t sub_1B5372928()
{
  return MEMORY[0x1F4183B50]();
}

uint64_t sub_1B5372938()
{
  return MEMORY[0x1F4183B58]();
}

uint64_t sub_1B5372948()
{
  return MEMORY[0x1F4183BA0]();
}

uint64_t sub_1B5372958()
{
  return MEMORY[0x1F4183BA8]();
}

uint64_t sub_1B5372968()
{
  return MEMORY[0x1F4183BD0]();
}

uint64_t sub_1B5372978()
{
  return MEMORY[0x1F4183BF8]();
}

uint64_t sub_1B5372988()
{
  return MEMORY[0x1F4183C10]();
}

uint64_t sub_1B5372998()
{
  return MEMORY[0x1F4183C18]();
}

uint64_t sub_1B53729A8()
{
  return MEMORY[0x1F4183C68]();
}

uint64_t sub_1B53729B8()
{
  return MEMORY[0x1F4183D68]();
}

uint64_t sub_1B53729C8()
{
  return MEMORY[0x1F4183D70]();
}

uint64_t sub_1B53729D8()
{
  return MEMORY[0x1F4183D78]();
}

uint64_t sub_1B53729E8()
{
  return MEMORY[0x1F4183DC8]();
}

uint64_t sub_1B53729F8()
{
  return MEMORY[0x1F4183E40]();
}

uint64_t sub_1B5372A08()
{
  return MEMORY[0x1F4183E80]();
}

uint64_t sub_1B5372A18()
{
  return MEMORY[0x1F40E6338]();
}

uint64_t sub_1B5372A28()
{
  return MEMORY[0x1F4183E98]();
}

uint64_t sub_1B5372A38()
{
  return MEMORY[0x1F4183EA0]();
}

uint64_t sub_1B5372A48()
{
  return MEMORY[0x1F4183EA8]();
}

uint64_t sub_1B5372A58()
{
  return MEMORY[0x1F4183EC8]();
}

uint64_t sub_1B5372A68()
{
  return MEMORY[0x1F4183EE8]();
}

uint64_t sub_1B5372A78()
{
  return MEMORY[0x1F4183F00]();
}

uint64_t sub_1B5372A88()
{
  return MEMORY[0x1F4183F08]();
}

uint64_t sub_1B5372A98()
{
  return MEMORY[0x1F4183F18]();
}

uint64_t sub_1B5372AA8()
{
  return MEMORY[0x1F4183F38]();
}

uint64_t sub_1B5372AB8()
{
  return MEMORY[0x1F4183F40]();
}

uint64_t sub_1B5372AC8()
{
  return MEMORY[0x1F4183F60]();
}

uint64_t sub_1B5372AD8()
{
  return MEMORY[0x1F4183F78]();
}

uint64_t sub_1B5372AE8()
{
  return MEMORY[0x1F4183FA8]();
}

uint64_t sub_1B5372AF8()
{
  return MEMORY[0x1F4183FF0]();
}

uint64_t sub_1B5372B08()
{
  return MEMORY[0x1F4184008]();
}

uint64_t sub_1B5372B18()
{
  return MEMORY[0x1F4184048]();
}

uint64_t sub_1B5372B28()
{
  return MEMORY[0x1F4184098]();
}

uint64_t sub_1B5372B38()
{
  return MEMORY[0x1F41840B0]();
}

uint64_t sub_1B5372B48()
{
  return MEMORY[0x1F41840C8]();
}

uint64_t sub_1B5372B58()
{
  return MEMORY[0x1F4184138]();
}

uint64_t sub_1B5372B68()
{
  return MEMORY[0x1F4184280]();
}

uint64_t sub_1B5372B78()
{
  return MEMORY[0x1F41842C0]();
}

uint64_t sub_1B5372B88()
{
  return MEMORY[0x1F41842D0]();
}

uint64_t sub_1B5372B98()
{
  return MEMORY[0x1F41842F8]();
}

uint64_t sub_1B5372BA8()
{
  return MEMORY[0x1F4184300]();
}

uint64_t sub_1B5372BB8()
{
  return MEMORY[0x1F4184320]();
}

uint64_t sub_1B5372BC8()
{
  return MEMORY[0x1F4184330]();
}

uint64_t sub_1B5372BD8()
{
  return MEMORY[0x1F4184338]();
}

uint64_t sub_1B5372BE8()
{
  return MEMORY[0x1F4184348]();
}

uint64_t sub_1B5372C18()
{
  return MEMORY[0x1F4184390]();
}

uint64_t sub_1B5372C28()
{
  return MEMORY[0x1F4184398]();
}

uint64_t sub_1B5372C38()
{
  return MEMORY[0x1F41843A0]();
}

uint64_t sub_1B5372C48()
{
  return MEMORY[0x1F41843A8]();
}

uint64_t sub_1B5372C58()
{
  return MEMORY[0x1F41843D0]();
}

uint64_t sub_1B5372C68()
{
  return MEMORY[0x1F41843D8]();
}

uint64_t sub_1B5372C78()
{
  return MEMORY[0x1F4184400]();
}

uint64_t sub_1B5372C88()
{
  return MEMORY[0x1F4184410]();
}

uint64_t sub_1B5372C98()
{
  return MEMORY[0x1F4184430]();
}

uint64_t sub_1B5372CA8()
{
  return MEMORY[0x1F4184440]();
}

uint64_t sub_1B5372CB8()
{
  return MEMORY[0x1F41845B0]();
}

uint64_t sub_1B5372CC8()
{
  return MEMORY[0x1F4184610]();
}

uint64_t sub_1B5372CD8()
{
  return MEMORY[0x1F4184640]();
}

uint64_t sub_1B5372CE8()
{
  return MEMORY[0x1F41846A8]();
}

uint64_t sub_1B5372CF8()
{
  return MEMORY[0x1F41846B0]();
}

uint64_t sub_1B5372D08()
{
  return MEMORY[0x1F41846B8]();
}

uint64_t sub_1B5372D18()
{
  return MEMORY[0x1F41846C0]();
}

uint64_t sub_1B5372D28()
{
  return MEMORY[0x1F41846C8]();
}

uint64_t sub_1B5372D38()
{
  return MEMORY[0x1F41846D0]();
}

uint64_t sub_1B5372D48()
{
  return MEMORY[0x1F4184720]();
}

uint64_t sub_1B5372D58()
{
  return MEMORY[0x1F4184770]();
}

uint64_t sub_1B5372D68()
{
  return MEMORY[0x1F4184780]();
}

uint64_t sub_1B5372D78()
{
  return MEMORY[0x1F4184790]();
}

uint64_t sub_1B5372D88()
{
  return MEMORY[0x1F41847A0]();
}

uint64_t sub_1B5372D98()
{
  return MEMORY[0x1F40E6B98]();
}

uint64_t sub_1B5372DA8()
{
  return MEMORY[0x1F4184830]();
}

uint64_t sub_1B5372DB8()
{
  return MEMORY[0x1F4184838]();
}

uint64_t sub_1B5372DC8()
{
  return MEMORY[0x1F40E6C68]();
}

uint64_t sub_1B5372DD8()
{
  return MEMORY[0x1F41876A8]();
}

uint64_t sub_1B5372DE8()
{
  return MEMORY[0x1F41848C0]();
}

uint64_t sub_1B5372DF8()
{
  return MEMORY[0x1F41848C8]();
}

uint64_t sub_1B5372E08()
{
  return MEMORY[0x1F41848D0]();
}

uint64_t sub_1B5372E18()
{
  return MEMORY[0x1F41848E8]();
}

uint64_t sub_1B5372E28()
{
  return MEMORY[0x1F4184900]();
}

uint64_t sub_1B5372E38()
{
  return MEMORY[0x1F4184908]();
}

uint64_t sub_1B5372E48()
{
  return MEMORY[0x1F4184910]();
}

uint64_t sub_1B5372E58()
{
  return MEMORY[0x1F4184938]();
}

uint64_t sub_1B5372E68()
{
  return MEMORY[0x1F4184940]();
}

uint64_t sub_1B5372E78()
{
  return MEMORY[0x1F4184950]();
}

uint64_t sub_1B5372E88()
{
  return MEMORY[0x1F4184958]();
}

uint64_t sub_1B5372E98()
{
  return MEMORY[0x1F4184970]();
}

uint64_t sub_1B5372EA8()
{
  return MEMORY[0x1F4184978]();
}

uint64_t sub_1B5372EB8()
{
  return MEMORY[0x1F41849E8]();
}

uint64_t sub_1B5372EC8()
{
  return MEMORY[0x1F41849F0]();
}

uint64_t sub_1B5372EE8()
{
  return MEMORY[0x1F4184A20]();
}

uint64_t sub_1B5372F18()
{
  return MEMORY[0x1F4184B20]();
}

uint64_t sub_1B5372F28()
{
  return MEMORY[0x1F4184C90]();
}

uint64_t sub_1B5372F38()
{
  return MEMORY[0x1F4184C98]();
}

uint64_t sub_1B5372F48()
{
  return MEMORY[0x1F4184CA8]();
}

uint64_t sub_1B5372F58()
{
  return MEMORY[0x1F4184CC0]();
}

uint64_t sub_1B5372F68()
{
  return MEMORY[0x1F4184CC8]();
}

uint64_t sub_1B5372F88()
{
  return MEMORY[0x1F4184CE0]();
}

uint64_t sub_1B5372F98()
{
  return MEMORY[0x1F4184CE8]();
}

uint64_t sub_1B5372FA8()
{
  return MEMORY[0x1F4184D78]();
}

uint64_t sub_1B5372FB8()
{
  return MEMORY[0x1F4184E68]();
}

uint64_t sub_1B5372FC8()
{
  return MEMORY[0x1F4184E70]();
}

uint64_t sub_1B5372FD8()
{
  return MEMORY[0x1F4184F08]();
}

uint64_t sub_1B5372FE8()
{
  return MEMORY[0x1F4184F18]();
}

uint64_t sub_1B5373018()
{
  return MEMORY[0x1F4185050]();
}

uint64_t sub_1B5373028()
{
  return MEMORY[0x1F4185068]();
}

uint64_t sub_1B5373038()
{
  return MEMORY[0x1F4185070]();
}

uint64_t sub_1B5373048()
{
  return MEMORY[0x1F4185078]();
}

uint64_t sub_1B5373058()
{
  return MEMORY[0x1F41850E0]();
}

uint64_t sub_1B5373068()
{
  return MEMORY[0x1F41850F0]();
}

uint64_t sub_1B5373078()
{
  return MEMORY[0x1F41850F8]();
}

uint64_t sub_1B5373088()
{
  return MEMORY[0x1F4185118]();
}

uint64_t sub_1B5373098()
{
  return MEMORY[0x1F41851F8]();
}

uint64_t sub_1B53730A8()
{
  return MEMORY[0x1F4185238]();
}

uint64_t sub_1B53730B8()
{
  return MEMORY[0x1F4185270]();
}

uint64_t sub_1B53730C8()
{
  return MEMORY[0x1F41852A0]();
}

uint64_t sub_1B53730D8()
{
  return MEMORY[0x1F41852C0]();
}

uint64_t sub_1B53730E8()
{
  return MEMORY[0x1F41852C8]();
}

uint64_t sub_1B53730F8()
{
  return MEMORY[0x1F41852E0]();
}

uint64_t sub_1B5373108()
{
  return MEMORY[0x1F4185368]();
}

uint64_t sub_1B5373118()
{
  return MEMORY[0x1F4185370]();
}

uint64_t sub_1B5373128()
{
  return MEMORY[0x1F4185378]();
}

uint64_t sub_1B5373138()
{
  return MEMORY[0x1F4185380]();
}

uint64_t sub_1B5373148()
{
  return MEMORY[0x1F41854C8]();
}

uint64_t sub_1B5373158()
{
  return MEMORY[0x1F4185568]();
}

uint64_t sub_1B5373168()
{
  return MEMORY[0x1F4185588]();
}

uint64_t sub_1B5373178()
{
  return MEMORY[0x1F4185598]();
}

uint64_t sub_1B5373188()
{
  return MEMORY[0x1F41855C8]();
}

uint64_t sub_1B5373198()
{
  return MEMORY[0x1F4185690]();
}

uint64_t sub_1B53731A8()
{
  return MEMORY[0x1F41856B0]();
}

uint64_t sub_1B53731B8()
{
  return MEMORY[0x1F41856C0]();
}

uint64_t sub_1B53731C8()
{
  return MEMORY[0x1F41856F0]();
}

uint64_t sub_1B53731D8()
{
  return MEMORY[0x1F4185740]();
}

uint64_t sub_1B53731E8()
{
  return MEMORY[0x1F4185748]();
}

uint64_t sub_1B53731F8()
{
  return MEMORY[0x1F4185758]();
}

uint64_t sub_1B5373218()
{
  return MEMORY[0x1F4185A20]();
}

uint64_t sub_1B5373228()
{
  return MEMORY[0x1F4185A40]();
}

uint64_t sub_1B5373238()
{
  return MEMORY[0x1F4185B98]();
}

uint64_t sub_1B5373248()
{
  return MEMORY[0x1F4185CF8]();
}

uint64_t sub_1B5373258()
{
  return MEMORY[0x1F4185D38]();
}

uint64_t sub_1B5373268()
{
  return MEMORY[0x1F4185D58]();
}

uint64_t sub_1B5373278()
{
  return MEMORY[0x1F4185DD8]();
}

uint64_t sub_1B5373288()
{
  return MEMORY[0x1F4185DE0]();
}

uint64_t sub_1B5373298()
{
  return MEMORY[0x1F4185E00]();
}

uint64_t sub_1B53732A8()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t sub_1B53732B8()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t sub_1B53732C8()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t sub_1B53732D8()
{
  return MEMORY[0x1F4185E98]();
}

uint64_t sub_1B53732E8()
{
  return MEMORY[0x1F4185EA8]();
}

uint64_t sub_1B53732F8()
{
  return MEMORY[0x1F4185EB0]();
}

uint64_t sub_1B5373308()
{
  return MEMORY[0x1F4185EC8]();
}

uint64_t sub_1B5373318()
{
  return MEMORY[0x1F4185ED0]();
}

uint64_t sub_1B5373328()
{
  return MEMORY[0x1F4185ED8]();
}

uint64_t sub_1B5373338()
{
  return MEMORY[0x1F4185EE0]();
}

uint64_t sub_1B5373348()
{
  return MEMORY[0x1F4185EE8]();
}

uint64_t sub_1B5373358()
{
  return MEMORY[0x1F4185EF8]();
}

uint64_t sub_1B5373368()
{
  return MEMORY[0x1F4185FC8]();
}

uint64_t sub_1B5373378()
{
  return MEMORY[0x1F4185FF0]();
}

uint64_t sub_1B5373388()
{
  return MEMORY[0x1F4186078]();
}

uint64_t sub_1B5373398()
{
  return MEMORY[0x1F41860D8]();
}

uint64_t sub_1B53733A8()
{
  return MEMORY[0x1F41860E8]();
}

uint64_t sub_1B53733B8()
{
  return MEMORY[0x1F41860F0]();
}

uint64_t sub_1B53733C8()
{
  return MEMORY[0x1F4186110]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void *context)
{
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D7160](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
}

void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx)
{
}

void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void **newValues, CFIndex newCount)
{
}

void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void *context)
{
}

void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
}

void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString)
{
}

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet)
{
  return (CFCharacterSetRef)MEMORY[0x1F40D7708](alloc, theSet);
}

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc)
{
  return (CFMutableCharacterSetRef)MEMORY[0x1F40D7718](alloc);
}

void CFCharacterSetRemoveCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange)
{
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7810](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength)
{
}

void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength)
{
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFArrayRef CFLocaleCopyAvailableLocaleIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BB0]();
}

CFArrayRef CFLocaleCopyPreferredLanguages(void)
{
  return (CFArrayRef)MEMORY[0x1F40D7BD8]();
}

CFLocaleIdentifier CFLocaleCreateCanonicalLanguageIdentifierFromString(CFAllocatorRef allocator, CFStringRef localeIdentifier)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BE8](allocator, localeIdentifier);
}

CFLocaleIdentifier CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(CFAllocatorRef allocator, LangCode lcode, RegionCode rcode)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7BF0](allocator, lcode, rcode);
}

CFLocaleIdentifier CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(CFAllocatorRef allocator, uint32_t lcid)
{
  return (CFLocaleIdentifier)MEMORY[0x1F40D7C18](allocator, *(void *)&lcid);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F50](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1F40D81F8](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1F40D8210](allocator, capacity, callBacks);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

void CFStringAppendFormatAndArguments(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1F40D83D0](alloc, theString, separatorString);
}

CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString)
{
  return (CFStringRef)MEMORY[0x1F40D83E0](alloc, theArray, separatorString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1F40D83F8](alloc, theString, *(void *)&encoding, lossByte);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8408](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x1F40D8410](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8438](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8460](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1F40D8470](alloc, chars, numChars, contentsDeallocator);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

const UniChar *__cdecl CFStringGetCharactersPtr(CFStringRef theString)
{
  return (const UniChar *)MEMORY[0x1F40D8540](theString);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  MEMORY[0x1F40D8548](str);
  return result;
}

Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1F40D8558](string, buffer, maxBufLen);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string)
{
  return MEMORY[0x1F40D85A0](string);
}

Boolean CFStringGetPascalString(CFStringRef theString, StringPtr buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D85C0](theString, buffer, bufferSize, *(void *)&encoding);
}

ConstStringPtr CFStringGetPascalStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (ConstStringPtr)MEMORY[0x1F40D85C8](theString, *(void *)&encoding);
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

uint64_t CFStringHashCString()
{
  return MEMORY[0x1F40D8610]();
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1F40D97B0](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

uint64_t CGFontIndexMapAddRange()
{
  return MEMORY[0x1F40DA588]();
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathAddQuadCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cpx, CGFloat cpy, CGFloat x, CGFloat y)
{
}

void CGPathApplyWithBlock(CGPathRef path, CGPathApplyBlock block)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x1F40DB010](path);
}

CGPathRef CGPathCreateCopyByNormalizing(CGPathRef path, BOOL evenOddFillRule)
{
  return (CGPathRef)MEMORY[0x1F40DB030](path, evenOddFillRule);
}

CGPathRef CGPathCreateCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1F40DB048](path, transform);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  MEMORY[0x1F40DB0D0](path);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x1F40DB120](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

void NSLog(NSString *format, ...)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

uint64_t _CFAppVersionCheck()
{
  return MEMORY[0x1F40D8B18]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t HVF::PartTransformRenderer::setRenderPart(HVF::PartTransformRenderer *this)
{
  return MEMORY[0x1F4119EE0](this);
}

uint64_t HVF::PartTransformRenderer::renderToContext()
{
  return MEMORY[0x1F4119EE8]();
}

uint64_t HVF::PartTransformRenderer::PartTransformRenderer()
{
  return MEMORY[0x1F4119EF0]();
}

void HVF::PartTransformRenderer::~PartTransformRenderer(HVF::PartTransformRenderer *this)
{
}

uint64_t HVF::Loader::withTableData(HVF::Loader *this, const void *a2)
{
  return MEMORY[0x1F4119F00](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1F417E580](a1);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<short,short> &,short *>()
{
  return MEMORY[0x1F417EC70]();
}

uint64_t std::__sort<std::__less<unsigned short,unsigned short> &,unsigned short *>()
{
  return MEMORY[0x1F417EC78]();
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new[](size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

void __cxa_bad_cast(void)
{
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1F40C9CF8](*(void *)&a1);
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

uint64_t _swift_isClassOrObjCExistentialType()
{
  return MEMORY[0x1F4186340]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x1F4186388]();
}

uint64_t _swift_stdlib_strtof_clocale()
{
  return MEMORY[0x1F41863A0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1F40CA1E8]();
}

double atof_l(const char *a1, locale_t a2)
{
  MEMORY[0x1F40CA4A0](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

int atoi_l(const char *a1, locale_t a2)
{
  return MEMORY[0x1F40CA4B0](a1, a2);
}

uint64_t atol_l(const char *a1, locale_t a2)
{
  return MEMORY[0x1F40CA4C0](a1, a2);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1F40CA570](__key, __base, __nel, __width, __compar);
}

void *__cdecl bsearch_b(const void *__key, const void *__base, size_t __nel, size_t __width, void *__compar)
{
  return (void *)MEMORY[0x1F40CA578](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

size_t compression_decode_buffer(uint8_t *dst_buffer, size_t dst_size, const uint8_t *src_buffer, size_t src_size, void *scratch_buffer, compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0A0](dst_buffer, dst_size, src_buffer, src_size, scratch_buffer, *(void *)&algorithm);
}

size_t compression_decode_scratch_buffer_size(compression_algorithm algorithm)
{
  return MEMORY[0x1F417F0A8](*(void *)&algorithm);
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

void free(void *a1)
{
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1F40CC2B8](*(void *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

tm *__cdecl gmtime_r(const time_t *a1, tm *a2)
{
  return (tm *)MEMORY[0x1F40CC5B0](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

long double log10(long double __x)
{
  MEMORY[0x1F40CC880](__x);
  return result;
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1F40CCB10](__size);
}

size_t malloc_good_size(size_t size)
{
  return MEMORY[0x1F40CCB58](size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x1F4181640](a1);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F4181798](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C8](a1);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

void *__cdecl reallocf(void *__ptr, size_t __size)
{
  return (void *)MEMORY[0x1F40CDC88](__ptr, __size);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int snprintf_l(char *a1, size_t a2, locale_t a3, const char *a4, ...)
{
  return MEMORY[0x1F40CE088](a1, a2, a3, a4);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CE0D0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strcpy(char *__dst, const char *__src)
{
  return (char *)MEMORY[0x1F40CE168](__dst, __src);
}

size_t strlcat(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1A8](__dst, __source, __size);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x1F40CE200](__s1, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1F40CE208](__s1, __n);
}

char *__cdecl strnstr(const char *__big, const char *__little, size_t __len)
{
  return (char *)MEMORY[0x1F40CE210](__big, __little, __len);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

uint64_t strtol_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1F40CE2A8](a1, a2, *(void *)&a3, a4);
}

unint64_t strtoul_l(const char *a1, char **a2, int a3, locale_t a4)
{
  return MEMORY[0x1F40CE2E8](a1, a2, *(void *)&a3, a4);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x1F41863D0]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x1F41863E0]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x1F41863E8]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x1F4186410]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x1F4186418]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x1F4186430]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x1F4186440]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x1F4186448]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x1F4186450]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x1F4186458]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x1F4186460]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x1F4186488]();
}

uint64_t swift_deallocPartialClassInstance()
{
  return MEMORY[0x1F41864A0]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x1F41864B8]();
}

uint64_t swift_dynamicCastClass()
{
  return MEMORY[0x1F41864C0]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x1F4186518]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x1F4186528]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x1F4186530]();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return MEMORY[0x1F4186538]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x1F4186540]();
}

uint64_t swift_getAtKeyPath()
{
  return MEMORY[0x1F4186550]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x1F4186570]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x1F41865A8]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x1F41865E0]();
}

uint64_t swift_getKeyPath()
{
  return MEMORY[0x1F41865E8]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x1F4186608]();
}

uint64_t swift_getOpaqueTypeConformance2()
{
  return MEMORY[0x1F4186618]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x1F4186628]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x1F4186638]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x1F4186640]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x1F4186650]();
}

uint64_t swift_getTupleTypeMetadata3()
{
  return MEMORY[0x1F4186658]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x1F4186668]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x1F4186670]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x1F4186680]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x1F4186690]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x1F41866A0]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x1F41866A8]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x1F41866B8]();
}

uint64_t swift_isClassType()
{
  return MEMORY[0x1F41866C0]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x1F4186700]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x1F4186710]();
}

uint64_t swift_once()
{
  return MEMORY[0x1F4186728]();
}

uint64_t swift_release()
{
  return MEMORY[0x1F4186758]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x1F4186760]();
}

uint64_t swift_retain()
{
  return MEMORY[0x1F4186770]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x1F4186778]();
}

uint64_t swift_setAtWritableKeyPath()
{
  return MEMORY[0x1F4186788]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x1F4186790]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x1F4186798]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x1F41867A0]();
}

uint64_t swift_stdlib_random()
{
  return MEMORY[0x1F41867B0]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x1F41867B8]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x1F41867D8]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x1F41867E0]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x1F41867F0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x1F41867F8]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x1F41868E0]();
}

void syslog(int a1, const char *a2, ...)
{
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1F417F718](*(void *)&c);
}

UBool u_hasBinaryProperty(UChar32 c, UProperty which)
{
  return MEMORY[0x1F417F780](*(void *)&c, *(void *)&which);
}

uint64_t uloc_addLikelySubtags()
{
  return MEMORY[0x1F4180108]();
}

uint64_t uloc_getLanguage()
{
  return MEMORY[0x1F4180198]();
}

uint64_t uloc_getScript()
{
  return MEMORY[0x1F41801A8]();
}

uint64_t uloc_minimizeSubtags()
{
  return MEMORY[0x1F41801B8]();
}

int uncompress(Bytef *dest, uLongf *destLen, const Bytef *source, uLong sourceLen)
{
  return MEMORY[0x1F4182CF8](dest, destLen, source, sourceLen);
}

uint64_t uset_close()
{
  return MEMORY[0x1F41806D0]();
}

uint64_t uset_getItem()
{
  return MEMORY[0x1F41806F8]();
}

uint64_t uset_getItemCount()
{
  return MEMORY[0x1F4180700]();
}

uint64_t uset_openPattern()
{
  return MEMORY[0x1F4180720]();
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1F40CE8B0](__s, *(void *)&__c, __n);
}

xmlNodePtr xmlDocGetRootElement(const xmlDoc *doc)
{
  return (xmlNodePtr)MEMORY[0x1F4182678](doc);
}

void xmlFreeDoc(xmlDocPtr cur)
{
}

xmlChar *__cdecl xmlGetProp(const xmlNode *node, const xmlChar *name)
{
  return (xmlChar *)MEMORY[0x1F4182700](node, name);
}

void xmlInitParser(void)
{
}

xmlDocPtr xmlReadMemory(const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  return (xmlDocPtr)MEMORY[0x1F4182820](buffer, *(void *)&size, URL, encoding, *(void *)&options);
}