uint64_t storeEnumTagSinglePayload for Zone(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Zone()
{
  return &type metadata for Zone;
}

void *initializeWithCopy for Zone.ID(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Zone.ID(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for Zone.ID(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for Zone.ID(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Zone.ID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Zone.ID()
{
  return &type metadata for Zone.ID;
}

ValueMetadata *type metadata accessor for Zone.CodingKeys()
{
  return &type metadata for Zone.CodingKeys;
}

unsigned char *_s16ReplicatorEngine4ZoneV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B2360E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Zone.ID.CodingKeys()
{
  return &type metadata for Zone.ID.CodingKeys;
}

unint64_t sub_25B23611C()
{
  unint64_t result = qword_26A4DB460;
  if (!qword_26A4DB460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB460);
  }
  return result;
}

unint64_t sub_25B236174()
{
  unint64_t result = qword_26A4DB468;
  if (!qword_26A4DB468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB468);
  }
  return result;
}

unint64_t sub_25B2361CC()
{
  unint64_t result = qword_26A4D97F8;
  if (!qword_26A4D97F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D97F8);
  }
  return result;
}

unint64_t sub_25B236224()
{
  unint64_t result = qword_26A4D97F0;
  if (!qword_26A4D97F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D97F0);
  }
  return result;
}

unint64_t sub_25B23627C()
{
  unint64_t result = qword_26A4D9810;
  if (!qword_26A4D9810)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D9810);
  }
  return result;
}

unint64_t sub_25B2362D4()
{
  unint64_t result = qword_26A4D9808;
  if (!qword_26A4D9808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D9808);
  }
  return result;
}

uint64_t sub_25B236328(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4449746E65696C63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25B236404(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25B236504()
{
  if (qword_26A4D98C0 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_25B290190();
  return __swift_project_value_buffer(v0, (uint64_t)qword_26A4EB150);
}

uint64_t sub_25B236568(uint64_t a1)
{
  return sub_25B236634(a1, qword_26A4EB150);
}

uint64_t sub_25B23658C(uint64_t a1)
{
  return sub_25B236634(a1, qword_26A4EB168);
}

uint64_t sub_25B2365B4(uint64_t a1)
{
  return sub_25B236634(a1, qword_26A4EB180);
}

uint64_t sub_25B2365CC(uint64_t a1)
{
  return sub_25B236634(a1, qword_26A4EB1A8);
}

uint64_t sub_25B2365F0(uint64_t a1)
{
  return sub_25B236634(a1, qword_26A4EB220);
}

uint64_t sub_25B236614(uint64_t a1)
{
  return sub_25B236634(a1, qword_26A4EB1C0);
}

uint64_t sub_25B236634(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_25B290190();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_25B290170();
}

uint64_t sub_25B2366B0()
{
  uint64_t result = sub_25B2909B0();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_25B236788(uint64_t a1)
{
  return sub_25B2367A0(a1);
}

uint64_t sub_25B2367A0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x263F8EE78];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x263F8EE78];
    sub_25B224214(0, v1, 0);
    uint64_t v2 = v11;
    unsigned int v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v6 = *(v4 - 1);
      uint64_t v5 = *v4;
      unint64_t v8 = *(void *)(v11 + 16);
      unint64_t v7 = *(void *)(v11 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v7 >> 1) {
        sub_25B224214(v7 > 1, v8 + 1, 1);
      }
      v4 += 2;
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v6;
      *(void *)(v9 + 40) = v5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_25B236878(uint64_t a1)
{
  uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9EE8);
  uint64_t v2 = MEMORY[0x270FA5388](v56);
  v55 = &v50[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  v54 = &v50[-v5];
  MEMORY[0x270FA5388](v4);
  v53 = &v50[-v6];
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v51 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v52 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v57 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  v13 = (void *)MEMORY[0x263F8EE78];
  uint64_t v14 = (uint64_t)v54;
  v15 = v55;
  v72 = (void *)MEMORY[0x263F8EE78];
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v59 = (v10 - 1) & v10;
  int64_t v60 = v12;
  for (unint64_t i = __clz(__rbit64(v10)) | (v12 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v19 << 6))
  {
    uint64_t v21 = v57;
    uint64_t v22 = *(void *)(v57 + 48);
    uint64_t v23 = sub_25B290080();
    uint64_t v58 = *(void *)(v23 - 8);
    v24 = *(void (**)(unsigned char *, unint64_t, uint64_t))(v58 + 16);
    uint64_t v25 = (uint64_t)v53;
    v24(v53, v22 + *(void *)(v58 + 72) * i, v23);
    uint64_t v26 = *(void *)(v21 + 56);
    v27 = (int *)(type metadata accessor for PairingRelationship() - 8);
    uint64_t v28 = v26 + *(void *)(*(void *)v27 + 72) * i;
    uint64_t v29 = v56;
    sub_25B244B78(v28, v25 + *(int *)(v56 + 48), (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    sub_25B187574(v25, v14, &qword_26A4D9EE8);
    uint64_t v30 = *(int *)(v29 + 48);
    uint64_t v31 = (uint64_t)&v15[v30];
    uint64_t v32 = v14 + v30;
    v24(v15, v14, v23);
    sub_25B244B78(v32, v31, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    v33 = (long long *)(v31 + v27[7]);
    long long v34 = v33[9];
    long long v69 = v33[8];
    long long v70 = v34;
    long long v71 = v33[10];
    long long v35 = v33[5];
    long long v65 = v33[4];
    long long v66 = v35;
    long long v36 = v33[7];
    long long v67 = v33[6];
    long long v68 = v36;
    long long v37 = v33[3];
    long long v63 = v33[2];
    long long v64 = v37;
    long long v38 = *v33;
    long long v62 = v33[1];
    long long v61 = v38;
    sub_25B1172F8((uint64_t)&v61);
    sub_25B2450A0(v31, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v15, v23);
    sub_25B116DE0(v14, &qword_26A4D9EE8);
    v13 = v72;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_25B218A1C(0, v13[2] + 1, 1, v13);
      v13 = (void *)result;
    }
    unint64_t v40 = v13[2];
    unint64_t v39 = v13[3];
    unint64_t v10 = v59;
    if (v40 >= v39 >> 1)
    {
      uint64_t result = (uint64_t)sub_25B218A1C((void *)(v39 > 1), v40 + 1, 1, v13);
      v13 = (void *)result;
    }
    v13[2] = v40 + 1;
    v41 = &v13[22 * v40];
    long long v42 = v61;
    long long v43 = v63;
    v41[3] = v62;
    v41[4] = v43;
    v41[2] = v42;
    long long v44 = v64;
    long long v45 = v65;
    long long v46 = v67;
    v41[7] = v66;
    v41[8] = v46;
    v41[5] = v44;
    v41[6] = v45;
    long long v47 = v68;
    long long v48 = v69;
    long long v49 = v71;
    v41[11] = v70;
    v41[12] = v49;
    v41[9] = v47;
    v41[10] = v48;
    int64_t v12 = v60;
    v72 = v13;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v17 >= v52) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v51 + 8 * v17);
    int64_t v19 = v12 + 1;
    if (!v18)
    {
      int64_t v19 = v12 + 2;
      if (v12 + 2 >= v52) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)(v51 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v12 + 3;
        if (v12 + 3 >= v52) {
          goto LABEL_27;
        }
        unint64_t v18 = *(void *)(v51 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v12 + 4;
          if (v12 + 4 >= v52) {
            goto LABEL_27;
          }
          unint64_t v18 = *(void *)(v51 + 8 * v19);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v59 = (v18 - 1) & v18;
    int64_t v60 = v19;
  }
  uint64_t v20 = v12 + 5;
  if (v12 + 5 >= v52)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v13;
  }
  unint64_t v18 = *(void *)(v51 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v12 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v52) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v51 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_25B236DB8@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 88);
  uint64_t v7 = sub_25B2909B0();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)v15 - v9;
  uint64_t v11 = *(uint64_t *)((char *)v2 + *(void *)(v5 + 152));
  LOBYTE(v15[0]) = *a1;
  unint64_t v12 = sub_25B243FFC();
  MEMORY[0x26115EE50](v15, v11, &type metadata for NetworkMessagingConnectionType, v6, v12);
  uint64_t v13 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v6) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a2, v10, v6);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  sub_25B290AA0();
  sub_25B290650();
  sub_25B290650();
  swift_bridgeObjectRelease();
  uint64_t result = sub_25B290BC0();
  __break(1u);
  return result;
}

uint64_t sub_25B237008()
{
  int64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + *(void *)(*(void *)v0 + 168)) + 16);
  os_unfair_lock_lock(v1);
  sub_25B1E4A50(&v3);
  os_unfair_lock_unlock(v1);
  return v3;
}

uint64_t sub_25B237088(uint64_t *a1, uint64_t a2)
{
  uint64_t v22 = *a1;
  uint64_t v4 = v22;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9B50);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9F30);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v4 + 176);
  *(uint64_t *)((char *)a1 + v12) = a2;
  swift_retain();
  uint64_t result = swift_release();
  if ((byte_2708D9170 & 1) != 0 || byte_2708D9171)
  {
    uint64_t v14 = *(uint64_t *)((char *)a1 + v12);
    if (v14)
    {
      uint64_t v23 = *(uint64_t *)((char *)a1 + v12);
      id v24 = (id)a1[2];
      id v15 = v24;
      v21[1] = v14;
      uint64_t v16 = sub_25B2908E0();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
      swift_retain();
      id v17 = v15;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9F40);
      v21[0] = v9;
      sub_25B10CB64();
      sub_25B116394(&qword_26A4D9F38, &qword_26A4D9F40);
      sub_25B247138((unint64_t *)&unk_26A4D9B60, (void (*)(uint64_t))sub_25B10CB64);
      sub_25B290260();
      sub_25B116DE0((uint64_t)v7, (uint64_t *)&unk_26A4D9B50);

      uint64_t v18 = swift_allocObject();
      swift_weakInit();
      uint64_t v19 = swift_allocObject();
      uint64_t v20 = v22;
      *(void *)(v19 + 16) = *(void *)(v22 + 80);
      *(_OWORD *)(v19 + 24) = *(_OWORD *)(v20 + 88);
      *(void *)(v19 + 40) = *(void *)(v20 + 104);
      *(void *)(v19 + 48) = v18;
      sub_25B116394(&qword_26A4D9F28, &qword_26A4D9F30);
      sub_25B290270();
      swift_release();
      (*(void (**)(char *, uint64_t))(v21[0] + 8))(v11, v8);
      swift_beginAccess();
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9AC0);
      sub_25B116394(&qword_26A4D9AC8, &qword_26A4D9AC0);
      sub_25B290200();
      swift_endAccess();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_25B237494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = a4;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (qword_26A4D98C8 != -1) {
      swift_once();
    }
    uint64_t v12 = sub_25B290190();
    __swift_project_value_buffer(v12, (uint64_t)qword_26A4EB168);
    swift_bridgeObjectRetain_n();
    uint64_t v13 = sub_25B290160();
    os_log_type_t v14 = sub_25B2908A0();
    BOOL v15 = os_log_type_enabled(v13, v14);
    unint64_t v39 = v10;
    if (v15)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v38 = v7;
      uint64_t v18 = v17;
      *(void *)&v41[0] = v17;
      uint64_t v37 = v8;
      *(_DWORD *)uint64_t v16 = 136446210;
      long long v35 = v16 + 4;
      sub_25B290080();
      type metadata accessor for PairingRelationship();
      uint64_t v36 = a6;
      sub_25B247138(&qword_26A4D9220, MEMORY[0x263F07508]);
      swift_bridgeObjectRetain();
      uint64_t v19 = sub_25B2904E0();
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      uint64_t v40 = sub_25B288E98(v19, v21, (uint64_t *)v41);
      uint64_t v8 = v37;
      sub_25B2909C0();
      swift_bridgeObjectRelease_n();
      a6 = v36;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25B107000, v13, v14, "pairingRelationships updated:%{public}s", v16, 0xCu);
      swift_arrayDestroy();
      uint64_t v22 = v18;
      uint64_t v7 = v38;
      MEMORY[0x261160890](v22, -1, -1);
      MEMORY[0x261160890](v16, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v24 = sub_25B2442F4(v23);
    swift_bridgeObjectRelease();
    uint64_t v25 = sub_25B236878(v24);
    swift_release();
    if (*(void *)(v25 + 16))
    {
      long long v26 = *(_OWORD *)(v25 + 160);
      v41[7] = *(_OWORD *)(v25 + 144);
      long long v27 = *(_OWORD *)(v25 + 176);
      long long v28 = *(_OWORD *)(v25 + 192);
      v41[8] = v26;
      v41[9] = v27;
      v41[10] = v28;
      long long v29 = *(_OWORD *)(v25 + 96);
      v41[3] = *(_OWORD *)(v25 + 80);
      v41[4] = v29;
      long long v30 = *(_OWORD *)(v25 + 128);
      v41[5] = *(_OWORD *)(v25 + 112);
      v41[6] = v30;
      long long v31 = *(_OWORD *)(v25 + 48);
      v41[0] = *(_OWORD *)(v25 + 32);
      v41[1] = v31;
      v41[2] = *(_OWORD *)(v25 + 64);
      sub_25B1172F8((uint64_t)v41);
      swift_bridgeObjectRelease();
      long long v32 = v41[0];
      LOBYTE(v40) = 1;
      uint64_t v33 = (uint64_t)v39;
      sub_25B236DB8(&v40, (uint64_t)v39);
      long long v34 = *(void (**)(void, void, uint64_t, uint64_t))(a6 + 48);
      swift_bridgeObjectRetain();
      v34(v32, *((void *)&v32 + 1), v7, a6);
      swift_release();
      sub_25B11DEBC((uint64_t)v41);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v33, v7);
    }
    else
    {
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_25B2378D0()
{
  void (*v15)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v16;
  void *v17;
  uint64_t (*v18)();
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void aBlock[3];
  void *v42;
  uint64_t (*v43)();
  void *v44;

  int64_t v1 = (void *)*v0;
  uint64_t v2 = sub_25B290320();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v38 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v39 = sub_25B290360();
  uint64_t v37 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v36 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_25B290410();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (void *)v0[2];
  *uint64_t v9 = v10;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
  id v11 = v10;
  char v12 = sub_25B290440();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (v12)
  {
    uint64_t v14 = v1[13];
    BOOL v15 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v14 + 72);
    long long v35 = v3;
    uint64_t v16 = v1[11];
    v15(aBlock, v16, v14);
    uint64_t v17 = v42;
    uint64_t v18 = v43;
    __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v42);
    uint64_t v19 = (*((uint64_t (**)(void *, uint64_t (*)()))v18 + 4))(v17, v18);
    unint64_t v20 = sub_25B2367A0(v19);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
    unint64_t v21 = sub_25B227BD0(v20);
    uint64_t v22 = swift_bridgeObjectRelease();
    long long v34 = (uint64_t)&v34;
    aBlock[0] = *(void *)((char *)v0 + *(void *)(*v0 + 152));
    uint64_t v23 = MEMORY[0x270FA5388](v22);
    uint64_t v24 = v2;
    *(&v34 - 6) = v1[10];
    *(&v34 - 5) = v16;
    *(&v34 - 4) = v1[12];
    *(&v34 - 3) = v14;
    *(&v34 - 2) = v21;
    MEMORY[0x270FA5388](v23);
    *(&v34 - 6) = v25;
    *(&v34 - 5) = v16;
    *(&v34 - 4) = v26;
    *(&v34 - 3) = v14;
    *(&v34 - 2) = (uint64_t)sub_25B247180;
    *(&v34 - 1) = v27;
    sub_25B243FFC();
    sub_25B290500();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    sub_25B2906C0();
    swift_bridgeObjectRelease();
    long long v28 = (void *)((char *)v0 + *(void *)(*v0 + 136));
    swift_beginAccess();
    long long v29 = *v28;
    long long v30 = (void *)swift_allocObject();
    v30[2] = v29;
    v30[3] = v0;
    v30[4] = v21;
    long long v43 = sub_25B2471F0;
    long long v44 = v30;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25B10F584;
    long long v42 = &block_descriptor_44_0;
    long long v31 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    long long v32 = v36;
    sub_25B290340();
    uint64_t v40 = MEMORY[0x263F8EE78];
    sub_25B247138((unint64_t *)&unk_26A4D9A00, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9AD0);
    sub_25B116394((unint64_t *)&qword_26A4D9AE0, (uint64_t *)&unk_26A4D9AD0);
    uint64_t v33 = v38;
    sub_25B290A00();
    MEMORY[0x26115F250](0, v32, v33, v31);
    _Block_release(v31);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v33, v24);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v32, v39);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id *sub_25B237E94()
{
  int64_t v1 = (char *)v0 + *((void *)*v0 + 16);
  uint64_t v2 = sub_25B2909B0();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v0 + *((void *)*v0 + 18));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_25B237FD4()
{
  sub_25B237E94();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for NetworkSyncService()
{
  return swift_getGenericMetadata();
}

uint64_t sub_25B238044()
{
  return swift_initClassMetadata2();
}

uint64_t sub_25B238088()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  uint64_t v3 = *(void *)(*v0 + 88);
  uint64_t v4 = sub_25B2909B0();
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v15[-1] - v5;
  uint64_t v7 = *(uint64_t *)((char *)v0 + *(void *)(v1 + 152));
  LOBYTE(v15[0]) = byte_2708D5D58;
  unint64_t v8 = sub_25B243FFC();
  MEMORY[0x26115EE50](v15, v7, &type metadata for NetworkMessagingConnectionType, v3, v8);
  uint64_t v9 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v3);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)(v2 + 104) + 72))(v15, v3);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v3);
    uint64_t v11 = v16;
    uint64_t v12 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return v13;
  }
  return result;
}

uint64_t sub_25B238264()
{
  sub_25B243FFC();
  sub_25B290500();
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9AF0);
  swift_getWitnessTable();
  sub_25B116394((unint64_t *)&unk_26A4D9B00, &qword_26A4D9AF0);
  uint64_t v0 = sub_25B2906B0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_25B2383FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(a6 + 72))(v11, a4, a6);
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  __swift_project_boxed_opaque_existential_1(v11, v12);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 32))(v6, v7);
  uint64_t v9 = sub_25B2367A0(v8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  return v9;
}

uint64_t sub_25B2384A4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(NSObject **)(v3 + 16);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = a1;
  v7[4] = a2;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_25B248254;
  *(void *)(v8 + 24) = v7;
  v11[4] = sub_25B117398;
  v11[5] = v8;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1107296256;
  v11[2] = sub_25B10D184;
  void v11[3] = &block_descriptor_88;
  uint64_t v9 = _Block_copy(v11);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v6) {
    __break(1u);
  }
  return result;
}

uint64_t sub_25B238614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for NetworkSyncService.WeakDelegate();
  uint64_t v6 = sub_25B245D38(a2, a3);
  uint64_t v7 = (void **)(a1 + *(void *)(*(void *)a1 + 136));
  swift_beginAccess();
  uint64_t v8 = *v7;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v7 = v8;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v8 = sub_25B218B48(0, v8[2] + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  unint64_t v11 = v8[2];
  unint64_t v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    uint64_t v8 = sub_25B218B48((void *)(v10 > 1), v11 + 1, 1, v8);
    *uint64_t v7 = v8;
  }
  v8[2] = v11 + 1;
  uint64_t v12 = &v8[2 * v11];
  v12[4] = v6;
  v12[5] = &off_2708D5D10;
  return swift_endAccess();
}

uint64_t sub_25B238758()
{
  uint64_t v1 = sub_25B290320();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B290360();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11[0] = *(void *)(v0 + 16);
  aBlock[4] = sub_25B248164;
  uint64_t v13 = v0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B10F584;
  aBlock[3] = &block_descriptor_77;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  sub_25B290340();
  v11[1] = MEMORY[0x263F8EE78];
  sub_25B247138((unint64_t *)&unk_26A4D9A00, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9AD0);
  sub_25B116394((unint64_t *)&qword_26A4D9AE0, (uint64_t *)&unk_26A4D9AD0);
  sub_25B290A00();
  MEMORY[0x26115F250](0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_25B2389FC()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B238B40(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 88);
  uint64_t v8 = sub_25B2909B0();
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v18[-1] - v9;
  uint64_t v11 = *(uint64_t *)((char *)v2 + *(void *)(v5 + 152));
  LOBYTE(v18[0]) = byte_2708D5D80;
  unint64_t v12 = sub_25B243FFC();
  MEMORY[0x26115EE50](v18, v11, &type metadata for NetworkMessagingConnectionType, v7, v12);
  uint64_t v13 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v7);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)(v6 + 104) + 72))(v18, v7);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v7);
    uint64_t v15 = v19;
    uint64_t v16 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 40))(a1, a2, v15, v16);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  return result;
}

uint64_t sub_25B238D24(uint64_t a1, uint64_t a2, long long *a3, unsigned __int8 *a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v48 = a7;
  uint64_t v47 = a6;
  uint64_t v40 = a1;
  uint64_t v44 = *v7;
  uint64_t v45 = v44;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v41 + 64);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v39 = (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Message();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v14 - 8);
  long long v17 = a3[9];
  long long v57 = a3[8];
  long long v58 = v17;
  long long v59 = a3[10];
  long long v18 = a3[5];
  long long v53 = a3[4];
  long long v54 = v18;
  long long v19 = a3[7];
  long long v55 = a3[6];
  long long v56 = v19;
  long long v20 = a3[1];
  long long v49 = *a3;
  long long v50 = v20;
  long long v21 = a3[3];
  long long v51 = a3[2];
  long long v52 = v21;
  int v42 = *a4;
  uint64_t v22 = *a5;
  uint64_t v43 = a5[1];
  uint64_t v46 = v7[2];
  sub_25B244B78(v40, (uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for Message);
  sub_25B116D78(a2, (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v23 = (*(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v24 = (v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (*(unsigned __int8 *)(v41 + 80) + v24 + 8) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  unint64_t v26 = (v25 + v13 + 191) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v44;
  *(void *)(v27 + 16) = *(void *)(v44 + 80);
  *(_OWORD *)(v27 + 24) = *(_OWORD *)(v45 + 88);
  *(void *)(v27 + 40) = *(void *)(v28 + 104);
  sub_25B244EEC((uint64_t)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v27 + v23, (uint64_t (*)(void))type metadata accessor for Message);
  *(void *)(v27 + v24) = v7;
  sub_25B187574(v39, v27 + v25, &qword_26A4D9160);
  unint64_t v29 = v27 + ((v25 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v30 = v58;
  *(_OWORD *)(v29 + 128) = v57;
  *(_OWORD *)(v29 + 144) = v30;
  *(_OWORD *)(v29 + 160) = v59;
  long long v31 = v54;
  *(_OWORD *)(v29 + 64) = v53;
  *(_OWORD *)(v29 + 80) = v31;
  long long v32 = v56;
  *(_OWORD *)(v29 + 96) = v55;
  *(_OWORD *)(v29 + 112) = v32;
  long long v33 = v50;
  *(_OWORD *)unint64_t v29 = v49;
  *(_OWORD *)(v29 + 16) = v33;
  long long v34 = v52;
  *(_OWORD *)(v29 + 32) = v51;
  *(_OWORD *)(v29 + 48) = v34;
  *(unsigned char *)(v29 + 176) = v42;
  long long v35 = (void *)(v27 + v26);
  *long long v35 = v22;
  v35[1] = v43;
  uint64_t v36 = (void *)(v27 + ((v26 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v37 = v48;
  *uint64_t v36 = v47;
  v36[1] = v37;
  swift_retain();
  sub_25B1172F8((uint64_t)&v49);
  swift_retain();
  sub_25B1B7434(0xD000000000000022, 0x800000025B29E390, v46, (uint64_t)sub_25B244F54, v27, 0.0);
  return swift_release();
}

uint64_t sub_25B239108(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t *a1, unint64_t a2, unint64_t a3), long long *a6, int a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11)
{
  int v53 = a7;
  uint64_t v56 = a2;
  uint64_t v55 = a1;
  uint64_t v17 = *a4;
  uint64_t v18 = type metadata accessor for Message();
  MEMORY[0x270FA5388](v18 - 8);
  long long v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A4D98C8 != -1) {
    swift_once();
  }
  uint64_t v54 = a11;
  uint64_t v52 = a10;
  uint64_t v21 = sub_25B290190();
  __swift_project_value_buffer(v21, (uint64_t)qword_26A4EB168);
  sub_25B244B78(a3, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Message);
  uint64_t v22 = sub_25B290160();
  os_log_type_t v23 = sub_25B2908A0();
  if (os_log_type_enabled(v22, v23))
  {
    long long v51 = a4;
    uint64_t v24 = swift_slowAlloc();
    uint64_t v49 = a3;
    unint64_t v25 = (uint8_t *)v24;
    uint64_t v26 = swift_slowAlloc();
    long long v50 = a5;
    uint64_t v27 = v26;
    *(void *)&v59[0] = v26;
    uint64_t v48 = v17;
    *(_DWORD *)unint64_t v25 = 136446210;
    uint64_t v28 = Message.description.getter();
    *(void *)&v57[0] = sub_25B288E98(v28, v29, (uint64_t *)v59);
    uint64_t v17 = v48;
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    sub_25B2450A0((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Message);
    _os_log_impl(&dword_25B107000, v22, v23, "Sending message with expected response: %{public}s", v25, 0xCu);
    swift_arrayDestroy();
    uint64_t v30 = v27;
    a5 = v50;
    MEMORY[0x261160890](v30, -1, -1);
    long long v31 = v25;
    a3 = v49;
    MEMORY[0x261160890](v31, -1, -1);
  }
  else
  {
    sub_25B2450A0((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for Message);
  }

  long long v32 = a6[8];
  long long v33 = a6[9];
  long long v34 = a6[6];
  v59[7] = a6[7];
  v59[8] = v32;
  long long v35 = a6[10];
  v59[9] = v33;
  v59[10] = v35;
  long long v36 = a6[5];
  v59[4] = a6[4];
  v59[5] = v36;
  v59[6] = v34;
  long long v37 = a6[1];
  v59[0] = *a6;
  v59[1] = v37;
  long long v38 = a6[3];
  v59[2] = a6[2];
  v59[3] = v38;
  unsigned __int8 v58 = v53;
  v57[0] = a9;
  *(void *)&v57[1] = a8;
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = *(void *)(v17 + 80);
  *(_OWORD *)(v39 + 24) = *(_OWORD *)(v17 + 88);
  *(void *)(v39 + 40) = *(void *)(v17 + 104);
  long long v40 = a6[9];
  *(_OWORD *)(v39 + 176) = a6[8];
  *(_OWORD *)(v39 + 192) = v40;
  *(_OWORD *)(v39 + 208) = a6[10];
  long long v41 = a6[5];
  *(_OWORD *)(v39 + 112) = a6[4];
  *(_OWORD *)(v39 + 128) = v41;
  long long v42 = a6[7];
  *(_OWORD *)(v39 + 144) = a6[6];
  *(_OWORD *)(v39 + 160) = v42;
  long long v43 = a6[1];
  *(_OWORD *)(v39 + 48) = *a6;
  *(_OWORD *)(v39 + 64) = v43;
  long long v44 = a6[3];
  *(_OWORD *)(v39 + 80) = a6[2];
  *(_OWORD *)(v39 + 96) = v44;
  uint64_t v45 = v54;
  *(void *)(v39 + 224) = v52;
  *(void *)(v39 + 232) = v45;
  uint64_t v46 = v56;
  *(void *)(v39 + 240) = v55;
  *(void *)(v39 + 248) = v46;
  sub_25B1172F8((uint64_t)a6);
  swift_retain();
  swift_retain();
  sub_25B239A74(a3, a5, v59, &v58, v57, (void (*)(uint64_t *))sub_25B245190, (uint64_t *)v39);
  return swift_release();
}

uint64_t sub_25B23952C(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *), uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v21 = a5;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA6D0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  uint64_t v24 = a9;
  uint64_t v25 = a10;
  uint64_t v26 = a2;
  swift_getAssociatedTypeWitness();
  type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v17 = sub_25B291270();
  type metadata accessor for IncomingSyncServiceMessage();
  sub_25B239860((void (*)(char *))sub_25B2471FC, v17, (uint64_t)v16);
  uint64_t v18 = a3(v16);
  v21(v18);
  return sub_25B116DE0((uint64_t)v16, &qword_26A4DA6D0);
}

uint64_t sub_25B2396A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Message();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B244B78(a1, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Message);
  swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for IncomingNetworkMessage();
  sub_25B116D78(a1 + *(int *)(v12 + 28), (uint64_t)v8);
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v15 = type metadata accessor for IncomingSyncServiceMessage();
  uint64_t v16 = a3 + *(int *)(v15 + 20);
  uint64_t v17 = sub_25B28FEA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  sub_25B244EEC((uint64_t)v11, a3, (uint64_t (*)(void))type metadata accessor for Message);
  swift_bridgeObjectRetain();
  uint64_t result = sub_25B1AAB20((uint64_t)v8, v16);
  uint64_t v19 = (void *)(a3 + *(int *)(v15 + 24));
  *uint64_t v19 = v14;
  v19[1] = v13;
  return result;
}

uint64_t sub_25B239860@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](a1);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v13 + 16))(v12, v14);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(uint64_t, char *, void))(*(void *)(*(void *)(a2 + 24) - 8) + 32))(a3, v12, *(void *)(a2 + 24));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v12, v6);
    a1(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_25B291270();
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25B239A74(uint64_t a1, uint64_t (*a2)(uint64_t *a1, unint64_t a2, unint64_t a3), long long *a3, unsigned __int8 *a4, double *a5, void (*a6)(uint64_t *), uint64_t *a7)
{
  uint64_t v8 = v7;
  v254 = a7;
  v253 = a6;
  v244 = a2;
  uint64_t v245 = a1;
  uint64_t v234 = *(void *)v8;
  uint64_t v12 = v234;
  uint64_t v13 = *(void *)(v234 + 80);
  uint64_t v217 = sub_25B2909B0();
  uint64_t v216 = *(void *)(v217 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v217);
  v218 = (char *)&v205 - v15;
  uint64_t v252 = v13;
  uint64_t v16 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v14);
  v227 = (char *)&v205 - v17;
  uint64_t v230 = sub_25B290000();
  uint64_t v226 = *(void *)(v230 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v230);
  v224 = (char *)&v205 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v219 = v19;
  MEMORY[0x270FA5388](v18);
  v225 = (char *)&v205 - v20;
  uint64_t v21 = *(void *)(v12 + 104);
  uint64_t v22 = *(void *)(v12 + 88);
  uint64_t v250 = v21;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v222 = sub_25B2909B0();
  uint64_t v221 = *(void *)(v222 - 8);
  uint64_t v24 = MEMORY[0x270FA5388](v222);
  os_log_t v235 = (os_log_t)((char *)&v205 - v25);
  uint64_t v236 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  v215 = (char *)&v205 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  v241 = (uint64_t (*)())((char *)&v205 - v29);
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  v223 = (char *)&v205 - v31;
  uint64_t v229 = v32;
  MEMORY[0x270FA5388](v30);
  unint64_t v240 = (unint64_t)&v205 - v33;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
  uint64_t v233 = *(void *)(v34 - 8);
  MEMORY[0x270FA5388](v34 - 8);
  v239 = v35;
  uint64_t v247 = (uint64_t)&v205 - (((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Message();
  uint64_t v232 = *(void *)(v36 - 8);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  uint64_t v238 = v38;
  v249 = (uint64_t *)((char *)&v205 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v256 = v22;
  uint64_t v251 = *(void *)(v22 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  v246 = (char *)&v205 - (((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = v40;
  MEMORY[0x270FA5388](v39);
  uint64_t v255 = (uint64_t)&v205 - v41;
  v243 = (uint8_t *)AssociatedTypeWitness;
  type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  long long v42 = (uint64_t (*)(void))sub_25B291270();
  uint64_t v248 = *((void *)v42 - 1);
  MEMORY[0x270FA5388](v42);
  long long v44 = (uint64_t *)((char *)&v205 - v43);
  uint64_t v45 = sub_25B290410();
  uint64_t v46 = *(void *)(v45 - 8);
  MEMORY[0x270FA5388](v45);
  uint64_t v48 = (uint64_t *)((char *)&v205 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v49 = a3[9];
  long long v270 = a3[8];
  long long v271 = v49;
  long long v272 = a3[10];
  long long v50 = a3[5];
  long long v266 = a3[4];
  long long v267 = v50;
  long long v51 = a3[7];
  long long v268 = a3[6];
  long long v269 = v51;
  long long v52 = a3[1];
  long long v262 = *a3;
  long long v263 = v52;
  long long v53 = a3[3];
  long long v264 = a3[2];
  long long v265 = v53;
  int v242 = *a4;
  double v54 = *a5;
  uint64_t v55 = *((void *)a5 + 1);
  uint64_t v56 = (void *)*((void *)v8 + 2);
  *uint64_t v48 = v56;
  (*(void (**)(void *, void, uint64_t))(v46 + 104))(v48, *MEMORY[0x263F8F0E0], v45);
  id v57 = v56;
  LOBYTE(v56) = sub_25B290440();
  (*(void (**)(void *, uint64_t))(v46 + 8))(v48, v45);
  if ((v56 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v228 = (uint64_t)v57;
  uint64_t v220 = v16;
  unsigned __int8 v58 = &v8[*(void *)(*(void *)v8 + 144)];
  uint64_t v59 = *((void *)v58 + 3);
  uint64_t v60 = *((void *)v58 + 4);
  __swift_project_boxed_opaque_existential_1(v58, v59);
  long long v61 = v262;
  if ((*(uint64_t (**)(void, void, uint64_t, uint64_t))(v60 + 8))(v262, *((void *)&v262 + 1), v59, v60))
  {
    if (qword_26A4D98C8 == -1)
    {
LABEL_4:
      uint64_t v62 = sub_25B290190();
      __swift_project_value_buffer(v62, (uint64_t)qword_26A4EB168);
      long long v63 = sub_25B290160();
      os_log_type_t v64 = sub_25B2908A0();
      if (os_log_type_enabled(v63, v64))
      {
        long long v65 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v65 = 0;
        _os_log_impl(&dword_25B107000, v63, v64, "Cannot send messages to remote device ID not in allow list", v65, 2u);
        MEMORY[0x261160890](v65, -1, -1);
      }

      sub_25B2451C8();
      uint64_t v66 = swift_allocError();
      *long long v67 = 2;
      *long long v44 = v66;
      swift_storeEnumTagMultiPayload();
      v253(v44);
      return (*(uint64_t (**)(uint64_t *, uint64_t (*)(void)))(v248 + 8))(v44, v42);
    }
LABEL_31:
    swift_once();
    goto LABEL_4;
  }
  v213 = (uint64_t (*)())v42;
  uint64_t v214 = v55;
  LOBYTE(v258) = v265 == 4;
  swift_bridgeObjectRetain();
  uint64_t v69 = v255;
  sub_25B236DB8(&v258, v255);
  uint64_t v70 = v250;
  uint64_t v71 = v256;
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(v250 + 72))(&v258, v256, v250);
  uint64_t v72 = v260;
  uint64_t v73 = v261;
  __swift_project_boxed_opaque_existential_1(&v258, v260);
  uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 32))(v72, v73);
  uint64_t v75 = sub_25B2367A0(v74);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v258);
  uint64_t v76 = sub_25B227BD0(v75);
  swift_bridgeObjectRelease();
  uint64_t v231 = v61;
  LOBYTE(v75) = sub_25B2109B4(v61, *((uint64_t *)&v61 + 1), v76);
  swift_bridgeObjectRelease();
  if (v75)
  {
    uint64_t v77 = v251;
    v78 = *(void (**)(char *, uint64_t, uint64_t))(v251 + 16);
    uint64_t v207 = v251 + 16;
    v206 = v78;
    v78(v246, v69, v71);
    v213 = type metadata accessor for Message;
    sub_25B244B78(v245, (uint64_t)v249, (uint64_t (*)(void))type metadata accessor for Message);
    sub_25B116D78((uint64_t)v244, v247);
    uint64_t v79 = *(unsigned __int8 *)(v77 + 80);
    uint64_t v80 = (v79 + 72) & ~v79;
    uint64_t v81 = *(unsigned __int8 *)(v232 + 80);
    uint64_t v232 = ~v81;
    unint64_t v82 = ((unint64_t)v237 + v81 + v80) & ~v81;
    uint64_t v212 = v238 + 7;
    unint64_t v83 = (v238 + 7 + v82) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v84 = *(unsigned __int8 *)(v233 + 80);
    uint64_t v85 = (v84 + v83 + 16) & ~v84;
    uint64_t v233 = v81;
    uint64_t v208 = v84;
    uint64_t v209 = v79;
    uint64_t v205 = v81 | v84 | v79;
    unint64_t v86 = ((unint64_t)v239 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
    v87 = (void (*)(uint64_t *))swift_allocObject();
    uint64_t v88 = v256;
    *((void *)v87 + 2) = v252;
    *((void *)v87 + 3) = v88;
    uint64_t v248 = *(void *)(v234 + 96);
    *((void *)v87 + 4) = v248;
    *((void *)v87 + 5) = v70;
    v89 = v253;
    *((void *)v87 + 6) = v8;
    *((void *)v87 + 7) = v89;
    *((void *)v87 + 8) = v254;
    v90 = *(void (**)(char *, char *, uint64_t))(v77 + 32);
    uint64_t v234 = v77 + 32;
    v210 = v90;
    v90((char *)v87 + v80, v246, v256);
    uint64_t v91 = v255;
    sub_25B244EEC((uint64_t)v249, (uint64_t)v87 + v82, (uint64_t (*)(void))v213);
    v92 = (void *)((char *)v87 + v83);
    uint64_t v93 = v231;
    void *v92 = v231;
    v92[1] = *((void *)&v61 + 1);
    sub_25B187574(v247, (uint64_t)v87 + v85, &qword_26A4D9160);
    v253 = v87;
    v94 = (char *)v87 + v86;
    uint64_t v95 = v256;
    long long v96 = v271;
    *((_OWORD *)v94 + 8) = v270;
    *((_OWORD *)v94 + 9) = v96;
    *((_OWORD *)v94 + 10) = v272;
    long long v97 = v267;
    *((_OWORD *)v94 + 4) = v266;
    *((_OWORD *)v94 + 5) = v97;
    long long v98 = v269;
    *((_OWORD *)v94 + 6) = v268;
    *((_OWORD *)v94 + 7) = v98;
    long long v99 = v263;
    *(_OWORD *)v94 = v262;
    *((_OWORD *)v94 + 1) = v99;
    long long v100 = v265;
    *((_OWORD *)v94 + 2) = v264;
    *((_OWORD *)v94 + 3) = v100;
    v94[176] = v242;
    v101 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 120);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    sub_25B1172F8((uint64_t)&v262);
    os_log_t v102 = v235;
    v101(v93, *((void *)&v61 + 1), v95, v70);
    os_log_t v103 = v102;
    uint64_t v104 = v236;
    v105 = v243;
    int v106 = (*(uint64_t (**)(os_log_t, uint64_t, uint8_t *))(v236 + 48))(v102, 1, v243);
    uint64_t v107 = v70;
    if (v106 == 1)
    {
      (*(void (**)(os_log_t, uint64_t))(v221 + 8))(v103, v222);
      v108 = *(void **)(v70 + 64);
      ((void (*)(void **__return_ptr, uint64_t, uint64_t))v108)(&v258, v95, v70);
      if (v258 == 1)
      {
        v109 = v241;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 104))(v231, *((void *)&v61 + 1), v95, v70);
        uint64_t v110 = swift_bridgeObjectRelease();
        v254 = &v205;
        MEMORY[0x270FA5388](v110);
        v249 = &v205 - 16;
        *(&v205 - 14) = v252;
        *(&v205 - 13) = v95;
        uint64_t v111 = v248;
        *(&v205 - 12) = v248;
        *(&v205 - 11) = v70;
        uint64_t v112 = v245;
        *(&v205 - 10) = v91;
        *(&v205 - 9) = v112;
        *(&v205 - 8) = (uint64_t)v244;
        *(&v205 - 7) = (uint64_t)v109;
        v113 = v109;
        *((unsigned char *)&v205 - 48) = v242;
        *((double *)&v205 - 5) = v54;
        uint64_t v114 = v214;
        *(&v205 - 4) = v214;
        *(&v205 - 3) = (uint64_t)sub_25B245590;
        v115 = v253;
        v204 = v253;
        v116 = v215;
        (*(void (**)(char *, uint64_t (*)(), uint8_t *))(v104 + 16))(v215, v113, v105);
        unint64_t v117 = (*(unsigned __int8 *)(v104 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v104 + 80);
        v118 = (double *)swift_allocObject();
        *((void *)v118 + 2) = v252;
        *((void *)v118 + 3) = v95;
        *((void *)v118 + 4) = v111;
        *((void *)v118 + 5) = v70;
        *((void *)v118 + 6) = sub_25B245590;
        *((void *)v118 + 7) = v115;
        v118[8] = v54;
        *((void *)v118 + 9) = v114;
        (*(void (**)(char *, char *))(v104 + 32))((char *)v118 + v117, v116);
        swift_retain();
        _s16ReplicatorEngine8WatchdogC7execute6within12failureQueue6action0F7HandlerySd_So17OS_dispatch_queueCyACXEyACctFZ_0(v228, (void (*)(uint64_t))sub_25B245D10);
        swift_release();
        swift_release();
        (*(void (**)(uint64_t (*)(), uint8_t *))(v104 + 8))(v241, v105);
        return (*(uint64_t (**)(uint64_t, uint64_t))(v251 + 8))(v255, v95);
      }
      else
      {
        v254 = v108;
        uint64_t v151 = v252;
        if (qword_26A4D98C8 != -1) {
          swift_once();
        }
        uint64_t v152 = sub_25B290190();
        __swift_project_value_buffer(v152, (uint64_t)qword_26A4EB168);
        swift_bridgeObjectRetain_n();
        v153 = sub_25B290160();
        os_log_type_t v154 = sub_25B2908A0();
        BOOL v155 = os_log_type_enabled(v153, v154);
        uint64_t v156 = v95;
        uint64_t v211 = *((void *)&v61 + 1);
        if (v155)
        {
          v157 = (uint8_t *)swift_slowAlloc();
          uint64_t v158 = swift_slowAlloc();
          v258 = (void *)v158;
          *(_DWORD *)v157 = 136446210;
          v243 = v157 + 4;
          swift_bridgeObjectRetain();
          uint64_t v257 = sub_25B288E98(v231, *((unint64_t *)&v61 + 1), (uint64_t *)&v258);
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25B107000, v153, v154, "Using browser to find %{public}s", v157, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x261160890](v158, -1, -1);
          MEMORY[0x261160890](v157, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        v177 = v225;
        v178 = v218;
        uint64_t v179 = v217;
        uint64_t v180 = v216;
        sub_25B28FFD0();
        (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v178, &v8[*(void *)(*(void *)v8 + 128)], v179);
        uint64_t v181 = v220;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v220 + 48))(v178, 1, v151) == 1)
        {
          (*(void (**)(char *, uint64_t))(v180 + 8))(v178, v179);
          v258 = 0;
          unint64_t v259 = 0xE000000000000000;
          sub_25B290AA0();
          swift_bridgeObjectRelease();
          v258 = (void *)0xD000000000000028;
          unint64_t v259 = 0x800000025B29E3C0;
          ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v254)(&v257, v156, v250);
          sub_25B290650();
          swift_bridgeObjectRelease();
          uint64_t result = sub_25B290BC0();
          __break(1u);
        }
        else
        {
          uint64_t v182 = v209;
          uint64_t v236 = ~v209;
          uint64_t v183 = v208;
          unint64_t v240 = ~v208;
          (*(void (**)(char *, char *, uint64_t))(v181 + 32))(v227, v178, v151);
          v243 = (uint8_t *)*((void *)&v272 + 1);
          v254 = (uint64_t *)v272;
          uint64_t v184 = v226;
          (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v224, v177, v230);
          v206(v246, v255, v156);
          v241 = type metadata accessor for Message;
          sub_25B244B78(v245, (uint64_t)v249, (uint64_t (*)(void))type metadata accessor for Message);
          sub_25B116D78((uint64_t)v244, v247);
          unint64_t v185 = (*(unsigned __int8 *)(v184 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v184 + 80);
          uint64_t v186 = v156;
          unint64_t v187 = (v219 + v185 + 7) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v188 = (v187 + 23) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v189 = (v182 + v188 + 16) & v236;
          unint64_t v190 = ((unint64_t)v237 + v189 + 7) & 0xFFFFFFFFFFFFFFF8;
          v237 = (void *)((v190 + 23) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v236 = ((unint64_t)v237 + v233 + 8) & v232;
          v244 = (uint64_t (*)(uint64_t *, unint64_t, unint64_t))((v238 + v183 + v236) & v240);
          uint64_t v245 = (uint64_t)v239 + (void)v244;
          v191 = (char *)swift_allocObject();
          *((void *)v191 + 2) = v252;
          *((void *)v191 + 3) = v186;
          uint64_t v192 = v186;
          uint64_t v193 = v248;
          uint64_t v194 = v250;
          *((void *)v191 + 4) = v248;
          *((void *)v191 + 5) = v194;
          (*(void (**)(char *, char *, uint64_t))(v184 + 32))(&v191[v185], v224, v230);
          v195 = (double *)&v191[v187];
          double *v195 = v54;
          *((void *)v195 + 1) = v214;
          v196 = &v191[v188];
          uint64_t v197 = v231;
          uint64_t v198 = v211;
          *(void *)v196 = v231;
          *((void *)v196 + 1) = v198;
          v210(&v191[v189], v246, v192);
          v199 = (uint64_t (**)(uint64_t *, unint64_t, unint64_t))&v191[v190];
          v200 = (uint64_t (*)(uint64_t *, unint64_t, unint64_t))v253;
          *v199 = sub_25B245590;
          v199[1] = v200;
          *(void *)((char *)v237 + (void)v191) = v8;
          sub_25B244EEC((uint64_t)v249, (uint64_t)&v191[v236], (uint64_t (*)(void))v241);
          sub_25B187574(v247, (uint64_t)v244 + (void)v191, &qword_26A4D9160);
          v191[v245] = v242;
          v201 = *(void (**)(uint64_t, uint64_t, uint64_t *, uint8_t *, uint64_t (*)(void (*)(void), void *), char *, uint64_t, uint64_t, double))(v193 + 16);
          swift_bridgeObjectRetain();
          swift_retain();
          swift_retain();
          v202 = v227;
          uint64_t v203 = v252;
          v201(v197, v198, v254, v243, sub_25B245AF4, v191, v252, v193, v54);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          (*(void (**)(char *, uint64_t))(v220 + 8))(v202, v203);
          (*(void (**)(char *, uint64_t))(v226 + 8))(v225, v230);
          return (*(uint64_t (**)(uint64_t, uint64_t))(v251 + 8))(v255, v256);
        }
      }
    }
    else
    {
      v127 = *(char **)(v104 + 32);
      unint64_t v128 = v240;
      uint64_t v247 = v104 + 32;
      v246 = v127;
      ((void (*)(unint64_t, os_log_t, uint8_t *))v127)(v240, v103, v105);
      if (qword_26A4D98C8 != -1) {
        swift_once();
      }
      uint64_t v129 = sub_25B290190();
      __swift_project_value_buffer(v129, (uint64_t)qword_26A4EB168);
      v130 = v223;
      v254 = *(uint64_t **)(v104 + 16);
      ((void (*)(char *, unint64_t, uint8_t *))v254)(v223, v128, v105);
      swift_bridgeObjectRetain_n();
      v131 = sub_25B290160();
      v132 = v105;
      os_log_type_t v133 = sub_25B2908A0();
      BOOL v134 = os_log_type_enabled(v131, v133);
      uint64_t v135 = v252;
      v136 = v241;
      uint64_t v211 = *((void *)&v61 + 1);
      if (v134)
      {
        uint64_t v137 = swift_slowAlloc();
        v237 = (void *)swift_slowAlloc();
        v258 = v237;
        *(_DWORD *)uint64_t v137 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v257 = sub_25B288E98(v231, *((unint64_t *)&v61 + 1), (uint64_t *)&v258);
        os_log_t v235 = v131;
        uint64_t v138 = v104;
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v137 + 12) = 2082;
        ((void (*)(uint64_t (*)(), char *, uint8_t *))v254)(v136, v130, v132);
        uint64_t v139 = sub_25B290600();
        uint64_t v257 = sub_25B288E98(v139, v140, (uint64_t *)&v258);
        uint64_t v141 = v256;
        uint64_t v107 = v250;
        sub_25B2909C0();
        v136 = v241;
        swift_bridgeObjectRelease();
        v142 = *(void (**)(unint64_t, uint8_t *))(v138 + 8);
        uint64_t v238 = (v138 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v239 = v142;
        v142((unint64_t)v130, v132);
        os_log_t v143 = v235;
        _os_log_impl(&dword_25B107000, v235, v133, "Connection for %{public}s already exists; sending message immediately: %{public}s",
          (uint8_t *)v137,
          0x16u);
        v144 = v237;
        swift_arrayDestroy();
        MEMORY[0x261160890](v144, -1, -1);
        uint64_t v145 = v137;
        uint64_t v135 = v252;
        MEMORY[0x261160890](v145, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v159 = *(void (**)(unint64_t, uint8_t *))(v104 + 8);
        uint64_t v238 = (v104 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        v239 = v159;
        v159((unint64_t)v130, v132);

        uint64_t v138 = v104;
        uint64_t v141 = v256;
      }
      v237 = &v205;
      MEMORY[0x270FA5388](v146);
      uint64_t v236 = (uint64_t)(&v205 - 16);
      *(&v205 - 14) = v135;
      *(&v205 - 13) = v141;
      *(&v205 - 12) = v248;
      *(&v205 - 11) = v107;
      uint64_t v160 = v245;
      *(&v205 - 10) = v255;
      *(&v205 - 9) = v160;
      unint64_t v161 = v240;
      *(&v205 - 8) = (uint64_t)v244;
      *(&v205 - 7) = v161;
      *((unsigned char *)&v205 - 48) = v242;
      *((double *)&v205 - 5) = v54;
      v244 = sub_25B245590;
      *(&v205 - 4) = v214;
      *(&v205 - 3) = (uint64_t)sub_25B245590;
      v162 = (uint64_t (*)(uint64_t *, unint64_t, unint64_t))v253;
      v204 = v253;
      v163 = v249;
      sub_25B244B78(v160, (uint64_t)v249, (uint64_t (*)(void))type metadata accessor for Message);
      ((void (*)(uint64_t (*)(), unint64_t, uint8_t *))v254)(v136, v161, v243);
      uint64_t v164 = (v233 + 48) & v232;
      unint64_t v165 = (v212 + v164) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v166 = (v165 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v167 = (v166 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v168 = (v167 + *(unsigned __int8 *)(v138 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
      v169 = (void *)swift_allocObject();
      v169[2] = v252;
      v169[3] = v141;
      uint64_t v170 = v250;
      v169[4] = v248;
      v169[5] = v170;
      sub_25B244EEC((uint64_t)v163, (uint64_t)v169 + v164, (uint64_t (*)(void))type metadata accessor for Message);
      v171 = (void *)((char *)v169 + v165);
      uint64_t v172 = v211;
      void *v171 = v231;
      v171[1] = v172;
      v173 = (uint64_t (**)(uint64_t *, unint64_t, unint64_t))((char *)v169 + v166);
      *v173 = v244;
      v173[1] = v162;
      v174 = (double *)((char *)v169 + v167);
      double *v174 = v54;
      v175 = (char *)v169 + v168;
      *((void *)v174 + 1) = v214;
      v176 = v243;
      ((void (*)(char *, uint64_t (*)(), uint8_t *))v246)(v175, v241, v243);
      swift_retain();
      _s16ReplicatorEngine8WatchdogC7execute6within12failureQueue6action0F7HandlerySd_So17OS_dispatch_queueCyACXEyACctFZ_0(v228, (void (*)(uint64_t))sub_25B245DB0);
      swift_release();
      swift_release();
      v239(v240, v176);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v251 + 8))(v255, v141);
    }
  }
  else
  {
    if (qword_26A4D98C8 != -1) {
      swift_once();
    }
    uint64_t v119 = sub_25B290190();
    __swift_project_value_buffer(v119, (uint64_t)qword_26A4EB168);
    swift_bridgeObjectRetain();
    v120 = sub_25B290160();
    os_log_type_t v121 = sub_25B290880();
    BOOL v122 = os_log_type_enabled(v120, v121);
    uint64_t v123 = v71;
    v124 = v213;
    if (v122)
    {
      v125 = (uint8_t *)swift_slowAlloc();
      uint64_t v126 = swift_slowAlloc();
      v258 = (void *)v126;
      *(_DWORD *)v125 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v257 = sub_25B288E98(v231, *((unint64_t *)&v61 + 1), (uint64_t *)&v258);
      uint64_t v123 = v256;
      uint64_t v69 = v255;
      sub_25B2909C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25B107000, v120, v121, "Unable to send message to device: %{public}s; no longer associated with account",
        v125,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x261160890](v126, -1, -1);
      MEMORY[0x261160890](v125, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v147 = v253;
    uint64_t v148 = v248;
    sub_25B2378D0();
    sub_25B2451C8();
    uint64_t v149 = swift_allocError();
    unsigned char *v150 = 1;
    *long long v44 = v149;
    swift_storeEnumTagMultiPayload();
    v147(v44);
    (*(void (**)(uint64_t *, uint64_t (*)()))(v148 + 8))(v44, v124);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v251 + 8))(v69, v123);
  }
  return result;
}

uint64_t sub_25B23B994(uint64_t a1, uint64_t a2, long long *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  uint64_t v45 = a6;
  uint64_t v44 = a5;
  uint64_t v41 = *v7;
  uint64_t v42 = v41;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v39 + 64);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = type metadata accessor for Message();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v18 = a3[9];
  long long v54 = a3[8];
  long long v55 = v18;
  long long v56 = a3[10];
  long long v19 = a3[5];
  long long v50 = a3[4];
  long long v51 = v19;
  long long v20 = a3[7];
  long long v52 = a3[6];
  long long v53 = v20;
  long long v21 = a3[1];
  long long v46 = *a3;
  long long v22 = a3[2];
  long long v49 = a3[3];
  long long v47 = v21;
  long long v48 = v22;
  int v40 = *a4;
  uint64_t v43 = v7[2];
  sub_25B244B78(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Message);
  sub_25B116D78(a2, (uint64_t)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v23 = (*(unsigned __int8 *)(v15 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v24 = (v16 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (*(unsigned __int8 *)(v39 + 80) + v24 + 8) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v41;
  *(void *)(v26 + 16) = *(void *)(v41 + 80);
  *(_OWORD *)(v26 + 24) = *(_OWORD *)(v42 + 88);
  *(void *)(v26 + 40) = *(void *)(v27 + 104);
  sub_25B244EEC((uint64_t)v17, v26 + v23, (uint64_t (*)(void))type metadata accessor for Message);
  *(void *)(v26 + v24) = v7;
  sub_25B187574((uint64_t)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v26 + v25, &qword_26A4D9160);
  unint64_t v28 = v26 + ((v25 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v29 = v55;
  *(_OWORD *)(v28 + 128) = v54;
  *(_OWORD *)(v28 + 144) = v29;
  *(_OWORD *)(v28 + 160) = v56;
  long long v30 = v51;
  *(_OWORD *)(v28 + 64) = v50;
  *(_OWORD *)(v28 + 80) = v30;
  long long v31 = v53;
  *(_OWORD *)(v28 + 96) = v52;
  *(_OWORD *)(v28 + 112) = v31;
  long long v32 = v47;
  *(_OWORD *)unint64_t v28 = v46;
  *(_OWORD *)(v28 + 16) = v32;
  long long v33 = v49;
  *(_OWORD *)(v28 + 32) = v48;
  *(_OWORD *)(v28 + 48) = v33;
  *(unsigned char *)(v28 + 176) = v40;
  uint64_t v34 = (uint64_t *)(v26 + ((v25 + v13 + 191) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v35 = v44;
  uint64_t v36 = v45;
  *uint64_t v34 = v44;
  v34[1] = v36;
  swift_retain();
  sub_25B1172F8((uint64_t)&v46);
  sub_25B207E2C(v35);
  sub_25B1B7434(0x20676E69646E6553, 0xEF6567617373656DLL, v43, (uint64_t)sub_25B24750C, v26, 0.0);
  return swift_release();
}

uint64_t sub_25B23BD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  int v37 = a7;
  uint64_t v38 = a1;
  uint64_t v15 = type metadata accessor for Message();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A4D98C8 != -1) {
    swift_once();
  }
  uint64_t v36 = a9;
  uint64_t v18 = sub_25B290190();
  __swift_project_value_buffer(v18, (uint64_t)qword_26A4EB168);
  sub_25B244B78(a3, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Message);
  long long v19 = sub_25B290160();
  os_log_type_t v20 = sub_25B2908A0();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v35 = a4;
    long long v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v33 = a8;
    uint64_t v24 = v23;
    uint64_t v40 = v23;
    uint64_t v34 = a3;
    uint64_t v32 = a6;
    *(_DWORD *)long long v22 = 136446210;
    uint64_t v25 = Message.description.getter();
    uint64_t v39 = sub_25B288E98(v25, v26, &v40);
    a6 = v32;
    a3 = v34;
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    sub_25B2450A0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Message);
    _os_log_impl(&dword_25B107000, v19, v20, "Sending message with URL: %{public}s", v22, 0xCu);
    swift_arrayDestroy();
    uint64_t v27 = v24;
    a8 = v33;
    MEMORY[0x261160890](v27, -1, -1);
    MEMORY[0x261160890](v22, -1, -1);
  }
  else
  {
    sub_25B2450A0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for Message);
  }

  LOBYTE(v40) = v37;
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v36;
  *(void *)(v28 + 16) = a8;
  *(void *)(v28 + 24) = v29;
  *(void *)(v28 + 32) = v38;
  *(void *)(v28 + 40) = a2;
  sub_25B207E2C(a8);
  swift_retain();
  sub_25B23C09C(a3, a5, a6, (unsigned __int8 *)&v40, (char *)sub_25B24768C, (void (*)(void, void, void))v28);
  return swift_release();
}

uint64_t sub_25B23C024(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t (*a5)(void))
{
  if (a3)
  {
    uint64_t v8 = a2 & 1;
    swift_retain();
    a3(a1, v8);
    sub_25B207D70((uint64_t)a3);
  }
  return a5();
}

void sub_25B23C09C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, char *a5, void (*a6)(void, void, void))
{
  uint64_t v7 = v6;
  uint64_t v208 = a6;
  uint64_t v209 = a5;
  uint64_t v201 = a1;
  uint64_t v202 = a2;
  uint64_t v198 = *(void **)v7;
  uint64_t v10 = v198;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
  uint64_t v185 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v186 = v12;
  uint64_t v192 = (uint64_t)v168 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Message();
  uint64_t v183 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v184 = v14;
  uint64_t v190 = (uint64_t)v168 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v10[10];
  uint64_t v181 = sub_25B2909B0();
  uint64_t v180 = *(void *)(v181 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v181);
  uint64_t v182 = (char *)v168 - v17;
  uint64_t v205 = v15;
  os_log_t v193 = *(os_log_t *)(v15 - 8);
  MEMORY[0x270FA5388](v16);
  v191 = (char *)v168 - v18;
  uint64_t v19 = v10[11];
  uint64_t v210 = v10[13];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v188 = sub_25B2909B0();
  uint64_t v187 = *(void *)(v188 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v188);
  uint64_t v197 = (char *)v168 - v22;
  v200 = (uint8_t *)AssociatedTypeWitness;
  uint64_t v203 = *(uint64_t (**)())(AssociatedTypeWitness - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  v177 = (char *)v168 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  v195 = (char *)v168 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v189 = (char *)v168 - v28;
  uint64_t v194 = v29;
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  v199 = (char *)v168 - v31;
  uint64_t v206 = v19;
  uint64_t v207 = *(void *)(v19 - 8);
  uint64_t v32 = *(void *)(v207 + 64);
  uint64_t v33 = MEMORY[0x270FA5388](v30);
  v204 = (char *)v168 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v211 = (uint64_t)v168 - v34;
  uint64_t v35 = sub_25B290410();
  uint64_t v36 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v38 = (void *)((char *)v168 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = *(void *)a3;
  unint64_t v40 = *(void *)(a3 + 8);
  int v41 = *(unsigned __int8 *)(a3 + 48);
  uint64_t v179 = *(void *)(a3 + 160);
  uint64_t v178 = *(void *)(a3 + 168);
  int v42 = *a4;
  uint64_t v43 = (void *)*((void *)v7 + 2);
  *uint64_t v38 = v43;
  (*(void (**)(void *, void, uint64_t))(v36 + 104))(v38, *MEMORY[0x263F8F0E0], v35);
  id v44 = v43;
  LOBYTE(v43) = sub_25B290440();
  (*(void (**)(void *, uint64_t))(v36 + 8))(v38, v35);
  if ((v43 & 1) == 0)
  {
    __break(1u);
    goto LABEL_35;
  }
  int v196 = v42;
  uint64_t v45 = &v7[*(void *)(*(void *)v7 + 144)];
  uint64_t v46 = *((void *)v45 + 3);
  uint64_t v47 = *((void *)v45 + 4);
  __swift_project_boxed_opaque_existential_1(v45, v46);
  if ((*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v47 + 8))(v39, v40, v46, v47))
  {
    if (qword_26A4D98C8 == -1)
    {
LABEL_4:
      uint64_t v48 = sub_25B290190();
      __swift_project_value_buffer(v48, (uint64_t)qword_26A4EB168);
      long long v49 = sub_25B290160();
      os_log_type_t v50 = sub_25B2908A0();
      BOOL v51 = os_log_type_enabled(v49, v50);
      long long v52 = (void (*)(void *, uint64_t))v209;
      if (v51)
      {
        long long v53 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)long long v53 = 0;
        _os_log_impl(&dword_25B107000, v49, v50, "Cannot send messages to remote device ID not in allow list", v53, 2u);
        MEMORY[0x261160890](v53, -1, -1);
      }

      if (v52)
      {
        sub_25B2451C8();
        long long v54 = (void *)swift_allocError();
        unsigned char *v55 = 2;
        v52(v54, 1);
      }
      return;
    }
LABEL_35:
    swift_once();
    goto LABEL_4;
  }
  LOBYTE(v213) = v41 == 4;
  swift_bridgeObjectRetain();
  uint64_t v56 = v211;
  sub_25B236DB8(&v213, v211);
  uint64_t v57 = v210;
  uint64_t v58 = v206;
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(v210 + 72))(&v213, v206, v210);
  uint64_t v59 = v215;
  uint64_t v60 = v216;
  __swift_project_boxed_opaque_existential_1(&v213, v215);
  uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 32))(v59, v60);
  uint64_t v62 = sub_25B2367A0(v61);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v213);
  uint64_t v63 = sub_25B227BD0(v62);
  swift_bridgeObjectRelease();
  LOBYTE(v62) = sub_25B2109B4(v39, v40, v63);
  swift_bridgeObjectRelease();
  if (v62)
  {
    uint64_t v64 = v207;
    long long v65 = *(void (**)(char *, uint64_t, uint64_t))(v207 + 16);
    v168[1] = v207 + 16;
    v168[0] = v65;
    v65(v204, v56, v58);
    uint64_t v66 = *(unsigned __int8 *)(v64 + 80);
    uint64_t v67 = (v66 + 72) & ~v66;
    uint64_t v170 = v66;
    uint64_t v169 = v32 + 7;
    uint64_t v68 = v32 + 7 + v67;
    uint64_t v69 = v58;
    unint64_t v70 = v68 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v171 = v66 | 7;
    uint64_t v71 = (char *)swift_allocObject();
    *((void *)v71 + 2) = v205;
    *((void *)v71 + 3) = v69;
    uint64_t v174 = v198[12];
    *((void *)v71 + 4) = v174;
    *((void *)v71 + 5) = v57;
    uint64_t v72 = v208;
    uint64_t v73 = (uint64_t)v209;
    *((void *)v71 + 6) = v7;
    *((void *)v71 + 7) = v73;
    *((void *)v71 + 8) = v72;
    uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v64 + 32);
    uint64_t v173 = v64 + 32;
    uint64_t v172 = v74;
    v74(&v71[v67], v204, v69);
    v175 = v71;
    uint64_t v75 = (uint64_t *)&v71[v70];
    *uint64_t v75 = v39;
    v75[1] = v40;
    uint64_t v76 = v211;
    uint64_t v77 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v210 + 120);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v78 = v73;
    uint64_t v79 = v210;
    sub_25B207E2C(v78);
    uint64_t v176 = v39;
    uint64_t v198 = (void *)v40;
    unint64_t v80 = v40;
    uint64_t v81 = v197;
    v77(v39, v80, v69, v79);
    unint64_t v82 = v203;
    unint64_t v83 = v200;
    if ((*((unsigned int (**)(char *, uint64_t, uint8_t *))v203 + 6))(v81, 1, v200) == 1)
    {
      (*(void (**)(char *, uint64_t))(v187 + 8))(v81, v188);
      uint64_t v84 = *(uint64_t (**)())(v79 + 64);
      ((void (*)(char **__return_ptr, uint64_t, uint64_t))v84)(&v213, v69, v79);
      uint64_t v85 = v69;
      if (v213 == 1)
      {
        unint64_t v86 = v195;
        (*(void (**)(uint64_t, void *, uint64_t, uint64_t))(v79 + 104))(v176, v198, v69, v79);
        swift_bridgeObjectRelease();
        LOBYTE(v213) = v196;
        v87 = v177;
        (*((void (**)(char *, char *, uint8_t *))v82 + 2))(v177, v86, v83);
        uint64_t v88 = v82;
        unint64_t v89 = (*((unsigned __int8 *)v82 + 80) + 64) & ~(unint64_t)*((unsigned __int8 *)v82 + 80);
        v90 = v83;
        uint64_t v91 = (char *)swift_allocObject();
        *((void *)v91 + 2) = v205;
        *((void *)v91 + 3) = v85;
        *((void *)v91 + 4) = v174;
        *((void *)v91 + 5) = v79;
        v92 = v175;
        *((void *)v91 + 6) = sub_25B247788;
        *((void *)v91 + 7) = v92;
        (*((void (**)(char *, char *, uint8_t *))v88 + 4))(&v91[v89], v87, v90);
        uint64_t v93 = v79;
        v94 = *(void (**)(uint64_t, uint64_t, char *, char **, uint64_t (*)(), char *, uint64_t, uint64_t))(v79 + 128);
        swift_retain();
        v94(v201, v202, v86, &v213, sub_25B247D04, v91, v85, v93);
        swift_release();
        swift_release();
        (*((void (**)(char *, uint8_t *))v88 + 1))(v86, v90);
        (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v76, v85);
      }
      else
      {
        if (qword_26A4D98C8 != -1) {
          swift_once();
        }
        uint64_t v203 = v84;
        uint64_t v123 = sub_25B290190();
        __swift_project_value_buffer(v123, (uint64_t)qword_26A4EB168);
        unint64_t v124 = (unint64_t)v198;
        swift_bridgeObjectRetain_n();
        v125 = sub_25B290160();
        os_log_type_t v126 = sub_25B2908A0();
        BOOL v127 = os_log_type_enabled(v125, v126);
        uint64_t v128 = v205;
        if (v127)
        {
          uint64_t v129 = (uint8_t *)swift_slowAlloc();
          uint64_t v130 = swift_slowAlloc();
          v213 = (char *)v130;
          *(_DWORD *)uint64_t v129 = 136446210;
          uint64_t v85 = v206;
          v200 = v129 + 4;
          swift_bridgeObjectRetain();
          uint64_t v212 = sub_25B288E98(v176, v124, (uint64_t *)&v213);
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25B107000, v125, v126, "Using browser to find %{public}s", v129, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x261160890](v130, -1, -1);
          MEMORY[0x261160890](v129, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        os_log_t v142 = v193;
        os_log_t v143 = v182;
        uint64_t v144 = v181;
        uint64_t v145 = v180;
        (*(void (**)(char *, char *, uint64_t))(v180 + 16))(v182, &v7[*(void *)(*(void *)v7 + 128)], v181);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v142[6].isa)(v143, 1, v128) == 1)
        {
          (*(void (**)(char *, uint64_t))(v145 + 8))(v143, v144);
          v213 = 0;
          unint64_t v214 = 0xE000000000000000;
          sub_25B290AA0();
          swift_bridgeObjectRelease();
          v213 = (char *)0xD000000000000028;
          unint64_t v214 = 0x800000025B29E3C0;
          ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v203)(&v212, v85, v210);
          sub_25B290650();
          swift_bridgeObjectRelease();
          sub_25B290BC0();
          __break(1u);
        }
        else
        {
          uint64_t v146 = v170;
          ((void (*)(char *, char *, uint64_t))v142[4].isa)(v191, v143, v128);
          v147 = v204;
          ((void (*)(char *, uint64_t, uint64_t))v168[0])(v204, v211, v85);
          uint64_t v203 = type metadata accessor for Message;
          sub_25B244B78(v201, v190, (uint64_t (*)(void))type metadata accessor for Message);
          sub_25B116D78(v202, v192);
          uint64_t v148 = (v146 + 64) & ~v146;
          unint64_t v149 = (v169 + v148) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v150 = (v149 + *(unsigned __int8 *)(v183 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v183 + 80);
          uint64_t v151 = v85;
          unint64_t v152 = (v184 + *(unsigned __int8 *)(v185 + 80) + v150) & ~(unint64_t)*(unsigned __int8 *)(v185 + 80);
          uint64_t v153 = v152 + v186;
          os_log_type_t v154 = (char *)swift_allocObject();
          BOOL v155 = &v154[v153 & 0xFFFFFFFFFFFFFFF8];
          *((void *)v154 + 2) = v128;
          *((void *)v154 + 3) = v151;
          uint64_t v156 = v151;
          uint64_t v157 = v174;
          *((void *)v154 + 4) = v174;
          uint64_t v158 = v157;
          *((void *)v154 + 5) = v210;
          v159 = v198;
          *((void *)v154 + 6) = v176;
          *((void *)v154 + 7) = v159;
          v172(&v154[v148], v147, v156);
          uint64_t v160 = &v154[v149];
          unint64_t v161 = v208;
          uint64_t v162 = (uint64_t)v209;
          *(void *)uint64_t v160 = v209;
          *((void *)v160 + 1) = v161;
          sub_25B244EEC(v190, (uint64_t)&v154[v150], (uint64_t (*)(void))v203);
          sub_25B187574(v192, (uint64_t)&v154[v152], &qword_26A4D9160);
          v154[v153] = v196;
          v163 = v175;
          *((void *)v155 + 1) = sub_25B247788;
          *((void *)v155 + 2) = v163;
          uint64_t v164 = v158;
          unint64_t v165 = *(void (**)(uint64_t, void *, uint64_t, uint64_t, void (*)(uint64_t, void *), void *, uint64_t, uint64_t, double))(v158 + 16);
          swift_bridgeObjectRetain();
          sub_25B207E2C(v162);
          swift_retain();
          unint64_t v166 = v191;
          uint64_t v167 = v205;
          v165(v176, v159, v179, v178, sub_25B247B54, v154, v205, v164, 30.0);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          ((void (*)(char *, uint64_t))v193[1].isa)(v166, v167);
          (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v211, v206);
        }
      }
    }
    else
    {
      v101 = v199;
      uint64_t v208 = (void (*)(void, void, void))*((void *)v82 + 4);
      uint64_t v209 = (char *)v82 + 32;
      v208(v199, v81, v83);
      if (qword_26A4D98C8 != -1) {
        swift_once();
      }
      uint64_t v102 = sub_25B290190();
      __swift_project_value_buffer(v102, (uint64_t)qword_26A4EB168);
      os_log_t v103 = (void (*)(char *, char *, uint8_t *))*((void *)v82 + 2);
      uint64_t v104 = v189;
      v103(v189, v101, v83);
      unint64_t v105 = (unint64_t)v198;
      swift_bridgeObjectRetain();
      int v106 = sub_25B290160();
      os_log_type_t v107 = sub_25B2908A0();
      BOOL v108 = os_log_type_enabled(v106, v107);
      v109 = v195;
      if (v108)
      {
        uint64_t v110 = swift_slowAlloc();
        uint64_t v197 = (char *)swift_slowAlloc();
        v213 = v197;
        *(_DWORD *)uint64_t v110 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v212 = sub_25B288E98(v176, v105, (uint64_t *)&v213);
        os_log_t v193 = v106;
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v110 + 12) = 2082;
        v103(v109, v104, v83);
        uint64_t v111 = sub_25B290600();
        uint64_t v212 = sub_25B288E98(v111, v112, (uint64_t *)&v213);
        sub_25B2909C0();
        swift_bridgeObjectRelease();
        v113 = v203;
        v204 = (char *)*((void *)v203 + 1);
        ((void (*)(char *, uint8_t *))v204)(v104, v83);
        os_log_t v114 = v193;
        os_log_type_t v115 = v107;
        v116 = v103;
        _os_log_impl(&dword_25B107000, v193, v115, "Connection for %{public}s already exists; sending message immediately: %{public}s",
          (uint8_t *)v110,
          0x16u);
        unint64_t v117 = v197;
        swift_arrayDestroy();
        MEMORY[0x261160890](v117, -1, -1);
        MEMORY[0x261160890](v110, -1, -1);

        uint64_t v118 = v205;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v116 = v103;
        v204 = (char *)*((void *)v82 + 1);
        ((void (*)(char *, uint8_t *))v204)(v104, v83);

        uint64_t v118 = v205;
        v113 = v82;
      }
      uint64_t v131 = v174;
      LOBYTE(v213) = v196;
      v132 = v199;
      v116(v109, v199, v83);
      unint64_t v133 = (*((unsigned __int8 *)v113 + 80) + 64) & ~(unint64_t)*((unsigned __int8 *)v113 + 80);
      BOOL v134 = v83;
      uint64_t v135 = (void *)swift_allocObject();
      uint64_t v136 = v206;
      v135[2] = v118;
      v135[3] = v136;
      uint64_t v137 = v210;
      v135[4] = v131;
      v135[5] = v137;
      uint64_t v138 = v109;
      uint64_t v139 = v175;
      v135[6] = sub_25B247788;
      v135[7] = v139;
      v208((char *)v135 + v133, v138, v134);
      unint64_t v140 = *(void (**)(uint64_t, uint64_t, char *, char **, uint64_t (*)(), void *, uint64_t, uint64_t))(v137 + 128);
      swift_retain();
      uint64_t v141 = v211;
      v140(v201, v202, v132, &v213, sub_25B247D04, v135, v136, v137);
      swift_release();
      swift_release();
      ((void (*)(char *, uint8_t *))v204)(v132, v134);
      (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v141, v136);
    }
  }
  else
  {
    uint64_t v95 = v39;
    if (qword_26A4D98C8 != -1) {
      swift_once();
    }
    uint64_t v96 = sub_25B290190();
    __swift_project_value_buffer(v96, (uint64_t)qword_26A4EB168);
    swift_bridgeObjectRetain();
    long long v97 = sub_25B290160();
    os_log_type_t v98 = sub_25B290880();
    if (os_log_type_enabled(v97, v98))
    {
      long long v99 = (uint8_t *)swift_slowAlloc();
      uint64_t v100 = swift_slowAlloc();
      v213 = (char *)v100;
      *(_DWORD *)long long v99 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v212 = sub_25B288E98(v95, v40, (uint64_t *)&v213);
      sub_25B2909C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25B107000, v97, v98, "Unable to send message to device: %{public}s; no longer associated with account",
        v99,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x261160890](v100, -1, -1);
      MEMORY[0x261160890](v99, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v119 = (void (*)(void *, uint64_t))v209;
    uint64_t v120 = v211;
    sub_25B2378D0();
    if (v119)
    {
      sub_25B2451C8();
      os_log_type_t v121 = (void *)swift_allocError();
      *BOOL v122 = 1;
      v119(v121, 1);
    }
    (*(void (**)(uint64_t, uint64_t))(v207 + 8))(v120, v58);
  }
}

uint64_t sub_25B23D770()
{
  sub_25B244A28();
  return swift_release();
}

uint64_t (*sub_25B23D7A8(uint64_t *a1))(uint64_t a1, char a2)
{
  a1[1] = v1;
  *a1 = sub_25B237008();
  return sub_25B23D7F0;
}

uint64_t sub_25B23D7F0(uint64_t a1, char a2)
{
  if (a2)
  {
    swift_retain();
    sub_25B244A28();
    swift_release();
  }
  else
  {
    sub_25B244A28();
  }
  return swift_release();
}

uint64_t sub_25B23D848(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v34 = a7;
  uint64_t v35 = a1;
  uint64_t v42 = a5;
  uint64_t v43 = a6;
  uint64_t v9 = a4;
  int v37 = a3;
  id v41 = a2;
  uint64_t v38 = a9;
  uint64_t v39 = a8;
  uint64_t v10 = *(void **)a4;
  uint64_t v36 = *(void *)(*(void *)a4 + 104);
  uint64_t v11 = v10[11];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v33 = (char *)&v32 - v16;
  uint64_t v18 = *(void *)(v11 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x270FA5388](v15);
  uint64_t v21 = (char *)&v32 - v20;
  dispatch_queue_t v40 = *(dispatch_queue_t *)(v9 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v32 - v20, v34, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v17, v35, AssociatedTypeWitness);
  unint64_t v22 = (*(unsigned __int8 *)(v18 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v23 = (v19 + *(unsigned __int8 *)(v13 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v10[10];
  *(void *)(v24 + 24) = v11;
  *(void *)(v24 + 32) = v10[12];
  id v25 = v41;
  *(void *)(v24 + 40) = v36;
  *(void *)(v24 + 48) = v25;
  LOBYTE(v9) = v37 & 1;
  *(unsigned char *)(v24 + 56) = v37 & 1;
  uint64_t v26 = v43;
  *(void *)(v24 + 64) = v42;
  *(void *)(v24 + 72) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v24 + v22, v21, v11);
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v24 + v23, v33, v32);
  uint64_t v27 = (void *)(v24 + ((v14 + v23 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v28 = v38;
  void *v27 = v39;
  v27[1] = v28;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = sub_25B248020;
  *(void *)(v29 + 24) = v24;
  aBlock[4] = sub_25B1168E4;
  void aBlock[5] = v29;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B10D184;
  aBlock[3] = &block_descriptor_74;
  uint64_t v30 = _Block_copy(aBlock);
  sub_25B116CFC(v41, v9);
  sub_25B207E2C(v42);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  dispatch_sync(v40, v30);
  _Block_release(v30);
  LOBYTE(v30) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v30) {
    __break(1u);
  }
  return result;
}

void sub_25B23DC08(void *a1, char a2, void (*a3)(void *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    uint64_t v32 = (uint64_t)a1;
    id v17 = a1;
    id v18 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F390);
    if (swift_dynamicCast())
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(a12 + 112))(a6, a10, a12);
      if (qword_26A4D98C8 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_25B290190();
      __swift_project_value_buffer(v19, (uint64_t)qword_26A4EB168);
      sub_25B116CFC(a1, 1);
      swift_bridgeObjectRetain();
      sub_25B116CFC(a1, 1);
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_25B290160();
      os_log_type_t v21 = sub_25B290880();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        unint64_t v23 = (void *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v32 = v29;
        *(_DWORD *)uint64_t v22 = 136446466;
        swift_bridgeObjectRetain();
        sub_25B288E98(a7, a8, &v32);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v22 + 12) = 2112;
        id v24 = a1;
        uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
        sub_25B2909C0();
        *unint64_t v23 = v30;
        sub_25B116D08(a1, 1);
        sub_25B116D08(a1, 1);
        id v25 = "Could not send message to %{public}s with error %@; discarding connection and giving up";
        goto LABEL_15;
      }
    }
    else
    {
      if (qword_26A4D98C8 != -1) {
        swift_once();
      }
      uint64_t v26 = sub_25B290190();
      __swift_project_value_buffer(v26, (uint64_t)qword_26A4EB168);
      sub_25B116CFC(a1, 1);
      swift_bridgeObjectRetain();
      sub_25B116CFC(a1, 1);
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_25B290160();
      os_log_type_t v21 = sub_25B290880();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = swift_slowAlloc();
        unint64_t v23 = (void *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        uint64_t v32 = v29;
        *(_DWORD *)uint64_t v22 = 136446466;
        swift_bridgeObjectRetain();
        sub_25B288E98(a7, a8, &v32);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v22 + 12) = 2112;
        id v27 = a1;
        uint64_t v31 = _swift_stdlib_bridgeErrorToNSError();
        sub_25B2909C0();
        *unint64_t v23 = v31;
        sub_25B116D08(a1, 1);
        sub_25B116D08(a1, 1);
        id v25 = "Could not send message to %{public}s with error %@; abandoning send attempts";
LABEL_15:
        _os_log_impl(&dword_25B107000, v20, v21, v25, (uint8_t *)v22, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4DAC60);
        swift_arrayDestroy();
        MEMORY[0x261160890](v23, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261160890](v29, -1, -1);
        MEMORY[0x261160890](v22, -1, -1);

        if (!a3) {
          goto LABEL_19;
        }
        goto LABEL_18;
      }
    }
    swift_bridgeObjectRelease_n();
    sub_25B116D08(a1, 1);
    sub_25B116D08(a1, 1);

    if (!a3)
    {
LABEL_19:
      sub_25B116D08(a1, 1);
      return;
    }
LABEL_18:
    id v28 = a1;
    a3(a1, 1);
    sub_25B116D08(a1, 1);
    goto LABEL_19;
  }
  if (a3)
  {
    swift_retain();
    a3((void *)1, 0);
    sub_25B207D70((uint64_t)a3);
  }
}

void sub_25B23E10C(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, void (*a6)(void *, uint64_t), uint64_t a7, uint64_t a8, void (*a9)(void *, uint64_t), char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v122 = a8;
  uint64_t v131 = a7;
  uint64_t v132 = a3;
  id v138 = a2;
  uint64_t v139 = a6;
  uint64_t v137 = a5;
  unint64_t v127 = a4;
  uint64_t v135 = a14;
  uint64_t v136 = a16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v129 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v119 = (char *)&v109 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = v19;
  MEMORY[0x270FA5388](v18);
  os_log_type_t v126 = (char *)&v109 - v20;
  uint64_t v134 = v21;
  uint64_t v130 = sub_25B2909B0();
  uint64_t v128 = *(void *)(v130 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v130);
  v125 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  unint64_t v124 = (char *)&v109 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  id v28 = (char *)&v109 - v27;
  MEMORY[0x270FA5388](v26);
  unint64_t v133 = (char *)&v109 - v29;
  uint64_t v121 = a15;
  uint64_t v120 = a13;
  swift_getAssociatedTypeWitness();
  uint64_t v123 = type metadata accessor for NetworkDevice();
  uint64_t v117 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v31 = (char *)&v109 - v30;
  uint64_t v32 = type metadata accessor for NetworkBrowsingEvent();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v36 = (char *)&v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v34);
  uint64_t v38 = (char *)&v109 - v37;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v39 = sub_25B291270();
  MEMORY[0x270FA5388](v39);
  id v41 = (void **)((char *)&v109 - v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))((char *)&v109 - v40, a1, v39);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v43 = *v41;
    if (qword_26A4D98C8 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_25B290190();
    __swift_project_value_buffer(v44, (uint64_t)qword_26A4EB168);
    id v45 = v43;
    id v46 = v43;
    uint64_t v47 = sub_25B290160();
    os_log_type_t v48 = sub_25B290880();
    if (os_log_type_enabled(v47, v48))
    {
      long long v49 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v140 = (uint64_t)v43;
      uint64_t v141 = (void (*)(void, void))v50;
      *(_DWORD *)long long v49 = 136446210;
      id v51 = v43;
      uint64_t v52 = sub_25B290600();
      uint64_t v140 = sub_25B288E98(v52, v53, (uint64_t *)&v141);
      sub_25B2909C0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25B107000, v47, v48, "Failed to discover endpoint: %{public}s", v49, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261160890](v50, -1, -1);
      MEMORY[0x261160890](v49, -1, -1);
    }
    else
    {
    }
    uint64_t v57 = v139;
    if (v138) {
      objc_msgSend(v138, sel_invalidate);
    }
    if (v57)
    {
      sub_25B207E2C((uint64_t)v57);
      id v58 = v43;
      v57(v43, 1);

      sub_25B207D70((uint64_t)v57);
    }
    else
    {
    }
  }
  else
  {
    (*(void (**)(char *, void **, uint64_t))(v33 + 32))(v38, v41, v32);
    if (*v38)
    {
      if (v138) {
        objc_msgSend(v138, sel_invalidate);
      }
      long long v54 = v139;
      if (v139)
      {
        sub_25B2451C8();
        long long v55 = (void *)swift_allocError();
        *uint64_t v56 = 0;
        swift_retain();
        v54(v55, 1);
        sub_25B207D70((uint64_t)v54);
      }
      (*(void (**)(char *, uint64_t))(v33 + 8))(v38, v32);
    }
    else
    {
      if (qword_26A4D98C8 != -1) {
        swift_once();
      }
      uint64_t v59 = sub_25B290190();
      uint64_t v60 = __swift_project_value_buffer(v59, (uint64_t)qword_26A4EB168);
      uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v33 + 16);
      os_log_type_t v115 = v38;
      v61(v36, v38, v32);
      unint64_t v62 = v127;
      swift_bridgeObjectRetain_n();
      uint64_t v111 = v60;
      uint64_t v63 = sub_25B290160();
      os_log_type_t v64 = sub_25B2908A0();
      int v65 = v64;
      BOOL v66 = os_log_type_enabled(v63, v64);
      uint64_t v116 = v33;
      if (v66)
      {
        uint64_t v67 = swift_slowAlloc();
        LODWORD(v112) = v65;
        uint64_t v68 = v67;
        os_log_t v114 = (void (*)(void, void))swift_slowAlloc();
        uint64_t v141 = v114;
        *(_DWORD *)uint64_t v68 = 136446466;
        swift_bridgeObjectRetain();
        uint64_t v140 = sub_25B288E98(v132, v62, (uint64_t *)&v141);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v68 + 12) = 2082;
        (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v31, &v36[*(int *)(v32 + 28)], v123);
        uint64_t v69 = sub_25B290600();
        uint64_t v140 = sub_25B288E98(v69, v70, (uint64_t *)&v141);
        sub_25B2909C0();
        swift_bridgeObjectRelease();
        v113 = *(void (**)(char *, uint64_t))(v116 + 8);
        v113(v36, v32);
        _os_log_impl(&dword_25B107000, v63, (os_log_type_t)v112, "Device for %{public}s discovered; sending message to %{public}s",
          (uint8_t *)v68,
          0x16u);
        uint64_t v71 = v114;
        swift_arrayDestroy();
        MEMORY[0x261160890](v71, -1, -1);
        MEMORY[0x261160890](v68, -1, -1);

        uint64_t v72 = v132;
        uint64_t v73 = v130;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v113 = *(void (**)(char *, uint64_t))(v33 + 8);
        v113(v36, v32);

        uint64_t v73 = v130;
        uint64_t v72 = v132;
      }
      uint64_t v74 = v129;
      uint64_t v75 = v134;
      uint64_t v110 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v129 + 56);
      v110(v133, 1, 1, v134);
      v109 = *(void (**)(uint64_t, unint64_t, uint64_t))(v136 + 120);
      v109(v72, v62, v135);
      unint64_t v112 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
      int v76 = v112(v28, 1, v75);
      uint64_t v77 = *(void (**)(void, void))(v128 + 8);
      uint64_t v117 = v128 + 8;
      os_log_t v114 = v77;
      v77(v28, v73);
      swift_bridgeObjectRetain_n();
      uint64_t v78 = sub_25B290160();
      os_log_type_t v79 = sub_25B2908A0();
      BOOL v80 = os_log_type_enabled(v78, v79);
      if (v76 == 1)
      {
        if (v80)
        {
          uint64_t v81 = (uint8_t *)swift_slowAlloc();
          uint64_t v82 = swift_slowAlloc();
          uint64_t v141 = (void (*)(void, void))v82;
          *(_DWORD *)uint64_t v81 = 136446210;
          unint64_t v83 = v127;
          swift_bridgeObjectRetain();
          uint64_t v140 = sub_25B288E98(v132, v83, (uint64_t *)&v141);
          uint64_t v73 = v130;
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25B107000, v78, v79, "Connection for %{public}s does not exist; creating new connection...",
            v81,
            0xCu);
          swift_arrayDestroy();
          MEMORY[0x261160890](v82, -1, -1);
          MEMORY[0x261160890](v81, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v88 = v134;
        unint64_t v89 = v124;
        v90 = (void (*)(char *, uint64_t))v114;
        (*(void (**)(char *, uint64_t))(v136 + 96))(&v115[*(int *)(v32 + 28) + (uint64_t)*(int *)(v123 + 32)], v135);
        uint64_t v91 = v133;
        v90(v133, v73);
        v110(v89, 0, 1, v88);
        v92 = v91;
      }
      else
      {
        if (v80)
        {
          uint64_t v84 = (uint8_t *)swift_slowAlloc();
          uint64_t v85 = swift_slowAlloc();
          uint64_t v141 = (void (*)(void, void))v85;
          *(_DWORD *)uint64_t v84 = 136446210;
          uint64_t v123 = (uint64_t)(v84 + 4);
          unint64_t v86 = v127;
          swift_bridgeObjectRetain();
          uint64_t v87 = v132;
          uint64_t v140 = sub_25B288E98(v132, v86, (uint64_t *)&v141);
          uint64_t v73 = v130;
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25B107000, v78, v79, "Connection for %{public}s already exists; using existing connection...",
            v84,
            0xCu);
          swift_arrayDestroy();
          MEMORY[0x261160890](v85, -1, -1);
          MEMORY[0x261160890](v84, -1, -1);

          uint64_t v88 = v134;
          unint64_t v89 = v124;
        }
        else
        {

          unint64_t v86 = v127;
          swift_bridgeObjectRelease_n();
          uint64_t v88 = v134;
          unint64_t v89 = v124;
          uint64_t v87 = v132;
        }
        ((void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v109)(v87, v86, v135, v136);
        v92 = v133;
        v90 = (void (*)(char *, uint64_t))v114;
        v114(v133, v73);
      }
      uint64_t v93 = v125;
      uint64_t v94 = v128;
      (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v92, v89, v73);
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, v92, v73);
      if (v112(v93, 1, v88) == 1)
      {
        v90(v93, v73);
        uint64_t v95 = v139;
        if (v139)
        {
          sub_25B207F8C();
          uint64_t v96 = (void *)swift_allocError();
          *long long v97 = 0;
          v95(v96, 1);
        }
        v90(v92, v73);
      }
      else
      {
        uint64_t v139 = a9;
        uint64_t v131 = a11;
        uint64_t v132 = a12;
        uint64_t v128 = *(void *)(v129 + 32);
        ((void (*)(char *, char *, uint64_t))v128)(v126, v93, v88);
        if (v138) {
          objc_msgSend(v138, sel_invalidate);
        }
        LOBYTE(v141) = a10;
        uint64_t v98 = v129;
        long long v99 = v119;
        uint64_t v100 = v126;
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v119, v126, v88);
        uint64_t v101 = v88;
        unint64_t v102 = (*(unsigned __int8 *)(v98 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
        os_log_t v103 = (void *)swift_allocObject();
        uint64_t v104 = v135;
        uint64_t v105 = v136;
        v103[2] = v120;
        v103[3] = v104;
        v103[4] = v121;
        v103[5] = v105;
        int v106 = (char *)v103 + v102;
        uint64_t v107 = v132;
        v103[6] = v131;
        v103[7] = v107;
        ((void (*)(char *, char *, uint64_t))v128)(v106, v99, v101);
        BOOL v108 = *(void (**)(uint64_t, void (*)(void, void), char *, void (**)(void, void), uint64_t (*)(), void *, uint64_t, uint64_t))(v105 + 128);
        swift_retain();
        v108(v122, (void (*)(void, void))v139, v100, &v141, sub_25B247D04, v103, v104, v105);
        swift_release();
        (*(void (**)(char *, uint64_t))(v98 + 8))(v100, v134);
        v114(v133, v130);
      }
      v113(v115, v32);
    }
  }
}

uint64_t sub_25B23F0B0(uint64_t *a1, unint64_t a2, unint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(), uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, _OWORD *a12, unsigned __int8 a13)
{
  uint64_t v75 = a8;
  uint64_t v81 = a7;
  uint64_t v84 = a6;
  uint64_t v83 = a5;
  unint64_t v76 = a3;
  unint64_t v79 = a2;
  int v88 = a13;
  uint64_t v86 = a10;
  uint64_t v85 = a9;
  unint64_t v80 = a11;
  uint64_t v15 = *a4;
  uint64_t v90 = sub_25B290320();
  uint64_t v93 = *(void *)(v90 - 8);
  MEMORY[0x270FA5388](v90);
  unint64_t v89 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_25B290360();
  uint64_t v91 = *(void *)(v17 - 8);
  uint64_t v92 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v87 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
  unint64_t v77 = *(void *)(v19 - 8);
  uint64_t v78 = *(void *)(v77 + 64);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v98 = (uint64_t)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Message();
  uint64_t v73 = *(void *)(v21 - 8);
  uint64_t v71 = *(void *)(v73 + 64);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v97 = (uint64_t)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = v15;
  uint64_t v24 = *(void *)(v15 + 88);
  uint64_t v96 = *(void *)(v24 - 8);
  uint64_t v70 = *(void *)(v96 + 64);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v63 - v25;
  uint64_t v68 = (char *)&v63 - v25;
  uint64_t v72 = *(void *)(v27 + 104);
  uint64_t v95 = a4;
  uint64_t v63 = v24;
  swift_getAssociatedTypeWitness();
  uint64_t v28 = sub_25B2909B0();
  uint64_t v66 = v28;
  uint64_t v94 = *(void *)(v28 - 8);
  uint64_t v29 = *(void *)(v94 + 64);
  MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v63 - v30;
  uint64_t v67 = (char *)&v63 - v30;
  type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v64 = sub_25B291270();
  uint64_t v32 = *(void *)(v64 - 8);
  uint64_t v33 = *(void *)(v32 + 64);
  MEMORY[0x270FA5388](v64);
  int v65 = (char *)&v63 - v34;
  uint64_t v35 = *a1;
  uint64_t v69 = a1[1];
  uint64_t v82 = a4[2];
  (*(void (**)(void))(v32 + 16))();
  uint64_t v36 = v94;
  (*(void (**)(char *, unint64_t, uint64_t))(v94 + 16))(v31, v79, v28);
  uint64_t v37 = v96;
  (*(void (**)(char *, uint64_t (*)(), uint64_t))(v96 + 16))(v26, v81, v24);
  uint64_t v81 = type metadata accessor for Message;
  sub_25B244B78(v75, v97, (uint64_t (*)(void))type metadata accessor for Message);
  sub_25B116D78(v80, v98);
  unint64_t v38 = (*(unsigned __int8 *)(v32 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  unint64_t v39 = (v33 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (*(unsigned __int8 *)(v36 + 80) + v39 + 16) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  unint64_t v41 = (v29 + *(unsigned __int8 *)(v37 + 80) + v40) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
  unint64_t v76 = (v70 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = (*(unsigned __int8 *)(v73 + 80) + v76 + 16) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
  unint64_t v80 = (v71 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v79 = (v80 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v77 = (*(unsigned __int8 *)(v77 + 80) + v79 + 8) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
  unint64_t v43 = (v78 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = (char *)swift_allocObject();
  uint64_t v45 = v74;
  *((void *)v44 + 2) = *(void *)(v74 + 80);
  uint64_t v46 = v63;
  *((void *)v44 + 3) = v63;
  *((void *)v44 + 4) = *(void *)(v45 + 96);
  *((void *)v44 + 5) = v72;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))(&v44[v38], v65, v64);
  uint64_t v47 = &v44[v39];
  uint64_t v48 = v84;
  *(void *)uint64_t v47 = v83;
  *((void *)v47 + 1) = v48;
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v44[v40], v67, v66);
  (*(void (**)(char *, char *, uint64_t))(v96 + 32))(&v44[v41], v68, v46);
  long long v49 = &v44[v76];
  *(void *)long long v49 = v35;
  *((void *)v49 + 1) = v69;
  sub_25B244EEC(v97, (uint64_t)&v44[v42], (uint64_t (*)(void))v81);
  uint64_t v50 = &v44[v80];
  uint64_t v51 = v86;
  *(void *)uint64_t v50 = v85;
  *((void *)v50 + 1) = v51;
  *(void *)&v44[v79] = v95;
  sub_25B187574(v98, (uint64_t)&v44[v77], &qword_26A4D9160);
  uint64_t v52 = &v44[v43];
  long long v53 = a12[9];
  *((_OWORD *)v52 + 8) = a12[8];
  *((_OWORD *)v52 + 9) = v53;
  *((_OWORD *)v52 + 10) = a12[10];
  long long v54 = a12[5];
  *((_OWORD *)v52 + 4) = a12[4];
  *((_OWORD *)v52 + 5) = v54;
  long long v55 = a12[7];
  *((_OWORD *)v52 + 6) = a12[6];
  *((_OWORD *)v52 + 7) = v55;
  long long v56 = a12[1];
  *(_OWORD *)uint64_t v52 = *a12;
  *((_OWORD *)v52 + 1) = v56;
  long long v57 = a12[3];
  *((_OWORD *)v52 + 2) = a12[2];
  *((_OWORD *)v52 + 3) = v57;
  v52[176] = v88;
  aBlock[4] = sub_25B246E54;
  void aBlock[5] = v44;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B10F584;
  aBlock[3] = &block_descriptor_13;
  id v58 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_25B1172F8((uint64_t)a12);
  uint64_t v59 = v87;
  sub_25B290340();
  uint64_t v99 = MEMORY[0x263F8EE78];
  sub_25B247138((unint64_t *)&unk_26A4D9A00, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9AD0);
  sub_25B116394((unint64_t *)&qword_26A4D9AE0, (uint64_t *)&unk_26A4D9AD0);
  uint64_t v60 = v89;
  uint64_t v61 = v90;
  sub_25B290A00();
  MEMORY[0x26115F250](0, v59, v60, v58);
  _Block_release(v58);
  (*(void (**)(char *, uint64_t))(v93 + 8))(v60, v61);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v59, v92);
  return swift_release();
}

void sub_25B23FA5C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, double a9, unint64_t a10, void *a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t v135 = a8;
  uint64_t v137 = a6;
  id v138 = a7;
  uint64_t v128 = a5;
  unint64_t v133 = a4;
  uint64_t v139 = a2;
  uint64_t v17 = *a11;
  uint64_t v18 = type metadata accessor for Message();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v124 = (uint64_t)&v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v129 = (uint64_t)&v118 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v125 = (uint64_t)&v118 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v134 = (char *)&v118 - v25;
  uint64_t v26 = *(void *)(v17 + 104);
  uint64_t v136 = a11;
  uint64_t v126 = *(void *)(v17 + 88);
  uint64_t v127 = v26;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = sub_25B2909B0();
  uint64_t v131 = *(void *)(v28 - 8);
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v31 = (char *)&v118 - v30;
  uint64_t v132 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)&v118 - v32;
  type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v34 = sub_25B291270();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v130 = (uint64_t *)((char *)&v118 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x270FA5388](v36);
  unint64_t v39 = (id *)((char *)&v118 - v38);
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))((char *)&v118 - v38, a1, v34);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v139(a1);
    (*(void (**)(id *, uint64_t))(v35 + 8))(v39, v34);
    return;
  }
  uint64_t v119 = v35;
  uint64_t v120 = v34;
  uint64_t v123 = a3;
  int v122 = a14;
  uint64_t v40 = a13;
  id v140 = *v39;
  id v41 = v140;
  id v42 = v140;
  if (swift_dynamicCast())
  {
    uint64_t v43 = v131;
    (*(void (**)(char *, void *, uint64_t))(v131 + 16))(v31, v133, v28);
    uint64_t v44 = v132;
    int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v132 + 48))(v31, 1, AssociatedTypeWitness);
    uint64_t v121 = a12;
    if (v45 == 1)
    {
      (*(void (**)(char *, uint64_t))(v43 + 8))(v31, v28);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v33, v31, AssociatedTypeWitness);
      (*(void (**)(char *, uint64_t))(v127 + 112))(v33, v126);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v33, AssociatedTypeWitness);
    }
    uint64_t v64 = (uint64_t)v134;
    int v65 = (char *)(v137 - 1);
    if (v137 >= 1)
    {
      if (qword_26A4D98C8 != -1) {
        swift_once();
      }
      uint64_t v66 = sub_25B290190();
      __swift_project_value_buffer(v66, (uint64_t)qword_26A4EB168);
      sub_25B244B78((uint64_t)v138, v64, (uint64_t (*)(void))type metadata accessor for Message);
      id v67 = v41;
      swift_bridgeObjectRetain();
      id v68 = v41;
      swift_bridgeObjectRetain();
      uint64_t v69 = sub_25B290160();
      os_log_type_t v70 = sub_25B290880();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        uint64_t v137 = a13;
        uint64_t v72 = v71;
        uint64_t v73 = v41;
        uint64_t v74 = (void *)swift_slowAlloc();
        unint64_t v133 = (void *)swift_slowAlloc();
        id v140 = v133;
        *(_DWORD *)uint64_t v72 = 136446722;
        uint64_t v134 = v65;
        sub_25B290080();
        sub_25B247138((unint64_t *)&qword_26A4D9230, MEMORY[0x263F07508]);
        uint64_t v75 = sub_25B290DB0();
        uint64_t v142 = sub_25B288E98(v75, v76, (uint64_t *)&v140);
        sub_25B2909C0();
        swift_bridgeObjectRelease();
        sub_25B2450A0(v64, (uint64_t (*)(void))type metadata accessor for Message);
        *(_WORD *)(v72 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v142 = sub_25B288E98(v135, a10, (uint64_t *)&v140);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v72 + 22) = 2112;
        id v77 = v73;
        uint64_t v78 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v142 = v78;
        sub_25B2909C0();
        *uint64_t v74 = v78;
        int v65 = v134;

        _os_log_impl(&dword_25B107000, v69, v70, "Could not send message %{public}s to %{public}s with error %@; discarding connection and retrying",
          (uint8_t *)v72,
          0x20u);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4DAC60);
        swift_arrayDestroy();
        unint64_t v79 = v74;
        id v41 = v73;
        MEMORY[0x261160890](v79, -1, -1);
        unint64_t v80 = v133;
        swift_arrayDestroy();
        MEMORY[0x261160890](v80, -1, -1);
        uint64_t v81 = v72;
        uint64_t v40 = v137;
        MEMORY[0x261160890](v81, -1, -1);
      }
      else
      {
        sub_25B2450A0(v64, (uint64_t (*)(void))type metadata accessor for Message);
        swift_bridgeObjectRelease_n();
      }
      unint64_t v112 = v138;
      v113 = v139;
      uint64_t v110 = v123;
      uint64_t v111 = v121;
      LOBYTE(v142) = v122;
      id v140 = *(id *)&a9;
      uint64_t v141 = v65;
LABEL_30:
      sub_25B239A74(v112, v111, v40, &v142, &v140, v113, v110);

      return;
    }
    if (qword_26A4D98C8 != -1) {
      swift_once();
    }
    uint64_t v98 = sub_25B290190();
    __swift_project_value_buffer(v98, (uint64_t)qword_26A4EB168);
    uint64_t v99 = v125;
    sub_25B244B78((uint64_t)v138, v125, (uint64_t (*)(void))type metadata accessor for Message);
    id v100 = v41;
    swift_bridgeObjectRetain();
    id v101 = v41;
    swift_bridgeObjectRetain();
    uint64_t v86 = sub_25B290160();
    os_log_type_t v102 = sub_25B290880();
    if (os_log_type_enabled(v86, v102))
    {
      uint64_t v103 = swift_slowAlloc();
      uint64_t v104 = (void *)swift_slowAlloc();
      id v138 = (void *)swift_slowAlloc();
      id v140 = v138;
      *(_DWORD *)uint64_t v103 = 136446722;
      sub_25B290080();
      sub_25B247138((unint64_t *)&qword_26A4D9230, MEMORY[0x263F07508]);
      uint64_t v105 = sub_25B290DB0();
      uint64_t v142 = sub_25B288E98(v105, v106, (uint64_t *)&v140);
      sub_25B2909C0();
      swift_bridgeObjectRelease();
      sub_25B2450A0(v99, (uint64_t (*)(void))type metadata accessor for Message);
      *(_WORD *)(v103 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v142 = sub_25B288E98(v135, a10, (uint64_t *)&v140);
      sub_25B2909C0();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v103 + 22) = 2112;
      id v107 = v41;
      uint64_t v108 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v142 = v108;
      sub_25B2909C0();
      *uint64_t v104 = v108;

      _os_log_impl(&dword_25B107000, v86, v102, "Could not send message %{public}s to %{public}s with error %@; discarding connection and giving up",
        (uint8_t *)v103,
        0x20u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4DAC60);
      swift_arrayDestroy();
      MEMORY[0x261160890](v104, -1, -1);
      v109 = v138;
      swift_arrayDestroy();
      MEMORY[0x261160890](v109, -1, -1);
      uint64_t v97 = v103;
      goto LABEL_25;
    }
    sub_25B2450A0(v99, (uint64_t (*)(void))type metadata accessor for Message);
LABEL_33:
    swift_bridgeObjectRelease_n();

    goto LABEL_34;
  }
  uint64_t v46 = (char *)(v137 - 1);
  if (v137 >= 1)
  {
    uint64_t v121 = a12;
    if (qword_26A4D98C8 != -1) {
      swift_once();
    }
    uint64_t v47 = sub_25B290190();
    __swift_project_value_buffer(v47, (uint64_t)qword_26A4EB168);
    uint64_t v48 = v129;
    sub_25B244B78((uint64_t)v138, v129, (uint64_t (*)(void))type metadata accessor for Message);
    id v49 = v41;
    swift_bridgeObjectRetain();
    id v50 = v41;
    swift_bridgeObjectRetain();
    uint64_t v51 = sub_25B290160();
    os_log_type_t v52 = sub_25B290880();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = swift_slowAlloc();
      uint64_t v134 = v46;
      uint64_t v54 = v53;
      unint64_t v133 = (void *)swift_slowAlloc();
      long long v55 = (void *)swift_slowAlloc();
      uint64_t v137 = a13;
      long long v56 = v55;
      id v140 = v55;
      *(_DWORD *)uint64_t v54 = 136446722;
      sub_25B290080();
      sub_25B247138((unint64_t *)&qword_26A4D9230, MEMORY[0x263F07508]);
      uint64_t v57 = sub_25B290DB0();
      uint64_t v142 = sub_25B288E98(v57, v58, (uint64_t *)&v140);
      sub_25B2909C0();
      swift_bridgeObjectRelease();
      sub_25B2450A0(v48, (uint64_t (*)(void))type metadata accessor for Message);
      *(_WORD *)(v54 + 12) = 2082;
      swift_bridgeObjectRetain();
      uint64_t v142 = sub_25B288E98(v135, a10, (uint64_t *)&v140);
      sub_25B2909C0();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v54 + 22) = 2112;
      id v59 = v41;
      uint64_t v60 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v142 = v60;
      sub_25B2909C0();
      uint64_t v61 = v133;
      *unint64_t v133 = v60;

      _os_log_impl(&dword_25B107000, v51, v52, "Could not send message %{public}s to %{public}s with error %@; retrying",
        (uint8_t *)v54,
        0x20u);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4DAC60);
      swift_arrayDestroy();
      MEMORY[0x261160890](v61, -1, -1);
      swift_arrayDestroy();
      unint64_t v62 = v56;
      uint64_t v40 = v137;
      MEMORY[0x261160890](v62, -1, -1);
      uint64_t v63 = v54;
      uint64_t v46 = v134;
      MEMORY[0x261160890](v63, -1, -1);
    }
    else
    {
      sub_25B2450A0(v48, (uint64_t (*)(void))type metadata accessor for Message);
      swift_bridgeObjectRelease_n();
    }
    uint64_t v110 = v123;
    uint64_t v111 = v121;
    LOBYTE(v142) = v122;
    id v140 = *(id *)&a9;
    uint64_t v141 = v46;
    unint64_t v112 = v138;
    v113 = v139;
    goto LABEL_30;
  }
  if (qword_26A4D98C8 != -1) {
    swift_once();
  }
  uint64_t v82 = sub_25B290190();
  __swift_project_value_buffer(v82, (uint64_t)qword_26A4EB168);
  uint64_t v83 = v124;
  sub_25B244B78((uint64_t)v138, v124, (uint64_t (*)(void))type metadata accessor for Message);
  id v84 = v41;
  swift_bridgeObjectRetain();
  id v85 = v41;
  swift_bridgeObjectRetain();
  uint64_t v86 = sub_25B290160();
  os_log_type_t v87 = sub_25B290880();
  if (!os_log_type_enabled(v86, v87))
  {
    sub_25B2450A0(v83, (uint64_t (*)(void))type metadata accessor for Message);
    goto LABEL_33;
  }
  uint64_t v88 = swift_slowAlloc();
  unint64_t v89 = v41;
  uint64_t v90 = (void *)swift_slowAlloc();
  id v138 = (void *)swift_slowAlloc();
  id v140 = v138;
  *(_DWORD *)uint64_t v88 = 136446722;
  sub_25B290080();
  sub_25B247138((unint64_t *)&qword_26A4D9230, MEMORY[0x263F07508]);
  uint64_t v91 = sub_25B290DB0();
  uint64_t v142 = sub_25B288E98(v91, v92, (uint64_t *)&v140);
  sub_25B2909C0();
  swift_bridgeObjectRelease();
  sub_25B2450A0(v83, (uint64_t (*)(void))type metadata accessor for Message);
  *(_WORD *)(v88 + 12) = 2082;
  swift_bridgeObjectRetain();
  uint64_t v142 = sub_25B288E98(v135, a10, (uint64_t *)&v140);
  sub_25B2909C0();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v88 + 22) = 2112;
  id v93 = v89;
  uint64_t v94 = _swift_stdlib_bridgeErrorToNSError();
  uint64_t v142 = v94;
  sub_25B2909C0();
  void *v90 = v94;

  _os_log_impl(&dword_25B107000, v86, v87, "Could not send message %{public}s to %{public}s with error %@; abandoning send attempt",
    (uint8_t *)v88,
    0x20u);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4DAC60);
  swift_arrayDestroy();
  uint64_t v95 = v90;
  id v41 = v89;
  MEMORY[0x261160890](v95, -1, -1);
  uint64_t v96 = v138;
  swift_arrayDestroy();
  MEMORY[0x261160890](v96, -1, -1);
  uint64_t v97 = v88;
LABEL_25:
  MEMORY[0x261160890](v97, -1, -1);
LABEL_34:

  uint64_t v114 = v120;
  uint64_t v115 = v119;
  uint64_t v116 = v130;
  void *v130 = v41;
  swift_storeEnumTagMultiPayload();
  id v117 = v41;
  v139((uint64_t)v116);

  (*(void (**)(void *, uint64_t))(v115 + 8))(v116, v114);
}

uint64_t sub_25B240BDC(double a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(void, void, void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v46 = a9;
  uint64_t v42 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v16 = sub_25B291270();
  uint64_t v47 = *(void *)(v16 - 8);
  uint64_t v48 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v43 = (uint64_t *)((char *)&v38 - v17);
  uint64_t v18 = sub_25B2909B0();
  uint64_t v44 = *(void *)(v18 - 8);
  uint64_t v45 = v18;
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (char *)&v38 - v19;
  uint64_t v21 = type metadata accessor for Message();
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v23 = (char *)&v38 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A4D98C8 != -1) {
    swift_once();
  }
  uint64_t v24 = sub_25B290190();
  __swift_project_value_buffer(v24, (uint64_t)qword_26A4EB168);
  sub_25B244B78(a3, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Message);
  swift_bridgeObjectRetain_n();
  uint64_t v25 = sub_25B290160();
  os_log_type_t v26 = sub_25B290880();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v40 = a7;
    uint64_t v28 = v27;
    uint64_t v38 = swift_slowAlloc();
    v50[0] = v38;
    *(_DWORD *)uint64_t v28 = 136446466;
    uint64_t v39 = a8;
    sub_25B290080();
    id v41 = a6;
    sub_25B247138((unint64_t *)&qword_26A4D9230, MEMORY[0x263F07508]);
    uint64_t v29 = sub_25B290DB0();
    uint64_t v49 = sub_25B288E98(v29, v30, v50);
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    sub_25B2450A0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Message);
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain();
    uint64_t v49 = sub_25B288E98(v42, a5, v50);
    a6 = v41;
    a8 = v39;
    sub_25B2909C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25B107000, v25, v26, "Timeout when sending message %{public}s to %{public}s", (uint8_t *)v28, 0x16u);
    uint64_t v31 = v38;
    swift_arrayDestroy();
    MEMORY[0x261160890](v31, -1, -1);
    MEMORY[0x261160890](v28, -1, -1);
  }
  else
  {
    sub_25B2450A0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for Message);

    swift_bridgeObjectRelease_n();
  }
  *(double *)id v50 = a1;
  v50[1] = a8;
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v20, v46, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v20, 0, 1, AssociatedTypeWitness);
  sub_25B207F8C();
  uint64_t v33 = swift_allocError();
  *uint64_t v34 = 0;
  uint64_t v35 = v43;
  *uint64_t v43 = v33;
  uint64_t v36 = v48;
  swift_storeEnumTagMultiPayload();
  a6(v50, v20, v35);
  (*(void (**)(uint64_t *, uint64_t))(v47 + 8))(v35, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v20, v45);
}

uint64_t sub_25B241134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v37 = a7;
  int v41 = a6;
  uint64_t v51 = a4;
  uint64_t v52 = a3;
  uint64_t v50 = a2;
  uint64_t v48 = a8;
  uint64_t v49 = a16;
  uint64_t v46 = a1;
  uint64_t v47 = a10;
  uint64_t v42 = a5;
  uint64_t v43 = a15;
  uint64_t v40 = a14;
  uint64_t v44 = a13;
  uint64_t v45 = a11;
  uint64_t v19 = type metadata accessor for Message();
  uint64_t v39 = *(void *)(v19 - 8);
  uint64_t v20 = *(void *)(v39 + 64);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v36 = (uint64_t)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = a12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v25 = (char *)&v35 - v24;
  v54[0] = v41;
  *(double *)uint64_t v53 = a9;
  v53[1] = a7;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))((char *)&v35 - v24, a5, AssociatedTypeWitness);
  sub_25B244B78(v52, (uint64_t)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for Message);
  unint64_t v26 = (*(unsigned __int8 *)(v22 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v27 = (v23 + *(unsigned __int8 *)(v39 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  uint64_t v28 = swift_allocObject();
  uint64_t v29 = v46;
  *(void *)(v28 + 16) = v45;
  *(void *)(v28 + 24) = a12;
  uint64_t v30 = v40;
  *(void *)(v28 + 32) = v44;
  *(void *)(v28 + 40) = v30;
  uint64_t v32 = v47;
  uint64_t v31 = v48;
  *(void *)(v28 + 48) = v29;
  *(void *)(v28 + 56) = v31;
  *(void *)(v28 + 64) = v32;
  *(double *)(v28 + 72) = a9;
  *(void *)(v28 + 80) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v28 + v26, v25, AssociatedTypeWitness);
  sub_25B244EEC(v36, v28 + v27, (uint64_t (*)(void))type metadata accessor for Message);
  uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void *, uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 136);
  swift_retain();
  swift_retain();
  v33(v52, v51, v42, v54, v53, v49, v28, v38, v30);
  return swift_release();
}

void sub_25B241408(char a1, void (*a2)(uint64_t *, char *, uint64_t), double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v30 = a8;
  uint64_t v31 = a7;
  uint64_t v13 = type metadata accessor for Message();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = sub_25B2909B0();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v29 - v19;
  if (a1)
  {
    *(double *)uint64_t v32 = a3;
    v32[1] = a5;
    uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v20, a6, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, AssociatedTypeWitness);
    a2(v32, v20, v31);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  }
  else
  {
    if (qword_26A4D98C8 != -1) {
      swift_once();
    }
    uint64_t v22 = sub_25B290190();
    __swift_project_value_buffer(v22, (uint64_t)qword_26A4EB168);
    sub_25B244B78(v30, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Message);
    uint64_t v23 = sub_25B290160();
    os_log_type_t v24 = sub_25B2908A0();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      v32[0] = v26;
      *(_DWORD *)uint64_t v25 = 136446210;
      sub_25B290080();
      sub_25B247138((unint64_t *)&qword_26A4D9230, MEMORY[0x263F07508]);
      uint64_t v27 = sub_25B290DB0();
      v32[2] = sub_25B288E98(v27, v28, v32);
      sub_25B2909C0();
      swift_bridgeObjectRelease();
      sub_25B2450A0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Message);
      _os_log_impl(&dword_25B107000, v23, v24, "Received response for %{public}s but watchdog has already fired; ignoring response",
        v25,
        0xCu);
      swift_arrayDestroy();
      MEMORY[0x261160890](v26, -1, -1);
      MEMORY[0x261160890](v25, -1, -1);
    }
    else
    {
      sub_25B2450A0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Message);
    }
  }
}

uint64_t sub_25B2417F8(void (*a1)(void), void *a2, char *a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, void (*a8)(double *, uint64_t, uint64_t *), double a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t v188 = a8;
  uint64_t v172 = a7;
  unint64_t v171 = a6;
  uint64_t v175 = a5;
  uint64_t v181 = a2;
  uint64_t v182 = a4;
  uint64_t v184 = a3;
  uint64_t v180 = a1;
  uint64_t v187 = a10;
  uint64_t v15 = *a11;
  uint64_t v16 = *(void *)(*a11 + 88);
  uint64_t v174 = *(void *)(*a11 + 104);
  uint64_t v173 = v16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v18 = sub_25B291270();
  uint64_t v178 = *(void *)(v18 - 8);
  uint64_t v179 = (uint64_t (*)(void, void))v18;
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  v177 = (void *)((char *)v154 - v20);
  uint64_t v189 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v162 = (char *)v154 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v161 = v22;
  MEMORY[0x270FA5388](v21);
  unint64_t v168 = (char *)v154 - v23;
  uint64_t v190 = AssociatedTypeWitness;
  uint64_t v24 = sub_25B2909B0();
  uint64_t v25 = *(void **)(v24 - 8);
  uint64_t v191 = v24;
  uint64_t v192 = v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  unint64_t v165 = (char *)v154 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v183 = (uint64_t)v154 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v169 = (char *)v154 - v31;
  MEMORY[0x270FA5388](v30);
  uint64_t v176 = (char *)v154 - v32;
  uint64_t v33 = *(void *)(v15 + 96);
  v163 = a11;
  uint64_t v34 = *(void *)(v15 + 80);
  uint64_t v167 = v33;
  uint64_t v166 = v34;
  swift_getAssociatedTypeWitness();
  uint64_t v170 = type metadata accessor for NetworkDevice();
  uint64_t v164 = *(void *)(v170 - 8);
  MEMORY[0x270FA5388](v170);
  uint64_t v36 = (char *)v154 - v35;
  uint64_t v37 = type metadata accessor for NetworkBrowsingEvent();
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  int v41 = (char *)v154 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v39);
  uint64_t v43 = (char *)v154 - v42;
  uint64_t v44 = sub_25B291270();
  uint64_t v45 = *(void *)(v44 - 8);
  MEMORY[0x270FA5388](v44);
  uint64_t v47 = (void **)((char *)v154 - v46);
  uint64_t v48 = sub_25B290000();
  uint64_t v185 = *(void *)(v48 - 8);
  uint64_t v186 = v48;
  MEMORY[0x270FA5388](v48);
  uint64_t v50 = (char *)v154 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B28FFD0();
  uint64_t v184 = v50;
  sub_25B28FF50();
  double v52 = v51;
  (*(void (**)(void **, void (*)(void), uint64_t))(v45 + 16))(v47, v180, v44);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v53 = *v47;
    if (qword_26A4D98C8 != -1) {
      swift_once();
    }
    uint64_t v54 = sub_25B290190();
    __swift_project_value_buffer(v54, (uint64_t)qword_26A4EB168);
    id v55 = v53;
    id v56 = v53;
    uint64_t v57 = sub_25B290160();
    os_log_type_t v58 = sub_25B290880();
    BOOL v59 = os_log_type_enabled(v57, v58);
    uint64_t v60 = v191;
    if (v59)
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = swift_slowAlloc();
      uint64_t v193 = (uint64_t)v53;
      double v194 = *(double *)&v62;
      *(_DWORD *)uint64_t v61 = 136446210;
      id v63 = v53;
      uint64_t v64 = sub_25B290600();
      uint64_t v193 = sub_25B288E98(v64, v65, (uint64_t *)&v194);
      sub_25B2909C0();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_25B107000, v57, v58, "Failed to discover endpoint: %{public}s", v61, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261160890](v62, -1, -1);
      MEMORY[0x261160890](v61, -1, -1);
    }
    else
    {
    }
    uint64_t v79 = v183;
    uint64_t v80 = v190;
    if (v181) {
      objc_msgSend(v181, sel_invalidate);
    }
    double v194 = a9;
    uint64_t v195 = v182;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v79, 1, 1, v80);
    uint64_t v81 = v177;
    uint64_t *v177 = (uint64_t)v53;
    uint64_t v82 = v179;
    swift_storeEnumTagMultiPayload();
    id v83 = v53;
    v188(&v194, v79, v81);

    (*(void (**)(uint64_t *, uint64_t (*)(void, void)))(v178 + 8))(v81, v82);
    ((void (*)(uint64_t, uint64_t))v192[1])(v79, v60);
  }
  else
  {
    (*(void (**)(unsigned char *, void **, uint64_t))(v38 + 32))(v43, v47, v37);
    if (*v43)
    {
      uint64_t v66 = v43;
      uint64_t v67 = v190;
      if (qword_26A4D98C8 != -1) {
        swift_once();
      }
      uint64_t v68 = sub_25B290190();
      __swift_project_value_buffer(v68, (uint64_t)qword_26A4EB168);
      uint64_t v69 = sub_25B290160();
      os_log_type_t v70 = sub_25B290880();
      BOOL v71 = os_log_type_enabled(v69, v70);
      uint64_t v72 = v191;
      uint64_t v73 = v183;
      if (v71)
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl(&dword_25B107000, v69, v70, "Device was removed", v74, 2u);
        MEMORY[0x261160890](v74, -1, -1);
      }

      if (v181) {
        objc_msgSend(v181, sel_invalidate);
      }
      double v194 = a9;
      uint64_t v195 = v182;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56))(v73, 1, 1, v67);
      sub_25B2451C8();
      uint64_t v75 = swift_allocError();
      *unint64_t v76 = 0;
      id v77 = v177;
      uint64_t *v177 = v75;
      uint64_t v78 = v179;
      swift_storeEnumTagMultiPayload();
      v188(&v194, v73, v77);
      (*(void (**)(uint64_t *, uint64_t (*)(void, void)))(v178 + 8))(v77, v78);
      ((void (*)(uint64_t, uint64_t))v192[1])(v73, v72);
      (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v66, v37);
    }
    else
    {
      if (qword_26A4D98C8 != -1) {
        swift_once();
      }
      uint64_t v84 = sub_25B290190();
      uint64_t v85 = __swift_project_value_buffer(v84, (uint64_t)qword_26A4EB168);
      (*(void (**)(char *, unsigned char *, uint64_t))(v38 + 16))(v41, v43, v37);
      unint64_t v86 = v171;
      swift_bridgeObjectRetain_n();
      uint64_t v157 = v85;
      os_log_type_t v87 = sub_25B290160();
      os_log_type_t v88 = sub_25B2908A0();
      int v89 = v88;
      BOOL v90 = os_log_type_enabled(v87, v88);
      uint64_t v160 = v37;
      uint64_t v159 = v38;
      uint64_t v158 = v43;
      if (v90)
      {
        uint64_t v91 = swift_slowAlloc();
        uint64_t v180 = (void (*)(void))swift_slowAlloc();
        double v194 = *(double *)&v180;
        *(_DWORD *)uint64_t v91 = 136446466;
        LODWORD(v156) = v89;
        swift_bridgeObjectRetain();
        uint64_t v193 = sub_25B288E98(v175, v86, (uint64_t *)&v194);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v91 + 12) = 2082;
        (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v36, &v41[*(int *)(v37 + 28)], v170);
        uint64_t v92 = sub_25B290600();
        uint64_t v193 = sub_25B288E98(v92, v93, (uint64_t *)&v194);
        sub_25B2909C0();
        swift_bridgeObjectRelease();
        uint64_t v164 = *(void *)(v38 + 8);
        ((void (*)(char *, uint64_t))v164)(v41, v37);
        _os_log_impl(&dword_25B107000, v87, (os_log_type_t)v156, "Device for %{public}s discovered; sending message to %{public}s",
          (uint8_t *)v91,
          0x16u);
        uint64_t v94 = v180;
        swift_arrayDestroy();
        MEMORY[0x261160890](v94, -1, -1);
        MEMORY[0x261160890](v91, -1, -1);

        uint64_t v95 = v175;
        uint64_t v96 = v190;
        uint64_t v97 = v176;
        unint64_t v98 = v86;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v164 = *(void *)(v38 + 8);
        ((void (*)(char *, uint64_t))v164)(v41, v37);

        uint64_t v96 = v190;
        uint64_t v97 = v176;
        unint64_t v98 = v86;
        uint64_t v95 = v175;
      }
      uint64_t v99 = v189;
      id v100 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 56);
      uint64_t v156 = v189 + 56;
      BOOL v155 = v100;
      v100((uint64_t)v97, 1, 1, v96);
      id v101 = *(void (**)(uint64_t, unint64_t, uint64_t))(v174 + 120);
      os_log_type_t v102 = v169;
      v101(v95, v98, v173);
      uint64_t v103 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v99 + 48);
      v154[1] = v99 + 48;
      v154[0] = v103;
      int v104 = v103(v102, 1, v96);
      uint64_t v105 = v192 + 1;
      uint64_t v106 = v191;
      uint64_t v180 = (void (*)(void))v192[1];
      v180(v102);
      swift_bridgeObjectRetain_n();
      id v107 = sub_25B290160();
      os_log_type_t v108 = sub_25B2908A0();
      BOOL v109 = os_log_type_enabled(v107, v108);
      if (v104 == 1)
      {
        if (v109)
        {
          uint64_t v110 = (uint8_t *)swift_slowAlloc();
          uint64_t v111 = swift_slowAlloc();
          double v194 = *(double *)&v111;
          *(_DWORD *)uint64_t v110 = 136446210;
          unint64_t v112 = v171;
          swift_bridgeObjectRetain();
          uint64_t v193 = sub_25B288E98(v175, v112, (uint64_t *)&v194);
          uint64_t v106 = v191;
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          unint64_t v113 = v112;
          _os_log_impl(&dword_25B107000, v107, v108, "Connection for %{public}s does not exist; creating new connection...",
            v110,
            0xCu);
          swift_arrayDestroy();
          MEMORY[0x261160890](v111, -1, -1);
          uint64_t v114 = v110;
          uint64_t v96 = v190;
          MEMORY[0x261160890](v114, -1, -1);
        }
        else
        {

          unint64_t v113 = v171;
          swift_bridgeObjectRelease_n();
        }
        uint64_t v119 = v183;
        uint64_t v120 = v176;
        (*(void (**)(unsigned char *, uint64_t))(v174 + 96))(&v158[*(int *)(v160 + 28) + (uint64_t)*(int *)(v170 + 32)], v173);
        ((void (*)(char *, uint64_t))v180)(v120, v106);
        v155(v119, 0, 1, v96);
      }
      else
      {
        uint64_t v170 = (uint64_t)v105;
        if (v109)
        {
          uint64_t v115 = (uint8_t *)swift_slowAlloc();
          uint64_t v116 = swift_slowAlloc();
          double v194 = *(double *)&v116;
          *(_DWORD *)uint64_t v115 = 136446210;
          unint64_t v113 = v171;
          swift_bridgeObjectRetain();
          uint64_t v117 = v175;
          uint64_t v193 = sub_25B288E98(v175, v113, (uint64_t *)&v194);
          uint64_t v106 = v191;
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25B107000, v107, v108, "Connection for %{public}s already exists; using existing connection...",
            v115,
            0xCu);
          swift_arrayDestroy();
          uint64_t v118 = v116;
          uint64_t v96 = v190;
          MEMORY[0x261160890](v118, -1, -1);
          MEMORY[0x261160890](v115, -1, -1);

          uint64_t v119 = v183;
          uint64_t v120 = v176;
        }
        else
        {

          unint64_t v113 = v171;
          swift_bridgeObjectRelease_n();
          uint64_t v119 = v183;
          uint64_t v120 = v176;
          uint64_t v117 = v175;
        }
        ((void (*)(uint64_t, unint64_t, uint64_t, uint64_t))v101)(v117, v113, v173, v174);
        uint64_t v105 = (void *)v170;
        ((void (*)(char *, uint64_t))v180)(v120, v106);
      }
      uint64_t v121 = v106;
      double v122 = a9 - v52;
      ((void (*)(char *, uint64_t, uint64_t))v192[4])(v120, v119, v106);
      if (v181) {
        objc_msgSend(v181, sel_invalidate);
      }
      if (v122 <= 0.0)
      {
        swift_bridgeObjectRetain_n();
        uint64_t v129 = sub_25B290160();
        os_log_type_t v130 = sub_25B290880();
        if (os_log_type_enabled(v129, v130))
        {
          uint64_t v131 = (uint8_t *)swift_slowAlloc();
          uint64_t v132 = swift_slowAlloc();
          double v194 = *(double *)&v132;
          *(_DWORD *)uint64_t v131 = 136446210;
          swift_bridgeObjectRetain();
          uint64_t v193 = sub_25B288E98(v175, v113, (uint64_t *)&v194);
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25B107000, v129, v130, "Found device %{public}s but have no time to send the message", v131, 0xCu);
          swift_arrayDestroy();
          uint64_t v133 = v132;
          uint64_t v120 = v176;
          MEMORY[0x261160890](v133, -1, -1);
          MEMORY[0x261160890](v131, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        double v194 = a9;
        uint64_t v195 = v182;
        ((void (*)(uint64_t, char *, uint64_t))v192[2])(v119, v120, v121);
        sub_25B207F8C();
        uint64_t v149 = swift_allocError();
        unsigned char *v150 = 0;
        uint64_t v151 = v177;
        uint64_t *v177 = v149;
        unint64_t v152 = v179;
        swift_storeEnumTagMultiPayload();
        v188(&v194, v119, v151);
        (*(void (**)(uint64_t *, uint64_t (*)(void, void)))(v178 + 8))(v151, v152);
        uint64_t v153 = (void (*)(char *, uint64_t))v180;
        ((void (*)(uint64_t, uint64_t))v180)(v119, v121);
        v153(v120, v121);
      }
      else
      {
        uint64_t v123 = v165;
        ((void (*)(char *, char *, uint64_t))v192[2])(v165, v120, v106);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v154[0])(v123, 1, v96) != 1)
        {
          LODWORD(v178) = a14;
          uint64_t v134 = v189;
          uint64_t v179 = *(uint64_t (**)(void, void))(v189 + 32);
          uint64_t v135 = v168;
          uint64_t v136 = v179(v168, v123);
          uint64_t v192 = v154;
          uint64_t v183 = v163[2];
          MEMORY[0x270FA5388](v136);
          uint64_t v181 = &v154[-18];
          uint64_t v137 = v173;
          v154[-16] = v166;
          v154[-15] = v137;
          uint64_t v138 = v174;
          v154[-14] = v167;
          v154[-13] = v138;
          v154[-12] = v172;
          v154[-11] = a12;
          v154[-10] = a13;
          v154[-9] = v135;
          LOBYTE(v154[-8]) = v178;
          *(double *)&v154[-7] = v122;
          uint64_t v139 = v182;
          uint64_t v141 = v187;
          id v140 = v188;
          v154[-6] = v182;
          v154[-5] = v140;
          v154[-4] = v141;
          *(double *)&v154[-3] = a9;
          v154[-2] = v139;
          uint64_t v142 = *(void (**)(char *, char *, uint64_t))(v134 + 16);
          uint64_t v170 = (uint64_t)v105;
          os_log_t v143 = v162;
          v142(v162, v135, v96);
          unint64_t v144 = (*(unsigned __int8 *)(v134 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80);
          uint64_t v145 = swift_allocObject();
          *(void *)(v145 + 16) = v166;
          *(void *)(v145 + 24) = v137;
          *(void *)(v145 + 32) = v167;
          *(void *)(v145 + 40) = v138;
          *(void *)(v145 + 48) = v140;
          *(void *)(v145 + 56) = v141;
          *(double *)(v145 + 64) = a9;
          unint64_t v146 = v145 + v144;
          *(void *)(v145 + 72) = v139;
          uint64_t v147 = v190;
          ((void (*)(unint64_t, char *, uint64_t))v179)(v146, v143, v190);
          swift_retain();
          _s16ReplicatorEngine8WatchdogC7execute6within12failureQueue6action0F7HandlerySd_So17OS_dispatch_queueCyACXEyACctFZ_0(v183, (void (*)(uint64_t))sub_25B246300);
          swift_release();
          ((void (*)(char *, uint64_t))v180)(v176, v191);
          ((void (*)(unsigned char *, uint64_t))v164)(v158, v160);
          (*(void (**)(char *, uint64_t))(v185 + 8))(v184, v186);
          return (*(uint64_t (**)(char *, uint64_t))(v134 + 8))(v168, v147);
        }
        uint64_t v124 = (void (*)(uint64_t, uint64_t))v180;
        ((void (*)(char *, uint64_t))v180)(v123, v106);
        double v194 = a9;
        uint64_t v195 = v182;
        v155(v119, 1, 1, v96);
        sub_25B207F8C();
        uint64_t v125 = swift_allocError();
        *uint64_t v126 = 0;
        uint64_t v127 = v177;
        uint64_t *v177 = v125;
        uint64_t v128 = v179;
        swift_storeEnumTagMultiPayload();
        v188(&v194, v119, v127);
        (*(void (**)(uint64_t *, uint64_t (*)(void, void)))(v178 + 8))(v127, v128);
        v124(v119, v106);
        v124((uint64_t)v120, v106);
      }
      ((void (*)(unsigned char *, uint64_t))v164)(v158, v160);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v185 + 8))(v184, v186);
}

uint64_t sub_25B242F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v50 = a8;
  uint64_t v51 = a2;
  uint64_t v42 = a7;
  uint64_t v43 = a3;
  uint64_t v52 = a4;
  uint64_t v49 = a12;
  uint64_t v47 = a1;
  uint64_t v48 = a11;
  uint64_t v46 = a15;
  uint64_t v41 = a16;
  uint64_t v44 = a5;
  uint64_t v45 = a13;
  uint64_t v21 = type metadata accessor for Message();
  uint64_t v40 = *(void *)(v21 - 8);
  uint64_t v22 = *(void *)(v40 + 64);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v38 = (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = a14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v25 = *(void *)(v24 + 64);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v27 = (char *)&v37 - v26;
  v54[0] = a6;
  *(double *)uint64_t v53 = a9;
  v53[1] = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))((char *)&v37 - v26, a5, AssociatedTypeWitness);
  sub_25B244B78(a3, (uint64_t)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for Message);
  unint64_t v28 = (*(unsigned __int8 *)(v24 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  unint64_t v29 = (v25 + *(unsigned __int8 *)(v40 + 80) + v28) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = v45;
  *(void *)(v30 + 24) = a14;
  uint64_t v31 = v47;
  uint64_t v32 = v41;
  *(void *)(v30 + 32) = v46;
  *(void *)(v30 + 40) = v32;
  uint64_t v33 = v50;
  *(void *)(v30 + 48) = v31;
  *(void *)(v30 + 56) = v33;
  uint64_t v34 = v49;
  *(void *)(v30 + 64) = v48;
  *(double *)(v30 + 72) = a10;
  *(void *)(v30 + 80) = v34;
  (*(void (**)(unint64_t, char *, uint64_t))(v24 + 32))(v30 + v28, v27, AssociatedTypeWitness);
  sub_25B244EEC(v38, v30 + v29, (uint64_t (*)(void))type metadata accessor for Message);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v32 + 136);
  swift_retain();
  swift_retain();
  v35(v43, v52, v44, v54, v53, sub_25B2461DC, v30, v39, v32);
  return swift_release();
}

void sub_25B2431FC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  uint64_t v14 = *(os_unfair_lock_s **)(a2 + 24);
  swift_retain();
  os_unfair_lock_lock(v14 + 4);
  uint64_t v15 = *(void *)(a2 + 16);
  char v16 = *(unsigned char *)(a2 + 32);
  sub_25B2497F8();
  os_unfair_lock_unlock(v14 + 4);
  swift_release();
  sub_25B241408((v15 != 0) & ~v16, a3, a8, a4, a5, a6, a1, a7);
}

uint64_t sub_25B2432E0(double a1, uint64_t a2, void (*a3)(void *, char *, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v10 = sub_25B291270();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (uint64_t *)((char *)&v22 - v12);
  uint64_t v14 = sub_25B2909B0();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v22 - v16;
  *(double *)uint64_t v24 = a1;
  v24[1] = a5;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v22 - v16, a6, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, AssociatedTypeWitness);
  sub_25B207F8C();
  uint64_t v19 = swift_allocError();
  *uint64_t v20 = 0;
  uint64_t *v13 = v19;
  swift_storeEnumTagMultiPayload();
  v23(v24, v17, v13);
  (*(void (**)(uint64_t *, uint64_t))(v11 + 8))(v13, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_25B24356C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int (**a5)(char *, uint64_t, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v55 = sub_25B2909B0();
  uint64_t v12 = *(void *)(v55 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v55);
  uint64_t v15 = (char *)&v50 - v14;
  int64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v54 = (char *)&v50 - v17;
  uint64_t v18 = (*(uint64_t (**)(unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))(a7 + 32))(a5, a7);
  uint64_t v19 = sub_25B227BD0(v18);
  swift_bridgeObjectRelease();
  if ((sub_25B244050(v19, a3) & 1) == 0)
  {
    if (*(void *)(a3 + 16) <= *(void *)(v19 + 16) >> 3)
    {
      uint64_t v63 = v19;
      sub_25B1A43CC(a3);
      uint64_t v20 = v63;
      if (*(void *)(v63 + 16)) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v20 = sub_25B1A4DD8(a3, v19);
      if (*(void *)(v20 + 16))
      {
LABEL_4:
        if (qword_26A4D98C8 != -1) {
LABEL_38:
        }
          swift_once();
        uint64_t v21 = sub_25B290190();
        __swift_project_value_buffer(v21, (uint64_t)qword_26A4EB168);
        swift_bridgeObjectRetain_n();
        uint64_t v22 = sub_25B290160();
        os_log_type_t v23 = sub_25B2908A0();
        int v24 = v23;
        BOOL v25 = os_log_type_enabled(v22, v23);
        unint64_t v60 = a2;
        uint64_t v61 = a5;
        uint64_t v59 = v16;
        if (v25)
        {
          uint64_t v26 = swift_slowAlloc();
          LODWORD(v58) = v24;
          uint64_t v27 = v26;
          uint64_t v28 = swift_slowAlloc();
          uint64_t v56 = v28;
          *(_DWORD *)uint64_t v27 = 134349314;
          uint64_t v62 = *(void *)(v20 + 16);
          uint64_t v63 = v28;
          sub_25B2909C0();
          swift_bridgeObjectRelease();
          *(_WORD *)(v27 + 12) = 2082;
          int64_t v57 = v27 + 14;
          swift_bridgeObjectRetain();
          unint64_t v29 = v22;
          uint64_t v30 = sub_25B290820();
          uint64_t v31 = v12;
          unint64_t v33 = v32;
          swift_bridgeObjectRelease();
          uint64_t v62 = sub_25B288E98(v30, v33, &v63);
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          uint64_t v12 = v31;
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_25B107000, v29, (os_log_type_t)v58, "Disconnecting %{public}ld connected deviceID(s) no longer associated with the signed-in account: %{public}s", (uint8_t *)v27, 0x16u);
          uint64_t v34 = v56;
          swift_arrayDestroy();
          MEMORY[0x261160890](v34, -1, -1);
          MEMORY[0x261160890](v27, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        int64_t v16 = 0;
        uint64_t v36 = *(void *)(v20 + 56);
        uint64_t v56 = v20 + 56;
        uint64_t v37 = 1 << *(unsigned char *)(v20 + 32);
        uint64_t v38 = -1;
        if (v37 < 64) {
          uint64_t v38 = ~(-1 << v37);
        }
        a2 = v38 & v36;
        int64_t v57 = (unint64_t)(v37 + 63) >> 6;
        uint64_t v58 = a7 + 120;
        a5 = (unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
        uint64_t v52 = a7 + 112;
        uint64_t v53 = (void (**)(char *, char *, uint64_t))(v59 + 32);
        uint64_t v50 = (void (**)(char *, uint64_t))(v12 + 8);
        uint64_t v51 = (void (**)(char *, uint64_t))(v59 + 8);
        uint64_t v59 = AssociatedTypeWitness;
        while (1)
        {
          if (a2)
          {
            unint64_t v39 = __clz(__rbit64(a2));
            a2 &= a2 - 1;
            unint64_t v40 = v39 | (v16 << 6);
          }
          else
          {
            int64_t v41 = v16 + 1;
            if (__OFADD__(v16, 1))
            {
              __break(1u);
LABEL_37:
              __break(1u);
              goto LABEL_38;
            }
            if (v41 >= v57) {
              return swift_release();
            }
            unint64_t v42 = *(void *)(v56 + 8 * v41);
            ++v16;
            if (!v42)
            {
              int64_t v16 = v41 + 1;
              if (v41 + 1 >= v57) {
                return swift_release();
              }
              unint64_t v42 = *(void *)(v56 + 8 * v16);
              if (!v42)
              {
                int64_t v16 = v41 + 2;
                if (v41 + 2 >= v57) {
                  return swift_release();
                }
                unint64_t v42 = *(void *)(v56 + 8 * v16);
                if (!v42)
                {
                  int64_t v43 = v41 + 3;
                  if (v43 >= v57) {
                    return swift_release();
                  }
                  unint64_t v42 = *(void *)(v56 + 8 * v43);
                  if (!v42)
                  {
                    while (1)
                    {
                      int64_t v16 = v43 + 1;
                      if (__OFADD__(v43, 1)) {
                        goto LABEL_37;
                      }
                      if (v16 >= v57) {
                        return swift_release();
                      }
                      unint64_t v42 = *(void *)(v56 + 8 * v16);
                      ++v43;
                      if (v42) {
                        goto LABEL_32;
                      }
                    }
                  }
                  int64_t v16 = v43;
                }
              }
            }
LABEL_32:
            a2 = (v42 - 1) & v42;
            unint64_t v40 = __clz(__rbit64(v42)) + (v16 << 6);
          }
          uint64_t v12 = v20;
          uint64_t v44 = (uint64_t *)(*(void *)(v20 + 48) + 16 * v40);
          uint64_t v45 = *v44;
          uint64_t v46 = v44[1];
          uint64_t v47 = *(void (**)(uint64_t, uint64_t, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))(a7 + 120);
          swift_bridgeObjectRetain();
          uint64_t v48 = v61;
          v47(v45, v46, v61, a7);
          swift_bridgeObjectRelease();
          uint64_t AssociatedTypeWitness = v59;
          if ((*a5)(v15, 1, v59) == 1)
          {
            (*v50)(v15, v55);
          }
          else
          {
            uint64_t v49 = v54;
            (*v53)(v54, v15, AssociatedTypeWitness);
            (*(void (**)(char *, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))(a7 + 112))(v49, v48, a7);
            (*v51)(v49, AssociatedTypeWitness);
          }
          uint64_t v20 = v12;
        }
      }
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B243B94(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
    do
    {
      uint64_t v8 = *v5;
      uint64_t v9 = *(void *)(a3 + 16);
      if (v9)
      {
        uint64_t v13 = *v5;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91C0);
        uint64_t v6 = (void *)swift_allocObject();
        int64_t v10 = _swift_stdlib_malloc_size(v6);
        uint64_t v11 = v10 - 32;
        if (v10 < 32) {
          uint64_t v11 = v10 - 17;
        }
        v6[2] = v9;
        v6[3] = 2 * (v11 >> 4);
        uint64_t v14 = sub_25B227224((uint64_t)&v15, v6 + 4, v9, a3);
        swift_bridgeObjectRetain_n();
        swift_unknownObjectRetain();
        uint64_t result = sub_25B1A85A8();
        if (v14 != v9)
        {
          __break(1u);
          return result;
        }
        swift_bridgeObjectRelease();
        uint64_t v8 = v13;
      }
      else
      {
        swift_unknownObjectRetain();
        uint64_t v6 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, _UNKNOWN **, void *, uint64_t, uint64_t))(v8 + 32))(a2, &off_2708D5D88, v6, ObjectType, v8);
      swift_unknownObjectRelease();
      swift_release();
      v5 += 2;
      --v3;
    }
    while (v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25B243D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x261160990](v3 + 16);
  if (result)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 8))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_25B243DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = MEMORY[0x261160990](v4 + 16);
  if (result)
  {
    uint64_t v10 = *(void *)(v4 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16))(a1, a2, a3, a4, ObjectType, v10);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_25B243EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x261160990](v3 + 16);
  if (result)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t ObjectType = swift_getObjectType();
    char v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 24))(a1, a2, a3, ObjectType, v8);
    swift_unknownObjectRelease();
    return v10 & 1;
  }
  return result;
}

uint64_t sub_25B243F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = MEMORY[0x261160990](v3 + 16);
  if (result)
  {
    uint64_t v8 = *(void *)(v3 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 32))(a1, a2, a3, ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t type metadata accessor for NetworkSyncService.WeakDelegate()
{
  return swift_getGenericMetadata();
}

unint64_t sub_25B243FFC()
{
  unint64_t result = qword_26A4D97D8;
  if (!qword_26A4D97D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D97D8);
  }
  return result;
}

uint64_t sub_25B244050(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    sub_25B291210();
    swift_bridgeObjectRetain();
    sub_25B290630();
    uint64_t v18 = sub_25B291260();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    uint64_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (sub_25B290FB0() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        uint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (sub_25B290FB0() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    unint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_25B2442F4(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_25B24444C((void *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_25B24444C((unint64_t *)v7, v4, v2);
    MEMORY[0x261160890](v7, -1, -1);
  }
  return v2;
}

uint64_t sub_25B24444C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = a2;
  uint64_t v45 = a1;
  uint64_t v59 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9EE8);
  uint64_t v4 = MEMORY[0x270FA5388](v59);
  uint64_t v58 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  int64_t v57 = (char *)&v43 - v6;
  uint64_t v56 = type metadata accessor for PairingRelationship();
  uint64_t v55 = *(void *)(v56 - 8);
  MEMORY[0x270FA5388](v56);
  uint64_t v54 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = sub_25B290080();
  uint64_t result = MEMORY[0x270FA5388](v53);
  uint64_t v52 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = 0;
  int64_t v11 = 0;
  uint64_t v61 = (void *)a3;
  uint64_t v12 = *(void *)(a3 + 64);
  uint64_t v47 = a3 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v48 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v51 = v9 + 16;
  uint64_t v50 = v9 + 32;
  uint64_t v73 = v9;
  uint64_t v49 = v9 + 8;
  uint64_t v16 = v52;
  uint64_t v17 = v53;
  uint64_t v18 = v57;
  while (1)
  {
    if (v15)
    {
      uint64_t v62 = (v15 - 1) & v15;
      int64_t v63 = v11;
      unint64_t v19 = __clz(__rbit64(v15)) | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v39 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v39 >= v48) {
      return sub_25B1A22F8(v45, v44, v46, v61);
    }
    unint64_t v40 = *(void *)(v47 + 8 * v39);
    int64_t v41 = v11 + 1;
    if (!v40)
    {
      int64_t v41 = v11 + 2;
      if (v11 + 2 >= v48) {
        return sub_25B1A22F8(v45, v44, v46, v61);
      }
      unint64_t v40 = *(void *)(v47 + 8 * v41);
      if (!v40)
      {
        int64_t v41 = v11 + 3;
        if (v11 + 3 >= v48) {
          return sub_25B1A22F8(v45, v44, v46, v61);
        }
        unint64_t v40 = *(void *)(v47 + 8 * v41);
        if (!v40) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v62 = (v40 - 1) & v40;
    int64_t v63 = v41;
    unint64_t v19 = __clz(__rbit64(v40)) + (v41 << 6);
LABEL_5:
    unint64_t v20 = v61;
    uint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v73 + 16);
    v21(v16, v61[6] + *(void *)(v73 + 72) * v19, v17);
    uint64_t v22 = v20[7];
    uint64_t v23 = *(void *)(v55 + 72);
    unint64_t v60 = v19;
    uint64_t v24 = v22 + v23 * v19;
    uint64_t v25 = v54;
    sub_25B244B78(v24, v54, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    uint64_t v26 = v59;
    uint64_t v27 = (uint64_t)&v18[*(int *)(v59 + 48)];
    v21(v18, (unint64_t)v16, v17);
    sub_25B244B78(v25, v27, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    uint64_t v28 = *(int *)(v26 + 48);
    uint64_t v29 = v58;
    uint64_t v30 = (uint64_t)&v58[v28];
    uint64_t v31 = v73;
    (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v58, v18, v17);
    sub_25B244EEC(v27, v30, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    unint64_t v32 = (long long *)(v30 + *(int *)(v56 + 20));
    long long v33 = v32[9];
    long long v70 = v32[8];
    long long v71 = v33;
    long long v72 = v32[10];
    long long v34 = v32[5];
    long long v66 = v32[4];
    long long v67 = v34;
    long long v35 = v32[7];
    long long v68 = v32[6];
    long long v69 = v35;
    long long v36 = v32[3];
    v64[2] = v32[2];
    long long v65 = v36;
    long long v37 = *v32;
    v64[1] = v32[1];
    v64[0] = v37;
    sub_25B1172F8((uint64_t)v64);
    sub_25B2450A0(v30, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    LODWORD(v27) = v65;
    sub_25B11DEBC((uint64_t)v64);
    uint64_t v38 = *(void (**)(char *, uint64_t))(v31 + 8);
    v38(v29, v17);
    sub_25B2450A0(v25, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v38)(v16, v17);
    if (v27 == 4)
    {
      *(unint64_t *)((char *)v45 + ((v60 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v60;
      if (__OFADD__(v46, 1)) {
        goto LABEL_27;
      }
      ++v46;
    }
    int64_t v11 = v63;
    unint64_t v15 = v62;
  }
  uint64_t v42 = v11 + 4;
  if (v11 + 4 >= v48) {
    return sub_25B1A22F8(v45, v44, v46, v61);
  }
  unint64_t v40 = *(void *)(v47 + 8 * v42);
  if (v40)
  {
    int64_t v41 = v11 + 4;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v41 = v42 + 1;
    if (__OFADD__(v42, 1)) {
      break;
    }
    if (v41 >= v48) {
      return sub_25B1A22F8(v45, v44, v46, v61);
    }
    unint64_t v40 = *(void *)(v47 + 8 * v41);
    ++v42;
    if (v40) {
      goto LABEL_21;
    }
  }
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_25B244A28()
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(v0 + *(void *)(*(void *)v0 + 168)) + 16);
  os_unfair_lock_lock(v1);
  sub_25B10DCD0(v2);
  os_unfair_lock_unlock(v1);
}

uint64_t sub_25B244AA8()
{
  return sub_25B237088(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_25B244AC4()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25B244AFC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25B244B34(uint64_t a1)
{
  return sub_25B237494(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_25B244B44@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + *(void *)(*(void *)v1 + 176));
  return swift_retain();
}

uint64_t sub_25B244B78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B244BE0()
{
  uint64_t v1 = type metadata accessor for Message();
  uint64_t v18 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = (v18 + 48) & ~v18;
  unint64_t v3 = (*(void *)(*(void *)(v1 - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  uint64_t v17 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v5 = (v3 + v17 + 8) & ~v17;
  uint64_t v16 = v5 + *(void *)(v4 + 64);
  uint64_t v6 = v0 + v2;
  uint64_t v7 = sub_25B290080();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v6 + *(int *)(v1 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7)) {
    v9(v10, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(v6 + *(int *)(v1 + 36)), *(void *)(v6 + *(int *)(v1 + 36) + 8));
  swift_release();
  uint64_t v11 = sub_25B28FEA0();
  uint64_t v12 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v0 + v5, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v0 + v5, v11);
  }
  uint64_t v13 = v0 + ((v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v14 = *(void *)(v13 + 120);
  if (v14 >> 60 != 15) {
    sub_25B10DFF0(*(void *)(v13 + 112), v14);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, ((((v16 + 191) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v18 | v17 | 7);
}

uint64_t sub_25B244EEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B244F54(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Message() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = v9 + *(void *)(v8 + 64);
  unint64_t v11 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + 191) & 0xFFFFFFFFFFFFFFF8;
  return sub_25B239108(a1, a2, v2 + v6, *(void **)(v2 + v7), (uint64_t (*)(uint64_t *, unint64_t, unint64_t))(v2 + v9), (long long *)(v2 + v11), *(unsigned __int8 *)(v2 + v11 + 176), *(void *)(v2 + v12 + 8), *(double *)(v2 + v12), *(void *)(v2 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_25B2450A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25B245100()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 168);
  if (v1 >> 60 != 15) {
    sub_25B10DFF0(*(void *)(v0 + 160), v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 256, 7);
}

uint64_t sub_25B245190(uint64_t a1)
{
  return sub_25B23952C(a1, v1 + 48, *(uint64_t (**)(char *))(v1 + 224), *(void *)(v1 + 232), *(void (**)(uint64_t))(v1 + 240), *(void *)(v1 + 248), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t sub_25B2451C8()
{
  unint64_t result = qword_26A4DB470;
  if (!qword_26A4DB470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB470);
  }
  return result;
}

uint64_t sub_25B24521C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v23 + 72) & ~v23;
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = type metadata accessor for Message();
  uint64_t v22 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v6 = (v3 + v4 + v22) & ~v22;
  unint64_t v7 = (*(void *)(*(void *)(v5 - 8) + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  uint64_t v21 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v9 = (v7 + v21 + 16) & ~v21;
  uint64_t v10 = *(void *)(v8 + 64) + v9 + 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  uint64_t v11 = v0 + v6;
  uint64_t v12 = sub_25B290080();
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v14(v11, v12);
  uint64_t v15 = v11 + *(int *)(v5 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12)) {
    v14(v15, v12);
  }
  unint64_t v16 = v10 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(v11 + *(int *)(v5 + 36)), *(void *)(v11 + *(int *)(v5 + 36) + 8));
  swift_bridgeObjectRelease();
  uint64_t v17 = sub_25B28FEA0();
  uint64_t v18 = *(void *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v0 + v9, 1, v17)) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v0 + v9, v17);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v19 = *(void *)(v0 + v16 + 120);
  if (v19 >> 60 != 15) {
    sub_25B10DFF0(*(void *)(v0 + v16 + 112), v19);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v16 + 177, v23 | v22 | v21 | 7);
}

uint64_t sub_25B245590(uint64_t *a1, unint64_t a2, unint64_t a3)
{
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 24) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v3 + 24) - 8) + 80);
  uint64_t v8 = *(void *)(*(void *)(*(void *)(v3 + 24) - 8) + 64);
  uint64_t v9 = *(void *)(type metadata accessor for Message() - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  unint64_t v13 = (v11 + *(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v14 = (*(void *)(v12 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_25B23F0B0(a1, a2, a3, *(void **)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), (uint64_t (*)())(v3 + v7), v3 + v10, *(void *)(v3 + v11), *(void *)(v3 + v11 + 8), v3 + v13, (_OWORD *)(v3 + v14), *(unsigned char *)(v3 + v14 + 176));
}

uint64_t sub_25B245734()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v20 = v1;
  uint64_t v21 = sub_25B290000();
  uint64_t v2 = *(void *)(v21 - 8);
  uint64_t v26 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v26 + 48) & ~v26;
  uint64_t v4 = *(void *)(v1 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v4 + 80);
  unint64_t v5 = (v25 + ((((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v25;
  unint64_t v19 = (((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for Message();
  uint64_t v24 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v7 = (v24 + v19 + 8) & ~v24;
  uint64_t v8 = *(void *)(*(void *)(v6 - 8) + 64);
  uint64_t v9 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  uint64_t v23 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v10 = (v7 + v8 + v23) & ~v23;
  uint64_t v22 = *(void *)(v9 + 64);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v21);
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v20);
  swift_release();
  swift_release();
  uint64_t v11 = v0 + v7;
  uint64_t v12 = sub_25B290080();
  uint64_t v13 = *(void *)(v12 - 8);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v14(v11, v12);
  uint64_t v15 = v11 + *(int *)(v6 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v15, 1, v12)) {
    v14(v15, v12);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(v11 + *(int *)(v6 + 36)), *(void *)(v11 + *(int *)(v6 + 36) + 8));
  uint64_t v16 = sub_25B28FEA0();
  uint64_t v17 = *(void *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v0 + v10, 1, v16)) {
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v0 + v10, v16);
  }
  return MEMORY[0x270FA0238](v0, v22 + v10 + 1, v26 | v25 | v24 | v23 | 7);
}

uint64_t sub_25B245AF4(void (*a1)(void), void *a2)
{
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *(void *)(sub_25B290000() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + v8 + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v10 = (*(void *)(*(void *)(v4 - 8) + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)(type metadata accessor for Message() - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + v11 + 8) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = *(void *)(v12 + 64);
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  unint64_t v16 = (v13 + v14 + *(unsigned __int8 *)(v15 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  return sub_25B2417F8(a1, a2, (char *)(v2 + v6), *(void *)(v2 + v7 + 8), *(void *)(v2 + v8), *(void *)(v2 + v8 + 8), v2 + v9, *(void (**)(double *, uint64_t, uint64_t *))(v2 + v10), *(double *)(v2 + v7), *(void *)(v2 + v10 + 8), *(uint64_t **)(v2 + v11), v2 + v13, v2 + v16, *(unsigned char *)(v2 + v16 + *(void *)(v15 + 64)));
}

uint64_t sub_25B245D10(uint64_t a1)
{
  return sub_25B245DD0(a1, (uint64_t)&unk_2708DEC70, (uint64_t)sub_25B2461DC);
}

uint64_t sub_25B245D38(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NetworkSyncService.WeakDelegate();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 24) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v3 + 24) = a2;
  swift_unknownObjectWeakAssign();
  return v3;
}

uint64_t sub_25B245DB0(uint64_t a1)
{
  return sub_25B245DD0(a1, (uint64_t)&unk_2708DEC48, (uint64_t)sub_25B2461DC);
}

uint64_t sub_25B245DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B241134(a1, *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(unsigned __int8 *)(v3 + 80), *(void *)(v3 + 96), *(void *)(v3 + 104), *(double *)(v3 + 88), *(void *)(v3 + 112), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), a2, a3);
}

uint64_t sub_25B245E28()
{
  uint64_t v1 = type metadata accessor for Message();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v14 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = AssociatedTypeWitness;
  uint64_t v4 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v13 = *(void *)(v15 + 64);
  uint64_t v5 = v0 + ((v2 + 48) & ~v2);
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v5 + *(int *)(v1 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    v8(v9, v6);
  }
  uint64_t v10 = v2 | v4 | 7;
  unint64_t v11 = (v4
       + ((((((v14 + ((v2 + 48) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16) & ~v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(v5 + *(int *)(v1 + 36)), *(void *)(v5 + *(int *)(v1 + 36) + 8));
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v15 + 8))(v0 + v11, v16);
  return MEMORY[0x270FA0238](v0, v11 + v13, v10);
}

uint64_t sub_25B246090(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Message() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return sub_25B240BDC(*(double *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), a1, v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v5 + 8), *(void (**)(void, void, void))(v1 + v6), *(void *)(v1 + v6 + 8), *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), v1+ ((*(unsigned __int8 *)(v7 + 80) + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
}

void sub_25B2461E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Message() - 8);
  sub_25B2431FC(a1, *(void *)(v1 + 48), *(void (**)(uint64_t *, char *, uint64_t))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 80), v1 + v4, v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), *(double *)(v1 + 72));
}

uint64_t sub_25B246300(uint64_t a1)
{
  return sub_25B242F18(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(unsigned char *)(v1 + 80), *(void *)(v1 + 96), *(void *)(v1 + 104), *(double *)(v1 + 88), *(double *)(v1 + 120), *(void *)(v1 + 112), *(void *)(v1 + 128), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t objectdestroy_19Tm()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 80) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25B24643C(uint64_t a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return sub_25B2432E0(*(double *)(v1 + 64), a1, *(void (**)(void *, char *, uint64_t *))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 72), v1 + ((*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t objectdestroy_25Tm()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 88) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for Message();
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  uint64_t v14 = (v4 + v5 + v7) & ~v7;
  uint64_t v8 = sub_25B290080();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v0 + v14, v8);
  uint64_t v11 = v0 + v14 + *(int *)(v6 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(v0 + v14 + *(int *)(v6 + 36)), *(void *)(v0 + v14 + *(int *)(v6 + 36) + 8));
  return MEMORY[0x270FA0238](v0, v14 + v13, v3 | v7 | 7);
}

uint64_t sub_25B246730()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v4 = *(void *)(sub_25B291270() - 8);
  uint64_t v45 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v5 = (v45 + 48) & ~v45;
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(sub_25B2909B0() - 8);
  uint64_t v44 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v8 = *(void *)(v1 - 8);
  uint64_t v39 = (v6 + v44 + 16) & ~v44;
  uint64_t v43 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v9 = (v39 + *(void *)(v7 + 64) + v43) & ~v43;
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = type metadata accessor for Message();
  uint64_t v42 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80);
  uint64_t v40 = (v10 + v42 + 16) & ~v42;
  unint64_t v12 = (((*(void *)(*(void *)(v11 - 8) + 64) + v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  uint64_t v41 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v46 = (v12 + v41 + 8) & ~v41;
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = (id *)(v0 + v5);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else
  {
    uint64_t v35 = v14;
    uint64_t v36 = v3;
    uint64_t v37 = v9;
    uint64_t v38 = v1;
    uint64_t v16 = sub_25B290080();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(void (**)(id *, uint64_t))(v17 + 8);
    v18(v15, v16);
    unint64_t v19 = (char *)v15 + *(int *)(v11 + 20);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v19, 1, v16)) {
      v18((id *)v19, v16);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_25B10DFF0(*(uint64_t *)((char *)v15 + *(int *)(v11 + 36)), *(unint64_t *)((char *)v15 + *(int *)(v11 + 36) + 8));
    uint64_t v20 = (char *)v15 + *(int *)(v36 + 28);
    uint64_t v21 = sub_25B28FEA0();
    uint64_t v22 = *(void *)(v21 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21)) {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v21);
    }
    (*(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))((char *)v15 + *(int *)(v36 + 32), AssociatedTypeWitness);
    uint64_t v9 = v37;
    uint64_t v1 = v38;
    uint64_t v14 = v35;
  }
  uint64_t v23 = v14 + v46;
  swift_release();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v0 + v39, 1, AssociatedTypeWitness)) {
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v0 + v39, AssociatedTypeWitness);
  }
  uint64_t v25 = v23 + 7;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v0 + v9, v1);
  uint64_t v26 = sub_25B290080();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v28(v0 + v40, v26);
  uint64_t v29 = v0 + v40 + *(int *)(v11 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v29, 1, v26)) {
    v28(v29, v26);
  }
  unint64_t v30 = v25 & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(v0 + v40 + *(int *)(v11 + 36)), *(void *)(v0 + v40 + *(int *)(v11 + 36) + 8));
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v31 = sub_25B28FEA0();
  uint64_t v32 = *(void *)(v31 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v0 + v46, 1, v31)) {
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v0 + v46, v31);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v33 = *(void *)(v0 + v30 + 120);
  if (v33 >> 60 != 15) {
    sub_25B10DFF0(*(void *)(v0 + v30 + 112), v33);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v30 + 177, v45 | v44 | v43 | v42 | v41 | 7);
}

void sub_25B246E54()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_getAssociatedTypeWitness();
  type metadata accessor for IncomingNetworkMessage();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F390);
  uint64_t v2 = *(void *)(sub_25B291270() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(sub_25B2909B0() - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (v6 + *(void *)(v5 + 64) + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  unint64_t v8 = (*(void *)(*(void *)(v1 - 8) + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(type metadata accessor for Message() - 8);
  unint64_t v10 = (v8 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  unint64_t v14 = (v12 + *(unsigned __int8 *)(v13 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v15 = (*(void *)(v13 + 64) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_25B23FA5C(v0 + v3, *(void (**)(uint64_t))(v0 + v4), *(void *)(v0 + v4 + 8), (void *)(v0 + v6), v0 + v7, *(void *)(v0 + v8 + 8), (void *)(v0 + v10), *(void *)(v0 + v11), *(double *)(v0 + v8), *(void *)(v0 + v11 + 8), *(void **)(v0 + v12), v0 + v14, v0 + v15, *(unsigned char *)(v0 + v15 + 176));
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t sub_25B247138(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B247180(uint64_t a1, unint64_t a2)
{
  return sub_25B24356C(a1, a2, *(void *)(v2 + 48), *(void *)(v2 + 16), *(unsigned int (***)(char *, uint64_t, uint64_t))(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_25B247190(uint64_t a1)
{
  return sub_25B2481AC(a1);
}

uint64_t sub_25B2471A8()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25B2471F0()
{
  return sub_25B243B94(v0[2], v0[3], v0[4]);
}

uint64_t sub_25B2471FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B2396A0(a1, *(uint64_t **)(v2 + 48), a2);
}

uint64_t sub_25B24720C()
{
  uint64_t v1 = type metadata accessor for Message();
  uint64_t v19 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v2 = (v19 + 48) & ~v19;
  unint64_t v3 = (*(void *)(*(void *)(v1 - 8) + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  uint64_t v18 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v5 = (v3 + v18 + 8) & ~v18;
  uint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = v0 + v2;
  uint64_t v8 = sub_25B290080();
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v7 + *(int *)(v1 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  unint64_t v12 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(v7 + *(int *)(v1 + 36)), *(void *)(v7 + *(int *)(v1 + 36) + 8));
  swift_release();
  uint64_t v13 = sub_25B28FEA0();
  uint64_t v14 = *(void *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v0 + v5, 1, v13)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v0 + v5, v13);
  }
  unint64_t v15 = (v6 + 191) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v16 = *(void *)(v0 + v12 + 120);
  if (v16 >> 60 != 15) {
    sub_25B10DFF0(*(void *)(v0 + v12 + 112), v16);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v15)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v15 + 16, v19 | v18 | 7);
}

uint64_t sub_25B24750C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for Message() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = v9 + *(void *)(v8 + 64);
  return sub_25B23BD34(a1, a2, v2 + v6, *(void *)(v2 + v7), v2 + v9, v2 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8), *(unsigned __int8 *)(v2 + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 176), *(void *)(v2 + ((v10 + 191) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v10 + 191) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_25B247644()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_25B24768C(uint64_t a1, char a2)
{
  return sub_25B23C024(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(uint64_t (**)(void))(v2 + 32));
}

uint64_t sub_25B24769C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_release();
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  uint64_t v5 = (v3 + 72) & ~v3;
  unint64_t v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v6 + 16, v3 | 7);
}

uint64_t sub_25B247788(uint64_t a1, void *a2, char a3)
{
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3[3] - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3[3] - 8) + 80);
  uint64_t v5 = (void *)((char *)v3 + ((*(void *)(*(void *)(v3[3] - 8) + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_25B23D848(a1, a2, a3 & 1, v3[6], v3[7], v3[8], (uint64_t)v3 + v4, *v5, v5[1]);
}

uint64_t sub_25B24781C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v22 + 64) & ~v22;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = type metadata accessor for Message();
  uint64_t v21 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v6 = (v4 + v21 + 16) & ~v21;
  uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 64);
  uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v6 + v7 + v9;
  uint64_t v20 = *(void *)(v8 + 64);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  if (*(void *)(v0 + v4)) {
    swift_release();
  }
  uint64_t v11 = v10 & ~v9;
  uint64_t v12 = v0 + v6;
  uint64_t v13 = sub_25B290080();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v0 + v6, v13);
  uint64_t v16 = v0 + v6 + *(int *)(v5 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12 + *(int *)(v5 + 20), 1, v13)) {
    v15(v16, v13);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(v12 + *(int *)(v5 + 36)), *(void *)(v12 + *(int *)(v5 + 36) + 8));
  uint64_t v17 = sub_25B28FEA0();
  uint64_t v18 = *(void *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v0 + v11, 1, v17)) {
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v0 + v11, v17);
  }
  swift_release();
  return MEMORY[0x270FA0238](v0, ((v11 + v20) & 0xFFFFFFFFFFFFFFF8) + 24, v22 | v21 | v9 | 7);
}

void sub_25B247B54(uint64_t a1, void *a2)
{
  uint64_t v4 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v6 = v2[4];
  uint64_t v7 = v2[5];
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  unint64_t v9 = (*(void *)(*(void *)(v5 - 8) + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(type metadata accessor for Message() - 8);
  unint64_t v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160) - 8);
  unint64_t v14 = (v11 + v12 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  sub_25B23E10C(a1, a2, v2[6], v2[7], (uint64_t)v2 + v8, *(void (**)(void *, uint64_t))((char *)v2 + v9), *(void *)((char *)v2 + v9 + 8), (uint64_t)v2 + v11, (void (*)(void *, uint64_t))((char *)v2 + v14), *((unsigned char *)v2 + v14 + *(void *)(v13 + 64)), *(void *)((char *)v2 + ((v14 + *(void *)(v13 + 64)) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)((char *)v2 + ((v14 + *(void *)(v13 + 64)) & 0xFFFFFFFFFFFFFFF8) + 16), v4, v5, v6, v7);
}

uint64_t objectdestroy_58Tm()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_25B247DF4(uint64_t a1, char a2)
{
  uint64_t v4 = a2 & 1;
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2 + 48))(v2 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a1, v4);
}

uint64_t sub_25B247E8C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  sub_25B116D08(*(id *)(v0 + 48), *(unsigned char *)(v0 + 56));
  if (*(void *)(v0 + 64)) {
    swift_release();
  }
  uint64_t v9 = (v3 + 80) & ~v3;
  uint64_t v10 = (v9 + v4 + v7) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v9, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v10, AssociatedTypeWitness);
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

void sub_25B248020()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  unint64_t v5 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  unint64_t v6 = v5 + *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_25B23DC08(*(void **)(v0 + 48), *(unsigned char *)(v0 + 56), *(void (**)(void *, uint64_t))(v0 + 64), *(void *)(v0 + 72), v0 + v5, v0 + v8, *(void *)(v0 + v9), *(void *)(v0 + v9 + 8), v2, v1, v4, v3);
}

uint64_t sub_25B248154()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B248164()
{
  return sub_25B2389FC();
}

uint64_t sub_25B24816C()
{
  return (*(uint64_t (**)(void, void))(*(void *)(v0 + 40) + 80))(*(void *)(v0 + 24), *(void *)(v0 + 40));
}

uint64_t sub_25B2481AC(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  return v3(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t sub_25B248214()
{
  swift_release();
  swift_unknownObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25B248254()
{
  return sub_25B238614(v0[2], v0[3], v0[4]);
}

uint64_t sub_25B248260()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B248270(uint64_t a1, uint64_t a2)
{
  return sub_25B2383FC(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_25B24827C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 48);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = v5(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
  *a2 = result;
  return result;
}

unsigned char *storeEnumTagSinglePayload for NetworkSyncServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B2483C0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkSyncServiceError()
{
  return &type metadata for NetworkSyncServiceError;
}

unint64_t sub_25B2483FC()
{
  unint64_t result = qword_26A4DB478;
  if (!qword_26A4DB478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB478);
  }
  return result;
}

BOOL static ReplicatorCodingError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ReplicatorCodingError.hash(into:)()
{
  return sub_25B291220();
}

uint64_t ReplicatorCodingError.hashValue.getter()
{
  return sub_25B291260();
}

unint64_t sub_25B248500()
{
  unint64_t result = qword_26A4DB480;
  if (!qword_26A4DB480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB480);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ReplicatorCodingError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B248620);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorCodingError()
{
  return &type metadata for ReplicatorCodingError;
}

uint64_t dispatch thunk of VersionedEncoder.version.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of VersionedDecoder.version.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of AllowListStoring.blockedByAllowList(ID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ReplicatorEngine::DeviceType_optional __swiftcall DeviceType.init(rawValue:)(Swift::Int64 rawValue)
{
  char v2 = 6;
  if ((unint64_t)rawValue < 6) {
    char v2 = rawValue;
  }
  *uint64_t v1 = v2;
  return (ReplicatorEngine::DeviceType_optional)rawValue;
}

uint64_t DeviceType.rawValue.getter()
{
  return *v0;
}

unint64_t sub_25B2486F4()
{
  unint64_t result = qword_26A4D92A8;
  if (!qword_26A4D92A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D92A8);
  }
  return result;
}

uint64_t sub_25B248748()
{
  return sub_25B291260();
}

uint64_t sub_25B248790()
{
  return sub_25B291250();
}

uint64_t sub_25B2487BC()
{
  return sub_25B291260();
}

ReplicatorEngine::DeviceType_optional sub_25B248800(Swift::Int64 *a1)
{
  return DeviceType.init(rawValue:)(*a1);
}

void sub_25B248808(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_25B248814()
{
  return sub_25B290700();
}

uint64_t sub_25B248874()
{
  return sub_25B2906D0();
}

uint64_t getEnumTagSinglePayload for DeviceType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B248A20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceType()
{
  return &type metadata for DeviceType;
}

unint64_t sub_25B248A58()
{
  unint64_t result = qword_26A4D92B0;
  if (!qword_26A4D92B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D92B0);
  }
  return result;
}

uint64_t sub_25B248AB0()
{
  return sub_25B290A00();
}

uint64_t sub_25B248B78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x263F8F010];
  uint64_t v3 = sub_25B290310();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t sub_25B248BEC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  uint64_t v2 = *MEMORY[0x263F8EFE0];
  uint64_t v3 = sub_25B290310();
  unsigned int v4 = *(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);
  return v4(a1, v2, v3);
}

uint64_t sub_25B248C68()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_25B1E41B4(&v4);
  os_unfair_lock_unlock(v1 + 4);
  uint64_t v2 = v4;
  swift_release();
  return v2;
}

uint64_t Watchdog.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  *(unsigned char *)(v0 + 32) = 0;
  return v0;
}

uint64_t Watchdog.init()()
{
  *(void *)(v0 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 24) = v1;
  *(unsigned char *)(v0 + 32) = 0;
  return v0;
}

uint64_t sub_25B248D84(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  unsigned __int8 v4 = *(os_unfair_lock_s **)(v2 + 24);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  sub_25B10DCD0(v5);
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return a2(v2);
}

uint64_t sub_25B248E38(uint64_t (*a1)(void))
{
  uint64_t v3 = *(os_unfair_lock_s **)(v1 + 24);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  uint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 32);
  sub_25B2497F8();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return a1((v4 != 0) & ~v5);
}

uint64_t sub_25B248EC0()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 24);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_25B10DDCC(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

void sub_25B248F34(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v57 = a3;
  uint64_t v51 = a2;
  uint64_t v55 = a1;
  uint64_t v7 = sub_25B290320();
  uint64_t v62 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v59 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = sub_25B290360();
  uint64_t v58 = *(void *)(v60 - 8);
  MEMORY[0x270FA5388](v60);
  uint64_t v56 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_25B290400();
  uint64_t v10 = *(void *)(v66 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v66);
  uint64_t v52 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  long long v65 = (char *)&v50 - v13;
  uint64_t v64 = sub_25B290310();
  uint64_t v14 = *(void *)(v64 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v64);
  uint64_t v54 = (uint64_t *)((char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v53 = (char *)&v50 - v18;
  MEMORY[0x270FA5388](v17);
  int64_t v63 = (uint64_t *)((char *)&v50 - v19);
  uint64_t v20 = sub_25B290930();
  uint64_t v21 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(const os_unfair_lock **)(v4 + 24);
  swift_retain();
  os_unfair_lock_assert_owner(v24 + 4);
  swift_release();
  if (qword_26A4D98C0 != -1) {
    swift_once();
  }
  uint64_t v25 = sub_25B290190();
  __swift_project_value_buffer(v25, (uint64_t)qword_26A4EB150);
  uint64_t v26 = sub_25B290160();
  os_log_type_t v27 = sub_25B2908A0();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v61 = v14;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 134349056;
    *(double *)aBlock = a4;
    sub_25B2909C0();
    _os_log_impl(&dword_25B107000, v26, v27, "Watchdog will fire in %{public}fs", v29, 0xCu);
    MEMORY[0x261160890](v29, -1, -1);
  }

  double v30 = a4 * 1000000.0;
  if ((~COERCE__INT64(a4 * 1000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (v30 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v30 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    return;
  }
  uint64_t v50 = v7;
  uint64_t v31 = v5;
  if ((uint64_t)v30 >= 0x7FFFFFFF) {
    uint64_t v32 = 0x7FFFFFFFLL;
  }
  else {
    uint64_t v32 = (uint64_t)v30;
  }
  sub_25B1BE2A8();
  aBlock[0] = MEMORY[0x263F8EE78];
  sub_25B249C58((unint64_t *)&qword_26A4D9EB8, MEMORY[0x263F8F148]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9EA0);
  sub_25B1B7B24((unint64_t *)&qword_26A4D9DB8, (uint64_t *)&unk_26A4D9EA0);
  sub_25B290A00();
  uint64_t v33 = sub_25B290940();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  uint64_t v35 = v63;
  uint64_t v34 = v64;
  *int64_t v63 = v32;
  uint64_t v36 = v61;
  uint64_t v37 = *(void (**)(uint64_t *, void, uint64_t))(v61 + 104);
  v37(v35, *MEMORY[0x263F8EFE8], v34);
  uint64_t v38 = v52;
  sub_25B2903F0();
  uint64_t v39 = v65;
  MEMORY[0x26115ED70](v38, v35);
  uint64_t v40 = *(char **)(v10 + 8);
  uint64_t v55 = v10 + 8;
  uint64_t v52 = v40;
  ((void (*)(char *, uint64_t))v40)(v38, v66);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v42 = v53;
  v37((uint64_t *)v53, *MEMORY[0x263F8F010], v34);
  uint64_t v43 = v54;
  uint64_t *v54 = 0;
  v37(v43, *MEMORY[0x263F8EFE0], v34);
  MEMORY[0x26115F2D0](v39, v42, v43, ObjectType);
  uint64_t v44 = *(void (**)(uint64_t *, uint64_t))(v36 + 8);
  v44(v43, v34);
  v44((uint64_t *)v42, v34);
  uint64_t v45 = (void *)swift_allocObject();
  uint64_t v46 = v51;
  v45[2] = v31;
  v45[3] = v46;
  v45[4] = v57;
  aBlock[4] = sub_25B249C34;
  void aBlock[5] = v45;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B10F584;
  aBlock[3] = &block_descriptor_14;
  uint64_t v47 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  int64_t v48 = v56;
  sub_25B290340();
  uint64_t v49 = v59;
  sub_25B248AB0();
  sub_25B290960();
  _Block_release(v47);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v49, v50);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v48, v60);
  swift_release();
  *(void *)(v31 + 16) = v33;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  if (*(void *)(v31 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_25B290980();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  ((void (*)(char *, uint64_t))v52)(v65, v66);
  v44(v63, v64);
}

uint64_t sub_25B249758(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = *(os_unfair_lock_s **)(a1 + 24);
  swift_retain();
  os_unfair_lock_lock(v4 + 4);
  sub_25B10DDCC(v5);
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return a2(a1);
}

uint64_t sub_25B2497F8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(const os_unfair_lock **)(v0 + 24);
  swift_retain();
  os_unfair_lock_assert_owner(v2 + 4);
  uint64_t result = swift_release();
  if (*(void *)(v1 + 16))
  {
    if (qword_26A4D98C0 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_25B290190();
    __swift_project_value_buffer(v4, (uint64_t)qword_26A4EB150);
    uint64_t v5 = sub_25B290160();
    os_log_type_t v6 = sub_25B2908A0();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_25B107000, v5, v6, "Cancelling watchdog", v7, 2u);
      MEMORY[0x261160890](v7, -1, -1);
    }

    if (*(void *)(v1 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_25B290970();
      swift_unknownObjectRelease();
    }
    *(void *)(v1 + 16) = 0;
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t Watchdog.deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return v0;
}

uint64_t Watchdog.__deallocating_deinit()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t _s16ReplicatorEngine8WatchdogC7execute6within12failureQueue6action0F7HandlerySd_So17OS_dispatch_queueCyACXEyACctFZ_0(uint64_t a1, void (*a2)(uint64_t))
{
  type metadata accessor for Watchdog();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v4 = swift_allocObject();
  *(_DWORD *)(v4 + 16) = 0;
  uint64_t v5 = (os_unfair_lock_s *)(v4 + 16);
  *(void *)(v3 + 24) = v4;
  *(unsigned char *)(v3 + 32) = 0;
  swift_retain();
  os_unfair_lock_lock(v5);
  sub_25B10DDCC(v6);
  os_unfair_lock_unlock(v5);
  swift_release();
  a2(v3);
  return swift_release();
}

void sub_25B249AC8(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

void sub_25B249AD4()
{
}

uint64_t sub_25B249AEC()
{
  return sub_25B2497F8();
}

uint64_t type metadata accessor for Watchdog()
{
  return self;
}

uint64_t method lookup function for Watchdog(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for Watchdog);
}

uint64_t dispatch thunk of Watchdog.isExpired.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of Watchdog.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t dispatch thunk of Watchdog.execute(within:failureQueue:action:failureHandler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of Watchdog.complete(handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of Watchdog.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t sub_25B249BF4()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25B249C34()
{
  return sub_25B249758(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t sub_25B249C58(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B249CA0()
{
  *(unsigned char *)(v0 + 32) = 1;
  return sub_25B2497F8();
}

void sub_25B249CD0()
{
  sub_25B248F34(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(double *)(v0 + 24));
}

void *static NetworkMessagingConnectionType.supportedConnectionTypes.getter()
{
  return &unk_2708D70E0;
}

BOOL static NetworkMessagingCriticalError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t NetworkMessagingCriticalError.hash(into:)()
{
  return sub_25B291220();
}

uint64_t NetworkMessagingConnectionType.description.getter()
{
  if (*v0) {
    return 0x73756E696D726574;
  }
  else {
    return 0x647261646E617473;
  }
}

unint64_t sub_25B249D9C()
{
  unint64_t result = qword_26A4DB488;
  if (!qword_26A4DB488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB488);
  }
  return result;
}

unint64_t sub_25B249DF4()
{
  unint64_t result = qword_26A4D97E0;
  if (!qword_26A4D97E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D97E0);
  }
  return result;
}

uint64_t sub_25B249E48()
{
  if (*v0) {
    return 0x73756E696D726574;
  }
  else {
    return 0x647261646E617473;
  }
}

void sub_25B249E7C()
{
  type metadata accessor for Message();
  if (v0 <= 0x3F)
  {
    sub_25B1B32F0();
    if (v1 <= 0x3F)
    {
      swift_checkMetadataState();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_25B249F84(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  int v9 = *(_DWORD *)(v7 + 80);
  uint64_t v10 = v8 + v9;
  if (*(_DWORD *)(v7 + 84)) {
    size_t v11 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    size_t v11 = v8 + 1;
  }
  unint64_t v12 = (((((((v11 + ((v8 + v9) & ~(unint64_t)v9) + 7) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = sub_25B28FEA0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = v14;
  int v17 = *(_DWORD *)(v14 + 80);
  int v16 = *(_DWORD *)(v14 + 84);
  uint64_t v57 = v14;
  uint64_t v58 = v13;
  uint64_t v18 = v17;
  uint64_t v19 = v12 + v17 + 16;
  if (v16) {
    uint64_t v20 = *(void *)(v15 + 64);
  }
  else {
    uint64_t v20 = *(void *)(v15 + 64) + 1;
  }
  uint64_t v21 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(_DWORD *)(v22 + 80);
  unint64_t v24 = ((v20 + v23 + (v19 & ~(unint64_t)v17)) & ~v23) + *(void *)(v22 + 64);
  unint64_t v25 = v17 | (unint64_t)v9 | v23;
  int v26 = (v17 | v9 | *(_DWORD *)(v22 + 80)) & 0x100000;
  if (v25 > 7 || v26 != 0 || v24 > 0x18)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    double v30 = (uint64_t *)(v29 + ((v25 & 0xF8 ^ 0x1F8) & (v25 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v52 = v19;
    uint64_t v53 = v20 + v23;
    uint64_t v54 = *(void *)(v21 - 8);
    uint64_t v55 = v21;
    unint64_t v31 = ~(unint64_t)v9;
    size_t __n = v20;
    uint64_t v51 = ~v18;
    uint64_t v32 = a1;
    uint64_t v33 = *(void (**)(void, void, void))(v7 + 16);
    v33(v32, a2, v6);
    uint64_t v56 = v32;
    uint64_t v34 = (void *)(((unint64_t)v32 + v10) & v31);
    uint64_t v35 = (const void *)(((unint64_t)a2 + v10) & v31);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v35, 1, v6))
    {
      memcpy(v34, v35, v11);
    }
    else
    {
      v33(v34, v35, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v34, 0, 1, v6);
    }
    uint64_t v37 = (void *)(((unint64_t)v34 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v38 = (void *)(((unint64_t)v35 + v11 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v37 = *v38;
    v37[1] = v38[1];
    uint64_t v39 = (void *)(((unint64_t)v37 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v40 = (void *)(((unint64_t)v38 + 23) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v39 = *v40;
    v39[1] = v40[1];
    uint64_t v41 = (void *)(((unint64_t)v39 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v42 = ((unint64_t)v40 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = *(void *)v42;
    v42 += 15;
    void *v41 = v43;
    uint64_t v44 = (void *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v45 = *(void *)(v42 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v46 = *(void *)((v42 & 0xFFFFFFFFFFFFFFF8) + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25B114300(v45, v46);
    *uint64_t v44 = v45;
    v44[1] = v46;
    double v30 = v56;
    uint64_t v47 = (void *)(((unint64_t)v56 + v52) & v51);
    int64_t v48 = (const void *)(((unint64_t)a2 + v52) & v51);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v57 + 48))(v48, 1, v58))
    {
      memcpy(v47, v48, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v57 + 16))(v47, v48, v58);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v47, 0, 1, v58);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v54 + 16))(((unint64_t)v47 + v53) & ~v23, ((unint64_t)v48 + v53) & ~v23, v55);
  }
  return v30;
}

uint64_t sub_25B24A384(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B290080();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v7(a1, v4);
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = v8 + v9;
  uint64_t v11 = ~v9;
  uint64_t v12 = (v8 + v9 + a1) & ~v9;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v12, 1, v4)) {
    v7(v12, v4);
  }
  if (*(_DWORD *)(v6 + 84)) {
    uint64_t v13 = v8;
  }
  else {
    uint64_t v13 = v8 + 1;
  }
  swift_bridgeObjectRelease();
  unint64_t v14 = (((v12 + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)((((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
  unint64_t v15 = (((((((v13 + (v10 & v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = sub_25B28FEA0();
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v18 = (a1 + *(unsigned __int8 *)(v17 + 80) + v15 + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16)) {
    (*(void (**)(unint64_t, uint64_t))(v17 + 8))(v18, v16);
  }
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = *(uint64_t (**)(unint64_t))(*(void *)(v19 - 8) + 8);
  uint64_t v21 = *(unsigned __int8 *)(*(void *)(v19 - 8) + 80);
  unint64_t v22 = *(void *)(v17 + 64) + v18;
  if (!*(_DWORD *)(v17 + 84)) {
    ++v22;
  }
  return v20((v22 + v21) & ~v21);
}

uint64_t sub_25B24A5E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25B290080();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = v9 + v10;
  uint64_t v41 = ~v10;
  uint64_t v12 = (void *)((v9 + v10 + a1) & ~v10);
  uint64_t v13 = (const void *)((v9 + v10 + a2) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v5))
  {
    int v14 = *(_DWORD *)(v7 + 84);
    if (v14) {
      size_t v15 = v9;
    }
    else {
      size_t v15 = v9 + 1;
    }
    memcpy(v12, v13, v15);
  }
  else
  {
    v8((uint64_t)v12, (uint64_t)v13, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v5);
    int v14 = *(_DWORD *)(v7 + 84);
  }
  if (v14) {
    size_t v16 = v9;
  }
  else {
    size_t v16 = v9 + 1;
  }
  uint64_t v17 = (void *)(((unint64_t)v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (void *)(((unint64_t)v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  uint64_t v19 = (void *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  uint64_t v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = ((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  v22 += 15;
  *uint64_t v21 = v23;
  unint64_t v24 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = *(void *)(v22 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v26 = *(void *)((v22 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B114300(v25, v26);
  *unint64_t v24 = v25;
  v24[1] = v26;
  uint64_t v27 = sub_25B28FEA0();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  unint64_t v30 = ((((((((v16 + (v11 & v41) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v29
      + 16;
  unint64_t v31 = (void *)((v30 + a1) & ~v29);
  uint64_t v32 = (const void *)((v30 + a2) & ~v29);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v28 + 48))(v32, 1, v27))
  {
    int v33 = *(_DWORD *)(v28 + 84);
    uint64_t v34 = *(void *)(v28 + 64);
    if (v33) {
      size_t v35 = *(void *)(v28 + 64);
    }
    else {
      size_t v35 = v34 + 1;
    }
    memcpy(v31, v32, v35);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v28 + 16))(v31, v32, v27);
    uint64_t v37 = *(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56);
    uint64_t v36 = v28 + 56;
    v37(v31, 0, 1, v27);
    int v33 = *(_DWORD *)(v36 + 28);
    uint64_t v34 = *(void *)(v36 + 8);
  }
  if (v33) {
    uint64_t v38 = v34;
  }
  else {
    uint64_t v38 = v34 + 1;
  }
  uint64_t v39 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v39 + 16))(((unint64_t)v31 + v38 + *(unsigned __int8 *)(v39 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80), ((unint64_t)v32 + v38 + *(unsigned __int8 *)(v39 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80));
  return a1;
}

uint64_t sub_25B24A940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25B290080();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v49 = a1;
  uint64_t v45 = ~v10;
  size_t v46 = v9 + v10;
  size_t v11 = (void *)((v9 + v10 + a1) & ~v10);
  uint64_t v47 = a2;
  uint64_t v12 = (void *)((v9 + v10 + a2) & ~v10);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v14 = v13(v11, 1, v5);
  int v15 = v13(v12, 1, v5);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(v11, v12, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v5);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v15)
    {
      v8((uint64_t)v11, (uint64_t)v12, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v5);
    int v16 = *(_DWORD *)(v7 + 84);
  }
  if (v16) {
    size_t v17 = v9;
  }
  else {
    size_t v17 = v9 + 1;
  }
  memcpy(v11, v12, v17);
LABEL_12:
  if (!*(_DWORD *)(v7 + 84)) {
    ++v9;
  }
  unint64_t v18 = (void *)(((unint64_t)v11 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v19 = (void *)(((unint64_t)v12 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v18 = *v19;
  v18[1] = v19[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v22 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = ((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)v23;
  v23 += 15;
  *unint64_t v22 = v24;
  uint64_t v25 = (uint64_t *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = *(void *)(v23 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v27 = *(void *)((v23 & 0xFFFFFFFFFFFFFFF8) + 8);
  sub_25B114300(v26, v27);
  uint64_t v28 = *v25;
  unint64_t v29 = v25[1];
  *uint64_t v25 = v26;
  v25[1] = v27;
  sub_25B10DFF0(v28, v29);
  uint64_t v30 = sub_25B28FEA0();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = *(unsigned __int8 *)(v31 + 80);
  unint64_t v33 = ((((((((v9 + (v46 & v45) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v32
      + 16;
  uint64_t v34 = (void *)((v33 + v49) & ~v32);
  size_t v35 = (void *)((v33 + v47) & ~v32);
  uint64_t v36 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v31 + 48);
  int v37 = v36(v34, 1, v30);
  int v38 = v36(v35, 1, v30);
  if (v37)
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 16))(v34, v35, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v34, 0, 1, v30);
      goto LABEL_25;
    }
    int v39 = *(_DWORD *)(v31 + 84);
    size_t v40 = *(void *)(v31 + 64);
  }
  else
  {
    if (!v38)
    {
      (*(void (**)(void *, void *, uint64_t))(v31 + 24))(v34, v35, v30);
      goto LABEL_25;
    }
    (*(void (**)(void *, uint64_t))(v31 + 8))(v34, v30);
    int v39 = *(_DWORD *)(v31 + 84);
    size_t v40 = *(void *)(v31 + 64);
  }
  if (v39) {
    size_t v41 = v40;
  }
  else {
    size_t v41 = v40 + 1;
  }
  memcpy(v34, v35, v41);
LABEL_25:
  if (*(_DWORD *)(v31 + 84)) {
    uint64_t v42 = *(void *)(v31 + 64);
  }
  else {
    uint64_t v42 = *(void *)(v31 + 64) + 1;
  }
  uint64_t v43 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v43 + 24))(((unint64_t)v34 + v42 + *(unsigned __int8 *)(v43 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80), ((unint64_t)v35 + v42 + *(unsigned __int8 *)(v43 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
  return v49;
}

uint64_t sub_25B24ADAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25B290080();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v11 = v9 + v10;
  uint64_t v38 = ~v10;
  uint64_t v12 = (void *)((v9 + v10 + a1) & ~v10);
  uint64_t v13 = (const void *)((v9 + v10 + a2) & ~v10);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v5))
  {
    int v14 = *(_DWORD *)(v7 + 84);
    if (v14) {
      size_t v15 = v9;
    }
    else {
      size_t v15 = v9 + 1;
    }
    memcpy(v12, v13, v15);
  }
  else
  {
    v8((uint64_t)v12, (uint64_t)v13, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v5);
    int v14 = *(_DWORD *)(v7 + 84);
  }
  if (v14) {
    size_t v16 = v9;
  }
  else {
    size_t v16 = v9 + 1;
  }
  size_t v17 = (_OWORD *)(((unint64_t)v12 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v18 = (_OWORD *)(((unint64_t)v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  *size_t v17 = *v18;
  uint64_t v19 = (_OWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (_OWORD *)(((unint64_t)v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  uint64_t v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  *(_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (((((((v16 + (v11 & v38) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = sub_25B28FEA0();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v27 = v23 + v26 + 16;
  uint64_t v28 = (void *)((v27 + a1) & ~v26);
  unint64_t v29 = (const void *)((v27 + a2) & ~v26);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v25 + 48))(v29, 1, v24))
  {
    int v30 = *(_DWORD *)(v25 + 84);
    uint64_t v31 = *(void *)(v25 + 64);
    if (v30) {
      size_t v32 = *(void *)(v25 + 64);
    }
    else {
      size_t v32 = v31 + 1;
    }
    memcpy(v28, v29, v32);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v25 + 32))(v28, v29, v24);
    uint64_t v34 = *(void (**)(void *, void, uint64_t, uint64_t))(v25 + 56);
    uint64_t v33 = v25 + 56;
    v34(v28, 0, 1, v24);
    int v30 = *(_DWORD *)(v33 + 28);
    uint64_t v31 = *(void *)(v33 + 8);
  }
  if (v30) {
    uint64_t v35 = v31;
  }
  else {
    uint64_t v35 = v31 + 1;
  }
  uint64_t v36 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v36 + 32))(((unint64_t)v28 + v35 + *(unsigned __int8 *)(v36 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80), ((unint64_t)v29 + v35 + *(unsigned __int8 *)(v36 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
  return a1;
}

uint64_t sub_25B24B0D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25B290080();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v8(a1, a2, v5);
  size_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v47 = a1;
  uint64_t v43 = ~v10;
  size_t v44 = v9 + v10;
  size_t v11 = (void *)((v9 + v10 + a1) & ~v10);
  uint64_t v45 = a2;
  uint64_t v12 = (void *)((v9 + v10 + a2) & ~v10);
  uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v14 = v13(v11, 1, v5);
  int v15 = v13(v12, 1, v5);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(v11, v12, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v5);
      goto LABEL_12;
    }
    int v16 = *(_DWORD *)(v7 + 84);
  }
  else
  {
    if (!v15)
    {
      v8((uint64_t)v11, (uint64_t)v12, v5);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v11, v5);
    int v16 = *(_DWORD *)(v7 + 84);
  }
  if (v16) {
    size_t v17 = v9;
  }
  else {
    size_t v17 = v9 + 1;
  }
  memcpy(v11, v12, v17);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    size_t v18 = v9;
  }
  else {
    size_t v18 = v9 + 1;
  }
  uint64_t v19 = (void *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRelease();
  uint64_t v21 = (void *)(((unint64_t)v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (void *)(((unint64_t)v20 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  v21[1] = v22[1];
  swift_bridgeObjectRelease();
  unint64_t v23 = (void *)(((unint64_t)v21 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (void *)(((unint64_t)v22 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v23 = *v24;
  uint64_t v25 = (uint64_t *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v26 = *v25;
  unint64_t v27 = v25[1];
  *(_OWORD *)uint64_t v25 = *(_OWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  sub_25B10DFF0(v26, v27);
  uint64_t v28 = sub_25B28FEA0();
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  unint64_t v31 = ((((((((v18 + (v44 & v43) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v30
      + 16;
  size_t v32 = (void *)((v31 + a1) & ~v30);
  uint64_t v33 = (const void *)((v31 + v45) & ~v30);
  uint64_t v34 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v29 + 48);
  int v35 = v34((v31 + v47) & ~v30, 1, v28);
  int v36 = v34((unint64_t)v33, 1, v28);
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v32, v33, v28);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v32, 0, 1, v28);
      goto LABEL_26;
    }
    int v37 = *(_DWORD *)(v29 + 84);
    size_t v38 = *(void *)(v29 + 64);
  }
  else
  {
    if (!v36)
    {
      (*(void (**)(void *, const void *, uint64_t))(v29 + 40))(v32, v33, v28);
      goto LABEL_26;
    }
    (*(void (**)(void *, uint64_t))(v29 + 8))(v32, v28);
    int v37 = *(_DWORD *)(v29 + 84);
    size_t v38 = *(void *)(v29 + 64);
  }
  if (v37) {
    size_t v39 = v38;
  }
  else {
    size_t v39 = v38 + 1;
  }
  memcpy(v32, v33, v39);
LABEL_26:
  if (*(_DWORD *)(v29 + 84)) {
    uint64_t v40 = *(void *)(v29 + 64);
  }
  else {
    uint64_t v40 = *(void *)(v29 + 64) + 1;
  }
  uint64_t v41 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v41 + 40))(((unint64_t)v32 + v40 + *(unsigned __int8 *)(v41 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80), ((unint64_t)v33 + v40 + *(unsigned __int8 *)(v41 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80));
  return v47;
}

uint64_t sub_25B24B520(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  if (v8) {
    int v9 = v8 - 1;
  }
  else {
    int v9 = 0;
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v11 = *(void *)(sub_25B28FEA0() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  if (v13) {
    unsigned int v14 = v13 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  if (v14 <= v10) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = *(unsigned int *)(v16 + 84);
  if (v17 > v15) {
    unsigned int v15 = *(_DWORD *)(v16 + 84);
  }
  uint64_t v18 = *(void *)(v7 + 64);
  uint64_t v19 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v21 = *(void *)(v11 + 64);
  uint64_t v22 = *(unsigned __int8 *)(v16 + 80);
  if (v8) {
    uint64_t v23 = 7;
  }
  else {
    uint64_t v23 = 8;
  }
  if (v13) {
    uint64_t v24 = v21;
  }
  else {
    uint64_t v24 = v21 + 1;
  }
  if (!a2) {
    return 0;
  }
  unint64_t v25 = ((((((((v23 + v18 + ((v18 + v19) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v20
      + 16;
  uint64_t v26 = v24 + v22;
  if (a2 > v15)
  {
    unint64_t v27 = ((v26 + (v25 & ~v20)) & ~v22) + *(void *)(v16 + 64);
    char v28 = 8 * v27;
    if (v27 > 3) {
      goto LABEL_24;
    }
    unsigned int v30 = ((a2 - v15 + ~(-1 << v28)) >> v28) + 1;
    if (HIWORD(v30))
    {
      int v29 = *(_DWORD *)((char *)a1 + v27);
      if (!v29) {
        goto LABEL_41;
      }
      goto LABEL_31;
    }
    if (v30 > 0xFF)
    {
      int v29 = *(unsigned __int16 *)((char *)a1 + v27);
      if (!*(unsigned __int16 *)((char *)a1 + v27)) {
        goto LABEL_41;
      }
      goto LABEL_31;
    }
    if (v30 >= 2)
    {
LABEL_24:
      int v29 = *((unsigned __int8 *)a1 + v27);
      if (!*((unsigned char *)a1 + v27)) {
        goto LABEL_41;
      }
LABEL_31:
      int v31 = (v29 - 1) << v28;
      if (v27 > 3) {
        int v31 = 0;
      }
      if (v27)
      {
        if (v27 <= 3) {
          int v32 = ((v26 + (v25 & ~v20)) & ~v22) + *(_DWORD *)(v16 + 64);
        }
        else {
          int v32 = 4;
        }
        switch(v32)
        {
          case 2:
            int v33 = *a1;
            break;
          case 3:
            int v33 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v33 = *(_DWORD *)a1;
            break;
          default:
            int v33 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v33 = 0;
      }
      return v15 + (v33 | v31) + 1;
    }
  }
LABEL_41:
  if (v10 == v15)
  {
    if (v8 >= 0x7FFFFFFF)
    {
      uint64_t v34 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
      return v34(a1, v8, v6);
    }
    unint64_t v38 = ((unint64_t)a1 + v18 + v19) & ~v19;
    if (v9 == v10)
    {
      if (v8 < 2) {
        return 0;
      }
      unsigned int v37 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v38, v8, v6);
      goto LABEL_66;
    }
    if (v8) {
      uint64_t v41 = *(void *)(v7 + 64);
    }
    else {
      uint64_t v41 = v18 + 1;
    }
    unint64_t v42 = *(void *)(((v38 + v41 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v42 >= 0xFFFFFFFF) {
      LODWORD(v42) = -1;
    }
    return (v42 + 1);
  }
  else
  {
    unint64_t v36 = ((unint64_t)a1 + v25) & ~v20;
    if (v14 == v15)
    {
      if (v13 < 2) {
        return 0;
      }
      unsigned int v37 = (*(uint64_t (**)(unint64_t))(v12 + 48))(v36);
LABEL_66:
      if (v37 >= 2) {
        return v37 - 1;
      }
      else {
        return 0;
      }
    }
    unint64_t v39 = (v26 + v36) & ~v22;
    uint64_t v40 = *(uint64_t (**)(unint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 48);
    return v40(v39, v17);
  }
}

void sub_25B24B94C(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = sub_25B290080();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  int v11 = v10 - 1;
  if (!v10) {
    int v11 = 0;
  }
  int v45 = v11;
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = sub_25B28FEA0();
  int v14 = 0;
  uint64_t v15 = *(void *)(v13 - 8);
  int v16 = *(_DWORD *)(v15 + 84);
  if (v16) {
    unsigned int v17 = v16 - 1;
  }
  else {
    unsigned int v17 = 0;
  }
  if (v17 <= v12) {
    unsigned int v18 = v12;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v19 = *(void *)(a4 + 16);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned int *)(v20 + 84);
  uint64_t v22 = *(void *)(v9 + 64);
  uint64_t v23 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v24 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v25 = *(unsigned __int8 *)(v20 + 80);
  if (v21 <= v18) {
    unsigned int v26 = v18;
  }
  else {
    unsigned int v26 = *(_DWORD *)(v20 + 84);
  }
  if (v10) {
    uint64_t v27 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v27 = v22 + 1;
  }
  uint64_t v28 = v22 + v23;
  unint64_t v29 = ((((((((v27 + ((v22 + v23) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + v24
      + 16;
  if (v16) {
    uint64_t v30 = *(void *)(*(void *)(v13 - 8) + 64);
  }
  else {
    uint64_t v30 = *(void *)(*(void *)(v13 - 8) + 64) + 1;
  }
  uint64_t v31 = v30 + v25;
  size_t v32 = ((v31 + (v29 & ~v24)) & ~v25) + *(void *)(v20 + 64);
  if (a3 <= v26) {
    goto LABEL_29;
  }
  if (v32 <= 3)
  {
    unsigned int v33 = ((a3 - v26 + ~(-1 << (8 * v32))) >> (8 * v32)) + 1;
    if (HIWORD(v33))
    {
      int v14 = 4;
      if (v26 >= a2) {
        goto LABEL_37;
      }
LABEL_30:
      unsigned int v34 = ~v26 + a2;
      if (v32 < 4)
      {
        int v35 = (v34 >> (8 * v32)) + 1;
        if (v32)
        {
          int v36 = v34 & ~(-1 << (8 * v32));
          bzero(a1, v32);
          if (v32 == 3)
          {
            *(_WORD *)a1 = v36;
            a1[2] = BYTE2(v36);
          }
          else if (v32 == 2)
          {
            *(_WORD *)a1 = v36;
          }
          else
          {
            *a1 = v36;
          }
        }
      }
      else
      {
        bzero(a1, v32);
        *(_DWORD *)a1 = v34;
        int v35 = 1;
      }
      switch(v14)
      {
        case 1:
          a1[v32] = v35;
          break;
        case 2:
          *(_WORD *)&a1[v32] = v35;
          break;
        case 3:
LABEL_68:
          __break(1u);
          JUMPOUT(0x25B24BDC0);
        case 4:
          *(_DWORD *)&a1[v32] = v35;
          break;
        default:
          return;
      }
      return;
    }
    if (v33 >= 0x100) {
      int v14 = 2;
    }
    else {
      int v14 = v33 > 1;
    }
LABEL_29:
    if (v26 >= a2) {
      goto LABEL_37;
    }
    goto LABEL_30;
  }
  int v14 = 1;
  if (v26 < a2) {
    goto LABEL_30;
  }
LABEL_37:
  uint64_t v37 = ~v23;
  switch(v14)
  {
    case 1:
      a1[v32] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 2:
      *(_WORD *)&a1[v32] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_42;
    case 3:
      goto LABEL_68;
    case 4:
      *(_DWORD *)&a1[v32] = 0;
      goto LABEL_41;
    default:
LABEL_41:
      if (!a2) {
        return;
      }
LABEL_42:
      if (v12 == v26)
      {
        if (v10 < 0x7FFFFFFF)
        {
          unint64_t v39 = (unsigned char *)((unint64_t)&a1[v28] & v37);
          if (v45 != v12)
          {
            size_t v44 = (void *)((unint64_t)&v39[v27 + 7] & 0xFFFFFFFFFFFFFFF8);
            if ((a2 & 0x80000000) != 0)
            {
              *size_t v44 = a2 ^ 0x80000000;
              v44[1] = 0;
            }
            else
            {
              v44[1] = (a2 - 1);
            }
            return;
          }
          uint64_t v40 = (a2 + 1);
          unint64_t v38 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
        }
        else
        {
          unint64_t v38 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
          unint64_t v39 = a1;
          uint64_t v40 = a2;
        }
        uint64_t v43 = v10;
        uint64_t v19 = v8;
        goto LABEL_55;
      }
      unint64_t v41 = (unint64_t)&a1[v29] & ~v24;
      if (v17 != v26)
      {
        unint64_t v39 = (unsigned char *)((v31 + v41) & ~v25);
        unint64_t v38 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
        uint64_t v40 = a2;
        uint64_t v43 = v21;
LABEL_55:
        v38(v39, v40, v43, v19);
        return;
      }
      unint64_t v42 = *(void (**)(unint64_t, void))(v15 + 56);
      v42(v41, (a2 + 1));
      break;
  }
}

uint64_t type metadata accessor for IncomingNetworkMessage()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for NetworkMessagingCriticalError()
{
  return &type metadata for NetworkMessagingCriticalError;
}

unsigned char *_s16ReplicatorEngine30NetworkMessagingConnectionTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B24BEE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NetworkMessagingConnectionType()
{
  return &type metadata for NetworkMessagingConnectionType;
}

uint64_t PropertyListTypeDecoder.__allocating_init(version:)(uint64_t a1, char a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

uint64_t PropertyListTypeDecoder.init(version:)(uint64_t a1, char a2)
{
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return v2;
}

uint64_t sub_25B24BF7C(uint64_t a1, uint64_t a2)
{
  if (a1 == MEMORY[0x263F06F78]
    && (sub_25B116E84(a2, (uint64_t)v11),
        sub_25B1B73F8(0, (unint64_t *)&qword_26B33F488),
        (swift_dynamicCast() & 1) != 0))
  {

    sub_25B116E84(a2, (uint64_t)v11);
    return swift_dynamicCast();
  }
  else
  {
    sub_25B116E84(a2, (uint64_t)v12);
    uint64_t v5 = *(void *)(v2 + 16);
    char v6 = *(unsigned char *)(v2 + 24);
    uint64_t v7 = MEMORY[0x263F8EE78];
    unint64_t v8 = sub_25B20D420(MEMORY[0x263F8EE78]);
    v11[0] = v7;
    v11[1] = v8;
    v12[4] = v5;
    char v13 = v6;
    sub_25B116EE0();
    uint64_t v10 = swift_allocObject();
    sub_25B116F7C((uint64_t)v11, v10 + 16);
    sub_25B2907F0();
    return sub_25B116FD8((uint64_t)v11);
  }
}

uint64_t sub_25B24C0F0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  return MEMORY[0x270FA0238](v0, 73, 7);
}

uint64_t PropertyListTypeDecoder.deinit()
{
  return v0;
}

uint64_t PropertyListTypeDecoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PropertyListTypeDecoder()
{
  return self;
}

uint64_t method lookup function for PropertyListTypeDecoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PropertyListTypeDecoder);
}

uint64_t dispatch thunk of PropertyListTypeDecoder.__allocating_init(version:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 88))(a1, a2 & 1);
}

uint64_t dispatch thunk of PropertyListTypeDecoder.decode<A>(_:from:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t destroy for PropertyListTypeDecoder.RootDecoder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

uint64_t initializeWithCopy for PropertyListTypeDecoder.RootDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2 + 16;
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7(a1 + 16, v5, v6);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for PropertyListTypeDecoder.RootDecoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  uint64_t v4 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v4;
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_0(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    int v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *int v3 = v12;
      }
      else
      {
        int v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *int v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PropertyListTypeDecoder.RootDecoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyListTypeDecoder.RootDecoder(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyListTypeDecoder.RootDecoder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyListTypeDecoder.RootDecoder()
{
  return &type metadata for PropertyListTypeDecoder.RootDecoder;
}

uint64_t sub_25B24C698()
{
  uint64_t v1 = sub_25B1B73F8(0, (unint64_t *)&qword_26B33F350);
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  uint64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *uint64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B24C7C0()
{
  uint64_t result = sub_25B24C698();
  if (!v0)
  {
    type metadata accessor for PropertyListTypeDecoder.KeyedDecoder();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    return sub_25B290D00();
  }
  return result;
}

uint64_t sub_25B24C878@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = sub_25B1B73F8(0, qword_26B33F2B0);
  sub_25B116E84((uint64_t)(v1 + 2), (uint64_t)v13);
  if (swift_dynamicCast())
  {
    uint64_t v4 = *v1;
    uint64_t v5 = v1[6];
    char v6 = *((unsigned char *)v1 + 56);
    a1[3] = (uint64_t)&type metadata for PropertyListTypeDecoder.UnkeyedDecoder;
    a1[4] = sub_25B24CF8C();
    uint64_t v7 = swift_allocObject();
    *a1 = v7;
    *(void *)(v7 + 16) = v4;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 32) = v12;
    *(void *)(v7 + 40) = v5;
    *(unsigned char *)(v7 + 48) = v6;
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    int v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *int v11 = v3;
    swift_bridgeObjectRetain();
    sub_25B290AD0();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCB0], v9);
    return swift_willThrow();
  }
}

uint64_t sub_25B24C9F8()
{
  uint64_t v1 = sub_25B1B73F8(0, &qword_26B33F358);
  sub_25B116E84(v0 + 16, (uint64_t)v9);
  uint64_t v2 = swift_dynamicCast();
  if (v2)
  {
  }
  else
  {
    uint64_t v3 = sub_25B290AF0();
    uint64_t v4 = (void *)swift_allocError();
    char v6 = v5;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *char v6 = v1;
    swift_bridgeObjectRetain();
    sub_25B290AD0();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v6, *MEMORY[0x263F8DCB0], v3);
    swift_willThrow();
  }
  return v2;
}

uint64_t sub_25B24CB3C(uint64_t a1)
{
  sub_25B116E84((uint64_t)(v1 + 2), (uint64_t)v13);
  if (a1 == MEMORY[0x263F06F78]
    && (sub_25B116E84((uint64_t)v13, (uint64_t)&v10),
        sub_25B1B73F8(0, (unint64_t *)&qword_26B33F488),
        (swift_dynamicCast() & 1) != 0))
  {

    sub_25B1979E4(v13, &v10);
    return swift_dynamicCast();
  }
  else
  {
    uint64_t v4 = *v1;
    sub_25B116E84((uint64_t)v13, (uint64_t)v11);
    uint64_t v5 = v1[6];
    char v6 = *((unsigned char *)v1 + 56);
    swift_bridgeObjectRetain();
    unint64_t v7 = sub_25B20D420(MEMORY[0x263F8EE78]);
    *(void *)&long long v10 = v4;
    *((void *)&v10 + 1) = v7;
    v11[4] = v5;
    char v12 = v6;
    sub_25B116EE0();
    uint64_t v9 = swift_allocObject();
    sub_25B116F7C((uint64_t)&v10, v9 + 16);
    sub_25B2907F0();
    sub_25B116FD8((uint64_t)&v10);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
}

uint64_t sub_25B24CCCC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B24CCD4()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B24CCDC()
{
  return sub_25B24C7C0();
}

uint64_t sub_25B24CCF4@<X0>(uint64_t *a1@<X8>)
{
  return sub_25B24C878(a1);
}

uint64_t sub_25B24CD0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  a2[3] = a1;
  a2[4] = sub_25B24CF38();
  uint64_t v4 = swift_allocObject();
  *a2 = v4;
  return sub_25B116F7C(v2, v4 + 16);
}

uint64_t sub_25B24CD68()
{
  return sub_25B2533D4() & 1;
}

uint64_t sub_25B24CD84()
{
  return sub_25B2534F0();
}

uint64_t sub_25B24CD9C()
{
  return sub_25B253604();
}

uint64_t sub_25B24CDB4()
{
  return sub_25B253718();
}

uint64_t sub_25B24CDCC()
{
  return sub_25B25382C();
}

uint64_t sub_25B24CDE4()
{
  return sub_25B253940();
}

uint64_t sub_25B24CDFC()
{
  return sub_25B253A54();
}

uint64_t sub_25B24CE14()
{
  return sub_25B253B68();
}

uint64_t sub_25B24CE2C()
{
  return sub_25B253C7C();
}

uint64_t sub_25B24CE44()
{
  return sub_25B290FC0();
}

uint64_t sub_25B24CE5C()
{
  return sub_25B253D90();
}

uint64_t sub_25B24CE74()
{
  return sub_25B253EA4();
}

uint64_t sub_25B24CE8C()
{
  return sub_25B253FB8();
}

uint64_t sub_25B24CEA4()
{
  return sub_25B2540CC();
}

uint64_t sub_25B24CEBC()
{
  return sub_25B2541E0();
}

uint64_t sub_25B24CED4()
{
  return sub_25B290FD0();
}

uint64_t sub_25B24CEEC(uint64_t a1)
{
  return sub_25B24CB3C(a1);
}

uint64_t sub_25B24CF04()
{
  return *(void *)(v0 + 48);
}

unint64_t sub_25B24CF10(uint64_t a1)
{
  unint64_t result = sub_25B116EE0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_25B24CF38()
{
  unint64_t result = qword_26B33F288;
  if (!qword_26B33F288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B33F288);
  }
  return result;
}

unint64_t sub_25B24CF8C()
{
  unint64_t result = qword_26B33F2A8;
  if (!qword_26B33F2A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B33F2A8);
  }
  return result;
}

uint64_t sub_25B24CFE0()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 49, 7);
}

uint64_t type metadata accessor for PropertyListTypeDecoder.KeyedDecoder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_25B24D038(int a1, int a2, int a3, id a4)
{
  id v4 = objc_msgSend(a4, sel_allKeys);
  sub_25B290730();

  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F340);
  sub_25B2547E4();
  uint64_t v5 = sub_25B2906A0();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_25B24D12C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  sub_25B116E84(a1, (uint64_t)v6);
  if (swift_dynamicCast())
  {
    sub_25B2912B0();
  }
  else if (swift_dynamicCast())
  {
    sub_25B2912D0();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, 1, 1, a2);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
}

uint64_t sub_25B24D228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v43 = a7;
  uint64_t v46 = a6;
  uint64_t v42 = sub_25B2909B0();
  uint64_t v41 = *(void *)(v42 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v42);
  int v45 = (char *)&v40 - v14;
  uint64_t v15 = *(void *)(a5 - 8);
  MEMORY[0x270FA5388](v13);
  unsigned int v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1;
  uint64_t v55 = a8;
  uint64_t v19 = sub_25B2912C0();
  char v21 = v20;
  uint64_t v47 = a3;
  uint64_t v44 = a2;
  if (v20)
  {
    uint64_t v19 = 0;
    *((void *)&v49 + 1) = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
  }
  else
  {
    uint64_t v51 = MEMORY[0x263F8D6C8];
  }
  *(void *)&long long v49 = v19;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22(v17, v18, a5);
  if (v21)
  {
    uint64_t v23 = sub_25B2912A0();
    uint64_t v53 = MEMORY[0x263F8D310];
    *(void *)&long long v52 = v23;
    *((void *)&v52 + 1) = v24;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
    sub_25B254744((uint64_t)&v49);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, a5);
    sub_25B1979E4(&v49, &v52);
  }
  __swift_project_boxed_opaque_existential_1(&v52, v53);
  id v25 = objc_msgSend(a4, sel___swift_objectForKeyedSubscript_, sub_25B290FA0());
  swift_unknownObjectRelease();
  if (v25)
  {
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B1979E4(v48, v54);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
    sub_25B116E84((uint64_t)v54, (uint64_t)v48);
    uint64_t v27 = v45;
    uint64_t v26 = v46;
    char v28 = swift_dynamicCast();
    unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56);
    if (v28)
    {
      uint64_t v30 = *(void *)(v26 - 8);
      v29(v27, 0, 1, v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v30 + 32))(v43, v27, v26);
    }
    else
    {
      v29(v27, 1, 1, v26);
      (*(void (**)(char *, uint64_t))(v41 + 8))(v27, v42);
      uint64_t v37 = sub_25B290AF0();
      swift_allocError();
      unint64_t v39 = v38;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *unint64_t v39 = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v37 - 8) + 104))(v39, *MEMORY[0x263F8DCB0], v37);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v54);
    }
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v52);
    uint64_t v32 = sub_25B290AF0();
    swift_allocError();
    unsigned int v34 = v33;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB490);
    uint64_t v35 = v55;
    v34[3] = a5;
    v34[4] = v35;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    v22((char *)boxed_opaque_existential_1, v18, a5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25B290AD0();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v32 - 8) + 104))(v34, *MEMORY[0x263F8DCA8], v32);
    return swift_willThrow();
  }
}

BOOL sub_25B24D758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  *(void *)&v9[0] = sub_25B2912A0();
  *((void *)&v9[0] + 1) = v6;
  swift_bridgeObjectRetain();
  id v7 = objc_msgSend(a5, sel___swift_objectForKeyedSubscript_, sub_25B291170(), v9[0]);
  swift_unknownObjectRelease();
  if (v7)
  {
    sub_25B2909E0();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_25B254744((uint64_t)v9);
  swift_bridgeObjectRelease();
  return v7 != 0;
}

BOOL sub_25B24D824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = sub_25B290AF0();
  uint64_t v24 = *(void *)(v13 - 8);
  uint64_t v25 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_25B1B73F8(0, &qword_26B33F358);
  sub_25B24D228(a1, v16, a2, a5, a6, v16, (uint64_t)&v26, a7);
  if (!v7) {
    goto LABEL_7;
  }
  id v26 = v7;
  id v17 = v7;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F390);
  uint64_t v18 = v25;
  if (!swift_dynamicCast()) {
    goto LABEL_7;
  }
  uint64_t v19 = v24;
  if ((*(unsigned int (**)(char *, uint64_t))(v24 + 88))(v15, v18) != *MEMORY[0x263F8DCB0])
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v15, v18);
LABEL_7:

    return v7 == 0;
  }

  (*(void (**)(char *, uint64_t))(v19 + 96))(v15, v18);
  char v20 = &v15[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360) + 48)];
  uint64_t v21 = sub_25B290AE0();
  (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v20, v21);

  return v7 == 0;
}

uint64_t sub_25B24DA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  sub_25B24D228(a1, MEMORY[0x263F8D4F8], a2, a5, a6, MEMORY[0x263F8D4F8], (uint64_t)&v10, a7);
  if (!v7) {
    char v8 = v10;
  }
  return v8 & 1;
}

uint64_t sub_25B24DAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = sub_25B24D228(a1, MEMORY[0x263F8D310], a2, a5, a6, MEMORY[0x263F8D310], (uint64_t)&v9, a7);
  if (!v7) {
    return v9;
  }
  return result;
}

double sub_25B24DB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  sub_25B24D228(a1, MEMORY[0x263F8D538], a2, a5, a6, MEMORY[0x263F8D538], (uint64_t)&v9, a7);
  if (!v7) {
    return v9;
  }
  return result;
}

float sub_25B24DB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  sub_25B24D228(a1, MEMORY[0x263F8D5C8], a2, a5, a6, MEMORY[0x263F8D5C8], (uint64_t)&v9, a7);
  if (!v7) {
    return v9;
  }
  return result;
}

uint64_t sub_25B24DBE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_25B24D228(a1, a8, a2, a5, a6, a8, (uint64_t)&v10, a7);
  if (!v8) {
    return v10;
  }
  return result;
}

uint64_t sub_25B24DC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_25B24D228(a1, a8, a2, a5, a6, a8, (uint64_t)&v10, a7);
  if (!v8) {
    return v10;
  }
  return result;
}

uint64_t sub_25B24DC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_25B24D228(a1, a8, a2, a5, a6, a8, (uint64_t)&v10, a7);
  if (!v8) {
    return v10;
  }
  return result;
}

uint64_t sub_25B24DCE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_25B24D228(a1, a8, a2, a5, a6, a8, (uint64_t)&v10, a7);
  if (!v8) {
    return v10;
  }
  return result;
}

uint64_t sub_25B24DD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t result = sub_25B24D228(a2, MEMORY[0x263F8EE58] + 8, a3, a6, a7, MEMORY[0x263F8EE58] + 8, (uint64_t)v26, a9);
  if (!v9)
  {
    if (a1 == MEMORY[0x263F06F78]
      && (sub_25B116E84((uint64_t)v26, (uint64_t)&v23),
          sub_25B1B73F8(0, (unint64_t *)&qword_26B33F488),
          (swift_dynamicCast() & 1) != 0))
    {

      sub_25B1979E4(v26, &v23);
      return swift_dynamicCast();
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_25B292C10;
      *(void *)(inited + 56) = a7;
      *(void *)(inited + 64) = a9;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(boxed_opaque_existential_1, a2, a7);
      *(void *)&long long v23 = a3;
      swift_bridgeObjectRetain();
      sub_25B25325C(inited);
      uint64_t v19 = v23;
      sub_25B116E84((uint64_t)v26, (uint64_t)v24);
      unint64_t v20 = sub_25B20D420(MEMORY[0x263F8EE78]);
      *(void *)&long long v23 = v19;
      *((void *)&v23 + 1) = v20;
      v24[4] = a4;
      char v25 = a5 & 1;
      sub_25B116EE0();
      uint64_t v22 = swift_allocObject();
      sub_25B116F7C((uint64_t)&v23, v22 + 16);
      sub_25B2907F0();
      sub_25B116FD8((uint64_t)&v23);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    }
  }
  return result;
}

void sub_25B24DFA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v16 = sub_25B1B73F8(0, (unint64_t *)&qword_26B33F350);
  char v17 = a5 & 1;
  sub_25B24D228(a2, v16, a3, a6, a7, v16, (uint64_t)v23, a9);
  if (!v9)
  {
    uint64_t v18 = (void *)v23[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    *(void *)(inited + 56) = a7;
    *(void *)(inited + 64) = a9;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16))(boxed_opaque_existential_1, a2, a7);
    v23[0] = a3;
    id v21 = v18;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    v23[1] = a4;
    char v24 = v17;
    id v25 = v21;
    type metadata accessor for PropertyListTypeDecoder.KeyedDecoder();
    swift_bridgeObjectRetain();
    id v22 = v21;
    swift_getWitnessTable();
    sub_25B290D00();
    swift_bridgeObjectRelease();
  }
}

void sub_25B24E194(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  v25[10] = *MEMORY[0x263EF8340];
  uint64_t v17 = sub_25B1B73F8(0, qword_26B33F2B0);
  char v18 = a4 & 1;
  sub_25B24D228(a1, v17, a2, a5, a6, v17, (uint64_t)v25, a7);
  if (!v8)
  {
    char v24 = (void *)v25[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    *(void *)(inited + 56) = a6;
    *(void *)(inited + 64) = a7;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16))(boxed_opaque_existential_1, a1, a6);
    v25[0] = a2;
    id v21 = v24;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    uint64_t v22 = v25[0];
    a8[3] = (uint64_t)&type metadata for PropertyListTypeDecoder.UnkeyedDecoder;
    a8[4] = sub_25B24CF8C();
    uint64_t v23 = swift_allocObject();
    *a8 = v23;

    *(void *)(v23 + 16) = v22;
    *(void *)(v23 + 24) = 0;
    *(void *)(v23 + 32) = v21;
    *(void *)(v23 + 40) = a3;
    *(unsigned char *)(v23 + 48) = v18;
  }
}

void sub_25B24E350()
{
}

void sub_25B24E3B4()
{
}

uint64_t sub_25B24E418()
{
  return sub_25B24D038(*(void *)v0, *(void *)(v0 + 8), *(unsigned __int8 *)(v0 + 16), *(id *)(v0 + 24));
}

BOOL sub_25B24E438(uint64_t a1)
{
  return sub_25B24D758(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_25B24E458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E4B8(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_25B24D824) & 1;
}

uint64_t sub_25B24E488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E4B8(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_25B24DA70) & 1;
}

uint64_t sub_25B24E4B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void))
{
  return a4(a1, *(void *)v4, *(void *)(v4 + 8), *(unsigned __int8 *)(v4 + 16), *(void *)(v4 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24)) & 1;
}

uint64_t sub_25B24E4F8(uint64_t a1, uint64_t a2)
{
  return sub_25B24DAD0(a1, *(void *)v2, *(void *)(v2 + 8), *(unsigned __int8 *)(v2 + 16), *(void **)(v2 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

double sub_25B24E52C(uint64_t a1, uint64_t a2)
{
  return sub_25B24DB2C(a1, *(void *)v2, *(void *)(v2 + 8), *(unsigned __int8 *)(v2 + 16), *(void **)(v2 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

float sub_25B24E560(uint64_t a1, uint64_t a2)
{
  return sub_25B24DB88(a1, *(void *)v2, *(void *)(v2 + 8), *(unsigned __int8 *)(v2 + 16), *(void **)(v2 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_25B24E594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E634(a1, a2, a3, MEMORY[0x263F8D6C8]);
}

uint64_t sub_25B24E5B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E6C4(a1, a2, a3, MEMORY[0x263F8E498]);
}

uint64_t sub_25B24E5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E71C(a1, a2, a3, MEMORY[0x263F8E4F0]);
}

uint64_t sub_25B24E5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E774(a1, a2, a3, MEMORY[0x263F8E548]);
}

uint64_t sub_25B24E614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E634(a1, a2, a3, MEMORY[0x263F8E5C0]);
}

uint64_t sub_25B24E634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B24DCE0(a1, *(void *)v4, *(void *)(v4 + 8), *(unsigned __int8 *)(v4 + 16), *(void **)(v4 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t sub_25B24E66C()
{
  return sub_25B291080();
}

uint64_t sub_25B24E684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E634(a1, a2, a3, MEMORY[0x263F8D9D0]);
}

uint64_t sub_25B24E6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E6C4(a1, a2, a3, MEMORY[0x263F8E778]);
}

uint64_t sub_25B24E6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B24DBE4(a1, *(void *)v4, *(void *)(v4 + 8), *(unsigned __int8 *)(v4 + 16), *(void **)(v4 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t sub_25B24E6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E71C(a1, a2, a3, MEMORY[0x263F8E888]);
}

uint64_t sub_25B24E71C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B24DC38(a1, *(void *)v4, *(void *)(v4 + 8), *(unsigned __int8 *)(v4 + 16), *(void **)(v4 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t sub_25B24E754(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E774(a1, a2, a3, MEMORY[0x263F8E8F8]);
}

uint64_t sub_25B24E774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B24DC8C(a1, *(void *)v4, *(void *)(v4 + 8), *(unsigned __int8 *)(v4 + 16), *(void **)(v4 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24), a4);
}

uint64_t sub_25B24E7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E634(a1, a2, a3, MEMORY[0x263F8E970]);
}

uint64_t sub_25B24E7CC()
{
  return sub_25B291090();
}

uint64_t sub_25B24E7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_25B24EB9C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, uint64_t))sub_25B24DD34);
}

uint64_t sub_25B24E810()
{
  return sub_25B291010();
}

uint64_t sub_25B24E828()
{
  return sub_25B291000();
}

uint64_t sub_25B24E840()
{
  uint64_t result = sub_25B291020();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B24E864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EA90(a1, a2, a3, MEMORY[0x263F8E340]);
}

uint64_t sub_25B24E890()
{
  uint64_t result = sub_25B291030();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B24E8B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E9D8(a1, a2, a3, MEMORY[0x263F8E358]);
}

uint64_t sub_25B24E8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EA34(a1, a2, a3, MEMORY[0x263F8E360]);
}

uint64_t sub_25B24E90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EA90(a1, a2, a3, MEMORY[0x263F8E368]);
}

uint64_t sub_25B24E938()
{
  uint64_t result = sub_25B291060();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B24E95C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EB18(a1, a2, a3, MEMORY[0x263F8E380]);
}

uint64_t sub_25B24E988()
{
  uint64_t result = sub_25B291040();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B24E9AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24E9D8(a1, a2, a3, MEMORY[0x263F8E378]);
}

uint64_t sub_25B24E9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FF;
}

uint64_t sub_25B24EA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EA34(a1, a2, a3, MEMORY[0x263F8E388]);
}

uint64_t sub_25B24EA34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4() & 0x1FFFF;
}

uint64_t sub_25B24EA64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EA90(a1, a2, a3, MEMORY[0x263F8E390]);
}

uint64_t sub_25B24EA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v4 = a4();
  return v4 | ((HIDWORD(v4) & 1) << 32);
}

uint64_t sub_25B24EAC8()
{
  uint64_t result = sub_25B291070();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B24EAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EB18(a1, a2, a3, MEMORY[0x263F8E3A0]);
}

uint64_t sub_25B24EB18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t result = a4();
  if (v4) {
    return v6;
  }
  return result;
}

uint64_t sub_25B24EB44()
{
  return sub_25B291050();
}

uint64_t sub_25B24EB70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_25B24EB9C(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, uint64_t))sub_25B24DFA0);
}

uint64_t sub_25B24EB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, void, uint64_t, void, uint64_t))
{
  return a7(a1, a2, *(void *)v7, *(void *)(v7 + 8), *(unsigned __int8 *)(v7 + 16), *(void *)(v7 + 24), *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

uint64_t sub_25B24EBE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EC70(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_25B24E194);
}

void sub_25B24EC10()
{
}

uint64_t sub_25B24EC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B24EC70(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_25B24E3B4);
}

uint64_t sub_25B24EC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void, void))
{
  return a4(a1, *(void *)v4, *(void *)(v4 + 8), *(unsigned __int8 *)(v4 + 16), *(void *)(v4 + 24), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t sub_25B24ECAC()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_25B24ECDC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = result;
  *(void *)(a3 + 8) = a2;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_25B24ECF0()
{
  return *(void *)(v0 + 16);
}

uint64_t sub_25B24ECFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_25B290DB0();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v5;
  *(void *)(a2 + 16) = a1;
  *(unsigned char *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_25B24ED58(uint64_t a1)
{
  unint64_t v2 = sub_25B2546B8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B24ED94(uint64_t a1)
{
  unint64_t v2 = sub_25B2546B8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B24EDD0()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v8 = sub_25B290AF0();
    swift_allocError();
    uint64_t v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v10 = MEMORY[0x263F8D4F8];
    uint64_t v11 = *v0;
    uint64_t v12 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v14 = sub_25B290DB0();
    uint64_t v16 = v15;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v17 = swift_allocObject();
    *(void *)(inited + 32) = v17;
    *(void *)(v17 + 16) = v14;
    *(void *)(v17 + 24) = v16;
    *(void *)(v17 + 32) = v12;
    *(unsigned char *)(v17 + 40) = 0;
    v31[0] = v11;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v10, *MEMORY[0x263F8DCC0], v8);
    swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8D4F8];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      uint64_t v6 = v5 + 1;
      if (__OFADD__(v5, 1)) {
        __break(1u);
      }
      char v7 = v29 & 1;
      v0[1] = v6;
    }
    else
    {
      uint64_t v18 = sub_25B290AF0();
      swift_allocError();
      unint64_t v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *unint64_t v20 = v4;
      uint64_t v21 = *v0;
      uint64_t v22 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v23 = swift_initStackObject();
      *(_OWORD *)(v23 + 16) = xmmword_25B292C10;
      v30[0] = v22;
      uint64_t v24 = sub_25B290DB0();
      uint64_t v26 = v25;
      *(void *)(v23 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v23 + 64) = sub_25B2546B8();
      uint64_t v27 = swift_allocObject();
      *(void *)(v23 + 32) = v27;
      *(void *)(v27 + 16) = v24;
      *(void *)(v27 + 24) = v26;
      *(void *)(v27 + 32) = v22;
      *(unsigned char *)(v27 + 40) = 0;
      v30[0] = v21;
      swift_bridgeObjectRetain();
      sub_25B25325C(v23);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v20, *MEMORY[0x263F8DCB0], v18);
      swift_willThrow();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return v7 & 1;
}

uint64_t sub_25B24F17C()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8D310];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8D310];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B24F520()
{
  v30[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8D538];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v30[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v30, (uint64_t)v29);
    uint64_t v4 = MEMORY[0x263F8D538];
    if (swift_dynamicCast())
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      uint64_t v6 = v0[1];
      BOOL v7 = __OFADD__(v6, 1);
      uint64_t v8 = v6 + 1;
      if (v7) {
        __break(1u);
      }
      v0[1] = v8;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v29[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v29[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    }
  }
  return result;
}

uint64_t sub_25B24F8C8()
{
  v30[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8D5C8];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v30[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v30, (uint64_t)v29);
    uint64_t v4 = MEMORY[0x263F8D5C8];
    if (swift_dynamicCast())
    {
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
      uint64_t v6 = v0[1];
      BOOL v7 = __OFADD__(v6, 1);
      uint64_t v8 = v6 + 1;
      if (v7) {
        __break(1u);
      }
      v0[1] = v8;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v29[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v29[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
    }
  }
  return result;
}

uint64_t sub_25B24FC70()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8D6C8];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8D6C8];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B250010()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8E498];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8E498];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B2503B8()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8E4F0];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8E4F0];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B250760()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8E548];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8E548];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B250B08()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8E5C0];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8E5C0];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B250EB0()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8D9D0];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8D9D0];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B251258()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8E778];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8E778];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B251600()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8E888];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8E888];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B2519A8()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8E8F8];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8E8F8];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B251D50()
{
  v31[13] = *MEMORY[0x263EF8340];
  uint64_t v1 = v0[1];
  unint64_t v2 = (void *)v0[2];
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v9 = sub_25B290AF0();
    swift_allocError();
    uint64_t v11 = v10;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v11 = MEMORY[0x263F8E970];
    uint64_t v12 = *v0;
    uint64_t v13 = v0[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v15 = sub_25B290DB0();
    uint64_t v17 = v16;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v18 = swift_allocObject();
    *(void *)(inited + 32) = v18;
    *(void *)(v18 + 16) = v15;
    *(void *)(v18 + 24) = v17;
    *(void *)(v18 + 32) = v13;
    *(unsigned char *)(v18 + 40) = 0;
    v31[0] = v12;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v9 - 8) + 104))(v11, *MEMORY[0x263F8DCC0], v9);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v31, (uint64_t)v30);
    uint64_t v4 = MEMORY[0x263F8E970];
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
      uint64_t v5 = v0[1];
      BOOL v6 = __OFADD__(v5, 1);
      uint64_t v7 = v5 + 1;
      if (v6) {
        __break(1u);
      }
      uint64_t result = v29;
      v0[1] = v7;
    }
    else
    {
      uint64_t v19 = sub_25B290AF0();
      swift_allocError();
      uint64_t v21 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v21 = v4;
      uint64_t v22 = *v0;
      uint64_t v23 = v0[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v24 = swift_initStackObject();
      *(_OWORD *)(v24 + 16) = xmmword_25B292C10;
      v30[0] = v23;
      uint64_t v25 = sub_25B290DB0();
      uint64_t v27 = v26;
      *(void *)(v24 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v24 + 64) = sub_25B2546B8();
      uint64_t v28 = swift_allocObject();
      *(void *)(v24 + 32) = v28;
      *(void *)(v28 + 16) = v25;
      *(void *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = v23;
      *(unsigned char *)(v28 + 40) = 0;
      v30[0] = v22;
      swift_bridgeObjectRetain();
      sub_25B25325C(v24);
      sub_25B290AD0();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v19 - 8) + 104))(v21, *MEMORY[0x263F8DCB0], v19);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    }
  }
  return result;
}

uint64_t sub_25B2520F8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  unint64_t v2 = *(void **)(v0 + 16);
  if (v1 >= (uint64_t)objc_msgSend(v2, sel_count))
  {
    uint64_t v5 = sub_25B290AF0();
    swift_allocError();
    uint64_t v7 = v6;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v7 = MEMORY[0x263F8EE58] + 8;
    uint64_t v8 = *(void *)(v0 + 8);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v10 = sub_25B290DB0();
    uint64_t v12 = v11;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v13 = swift_allocObject();
    *(void *)(inited + 32) = v13;
    *(void *)(v13 + 16) = v10;
    *(void *)(v13 + 24) = v12;
    *(void *)(v13 + 32) = v8;
    *(unsigned char *)(v13 + 40) = 0;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v5 - 8) + 104))(v7, *MEMORY[0x263F8DCC0], v5);
    return swift_willThrow();
  }
  else
  {
    id v3 = objc_msgSend(v2, sel_objectAtIndexedSubscript_, v1);
    sub_25B2909E0();
    uint64_t result = swift_unknownObjectRelease();
    *(void *)(v0 + 8) = v1 + 1;
  }
  return result;
}

uint64_t sub_25B252310(unint64_t *a1)
{
  v32[13] = *MEMORY[0x263EF8340];
  uint64_t v2 = sub_25B1B73F8(0, a1);
  uint64_t v3 = v1[1];
  uint64_t v4 = (void *)v1[2];
  if (v3 >= (uint64_t)objc_msgSend(v4, sel_count))
  {
    uint64_t v10 = sub_25B290AF0();
    swift_allocError();
    uint64_t v12 = v11;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v12 = v2;
    uint64_t v13 = *v1;
    uint64_t v14 = v1[1];
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_25B292C10;
    uint64_t v16 = sub_25B290DB0();
    uint64_t v18 = v17;
    *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
    *(void *)(inited + 64) = sub_25B2546B8();
    uint64_t v19 = swift_allocObject();
    *(void *)(inited + 32) = v19;
    *(void *)(v19 + 16) = v16;
    *(void *)(v19 + 24) = v18;
    *(void *)(v19 + 32) = v14;
    *(unsigned char *)(v19 + 40) = 0;
    v32[0] = v13;
    swift_bridgeObjectRetain();
    sub_25B25325C(inited);
    sub_25B290AD0();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x263F8DCC0], v10);
    return swift_willThrow();
  }
  else
  {
    id v5 = objc_msgSend(v4, sel_objectAtIndexedSubscript_, v3);
    sub_25B2909E0();
    swift_unknownObjectRelease();
    sub_25B116E84((uint64_t)v32, (uint64_t)v31);
    if (swift_dynamicCast())
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
      uint64_t v6 = v1[1];
      BOOL v7 = __OFADD__(v6, 1);
      uint64_t v8 = v6 + 1;
      if (v7) {
        __break(1u);
      }
      uint64_t result = v30;
      v1[1] = v8;
    }
    else
    {
      uint64_t v20 = sub_25B290AF0();
      swift_allocError();
      uint64_t v22 = v21;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      *uint64_t v22 = v2;
      uint64_t v23 = *v1;
      uint64_t v24 = v1[1];
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t v25 = swift_initStackObject();
      *(_OWORD *)(v25 + 16) = xmmword_25B292C10;
      v31[0] = v24;
      uint64_t v26 = sub_25B290DB0();
      uint64_t v28 = v27;
      *(void *)(v25 + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(v25 + 64) = sub_25B2546B8();
      uint64_t v29 = swift_allocObject();
      *(void *)(v25 + 32) = v29;
      *(void *)(v29 + 16) = v26;
      *(void *)(v29 + 24) = v28;
      *(void *)(v29 + 32) = v24;
      *(unsigned char *)(v29 + 40) = 0;
      v31[0] = v23;
      swift_bridgeObjectRetain();
      sub_25B25325C(v25);
      sub_25B290AD0();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v20 - 8) + 104))(v22, *MEMORY[0x263F8DCB0], v20);
      swift_willThrow();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
    }
  }
  return result;
}

BOOL sub_25B2526B8()
{
  uint64_t v1 = sub_25B290AF0();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = (void *)sub_25B252310(&qword_26B33F358);
  if (!v0)
  {

    return v0 == 0;
  }
  id v11 = v0;
  id v6 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F390);
  if (!swift_dynamicCast())
  {
LABEL_7:

    return v0 == 0;
  }
  if ((*(unsigned int (**)(char *, uint64_t))(v2 + 88))(v4, v1) != *MEMORY[0x263F8DCB0])
  {
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t))(v2 + 96))(v4, v1);
  BOOL v7 = &v4[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360) + 48)];
  uint64_t v8 = sub_25B290AE0();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return v0 == 0;
}

uint64_t sub_25B252898(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t result = sub_25B2520F8();
  if (!v2)
  {
    if (a1 == MEMORY[0x263F06F78]
      && (sub_25B116E84((uint64_t)v22, (uint64_t)&v19),
          sub_25B1B73F8(0, (unint64_t *)&qword_26B33F488),
          (swift_dynamicCast() & 1) != 0))
    {

      sub_25B1979E4(v22, &v19);
      return swift_dynamicCast();
    }
    else
    {
      uint64_t v6 = *v1;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_25B292C10;
      *(void *)&long long v19 = v1[1];
      uint64_t v8 = v19;
      uint64_t v9 = sub_25B290DB0();
      uint64_t v11 = v10;
      *(void *)(inited + 56) = &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
      *(void *)(inited + 64) = sub_25B2546B8();
      uint64_t v12 = swift_allocObject();
      *(void *)(inited + 32) = v12;
      *(void *)(v12 + 16) = v9;
      *(void *)(v12 + 24) = v11;
      *(void *)(v12 + 32) = v8;
      *(unsigned char *)(v12 + 40) = 0;
      *(void *)&long long v19 = v6;
      swift_bridgeObjectRetain();
      sub_25B25325C(inited);
      uint64_t v13 = v19;
      sub_25B116E84((uint64_t)v22, (uint64_t)v20);
      uint64_t v14 = v3[3];
      char v15 = *((unsigned char *)v3 + 32);
      unint64_t v16 = sub_25B20D420(MEMORY[0x263F8EE78]);
      *(void *)&long long v19 = v13;
      *((void *)&v19 + 1) = v16;
      v20[4] = v14;
      char v21 = v15;
      sub_25B116EE0();
      uint64_t v18 = swift_allocObject();
      sub_25B116F7C((uint64_t)&v19, v18 + 16);
      sub_25B2907F0();
      sub_25B116FD8((uint64_t)&v19);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    }
  }
  return result;
}

uint64_t sub_25B252AFC()
{
  uint64_t result = sub_25B252310((unint64_t *)&qword_26B33F350);
  if (!v0)
  {
    type metadata accessor for PropertyListTypeDecoder.KeyedDecoder();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    return sub_25B290D00();
  }
  return result;
}

id sub_25B252BC4()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_count);
}

BOOL sub_25B252BEC()
{
  uint64_t v1 = *(void *)(v0 + 8);
  return v1 >= (uint64_t)objc_msgSend(*(id *)(v0 + 16), sel_count);
}

uint64_t sub_25B252C20()
{
  return *(void *)(v0 + 8);
}

BOOL sub_25B252C28()
{
  return sub_25B2526B8();
}

uint64_t sub_25B252C44()
{
  return sub_25B24EDD0() & 1;
}

uint64_t sub_25B252C60()
{
  return sub_25B24F17C();
}

uint64_t sub_25B252C78()
{
  return sub_25B24F520();
}

uint64_t sub_25B252C90()
{
  return sub_25B24F8C8();
}

uint64_t sub_25B252CA8()
{
  return sub_25B24FC70();
}

uint64_t sub_25B252CC0()
{
  return sub_25B250010();
}

uint64_t sub_25B252CD8()
{
  return sub_25B2503B8();
}

uint64_t sub_25B252CF0()
{
  return sub_25B250760();
}

uint64_t sub_25B252D08()
{
  return sub_25B250B08();
}

uint64_t sub_25B252D20()
{
  return sub_25B290E40();
}

uint64_t sub_25B252D38()
{
  return sub_25B250EB0();
}

uint64_t sub_25B252D50()
{
  return sub_25B251258();
}

uint64_t sub_25B252D68()
{
  return sub_25B251600();
}

uint64_t sub_25B252D80()
{
  return sub_25B2519A8();
}

uint64_t sub_25B252D98()
{
  return sub_25B251D50();
}

uint64_t sub_25B252DB0()
{
  return sub_25B290E50();
}

uint64_t sub_25B252DC8(uint64_t a1)
{
  return sub_25B252898(a1);
}

uint64_t sub_25B252DE0()
{
  return sub_25B290DD0();
}

uint64_t sub_25B252DF8()
{
  return sub_25B290DC0();
}

uint64_t sub_25B252E10()
{
  uint64_t result = sub_25B290DE0();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B252E34(uint64_t a1, uint64_t a2)
{
  return sub_25B253060(a1, a2, MEMORY[0x263F8E110]);
}

uint64_t sub_25B252E60()
{
  uint64_t result = sub_25B290DF0();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B252E84(uint64_t a1, uint64_t a2)
{
  return sub_25B252FA8(a1, a2, MEMORY[0x263F8E118]);
}

uint64_t sub_25B252EB0(uint64_t a1, uint64_t a2)
{
  return sub_25B253004(a1, a2, MEMORY[0x263F8E120]);
}

uint64_t sub_25B252EDC(uint64_t a1, uint64_t a2)
{
  return sub_25B253060(a1, a2, MEMORY[0x263F8E128]);
}

uint64_t sub_25B252F08()
{
  uint64_t result = sub_25B290E20();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B252F2C(uint64_t a1, uint64_t a2)
{
  return sub_25B2530E8(a1, a2, MEMORY[0x263F8E138]);
}

uint64_t sub_25B252F58()
{
  uint64_t result = sub_25B290E00();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B252F7C(uint64_t a1, uint64_t a2)
{
  return sub_25B252FA8(a1, a2, MEMORY[0x263F8E130]);
}

uint64_t sub_25B252FA8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FF;
}

uint64_t sub_25B252FD8(uint64_t a1, uint64_t a2)
{
  return sub_25B253004(a1, a2, MEMORY[0x263F8E140]);
}

uint64_t sub_25B253004(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3() & 0x1FFFF;
}

uint64_t sub_25B253034(uint64_t a1, uint64_t a2)
{
  return sub_25B253060(a1, a2, MEMORY[0x263F8E148]);
}

uint64_t sub_25B253060(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unint64_t v3 = a3();
  return v3 | ((HIDWORD(v3) & 1) << 32);
}

uint64_t sub_25B253098()
{
  uint64_t result = sub_25B290E30();
  if (v0) {
    return v2;
  }
  return result;
}

uint64_t sub_25B2530BC(uint64_t a1, uint64_t a2)
{
  return sub_25B2530E8(a1, a2, MEMORY[0x263F8E150]);
}

uint64_t sub_25B2530E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (v3) {
    return v5;
  }
  return result;
}

uint64_t sub_25B253114()
{
  return sub_25B290E10();
}

uint64_t sub_25B253140()
{
  return sub_25B252AFC();
}

uint64_t sub_25B253158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_25B252310(qword_26B33F2B0);
  if (!v4)
  {
    uint64_t v9 = result;
    uint64_t v10 = *v3;
    uint64_t v11 = v3[3];
    char v12 = *((unsigned char *)v3 + 32);
    a3[3] = a1;
    a3[4] = a2;
    uint64_t v13 = swift_allocObject();
    *a3 = v13;
    *(void *)(v13 + 16) = v10;
    *(void *)(v13 + 24) = 0;
    *(void *)(v13 + 32) = v9;
    *(void *)(v13 + 40) = v11;
    *(unsigned char *)(v13 + 48) = v12;
    return swift_bridgeObjectRetain();
  }
  return result;
}

void sub_25B2531F8()
{
}

uint64_t sub_25B25325C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_25B218C78(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[5 * v9 + 4];
  if (a1 + 32 < v10 + 40 * v8 && v10 < a1 + 32 + 40 * v8) {
    goto LABEL_24;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B33F4B0);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = sub_25B290C10();
  __break(1u);
  return result;
}

uint64_t sub_25B2533D4()
{
  sub_25B116E84(v0 + 16, (uint64_t)v8);
  uint64_t v1 = MEMORY[0x263F8D4F8];
  if (swift_dynamicCast())
  {
    char v2 = v7 & 1;
  }
  else
  {
    uint64_t v3 = sub_25B290AF0();
    swift_allocError();
    int64_t v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *int64_t v5 = v1;
    swift_bridgeObjectRetain();
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
    swift_willThrow();
  }
  return v2 & 1;
}

uint64_t sub_25B2534F0()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8D310];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B253604()
{
  sub_25B116E84(v0 + 16, (uint64_t)v6);
  uint64_t v1 = MEMORY[0x263F8D538];
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    uint64_t v3 = sub_25B290AF0();
    swift_allocError();
    int64_t v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *int64_t v5 = v1;
    swift_bridgeObjectRetain();
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25B253718()
{
  sub_25B116E84(v0 + 16, (uint64_t)v6);
  uint64_t v1 = MEMORY[0x263F8D5C8];
  uint64_t result = swift_dynamicCast();
  if ((result & 1) == 0)
  {
    uint64_t v3 = sub_25B290AF0();
    swift_allocError();
    int64_t v5 = v4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *int64_t v5 = v1;
    swift_bridgeObjectRetain();
    sub_25B290AD0();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_25B25382C()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8D6C8];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B253940()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8E498];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B253A54()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8E4F0];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B253B68()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8E548];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B253C7C()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8E5C0];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B253D90()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8D9D0];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B253EA4()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8E778];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B253FB8()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8E888];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B2540CC()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8E8F8];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B2541E0()
{
  sub_25B116E84(v0 + 16, (uint64_t)v7);
  uint64_t v1 = MEMORY[0x263F8E970];
  if (swift_dynamicCast()) {
    return v6;
  }
  uint64_t v3 = sub_25B290AF0();
  swift_allocError();
  int64_t v5 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
  *int64_t v5 = v1;
  swift_bridgeObjectRetain();
  sub_25B290AD0();
  (*(void (**)(void *, void, uint64_t))(*(void *)(v3 - 8) + 104))(v5, *MEMORY[0x263F8DCB0], v3);
  return swift_willThrow();
}

uint64_t sub_25B2542F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA01A8](a1, a2, a3, 32);
}

void sub_25B2542FC(uint64_t a1)
{
  swift_bridgeObjectRelease();
  char v2 = *(void **)(a1 + 24);
}

uint64_t sub_25B254338(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  int64_t v4 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  id v5 = v4;
  return a1;
}

uint64_t sub_25B25437C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  id v5 = *(void **)(a2 + 24);
  uint64_t v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v5;
  id v7 = v5;

  return a1;
}

uint64_t sub_25B2543E8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);

  return a1;
}

uint64_t sub_25B254440(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25B254488(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void destroy for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 16);
}

uint64_t initializeWithCopy for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  id v5 = *(void **)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  id v6 = v5;
  return a1;
}

uint64_t assignWithCopy for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void **)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  return a1;
}

uint64_t assignWithTake for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  id v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;

  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyListTypeDecoder.UnkeyedDecoder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyListTypeDecoder.UnkeyedDecoder()
{
  return &type metadata for PropertyListTypeDecoder.UnkeyedDecoder;
}

uint64_t sub_25B2546B0(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

unint64_t sub_25B2546B8()
{
  unint64_t result = qword_26B33F2A0;
  if (!qword_26B33F2A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B33F2A0);
  }
  return result;
}

uint64_t sub_25B25470C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t sub_25B254744(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25B2547A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B24D12C(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_25B2547E4()
{
  unint64_t result = qword_26B33F348;
  if (!qword_26B33F348)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F340);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B33F348);
  }
  return result;
}

uint64_t initializeWithCopy for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PropertyListTypeDecoder.UnkeyedDecoder.__AKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyListTypeDecoder.UnkeyedDecoder.__AKey()
{
  return &type metadata for PropertyListTypeDecoder.UnkeyedDecoder.__AKey;
}

unint64_t sub_25B2549DC()
{
  unint64_t result = qword_26B33F298;
  if (!qword_26B33F298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B33F298);
  }
  return result;
}

unint64_t sub_25B254A34()
{
  unint64_t result = qword_26B33F290;
  if (!qword_26B33F290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B33F290);
  }
  return result;
}

uint64_t dispatch thunk of ReplicationPolicy.allowSync<A>(replicator:recordID:pairingRelationship:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 8))();
}

void static ReplicationSchedule.immediate.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

void ReplicationSchedule.retry.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  int v3 = *((unsigned __int8 *)v1 + 8);
  if (*((unsigned char *)v1 + 8))
  {
    if (v3 != 1) {
      goto LABEL_7;
    }
    BOOL v4 = __OFADD__(v2++, 1);
    if (!v4) {
      goto LABEL_7;
    }
    __break(1u);
  }
  BOOL v4 = __OFADD__(v2++, 1);
  if (!v4)
  {
LABEL_7:
    *(void *)a1 = v2;
    *(unsigned char *)(a1 + 8) = v3;
    return;
  }
  __break(1u);
}

void static ReplicationSchedule.opportunistic.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

uint64_t static ReplicationSchedule.< infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  unsigned int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a2 + 8)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v3 < v2;
  }
  unsigned int v6 = v5;
  BOOL v7 = v3 < v2;
  if (v4 != 1) {
    BOOL v7 = 0;
  }
  if (!*((unsigned char *)a2 + 8)) {
    BOOL v7 = 1;
  }
  if (*((unsigned char *)a1 + 8) != 1) {
    BOOL v7 = v4 < 2;
  }
  if (*((unsigned char *)a1 + 8)) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t ReplicationSchedule.description.getter()
{
  if (!*(unsigned char *)(v0 + 8))
  {
    uint64_t v1 = 0x74616964656D6D69;
    goto LABEL_5;
  }
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    sub_25B290AA0();
    swift_bridgeObjectRelease();
    uint64_t v1 = 0x6E7574726F70706FLL;
LABEL_5:
    uint64_t v3 = v1;
    sub_25B290DB0();
    sub_25B290650();
    swift_bridgeObjectRelease();
    sub_25B290650();
    return v3;
  }
  return 0x646579616C6564;
}

BOOL static ReplicationSchedule.== infix(_:_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = *((unsigned __int8 *)a2 + 8);
  if (!*(unsigned char *)(a1 + 8))
  {
    if (*((unsigned char *)a2 + 8)) {
      return 0;
    }
    return *(void *)a1 == v2;
  }
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if (v3 != 1) {
      return 0;
    }
    return *(void *)a1 == v2;
  }
  return v3 == 2 && v2 == 0;
}

unint64_t sub_25B254C90()
{
  unint64_t result = qword_26A4DB498;
  if (!qword_26A4DB498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB498);
  }
  return result;
}

uint64_t sub_25B254CE4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  unsigned int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a2 + 8)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v3 < v2;
  }
  unsigned int v6 = v5;
  BOOL v7 = v3 < v2;
  if (v4 != 1) {
    BOOL v7 = 0;
  }
  if (!*((unsigned char *)a2 + 8)) {
    BOOL v7 = 1;
  }
  if (*((unsigned char *)a1 + 8) != 1) {
    BOOL v7 = v4 < 2;
  }
  if (*((unsigned char *)a1 + 8)) {
    return v7;
  }
  else {
    return v6;
  }
}

BOOL sub_25B254D38(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((unsigned __int8 *)a1 + 8);
  uint64_t v4 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v2 < v4;
  }
  int v6 = v5;
  BOOL v7 = v2 < v4;
  if (v3 != 1) {
    BOOL v7 = 0;
  }
  if (!*((unsigned char *)a1 + 8)) {
    BOOL v7 = 1;
  }
  BOOL v8 = v3 < 2;
  if (*((unsigned char *)a2 + 8) != 1) {
    BOOL v7 = v8;
  }
  if (!*((unsigned char *)a2 + 8)) {
    BOOL v7 = v6;
  }
  return !v7;
}

BOOL sub_25B254D90(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  unsigned int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a2 + 8)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v3 < v2;
  }
  int v6 = v5;
  BOOL v7 = v3 < v2;
  if (v4 != 1) {
    BOOL v7 = 0;
  }
  if (!*((unsigned char *)a2 + 8)) {
    BOOL v7 = 1;
  }
  if (*((unsigned char *)a1 + 8) != 1) {
    BOOL v7 = v4 < 2;
  }
  if (!*((unsigned char *)a1 + 8)) {
    BOOL v7 = v6;
  }
  return !v7;
}

uint64_t sub_25B254DE8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unsigned int v3 = *((unsigned __int8 *)a1 + 8);
  uint64_t v4 = *a2;
  if (*((unsigned char *)a1 + 8)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v2 < v4;
  }
  unsigned int v6 = v5;
  BOOL v7 = v2 < v4;
  if (v3 != 1) {
    BOOL v7 = 0;
  }
  if (!*((unsigned char *)a1 + 8)) {
    BOOL v7 = 1;
  }
  BOOL v8 = v3 < 2;
  if (*((unsigned char *)a2 + 8) != 1) {
    BOOL v7 = v8;
  }
  if (*((unsigned char *)a2 + 8)) {
    return v7;
  }
  else {
    return v6;
  }
}

uint64_t sub_25B254E40(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (*((unsigned char *)a2 + 8)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v2 == v3;
  }
  unsigned int v6 = v5;
  BOOL v8 = v4 == 1 && v2 == v3;
  BOOL v10 = v4 == 2 && v3 == 0;
  if (*((unsigned char *)a1 + 8) != 1) {
    BOOL v8 = v10;
  }
  if (*((unsigned char *)a1 + 8)) {
    return v8;
  }
  else {
    return v6;
  }
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicationSchedule(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ReplicationSchedule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_25B254F28(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_25B254F40(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)unint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ReplicationSchedule()
{
  return &type metadata for ReplicationSchedule;
}

uint64_t dispatch thunk of FirstLockStateProviding.hasUnlockedSinceBootPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of FirstLockStateProviding.hasUnlockedSinceBoot.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t PrioritizedRecordValue.value.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B254F9C(v1, a1);
}

uint64_t sub_25B254F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Record.Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PrioritizedRecordValue.priority.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for PrioritizedRecordValue();
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 20));
  return result;
}

uint64_t type metadata accessor for PrioritizedRecordValue()
{
  uint64_t result = qword_26A4DB4A8;
  if (!qword_26A4DB4A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PrioritizedRecordValue.init(value:priority:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a2;
  sub_25B2550BC(a1, a3);
  uint64_t result = type metadata accessor for PrioritizedRecordValue();
  *(unsigned char *)(a3 + *(int *)(result + 20)) = v4;
  return result;
}

uint64_t sub_25B2550BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Record.Value(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL static RecordValidationResult.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t RecordValidationResult.hash(into:)()
{
  return sub_25B291220();
}

uint64_t RecordValidationResult.hashValue.getter()
{
  return sub_25B291260();
}

unint64_t sub_25B2551AC()
{
  unint64_t result = qword_26A4DB4A0;
  if (!qword_26A4DB4A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB4A0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PrioritizedRecordValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_25B114300(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = type metadata accessor for Record.Value(0);
    uint64_t v10 = *(int *)(v9 + 20);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = sub_25B28FEA0();
    uint64_t v14 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
      memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(uint64_t *)((char *)a1 + *(int *)(v9 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 24));
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for PrioritizedRecordValue(uint64_t a1)
{
  sub_25B10DFF0(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v2 = a1 + *(int *)(type metadata accessor for Record.Value(0) + 20);
  uint64_t v3 = sub_25B28FEA0();
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v2, 1, v3);
  if (!result)
  {
    int v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(v2, v3);
  }
  return result;
}

uint64_t *initializeWithCopy for PrioritizedRecordValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_25B114300(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = type metadata accessor for Record.Value(0);
  uint64_t v9 = *(int *)(v8 + 20);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_25B28FEA0();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  *(uint64_t *)((char *)a1 + *(int *)(v8 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 24));
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t *assignWithCopy for PrioritizedRecordValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  sub_25B114300(*a2, v6);
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  *a1 = v5;
  a1[1] = v6;
  sub_25B10DFF0(v7, v8);
  uint64_t v9 = type metadata accessor for Record.Value(0);
  uint64_t v10 = *(int *)(v9 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_25B28FEA0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  *(uint64_t *)((char *)a1 + *(int *)(v9 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(v9 + 24));
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *initializeWithTake for PrioritizedRecordValue(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for Record.Value(0);
  uint64_t v7 = *(int *)(v6 + 20);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_25B28FEA0();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(void *)((char *)a1 + *(int *)(v6 + 24)) = *(void *)((char *)a2 + *(int *)(v6 + 24));
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t *assignWithTake for PrioritizedRecordValue(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_25B10DFF0(v5, v6);
  uint64_t v7 = type metadata accessor for Record.Value(0);
  uint64_t v8 = *(int *)(v7 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_25B28FEA0();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  *(uint64_t *)((char *)a1 + *(int *)(v7 + 24)) = *(void *)((char *)a2 + *(int *)(v7 + 24));
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for PrioritizedRecordValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B255ABC);
}

uint64_t sub_25B255ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Record.Value(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 3) {
      return v10 - 2;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for PrioritizedRecordValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B255B8C);
}

uint64_t sub_25B255B8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Record.Value(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

uint64_t sub_25B255C48()
{
  uint64_t result = type metadata accessor for Record.Value(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RecordValidationResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B255DA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordValidationResult()
{
  return &type metadata for RecordValidationResult;
}

uint64_t dispatch thunk of ReplicatorDataSource.publicationMethod.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ReplicatorDataSource.protocolVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ReplicatorDataSource.replicator<A>(_:valueFor:for:remoteZoneProtocolVersion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 24))();
}

uint64_t dispatch thunk of ReplicatorDataSource.replicator<A>(_:didFetch:from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 32))();
}

uint64_t dispatch thunk of ReplicatorDataSource.replicator<A>(_:didDelete:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 40))();
}

uint64_t dispatch thunk of ReplicatorDataSource.replicator<A>(_:validateRecordID:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 48))();
}

uint64_t dispatch thunk of ReplicatorDataSource.replicator<A>(_:sizeFor:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 56))();
}

uint64_t sub_25B255E6C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4DA7E0);
    uint64_t v2 = sub_25B290C00();
  }
  else
  {
    uint64_t v2 = MEMORY[0x263F8EE80];
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = v2 + 64;
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    int v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_25B116E84(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_25B1979E4(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_25B1979E4(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_25B1979E4(v36, v37);
    sub_25B1979E4(v37, &v33);
    uint64_t result = sub_25B290A40();
    uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)(v6 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v6 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v6 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    uint64_t v10 = *(void *)(v2 + 48) + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_25B1979E4(&v33, (_OWORD *)(*(void *)(v2 + 56) + 32 * v9));
    ++*(void *)(v2 + 16);
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_25B1A85A8();
    return v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

void sub_25B256234(uint64_t a1)
{
  if (a1)
  {
    uint64_t v26 = sub_25B2905C0();
    sub_25B290A60();
    if (*(void *)(a1 + 16) && (unint64_t v2 = sub_25B18AA54((uint64_t)v29), (v3 & 1) != 0))
    {
      sub_25B116E84(*(void *)(a1 + 56) + 32 * v2, (uint64_t)&v30);
    }
    else
    {
      long long v30 = 0u;
      long long v31 = 0u;
    }
    sub_25B197990((uint64_t)v29);
    if (*((void *)&v31 + 1))
    {
      sub_25B257194();
      if (swift_dynamicCast())
      {
        uint64_t v4 = v26;
        if ([v26 BOOLValue])
        {
          if (qword_26A4DA050 != -1) {
            swift_once();
          }
          uint64_t v5 = sub_25B290190();
          __swift_project_value_buffer(v5, (uint64_t)qword_26A4EB220);
          uint64_t v6 = sub_25B290160();
          os_log_type_t v7 = sub_25B290860();
          if (!os_log_type_enabled(v6, v7)) {
            goto LABEL_42;
          }
          int64_t v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int64_t v8 = 0;
          unint64_t v9 = "Captured bug report successfully";
        }
        else
        {
          id v27 = (id)sub_25B2905C0();
          unint64_t v28 = v16;
          sub_25B290A60();
          if (*(void *)(a1 + 16) && (unint64_t v17 = sub_25B18AA54((uint64_t)v29), (v18 & 1) != 0))
          {
            sub_25B116E84(*(void *)(a1 + 56) + 32 * v17, (uint64_t)&v30);
          }
          else
          {
            long long v30 = 0u;
            long long v31 = 0u;
          }
          sub_25B197990((uint64_t)v29);
          if (*((void *)&v31 + 1))
          {
            if (swift_dynamicCast())
            {
              if (qword_26A4DA050 != -1) {
                swift_once();
              }
              uint64_t v19 = sub_25B290190();
              __swift_project_value_buffer(v19, (uint64_t)qword_26A4EB220);
              swift_bridgeObjectRetain();
              uint64_t v6 = sub_25B290160();
              os_log_type_t v20 = sub_25B290860();
              if (!os_log_type_enabled(v6, v20))
              {

                swift_bridgeObjectRelease_n();
                goto LABEL_43;
              }
              unint64_t v21 = (uint8_t *)swift_slowAlloc();
              uint64_t v22 = swift_slowAlloc();
              v29[0] = v22;
              *(_DWORD *)unint64_t v21 = 136315138;
              swift_bridgeObjectRetain();
              *(void *)&long long v30 = sub_25B288E98((uint64_t)v27, v28, v29);
              sub_25B2909C0();
              swift_bridgeObjectRelease_n();
              _os_log_impl(&dword_25B107000, v6, v20, "Failed to capture bug for reason: %s", v21, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x261160890](v22, -1, -1);
              char v23 = v21;
              goto LABEL_41;
            }
          }
          else
          {
            sub_25B254744((uint64_t)&v30);
          }
          if (qword_26A4DA050 != -1) {
            swift_once();
          }
          uint64_t v24 = sub_25B290190();
          __swift_project_value_buffer(v24, (uint64_t)qword_26A4EB220);
          uint64_t v6 = sub_25B290160();
          os_log_type_t v7 = sub_25B290860();
          if (!os_log_type_enabled(v6, v7)) {
            goto LABEL_42;
          }
          int64_t v8 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)int64_t v8 = 0;
          unint64_t v9 = "Failed to capture bug for unknown reason";
        }
        _os_log_impl(&dword_25B107000, v6, v7, v9, v8, 2u);
        char v23 = v8;
LABEL_41:
        MEMORY[0x261160890](v23, -1, -1);
LABEL_42:

LABEL_43:
        return;
      }
    }
    else
    {
      sub_25B254744((uint64_t)&v30);
    }
    if (qword_26A4DA050 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_25B290190();
    __swift_project_value_buffer(v13, (uint64_t)qword_26A4EB220);
    uint64_t v4 = sub_25B290160();
    os_log_type_t v14 = sub_25B290880();
    if (os_log_type_enabled(v4, v14))
    {
      int64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int64_t v15 = 0;
      _os_log_impl(&dword_25B107000, v4, v14, "Received malformed response", v15, 2u);
      MEMORY[0x261160890](v15, -1, -1);
    }
    goto LABEL_43;
  }
  if (qword_26A4DA050 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_25B290190();
  __swift_project_value_buffer(v10, (uint64_t)qword_26A4EB220);
  oslog = sub_25B290160();
  os_log_type_t v11 = sub_25B290880();
  if (os_log_type_enabled(oslog, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl(&dword_25B107000, oslog, v11, "Failed to receive response", v12, 2u);
    MEMORY[0x261160890](v12, -1, -1);
  }
}

uint64_t sub_25B256804(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void (**)(uint64_t))(a1 + 32);
  if (a2) {
    uint64_t v3 = sub_25B2904D0();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_retain();
  v2(v3);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B256894()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BugCapture()
{
  return self;
}

uint64_t sub_25B2568C8()
{
  id v0 = objc_msgSend(self, sel_processInfo);
  id v1 = objc_msgSend(v0, sel_environment);

  uint64_t v2 = sub_25B2904D0();
  if (*(void *)(v2 + 16) && (sub_25B18A634(0xD000000000000010, 0x800000025B29E500), (v3 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

void sub_25B2569B0(uint64_t a1, unint64_t a2, uint64_t a3, id a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  uint64_t v56 = a7;
  uint64_t v15 = sub_25B290000();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  char v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_25B2568C8() & 1) == 0)
  {
    uint64_t v52 = v16;
    uint64_t v53 = v15;
    uint64_t v55 = a5;
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08AB0]), sel_init);
    id v57 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F7C080]), sel_init);
    os_log_type_t v20 = (void *)sub_25B290590();
    uint64_t v50 = a1;
    unint64_t v54 = a2;
    unint64_t v21 = (void *)sub_25B290590();
    uint64_t v51 = a3;
    uint64_t v22 = (void *)sub_25B290590();
    id v23 = objc_msgSend(v19, sel_processName);
    if (!v23)
    {
      sub_25B2905C0();
      id v49 = a4;
      id v23 = (id)sub_25B290590();
      a4 = v49;
      swift_bridgeObjectRelease();
    }
    id v24 = objc_msgSend(v57, sel_signatureWithDomain_type_subType_detectedProcess_triggerThresholdValues_, v20, v21, v22, v23, 0);

    if (v24)
    {
      id v49 = v24;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9D68);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_25B293280;
      *(void *)(inited + 32) = sub_25B2905C0();
      *(void *)(inited + 40) = v26;
      sub_25B28FFF0();
      sub_25B28FFB0();
      double v28 = v27;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v18, v53);
      id v29 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v28);
      *(void *)(inited + 72) = sub_25B257194();
      *(void *)(inited + 48) = v29;
      *(void *)(inited + 80) = sub_25B2905C0();
      *(void *)(inited + 88) = v30;
      uint64_t v31 = MEMORY[0x263F8D310];
      *(void *)(inited + 120) = MEMORY[0x263F8D310];
      uint64_t v32 = v55;
      *(void *)(inited + 96) = v55;
      *(void *)(inited + 104) = a6;
      *(void *)(inited + 128) = sub_25B2905C0();
      *(void *)(inited + 136) = v33;
      *(void *)(inited + 168) = v31;
      *(void *)(inited + 144) = v56;
      *(void *)(inited + 152) = a8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v34 = sub_25B20DE70(inited);
      if (qword_26A4DA050 != -1) {
        swift_once();
      }
      uint64_t v35 = sub_25B290190();
      __swift_project_value_buffer(v35, (uint64_t)qword_26A4EB220);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v36 = v54;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v37 = sub_25B290160();
      os_log_type_t v38 = sub_25B2908A0();
      BOOL v39 = os_log_type_enabled(v37, v38);
      id v48 = v19;
      uint64_t v53 = v34;
      if (v39)
      {
        unint64_t v40 = (unint64_t)a4;
        uint64_t v41 = swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        aBlock[0] = v52;
        *(_DWORD *)uint64_t v41 = 136315906;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_25B288E98(v50, v36, aBlock);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v41 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_25B288E98(v51, v40, aBlock);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v41 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_25B288E98(v32, a6, aBlock);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v41 + 32) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v58 = sub_25B288E98(v56, a8, aBlock);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25B107000, v37, v38, "Capturing bug report with type %s; subtype: %s; name: %s; value: %s",
          (uint8_t *)v41,
          0x2Au);
        uint64_t v42 = v52;
        swift_arrayDestroy();
        MEMORY[0x261160890](v42, -1, -1);
        MEMORY[0x261160890](v41, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      aBlock[0] = 0;
      id v44 = v49;
      sub_25B2904C0();
      if (aBlock[0])
      {

        int v45 = (void *)sub_25B2904B0();
        swift_bridgeObjectRelease();
        sub_25B255E6C(v53);
        swift_bridgeObjectRelease();
        uint64_t v46 = (void *)sub_25B2904B0();
        swift_bridgeObjectRelease();
        aBlock[4] = (uint64_t)sub_25B256234;
        void aBlock[5] = 0;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_25B256804;
        aBlock[3] = (uint64_t)&block_descriptor_15;
        uint64_t v47 = _Block_copy(aBlock);
        objc_msgSend(v57, sel_snapshotWithSignature_duration_event_payload_reply_, v45, v46, 0, v47, 120.0);

        _Block_release(v47);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {

      id v43 = v57;
    }
  }
}

unint64_t sub_25B257194()
{
  unint64_t result = qword_26A4DB4B8;
  if (!qword_26A4DB4B8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26A4DB4B8);
  }
  return result;
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t PairingRelationshipFilter.rawValue.getter()
{
  return *(void *)v0;
}

ReplicatorEngine::PairingRelationshipFilter __swiftcall PairingRelationshipFilter.init(rawValue:)(ReplicatorEngine::PairingRelationshipFilter rawValue)
{
  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void static PairingRelationshipFilter.compatibleRelationships.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t PairingRelationshipProviding.pairingRelationship(relationshipID:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
  MEMORY[0x270FA5388](v6 - 8);
  int64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B290080();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B290010();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_25B1DA620((uint64_t)v8);
    uint64_t v13 = type metadata accessor for PairingRelationship();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a3, 1, 1, v13);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    (*(void (**)(char *, uint64_t, uint64_t))(a2 + 32))(v12, a1, a2);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
}

unint64_t sub_25B257404()
{
  unint64_t result = qword_26A4DB4C0;
  if (!qword_26A4DB4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB4C0);
  }
  return result;
}

unint64_t sub_25B25745C()
{
  unint64_t result = qword_26A4DB4C8;
  if (!qword_26A4DB4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB4C8);
  }
  return result;
}

unint64_t sub_25B2574B4()
{
  unint64_t result = qword_26A4DB4D0;
  if (!qword_26A4DB4D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB4D0);
  }
  return result;
}

unint64_t sub_25B25750C()
{
  unint64_t result = qword_26A4DB4D8;
  if (!qword_26A4DB4D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB4D8);
  }
  return result;
}

uint64_t dispatch thunk of ReplicatorRetryTimer.start(queue:handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of ReplicatorRetryTimer.cancel()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ReplicatorRetryTimer.reset()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for PairingRelationshipFilter()
{
  return &type metadata for PairingRelationshipFilter;
}

uint64_t dispatch thunk of PairingRelationshipProviding.pairingRelationshipPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PairingRelationshipProviding.forgottenRelationshipPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PairingRelationshipProviding.pairingRelationships(filter:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of PairingRelationshipProviding.pairingRelationship(relationshipID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of PairingRelationshipProviding.pairingRelationship(remoteDeviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of PairingRelationshipProviding.resolveProtocolVersion(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PairingRelationshipProviding.unavailable(relationshipID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of MessageTypeManaging.set(messageTypes:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of AllowListManaging.isAllowListEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of AllowListManaging.isAllowListEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of AllowListManaging.isAllowListEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of AllowListManaging.allowList.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of AllowListManaging.allowList.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of AllowListManaging.allowList.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of PairingRelationshipManaging.pair(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of PairingRelationshipManaging.pair(with:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t dispatch thunk of PairingRelationshipManaging.unpair(remoteDeviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of PairingRelationshipManaging.removePairingRelationship(remoteDeviceID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of PairingRelationshipManaging.readvertiseIfNecessary()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of StuckPairedRelationshipRepairing.retryStuckRemotePairings()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Replicating.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Replicating.isEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of Replicating.isEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of Replicating.deviceType.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of Replicating.localDeviceIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of Replicating.localDeviceDescriptor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of Replicating.add(recordStubs:destination:schedule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 56))();
}

uint64_t dispatch thunk of Replicating.delete(recordIDs:schedule:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t dispatch thunk of Replicating.set(dataSource:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 72))();
}

uint64_t dispatch thunk of Replicating.set(clientID:enabled:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 80))();
}

uint64_t dispatch thunk of Replicating.sync()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of Replicating.metadata(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t dispatch thunk of Replicating.clientDefinedID(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of Replicating.zoneIDs(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 120))();
}

uint64_t dispatch thunk of Replicating.start()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 128))();
}

uint64_t dispatch thunk of Replicating.validateRecords()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 136))();
}

uint64_t dispatch thunk of Replicating.stateCaptureTitle.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 144))();
}

uint64_t dispatch thunk of Replicating.captureState(identifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 152))();
}

uint64_t sub_25B257914(void *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB9B8);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B270104();
  sub_25B291290();
  v9[1] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB9A8);
  sub_25B270234();
  sub_25B290D60();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_25B257A64(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB800);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E4EC();
  sub_25B291290();
  LOBYTE(v19) = 0;
  sub_25B290080();
  sub_25B25E8D4((unint64_t *)&unk_26A4D9210, MEMORY[0x263F07508]);
  sub_25B290D60();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Request(0);
    long long v31 = *(_OWORD *)(v3 + v9[5]);
    char v30 = 1;
    sub_25B26E594();
    sub_25B290D60();
    uint64_t v10 = (long long *)(v3 + v9[6]);
    long long v11 = v10[9];
    long long v27 = v10[8];
    long long v28 = v11;
    long long v29 = v10[10];
    long long v12 = v10[5];
    long long v23 = v10[4];
    long long v24 = v12;
    long long v13 = v10[7];
    long long v25 = v10[6];
    long long v26 = v13;
    long long v14 = v10[1];
    long long v19 = *v10;
    long long v20 = v14;
    long long v15 = v10[3];
    long long v21 = v10[2];
    long long v22 = v15;
    char v18 = 2;
    sub_25B1CBD28();
    sub_25B290D60();
    *(void *)&long long v19 = *(void *)(v3 + v9[7]);
    char v18 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9A68);
    sub_25B1BC6D8();
    sub_25B290D60();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_25B257D1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v27 = sub_25B290080();
  uint64_t v26 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB7E8);
  uint64_t v25 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Request(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E4EC();
  id v43 = v7;
  sub_25B291280();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  long long v23 = a1;
  uint64_t v11 = v26;
  LOBYTE(v32) = 0;
  sub_25B25E8D4(&qword_26A4D9228, MEMORY[0x263F07508]);
  uint64_t v12 = v27;
  uint64_t v13 = v28;
  sub_25B290CC0();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v10, v5, v12);
  LOBYTE(v30) = 1;
  sub_25B26E540();
  sub_25B290CC0();
  *(_OWORD *)&v10[v8[5]] = v32;
  char v31 = 2;
  sub_25B1CB9F4();
  sub_25B290CC0();
  long long v14 = &v10[v8[6]];
  long long v15 = v39;
  long long v16 = v41;
  long long v17 = v42;
  *((_OWORD *)v14 + 8) = v40;
  *((_OWORD *)v14 + 9) = v16;
  *((_OWORD *)v14 + 10) = v17;
  long long v18 = v37;
  *((_OWORD *)v14 + 4) = v36;
  *((_OWORD *)v14 + 5) = v18;
  *((_OWORD *)v14 + 6) = v38;
  *((_OWORD *)v14 + 7) = v15;
  long long v19 = v33;
  *(_OWORD *)long long v14 = v32;
  *((_OWORD *)v14 + 1) = v19;
  long long v20 = v35;
  *((_OWORD *)v14 + 2) = v34;
  *((_OWORD *)v14 + 3) = v20;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9A68);
  char v29 = 3;
  sub_25B1BC5EC();
  sub_25B290CC0();
  (*(void (**)(char *, uint64_t))(v25 + 8))(v43, v13);
  *(void *)&v10[v8[7]] = v30;
  sub_25B25E790((uint64_t)v10, v24, type metadata accessor for ReplicatorMessage.Handshake.Request);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  return sub_25B25E91C((uint64_t)v10, type metadata accessor for ReplicatorMessage.Handshake.Request);
}

uint64_t sub_25B25827C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB828);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E5E8();
  sub_25B291290();
  LOBYTE(v19) = 0;
  sub_25B290080();
  sub_25B25E8D4((unint64_t *)&unk_26A4D9210, MEMORY[0x263F07508]);
  sub_25B290D60();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
    long long v31 = *(_OWORD *)(v3 + v9[5]);
    char v30 = 1;
    sub_25B26E594();
    sub_25B290D60();
    uint64_t v10 = (long long *)(v3 + v9[6]);
    long long v11 = v10[9];
    long long v27 = v10[8];
    long long v28 = v11;
    long long v29 = v10[10];
    long long v12 = v10[5];
    long long v23 = v10[4];
    long long v24 = v12;
    long long v13 = v10[7];
    long long v25 = v10[6];
    long long v26 = v13;
    long long v14 = v10[1];
    long long v19 = *v10;
    long long v20 = v14;
    long long v15 = v10[3];
    long long v21 = v10[2];
    long long v22 = v15;
    char v18 = 2;
    sub_25B1CBD28();
    sub_25B290D60();
    *(void *)&long long v19 = *(void *)(v3 + v9[7]);
    char v18 = 3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9A68);
    sub_25B1BC6D8();
    sub_25B290D60();
    *(void *)&long long v19 = *(void *)(v3 + v9[8]);
    char v18 = 4;
    sub_25B26E690();
    sub_25B290D60();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_25B258580@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v4 = sub_25B290080();
  uint64_t v25 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  long long v26 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB810);
  uint64_t v24 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E5E8();
  long long v42 = v7;
  sub_25B291280();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v11 = v25;
  long long v22 = a1;
  LOBYTE(v31) = 0;
  sub_25B25E8D4(&qword_26A4D9228, MEMORY[0x263F07508]);
  long long v12 = v26;
  sub_25B290CC0();
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v10, v12, v4);
  LOBYTE(v29) = 1;
  sub_25B26E540();
  sub_25B290CC0();
  *(_OWORD *)&v10[v8[5]] = v31;
  char v30 = 2;
  sub_25B1CB9F4();
  sub_25B290CC0();
  long long v13 = &v10[v8[6]];
  long long v14 = v38;
  long long v15 = v40;
  long long v16 = v41;
  *((_OWORD *)v13 + 8) = v39;
  *((_OWORD *)v13 + 9) = v15;
  *((_OWORD *)v13 + 10) = v16;
  long long v17 = v36;
  *((_OWORD *)v13 + 4) = v35;
  *((_OWORD *)v13 + 5) = v17;
  *((_OWORD *)v13 + 6) = v37;
  *((_OWORD *)v13 + 7) = v14;
  long long v18 = v32;
  *(_OWORD *)long long v13 = v31;
  *((_OWORD *)v13 + 1) = v18;
  long long v19 = v34;
  *((_OWORD *)v13 + 2) = v33;
  *((_OWORD *)v13 + 3) = v19;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9A68);
  char v28 = 3;
  sub_25B1BC5EC();
  sub_25B290CC0();
  *(void *)&v10[v8[7]] = v29;
  char v28 = 4;
  sub_25B26E63C();
  sub_25B290CC0();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v42, v27);
  *(void *)&v10[v8[8]] = v29;
  sub_25B25E790((uint64_t)v10, v23, type metadata accessor for ReplicatorMessage.Handshake.Response);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  return sub_25B25E91C((uint64_t)v10, type metadata accessor for ReplicatorMessage.Handshake.Response);
}

uint64_t sub_25B258BB0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB850);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E6E4();
  sub_25B291290();
  LOBYTE(v13) = 0;
  sub_25B290080();
  sub_25B25E8D4((unint64_t *)&unk_26A4D9210, MEMORY[0x263F07508]);
  sub_25B290D60();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
    long long v13 = *(_OWORD *)(v3 + v9[5]);
    char v12 = 1;
    sub_25B26E594();
    sub_25B290D60();
    *(void *)&long long v13 = *(void *)(v3 + v9[6]);
    char v12 = 2;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9AF0);
    sub_25B26E738(&qword_26A4DB858);
    sub_25B290D60();
    *(void *)&long long v13 = *(void *)(v3 + v9[7]);
    char v12 = 3;
    sub_25B26E690();
    sub_25B290D60();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_25B258E38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v4 = sub_25B290080();
  uint64_t v20 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v21 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB838);
  uint64_t v19 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E6E4();
  uint64_t v23 = v7;
  sub_25B291280();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  long long v17 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v20;
  LOBYTE(v24) = 0;
  sub_25B25E8D4(&qword_26A4D9228, MEMORY[0x263F07508]);
  long long v13 = v21;
  uint64_t v14 = v22;
  sub_25B290CC0();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v13, v4);
  char v25 = 1;
  sub_25B26E540();
  sub_25B290CC0();
  *(_OWORD *)(v11 + v8[5]) = v24;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9AF0);
  char v25 = 2;
  sub_25B26E738(&qword_26A4DB848);
  sub_25B290CC0();
  *(void *)(v11 + v8[6]) = v24;
  char v25 = 3;
  sub_25B26E63C();
  sub_25B290CC0();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v14);
  *(void *)(v11 + v8[7]) = v24;
  sub_25B25E790(v11, v18, type metadata accessor for ReplicatorMessage.Handshake.Complete);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return sub_25B25E91C(v11, type metadata accessor for ReplicatorMessage.Handshake.Complete);
}

uint64_t sub_25B2592F0(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB7B0);
  uint64_t v39 = *(void *)(v2 - 8);
  uint64_t v40 = v2;
  MEMORY[0x270FA5388](v2);
  long long v38 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
  MEMORY[0x270FA5388](v36);
  long long v37 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB7B8);
  uint64_t v34 = *(void *)(v5 - 8);
  uint64_t v35 = v5;
  MEMORY[0x270FA5388](v5);
  long long v33 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for ReplicatorMessage.Handshake.Response(0);
  MEMORY[0x270FA5388](v31);
  long long v32 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB7C0);
  uint64_t v29 = *(void *)(v8 - 8);
  uint64_t v30 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ReplicatorMessage.Handshake.Request(0);
  MEMORY[0x270FA5388](v11);
  long long v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for ReplicatorMessage.Handshake(0);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB7C8);
  uint64_t v42 = *(void *)(v17 - 8);
  uint64_t v43 = v17;
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E348();
  sub_25B291290();
  sub_25B25E790(v41, (uint64_t)v16, type metadata accessor for ReplicatorMessage.Handshake);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      long long v13 = v32;
      sub_25B25E818((uint64_t)v16, (uint64_t)v32, type metadata accessor for ReplicatorMessage.Handshake.Response);
      char v45 = 1;
      sub_25B26E3F0();
      uint64_t v21 = v33;
      uint64_t v22 = v43;
      sub_25B290D10();
      sub_25B25E8D4(&qword_26A4DB7D8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Handshake.Response);
      uint64_t v23 = v35;
      sub_25B290D60();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v21, v23);
      long long v24 = type metadata accessor for ReplicatorMessage.Handshake.Response;
    }
    else
    {
      long long v13 = v37;
      sub_25B25E818((uint64_t)v16, (uint64_t)v37, type metadata accessor for ReplicatorMessage.Handshake.Complete);
      char v46 = 2;
      sub_25B26E39C();
      long long v26 = v38;
      uint64_t v22 = v43;
      sub_25B290D10();
      sub_25B25E8D4(&qword_26A4DB7D0, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Handshake.Complete);
      uint64_t v27 = v40;
      sub_25B290D60();
      (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v27);
      long long v24 = type metadata accessor for ReplicatorMessage.Handshake.Complete;
    }
  }
  else
  {
    sub_25B25E818((uint64_t)v16, (uint64_t)v13, type metadata accessor for ReplicatorMessage.Handshake.Request);
    char v44 = 0;
    sub_25B26E444();
    uint64_t v22 = v43;
    sub_25B290D10();
    sub_25B25E8D4(&qword_26A4DB7E0, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Handshake.Request);
    uint64_t v25 = v30;
    sub_25B290D60();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v25);
    long long v24 = type metadata accessor for ReplicatorMessage.Handshake.Request;
  }
  sub_25B25E91C((uint64_t)v13, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v19, v22);
}

uint64_t sub_25B259998@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB748);
  uint64_t v58 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v64 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB750);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v56 = v4;
  uint64_t v57 = v5;
  MEMORY[0x270FA5388](v4);
  int64_t v63 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB758);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v61 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB760);
  uint64_t v60 = *(void *)(v62 - 8);
  MEMORY[0x270FA5388](v62);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ReplicatorMessage.Handshake(0);
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v49 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v49 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v49 - v22;
  uint64_t v24 = a1[3];
  long long v65 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v24);
  sub_25B26E348();
  uint64_t v25 = v66;
  sub_25B291280();
  if (v25) {
    goto LABEL_9;
  }
  uint64_t v50 = v18;
  uint64_t v51 = v15;
  uint64_t v66 = v21;
  long long v26 = v61;
  uint64_t v27 = v62;
  char v28 = v63;
  uint64_t v29 = v64;
  uint64_t v52 = v23;
  uint64_t v30 = sub_25B290CF0();
  uint64_t v31 = v30;
  uint64_t v32 = v27;
  if (*(void *)(v30 + 16) != 1)
  {
    uint64_t v38 = sub_25B290AF0();
    swift_allocError();
    uint64_t v39 = v11;
    uint64_t v41 = v40;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    uint64_t *v41 = v12;
    sub_25B290C50();
    sub_25B290AD0();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v38 - 8) + 104))(v41, *MEMORY[0x263F8DCB0], v38);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v27);
LABEL_9:
    uint64_t v36 = (uint64_t)v65;
    return __swift_destroy_boxed_opaque_existential_1(v36);
  }
  if (*(unsigned char *)(v30 + 32))
  {
    if (*(unsigned char *)(v30 + 32) == 1)
    {
      char v68 = 1;
      sub_25B26E3F0();
      long long v33 = v28;
      sub_25B290C40();
      uint64_t v66 = (char *)v12;
      type metadata accessor for ReplicatorMessage.Handshake.Response(0);
      sub_25B25E8D4(&qword_26A4DB788, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Handshake.Response);
      uint64_t v34 = (uint64_t)v50;
      uint64_t v35 = v56;
      sub_25B290CC0();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v33, v35);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v32);
      uint64_t v36 = (uint64_t)v65;
      swift_storeEnumTagMultiPayload();
      uint64_t v37 = v34;
    }
    else
    {
      char v69 = 2;
      sub_25B26E39C();
      sub_25B290C40();
      uint64_t v66 = (char *)v31;
      type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
      sub_25B25E8D4(&qword_26A4DB778, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Handshake.Complete);
      uint64_t v45 = (uint64_t)v51;
      uint64_t v46 = v55;
      sub_25B290CC0();
      uint64_t v47 = v60;
      (*(void (**)(char *, uint64_t))(v58 + 8))(v29, v46);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v27);
      swift_storeEnumTagMultiPayload();
      uint64_t v37 = v45;
      uint64_t v36 = (uint64_t)v65;
    }
  }
  else
  {
    char v67 = 0;
    sub_25B26E444();
    sub_25B290C40();
    type metadata accessor for ReplicatorMessage.Handshake.Request(0);
    sub_25B25E8D4(&qword_26A4DB798, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Handshake.Request);
    uint64_t v42 = v53;
    sub_25B290CC0();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v26, v42);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v27);
    uint64_t v36 = (uint64_t)v65;
    uint64_t v43 = (uint64_t)v66;
    swift_storeEnumTagMultiPayload();
    uint64_t v37 = v43;
  }
  uint64_t v48 = (uint64_t)v52;
  sub_25B25E818(v37, (uint64_t)v52, type metadata accessor for ReplicatorMessage.Handshake);
  sub_25B25E818(v48, v59, type metadata accessor for ReplicatorMessage.Handshake);
  return __swift_destroy_boxed_opaque_existential_1(v36);
}

uint64_t sub_25B25A1D0(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB870);
  uint64_t v24 = *(void *)(v2 - 8);
  uint64_t v25 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB878);
  uint64_t v26 = *(void *)(v5 - 8);
  uint64_t v27 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for RecordMetadata();
  MEMORY[0x270FA5388](v23);
  uint64_t v29 = (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB880);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E048();
  sub_25B291290();
  sub_25B25E790(v28, (uint64_t)v11, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v11, 1, v16) == 1)
  {
    LOBYTE(v31) = 1;
    sub_25B26E09C();
    sub_25B290D10();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v4, v25);
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  else
  {
    uint64_t v18 = (uint64_t *)&v11[*(int *)(v16 + 48)];
    uint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    sub_25B25E818((uint64_t)v11, v29, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
    LOBYTE(v31) = 0;
    sub_25B26E0F0();
    sub_25B290D10();
    LOBYTE(v31) = 0;
    sub_25B25E8D4(&qword_26A4DA948, (void (*)(uint64_t))type metadata accessor for RecordMetadata);
    uint64_t v21 = v27;
    uint64_t v22 = v30;
    sub_25B290D60();
    if (v22)
    {
      sub_25B10DFF0(v20, v19);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v21);
      sub_25B25E91C(v29, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    else
    {
      uint64_t v31 = v20;
      unint64_t v32 = v19;
      char v33 = 1;
      sub_25B196FCC();
      sub_25B290D60();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v21);
      sub_25B25E91C(v29, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      return sub_25B10DFF0(v20, v19);
    }
  }
}

uint64_t sub_25B25A6E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB6A8);
  uint64_t v34 = *(void *)(v3 - 8);
  uint64_t v35 = v3;
  MEMORY[0x270FA5388](v3);
  uint64_t v39 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB6B0);
  uint64_t v36 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB6B8);
  uint64_t v38 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v32 - v14;
  uint64_t v16 = a1[3];
  uint64_t v40 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v16);
  sub_25B26E048();
  uint64_t v17 = (uint64_t)v41;
  sub_25B291280();
  if (!v17)
  {
    uint64_t v18 = v10;
    unint64_t v32 = v13;
    uint64_t v41 = v15;
    uint64_t v20 = v38;
    unint64_t v19 = v39;
    uint64_t v21 = sub_25B290CF0();
    if (*(void *)(v21 + 16) == 1)
    {
      if (*(unsigned char *)(v21 + 32))
      {
        char v45 = 1;
        sub_25B26E09C();
        sub_25B290C40();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v35);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v7);
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
        uint64_t v23 = (uint64_t)v41;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v41, 1, 1, v22);
      }
      else
      {
        char v44 = 0;
        sub_25B26E0F0();
        uint64_t v28 = v6;
        sub_25B290C40();
        type metadata accessor for RecordMetadata();
        char v43 = 0;
        sub_25B25E8D4(&qword_26A4DA960, (void (*)(uint64_t))type metadata accessor for RecordMetadata);
        uint64_t v30 = (uint64_t)v32;
        uint64_t v29 = v33;
        sub_25B290CC0();
        uint64_t v39 = (char *)__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
        char v42 = 1;
        sub_25B196AB4();
        sub_25B290CC0();
        (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v29);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v7);
        (*(void (**)(uint64_t, void, uint64_t))(*((void *)v39 - 1) + 56))(v30, 0, 1);
        uint64_t v23 = (uint64_t)v41;
        sub_25B25E818(v30, (uint64_t)v41, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
      }
      sub_25B25E818(v23, v37, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
    }
    else
    {
      uint64_t v24 = sub_25B290AF0();
      swift_allocError();
      uint64_t v25 = v7;
      uint64_t v27 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
      uint64_t *v27 = v18;
      sub_25B290C50();
      sub_25B290AD0();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v24 - 8) + 104))(v27, *MEMORY[0x263F8DCB0], v24);
      swift_willThrow();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v25);
    }
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
}

uint64_t sub_25B25AD50()
{
  return 0x655664726F636572;
}

uint64_t sub_25B25AD74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x655664726F636572 && a2 == 0xEE00736E6F697372)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_25B290FB0();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_25B25AE30(uint64_t a1)
{
  unint64_t v2 = sub_25B270104();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25AE6C(uint64_t a1)
{
  unint64_t v2 = sub_25B270104();
  return MEMORY[0x270FA00B8](a1, v2);
}

void *sub_25B25AEA8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_25B26DB20(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_25B25AED4(void *a1)
{
  return sub_25B257914(a1, *v1);
}

unint64_t sub_25B25AEF0()
{
  unint64_t result = 0x496E6F6973736573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x656369766564;
      break;
    case 3:
      unint64_t result = 0x73726556656E6F7ALL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B25AF8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26FAD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25AFB4(uint64_t a1)
{
  unint64_t v2 = sub_25B26E4EC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25AFF0(uint64_t a1)
{
  unint64_t v2 = sub_25B26E4EC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B02C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B257D1C(a1, a2);
}

uint64_t sub_25B25B044(void *a1)
{
  return sub_25B257A64(a1);
}

unint64_t sub_25B25B05C()
{
  unint64_t result = 0x496E6F6973736573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x656369766564;
      break;
    case 3:
      unint64_t result = 0x73726556656E6F7ALL;
      break;
    case 4:
      unint64_t result = 0x614D64726F636572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B25B120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26FEAC(a1, a2);
  *a3 = result;
  return result;
}

void sub_25B25B148(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_25B25B154(uint64_t a1)
{
  unint64_t v2 = sub_25B26E5E8();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B190(uint64_t a1)
{
  unint64_t v2 = sub_25B26E5E8();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B1CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B258580(a1, a2);
}

uint64_t sub_25B25B1E4(void *a1)
{
  return sub_25B25827C(a1);
}

unint64_t sub_25B25B1FC()
{
  unint64_t result = 0x496E6F6973736573;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000011;
      break;
    case 2:
      unint64_t result = 0x686374616D73696DLL;
      break;
    case 3:
      unint64_t result = 0x614D64726F636572;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B25B2AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26FCA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25B2D4(uint64_t a1)
{
  unint64_t v2 = sub_25B26E6E4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B310(uint64_t a1)
{
  unint64_t v2 = sub_25B26E6E4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B34C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B258E38(a1, a2);
}

uint64_t sub_25B25B364(void *a1)
{
  return sub_25B258BB0(a1);
}

uint64_t sub_25B25B37C()
{
  uint64_t v1 = 0x65736E6F70736572;
  if (*v0 != 1) {
    uint64_t v1 = 0x6574656C706D6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x74736575716572;
  }
}

uint64_t sub_25B25B3D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26F97C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25B400(uint64_t a1)
{
  unint64_t v2 = sub_25B26E348();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B43C(uint64_t a1)
{
  unint64_t v2 = sub_25B26E348();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B47C(uint64_t a1)
{
  unint64_t v2 = sub_25B26E39C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B4B8(uint64_t a1)
{
  unint64_t v2 = sub_25B26E39C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B4F4(uint64_t a1)
{
  unint64_t v2 = sub_25B26E444();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B530(uint64_t a1)
{
  unint64_t v2 = sub_25B26E444();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B56C(uint64_t a1)
{
  unint64_t v2 = sub_25B26E3F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B5A8(uint64_t a1)
{
  unint64_t v2 = sub_25B26E3F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B5E4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B259998(a1, a2);
}

uint64_t sub_25B25B5FC(void *a1)
{
  return sub_25B2592F0(a1);
}

uint64_t sub_25B25B614()
{
  if (*v0) {
    return 1701736302;
  }
  else {
    return 1635017060;
  }
}

uint64_t sub_25B25B638@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26DDDC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25B660(uint64_t a1)
{
  unint64_t v2 = sub_25B26E048();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B69C(uint64_t a1)
{
  unint64_t v2 = sub_25B26E048();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B6D8()
{
  if (*v0) {
    return 12639;
  }
  else {
    return 12383;
  }
}

uint64_t sub_25B25B6F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26DEB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25B71C(uint64_t a1)
{
  unint64_t v2 = sub_25B26E0F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B758(uint64_t a1)
{
  unint64_t v2 = sub_25B26E0F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B794(uint64_t a1)
{
  unint64_t v2 = sub_25B26E09C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25B7D0(uint64_t a1)
{
  unint64_t v2 = sub_25B26E09C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25B80C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B25A6E4(a1, a2);
}

uint64_t sub_25B25B824(void *a1)
{
  return sub_25B25A1D0(a1);
}

uint64_t sub_25B25B83C(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB860);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E2F4();
  sub_25B291290();
  v8[15] = 0;
  sub_25B290080();
  sub_25B25E8D4((unint64_t *)&unk_26A4D9210, MEMORY[0x263F07508]);
  sub_25B290D60();
  if (!v1)
  {
    type metadata accessor for ReplicatorMessage.Sync(0);
    v8[14] = 1;
    type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
    sub_25B25E8D4(&qword_26A4DB868, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord);
    sub_25B290D60();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_25B25BA3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v22 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
  MEMORY[0x270FA5388](v22);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_25B290080();
  uint64_t v21 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v23 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB730);
  uint64_t v24 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorMessage.Sync(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E2F4();
  sub_25B291280();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v18 = v9;
  unint64_t v19 = v11;
  uint64_t v12 = v21;
  char v28 = 0;
  sub_25B25E8D4(&qword_26A4D9228, MEMORY[0x263F07508]);
  uint64_t v13 = v23;
  uint64_t v14 = v25;
  sub_25B290CC0();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v13, v14);
  char v27 = 1;
  sub_25B25E8D4(&qword_26A4DB740, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord);
  sub_25B290CC0();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v26);
  uint64_t v15 = (uint64_t)v19;
  sub_25B25E818((uint64_t)v5, (uint64_t)&v19[*(int *)(v18 + 20)], type metadata accessor for ReplicatorMessage.Sync.SyncRecord);
  sub_25B25E790(v15, v20, type metadata accessor for ReplicatorMessage.Sync);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return sub_25B25E91C(v15, type metadata accessor for ReplicatorMessage.Sync);
}

uint64_t sub_25B25BE4C(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB6F8);
  uint64_t v37 = *(void *)(v2 - 8);
  uint64_t v38 = v2;
  MEMORY[0x270FA5388](v2);
  uint64_t v34 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB700);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v33 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for ReplicatorMessage.Sync(0);
  MEMORY[0x270FA5388](v31);
  uint64_t v32 = (uint64_t)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB708);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for ReplicatorMessage.Handshake(0);
  MEMORY[0x270FA5388](v28);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ReplicatorMessage(0);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB710);
  uint64_t v40 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B25E9F0();
  sub_25B291290();
  sub_25B25E790(v39, (uint64_t)v14, type metadata accessor for ReplicatorMessage);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1)
    {
      char v43 = 2;
      sub_25B25EA44();
      uint64_t v25 = v34;
      sub_25B290D10();
      sub_25B26E2A0();
      uint64_t v26 = v38;
      sub_25B290D60();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v25, v26);
      return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v17, v15);
    }
    uint64_t v19 = v32;
    sub_25B25E818((uint64_t)v14, v32, type metadata accessor for ReplicatorMessage.Sync);
    char v42 = 1;
    sub_25B25EAEC();
    uint64_t v20 = v33;
    sub_25B290D10();
    sub_25B25E8D4(&qword_26A4DB720, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync);
    uint64_t v21 = v36;
    sub_25B290D60();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v20, v21);
    uint64_t v22 = type metadata accessor for ReplicatorMessage.Sync;
    uint64_t v23 = v19;
  }
  else
  {
    sub_25B25E818((uint64_t)v14, (uint64_t)v11, type metadata accessor for ReplicatorMessage.Handshake);
    char v41 = 0;
    sub_25B25EB60();
    sub_25B290D10();
    sub_25B25E8D4(&qword_26A4DB728, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Handshake);
    uint64_t v24 = v30;
    sub_25B290D60();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v24);
    uint64_t v22 = type metadata accessor for ReplicatorMessage.Handshake;
    uint64_t v23 = (uint64_t)v11;
  }
  sub_25B25E91C(v23, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v17, v15);
}

uint64_t sub_25B25C440@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB520);
  uint64_t v51 = *(void *)(v46 - 8);
  MEMORY[0x270FA5388](v46);
  uint64_t v57 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB528);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v49 = v4;
  uint64_t v50 = v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v56 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB530);
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v54 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB538);
  uint64_t v53 = *(void *)(v55 - 8);
  MEMORY[0x270FA5388](v55);
  uint64_t v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ReplicatorMessage(0);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)&v42 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)&v42 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v42 - v21;
  uint64_t v23 = a1[3];
  uint64_t v58 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v23);
  sub_25B25E9F0();
  uint64_t v24 = (uint64_t)v59;
  sub_25B291280();
  if (v24) {
    goto LABEL_9;
  }
  char v42 = v14;
  char v43 = v17;
  char v44 = v20;
  uint64_t v45 = v11;
  uint64_t v26 = v56;
  uint64_t v25 = v57;
  uint64_t v59 = v22;
  uint64_t v28 = v54;
  uint64_t v27 = v55;
  uint64_t v29 = sub_25B290CF0();
  if (*(void *)(v29 + 16) != 1)
  {
    uint64_t v33 = v10;
    uint64_t v34 = sub_25B290AF0();
    swift_allocError();
    uint64_t v36 = v35;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F360);
    *uint64_t v36 = v45;
    sub_25B290C50();
    sub_25B290AD0();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v34 - 8) + 104))(v36, *MEMORY[0x263F8DCB0], v34);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v27);
LABEL_9:
    uint64_t v32 = (uint64_t)v58;
    return __swift_destroy_boxed_opaque_existential_1(v32);
  }
  if (*(unsigned char *)(v29 + 32))
  {
    if (*(unsigned char *)(v29 + 32) == 1)
    {
      char v61 = 1;
      sub_25B25EAEC();
      sub_25B290C40();
      type metadata accessor for ReplicatorMessage.Sync(0);
      uint64_t v57 = v10;
      sub_25B25E8D4(&qword_26A4DB560, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync);
      uint64_t v30 = (uint64_t)v43;
      uint64_t v31 = v49;
      sub_25B290CC0();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v26, v31);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v57, v27);
      uint64_t v32 = (uint64_t)v58;
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      uint64_t v56 = (char *)v29;
      char v62 = 2;
      sub_25B25EA44();
      sub_25B290C40();
      sub_25B25EA98();
      uint64_t v39 = v46;
      sub_25B290CC0();
      uint64_t v40 = v53;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v25, v39);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v27);
      uint64_t v30 = (uint64_t)v42;
      swift_storeEnumTagMultiPayload();
      uint64_t v32 = (uint64_t)v58;
    }
  }
  else
  {
    char v60 = 0;
    sub_25B25EB60();
    sub_25B290C40();
    type metadata accessor for ReplicatorMessage.Handshake(0);
    sub_25B25E8D4(&qword_26A4DB570, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Handshake);
    uint64_t v30 = (uint64_t)v44;
    uint64_t v38 = v48;
    sub_25B290CC0();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v38);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v10, v27);
    uint64_t v32 = (uint64_t)v58;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v41 = (uint64_t)v59;
  sub_25B25E818(v30, (uint64_t)v59, type metadata accessor for ReplicatorMessage);
  sub_25B25E818(v41, v52, type metadata accessor for ReplicatorMessage);
  return __swift_destroy_boxed_opaque_existential_1(v32);
}

uint64_t sub_25B25CC18(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB6F0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B25E880();
  sub_25B291290();
  v8[15] = 0;
  type metadata accessor for Record.ID(0);
  sub_25B25E8D4(&qword_26A4DB6E0, (void (*)(uint64_t))type metadata accessor for Record.ID);
  sub_25B290D60();
  if (!v1)
  {
    type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0(0);
    v8[14] = 1;
    type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    sub_25B25E8D4(&qword_26A4DB6E8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
    sub_25B290D60();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_25B25CE18@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v20 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
  MEMORY[0x270FA5388](v20);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Record.ID(0);
  MEMORY[0x270FA5388](v22);
  uint64_t v23 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB4E0);
  uint64_t v21 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B25E880();
  sub_25B291280();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v18 = a1;
  uint64_t v12 = v21;
  uint64_t v13 = (uint64_t)v11;
  char v26 = 0;
  sub_25B25E8D4(&qword_26A4DB4F0, (void (*)(uint64_t))type metadata accessor for Record.ID);
  uint64_t v14 = (uint64_t)v23;
  uint64_t v15 = v24;
  sub_25B290CC0();
  sub_25B25E818(v14, v13, type metadata accessor for Record.ID);
  char v25 = 1;
  sub_25B25E8D4(&qword_26A4DB4F8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
  sub_25B290CC0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v15);
  sub_25B25E818((uint64_t)v5, v13 + *(int *)(v9 + 20), type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
  sub_25B25E790(v13, v19, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  return sub_25B25E91C(v13, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0);
}

uint64_t sub_25B25D1D8()
{
  if (*v0) {
    return 0x64726F636572;
  }
  else {
    return 0x496E6F6973736573;
  }
}

uint64_t sub_25B25D214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26F884(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25D23C(uint64_t a1)
{
  unint64_t v2 = sub_25B26E2F4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25D278(uint64_t a1)
{
  unint64_t v2 = sub_25B26E2F4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25D2B4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B25BA3C(a1, a2);
}

uint64_t sub_25B25D2CC(void *a1)
{
  return sub_25B25B83C(a1);
}

uint64_t sub_25B25D2E4(uint64_t a1)
{
  unint64_t v2 = sub_25B26E498();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25D320(uint64_t a1)
{
  unint64_t v2 = sub_25B26E498();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25D35C(void *a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB7A0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B26E498();
  sub_25B291290();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_25B25D46C(uint64_t a1)
{
  unint64_t v2 = sub_25B25EA44();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25D4A8(uint64_t a1)
{
  unint64_t v2 = sub_25B25EA44();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25D4E4()
{
  uint64_t v1 = 1668184435;
  if (*v0 != 1) {
    uint64_t v1 = 7037793;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6B616873646E6168;
  }
}

uint64_t sub_25B25D534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26DC98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25D55C(uint64_t a1)
{
  unint64_t v2 = sub_25B25E9F0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25D598(uint64_t a1)
{
  unint64_t v2 = sub_25B25E9F0();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25D5D4(uint64_t a1)
{
  unint64_t v2 = sub_25B25EB60();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25D610(uint64_t a1)
{
  unint64_t v2 = sub_25B25EB60();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25D64C(uint64_t a1)
{
  unint64_t v2 = sub_25B25EAEC();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25D688(uint64_t a1)
{
  unint64_t v2 = sub_25B25EAEC();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25D6C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B25C440(a1, a2);
}

uint64_t sub_25B25D6DC(void *a1)
{
  return sub_25B25BE4C(a1);
}

uint64_t sub_25B25D6F4()
{
  if (*v0) {
    return 0x65756C6176;
  }
  else {
    return 25705;
  }
}

uint64_t sub_25B25D720@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26DF74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25D748(uint64_t a1)
{
  unint64_t v2 = sub_25B25E880();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25D784(uint64_t a1)
{
  unint64_t v2 = sub_25B25E880();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25D7C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B25CE18(a1, a2);
}

uint64_t sub_25B25D7D8(void *a1)
{
  return sub_25B25CC18(a1);
}

uint64_t sub_25B25D7F0(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB6D8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B25E97C();
  sub_25B291290();
  v8[15] = 0;
  type metadata accessor for Record.ID(0);
  sub_25B25E8D4(&qword_26A4DB6E0, (void (*)(uint64_t))type metadata accessor for Record.ID);
  sub_25B290D60();
  if (!v1)
  {
    type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8(0);
    v8[14] = 1;
    type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    sub_25B25E8D4(&qword_26A4DB6E8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
    sub_25B290D60();
    v8[13] = 2;
    sub_25B290D30();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_25B25DA28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v26 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
  MEMORY[0x270FA5388](v26);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Record.ID(0);
  MEMORY[0x270FA5388](v5);
  uint64_t v27 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB500);
  uint64_t v25 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = &v12[*(int *)(v10 + 24)];
  *(void *)uint64_t v13 = 0;
  v13[8] = 1;
  uint64_t v14 = a1[3];
  uint64_t v29 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v14);
  sub_25B25E97C();
  uint64_t v15 = v30;
  sub_25B291280();
  if (v15) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  }
  uint64_t v23 = (uint64_t *)v13;
  uint64_t v30 = v9;
  uint64_t v16 = v25;
  char v33 = 0;
  sub_25B25E8D4(&qword_26A4DB4F0, (void (*)(uint64_t))type metadata accessor for Record.ID);
  uint64_t v17 = (uint64_t)v27;
  sub_25B290CC0();
  sub_25B25E818(v17, (uint64_t)v12, type metadata accessor for Record.ID);
  char v32 = 1;
  sub_25B25E8D4(&qword_26A4DB4F8, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
  sub_25B290CC0();
  sub_25B25E818((uint64_t)v4, (uint64_t)&v12[*(int *)(v30 + 20)], type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
  char v31 = 2;
  uint64_t v18 = sub_25B290C90();
  LOBYTE(v17) = v19;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v28);
  uint64_t v21 = v23;
  uint64_t v20 = v24;
  *uint64_t v23 = v18;
  *((unsigned char *)v21 + 8) = v17 & 1;
  sub_25B25E790((uint64_t)v12, v20, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  return sub_25B25E91C((uint64_t)v12, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8);
}

uint64_t sub_25B25DE94()
{
  uint64_t v1 = 0x65756C6176;
  if (*v0 != 1) {
    uint64_t v1 = 0x6C6F636F746F7270;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705;
  }
}

uint64_t sub_25B25DEEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_25B26E144(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_25B25DF14(uint64_t a1)
{
  unint64_t v2 = sub_25B25E97C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B25DF50(uint64_t a1)
{
  unint64_t v2 = sub_25B25E97C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_25B25DF8C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B25DA28(a1, a2);
}

uint64_t sub_25B25DFA4(void *a1)
{
  return sub_25B25D7F0(a1);
}

uint64_t sub_25B25DFBC(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_25B10FF48(a1, (uint64_t)v28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA970);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA978);
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    sub_25B116DE0((uint64_t)v23, &qword_26A4DA980);
LABEL_7:
    uint64_t v10 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8(0);
    uint64_t v29 = v10;
    uint64_t v30 = sub_25B25E8D4(&qword_26A4DB510, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v28);
    sub_25B25E790(v2, (uint64_t)boxed_opaque_existential_1, type metadata accessor for Record.ID);
    uint64_t v12 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
    sub_25B25E790(v2 + *(int *)(v12 + 20), (uint64_t)boxed_opaque_existential_1 + *(int *)(v10 + 20), type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
    uint64_t v13 = v2 + *(int *)(v12 + 24);
    uint64_t v14 = *(void *)v13;
    LOBYTE(v13) = *(unsigned char *)(v13 + 8);
    uint64_t v15 = (char *)boxed_opaque_existential_1 + *(int *)(v10 + 24);
    *(void *)uint64_t v15 = v14;
    v15[8] = v13;
    goto LABEL_10;
  }
  sub_25B180BD4(v23, (uint64_t)v25);
  uint64_t v3 = v26;
  uint64_t v4 = v27;
  __swift_project_boxed_opaque_existential_1(v25, v26);
  unint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  if (v6)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
    goto LABEL_7;
  }
  if (v5 > 7)
  {
    uint64_t v16 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8(0);
    uint64_t v29 = v16;
    uint64_t v30 = sub_25B25E8D4(&qword_26A4DB510, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8);
    uint64_t v17 = __swift_allocate_boxed_opaque_existential_1(v28);
    sub_25B25E790(v2, (uint64_t)v17, type metadata accessor for Record.ID);
    uint64_t v18 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
    sub_25B25E790(v2 + *(int *)(v18 + 20), (uint64_t)v17 + *(int *)(v16 + 20), type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
    uint64_t v19 = v2 + *(int *)(v18 + 24);
    uint64_t v20 = *(void *)v19;
    LOBYTE(v19) = *(unsigned char *)(v19 + 8);
    uint64_t v21 = (char *)v17 + *(int *)(v16 + 24);
    *(void *)uint64_t v21 = v20;
    v21[8] = v19;
  }
  else
  {
    uint64_t v7 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0(0);
    uint64_t v29 = v7;
    uint64_t v30 = sub_25B25E8D4(&qword_26A4DB518, (void (*)(uint64_t))type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0);
    uint64_t v8 = __swift_allocate_boxed_opaque_existential_1(v28);
    sub_25B25E790(v2, (uint64_t)v8, type metadata accessor for Record.ID);
    uint64_t v9 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
    sub_25B25E790(v2 + *(int *)(v9 + 20), (uint64_t)v8 + *(int *)(v7 + 20), type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v25);
LABEL_10:
  __swift_project_boxed_opaque_existential_1(v28, v29);
  sub_25B290520();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
}

uint64_t sub_25B25E328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v31 - v8;
  uint64_t v10 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0(0);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
  uint64_t v13 = a2 + *(int *)(v34 + 24);
  *(void *)uint64_t v13 = 0;
  *(unsigned char *)(v13 + 8) = 1;
  sub_25B10FF48(a1, (uint64_t)v37);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA998);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA9A0);
  if (swift_dynamicCast())
  {
    uint64_t v32 = v4;
    uint64_t v33 = a2;
    sub_25B180BD4(v35, (uint64_t)v38);
    uint64_t v14 = v39;
    uint64_t v15 = v40;
    __swift_project_boxed_opaque_existential_1(v38, v39);
    unint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
    if ((v17 & 1) == 0)
    {
      if (v16 > 7)
      {
        sub_25B10FF48(a1, (uint64_t)v37);
        uint64_t v27 = v41;
        sub_25B25DA28(v37, (uint64_t)v9);
        __swift_destroy_boxed_opaque_existential_1(a1);
        uint64_t v28 = v33;
        if (!v27)
        {
          sub_25B25E790((uint64_t)v9, v33, type metadata accessor for Record.ID);
          uint64_t v29 = v32;
          sub_25B25E790((uint64_t)&v9[*(int *)(v32 + 20)], v28 + *(int *)(v34 + 20), type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
          uint64_t v30 = &v9[*(int *)(v29 + 24)];
          uint64_t v21 = *(void *)v30;
          char v20 = v30[8];
          sub_25B25E91C((uint64_t)v9, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8);
          goto LABEL_12;
        }
      }
      else
      {
        sub_25B10FF48(a1, (uint64_t)v37);
        uint64_t v18 = v41;
        sub_25B25CE18(v37, (uint64_t)v12);
        __swift_destroy_boxed_opaque_existential_1(a1);
        uint64_t v19 = v33;
        if (!v18)
        {
          sub_25B25E818((uint64_t)v12, v33, type metadata accessor for Record.ID);
          sub_25B25E818((uint64_t)&v12[*(int *)(v10 + 20)], v19 + *(int *)(v34 + 20), type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
          char v20 = 0;
          uint64_t v21 = 1;
LABEL_12:
          *(void *)uint64_t v13 = v21;
          *(unsigned char *)(v13 + 8) = v20;
        }
      }
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    uint64_t v4 = v32;
    a2 = v33;
  }
  else
  {
    uint64_t v36 = 0;
    memset(v35, 0, sizeof(v35));
    sub_25B116DE0((uint64_t)v35, &qword_26A4DA9A8);
  }
  sub_25B10FF48(a1, (uint64_t)v38);
  uint64_t v22 = v41;
  sub_25B25DA28(v38, (uint64_t)v7);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1);
  if (!v22)
  {
    sub_25B25E790((uint64_t)v7, a2, type metadata accessor for Record.ID);
    sub_25B25E790((uint64_t)&v7[*(int *)(v4 + 20)], a2 + *(int *)(v34 + 20), type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
    uint64_t v24 = &v7[*(int *)(v4 + 24)];
    uint64_t v25 = *(void *)v24;
    char v26 = v24[8];
    uint64_t result = sub_25B25E91C((uint64_t)v7, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8);
    *(void *)uint64_t v13 = v25;
    *(unsigned char *)(v13 + 8) = v26;
  }
  return result;
}

uint64_t sub_25B25E700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_25B25E328(a1, a2);
}

uint64_t sub_25B25E718(uint64_t a1)
{
  return sub_25B25DFBC(a1);
}

uint64_t type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB5F8);
}

uint64_t type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB5E8);
}

uint64_t type metadata accessor for ReplicatorMessage.Sync.SyncRecord(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB608);
}

uint64_t sub_25B25E790(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB5D8);
}

uint64_t sub_25B25E818(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_25B25E880()
{
  unint64_t result = qword_26A4DB4E8;
  if (!qword_26A4DB4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB4E8);
  }
  return result;
}

uint64_t sub_25B25E8D4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B25E91C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_25B25E97C()
{
  unint64_t result = qword_26A4DB508;
  if (!qword_26A4DB508)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB508);
  }
  return result;
}

uint64_t type metadata accessor for ReplicatorMessage(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB5B8);
}

unint64_t sub_25B25E9F0()
{
  unint64_t result = qword_26A4DB540;
  if (!qword_26A4DB540)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB540);
  }
  return result;
}

unint64_t sub_25B25EA44()
{
  unint64_t result = qword_26A4DB548;
  if (!qword_26A4DB548)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB548);
  }
  return result;
}

unint64_t sub_25B25EA98()
{
  unint64_t result = qword_26A4DB550;
  if (!qword_26A4DB550)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB550);
  }
  return result;
}

unint64_t sub_25B25EAEC()
{
  unint64_t result = qword_26A4DB558;
  if (!qword_26A4DB558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB558);
  }
  return result;
}

uint64_t type metadata accessor for ReplicatorMessage.Sync(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB5C8);
}

unint64_t sub_25B25EB60()
{
  unint64_t result = qword_26A4DB568;
  if (!qword_26A4DB568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB568);
  }
  return result;
}

uint64_t type metadata accessor for ReplicatorMessage.Handshake(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB578);
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Ack()
{
  return &type metadata for ReplicatorMessage.Ack;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.CodingKeys()
{
  return &type metadata for ReplicatorMessage.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.HandshakeCodingKeys()
{
  return &type metadata for ReplicatorMessage.HandshakeCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.SyncCodingKeys()
{
  return &type metadata for ReplicatorMessage.SyncCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.AckCodingKeys()
{
  return &type metadata for ReplicatorMessage.AckCodingKeys;
}

void *sub_25B25EC30(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (void *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v14 = sub_25B290080();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(a1, a2, v14);
      uint64_t v15 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
      uint64_t v16 = v15[5];
      char v17 = (void *)((char *)a1 + v16);
      uint64_t v18 = (void *)((char *)a2 + v16);
      unint64_t v19 = v18[1];
      if (v19 >= 3)
      {
        *char v17 = *v18;
        v17[1] = v19;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)char v17 = *(_OWORD *)v18;
      }
      *(void *)((char *)a1 + v15[6]) = *(void *)((char *)a2 + v15[6]);
      *(void *)((char *)a1 + v15[7]) = *(void *)((char *)a2 + v15[7]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_25B290080();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = type metadata accessor for ReplicatorMessage.Handshake.Response(0);
      uint64_t v9 = *(int *)(v8 + 20);
      uint64_t v10 = (void *)((char *)a1 + v9);
      uint64_t v11 = (void *)((char *)a2 + v9);
      unint64_t v12 = v11[1];
      if (v12 >= 3)
      {
        *uint64_t v10 = *v11;
        v10[1] = v12;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
      }
      uint64_t v51 = v8;
      uint64_t v26 = *(int *)(v8 + 24);
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (void *)((char *)a2 + v26);
      uint64_t v29 = *(void *)((char *)a2 + v26 + 8);
      *(void *)uint64_t v27 = *(void *)((char *)a2 + v26);
      *((void *)v27 + 1) = v29;
      uint64_t v30 = *(void *)((char *)a2 + v26 + 24);
      *((void *)v27 + 2) = *(void *)((char *)a2 + v26 + 16);
      *((void *)v27 + 3) = v30;
      *((_OWORD *)v27 + 2) = *(_OWORD *)((char *)a2 + v26 + 32);
      v27[48] = *((unsigned char *)a2 + v26 + 48);
      *(_OWORD *)(v27 + 56) = *(_OWORD *)((char *)a2 + v26 + 56);
      *(_OWORD *)(v27 + 72) = *(_OWORD *)((char *)a2 + v26 + 72);
      *((_WORD *)v27 + 44) = *(_WORD *)((char *)a2 + v26 + 88);
      uint64_t v31 = *(void *)((char *)a2 + v26 + 104);
      *((void *)v27 + 12) = *(void *)((char *)a2 + v26 + 96);
      *((void *)v27 + 13) = v31;
      uint64_t v32 = (void *)((char *)a2 + v26 + 112);
      unint64_t v33 = *(void *)((char *)a2 + v26 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v33 >> 60 == 15)
      {
        *((_OWORD *)v27 + 7) = *(_OWORD *)v32;
      }
      else
      {
        uint64_t v42 = *v32;
        sub_25B114300(*v32, v33);
        *((void *)v27 + 14) = v42;
        *((void *)v27 + 15) = v33;
      }
      uint64_t v43 = v28[17];
      *((void *)v27 + 16) = v28[16];
      *((void *)v27 + 17) = v43;
      uint64_t v44 = v28[19];
      *((void *)v27 + 18) = v28[18];
      *((void *)v27 + 19) = v44;
      uint64_t v45 = v28[21];
      *((void *)v27 + 20) = v28[20];
      *((void *)v27 + 21) = v45;
      *(void *)((char *)a1 + *(int *)(v51 + 28)) = *(void *)((char *)a2 + *(int *)(v51 + 28));
      *(void *)((char *)a1 + *(int *)(v51 + 32)) = *(void *)((char *)a2 + *(int *)(v51 + 32));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v20 = sub_25B290080();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v20 - 8) + 16))(a1, a2, v20);
      uint64_t v21 = type metadata accessor for ReplicatorMessage.Handshake.Request(0);
      uint64_t v22 = *(int *)(v21 + 20);
      uint64_t v23 = (void *)((char *)a1 + v22);
      uint64_t v24 = (void *)((char *)a2 + v22);
      unint64_t v25 = v24[1];
      if (v25 >= 3)
      {
        *uint64_t v23 = *v24;
        v23[1] = v25;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)uint64_t v23 = *(_OWORD *)v24;
      }
      uint64_t v52 = v21;
      uint64_t v34 = *(int *)(v21 + 24);
      uint64_t v35 = (char *)a1 + v34;
      uint64_t v36 = (void *)((char *)a2 + v34);
      uint64_t v37 = *(void *)((char *)a2 + v34 + 8);
      *(void *)uint64_t v35 = *(void *)((char *)a2 + v34);
      *((void *)v35 + 1) = v37;
      uint64_t v38 = *(void *)((char *)a2 + v34 + 24);
      *((void *)v35 + 2) = *(void *)((char *)a2 + v34 + 16);
      *((void *)v35 + 3) = v38;
      *((_OWORD *)v35 + 2) = *(_OWORD *)((char *)a2 + v34 + 32);
      v35[48] = *((unsigned char *)a2 + v34 + 48);
      *(_OWORD *)(v35 + 56) = *(_OWORD *)((char *)a2 + v34 + 56);
      *(_OWORD *)(v35 + 72) = *(_OWORD *)((char *)a2 + v34 + 72);
      *((_WORD *)v35 + 44) = *(_WORD *)((char *)a2 + v34 + 88);
      uint64_t v39 = *(void *)((char *)a2 + v34 + 104);
      *((void *)v35 + 12) = *(void *)((char *)a2 + v34 + 96);
      *((void *)v35 + 13) = v39;
      uint64_t v40 = (void *)((char *)a2 + v34 + 112);
      unint64_t v41 = *(void *)((char *)a2 + v34 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v41 >> 60 == 15)
      {
        *((_OWORD *)v35 + 7) = *(_OWORD *)v40;
      }
      else
      {
        uint64_t v46 = *v40;
        sub_25B114300(*v40, v41);
        *((void *)v35 + 14) = v46;
        *((void *)v35 + 15) = v41;
      }
      uint64_t v47 = v36[17];
      *((void *)v35 + 16) = v36[16];
      *((void *)v35 + 17) = v47;
      uint64_t v48 = v36[19];
      *((void *)v35 + 18) = v36[18];
      *((void *)v35 + 19) = v48;
      uint64_t v49 = v36[21];
      *((void *)v35 + 20) = v36[20];
      *((void *)v35 + 21) = v49;
      *(void *)((char *)a1 + *(int *)(v52 + 28)) = *(void *)((char *)a2 + *(int *)(v52 + 28));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for ReplicatorMessage.Handshake.Request(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB588);
}

uint64_t type metadata accessor for ReplicatorMessage.Handshake.Response(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB598);
}

uint64_t type metadata accessor for ReplicatorMessage.Handshake.Complete(uint64_t a1)
{
  return sub_25B180000(a1, (uint64_t *)&unk_26A4DB5A8);
}

uint64_t sub_25B25F0F0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    uint64_t v7 = sub_25B290080();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
    if (*(void *)(a1 + *(int *)(type metadata accessor for ReplicatorMessage.Handshake.Complete(0) + 20) + 8) >= 3uLL) {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (result == 1)
    {
      uint64_t v8 = sub_25B290080();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      uint64_t v9 = type metadata accessor for ReplicatorMessage.Handshake.Response(0);
      if (*(void *)(a1 + *(int *)(v9 + 20) + 8) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      uint64_t v10 = a1 + *(int *)(v9 + 24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v11 = *(void *)(v10 + 120);
      if (v11 >> 60 != 15) {
        sub_25B10DFF0(*(void *)(v10 + 112), v11);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    }
    if (result) {
      return result;
    }
    uint64_t v3 = sub_25B290080();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t v4 = type metadata accessor for ReplicatorMessage.Handshake.Request(0);
    if (*(void *)(a1 + *(int *)(v4 + 20) + 8) >= 3uLL) {
      swift_bridgeObjectRelease();
    }
    uint64_t v5 = a1 + *(int *)(v4 + 24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v6 = *(void *)(v5 + 120);
    if (v6 >> 60 != 15) {
      sub_25B10DFF0(*(void *)(v5 + 112), v6);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_17:
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B25F340(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v11 = sub_25B290080();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
    unint64_t v12 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = (void *)(a1 + v13);
    uint64_t v15 = (void *)(a2 + v13);
    unint64_t v16 = v15[1];
    if (v16 >= 3)
    {
      *uint64_t v14 = *v15;
      v14[1] = v16;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    }
    *(void *)(a1 + v12[6]) = *(void *)(a2 + v12[6]);
    *(void *)(a1 + v12[7]) = *(void *)(a2 + v12[7]);
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = sub_25B290080();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      unint64_t v6 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
      uint64_t v7 = v6[5];
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (void *)(a2 + v7);
      unint64_t v10 = v9[1];
      if (v10 >= 3)
      {
        *uint64_t v8 = *v9;
        v8[1] = v10;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
      }
      uint64_t v23 = v6[6];
      uint64_t v24 = a1 + v23;
      unint64_t v25 = (void *)(a2 + v23);
      uint64_t v26 = *(void *)(a2 + v23 + 8);
      *(void *)uint64_t v24 = *(void *)(a2 + v23);
      *(void *)(v24 + 8) = v26;
      uint64_t v27 = *(void *)(a2 + v23 + 24);
      *(void *)(v24 + 16) = *(void *)(a2 + v23 + 16);
      *(void *)(v24 + 24) = v27;
      *(_OWORD *)(v24 + 32) = *(_OWORD *)(a2 + v23 + 32);
      *(unsigned char *)(v24 + 48) = *(unsigned char *)(a2 + v23 + 48);
      *(_OWORD *)(v24 + 56) = *(_OWORD *)(a2 + v23 + 56);
      *(_OWORD *)(v24 + 72) = *(_OWORD *)(a2 + v23 + 72);
      *(_WORD *)(v24 + 88) = *(_WORD *)(a2 + v23 + 88);
      uint64_t v28 = *(void *)(a2 + v23 + 104);
      *(void *)(v24 + 96) = *(void *)(a2 + v23 + 96);
      *(void *)(v24 + 104) = v28;
      uint64_t v29 = (uint64_t *)(a2 + v23 + 112);
      unint64_t v30 = *(void *)(a2 + v23 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)(v24 + 112) = *(_OWORD *)v29;
      }
      else
      {
        uint64_t v39 = *v29;
        sub_25B114300(*v29, v30);
        *(void *)(v24 + 112) = v39;
        *(void *)(v24 + 120) = v30;
      }
      uint64_t v40 = v25[17];
      *(void *)(v24 + 128) = v25[16];
      *(void *)(v24 + 136) = v40;
      uint64_t v41 = v25[19];
      *(void *)(v24 + 144) = v25[18];
      *(void *)(v24 + 152) = v41;
      uint64_t v42 = v25[21];
      *(void *)(v24 + 160) = v25[20];
      *(void *)(v24 + 168) = v42;
      *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
      *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v17 = sub_25B290080();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16))(a1, a2, v17);
      uint64_t v18 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Request(0);
      uint64_t v19 = v18[5];
      uint64_t v20 = (void *)(a1 + v19);
      uint64_t v21 = (void *)(a2 + v19);
      unint64_t v22 = v21[1];
      if (v22 >= 3)
      {
        *uint64_t v20 = *v21;
        v20[1] = v22;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
      }
      uint64_t v31 = v18[6];
      uint64_t v32 = a1 + v31;
      unint64_t v33 = (void *)(a2 + v31);
      uint64_t v34 = *(void *)(a2 + v31 + 8);
      *(void *)uint64_t v32 = *(void *)(a2 + v31);
      *(void *)(v32 + 8) = v34;
      uint64_t v35 = *(void *)(a2 + v31 + 24);
      *(void *)(v32 + 16) = *(void *)(a2 + v31 + 16);
      *(void *)(v32 + 24) = v35;
      *(_OWORD *)(v32 + 32) = *(_OWORD *)(a2 + v31 + 32);
      *(unsigned char *)(v32 + 48) = *(unsigned char *)(a2 + v31 + 48);
      *(_OWORD *)(v32 + 56) = *(_OWORD *)(a2 + v31 + 56);
      *(_OWORD *)(v32 + 72) = *(_OWORD *)(a2 + v31 + 72);
      *(_WORD *)(v32 + 88) = *(_WORD *)(a2 + v31 + 88);
      uint64_t v36 = *(void *)(a2 + v31 + 104);
      *(void *)(v32 + 96) = *(void *)(a2 + v31 + 96);
      *(void *)(v32 + 104) = v36;
      uint64_t v37 = (uint64_t *)(a2 + v31 + 112);
      unint64_t v38 = *(void *)(a2 + v31 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v38 >> 60 == 15)
      {
        *(_OWORD *)(v32 + 112) = *(_OWORD *)v37;
      }
      else
      {
        uint64_t v43 = *v37;
        sub_25B114300(*v37, v38);
        *(void *)(v32 + 112) = v43;
        *(void *)(v32 + 120) = v38;
      }
      uint64_t v44 = v33[17];
      *(void *)(v32 + 128) = v33[16];
      *(void *)(v32 + 136) = v44;
      uint64_t v45 = v33[19];
      *(void *)(v32 + 144) = v33[18];
      *(void *)(v32 + 152) = v45;
      uint64_t v46 = v33[21];
      *(void *)(v32 + 160) = v33[20];
      *(void *)(v32 + 168) = v46;
      *(void *)(a1 + v18[7]) = *(void *)(a2 + v18[7]);
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_25B25F718(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_25B25E91C(a1, type metadata accessor for ReplicatorMessage.Handshake);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = sub_25B290080();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
      uint64_t v11 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
      uint64_t v12 = v11[5];
      uint64_t v13 = (void *)(a1 + v12);
      uint64_t v14 = (void *)(a2 + v12);
      if (v14[1] >= 3uLL)
      {
        void *v13 = *v14;
        v13[1] = v14[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
      }
      *(void *)(a1 + v11[6]) = *(void *)(a2 + v11[6]);
      *(void *)(a1 + v11[7]) = *(void *)(a2 + v11[7]);
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = sub_25B290080();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        unint64_t v6 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
        uint64_t v7 = v6[5];
        uint64_t v8 = (void *)(a1 + v7);
        uint64_t v9 = (void *)(a2 + v7);
        if (v9[1] >= 3uLL)
        {
          *uint64_t v8 = *v9;
          v8[1] = v9[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
        }
        uint64_t v20 = v6[6];
        uint64_t v21 = a1 + v20;
        unint64_t v22 = (void *)(a2 + v20);
        *(void *)uint64_t v21 = *(void *)(a2 + v20);
        *(void *)(v21 + 8) = *(void *)(a2 + v20 + 8);
        *(void *)(v21 + 16) = *(void *)(a2 + v20 + 16);
        *(void *)(v21 + 24) = *(void *)(a2 + v20 + 24);
        *(_OWORD *)(v21 + 32) = *(_OWORD *)(a2 + v20 + 32);
        *(unsigned char *)(v21 + 48) = *(unsigned char *)(a2 + v20 + 48);
        long long v23 = *(_OWORD *)(a2 + v20 + 56);
        long long v24 = *(_OWORD *)(a2 + v20 + 72);
        *(_WORD *)(v21 + 88) = *(_WORD *)(a2 + v20 + 88);
        *(_OWORD *)(v21 + 72) = v24;
        *(_OWORD *)(v21 + 56) = v23;
        *(void *)(v21 + 96) = *(void *)(a2 + v20 + 96);
        *(void *)(v21 + 104) = *(void *)(a2 + v20 + 104);
        unint64_t v25 = (uint64_t *)(a2 + v20 + 112);
        unint64_t v26 = *(void *)(a2 + v20 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v26 >> 60 == 15)
        {
          *(_OWORD *)(v21 + 112) = *(_OWORD *)v25;
        }
        else
        {
          uint64_t v34 = *v25;
          sub_25B114300(*v25, v26);
          *(void *)(v21 + 112) = v34;
          *(void *)(v21 + 120) = v26;
        }
        *(void *)(v21 + 128) = v22[16];
        *(void *)(v21 + 136) = v22[17];
        *(void *)(v21 + 144) = v22[18];
        *(void *)(v21 + 152) = v22[19];
        *(void *)(v21 + 160) = v22[20];
        *(void *)(v21 + 168) = v22[21];
        *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
        *(void *)(a1 + v6[8]) = *(void *)(a2 + v6[8]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v15 = sub_25B290080();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(a1, a2, v15);
        unint64_t v16 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Request(0);
        uint64_t v17 = v16[5];
        uint64_t v18 = (void *)(a1 + v17);
        uint64_t v19 = (void *)(a2 + v17);
        if (v19[1] >= 3uLL)
        {
          *uint64_t v18 = *v19;
          v18[1] = v19[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
        }
        uint64_t v27 = v16[6];
        uint64_t v28 = a1 + v27;
        uint64_t v29 = (void *)(a2 + v27);
        *(void *)uint64_t v28 = *(void *)(a2 + v27);
        *(void *)(v28 + 8) = *(void *)(a2 + v27 + 8);
        *(void *)(v28 + 16) = *(void *)(a2 + v27 + 16);
        *(void *)(v28 + 24) = *(void *)(a2 + v27 + 24);
        *(_OWORD *)(v28 + 32) = *(_OWORD *)(a2 + v27 + 32);
        *(unsigned char *)(v28 + 48) = *(unsigned char *)(a2 + v27 + 48);
        long long v30 = *(_OWORD *)(a2 + v27 + 56);
        long long v31 = *(_OWORD *)(a2 + v27 + 72);
        *(_WORD *)(v28 + 88) = *(_WORD *)(a2 + v27 + 88);
        *(_OWORD *)(v28 + 72) = v31;
        *(_OWORD *)(v28 + 56) = v30;
        *(void *)(v28 + 96) = *(void *)(a2 + v27 + 96);
        *(void *)(v28 + 104) = *(void *)(a2 + v27 + 104);
        uint64_t v32 = (uint64_t *)(a2 + v27 + 112);
        unint64_t v33 = *(void *)(a2 + v27 + 120);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v33 >> 60 == 15)
        {
          *(_OWORD *)(v28 + 112) = *(_OWORD *)v32;
        }
        else
        {
          uint64_t v35 = *v32;
          sub_25B114300(*v32, v33);
          *(void *)(v28 + 112) = v35;
          *(void *)(v28 + 120) = v33;
        }
        *(void *)(v28 + 128) = v29[16];
        *(void *)(v28 + 136) = v29[17];
        *(void *)(v28 + 144) = v29[18];
        *(void *)(v28 + 152) = v29[19];
        *(void *)(v28 + 160) = v29[20];
        *(void *)(v28 + 168) = v29[21];
        *(void *)(a1 + v16[7]) = *(void *)(a2 + v16[7]);
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25B25FB8C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v17 = sub_25B290080();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(a1, a2, v17);
    uint64_t v18 = type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
    *(_OWORD *)(a1 + *(int *)(v18 + 20)) = *(_OWORD *)(a2 + *(int *)(v18 + 20));
    *(void *)(a1 + *(int *)(v18 + 24)) = *(void *)(a2 + *(int *)(v18 + 24));
LABEL_6:
    unint64_t v16 = (int *)(v18 + 28);
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v19 = sub_25B290080();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(a1, a2, v19);
    uint64_t v18 = type metadata accessor for ReplicatorMessage.Handshake.Request(0);
    *(_OWORD *)(a1 + *(int *)(v18 + 20)) = *(_OWORD *)(a2 + *(int *)(v18 + 20));
    uint64_t v20 = *(int *)(v18 + 24);
    uint64_t v21 = (_OWORD *)(a1 + v20);
    unint64_t v22 = (_OWORD *)(a2 + v20);
    long long v23 = v22[9];
    v21[8] = v22[8];
    v21[9] = v23;
    v21[10] = v22[10];
    long long v24 = v22[5];
    v21[4] = v22[4];
    v21[5] = v24;
    long long v25 = v22[7];
    v21[6] = v22[6];
    v21[7] = v25;
    long long v26 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v26;
    long long v27 = v22[3];
    void v21[2] = v22[2];
    v21[3] = v27;
    goto LABEL_6;
  }
  uint64_t v5 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  unint64_t v6 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
  *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
  uint64_t v7 = v6[6];
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[5];
  v8[4] = v9[4];
  v8[5] = v11;
  long long v12 = v9[3];
  v8[2] = v9[2];
  v8[3] = v12;
  long long v13 = v9[10];
  long long v14 = v9[8];
  v8[9] = v9[9];
  v8[10] = v13;
  long long v15 = v9[7];
  v8[6] = v9[6];
  v8[7] = v15;
  v8[8] = v14;
  *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
  unint64_t v16 = v6 + 8;
LABEL_7:
  *(void *)(a1 + *v16) = *(void *)(a2 + *v16);
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_25B25FD8C(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_25B25E91C(a1, type metadata accessor for ReplicatorMessage.Handshake);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v17 = sub_25B290080();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32))(a1, a2, v17);
      uint64_t v18 = type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
      *(_OWORD *)(a1 + *(int *)(v18 + 20)) = *(_OWORD *)(a2 + *(int *)(v18 + 20));
      *(void *)(a1 + *(int *)(v18 + 24)) = *(void *)(a2 + *(int *)(v18 + 24));
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v5 = sub_25B290080();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
        unint64_t v6 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
        *(_OWORD *)(a1 + v6[5]) = *(_OWORD *)(a2 + v6[5]);
        uint64_t v7 = v6[6];
        uint64_t v8 = (_OWORD *)(a1 + v7);
        uint64_t v9 = (_OWORD *)(a2 + v7);
        long long v10 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v10;
        long long v11 = v9[5];
        v8[4] = v9[4];
        v8[5] = v11;
        long long v12 = v9[3];
        v8[2] = v9[2];
        v8[3] = v12;
        long long v13 = v9[10];
        long long v14 = v9[8];
        v8[9] = v9[9];
        v8[10] = v13;
        long long v15 = v9[7];
        v8[6] = v9[6];
        v8[7] = v15;
        v8[8] = v14;
        *(void *)(a1 + v6[7]) = *(void *)(a2 + v6[7]);
        unint64_t v16 = v6 + 8;
LABEL_8:
        *(void *)(a1 + *v16) = *(void *)(a2 + *v16);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v19 = sub_25B290080();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 32))(a1, a2, v19);
      uint64_t v18 = type metadata accessor for ReplicatorMessage.Handshake.Request(0);
      *(_OWORD *)(a1 + *(int *)(v18 + 20)) = *(_OWORD *)(a2 + *(int *)(v18 + 20));
      uint64_t v20 = *(int *)(v18 + 24);
      uint64_t v21 = (_OWORD *)(a1 + v20);
      unint64_t v22 = (_OWORD *)(a2 + v20);
      long long v23 = v22[9];
      v21[8] = v22[8];
      v21[9] = v23;
      v21[10] = v22[10];
      long long v24 = v22[5];
      v21[4] = v22[4];
      v21[5] = v24;
      long long v25 = v22[7];
      v21[6] = v22[6];
      v21[7] = v25;
      long long v26 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v26;
      long long v27 = v22[3];
      void v21[2] = v22[2];
      v21[3] = v27;
    }
    unint64_t v16 = (int *)(v18 + 28);
    goto LABEL_8;
  }
  return a1;
}

uint64_t sub_25B25FFBC()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_25B25FFCC()
{
  uint64_t result = type metadata accessor for ReplicatorMessage.Handshake.Request(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ReplicatorMessage.Handshake.Response(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ReplicatorMessage.Handshake.Complete(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

void *sub_25B2600CC(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B290080();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    long long v10 = (void *)((char *)a2 + v8);
    unint64_t v11 = v10[1];
    if (v11 >= 3)
    {
      *uint64_t v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    uint64_t v13 = a3[6];
    long long v14 = (char *)a1 + v13;
    long long v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = *(void *)((char *)a2 + v13 + 8);
    *(void *)long long v14 = *(void *)((char *)a2 + v13);
    *((void *)v14 + 1) = v16;
    uint64_t v17 = *(void *)((char *)a2 + v13 + 24);
    *((void *)v14 + 2) = *(void *)((char *)a2 + v13 + 16);
    *((void *)v14 + 3) = v17;
    *((_OWORD *)v14 + 2) = *(_OWORD *)((char *)a2 + v13 + 32);
    v14[48] = *((unsigned char *)a2 + v13 + 48);
    *(_OWORD *)(v14 + 56) = *(_OWORD *)((char *)a2 + v13 + 56);
    *(_OWORD *)(v14 + 72) = *(_OWORD *)((char *)a2 + v13 + 72);
    *((_WORD *)v14 + 44) = *(_WORD *)((char *)a2 + v13 + 88);
    uint64_t v18 = *(void *)((char *)a2 + v13 + 104);
    *((void *)v14 + 12) = *(void *)((char *)a2 + v13 + 96);
    *((void *)v14 + 13) = v18;
    uint64_t v19 = (void *)((char *)a2 + v13 + 112);
    unint64_t v20 = *(void *)((char *)a2 + v13 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *((_OWORD *)v14 + 7) = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v21 = *v19;
      sub_25B114300(*v19, v20);
      *((void *)v14 + 14) = v21;
      *((void *)v14 + 15) = v20;
    }
    uint64_t v22 = v15[17];
    *((void *)v14 + 16) = v15[16];
    *((void *)v14 + 17) = v22;
    uint64_t v23 = v15[19];
    *((void *)v14 + 18) = v15[18];
    *((void *)v14 + 19) = v23;
    uint64_t v24 = v15[21];
    *((void *)v14 + 20) = v15[20];
    *((void *)v14 + 21) = v24;
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_25B2602B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  if (*(void *)(a1 + *(int *)(a2 + 20) + 8) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(v5 + 120);
  if (v6 >> 60 != 15) {
    sub_25B10DFF0(*(void *)(v5 + 112), v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B2603A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >= 3)
  {
    *uint64_t v8 = *v9;
    v8[1] = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = *(void *)(a2 + v11 + 8);
  *(void *)uint64_t v12 = *(void *)(a2 + v11);
  *(void *)(v12 + 8) = v14;
  uint64_t v15 = *(void *)(a2 + v11 + 24);
  *(void *)(v12 + 16) = *(void *)(a2 + v11 + 16);
  *(void *)(v12 + 24) = v15;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a2 + v11 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(a2 + v11 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a2 + v11 + 56);
  *(_OWORD *)(v12 + 72) = *(_OWORD *)(a2 + v11 + 72);
  *(_WORD *)(v12 + 88) = *(_WORD *)(a2 + v11 + 88);
  uint64_t v16 = *(void *)(a2 + v11 + 104);
  *(void *)(v12 + 96) = *(void *)(a2 + v11 + 96);
  *(void *)(v12 + 104) = v16;
  uint64_t v17 = (uint64_t *)(a2 + v11 + 112);
  unint64_t v18 = *(void *)(a2 + v11 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(v12 + 112) = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *v17;
    sub_25B114300(*v17, v18);
    *(void *)(v12 + 112) = v19;
    *(void *)(v12 + 120) = v18;
  }
  uint64_t v20 = v13[17];
  *(void *)(v12 + 128) = v13[16];
  *(void *)(v12 + 136) = v20;
  uint64_t v21 = v13[19];
  *(void *)(v12 + 144) = v13[18];
  *(void *)(v12 + 152) = v21;
  uint64_t v22 = v13[21];
  *(void *)(v12 + 160) = v13[20];
  *(void *)(v12 + 168) = v22;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_25B260538(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  unint64_t v11 = *(void *)(a2 + v7 + 8);
  if (v10 < 3)
  {
    if (v11 >= 3)
    {
      *uint64_t v8 = *v9;
      v8[1] = v9[1];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v11 < 3)
  {
    sub_25B116DE0((uint64_t)v8, &qword_26A4DADC0);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)(a2 + v12);
  *(void *)(v13 + 8) = *(void *)(a2 + v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  long long v15 = *(_OWORD *)(v14 + 56);
  long long v16 = *(_OWORD *)(v14 + 72);
  *(_WORD *)(v13 + 88) = *(_WORD *)(v14 + 88);
  *(_OWORD *)(v13 + 72) = v16;
  *(_OWORD *)(v13 + 56) = v15;
  *(void *)(v13 + 96) = *(void *)(v14 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 104) = *(void *)(v14 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t *)(v14 + 112);
  unint64_t v18 = *(void *)(v14 + 120);
  if (*(void *)(v13 + 120) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      sub_25B114300(*v17, *(void *)(v14 + 120));
      uint64_t v21 = *(void *)(v13 + 112);
      unint64_t v22 = *(void *)(v13 + 120);
      *(void *)(v13 + 112) = v20;
      *(void *)(v13 + 120) = v18;
      sub_25B10DFF0(v21, v22);
      goto LABEL_15;
    }
    sub_25B1973E4(v13 + 112);
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(v13 + 112) = *(_OWORD *)v17;
    goto LABEL_15;
  }
  uint64_t v19 = *v17;
  sub_25B114300(*v17, *(void *)(v14 + 120));
  *(void *)(v13 + 112) = v19;
  *(void *)(v13 + 120) = v18;
LABEL_15:
  *(void *)(v13 + 128) = *(void *)(v14 + 128);
  *(void *)(v13 + 136) = *(void *)(v14 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 144) = *(void *)(v14 + 144);
  *(void *)(v13 + 152) = *(void *)(v14 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 160) = *(void *)(v14 + 160);
  *(void *)(v13 + 168) = *(void *)(v14 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25B2607D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[5];
  v8[4] = v9[4];
  v8[5] = v11;
  long long v12 = v9[3];
  v8[2] = v9[2];
  v8[3] = v12;
  long long v13 = v9[10];
  long long v14 = v9[8];
  v8[9] = v9[9];
  v8[10] = v13;
  long long v15 = v9[7];
  v8[6] = v9[6];
  v8[7] = v15;
  v8[8] = v14;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_25B260898(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  if (*(void *)(a1 + v7 + 8) < 3uLL) {
    goto LABEL_4;
  }
  unint64_t v10 = *(void *)(v9 + 8);
  if (v10 < 3)
  {
    sub_25B116DE0(v8, &qword_26A4DADC0);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = *(void *)(a2 + v11 + 8);
  *(void *)uint64_t v12 = *(void *)(a2 + v11);
  *(void *)(v12 + 8) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v13 + 24);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(void *)(v12 + 24) = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_OWORD *)(v12 + 72) = *(_OWORD *)(v13 + 72);
  *(_WORD *)(v12 + 88) = *(_WORD *)(v13 + 88);
  *(void *)(v12 + 96) = *(void *)(v13 + 96);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 104) = *(void *)(v13 + 104);
  swift_bridgeObjectRelease();
  long long v16 = (void *)(v13 + 112);
  unint64_t v17 = *(void *)(v12 + 120);
  if (v17 >> 60 != 15)
  {
    unint64_t v18 = *(void *)(v13 + 120);
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *(void *)(v12 + 112);
      *(void *)(v12 + 112) = *v16;
      *(void *)(v12 + 120) = v18;
      sub_25B10DFF0(v19, v17);
      goto LABEL_11;
    }
    sub_25B1973E4(v12 + 112);
  }
  *(_OWORD *)(v12 + 112) = *(_OWORD *)v16;
LABEL_11:
  uint64_t v20 = *(void *)(v13 + 136);
  *(void *)(v12 + 128) = *(void *)(v13 + 128);
  *(void *)(v12 + 136) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v13 + 152);
  *(void *)(v12 + 144) = *(void *)(v13 + 144);
  *(void *)(v12 + 152) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v13 + 168);
  *(void *)(v12 + 160) = *(void *)(v13 + 160);
  *(void *)(v12 + 168) = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25B260A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_indexTm);
}

uint64_t sub_25B260A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_indexTm);
}

uint64_t sub_25B260A98()
{
  return sub_25B261DCC();
}

void *sub_25B260AA4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B290080();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (void *)((char *)a1 + v8);
    unint64_t v10 = (void *)((char *)a2 + v8);
    unint64_t v11 = v10[1];
    if (v11 >= 3)
    {
      *uint64_t v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (void *)((char *)a2 + v13);
    uint64_t v16 = *(void *)((char *)a2 + v13 + 8);
    *(void *)uint64_t v14 = *(void *)((char *)a2 + v13);
    *((void *)v14 + 1) = v16;
    uint64_t v17 = *(void *)((char *)a2 + v13 + 24);
    *((void *)v14 + 2) = *(void *)((char *)a2 + v13 + 16);
    *((void *)v14 + 3) = v17;
    *((_OWORD *)v14 + 2) = *(_OWORD *)((char *)a2 + v13 + 32);
    v14[48] = *((unsigned char *)a2 + v13 + 48);
    *(_OWORD *)(v14 + 56) = *(_OWORD *)((char *)a2 + v13 + 56);
    *(_OWORD *)(v14 + 72) = *(_OWORD *)((char *)a2 + v13 + 72);
    *((_WORD *)v14 + 44) = *(_WORD *)((char *)a2 + v13 + 88);
    uint64_t v18 = *(void *)((char *)a2 + v13 + 104);
    *((void *)v14 + 12) = *(void *)((char *)a2 + v13 + 96);
    *((void *)v14 + 13) = v18;
    uint64_t v19 = (void *)((char *)a2 + v13 + 112);
    unint64_t v20 = *(void *)((char *)a2 + v13 + 120);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v20 >> 60 == 15)
    {
      *((_OWORD *)v14 + 7) = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v21 = *v19;
      sub_25B114300(*v19, v20);
      *((void *)v14 + 14) = v21;
      *((void *)v14 + 15) = v20;
    }
    uint64_t v22 = v15[17];
    *((void *)v14 + 16) = v15[16];
    *((void *)v14 + 17) = v22;
    uint64_t v23 = v15[19];
    *((void *)v14 + 18) = v15[18];
    *((void *)v14 + 19) = v23;
    uint64_t v24 = v15[21];
    *((void *)v14 + 20) = v15[20];
    *((void *)v14 + 21) = v24;
    uint64_t v25 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_25B260C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  if (*(void *)(a1 + *(int *)(a2 + 20) + 8) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v6 = *(void *)(v5 + 120);
  if (v6 >> 60 != 15) {
    sub_25B10DFF0(*(void *)(v5 + 112), v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B260D94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >= 3)
  {
    *uint64_t v8 = *v9;
    v8[1] = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = *(void *)(a2 + v11 + 8);
  *(void *)uint64_t v12 = *(void *)(a2 + v11);
  *(void *)(v12 + 8) = v14;
  uint64_t v15 = *(void *)(a2 + v11 + 24);
  *(void *)(v12 + 16) = *(void *)(a2 + v11 + 16);
  *(void *)(v12 + 24) = v15;
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(a2 + v11 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(a2 + v11 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(a2 + v11 + 56);
  *(_OWORD *)(v12 + 72) = *(_OWORD *)(a2 + v11 + 72);
  *(_WORD *)(v12 + 88) = *(_WORD *)(a2 + v11 + 88);
  uint64_t v16 = *(void *)(a2 + v11 + 104);
  *(void *)(v12 + 96) = *(void *)(a2 + v11 + 96);
  *(void *)(v12 + 104) = v16;
  uint64_t v17 = (uint64_t *)(a2 + v11 + 112);
  unint64_t v18 = *(void *)(a2 + v11 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v18 >> 60 == 15)
  {
    *(_OWORD *)(v12 + 112) = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *v17;
    sub_25B114300(*v17, v18);
    *(void *)(v12 + 112) = v19;
    *(void *)(v12 + 120) = v18;
  }
  uint64_t v20 = v13[17];
  *(void *)(v12 + 128) = v13[16];
  *(void *)(v12 + 136) = v20;
  uint64_t v21 = v13[19];
  *(void *)(v12 + 144) = v13[18];
  *(void *)(v12 + 152) = v21;
  uint64_t v22 = v13[21];
  *(void *)(v12 + 160) = v13[20];
  *(void *)(v12 + 168) = v22;
  uint64_t v23 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_25B260F3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  unint64_t v11 = *(void *)(a2 + v7 + 8);
  if (v10 < 3)
  {
    if (v11 >= 3)
    {
      *uint64_t v8 = *v9;
      v8[1] = v9[1];
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v11 < 3)
  {
    sub_25B116DE0((uint64_t)v8, &qword_26A4DADC0);
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(void *)uint64_t v13 = *(void *)(a2 + v12);
  *(void *)(v13 + 8) = *(void *)(a2 + v12 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 32) = *(void *)(v14 + 32);
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  *(unsigned char *)(v13 + 48) = *(unsigned char *)(v14 + 48);
  long long v15 = *(_OWORD *)(v14 + 56);
  long long v16 = *(_OWORD *)(v14 + 72);
  *(_WORD *)(v13 + 88) = *(_WORD *)(v14 + 88);
  *(_OWORD *)(v13 + 72) = v16;
  *(_OWORD *)(v13 + 56) = v15;
  *(void *)(v13 + 96) = *(void *)(v14 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 104) = *(void *)(v14 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t *)(v14 + 112);
  unint64_t v18 = *(void *)(v14 + 120);
  if (*(void *)(v13 + 120) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      sub_25B114300(*v17, *(void *)(v14 + 120));
      uint64_t v21 = *(void *)(v13 + 112);
      unint64_t v22 = *(void *)(v13 + 120);
      *(void *)(v13 + 112) = v20;
      *(void *)(v13 + 120) = v18;
      sub_25B10DFF0(v21, v22);
      goto LABEL_15;
    }
    sub_25B1973E4(v13 + 112);
    goto LABEL_13;
  }
  if (v18 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(v13 + 112) = *(_OWORD *)v17;
    goto LABEL_15;
  }
  uint64_t v19 = *v17;
  sub_25B114300(*v17, *(void *)(v14 + 120));
  *(void *)(v13 + 112) = v19;
  *(void *)(v13 + 120) = v18;
LABEL_15:
  *(void *)(v13 + 128) = *(void *)(v14 + 128);
  *(void *)(v13 + 136) = *(void *)(v14 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 144) = *(void *)(v14 + 144);
  *(void *)(v13 + 152) = *(void *)(v14 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v13 + 160) = *(void *)(v14 + 160);
  *(void *)(v13 + 168) = *(void *)(v14 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25B2611F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  uint64_t v8 = (_OWORD *)(a1 + v7);
  uint64_t v9 = (_OWORD *)(a2 + v7);
  long long v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  long long v11 = v9[5];
  v8[4] = v9[4];
  v8[5] = v11;
  long long v12 = v9[3];
  v8[2] = v9[2];
  v8[3] = v12;
  long long v13 = v9[10];
  long long v14 = v9[8];
  v8[9] = v9[9];
  v8[10] = v13;
  long long v15 = v9[7];
  v8[6] = v9[6];
  v8[7] = v15;
  v8[8] = v14;
  uint64_t v16 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v16) = *(void *)(a2 + v16);
  return a1;
}

uint64_t sub_25B2612C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  if (*(void *)(a1 + v7 + 8) < 3uLL) {
    goto LABEL_4;
  }
  unint64_t v10 = *(void *)(v9 + 8);
  if (v10 < 3)
  {
    sub_25B116DE0(v8, &qword_26A4DADC0);
LABEL_4:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_6;
  }
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = *(void *)(a2 + v11 + 8);
  *(void *)uint64_t v12 = *(void *)(a2 + v11);
  *(void *)(v12 + 8) = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v13 + 24);
  *(void *)(v12 + 16) = *(void *)(v13 + 16);
  *(void *)(v12 + 24) = v15;
  swift_bridgeObjectRelease();
  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)(v13 + 48);
  *(_OWORD *)(v12 + 56) = *(_OWORD *)(v13 + 56);
  *(_OWORD *)(v12 + 72) = *(_OWORD *)(v13 + 72);
  *(_WORD *)(v12 + 88) = *(_WORD *)(v13 + 88);
  *(void *)(v12 + 96) = *(void *)(v13 + 96);
  swift_bridgeObjectRelease();
  *(void *)(v12 + 104) = *(void *)(v13 + 104);
  swift_bridgeObjectRelease();
  uint64_t v16 = (void *)(v13 + 112);
  unint64_t v17 = *(void *)(v12 + 120);
  if (v17 >> 60 != 15)
  {
    unint64_t v18 = *(void *)(v13 + 120);
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = *(void *)(v12 + 112);
      *(void *)(v12 + 112) = *v16;
      *(void *)(v12 + 120) = v18;
      sub_25B10DFF0(v19, v17);
      goto LABEL_11;
    }
    sub_25B1973E4(v12 + 112);
  }
  *(_OWORD *)(v12 + 112) = *(_OWORD *)v16;
LABEL_11:
  uint64_t v20 = *(void *)(v13 + 136);
  *(void *)(v12 + 128) = *(void *)(v13 + 128);
  *(void *)(v12 + 136) = v20;
  swift_bridgeObjectRelease();
  uint64_t v21 = *(void *)(v13 + 152);
  *(void *)(v12 + 144) = *(void *)(v13 + 144);
  *(void *)(v12 + 152) = v21;
  swift_bridgeObjectRelease();
  uint64_t v22 = *(void *)(v13 + 168);
  *(void *)(v12 + 160) = *(void *)(v13 + 160);
  *(void *)(v12 + 168) = v22;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25B2614A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B2614B8);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_25B261580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B261594);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_25B290080();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_25B261658()
{
  uint64_t result = sub_25B290080();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_25B261708(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B290080();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    unint64_t v10 = (uint64_t *)((char *)a2 + v8);
    unint64_t v11 = v10[1];
    if (v11 >= 3)
    {
      *uint64_t v9 = *v10;
      v9[1] = v11;
      swift_bridgeObjectRetain();
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    uint64_t v13 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_25B261818(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  if (*(void *)(a1 + *(int *)(a2 + 20) + 8) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B2618B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >= 3)
  {
    *uint64_t v8 = *v9;
    v8[1] = v10;
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v11) = *(void *)(a2 + v11);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_25B261970(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  unint64_t v11 = *(void *)(a2 + v7 + 8);
  if (v10 >= 3)
  {
    if (v11 >= 3)
    {
      *uint64_t v8 = *v9;
      v8[1] = v9[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    sub_25B116DE0((uint64_t)v8, &qword_26A4DADC0);
    goto LABEL_6;
  }
  if (v11 < 3)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
LABEL_8:
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25B261A9C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_25B261B2C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  if (*(void *)(a1 + v7 + 8) >= 3uLL)
  {
    unint64_t v10 = v9[1];
    if (v10 >= 3)
    {
      *uint64_t v8 = *v9;
      v8[1] = v10;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_25B116DE0((uint64_t)v8, &qword_26A4DADC0);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_25B261C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B261C2C);
}

uint64_t sub_25B261C2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_25B261CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B261D00);
}

uint64_t sub_25B261D00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_25B290080();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_25B261DBC()
{
  return sub_25B261DCC();
}

uint64_t sub_25B261DCC()
{
  uint64_t result = sub_25B290080();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V8.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Sync.SyncRecord.Versions.V8.CodingKeys;
}

char *sub_25B261E84(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v16 = sub_25B290080();
      uint64_t v17 = *(void *)(v16 - 8);
      id v107 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
      v107(a1, a2, v16);
      uint64_t v18 = *(int *)(type metadata accessor for ReplicatorMessage.Sync(0) + 20);
      uint64_t v111 = a1;
      uint64_t v19 = &a1[v18];
      uint64_t v20 = &a2[v18];
      uint64_t v21 = *(void *)&a2[v18 + 8];
      *(void *)uint64_t v19 = *(void *)&a2[v18];
      *((void *)v19 + 1) = v21;
      uint64_t v22 = *(void *)&a2[v18 + 24];
      *((void *)v19 + 2) = *(void *)&a2[v18 + 16];
      *((void *)v19 + 3) = v22;
      uint64_t v23 = *(void *)&a2[v18 + 40];
      *((void *)v19 + 4) = *(void *)&a2[v18 + 32];
      *((void *)v19 + 5) = v23;
      uint64_t v104 = type metadata accessor for Record.ID(0);
      uint64_t v24 = *(int *)(v104 + 24);
      unint64_t v112 = v19;
      __dst = &v19[v24];
      unint64_t v113 = v20;
      uint64_t v25 = &v20[v24];
      long long v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v105 = v26;
      uint64_t v106 = v16;
      if (v26(v25, 1, v16))
      {
        uint64_t v27 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(__dst, v25, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        v107(__dst, v25, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
      }
      uint64_t v28 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
      uint64_t v29 = *(int *)(v28 + 20);
      long long v30 = (void *)((char *)v112 + v29);
      long long v31 = v20;
      uint64_t v32 = &v20[v29];
      uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
      uint64_t v34 = *(void *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        uint64_t v35 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
        memcpy(v30, v32, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        uint64_t v102 = v34;
        uint64_t v103 = v33;
        __dsta = (void *)v28;
        uint64_t v36 = *((void *)v32 + 1);
        *long long v30 = *(void *)v32;
        v30[1] = v36;
        uint64_t v37 = *((void *)v32 + 3);
        v30[2] = *((void *)v32 + 2);
        v30[3] = v37;
        uint64_t v38 = *((void *)v32 + 5);
        void v30[4] = *((void *)v32 + 4);
        v30[5] = v38;
        uint64_t v39 = *(int *)(v104 + 24);
        uint64_t v40 = (char *)v30 + v39;
        uint64_t v41 = &v32[v39];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v105(v41, 1, v106))
        {
          uint64_t v42 = type metadata accessor for Record.ID.Ownership(0);
          memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
          uint64_t v43 = v107;
        }
        else
        {
          uint64_t v43 = v107;
          v107(v40, v41, v106);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v40, 0, 1, v106);
        }
        uint64_t v82 = (int *)type metadata accessor for RecordMetadata();
        *(void *)((char *)v30 + v82[5]) = *(void *)&v32[v82[5]];
        uint64_t v83 = v82[6];
        uint64_t v84 = (char *)v30 + v83;
        uint64_t v85 = &v32[v83];
        swift_retain();
        v43(v84, v85, v106);
        *(void *)((char *)v30 + v82[7]) = *(void *)&v32[v82[7]];
        os_log_type_t v108 = v82;
        uint64_t v86 = v82[8];
        os_log_type_t v87 = (char *)v30 + v86;
        os_log_type_t v88 = &v32[v86];
        uint64_t v89 = sub_25B290000();
        uint64_t v90 = *(void *)(v89 - 8);
        uint64_t v91 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
        swift_bridgeObjectRetain();
        if (v91(v88, 1, v89))
        {
          uint64_t v92 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
          memcpy(v87, v88, *(void *)(*(void *)(v92 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v90 + 16))(v87, v88, v89);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v90 + 56))(v87, 0, 1, v89);
        }
        long long v31 = v113;
        *(void *)((char *)v30 + v108[9]) = *(void *)&v32[v108[9]];
        uint64_t v93 = *(int *)(v103 + 48);
        uint64_t v94 = (void *)((char *)v30 + v93);
        uint64_t v95 = (uint64_t *)&v32[v93];
        uint64_t v96 = *v95;
        unint64_t v97 = v95[1];
        sub_25B114300(*v95, v97);
        uint64_t *v94 = v96;
        v94[1] = v97;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v102 + 56))(v30, 0, 1, v103);
        uint64_t v28 = (uint64_t)__dsta;
      }
      uint64_t v98 = *(int *)(v28 + 24);
      uint64_t v99 = (char *)v112 + v98;
      id v100 = &v31[v98];
      *(void *)uint64_t v99 = *(void *)v100;
      v99[8] = v100[8];
      a1 = v111;
LABEL_41:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for ReplicatorMessage.Handshake(0);
      int v8 = swift_getEnumCaseMultiPayload();
      if (v8 == 2)
      {
        uint64_t v44 = sub_25B290080();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 16))(a1, a2, v44);
        uint64_t v45 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
        uint64_t v46 = v45[5];
        uint64_t v47 = &a1[v46];
        uint64_t v48 = &a2[v46];
        unint64_t v49 = *((void *)v48 + 1);
        if (v49 >= 3)
        {
          *(void *)uint64_t v47 = *(void *)v48;
          *((void *)v47 + 1) = v49;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
        }
        *(void *)&a1[v45[6]] = *(void *)&a2[v45[6]];
        *(void *)&a1[v45[7]] = *(void *)&a2[v45[7]];
      }
      else
      {
        if (v8 == 1)
        {
          uint64_t v9 = sub_25B290080();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
          unint64_t v10 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
          uint64_t v11 = v10[5];
          uint64_t v12 = &a1[v11];
          uint64_t v13 = &a2[v11];
          unint64_t v14 = *((void *)v13 + 1);
          if (v14 >= 3)
          {
            *(void *)uint64_t v12 = *(void *)v13;
            *((void *)v12 + 1) = v14;
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
          }
          uint64_t v56 = v10[6];
          uint64_t v57 = a1;
          uint64_t v58 = &a1[v56];
          uint64_t v59 = &a2[v56];
          uint64_t v60 = *(void *)&a2[v56 + 8];
          *(void *)uint64_t v58 = *(void *)&a2[v56];
          *((void *)v58 + 1) = v60;
          uint64_t v61 = *(void *)&a2[v56 + 24];
          *((void *)v58 + 2) = *(void *)&a2[v56 + 16];
          *((void *)v58 + 3) = v61;
          *((_OWORD *)v58 + 2) = *(_OWORD *)&a2[v56 + 32];
          v58[48] = a2[v56 + 48];
          *(_OWORD *)(v58 + 56) = *(_OWORD *)&a2[v56 + 56];
          *(_OWORD *)(v58 + 72) = *(_OWORD *)&a2[v56 + 72];
          *((_WORD *)v58 + 44) = *(_WORD *)&a2[v56 + 88];
          uint64_t v62 = *(void *)&a2[v56 + 104];
          *((void *)v58 + 12) = *(void *)&a2[v56 + 96];
          *((void *)v58 + 13) = v62;
          int64_t v63 = (uint64_t *)&a2[v56 + 112];
          unint64_t v64 = *(void *)&a2[v56 + 120];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v64 >> 60 == 15)
          {
            *((_OWORD *)v58 + 7) = *(_OWORD *)v63;
          }
          else
          {
            uint64_t v74 = *v63;
            sub_25B114300(*v63, v64);
            *((void *)v58 + 14) = v74;
            *((void *)v58 + 15) = v64;
          }
          uint64_t v75 = *((void *)v59 + 17);
          *((void *)v58 + 16) = *((void *)v59 + 16);
          *((void *)v58 + 17) = v75;
          uint64_t v76 = *((void *)v59 + 19);
          *((void *)v58 + 18) = *((void *)v59 + 18);
          *((void *)v58 + 19) = v76;
          uint64_t v77 = *((void *)v59 + 21);
          *((void *)v58 + 20) = *((void *)v59 + 20);
          *((void *)v58 + 21) = v77;
          a1 = v57;
          *(void *)&v57[v10[7]] = *(void *)&a2[v10[7]];
          *(void *)&v57[v10[8]] = *(void *)&a2[v10[8]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v50 = sub_25B290080();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(a1, a2, v50);
          uint64_t v51 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Request(0);
          uint64_t v52 = v51[5];
          uint64_t v53 = &a1[v52];
          uint64_t v54 = &a2[v52];
          unint64_t v55 = *((void *)v54 + 1);
          if (v55 >= 3)
          {
            *(void *)uint64_t v53 = *(void *)v54;
            *((void *)v53 + 1) = v55;
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
          }
          uint64_t v65 = v51[6];
          uint64_t v66 = a1;
          char v67 = &a1[v65];
          char v68 = &a2[v65];
          uint64_t v69 = *(void *)&a2[v65 + 8];
          *(void *)char v67 = *(void *)&a2[v65];
          *((void *)v67 + 1) = v69;
          uint64_t v70 = *(void *)&a2[v65 + 24];
          *((void *)v67 + 2) = *(void *)&a2[v65 + 16];
          *((void *)v67 + 3) = v70;
          *((_OWORD *)v67 + 2) = *(_OWORD *)&a2[v65 + 32];
          v67[48] = a2[v65 + 48];
          *(_OWORD *)(v67 + 56) = *(_OWORD *)&a2[v65 + 56];
          *(_OWORD *)(v67 + 72) = *(_OWORD *)&a2[v65 + 72];
          *((_WORD *)v67 + 44) = *(_WORD *)&a2[v65 + 88];
          uint64_t v71 = *(void *)&a2[v65 + 104];
          *((void *)v67 + 12) = *(void *)&a2[v65 + 96];
          *((void *)v67 + 13) = v71;
          long long v72 = (uint64_t *)&a2[v65 + 112];
          unint64_t v73 = *(void *)&a2[v65 + 120];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v73 >> 60 == 15)
          {
            *((_OWORD *)v67 + 7) = *(_OWORD *)v72;
          }
          else
          {
            uint64_t v78 = *v72;
            sub_25B114300(*v72, v73);
            *((void *)v67 + 14) = v78;
            *((void *)v67 + 15) = v73;
          }
          uint64_t v79 = *((void *)v68 + 17);
          *((void *)v67 + 16) = *((void *)v68 + 16);
          *((void *)v67 + 17) = v79;
          uint64_t v80 = *((void *)v68 + 19);
          *((void *)v67 + 18) = *((void *)v68 + 18);
          *((void *)v67 + 19) = v80;
          uint64_t v81 = *((void *)v68 + 21);
          *((void *)v67 + 20) = *((void *)v68 + 20);
          *((void *)v67 + 21) = v81;
          a1 = v66;
          *(void *)&v66[v51[7]] = *(void *)&a2[v51[7]];
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      goto LABEL_41;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

uint64_t sub_25B2627E0(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 1)
  {
    if (result) {
      return result;
    }
    type metadata accessor for ReplicatorMessage.Handshake(0);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (result == 2)
    {
      uint64_t v24 = sub_25B290080();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(a1, v24);
      if (*(void *)(a1 + *(int *)(type metadata accessor for ReplicatorMessage.Handshake.Complete(0) + 20) + 8) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      if (result == 1)
      {
        uint64_t v25 = sub_25B290080();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 - 8) + 8))(a1, v25);
        uint64_t v26 = type metadata accessor for ReplicatorMessage.Handshake.Response(0);
        if (*(void *)(a1 + *(int *)(v26 + 20) + 8) >= 3uLL) {
          swift_bridgeObjectRelease();
        }
        uint64_t v27 = a1 + *(int *)(v26 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v28 = *(void *)(v27 + 120);
        if (v28 >> 60 != 15) {
          sub_25B10DFF0(*(void *)(v27 + 112), v28);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      if (result) {
        return result;
      }
      uint64_t v3 = sub_25B290080();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      uint64_t v4 = type metadata accessor for ReplicatorMessage.Handshake.Request(0);
      if (*(void *)(a1 + *(int *)(v4 + 20) + 8) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      uint64_t v5 = a1 + *(int *)(v4 + 24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v6 = *(void *)(v5 + 120);
      if (v6 >> 60 != 15) {
        sub_25B10DFF0(*(void *)(v5 + 112), v6);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
LABEL_30:
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = sub_25B290080();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(a1, v7);
  uint64_t v10 = a1 + *(int *)(type metadata accessor for ReplicatorMessage.Sync(0) + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for Record.ID(0);
  uint64_t v12 = v10 + *(int *)(v11 + 24);
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v10 + *(int *)(type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0) + 20);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v14 + *(int *)(v11 + 24);
    if (!v13(v16, 1, v7)) {
      v9(v16, v7);
    }
    uint64_t v17 = type metadata accessor for RecordMetadata();
    swift_release();
    v9(v14 + *(int *)(v17 + 24), v7);
    swift_bridgeObjectRelease();
    uint64_t v18 = v14 + *(int *)(v17 + 32);
    uint64_t v19 = sub_25B290000();
    uint64_t v20 = *(void *)(v19 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19)) {
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    }
    uint64_t v21 = (uint64_t *)(v14 + *(int *)(v15 + 48));
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    return sub_25B10DFF0(v22, v23);
  }
  return result;
}

char *sub_25B262CD0(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v14 = sub_25B290080();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v16(a1, a2, v14);
    uint64_t v17 = *(int *)(type metadata accessor for ReplicatorMessage.Sync(0) + 20);
    uint64_t v18 = &a1[v17];
    uint64_t v19 = &a2[v17];
    uint64_t v20 = *(void *)&a2[v17 + 8];
    *(void *)uint64_t v18 = *(void *)&a2[v17];
    *((void *)v18 + 1) = v20;
    uint64_t v21 = *(void *)&a2[v17 + 24];
    *((void *)v18 + 2) = *(void *)&a2[v17 + 16];
    *((void *)v18 + 3) = v21;
    uint64_t v22 = *(void *)&a2[v17 + 40];
    *((void *)v18 + 4) = *(void *)&a2[v17 + 32];
    *((void *)v18 + 5) = v22;
    uint64_t v100 = type metadata accessor for Record.ID(0);
    uint64_t v23 = *(int *)(v100 + 24);
    BOOL v109 = v18;
    __dst = &v18[v23];
    uint64_t v106 = v19;
    uint64_t v24 = &v19[v23];
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v101 = v25;
    uint64_t v102 = v14;
    if (v25(v24, 1, v14))
    {
      uint64_t v26 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(__dst, v24, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      v16(__dst, v24, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v27 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
    uint64_t v28 = *(int *)(v27 + 20);
    uint64_t v29 = v18;
    long long v30 = &v18[v28];
    long long v31 = &v106[v28];
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      uint64_t v105 = v33;
      uint64_t v98 = v32;
      uint64_t v99 = v27;
      os_log_type_t v108 = a1;
      uint64_t v35 = *((void *)v31 + 1);
      *(void *)long long v30 = *(void *)v31;
      *((void *)v30 + 1) = v35;
      uint64_t v36 = *((void *)v31 + 3);
      *((void *)v30 + 2) = *((void *)v31 + 2);
      *((void *)v30 + 3) = v36;
      uint64_t v37 = *((void *)v31 + 5);
      *((void *)v30 + 4) = *((void *)v31 + 4);
      *((void *)v30 + 5) = v37;
      uint64_t v38 = *(int *)(v100 + 24);
      uint64_t v39 = &v30[v38];
      uint64_t v40 = &v31[v38];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v101(v40, 1, v102))
      {
        uint64_t v41 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
        uint64_t v42 = v16;
      }
      else
      {
        uint64_t v42 = v16;
        v16(v39, v40, v102);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v39, 0, 1, v102);
      }
      uint64_t v79 = (int *)type metadata accessor for RecordMetadata();
      *(void *)&v30[v79[5]] = *(void *)&v31[v79[5]];
      uint64_t v80 = v79[6];
      uint64_t v81 = &v30[v80];
      uint64_t v82 = &v31[v80];
      swift_retain();
      v42(v81, v82, v102);
      *(void *)&v30[v79[7]] = *(void *)&v31[v79[7]];
      uint64_t v83 = v79[8];
      __dsta = &v30[v83];
      uint64_t v84 = &v31[v83];
      uint64_t v85 = sub_25B290000();
      uint64_t v86 = *(void *)(v85 - 8);
      os_log_type_t v87 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
      swift_bridgeObjectRetain();
      if (v87(v84, 1, v85))
      {
        uint64_t v88 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
        memcpy(__dsta, v84, *(void *)(*(void *)(v88 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v86 + 16))(__dsta, v84, v85);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v86 + 56))(__dsta, 0, 1, v85);
      }
      a1 = v108;
      uint64_t v29 = v109;
      *(void *)&v30[v79[9]] = *(void *)&v31[v79[9]];
      uint64_t v89 = *(int *)(v98 + 48);
      uint64_t v90 = (uint64_t *)&v30[v89];
      uint64_t v91 = (uint64_t *)&v31[v89];
      uint64_t v92 = *v91;
      unint64_t v93 = v91[1];
      sub_25B114300(*v91, v93);
      uint64_t *v90 = v92;
      v90[1] = v93;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v105 + 56))(v30, 0, 1, v98);
      uint64_t v27 = v99;
    }
    uint64_t v94 = *(int *)(v27 + 24);
    uint64_t v95 = (char *)v29 + v94;
    uint64_t v96 = &v106[v94];
    *(void *)uint64_t v95 = *(void *)v96;
    v95[8] = v96[8];
LABEL_39:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    type metadata accessor for ReplicatorMessage.Handshake(0);
    int v7 = swift_getEnumCaseMultiPayload();
    if (v7 == 2)
    {
      uint64_t v43 = sub_25B290080();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 16))(a1, a2, v43);
      uint64_t v44 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
      uint64_t v45 = v44[5];
      uint64_t v46 = &a1[v45];
      uint64_t v47 = &a2[v45];
      unint64_t v48 = *((void *)v47 + 1);
      if (v48 >= 3)
      {
        *(void *)uint64_t v46 = *(void *)v47;
        *((void *)v46 + 1) = v48;
        swift_bridgeObjectRetain();
      }
      else
      {
        *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
      }
      *(void *)&a1[v44[6]] = *(void *)&a2[v44[6]];
      *(void *)&a1[v44[7]] = *(void *)&a2[v44[7]];
    }
    else
    {
      id v107 = a1;
      if (v7 == 1)
      {
        uint64_t v8 = sub_25B290080();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
        uint64_t v10 = v9[5];
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        unint64_t v13 = *((void *)v12 + 1);
        if (v13 >= 3)
        {
          *(void *)uint64_t v11 = *(void *)v12;
          *((void *)v11 + 1) = v13;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        }
        uint64_t v55 = v9[6];
        uint64_t v56 = &a1[v55];
        uint64_t v57 = &a2[v55];
        uint64_t v58 = *(void *)&a2[v55 + 8];
        *(void *)uint64_t v56 = *(void *)&a2[v55];
        *((void *)v56 + 1) = v58;
        uint64_t v59 = *(void *)&a2[v55 + 24];
        *((void *)v56 + 2) = *(void *)&a2[v55 + 16];
        *((void *)v56 + 3) = v59;
        *((_OWORD *)v56 + 2) = *(_OWORD *)&a2[v55 + 32];
        v56[48] = a2[v55 + 48];
        *(_OWORD *)(v56 + 56) = *(_OWORD *)&a2[v55 + 56];
        *(_OWORD *)(v56 + 72) = *(_OWORD *)&a2[v55 + 72];
        *((_WORD *)v56 + 44) = *(_WORD *)&a2[v55 + 88];
        uint64_t v60 = *(void *)&a2[v55 + 104];
        *((void *)v56 + 12) = *(void *)&a2[v55 + 96];
        *((void *)v56 + 13) = v60;
        uint64_t v61 = (uint64_t *)&a2[v55 + 112];
        unint64_t v62 = *(void *)&a2[v55 + 120];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v62 >> 60 == 15)
        {
          *((_OWORD *)v56 + 7) = *(_OWORD *)v61;
        }
        else
        {
          uint64_t v71 = *v61;
          sub_25B114300(*v61, v62);
          *((void *)v56 + 14) = v71;
          *((void *)v56 + 15) = v62;
        }
        uint64_t v72 = *((void *)v57 + 17);
        *((void *)v56 + 16) = *((void *)v57 + 16);
        *((void *)v56 + 17) = v72;
        uint64_t v73 = *((void *)v57 + 19);
        *((void *)v56 + 18) = *((void *)v57 + 18);
        *((void *)v56 + 19) = v73;
        uint64_t v74 = *((void *)v57 + 21);
        *((void *)v56 + 20) = *((void *)v57 + 20);
        *((void *)v56 + 21) = v74;
        a1 = v107;
        *(void *)&v107[v9[7]] = *(void *)&a2[v9[7]];
        *(void *)&v107[v9[8]] = *(void *)&a2[v9[8]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v49 = sub_25B290080();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(a1, a2, v49);
        uint64_t v50 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Request(0);
        uint64_t v51 = v50[5];
        uint64_t v52 = &a1[v51];
        uint64_t v53 = &a2[v51];
        unint64_t v54 = *((void *)v53 + 1);
        if (v54 >= 3)
        {
          *(void *)uint64_t v52 = *(void *)v53;
          *((void *)v52 + 1) = v54;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
        }
        uint64_t v63 = v50[6];
        unint64_t v64 = &a1[v63];
        uint64_t v65 = &a2[v63];
        uint64_t v66 = *(void *)&a2[v63 + 8];
        *(void *)unint64_t v64 = *(void *)&a2[v63];
        *((void *)v64 + 1) = v66;
        uint64_t v67 = *(void *)&a2[v63 + 24];
        *((void *)v64 + 2) = *(void *)&a2[v63 + 16];
        *((void *)v64 + 3) = v67;
        *((_OWORD *)v64 + 2) = *(_OWORD *)&a2[v63 + 32];
        v64[48] = a2[v63 + 48];
        *(_OWORD *)(v64 + 56) = *(_OWORD *)&a2[v63 + 56];
        *(_OWORD *)(v64 + 72) = *(_OWORD *)&a2[v63 + 72];
        *((_WORD *)v64 + 44) = *(_WORD *)&a2[v63 + 88];
        uint64_t v68 = *(void *)&a2[v63 + 104];
        *((void *)v64 + 12) = *(void *)&a2[v63 + 96];
        *((void *)v64 + 13) = v68;
        uint64_t v69 = (uint64_t *)&a2[v63 + 112];
        unint64_t v70 = *(void *)&a2[v63 + 120];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v70 >> 60 == 15)
        {
          *((_OWORD *)v64 + 7) = *(_OWORD *)v69;
        }
        else
        {
          uint64_t v75 = *v69;
          sub_25B114300(*v69, v70);
          *((void *)v64 + 14) = v75;
          *((void *)v64 + 15) = v70;
        }
        uint64_t v76 = *((void *)v65 + 17);
        *((void *)v64 + 16) = *((void *)v65 + 16);
        *((void *)v64 + 17) = v76;
        uint64_t v77 = *((void *)v65 + 19);
        *((void *)v64 + 18) = *((void *)v65 + 18);
        *((void *)v64 + 19) = v77;
        uint64_t v78 = *((void *)v65 + 21);
        *((void *)v64 + 20) = *((void *)v65 + 20);
        *((void *)v64 + 21) = v78;
        a1 = v107;
        *(void *)&v107[v50[7]] = *(void *)&a2[v50[7]];
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    goto LABEL_39;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_25B2635D0(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3 = (char *)a1;
  if ((char *)a1 != a2)
  {
    sub_25B25E91C(a1, type metadata accessor for ReplicatorMessage);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = sub_25B290080();
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
      v15(v3, a2, v13);
      uint64_t v16 = *(int *)(type metadata accessor for ReplicatorMessage.Sync(0) + 20);
      uint64_t v92 = v3;
      uint64_t v17 = &v3[v16];
      uint64_t v18 = &a2[v16];
      *(void *)uint64_t v17 = *(void *)&a2[v16];
      *((void *)v17 + 1) = *(void *)&a2[v16 + 8];
      *((void *)v17 + 2) = *(void *)&a2[v16 + 16];
      *((void *)v17 + 3) = *(void *)&a2[v16 + 24];
      *((void *)v17 + 4) = *(void *)&a2[v16 + 32];
      *((void *)v17 + 5) = *(void *)&a2[v16 + 40];
      uint64_t v90 = type metadata accessor for Record.ID(0);
      uint64_t v19 = *(int *)(v90 + 24);
      __dst = &v17[v19];
      uint64_t v95 = v17;
      uint64_t v96 = v18;
      uint64_t v20 = &v18[v19];
      uint64_t v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v91 = v21;
      uint64_t v89 = v15;
      uint64_t v88 = v14;
      if (v21(v20, 1, v13))
      {
        uint64_t v22 = v13;
        uint64_t v23 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(__dst, v20, *(void *)(*(void *)(v23 - 8) + 64));
      }
      else
      {
        v15(__dst, v20, v13);
        uint64_t v22 = v13;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
      }
      uint64_t v24 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
      uint64_t v25 = *(int *)(v24 + 20);
      uint64_t v26 = v17;
      uint64_t v27 = &v17[v25];
      uint64_t v28 = &v96[v25];
      uint64_t v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
      long long v30 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v29 - 8);
      if (((unsigned int (**)(char *, uint64_t, uint64_t))v30)[6](v28, 1, v29))
      {
        uint64_t v31 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
        memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        __dsta = (void (**)(char *, void, uint64_t, uint64_t))v30;
        uint64_t v86 = v29;
        uint64_t v87 = v24;
        *(void *)uint64_t v27 = *(void *)v28;
        *((void *)v27 + 1) = *((void *)v28 + 1);
        *((void *)v27 + 2) = *((void *)v28 + 2);
        *((void *)v27 + 3) = *((void *)v28 + 3);
        *((void *)v27 + 4) = *((void *)v28 + 4);
        *((void *)v27 + 5) = *((void *)v28 + 5);
        uint64_t v32 = *(int *)(v90 + 24);
        uint64_t v33 = &v27[v32];
        uint64_t v34 = &v28[v32];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v91(v34, 1, v22))
        {
          uint64_t v35 = type metadata accessor for Record.ID.Ownership(0);
          memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
          uint64_t v36 = v89;
        }
        else
        {
          uint64_t v63 = v33;
          unint64_t v64 = v33;
          uint64_t v36 = v89;
          v89(v63, v34, v22);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(v64, 0, 1, v22);
        }
        uint64_t v65 = (int *)type metadata accessor for RecordMetadata();
        *(void *)&v27[v65[5]] = *(void *)&v28[v65[5]];
        uint64_t v66 = v65[6];
        uint64_t v67 = &v27[v66];
        uint64_t v68 = &v28[v66];
        swift_retain();
        v36(v67, v68, v22);
        *(void *)&v27[v65[7]] = *(void *)&v28[v65[7]];
        uint64_t v69 = v65[8];
        unint64_t v70 = &v27[v69];
        uint64_t v71 = &v28[v69];
        uint64_t v72 = sub_25B290000();
        uint64_t v73 = *(void *)(v72 - 8);
        uint64_t v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48);
        swift_bridgeObjectRetain();
        if (v74(v71, 1, v72))
        {
          uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
          memcpy(v70, v71, *(void *)(*(void *)(v75 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v70, v71, v72);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v73 + 56))(v70, 0, 1, v72);
        }
        uint64_t v24 = v87;
        uint64_t v26 = v95;
        *(void *)&v27[v65[9]] = *(void *)&v28[v65[9]];
        uint64_t v76 = *(int *)(v86 + 48);
        uint64_t v77 = (uint64_t *)&v27[v76];
        uint64_t v78 = (uint64_t *)&v28[v76];
        uint64_t v79 = *v78;
        unint64_t v80 = v78[1];
        sub_25B114300(*v78, v80);
        *uint64_t v77 = v79;
        v77[1] = v80;
        __dsta[7](v27, 0, 1, v86);
      }
      uint64_t v81 = *(int *)(v24 + 24);
      uint64_t v82 = (char *)v26 + v81;
      uint64_t v83 = &v96[v81];
      uint64_t v84 = *(void *)v83;
      v82[8] = v83[8];
      *(void *)uint64_t v82 = v84;
      uint64_t v3 = v92;
LABEL_40:
      swift_storeEnumTagMultiPayload();
      return v3;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for ReplicatorMessage.Handshake(0);
      int v7 = swift_getEnumCaseMultiPayload();
      if (v7 == 2)
      {
        uint64_t v37 = sub_25B290080();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 16))(v3, a2, v37);
        uint64_t v38 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
        uint64_t v39 = v38[5];
        uint64_t v40 = &v3[v39];
        uint64_t v41 = &a2[v39];
        if (v41[1] >= 3uLL)
        {
          *(void *)uint64_t v40 = *v41;
          *((void *)v40 + 1) = v41[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
        }
        *(void *)&v3[v38[6]] = *(void *)&a2[v38[6]];
        *(void *)&v3[v38[7]] = *(void *)&a2[v38[7]];
      }
      else
      {
        if (v7 == 1)
        {
          uint64_t v8 = sub_25B290080();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v3, a2, v8);
          uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
          uint64_t v10 = v9[5];
          uint64_t v11 = &v3[v10];
          uint64_t v12 = &a2[v10];
          if (v12[1] >= 3uLL)
          {
            *(void *)uint64_t v11 = *v12;
            *((void *)v11 + 1) = v12[1];
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
          }
          uint64_t v47 = v9[6];
          unint64_t v48 = &v3[v47];
          uint64_t v49 = &a2[v47];
          *(void *)unint64_t v48 = *(void *)&a2[v47];
          *((void *)v48 + 1) = *(void *)&a2[v47 + 8];
          *((void *)v48 + 2) = *(void *)&a2[v47 + 16];
          *((void *)v48 + 3) = *(void *)&a2[v47 + 24];
          *((_OWORD *)v48 + 2) = *(_OWORD *)&a2[v47 + 32];
          v48[48] = a2[v47 + 48];
          long long v50 = *(_OWORD *)&a2[v47 + 56];
          long long v51 = *(_OWORD *)&a2[v47 + 72];
          *((_WORD *)v48 + 44) = *(_WORD *)&a2[v47 + 88];
          *(_OWORD *)(v48 + 72) = v51;
          *(_OWORD *)(v48 + 56) = v50;
          *((void *)v48 + 12) = *(void *)&a2[v47 + 96];
          *((void *)v48 + 13) = *(void *)&a2[v47 + 104];
          uint64_t v52 = (uint64_t *)&a2[v47 + 112];
          unint64_t v53 = *(void *)&a2[v47 + 120];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v53 >> 60 == 15)
          {
            *((_OWORD *)v48 + 7) = *(_OWORD *)v52;
          }
          else
          {
            uint64_t v61 = *v52;
            sub_25B114300(*v52, v53);
            *((void *)v48 + 14) = v61;
            *((void *)v48 + 15) = v53;
          }
          *((void *)v48 + 16) = v49[16];
          *((void *)v48 + 17) = v49[17];
          *((void *)v48 + 18) = v49[18];
          *((void *)v48 + 19) = v49[19];
          *((void *)v48 + 20) = v49[20];
          *((void *)v48 + 21) = v49[21];
          *(void *)&v3[v9[7]] = *(void *)&a2[v9[7]];
          *(void *)&v3[v9[8]] = *(void *)&a2[v9[8]];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v42 = sub_25B290080();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 16))(v3, a2, v42);
          uint64_t v43 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Request(0);
          uint64_t v44 = v43[5];
          uint64_t v45 = &v3[v44];
          uint64_t v46 = &a2[v44];
          if (v46[1] >= 3uLL)
          {
            *(void *)uint64_t v45 = *v46;
            *((void *)v45 + 1) = v46[1];
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
          }
          uint64_t v54 = v43[6];
          uint64_t v55 = &v3[v54];
          uint64_t v56 = &a2[v54];
          *(void *)uint64_t v55 = *(void *)&a2[v54];
          *((void *)v55 + 1) = *(void *)&a2[v54 + 8];
          *((void *)v55 + 2) = *(void *)&a2[v54 + 16];
          *((void *)v55 + 3) = *(void *)&a2[v54 + 24];
          *((_OWORD *)v55 + 2) = *(_OWORD *)&a2[v54 + 32];
          v55[48] = a2[v54 + 48];
          long long v57 = *(_OWORD *)&a2[v54 + 56];
          long long v58 = *(_OWORD *)&a2[v54 + 72];
          *((_WORD *)v55 + 44) = *(_WORD *)&a2[v54 + 88];
          *(_OWORD *)(v55 + 72) = v58;
          *(_OWORD *)(v55 + 56) = v57;
          *((void *)v55 + 12) = *(void *)&a2[v54 + 96];
          *((void *)v55 + 13) = *(void *)&a2[v54 + 104];
          uint64_t v59 = (uint64_t *)&a2[v54 + 112];
          unint64_t v60 = *(void *)&a2[v54 + 120];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v60 >> 60 == 15)
          {
            *((_OWORD *)v55 + 7) = *(_OWORD *)v59;
          }
          else
          {
            uint64_t v62 = *v59;
            sub_25B114300(*v59, v60);
            *((void *)v55 + 14) = v62;
            *((void *)v55 + 15) = v60;
          }
          *((void *)v55 + 16) = v56[16];
          *((void *)v55 + 17) = v56[17];
          *((void *)v55 + 18) = v56[18];
          *((void *)v55 + 19) = v56[19];
          *((void *)v55 + 20) = v56[20];
          *((void *)v55 + 21) = v56[21];
          *(void *)&v3[v43[7]] = *(void *)&a2[v43[7]];
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      goto LABEL_40;
    }
    memcpy(v3, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return v3;
}

char *sub_25B263FA4(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v20 = sub_25B290080();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
    v22(a1, a2, v20);
    uint64_t v23 = *(int *)(type metadata accessor for ReplicatorMessage.Sync(0) + 20);
    uint64_t v24 = &a1[v23];
    uint64_t v25 = &a2[v23];
    long long v26 = *(_OWORD *)&a2[v23 + 16];
    *(_OWORD *)uint64_t v24 = *(_OWORD *)&a2[v23];
    *((_OWORD *)v24 + 1) = v26;
    *((_OWORD *)v24 + 2) = *(_OWORD *)&a2[v23 + 32];
    uint64_t v69 = type metadata accessor for Record.ID(0);
    uint64_t v27 = *(int *)(v69 + 24);
    uint64_t v28 = &v24[v27];
    uint64_t v73 = v25;
    uint64_t v29 = &v25[v27];
    unint64_t v70 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
    uint64_t v71 = v22;
    uint64_t v68 = v21;
    if (v70(&v25[v27], 1, v20))
    {
      uint64_t v30 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      v22(v28, v29, v20);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v28, 0, 1, v20);
    }
    uint64_t v72 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
    uint64_t v31 = *(int *)(v72 + 20);
    uint64_t v32 = &v24[v31];
    uint64_t v33 = v25;
    uint64_t v34 = &v25[v31];
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
    uint64_t v36 = *(void *)(v35 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      uint64_t v37 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
      memcpy(v32, v34, *(void *)(*(void *)(v37 - 8) + 64));
    }
    else
    {
      uint64_t v67 = v36;
      long long v38 = *((_OWORD *)v34 + 1);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v34;
      *((_OWORD *)v32 + 1) = v38;
      *((_OWORD *)v32 + 2) = *((_OWORD *)v34 + 2);
      uint64_t v39 = *(int *)(v69 + 24);
      uint64_t v40 = &v32[v39];
      uint64_t v41 = &v34[v39];
      if (v70(&v34[v39], 1, v20))
      {
        uint64_t v42 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
        uint64_t v43 = v71;
      }
      else
      {
        uint64_t v55 = v41;
        uint64_t v43 = v71;
        v71(v40, v55, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v68 + 56))(v40, 0, 1, v20);
      }
      uint64_t v56 = (int *)type metadata accessor for RecordMetadata();
      *(void *)&v32[v56[5]] = *(void *)&v34[v56[5]];
      v43(&v32[v56[6]], &v34[v56[6]], v20);
      *(void *)&v32[v56[7]] = *(void *)&v34[v56[7]];
      uint64_t v57 = v56[8];
      long long v58 = &v32[v57];
      uint64_t v59 = &v34[v57];
      uint64_t v60 = sub_25B290000();
      uint64_t v61 = *(void *)(v60 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
      {
        uint64_t v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
        memcpy(v58, v59, *(void *)(*(void *)(v62 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v58, v59, v60);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      }
      uint64_t v33 = v73;
      *(void *)&v32[v56[9]] = *(void *)&v34[v56[9]];
      *(_OWORD *)&v32[*(int *)(v35 + 48)] = *(_OWORD *)&v34[*(int *)(v35 + 48)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v32, 0, 1, v35);
    }
    uint64_t v63 = *(int *)(v72 + 24);
    unint64_t v64 = &v24[v63];
    uint64_t v65 = &v33[v63];
    *(void *)unint64_t v64 = *(void *)v65;
    v64[8] = v65[8];
    goto LABEL_24;
  }
  if (!EnumCaseMultiPayload)
  {
    type metadata accessor for ReplicatorMessage.Handshake(0);
    int v7 = swift_getEnumCaseMultiPayload();
    if (v7 == 2)
    {
      uint64_t v44 = sub_25B290080();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v44 - 8) + 32))(a1, a2, v44);
      uint64_t v45 = type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
      *(_OWORD *)&a1[*(int *)(v45 + 20)] = *(_OWORD *)&a2[*(int *)(v45 + 20)];
      *(void *)&a1[*(int *)(v45 + 24)] = *(void *)&a2[*(int *)(v45 + 24)];
    }
    else
    {
      if (v7 == 1)
      {
        uint64_t v8 = sub_25B290080();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
        *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
        uint64_t v10 = v9[6];
        uint64_t v11 = &a1[v10];
        uint64_t v12 = &a2[v10];
        long long v13 = *((_OWORD *)v12 + 1);
        *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
        *((_OWORD *)v11 + 1) = v13;
        long long v14 = *((_OWORD *)v12 + 5);
        *((_OWORD *)v11 + 4) = *((_OWORD *)v12 + 4);
        *((_OWORD *)v11 + 5) = v14;
        long long v15 = *((_OWORD *)v12 + 3);
        *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
        *((_OWORD *)v11 + 3) = v15;
        long long v16 = *((_OWORD *)v12 + 10);
        long long v17 = *((_OWORD *)v12 + 8);
        *((_OWORD *)v11 + 9) = *((_OWORD *)v12 + 9);
        *((_OWORD *)v11 + 10) = v16;
        long long v18 = *((_OWORD *)v12 + 7);
        *((_OWORD *)v11 + 6) = *((_OWORD *)v12 + 6);
        *((_OWORD *)v11 + 7) = v18;
        *((_OWORD *)v11 + 8) = v17;
        *(void *)&a1[v9[7]] = *(void *)&a2[v9[7]];
        uint64_t v19 = v9 + 8;
LABEL_17:
        *(void *)&a1[*v19] = *(void *)&a2[*v19];
        swift_storeEnumTagMultiPayload();
LABEL_24:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v46 = sub_25B290080();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(a1, a2, v46);
      uint64_t v45 = type metadata accessor for ReplicatorMessage.Handshake.Request(0);
      *(_OWORD *)&a1[*(int *)(v45 + 20)] = *(_OWORD *)&a2[*(int *)(v45 + 20)];
      uint64_t v47 = *(int *)(v45 + 24);
      unint64_t v48 = &a1[v47];
      uint64_t v49 = &a2[v47];
      long long v50 = *((_OWORD *)v49 + 9);
      *((_OWORD *)v48 + 8) = *((_OWORD *)v49 + 8);
      *((_OWORD *)v48 + 9) = v50;
      *((_OWORD *)v48 + 10) = *((_OWORD *)v49 + 10);
      long long v51 = *((_OWORD *)v49 + 5);
      *((_OWORD *)v48 + 4) = *((_OWORD *)v49 + 4);
      *((_OWORD *)v48 + 5) = v51;
      long long v52 = *((_OWORD *)v49 + 7);
      *((_OWORD *)v48 + 6) = *((_OWORD *)v49 + 6);
      *((_OWORD *)v48 + 7) = v52;
      long long v53 = *((_OWORD *)v49 + 1);
      *(_OWORD *)unint64_t v48 = *(_OWORD *)v49;
      *((_OWORD *)v48 + 1) = v53;
      long long v54 = *((_OWORD *)v49 + 3);
      *((_OWORD *)v48 + 2) = *((_OWORD *)v49 + 2);
      *((_OWORD *)v48 + 3) = v54;
    }
    uint64_t v19 = (int *)(v45 + 28);
    goto LABEL_17;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *sub_25B264644(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_25B25E91C((uint64_t)a1, type metadata accessor for ReplicatorMessage);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v20 = sub_25B290080();
      uint64_t v21 = *(void *)(v20 - 8);
      uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
      v22(a1, a2, v20);
      uint64_t v23 = *(int *)(type metadata accessor for ReplicatorMessage.Sync(0) + 20);
      uint64_t v24 = &a1[v23];
      uint64_t v25 = &a2[v23];
      long long v26 = *(_OWORD *)&a2[v23 + 16];
      *(_OWORD *)uint64_t v24 = *(_OWORD *)&a2[v23];
      *((_OWORD *)v24 + 1) = v26;
      *((_OWORD *)v24 + 2) = *(_OWORD *)&a2[v23 + 32];
      uint64_t v69 = type metadata accessor for Record.ID(0);
      uint64_t v27 = *(int *)(v69 + 24);
      uint64_t v73 = v24;
      uint64_t v28 = &v24[v27];
      uint64_t v29 = &v25[v27];
      uint64_t v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48);
      uint64_t v68 = v22;
      uint64_t v67 = v21;
      if (v71(&v25[v27], 1, v20))
      {
        uint64_t v30 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        v22(v28, v29, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v28, 0, 1, v20);
      }
      uint64_t v72 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
      uint64_t v31 = *(int *)(v72 + 20);
      uint64_t v32 = v73;
      uint64_t v33 = (_OWORD *)((char *)v73 + v31);
      uint64_t v34 = &v25[v31];
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
      uint64_t v36 = *(void *)(v35 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        uint64_t v37 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
        memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64));
        uint64_t v38 = v72;
      }
      else
      {
        uint64_t v66 = v36;
        long long v39 = *((_OWORD *)v34 + 1);
        _OWORD *v33 = *(_OWORD *)v34;
        v33[1] = v39;
        v33[2] = *((_OWORD *)v34 + 2);
        uint64_t v40 = *(int *)(v69 + 24);
        uint64_t v41 = (char *)v33 + v40;
        uint64_t v42 = &v34[v40];
        if (v71(&v34[v40], 1, v20))
        {
          uint64_t v43 = type metadata accessor for Record.ID.Ownership(0);
          memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
          uint64_t v44 = v68;
        }
        else
        {
          v68(v41, v42, v20);
          uint64_t v44 = v68;
          (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v41, 0, 1, v20);
        }
        uint64_t v56 = (int *)type metadata accessor for RecordMetadata();
        *(void *)((char *)v33 + v56[5]) = *(void *)&v34[v56[5]];
        v44((char *)v33 + v56[6], &v34[v56[6]], v20);
        *(void *)((char *)v33 + v56[7]) = *(void *)&v34[v56[7]];
        uint64_t v57 = v56[8];
        unint64_t v70 = (char *)v33 + v57;
        long long v58 = &v34[v57];
        uint64_t v59 = sub_25B290000();
        uint64_t v60 = *(void *)(v59 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v58, 1, v59))
        {
          uint64_t v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
          memcpy(v70, v58, *(void *)(*(void *)(v61 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v70, v58, v59);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v70, 0, 1, v59);
        }
        uint64_t v38 = v72;
        uint64_t v32 = v73;
        *(void *)((char *)v33 + v56[9]) = *(void *)&v34[v56[9]];
        *(_OWORD *)((char *)v33 + *(int *)(v35 + 48)) = *(_OWORD *)&v34[*(int *)(v35 + 48)];
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v66 + 56))(v33, 0, 1, v35);
      }
      uint64_t v62 = *(int *)(v38 + 24);
      uint64_t v63 = (uint64_t)v32 + v62;
      unint64_t v64 = &v25[v62];
      *(void *)uint64_t v63 = *(void *)v64;
      *(unsigned char *)(v63 + 8) = v64[8];
      goto LABEL_25;
    }
    if (!EnumCaseMultiPayload)
    {
      type metadata accessor for ReplicatorMessage.Handshake(0);
      int v7 = swift_getEnumCaseMultiPayload();
      if (v7 == 2)
      {
        uint64_t v45 = sub_25B290080();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(a1, a2, v45);
        uint64_t v46 = type metadata accessor for ReplicatorMessage.Handshake.Complete(0);
        *(_OWORD *)&a1[*(int *)(v46 + 20)] = *(_OWORD *)&a2[*(int *)(v46 + 20)];
        *(void *)&a1[*(int *)(v46 + 24)] = *(void *)&a2[*(int *)(v46 + 24)];
      }
      else
      {
        if (v7 == 1)
        {
          uint64_t v8 = sub_25B290080();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
          uint64_t v9 = (int *)type metadata accessor for ReplicatorMessage.Handshake.Response(0);
          *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
          uint64_t v10 = v9[6];
          uint64_t v11 = &a1[v10];
          uint64_t v12 = &a2[v10];
          long long v13 = *((_OWORD *)v12 + 1);
          *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
          *((_OWORD *)v11 + 1) = v13;
          long long v14 = *((_OWORD *)v12 + 5);
          *((_OWORD *)v11 + 4) = *((_OWORD *)v12 + 4);
          *((_OWORD *)v11 + 5) = v14;
          long long v15 = *((_OWORD *)v12 + 3);
          *((_OWORD *)v11 + 2) = *((_OWORD *)v12 + 2);
          *((_OWORD *)v11 + 3) = v15;
          long long v16 = *((_OWORD *)v12 + 10);
          long long v17 = *((_OWORD *)v12 + 8);
          *((_OWORD *)v11 + 9) = *((_OWORD *)v12 + 9);
          *((_OWORD *)v11 + 10) = v16;
          long long v18 = *((_OWORD *)v12 + 7);
          *((_OWORD *)v11 + 6) = *((_OWORD *)v12 + 6);
          *((_OWORD *)v11 + 7) = v18;
          *((_OWORD *)v11 + 8) = v17;
          *(void *)&a1[v9[7]] = *(void *)&a2[v9[7]];
          uint64_t v19 = v9 + 8;
LABEL_18:
          *(void *)&a1[*v19] = *(void *)&a2[*v19];
          swift_storeEnumTagMultiPayload();
LABEL_25:
          swift_storeEnumTagMultiPayload();
          return a1;
        }
        uint64_t v47 = sub_25B290080();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v47 - 8) + 32))(a1, a2, v47);
        uint64_t v46 = type metadata accessor for ReplicatorMessage.Handshake.Request(0);
        *(_OWORD *)&a1[*(int *)(v46 + 20)] = *(_OWORD *)&a2[*(int *)(v46 + 20)];
        uint64_t v48 = *(int *)(v46 + 24);
        uint64_t v49 = &a1[v48];
        long long v50 = &a2[v48];
        long long v51 = *((_OWORD *)v50 + 9);
        *((_OWORD *)v49 + 8) = *((_OWORD *)v50 + 8);
        *((_OWORD *)v49 + 9) = v51;
        *((_OWORD *)v49 + 10) = *((_OWORD *)v50 + 10);
        long long v52 = *((_OWORD *)v50 + 5);
        *((_OWORD *)v49 + 4) = *((_OWORD *)v50 + 4);
        *((_OWORD *)v49 + 5) = v52;
        long long v53 = *((_OWORD *)v50 + 7);
        *((_OWORD *)v49 + 6) = *((_OWORD *)v50 + 6);
        *((_OWORD *)v49 + 7) = v53;
        long long v54 = *((_OWORD *)v50 + 1);
        *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
        *((_OWORD *)v49 + 1) = v54;
        long long v55 = *((_OWORD *)v50 + 3);
        *((_OWORD *)v49 + 2) = *((_OWORD *)v50 + 2);
        *((_OWORD *)v49 + 3) = v55;
      }
      uint64_t v19 = (int *)(v46 + 28);
      goto LABEL_18;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t _s22ExtendedAttributeErrorOwet(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t _s22ExtendedAttributeErrorOwst(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_25B264D60()
{
  uint64_t result = type metadata accessor for ReplicatorMessage.Handshake(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ReplicatorMessage.Sync(319);
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_25B264E24(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v20 = *a2;
    *a1 = *a2;
    uint64_t v21 = v20 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B290080();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = *(int *)(a3 + 20);
    uint64_t v68 = a1;
    uint64_t v11 = (uint64_t *)((char *)a1 + v10);
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = *(uint64_t *)((char *)a2 + v10 + 8);
    *uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
    v11[1] = v13;
    uint64_t v14 = *(uint64_t *)((char *)a2 + v10 + 24);
    void v11[2] = *(uint64_t *)((char *)a2 + v10 + 16);
    void v11[3] = v14;
    uint64_t v15 = *(uint64_t *)((char *)a2 + v10 + 40);
    v11[4] = *(uint64_t *)((char *)a2 + v10 + 32);
    void v11[5] = v15;
    uint64_t v60 = type metadata accessor for Record.ID(0);
    uint64_t v16 = *(int *)(v60 + 24);
    __dst = (char *)v11 + v16;
    uint64_t v67 = v12;
    long long v17 = &v12[v16];
    long long v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v61 = v18;
    uint64_t v63 = v9;
    uint64_t v59 = v8;
    uint64_t v62 = v7;
    if (v18(v17, 1, v7))
    {
      uint64_t v19 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(__dst, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)__dst, (uint64_t *)v17, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(__dst, 0, 1, v7);
    }
    uint64_t v22 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
    uint64_t v23 = *(int *)(v22 + 20);
    uint64_t v24 = v11;
    uint64_t v25 = (void *)((char *)v11 + v23);
    long long v26 = &v67[v23];
    uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
    uint64_t v28 = *(void *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      uint64_t v29 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
      memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64));
    }
    else
    {
      uint64_t v57 = v28;
      uint64_t v58 = v27;
      __dsta = (void *)v22;
      uint64_t v30 = *((void *)v26 + 1);
      *uint64_t v25 = *(void *)v26;
      v25[1] = v30;
      uint64_t v31 = *((void *)v26 + 3);
      v25[2] = *((void *)v26 + 2);
      void v25[3] = v31;
      uint64_t v32 = *((void *)v26 + 5);
      v25[4] = *((void *)v26 + 4);
      v25[5] = v32;
      uint64_t v33 = *(int *)(v60 + 24);
      uint64_t v34 = (char *)v25 + v33;
      uint64_t v35 = &v26[v33];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v61(v35, 1, v62))
      {
        uint64_t v36 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v34, v35, *(void *)(*(void *)(v36 - 8) + 64));
        uint64_t v37 = (void (*)(char *, char *, uint64_t))v63;
      }
      else
      {
        uint64_t v37 = (void (*)(char *, char *, uint64_t))v63;
        v63((uint64_t *)v34, (uint64_t *)v35, v62);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v59 + 56))(v34, 0, 1, v62);
      }
      uint64_t v38 = (int *)type metadata accessor for RecordMetadata();
      *(void *)((char *)v25 + v38[5]) = *(void *)&v26[v38[5]];
      uint64_t v39 = v38[6];
      uint64_t v40 = (char *)v25 + v39;
      uint64_t v41 = &v26[v39];
      swift_retain();
      v37(v40, v41, v62);
      *(void *)((char *)v25 + v38[7]) = *(void *)&v26[v38[7]];
      uint64_t v42 = v38[8];
      unint64_t v64 = (char *)v25 + v42;
      uint64_t v43 = &v26[v42];
      uint64_t v44 = sub_25B290000();
      uint64_t v45 = *(void *)(v44 - 8);
      uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      swift_bridgeObjectRetain();
      if (v46(v43, 1, v44))
      {
        uint64_t v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
        memcpy(v64, v43, *(void *)(*(void *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v64, v43, v44);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v64, 0, 1, v44);
      }
      uint64_t v24 = v11;
      *(void *)((char *)v25 + v38[9]) = *(void *)&v26[v38[9]];
      uint64_t v48 = *(int *)(v58 + 48);
      uint64_t v49 = (void *)((char *)v25 + v48);
      long long v50 = (uint64_t *)&v26[v48];
      uint64_t v51 = *v50;
      unint64_t v52 = v50[1];
      sub_25B114300(*v50, v52);
      *uint64_t v49 = v51;
      v49[1] = v52;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v25, 0, 1, v58);
      uint64_t v22 = (uint64_t)__dsta;
    }
    uint64_t v53 = *(int *)(v22 + 24);
    long long v54 = (char *)v24 + v53;
    long long v55 = &v67[v53];
    *(void *)long long v54 = *(void *)v55;
    v54[8] = v55[8];
    return v68;
  }
  return (uint64_t *)v21;
}

uint64_t sub_25B265368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B290080();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for Record.ID(0);
  uint64_t v9 = v7 + *(int *)(v8 + 24);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v10(v9, 1, v4)) {
    v6(v9, v4);
  }
  uint64_t v11 = v7 + *(int *)(type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0) + 20);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v11 + *(int *)(v8 + 24);
    if (!v10(v14, 1, v4)) {
      v6(v14, v4);
    }
    uint64_t v15 = type metadata accessor for RecordMetadata();
    swift_release();
    v6(v11 + *(int *)(v15 + 24), v4);
    swift_bridgeObjectRelease();
    uint64_t v16 = v11 + *(int *)(v15 + 32);
    uint64_t v17 = sub_25B290000();
    uint64_t v18 = *(void *)(v17 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17)) {
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
    uint64_t v19 = (uint64_t *)(v11 + *(int *)(v12 + 48));
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    return sub_25B10DFF0(v20, v21);
  }
  return result;
}

uint64_t sub_25B265608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v66 = a1;
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = a2 + v9;
  uint64_t v12 = *(void *)(a2 + v9 + 8);
  *uint64_t v10 = *(void *)(a2 + v9);
  v10[1] = v12;
  uint64_t v13 = *(void *)(a2 + v9 + 24);
  v10[2] = *(void *)(a2 + v9 + 16);
  v10[3] = v13;
  uint64_t v14 = *(void *)(a2 + v9 + 40);
  v10[4] = *(void *)(a2 + v9 + 32);
  v10[5] = v14;
  uint64_t v58 = type metadata accessor for Record.ID(0);
  uint64_t v15 = *(int *)(v58 + 24);
  uint64_t v64 = v11;
  uint64_t v65 = v10;
  __dst = (char *)v10 + v15;
  uint64_t v16 = (void *)(v11 + v15);
  uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v59 = v17;
  uint64_t v60 = v8;
  if (v17((char *)v16, 1, v6))
  {
    uint64_t v18 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(__dst, v16, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v8((uint64_t)__dst, (uint64_t)v16, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(__dst, 0, 1, v6);
  }
  uint64_t v19 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
  uint64_t v20 = *(int *)(v19 + 20);
  unint64_t v21 = v65;
  uint64_t v22 = (void *)((char *)v65 + v20);
  uint64_t v23 = (void *)(v11 + v20);
  uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = v66;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    uint64_t v27 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64));
  }
  else
  {
    uint64_t v56 = v25;
    uint64_t v57 = v24;
    __dsta = (void *)v19;
    uint64_t v28 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v28;
    uint64_t v29 = v23[3];
    _OWORD v22[2] = v23[2];
    v22[3] = v29;
    uint64_t v30 = v6;
    uint64_t v31 = v23[5];
    v22[4] = v23[4];
    v22[5] = v31;
    uint64_t v32 = *(int *)(v58 + 24);
    uint64_t v33 = (char *)v22 + v32;
    uint64_t v34 = (char *)v23 + v32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v59(v34, 1, v30))
    {
      uint64_t v35 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64));
      uint64_t v36 = (void (*)(char *, char *, uint64_t))v60;
    }
    else
    {
      uint64_t v36 = (void (*)(char *, char *, uint64_t))v60;
      v60((uint64_t)v33, (uint64_t)v34, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v33, 0, 1, v30);
    }
    uint64_t v37 = (int *)type metadata accessor for RecordMetadata();
    *(void *)((char *)v22 + v37[5]) = *(void *)((char *)v23 + v37[5]);
    uint64_t v38 = v37[6];
    uint64_t v39 = (char *)v22 + v38;
    uint64_t v40 = (char *)v23 + v38;
    swift_retain();
    v36(v39, v40, v30);
    *(void *)((char *)v22 + v37[7]) = *(void *)((char *)v23 + v37[7]);
    uint64_t v41 = v37[8];
    uint64_t v61 = (char *)v22 + v41;
    uint64_t v42 = (char *)v23 + v41;
    uint64_t v43 = sub_25B290000();
    uint64_t v44 = *(void *)(v43 - 8);
    uint64_t v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48);
    swift_bridgeObjectRetain();
    if (v45(v42, 1, v43))
    {
      uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v61, v42, *(void *)(*(void *)(v46 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v44 + 16))(v61, v42, v43);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v61, 0, 1, v43);
    }
    unint64_t v21 = v65;
    uint64_t v26 = v66;
    *(void *)((char *)v22 + v37[9]) = *(void *)((char *)v23 + v37[9]);
    uint64_t v47 = *(int *)(v57 + 48);
    uint64_t v48 = (void *)((char *)v22 + v47);
    uint64_t v49 = (void *)((char *)v23 + v47);
    uint64_t v50 = *v49;
    unint64_t v51 = v49[1];
    sub_25B114300(*v49, v51);
    *uint64_t v48 = v50;
    v48[1] = v51;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v22, 0, 1, v57);
    uint64_t v19 = (uint64_t)__dsta;
  }
  uint64_t v52 = *(int *)(v19 + 24);
  uint64_t v53 = (uint64_t)v21 + v52;
  uint64_t v54 = v64 + v52;
  *(void *)uint64_t v53 = *(void *)v54;
  *(unsigned char *)(v53 + 8) = *(unsigned char *)(v54 + 8);
  return v26;
}

uint64_t sub_25B265B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v79(a1, a2, v6);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  *(void *)uint64_t v9 = *(void *)(a2 + v8);
  *((void *)v9 + 1) = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v9 + 2) = v10[2];
  *((void *)v9 + 3) = v10[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v9 + 4) = v10[4];
  *((void *)v9 + 5) = v10[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v80 = type metadata accessor for Record.ID(0);
  uint64_t v11 = *(int *)(v80 + 24);
  uint64_t v12 = &v9[v11];
  uint64_t v13 = (char *)v10 + v11;
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v15 = v14(&v9[v11], 1, v6);
  int v16 = v14(v13, 1, v6);
  uint64_t v87 = a1;
  __dst = (void (**)(void *, const void *, uint64_t))v7;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v12, v13, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
LABEL_6:
    uint64_t v17 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v12, v13, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v79((uint64_t)v12, (uint64_t)v13, v6);
LABEL_7:
  uint64_t v85 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
  uint64_t v86 = v10;
  uint64_t v18 = *(int *)(v85 + 20);
  uint64_t v19 = &v9[v18];
  uint64_t v20 = (char *)v10 + v18;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v78 = *(void *)(v21 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v78 + 48);
  int v23 = v22(v19, 1, v21);
  uint64_t v82 = v21;
  int v24 = v22(v20, 1, v21);
  if (!v23)
  {
    if (v24)
    {
      sub_25B116DE0((uint64_t)v19, &qword_26A4DA710);
      goto LABEL_13;
    }
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = *((void *)v20 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v19 + 2) = *((void *)v20 + 2);
    *((void *)v19 + 3) = *((void *)v20 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v19 + 4) = *((void *)v20 + 4);
    *((void *)v19 + 5) = *((void *)v20 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v33 = *(int *)(v80 + 24);
    uint64_t v34 = &v19[v33];
    uint64_t v35 = &v20[v33];
    int v36 = v14(&v19[v33], 1, v6);
    int v37 = v14(v35, 1, v6);
    if (v36)
    {
      if (!v37)
      {
        __dst[2](v34, v35, v6);
        ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v34, 0, 1, v6);
        goto LABEL_28;
      }
    }
    else
    {
      if (!v37)
      {
        v79((uint64_t)v34, (uint64_t)v35, v6);
LABEL_28:
        uint64_t v61 = (int *)type metadata accessor for RecordMetadata();
        *(void *)&v19[v61[5]] = *(void *)&v20[v61[5]];
        swift_retain();
        swift_release();
        v79((uint64_t)&v19[v61[6]], (uint64_t)&v20[v61[6]], v6);
        *(void *)&v19[v61[7]] = *(void *)&v20[v61[7]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v62 = v61[8];
        uint64_t v63 = &v19[v62];
        uint64_t v64 = &v20[v62];
        uint64_t v65 = sub_25B290000();
        uint64_t v66 = *(void *)(v65 - 8);
        uint64_t v67 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
        uint64_t v81 = v63;
        LODWORD(v63) = v67(v63, 1, v65);
        int v68 = v67(v64, 1, v65);
        if (v63)
        {
          uint64_t v31 = v87;
          if (!v68)
          {
            (*(void (**)(void *, char *, uint64_t))(v66 + 16))(v81, v64, v65);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v81, 0, 1, v65);
            goto LABEL_37;
          }
          size_t v69 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
          unint64_t v70 = v81;
        }
        else
        {
          uint64_t v31 = v87;
          if (!v68)
          {
            (*(void (**)(void *, char *, uint64_t))(v66 + 24))(v81, v64, v65);
            goto LABEL_37;
          }
          (*(void (**)(void *, uint64_t))(v66 + 8))(v81, v65);
          size_t v69 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
          unint64_t v70 = v81;
        }
        memcpy(v70, v64, v69);
LABEL_37:
        *(void *)&v19[v61[9]] = *(void *)&v20[v61[9]];
        uint64_t v71 = *(int *)(v82 + 48);
        uint64_t v72 = (uint64_t *)&v19[v71];
        uint64_t v73 = (uint64_t *)&v20[v71];
        uint64_t v74 = *v73;
        unint64_t v75 = v73[1];
        sub_25B114300(*v73, v75);
        uint64_t v76 = *v72;
        unint64_t v77 = v72[1];
        uint64_t *v72 = v74;
        v72[1] = v75;
        sub_25B10DFF0(v76, v77);
        goto LABEL_14;
      }
      ((void (*)(char *, uint64_t))__dst[1])(v34, v6);
    }
    uint64_t v60 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v34, v35, *(void *)(*(void *)(v60 - 8) + 64));
    goto LABEL_28;
  }
  if (v24)
  {
LABEL_13:
    uint64_t v30 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v19, v20, *(void *)(*(void *)(v30 - 8) + 64));
    uint64_t v31 = v87;
LABEL_14:
    uint64_t v32 = v86;
    goto LABEL_24;
  }
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  *((void *)v19 + 2) = *((void *)v20 + 2);
  *((void *)v19 + 3) = *((void *)v20 + 3);
  *((void *)v19 + 4) = *((void *)v20 + 4);
  *((void *)v19 + 5) = *((void *)v20 + 5);
  uint64_t v25 = *(int *)(v80 + 24);
  uint64_t v26 = &v19[v25];
  uint64_t v27 = &v20[v25];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v14(v27, 1, v6))
  {
    uint64_t v28 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v26, v27, *(void *)(*(void *)(v28 - 8) + 64));
    uint64_t v29 = __dst;
  }
  else
  {
    uint64_t v38 = v26;
    uint64_t v29 = __dst;
    __dst[2](v38, v27, v6);
    ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v38, 0, 1, v6);
  }
  uint64_t v39 = (int *)type metadata accessor for RecordMetadata();
  *(void *)&v19[v39[5]] = *(void *)&v20[v39[5]];
  uint64_t v40 = v39[6];
  uint64_t v41 = &v19[v40];
  uint64_t v42 = &v20[v40];
  uint64_t v43 = v29[2];
  swift_retain();
  v43(v41, v42, v6);
  *(void *)&v19[v39[7]] = *(void *)&v20[v39[7]];
  uint64_t v44 = v39[8];
  __dsta = &v19[v44];
  uint64_t v45 = &v20[v44];
  uint64_t v46 = sub_25B290000();
  uint64_t v47 = *(void *)(v46 - 8);
  uint64_t v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(__dsta, v45, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(__dsta, v45, v46);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(__dsta, 0, 1, v46);
  }
  uint64_t v32 = v86;
  uint64_t v31 = v87;
  *(void *)&v19[v39[9]] = *(void *)&v20[v39[9]];
  uint64_t v50 = *(int *)(v82 + 48);
  unint64_t v51 = (uint64_t *)&v19[v50];
  uint64_t v52 = (uint64_t *)&v20[v50];
  uint64_t v53 = *v52;
  unint64_t v54 = v52[1];
  sub_25B114300(*v52, v54);
  *unint64_t v51 = v53;
  v51[1] = v54;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v78 + 56))(v19, 0, 1, v82);
LABEL_24:
  uint64_t v55 = *(int *)(v85 + 24);
  uint64_t v56 = &v9[v55];
  uint64_t v57 = (void *)((char *)v32 + v55);
  uint64_t v58 = *v57;
  v56[8] = *((unsigned char *)v57 + 8);
  *(void *)uint64_t v56 = v58;
  return v31;
}

uint64_t sub_25B266438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (_OWORD *)(a1 + v9);
  uint64_t v11 = a2 + v9;
  long long v12 = *(_OWORD *)(a2 + v9 + 16);
  *uint64_t v10 = *(_OWORD *)(a2 + v9);
  v10[1] = v12;
  v10[2] = *(_OWORD *)(a2 + v9 + 32);
  uint64_t v43 = type metadata accessor for Record.ID(0);
  uint64_t v13 = *(int *)(v43 + 24);
  uint64_t v14 = (char *)v10 + v13;
  int v15 = (const void *)(v11 + v13);
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v45 = v8;
  uint64_t v42 = v7;
  if (v44(v11 + v13, 1, v6))
  {
    uint64_t v16 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v14, (uint64_t)v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  uint64_t v46 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
  uint64_t v17 = *(int *)(v46 + 20);
  uint64_t v18 = (_OWORD *)((char *)v10 + v17);
  uint64_t v19 = (_OWORD *)(v11 + v17);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v40 = v21;
    uint64_t v41 = a1;
    long long v23 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v23;
    v18[2] = v19[2];
    uint64_t v24 = *(int *)(v43 + 24);
    uint64_t v25 = (char *)v18 + v24;
    uint64_t v26 = (char *)v19 + v24;
    if (v44((uint64_t)v19 + v24, 1, v6))
    {
      uint64_t v27 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64));
      uint64_t v28 = (void (*)(char *, char *, uint64_t))v45;
    }
    else
    {
      uint64_t v28 = (void (*)(char *, char *, uint64_t))v45;
      v45((uint64_t)v25, (uint64_t)v26, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v25, 0, 1, v6);
    }
    uint64_t v29 = (int *)type metadata accessor for RecordMetadata();
    *(void *)((char *)v18 + v29[5]) = *(void *)((char *)v19 + v29[5]);
    v28((char *)v18 + v29[6], (char *)v19 + v29[6], v6);
    *(void *)((char *)v18 + v29[7]) = *(void *)((char *)v19 + v29[7]);
    uint64_t v30 = v29[8];
    uint64_t v31 = (char *)v18 + v30;
    uint64_t v32 = (char *)v19 + v30;
    uint64_t v33 = sub_25B290000();
    uint64_t v34 = *(void *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    *(void *)((char *)v18 + v29[9]) = *(void *)((char *)v19 + v29[9]);
    *(_OWORD *)((char *)v18 + *(int *)(v20 + 48)) = *(_OWORD *)((char *)v19 + *(int *)(v20 + 48));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v40 + 56))(v18, 0, 1, v20);
    a1 = v41;
  }
  uint64_t v36 = *(int *)(v46 + 24);
  int v37 = (char *)v10 + v36;
  uint64_t v38 = v11 + v36;
  *(void *)int v37 = *(void *)v38;
  v37[8] = *(unsigned char *)(v38 + 8);
  return a1;
}

uint64_t sub_25B266890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = *(void *)(a2 + v9 + 8);
  *uint64_t v10 = *(void *)(a2 + v9);
  v10[1] = v12;
  swift_bridgeObjectRelease();
  uint64_t v13 = v11[3];
  v10[2] = v11[2];
  v10[3] = v13;
  swift_bridgeObjectRelease();
  uint64_t v14 = v11[5];
  v10[4] = v11[4];
  v10[5] = v14;
  swift_bridgeObjectRelease();
  uint64_t v81 = type metadata accessor for Record.ID(0);
  uint64_t v15 = *(int *)(v81 + 24);
  uint64_t v88 = v10;
  uint64_t v16 = (char *)v10 + v15;
  uint64_t v17 = (char *)v11 + v15;
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v19 = v18(v16, 1, v6);
  uint64_t v82 = v18;
  int v20 = v18(v17, 1, v6);
  uint64_t v87 = a1;
  __src = (void (**)(void *, const void *, void))v7;
  uint64_t v79 = v8;
  if (v19)
  {
    if (v20)
    {
      uint64_t v21 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
      uint64_t v22 = v6;
    }
    else
    {
      uint64_t v22 = v6;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v17, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
    }
  }
  else
  {
    uint64_t v22 = v6;
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v16, v6);
      uint64_t v23 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      v8((uint64_t)v16, (uint64_t)v17, v6);
    }
  }
  uint64_t v24 = v88;
  uint64_t v85 = v11;
  uint64_t v86 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord(0);
  uint64_t v25 = *(int *)(v86 + 20);
  uint64_t v26 = (char *)v88 + v25;
  uint64_t v27 = (char *)v11 + v25;
  uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v80 = *(void *)(v28 - 8);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  uint64_t v30 = v26;
  int v31 = v29(v26, 1, v28);
  uint64_t v32 = v27;
  uint64_t v83 = v28;
  int v33 = v29(v27, 1, v28);
  if (!v31)
  {
    if (v33)
    {
      sub_25B116DE0((uint64_t)v30, &qword_26A4DA710);
      goto LABEL_14;
    }
    uint64_t v42 = *((void *)v27 + 1);
    uint64_t v43 = v30;
    *(void *)uint64_t v30 = *(void *)v27;
    *((void *)v30 + 1) = v42;
    swift_bridgeObjectRelease();
    uint64_t v44 = *((void *)v27 + 3);
    *((void *)v30 + 2) = *((void *)v27 + 2);
    *((void *)v30 + 3) = v44;
    swift_bridgeObjectRelease();
    uint64_t v45 = *((void *)v27 + 5);
    *((void *)v30 + 4) = *((void *)v27 + 4);
    *((void *)v30 + 5) = v45;
    swift_bridgeObjectRelease();
    uint64_t v46 = *(int *)(v81 + 24);
    uint64_t v47 = &v30[v46];
    uint64_t v48 = &v27[v46];
    int v49 = v82(&v30[v46], 1, v22);
    int v50 = v82(v48, 1, v22);
    if (v49)
    {
      unint64_t v51 = (void (*)(char *, char *, uint64_t))v79;
      if (!v50)
      {
        __src[4](v47, v48, v22);
        ((void (*)(char *, void, uint64_t, uint64_t))__src[7])(v47, 0, 1, v22);
        goto LABEL_28;
      }
    }
    else
    {
      unint64_t v51 = (void (*)(char *, char *, uint64_t))v79;
      if (!v50)
      {
        v79((uint64_t)v47, (uint64_t)v48, v22);
LABEL_28:
        uint64_t v66 = (int *)type metadata accessor for RecordMetadata();
        *(void *)&v43[v66[5]] = *(void *)&v32[v66[5]];
        swift_release();
        v51(&v43[v66[6]], &v32[v66[6]], v22);
        *(void *)&v43[v66[7]] = *(void *)&v32[v66[7]];
        swift_bridgeObjectRelease();
        uint64_t v67 = v66[8];
        int v68 = &v43[v67];
        size_t v69 = &v32[v67];
        uint64_t v70 = sub_25B290000();
        uint64_t v71 = *(void *)(v70 - 8);
        uint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 48);
        int v73 = v72(v68, 1, v70);
        int v74 = v72(v69, 1, v70);
        if (v73)
        {
          if (!v74)
          {
            (*(void (**)(char *, char *, uint64_t))(v71 + 32))(v68, v69, v70);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v68, 0, 1, v70);
LABEL_34:
            uint64_t v61 = v85;
            *(void *)&v43[v66[9]] = *(void *)&v32[v66[9]];
            uint64_t v76 = *(int *)(v83 + 48);
            uint64_t v77 = *(void *)&v43[v76];
            unint64_t v78 = *(void *)&v43[v76 + 8];
            *(_OWORD *)&v43[v76] = *(_OWORD *)&v32[v76];
            sub_25B10DFF0(v77, v78);
            uint64_t v60 = v86;
            uint64_t result = v87;
            uint64_t v24 = v88;
            goto LABEL_24;
          }
        }
        else
        {
          if (!v74)
          {
            (*(void (**)(char *, char *, uint64_t))(v71 + 40))(v68, v69, v70);
            goto LABEL_34;
          }
          (*(void (**)(char *, uint64_t))(v71 + 8))(v68, v70);
        }
        uint64_t v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
        memcpy(v68, v69, *(void *)(*(void *)(v75 - 8) + 64));
        goto LABEL_34;
      }
      ((void (*)(char *, uint64_t))__src[1])(v47, v22);
    }
    uint64_t v65 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v47, v48, *(void *)(*(void *)(v65 - 8) + 64));
    goto LABEL_28;
  }
  if (!v33)
  {
    long long v34 = *((_OWORD *)v27 + 1);
    uint64_t v35 = v30;
    *(_OWORD *)uint64_t v30 = *(_OWORD *)v27;
    *((_OWORD *)v30 + 1) = v34;
    *((_OWORD *)v30 + 2) = *((_OWORD *)v27 + 2);
    uint64_t v36 = *(int *)(v81 + 24);
    int v37 = &v30[v36];
    uint64_t v38 = &v27[v36];
    if (v82(&v27[v36], 1, v22))
    {
      uint64_t v39 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
      uint64_t v40 = __src;
    }
    else
    {
      uint64_t v40 = __src;
      __src[4](v37, v38, v22);
      ((void (*)(char *, void, uint64_t, uint64_t))__src[7])(v37, 0, 1, v22);
    }
    uint64_t v52 = (int *)type metadata accessor for RecordMetadata();
    *(void *)&v30[v52[5]] = *(void *)&v27[v52[5]];
    v40[4](&v30[v52[6]], &v27[v52[6]], v22);
    *(void *)&v30[v52[7]] = *(void *)&v27[v52[7]];
    uint64_t v53 = v52[8];
    unint64_t v54 = &v30[v53];
    uint64_t v55 = &v27[v53];
    uint64_t v56 = sub_25B290000();
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      uint64_t v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v54, v55, v56);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
    uint64_t v24 = v88;
    *(void *)((char *)v35 + v52[9]) = *(void *)&v27[v52[9]];
    *(_OWORD *)((char *)v35 + *(int *)(v83 + 48)) = *(_OWORD *)&v27[*(int *)(v83 + 48)];
    (*(void (**)(void *, void, uint64_t))(v80 + 56))(v35, 0, 1);
    goto LABEL_23;
  }
LABEL_14:
  uint64_t v41 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
  memcpy(v30, v27, *(void *)(*(void *)(v41 - 8) + 64));
LABEL_23:
  uint64_t v60 = v86;
  uint64_t result = v87;
  uint64_t v61 = v85;
LABEL_24:
  uint64_t v62 = *(int *)(v60 + 24);
  uint64_t v63 = (uint64_t)v24 + v62;
  uint64_t v64 = (uint64_t)v61 + v62;
  *(void *)uint64_t v63 = *(void *)v64;
  *(unsigned char *)(v63 + 8) = *(unsigned char *)(v64 + 8);
  return result;
}

uint64_t sub_25B26710C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B267120);
}

uint64_t sub_25B267120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_37Tm(a1, a2, a3, MEMORY[0x263F07508], type metadata accessor for ReplicatorMessage.Sync.SyncRecord);
}

uint64_t sub_25B26714C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B267160);
}

uint64_t sub_25B267160(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_38Tm(a1, a2, a3, a4, MEMORY[0x263F07508], type metadata accessor for ReplicatorMessage.Sync.SyncRecord);
}

uint64_t sub_25B26718C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B26B2D0(a1, a2, a3, MEMORY[0x263F07508], type metadata accessor for ReplicatorMessage.Sync.SyncRecord);
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions()
{
  return &type metadata for ReplicatorMessage.Sync.SyncRecord.Versions;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Versions.V0.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Sync.SyncRecord.Versions.V0.CodingKeys;
}

uint64_t *sub_25B2671DC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      uint64_t v38 = v8;
      uint64_t v39 = v7;
      uint64_t v10 = a2[1];
      *a1 = *a2;
      a1[1] = v10;
      uint64_t v11 = a2[3];
      a1[2] = a2[2];
      a1[3] = v11;
      uint64_t v12 = a2[5];
      a1[4] = a2[4];
      a1[5] = v12;
      uint64_t v13 = *(int *)(type metadata accessor for Record.ID(0) + 24);
      __dst = (char *)a1 + v13;
      uint64_t v14 = (char *)a2 + v13;
      uint64_t v15 = sub_25B290080();
      uint64_t v16 = *(void *)(v15 - 8);
      uint64_t v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v17(v14, 1, v15))
      {
        uint64_t v18 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(__dst, v14, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      int v19 = (int *)type metadata accessor for RecordMetadata();
      *(uint64_t *)((char *)a1 + v19[5]) = *(uint64_t *)((char *)a2 + v19[5]);
      uint64_t v20 = v19[6];
      uint64_t v21 = (char *)a1 + v20;
      uint64_t v22 = (char *)a2 + v20;
      uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
      swift_retain();
      v23(v21, v22, v15);
      *(uint64_t *)((char *)a1 + v19[7]) = *(uint64_t *)((char *)a2 + v19[7]);
      uint64_t v24 = v19[8];
      uint64_t v25 = (char *)a1 + v24;
      uint64_t v26 = (char *)a2 + v24;
      uint64_t v27 = sub_25B290000();
      uint64_t v28 = *(void *)(v27 - 8);
      uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
      swift_bridgeObjectRetain();
      if (v29(v26, 1, v27))
      {
        uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
        memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v25, v26, v27);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      *(uint64_t *)((char *)a1 + v19[9]) = *(uint64_t *)((char *)a2 + v19[9]);
      uint64_t v31 = *(int *)(v39 + 48);
      uint64_t v32 = (uint64_t *)((char *)a1 + v31);
      int v33 = (uint64_t *)((char *)a2 + v31);
      uint64_t v34 = *v33;
      unint64_t v35 = v33[1];
      sub_25B114300(*v33, v35);
      *uint64_t v32 = v34;
      v32[1] = v35;
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v38 + 56))(a1, 0, 1, v39);
    }
  }
  return a1;
}

uint64_t sub_25B2675A4(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = a1 + *(int *)(type metadata accessor for Record.ID(0) + 24);
    uint64_t v5 = sub_25B290080();
    uint64_t v6 = *(void *)(v5 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    }
    uint64_t v7 = type metadata accessor for RecordMetadata();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1 + *(int *)(v7 + 24), v5);
    swift_bridgeObjectRelease();
    uint64_t v8 = a1 + *(int *)(v7 + 32);
    uint64_t v9 = sub_25B290000();
    uint64_t v10 = *(void *)(v9 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    }
    uint64_t v11 = (uint64_t *)(a1 + *(int *)(v2 + 48));
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    return sub_25B10DFF0(v12, v13);
  }
  return result;
}

void *sub_25B2677A8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v36 = v7;
    uint64_t v37 = v6;
    uint64_t v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    uint64_t v9 = a2[3];
    a1[2] = a2[2];
    a1[3] = v9;
    uint64_t v10 = a2[5];
    a1[4] = a2[4];
    a1[5] = v10;
    uint64_t v11 = *(int *)(type metadata accessor for Record.ID(0) + 24);
    __dst = (char *)a1 + v11;
    uint64_t v12 = (char *)a2 + v11;
    uint64_t v13 = sub_25B290080();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v15(v12, 1, v13))
    {
      uint64_t v16 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    uint64_t v17 = (int *)type metadata accessor for RecordMetadata();
    *(void *)((char *)a1 + v17[5]) = *(void *)((char *)a2 + v17[5]);
    uint64_t v18 = v17[6];
    int v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    swift_retain();
    v21(v19, v20, v13);
    *(void *)((char *)a1 + v17[7]) = *(void *)((char *)a2 + v17[7]);
    uint64_t v22 = v17[8];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = sub_25B290000();
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      uint64_t v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    *(void *)((char *)a1 + v17[9]) = *(void *)((char *)a2 + v17[9]);
    uint64_t v29 = *(int *)(v37 + 48);
    uint64_t v30 = (void *)((char *)a1 + v29);
    uint64_t v31 = (void *)((char *)a2 + v29);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    sub_25B114300(*v31, v33);
    *uint64_t v30 = v32;
    v30[1] = v33;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(a1, 0, 1, v37);
  }
  return a1;
}

char *sub_25B267B34(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_25B116DE0((uint64_t)a1, &qword_26A4DA710);
      goto LABEL_7;
    }
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = *((void *)a2 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)a1 + 4) = *((void *)a2 + 4);
    *((void *)a1 + 5) = *((void *)a2 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(int *)(type metadata accessor for Record.ID(0) + 24);
    uint64_t v18 = &a1[v17];
    int v19 = &a2[v17];
    uint64_t v20 = sub_25B290080();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
    int v23 = v22(v18, 1, v20);
    int v24 = v22(v19, 1, v20);
    if (v23)
    {
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v24)
      {
        (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
LABEL_19:
        uint64_t v43 = (int *)type metadata accessor for RecordMetadata();
        *(void *)&a1[v43[5]] = *(void *)&a2[v43[5]];
        swift_retain();
        swift_release();
        (*(void (**)(char *, char *, uint64_t))(v21 + 24))(&a1[v43[6]], &a2[v43[6]], v20);
        *(void *)&a1[v43[7]] = *(void *)&a2[v43[7]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v44 = v43[8];
        uint64_t v45 = &a1[v44];
        uint64_t v46 = &a2[v44];
        uint64_t v47 = sub_25B290000();
        uint64_t v48 = *(void *)(v47 - 8);
        int v49 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v48 + 48);
        uint64_t v63 = v45;
        LODWORD(v45) = v49(v45, 1, v47);
        int v50 = v49(v46, 1, v47);
        if (v45)
        {
          if (!v50)
          {
            (*(void (**)(void *, char *, uint64_t))(v48 + 16))(v63, v46, v47);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v63, 0, 1, v47);
            goto LABEL_28;
          }
          size_t v51 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
          uint64_t v52 = v63;
        }
        else
        {
          if (!v50)
          {
            (*(void (**)(void *, char *, uint64_t))(v48 + 24))(v63, v46, v47);
            goto LABEL_28;
          }
          (*(void (**)(void *, uint64_t))(v48 + 8))(v63, v47);
          size_t v51 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
          uint64_t v52 = v63;
        }
        memcpy(v52, v46, v51);
LABEL_28:
        *(void *)&a1[v43[9]] = *(void *)&a2[v43[9]];
        uint64_t v53 = *(int *)(v6 + 48);
        unint64_t v54 = (uint64_t *)&a1[v53];
        uint64_t v55 = (uint64_t *)&a2[v53];
        uint64_t v56 = *v55;
        unint64_t v57 = v55[1];
        sub_25B114300(*v55, v57);
        uint64_t v58 = *v54;
        unint64_t v59 = v54[1];
        uint64_t *v54 = v56;
        v54[1] = v57;
        sub_25B10DFF0(v58, v59);
        return a1;
      }
      (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    }
    uint64_t v42 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v18, v19, *(void *)(*(void *)(v42 - 8) + 64));
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  uint64_t v62 = v7;
  __src = (int *)v6;
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  uint64_t v11 = *(int *)(type metadata accessor for Record.ID(0) + 24);
  __dst = &a1[v11];
  uint64_t v12 = &a2[v11];
  uint64_t v13 = sub_25B290080();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v15(v12, 1, v13))
  {
    uint64_t v16 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(__dst, v12, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
  }
  uint64_t v25 = (int *)type metadata accessor for RecordMetadata();
  *(void *)&a1[v25[5]] = *(void *)&a2[v25[5]];
  uint64_t v26 = v25[6];
  uint64_t v27 = &a1[v26];
  uint64_t v28 = &a2[v26];
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  swift_retain();
  v29(v27, v28, v13);
  *(void *)&a1[v25[7]] = *(void *)&a2[v25[7]];
  uint64_t v30 = v25[8];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = sub_25B290000();
  uint64_t v34 = *(void *)(v33 - 8);
  unint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
  swift_bridgeObjectRetain();
  if (v35(v32, 1, v33))
  {
    uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  *(void *)&a1[v25[9]] = *(void *)&a2[v25[9]];
  uint64_t v37 = __src[12];
  uint64_t v38 = (uint64_t *)&a1[v37];
  uint64_t v39 = (uint64_t *)&a2[v37];
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  sub_25B114300(*v39, v41);
  *uint64_t v38 = v40;
  v38[1] = v41;
  (*(void (**)(char *, void, uint64_t, int *))(v62 + 56))(a1, 0, 1, __src);
  return a1;
}

_OWORD *sub_25B2682A8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    long long v8 = a2[1];
    *a1 = *a2;
    a1[1] = v8;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(type metadata accessor for Record.ID(0) + 24);
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_25B290080();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v15 = (int *)type metadata accessor for RecordMetadata();
    *(void *)((char *)a1 + v15[5]) = *(void *)((char *)a2 + v15[5]);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))((char *)a1 + v15[6], (char *)a2 + v15[6], v12);
    *(void *)((char *)a1 + v15[7]) = *(void *)((char *)a2 + v15[7]);
    uint64_t v16 = v15[8];
    uint64_t v17 = (char *)a1 + v16;
    uint64_t v18 = (char *)a2 + v16;
    uint64_t v19 = sub_25B290000();
    uint64_t v20 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(void *)((char *)a1 + v15[9]) = *(void *)((char *)a2 + v15[9]);
    *(_OWORD *)((char *)a1 + *(int *)(v6 + 48)) = *(_OWORD *)((char *)a2 + *(int *)(v6 + 48));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

char *sub_25B2685D0(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v7 = *(void *)(v6 - 8);
  long long v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (v10)
    {
      sub_25B116DE0((uint64_t)a1, &qword_26A4DA710);
      goto LABEL_7;
    }
    uint64_t v18 = *((void *)a2 + 1);
    *(void *)a1 = *(void *)a2;
    *((void *)a1 + 1) = v18;
    swift_bridgeObjectRelease();
    uint64_t v19 = *((void *)a2 + 3);
    *((void *)a1 + 2) = *((void *)a2 + 2);
    *((void *)a1 + 3) = v19;
    swift_bridgeObjectRelease();
    uint64_t v20 = *((void *)a2 + 5);
    *((void *)a1 + 4) = *((void *)a2 + 4);
    *((void *)a1 + 5) = v20;
    swift_bridgeObjectRelease();
    uint64_t v21 = *(int *)(type metadata accessor for Record.ID(0) + 24);
    uint64_t v22 = &a1[v21];
    int v23 = &a2[v21];
    uint64_t v24 = sub_25B290080();
    uint64_t v25 = *(void *)(v24 - 8);
    uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    int v27 = v26(v22, 1, v24);
    int v28 = v26(v23, 1, v24);
    if (v27)
    {
      if (!v28)
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v28)
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_19:
        uint64_t v37 = (int *)type metadata accessor for RecordMetadata();
        *(void *)&a1[v37[5]] = *(void *)&a2[v37[5]];
        swift_release();
        (*(void (**)(char *, char *, uint64_t))(v25 + 40))(&a1[v37[6]], &a2[v37[6]], v24);
        *(void *)&a1[v37[7]] = *(void *)&a2[v37[7]];
        swift_bridgeObjectRelease();
        uint64_t v38 = v37[8];
        uint64_t v39 = &a1[v38];
        uint64_t v40 = &a2[v38];
        uint64_t v41 = sub_25B290000();
        uint64_t v42 = *(void *)(v41 - 8);
        uint64_t v43 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48);
        size_t v51 = v39;
        LODWORD(v39) = v43(v39, 1, v41);
        int v44 = v43(v40, 1, v41);
        if (v39)
        {
          if (!v44)
          {
            (*(void (**)(void *, char *, uint64_t))(v42 + 32))(v51, v40, v41);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v42 + 56))(v51, 0, 1, v41);
            goto LABEL_28;
          }
          size_t v45 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
          uint64_t v46 = v51;
        }
        else
        {
          if (!v44)
          {
            (*(void (**)(void *, char *, uint64_t))(v42 + 40))(v51, v40, v41);
            goto LABEL_28;
          }
          (*(void (**)(void *, uint64_t))(v42 + 8))(v51, v41);
          size_t v45 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
          uint64_t v46 = v51;
        }
        memcpy(v46, v40, v45);
LABEL_28:
        *(void *)&a1[v37[9]] = *(void *)&a2[v37[9]];
        uint64_t v47 = *(int *)(v6 + 48);
        uint64_t v48 = *(void *)&a1[v47];
        unint64_t v49 = *(void *)&a1[v47 + 8];
        *(_OWORD *)&a1[v47] = *(_OWORD *)&a2[v47];
        sub_25B10DFF0(v48, v49);
        return a1;
      }
      (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    }
    uint64_t v36 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v22, v23, *(void *)(*(void *)(v36 - 8) + 64));
    goto LABEL_19;
  }
  if (v10)
  {
LABEL_7:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  long long v11 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v11;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  uint64_t v12 = *(int *)(type metadata accessor for Record.ID(0) + 24);
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = sub_25B290080();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    uint64_t v17 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  uint64_t v29 = (int *)type metadata accessor for RecordMetadata();
  *(void *)&a1[v29[5]] = *(void *)&a2[v29[5]];
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&a1[v29[6]], &a2[v29[6]], v15);
  *(void *)&a1[v29[7]] = *(void *)&a2[v29[7]];
  uint64_t v30 = v29[8];
  uint64_t v31 = &a1[v30];
  uint64_t v32 = &a2[v30];
  uint64_t v33 = sub_25B290000();
  uint64_t v34 = *(void *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    uint64_t v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(v31, v32, *(void *)(*(void *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v31, v32, v33);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  *(void *)&a1[v29[9]] = *(void *)&a2[v29[9]];
  *(_OWORD *)&a1[*(int *)(v6 + 48)] = *(_OWORD *)&a2[*(int *)(v6 + 48)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_25B268C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B268C98);
}

uint64_t sub_25B268C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2) {
    return v5 - 1;
  }
  else {
    return 0;
  }
}

uint64_t sub_25B268D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B268D1C);
}

uint64_t sub_25B268D1C(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 1);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(a1, v5, a3, v6);
}

uint64_t sub_25B268DA0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);
  return v3(a1, 1, v2);
}

uint64_t sub_25B268E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, 1, v4);
}

uint64_t sub_25B268E80()
{
  uint64_t result = type metadata accessor for RecordMetadata();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_25B268F14(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    uint64_t v9 = a2[5];
    a1[4] = a2[4];
    a1[5] = v9;
    uint64_t v52 = type metadata accessor for Record.ID(0);
    uint64_t v10 = *(int *)(v52 + 24);
    __dst = (char *)v4 + v10;
    long long v11 = (char *)a2 + v10;
    uint64_t v12 = sub_25B290080();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    uint64_t v15 = v12;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v53 = v14;
    unint64_t v54 = (void (**)(void *, const void *, void))v13;
    if (v14(v11, 1, v15))
    {
      uint64_t v16 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(__dst, v11, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v15);
    }
    uint64_t v18 = *(int *)(a3 + 20);
    uint64_t v19 = (uint64_t *)((char *)v4 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
    uint64_t v22 = *(void *)(v21 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      uint64_t v23 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      uint64_t v51 = v22;
      __dsta = (int *)v21;
      uint64_t v24 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v24;
      uint64_t v25 = v15;
      uint64_t v26 = v20[3];
      v19[2] = v20[2];
      v19[3] = v26;
      uint64_t v27 = v20[5];
      v19[4] = v20[4];
      v19[5] = v27;
      uint64_t v28 = *(int *)(v52 + 24);
      uint64_t v29 = (char *)v19 + v28;
      uint64_t v30 = (char *)v20 + v28;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v53(v30, 1, v25))
      {
        uint64_t v31 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v29, v30, *(void *)(*(void *)(v31 - 8) + 64));
        uint64_t v32 = v54;
      }
      else
      {
        uint64_t v32 = v54;
        v54[2](v29, v30, v25);
        ((void (*)(char *, void, uint64_t, uint64_t))v54[7])(v29, 0, 1, v25);
      }
      uint64_t v33 = v25;
      uint64_t v34 = (int *)type metadata accessor for RecordMetadata();
      *(void *)((char *)v19 + v34[5]) = *(void *)((char *)v20 + v34[5]);
      uint64_t v35 = v34[6];
      uint64_t v36 = (char *)v19 + v35;
      uint64_t v37 = (char *)v20 + v35;
      uint64_t v38 = v32[2];
      swift_retain();
      v38(v36, v37, v33);
      *(void *)((char *)v19 + v34[7]) = *(void *)((char *)v20 + v34[7]);
      uint64_t v39 = v34[8];
      uint64_t v55 = (char *)v19 + v39;
      uint64_t v40 = (char *)v20 + v39;
      uint64_t v41 = sub_25B290000();
      uint64_t v42 = *(void *)(v41 - 8);
      uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
      swift_bridgeObjectRetain();
      if (v43(v40, 1, v41))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
        memcpy(v55, v40, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v55, v40, v41);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v55, 0, 1, v41);
      }
      *(void *)((char *)v19 + v34[9]) = *(void *)((char *)v20 + v34[9]);
      uint64_t v45 = __dsta[12];
      uint64_t v46 = (void *)((char *)v19 + v45);
      uint64_t v47 = (void *)((char *)v20 + v45);
      uint64_t v48 = *v47;
      unint64_t v49 = v47[1];
      sub_25B114300(*v47, v49);
      *uint64_t v46 = v48;
      v46[1] = v49;
      (*(void (**)(void *, void, uint64_t, int *))(v51 + 56))(v19, 0, 1, __dsta);
    }
  }
  return v4;
}

uint64_t sub_25B2693F8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Record.ID(0);
  uint64_t v5 = a1 + *(int *)(v4 + 24);
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10);
  if (!result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v9 + *(int *)(v4 + 24);
    if (!v8(v12, 1, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
    }
    uint64_t v13 = type metadata accessor for RecordMetadata();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9 + *(int *)(v13 + 24), v6);
    swift_bridgeObjectRelease();
    uint64_t v14 = v9 + *(int *)(v13 + 32);
    uint64_t v15 = sub_25B290000();
    uint64_t v16 = *(void *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15)) {
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    }
    uint64_t v17 = (uint64_t *)(v9 + *(int *)(v10 + 48));
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    return sub_25B10DFF0(v18, v19);
  }
  return result;
}

void *sub_25B269670(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v50 = type metadata accessor for Record.ID(0);
  uint64_t v8 = *(int *)(v50 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_25B290080();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v14 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v51 = v13;
  __dst = (void (**)(void *, const void *, void))v12;
  if (v13(v10, 1, v14))
  {
    uint64_t v15 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v9, v10, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v14);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v14);
  }
  uint64_t v16 = *(int *)(a3 + 20);
  uint64_t v17 = (void *)((char *)a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    uint64_t v49 = v20;
    uint64_t v55 = v19;
    uint64_t v22 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v22;
    uint64_t v23 = v14;
    uint64_t v24 = v18[3];
    v17[2] = v18[2];
    v17[3] = v24;
    uint64_t v25 = v18[5];
    v17[4] = v18[4];
    v17[5] = v25;
    uint64_t v26 = *(int *)(v50 + 24);
    uint64_t v27 = (char *)v17 + v26;
    uint64_t v28 = (char *)v18 + v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v51(v28, 1, v23))
    {
      uint64_t v29 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
      uint64_t v30 = __dst;
    }
    else
    {
      uint64_t v30 = __dst;
      __dst[2](v27, v28, v23);
      ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v27, 0, 1, v23);
    }
    uint64_t v31 = v23;
    uint64_t v32 = (int *)type metadata accessor for RecordMetadata();
    *(void *)((char *)v17 + v32[5]) = *(void *)((char *)v18 + v32[5]);
    uint64_t v33 = v32[6];
    uint64_t v34 = (char *)v17 + v33;
    uint64_t v35 = (char *)v18 + v33;
    uint64_t v36 = v30[2];
    swift_retain();
    v36(v34, v35, v31);
    *(void *)((char *)v17 + v32[7]) = *(void *)((char *)v18 + v32[7]);
    uint64_t v37 = v32[8];
    __dsta = (char *)v17 + v37;
    uint64_t v38 = (char *)v18 + v37;
    uint64_t v39 = sub_25B290000();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48);
    swift_bridgeObjectRetain();
    if (v41(v38, 1, v39))
    {
      uint64_t v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(__dsta, v38, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(__dsta, v38, v39);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(__dsta, 0, 1, v39);
    }
    *(void *)((char *)v17 + v32[9]) = *(void *)((char *)v18 + v32[9]);
    uint64_t v43 = *(int *)(v55 + 48);
    uint64_t v44 = (void *)((char *)v17 + v43);
    uint64_t v45 = (void *)((char *)v18 + v43);
    uint64_t v46 = *v45;
    unint64_t v47 = v45[1];
    sub_25B114300(*v45, v47);
    *uint64_t v44 = v46;
    v44[1] = v47;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v49 + 56))(v17, 0, 1, v55);
  }
  return a1;
}

void *sub_25B269B00(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst = (int *)type metadata accessor for Record.ID(0);
  uint64_t v6 = __dst[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25B290080();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v71 = v10;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  __src = *(void **)(v18 - 8);
  uint64_t v19 = (uint64_t (*)(char *, uint64_t, uint64_t))__src[6];
  int v20 = v19(v16, 1, v18);
  int v21 = v19(v17, 1, v18);
  if (!v20)
  {
    if (v21)
    {
      sub_25B116DE0((uint64_t)v16, &qword_26A4DA710);
      goto LABEL_13;
    }
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = *((void *)v17 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v16 + 2) = *((void *)v17 + 2);
    *((void *)v16 + 3) = *((void *)v17 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v16 + 4) = *((void *)v17 + 4);
    *((void *)v16 + 5) = *((void *)v17 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = __dst[6];
    uint64_t v28 = &v16[v27];
    uint64_t v29 = &v17[v27];
    int v30 = v11(&v16[v27], 1, v9);
    int v31 = v11(v29, 1, v9);
    if (v30)
    {
      if (v31)
      {
        uint64_t v32 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        uint64_t v33 = v71;
      }
      else
      {
        uint64_t v33 = v71;
        (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v28, v29, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v71 + 56))(v28, 0, 1, v9);
      }
    }
    else
    {
      uint64_t v33 = v71;
      if (v31)
      {
        (*(void (**)(char *, uint64_t))(v71 + 8))(v28, v9);
        uint64_t v50 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v28, v29, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v71 + 24))(v28, v29, v9);
      }
    }
    uint64_t v51 = (int *)type metadata accessor for RecordMetadata();
    *(void *)&v16[v51[5]] = *(void *)&v17[v51[5]];
    swift_retain();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v33 + 24))(&v16[v51[6]], &v17[v51[6]], v9);
    *(void *)&v16[v51[7]] = *(void *)&v17[v51[7]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __dstc = v51;
    uint64_t v52 = v51[8];
    uint64_t v53 = &v16[v52];
    unint64_t v54 = &v17[v52];
    uint64_t v55 = sub_25B290000();
    uint64_t v56 = *(void *)(v55 - 8);
    unint64_t v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    uint64_t v72 = v53;
    LODWORD(v53) = v57(v53, 1, v55);
    int v58 = v57(v54, 1, v55);
    if (v53)
    {
      if (!v58)
      {
        (*(void (**)(void *, char *, uint64_t))(v56 + 16))(v72, v54, v55);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v72, 0, 1, v55);
        goto LABEL_35;
      }
      size_t v59 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
      uint64_t v60 = v72;
    }
    else
    {
      if (!v58)
      {
        (*(void (**)(void *, char *, uint64_t))(v56 + 24))(v72, v54, v55);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v56 + 8))(v72, v55);
      size_t v59 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
      uint64_t v60 = v72;
    }
    memcpy(v60, v54, v59);
LABEL_35:
    *(void *)&v16[__dstc[9]] = *(void *)&v17[__dstc[9]];
    uint64_t v61 = *(int *)(v18 + 48);
    uint64_t v62 = (uint64_t *)&v16[v61];
    uint64_t v63 = (uint64_t *)&v17[v61];
    uint64_t v64 = *v63;
    unint64_t v65 = v63[1];
    sub_25B114300(*v63, v65);
    uint64_t v66 = *v62;
    unint64_t v67 = v62[1];
    *uint64_t v62 = v64;
    v62[1] = v65;
    sub_25B10DFF0(v66, v67);
    return a1;
  }
  if (v21)
  {
LABEL_13:
    uint64_t v26 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v16, v17, *(void *)(*(void *)(v26 - 8) + 64));
    return a1;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  *((void *)v16 + 2) = *((void *)v17 + 2);
  *((void *)v16 + 3) = *((void *)v17 + 3);
  *((void *)v16 + 4) = *((void *)v17 + 4);
  *((void *)v16 + 5) = *((void *)v17 + 5);
  uint64_t v22 = __dst[6];
  __dsta = &v16[v22];
  uint64_t v23 = &v17[v22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v69 = v18;
  if (v11(v23, 1, v9))
  {
    uint64_t v24 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(__dsta, v23, *(void *)(*(void *)(v24 - 8) + 64));
    uint64_t v25 = v10;
  }
  else
  {
    uint64_t v25 = v10;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dsta, v23, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dsta, 0, 1, v9);
  }
  uint64_t v34 = (int *)type metadata accessor for RecordMetadata();
  *(void *)&v16[v34[5]] = *(void *)&v17[v34[5]];
  uint64_t v35 = v34[6];
  uint64_t v36 = &v16[v35];
  uint64_t v37 = &v17[v35];
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  swift_retain();
  v38(v36, v37, v9);
  *(void *)&v16[v34[7]] = *(void *)&v17[v34[7]];
  uint64_t v39 = v34[8];
  __dstb = &v16[v39];
  uint64_t v40 = &v17[v39];
  uint64_t v41 = sub_25B290000();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  swift_bridgeObjectRetain();
  if (v43(v40, 1, v41))
  {
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(__dstb, v40, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dstb, v40, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(__dstb, 0, 1, v41);
  }
  *(void *)&v16[v34[9]] = *(void *)&v17[v34[9]];
  uint64_t v45 = *(int *)(v69 + 48);
  uint64_t v46 = (uint64_t *)&v16[v45];
  unint64_t v47 = (uint64_t *)&v17[v45];
  uint64_t v48 = *v47;
  unint64_t v49 = v47[1];
  sub_25B114300(*v47, v49);
  *uint64_t v46 = v48;
  v46[1] = v49;
  ((void (*)(char *, void, uint64_t, uint64_t))__src[7])(v16, 0, 1, v69);
  return a1;
}

_OWORD *sub_25B26A400(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = type metadata accessor for Record.ID(0);
  uint64_t v8 = *(int *)(v7 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_25B290080();
  uint64_t v12 = *(void *)(v11 - 8);
  int v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (_OWORD *)((char *)a1 + v15);
  uint64_t v17 = (_OWORD *)((char *)a2 + v15);
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    uint64_t v34 = v19;
    long long v21 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v21;
    v16[2] = v17[2];
    uint64_t v22 = *(int *)(v7 + 24);
    uint64_t v23 = (char *)v16 + v22;
    uint64_t v24 = (char *)v17 + v22;
    if (v13((char *)v17 + v22, 1, v11))
    {
      uint64_t v25 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v23, v24, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v23, v24, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
    }
    uint64_t v26 = (int *)type metadata accessor for RecordMetadata();
    *(void *)((char *)v16 + v26[5]) = *(void *)((char *)v17 + v26[5]);
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v16 + v26[6], (char *)v17 + v26[6], v11);
    *(void *)((char *)v16 + v26[7]) = *(void *)((char *)v17 + v26[7]);
    uint64_t v27 = v26[8];
    uint64_t v28 = (char *)v16 + v27;
    uint64_t v29 = (char *)v17 + v27;
    uint64_t v30 = sub_25B290000();
    uint64_t v31 = *(void *)(v30 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v28, v29, v30);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    *(void *)((char *)v16 + v26[9]) = *(void *)((char *)v17 + v26[9]);
    *(_OWORD *)((char *)v16 + *(int *)(v18 + 48)) = *(_OWORD *)((char *)v17 + *(int *)(v18 + 48));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v34 + 56))(v16, 0, 1, v18);
  }
  return a1;
}

void *sub_25B26A7F8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  __src = (int *)type metadata accessor for Record.ID(0);
  uint64_t v9 = __src[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_25B290080();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  uint64_t v65 = v13;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v18 = *(int *)(a3 + 20);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v64 = *(void *)(v21 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 48);
  int v23 = v22(v19, 1, v21);
  uint64_t v68 = v21;
  int v24 = v22(v20, 1, v21);
  if (!v23)
  {
    if (v24)
    {
      sub_25B116DE0((uint64_t)v19, &qword_26A4DA710);
      goto LABEL_13;
    }
    uint64_t v32 = *((void *)v20 + 1);
    *(void *)uint64_t v19 = *(void *)v20;
    *((void *)v19 + 1) = v32;
    swift_bridgeObjectRelease();
    uint64_t v33 = *((void *)v20 + 3);
    *((void *)v19 + 2) = *((void *)v20 + 2);
    *((void *)v19 + 3) = v33;
    swift_bridgeObjectRelease();
    uint64_t v34 = *((void *)v20 + 5);
    *((void *)v19 + 4) = *((void *)v20 + 4);
    *((void *)v19 + 5) = v34;
    swift_bridgeObjectRelease();
    uint64_t v35 = __src[6];
    uint64_t v36 = &v19[v35];
    uint64_t v37 = &v20[v35];
    int v38 = v14(&v19[v35], 1, v12);
    int v39 = v14(v37, 1, v12);
    if (v38)
    {
      if (v39)
      {
        uint64_t v40 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64));
        uint64_t v41 = v65;
      }
      else
      {
        uint64_t v41 = v65;
        (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v36, v37, v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v36, 0, 1, v12);
      }
    }
    else
    {
      uint64_t v41 = v65;
      if (v39)
      {
        (*(void (**)(char *, uint64_t))(v65 + 8))(v36, v12);
        uint64_t v49 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v36, v37, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v65 + 40))(v36, v37, v12);
      }
    }
    uint64_t v50 = (int *)type metadata accessor for RecordMetadata();
    *(void *)&v19[v50[5]] = *(void *)&v20[v50[5]];
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v41 + 40))(&v19[v50[6]], &v20[v50[6]], v12);
    *(void *)&v19[v50[7]] = *(void *)&v20[v50[7]];
    swift_bridgeObjectRelease();
    uint64_t v51 = v50[8];
    uint64_t v52 = &v19[v51];
    uint64_t v53 = &v20[v51];
    uint64_t v54 = sub_25B290000();
    uint64_t v55 = *(void *)(v54 - 8);
    uint64_t v56 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 48);
    uint64_t v66 = v52;
    LODWORD(v52) = v56(v52, 1, v54);
    int v57 = v56(v53, 1, v54);
    if (v52)
    {
      if (!v57)
      {
        (*(void (**)(void *, char *, uint64_t))(v55 + 32))(v66, v53, v54);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v66, 0, 1, v54);
        goto LABEL_35;
      }
      size_t v58 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
      size_t v59 = v66;
    }
    else
    {
      if (!v57)
      {
        (*(void (**)(void *, char *, uint64_t))(v55 + 40))(v66, v53, v54);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v55 + 8))(v66, v54);
      size_t v58 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
      size_t v59 = v66;
    }
    memcpy(v59, v53, v58);
LABEL_35:
    *(void *)&v19[v50[9]] = *(void *)&v20[v50[9]];
    uint64_t v60 = *(int *)(v68 + 48);
    uint64_t v61 = *(void *)&v19[v60];
    unint64_t v62 = *(void *)&v19[v60 + 8];
    *(_OWORD *)&v19[v60] = *(_OWORD *)&v20[v60];
    sub_25B10DFF0(v61, v62);
    return a1;
  }
  if (v24)
  {
LABEL_13:
    uint64_t v31 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v19, v20, *(void *)(*(void *)(v31 - 8) + 64));
    return a1;
  }
  long long v25 = *((_OWORD *)v20 + 1);
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v25;
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  uint64_t v26 = __src[6];
  uint64_t v27 = &v19[v26];
  uint64_t v28 = &v20[v26];
  if (v14(&v20[v26], 1, v12))
  {
    uint64_t v29 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v27, v28, *(void *)(*(void *)(v29 - 8) + 64));
    uint64_t v30 = v65;
  }
  else
  {
    uint64_t v30 = v65;
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v27, v28, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v65 + 56))(v27, 0, 1, v12);
  }
  uint64_t v42 = (int *)type metadata accessor for RecordMetadata();
  *(void *)&v19[v42[5]] = *(void *)&v20[v42[5]];
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(&v19[v42[6]], &v20[v42[6]], v12);
  *(void *)&v19[v42[7]] = *(void *)&v20[v42[7]];
  uint64_t v43 = v42[8];
  uint64_t v44 = &v19[v43];
  uint64_t v45 = &v20[v43];
  uint64_t v46 = sub_25B290000();
  uint64_t v47 = *(void *)(v46 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
  {
    uint64_t v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(v44, v45, *(void *)(*(void *)(v48 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v44, v45, v46);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  *(void *)&v19[v42[9]] = *(void *)&v20[v42[9]];
  *(_OWORD *)&v19[*(int *)(v68 + 48)] = *(_OWORD *)&v20[*(int *)(v68 + 48)];
  (*(void (**)(char *, void, uint64_t))(v64 + 56))(v19, 0, 1);
  return a1;
}

uint64_t sub_25B26B004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B26B018);
}

uint64_t sub_25B26B018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_37Tm(a1, a2, a3, type metadata accessor for Record.ID, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
}

uint64_t __swift_get_extra_inhabitant_index_37Tm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a4(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if (*(_DWORD *)(v10 + 84) == a2)
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
    return v11(a1, a2, v9);
  }
  else
  {
    uint64_t v13 = a5(0);
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
    uint64_t v15 = v13;
    uint64_t v16 = a1 + *(int *)(a3 + 20);
    return v14(v16, a2, v15);
  }
}

uint64_t sub_25B26B148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B26B15C);
}

uint64_t sub_25B26B15C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_38Tm(a1, a2, a3, a4, type metadata accessor for Record.ID, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
}

uint64_t __swift_store_extra_inhabitant_index_38Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  uint64_t v11 = a5(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a3)
  {
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
    return v13(a1, a2, a2, v11);
  }
  else
  {
    uint64_t v15 = a6(0);
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + *(int *)(a4 + 20);
    return v16(v18, a2, a2, v17);
  }
}

uint64_t sub_25B26B2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B26B2D0(a1, a2, a3, type metadata accessor for Record.ID, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
}

uint64_t sub_25B26B2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t))
{
  uint64_t result = a4(319);
  if (v7 <= 0x3F)
  {
    uint64_t result = a5(319);
    if (v8 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_25B26B3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B26B3D0);
}

uint64_t sub_25B26B3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_37Tm(a1, a2, a3, type metadata accessor for Record.ID, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
}

uint64_t sub_25B26B3FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B26B410);
}

uint64_t sub_25B26B410(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_38Tm(a1, a2, a3, a4, type metadata accessor for Record.ID, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
}

uint64_t *sub_25B26B440(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v52 = type metadata accessor for Record.ID(0);
    uint64_t v9 = *(int *)(v52 + 24);
    __dst = (char *)v4 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = sub_25B290080();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v53 = v13;
    uint64_t v55 = v12;
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v16 = a3;
    uint64_t v17 = v11;
    uint64_t v18 = *(int *)(a3 + 20);
    uint64_t v19 = (uint64_t *)((char *)v4 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
    uint64_t v22 = *(unsigned int (***)(void *, uint64_t, uint64_t))(v21 - 8);
    if (v22[6](v20, 1, v21))
    {
      uint64_t v23 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
      memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      __dsta = v22;
      uint64_t v51 = v21;
      uint64_t v24 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v24;
      uint64_t v25 = v20[3];
      v19[2] = v20[2];
      v19[3] = v25;
      uint64_t v26 = v20[5];
      v19[4] = v20[4];
      v19[5] = v26;
      uint64_t v27 = *(int *)(v52 + 24);
      uint64_t v28 = (char *)v19 + v27;
      uint64_t v29 = (char *)v20 + v27;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v53(v29, 1, v17))
      {
        uint64_t v30 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
        uint64_t v31 = v55;
      }
      else
      {
        uint64_t v31 = v55;
        (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v28, v29, v17);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(v28, 0, 1, v17);
      }
      uint64_t v32 = (int *)type metadata accessor for RecordMetadata();
      *(void *)((char *)v19 + v32[5]) = *(void *)((char *)v20 + v32[5]);
      uint64_t v33 = v32[6];
      uint64_t v34 = (char *)v19 + v33;
      uint64_t v35 = (char *)v20 + v33;
      uint64_t v36 = *(void (**)(char *, char *, uint64_t))(v31 + 16);
      swift_retain();
      v36(v34, v35, v17);
      *(void *)((char *)v19 + v32[7]) = *(void *)((char *)v20 + v32[7]);
      uint64_t v37 = v32[8];
      uint64_t v54 = (char *)v19 + v37;
      uint64_t v56 = (char *)v20 + v37;
      uint64_t v38 = sub_25B290000();
      uint64_t v39 = *(void *)(v38 - 8);
      uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      swift_bridgeObjectRetain();
      if (v40(v56, 1, v38))
      {
        uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
        memcpy(v54, v56, *(void *)(*(void *)(v41 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v54, v56, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v54, 0, 1, v38);
      }
      *(void *)((char *)v19 + v32[9]) = *(void *)((char *)v20 + v32[9]);
      uint64_t v42 = *(int *)(v51 + 48);
      uint64_t v43 = (void *)((char *)v19 + v42);
      uint64_t v44 = (void *)((char *)v20 + v42);
      uint64_t v45 = *v44;
      unint64_t v46 = v44[1];
      sub_25B114300(*v44, v46);
      *uint64_t v43 = v45;
      v43[1] = v46;
      (*((void (**)(void *, void, uint64_t, uint64_t))__dsta + 7))(v19, 0, 1, v51);
      uint64_t v16 = a3;
    }
    uint64_t v47 = *(int *)(v16 + 24);
    uint64_t v48 = (char *)v4 + v47;
    uint64_t v49 = (char *)a2 + v47;
    *(void *)uint64_t v48 = *(void *)v49;
    v48[8] = v49[8];
  }
  return v4;
}

void *sub_25B26B944(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v56 = type metadata accessor for Record.ID(0);
  uint64_t v8 = *(int *)(v56 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v60 = a2;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_25B290080();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v57 = v13;
  __dst = (void *)v12;
  if (v13(v10, 1, v11))
  {
    uint64_t v14 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v15 = v60;
  uint64_t v16 = a3;
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (void *)((char *)v60 + v17);
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v21 = *(void *)(v20 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    uint64_t v22 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    uint64_t v54 = v21;
    uint64_t v55 = v20;
    uint64_t v23 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v23;
    uint64_t v24 = v11;
    uint64_t v25 = v19[3];
    v18[2] = v19[2];
    void v18[3] = v25;
    uint64_t v26 = v19[5];
    v18[4] = v19[4];
    v18[5] = v26;
    uint64_t v27 = *(int *)(v56 + 24);
    uint64_t v28 = (char *)v18 + v27;
    uint64_t v29 = (char *)v19 + v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v57(v29, 1, v24))
    {
      uint64_t v30 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64));
      uint64_t v31 = __dst;
    }
    else
    {
      uint64_t v32 = v28;
      uint64_t v31 = __dst;
      ((void (*)(char *, char *, uint64_t))__dst[2])(v32, v29, v24);
      ((void (*)(char *, void, uint64_t, uint64_t))__dst[7])(v32, 0, 1, v24);
    }
    uint64_t v33 = v24;
    uint64_t v34 = (int *)type metadata accessor for RecordMetadata();
    *(void *)((char *)v18 + v34[5]) = *(void *)((char *)v19 + v34[5]);
    uint64_t v35 = v34[6];
    uint64_t v36 = (char *)v18 + v35;
    uint64_t v37 = (char *)v19 + v35;
    uint64_t v38 = (void (*)(char *, char *, uint64_t))v31[2];
    swift_retain();
    v38(v36, v37, v33);
    *(void *)((char *)v18 + v34[7]) = *(void *)((char *)v19 + v34[7]);
    uint64_t v39 = v34[8];
    __dsta = (char *)v18 + v39;
    uint64_t v40 = (char *)v19 + v39;
    uint64_t v41 = sub_25B290000();
    uint64_t v42 = *(void *)(v41 - 8);
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
    swift_bridgeObjectRetain();
    if (v43(v40, 1, v41))
    {
      uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(__dsta, v40, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dsta, v40, v41);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(__dsta, 0, 1, v41);
    }
    uint64_t v15 = v60;
    *(void *)((char *)v18 + v34[9]) = *(void *)((char *)v19 + v34[9]);
    uint64_t v45 = *(int *)(v55 + 48);
    unint64_t v46 = (void *)((char *)v18 + v45);
    uint64_t v47 = (void *)((char *)v19 + v45);
    uint64_t v48 = *v47;
    unint64_t v49 = v47[1];
    sub_25B114300(*v47, v49);
    *unint64_t v46 = v48;
    v46[1] = v49;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v54 + 56))(v18, 0, 1, v55);
    uint64_t v16 = a3;
  }
  uint64_t v50 = *(int *)(v16 + 24);
  uint64_t v51 = (char *)a1 + v50;
  uint64_t v52 = (uint64_t)v15 + v50;
  *(void *)uint64_t v51 = *(void *)v52;
  v51[8] = *(unsigned char *)(v52 + 8);
  return a1;
}

void *sub_25B26BDF4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dst = (int *)type metadata accessor for Record.ID(0);
  uint64_t v6 = __dst[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_25B290080();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  uint64_t v75 = v10;
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v81 = a3;
  uint64_t v82 = a2;
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  __src = *(void **)(v18 - 8);
  uint64_t v19 = (uint64_t (*)(char *, uint64_t, uint64_t))__src[6];
  int v20 = v19(v16, 1, v18);
  int v21 = v19(v17, 1, v18);
  if (!v20)
  {
    if (v21)
    {
      sub_25B116DE0((uint64_t)v16, &qword_26A4DA710);
      goto LABEL_13;
    }
    *(void *)uint64_t v16 = *(void *)v17;
    *((void *)v16 + 1) = *((void *)v17 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v16 + 2) = *((void *)v17 + 2);
    *((void *)v16 + 3) = *((void *)v17 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *((void *)v16 + 4) = *((void *)v17 + 4);
    *((void *)v16 + 5) = *((void *)v17 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v27 = __dst[6];
    uint64_t v28 = &v16[v27];
    uint64_t v29 = &v17[v27];
    int v30 = v11(&v16[v27], 1, v9);
    int v31 = v11(v29, 1, v9);
    if (v30)
    {
      if (v31)
      {
        uint64_t v32 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
        uint64_t v33 = v75;
      }
      else
      {
        uint64_t v33 = v75;
        (*(void (**)(char *, char *, uint64_t))(v75 + 16))(v28, v29, v9);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v28, 0, 1, v9);
      }
    }
    else
    {
      uint64_t v33 = v75;
      if (v31)
      {
        (*(void (**)(char *, uint64_t))(v75 + 8))(v28, v9);
        uint64_t v50 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v28, v29, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v75 + 24))(v28, v29, v9);
      }
    }
    uint64_t v51 = (int *)type metadata accessor for RecordMetadata();
    *(void *)&v16[v51[5]] = *(void *)&v17[v51[5]];
    swift_retain();
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v33 + 24))(&v16[v51[6]], &v17[v51[6]], v9);
    *(void *)&v16[v51[7]] = *(void *)&v17[v51[7]];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    __dstc = v51;
    uint64_t v52 = v51[8];
    uint64_t v53 = &v16[v52];
    uint64_t v54 = &v17[v52];
    uint64_t v55 = sub_25B290000();
    uint64_t v56 = *(void *)(v55 - 8);
    int v57 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 48);
    uint64_t v76 = v53;
    LODWORD(v53) = v57(v53, 1, v55);
    int v58 = v57(v54, 1, v55);
    if (v53)
    {
      if (!v58)
      {
        (*(void (**)(void *, char *, uint64_t))(v56 + 16))(v76, v54, v55);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v56 + 56))(v76, 0, 1, v55);
        goto LABEL_35;
      }
      size_t v59 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
      uint64_t v60 = v76;
    }
    else
    {
      if (!v58)
      {
        (*(void (**)(void *, char *, uint64_t))(v56 + 24))(v76, v54, v55);
        goto LABEL_35;
      }
      (*(void (**)(void *, uint64_t))(v56 + 8))(v76, v55);
      size_t v59 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
      uint64_t v60 = v76;
    }
    memcpy(v60, v54, v59);
LABEL_35:
    *(void *)&v16[__dstc[9]] = *(void *)&v17[__dstc[9]];
    uint64_t v61 = *(int *)(v18 + 48);
    unint64_t v62 = (uint64_t *)&v16[v61];
    uint64_t v63 = (uint64_t *)&v17[v61];
    uint64_t v64 = *v63;
    unint64_t v65 = v63[1];
    sub_25B114300(*v63, v65);
    uint64_t v66 = *v62;
    unint64_t v67 = v62[1];
    *unint64_t v62 = v64;
    v62[1] = v65;
    sub_25B10DFF0(v66, v67);
    goto LABEL_36;
  }
  if (v21)
  {
LABEL_13:
    uint64_t v26 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v16, v17, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_36;
  }
  *(void *)uint64_t v16 = *(void *)v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  *((void *)v16 + 2) = *((void *)v17 + 2);
  *((void *)v16 + 3) = *((void *)v17 + 3);
  *((void *)v16 + 4) = *((void *)v17 + 4);
  *((void *)v16 + 5) = *((void *)v17 + 5);
  uint64_t v22 = __dst[6];
  __dsta = &v16[v22];
  uint64_t v23 = &v17[v22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v73 = v18;
  if (v11(v23, 1, v9))
  {
    uint64_t v24 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(__dsta, v23, *(void *)(*(void *)(v24 - 8) + 64));
    uint64_t v25 = v10;
  }
  else
  {
    uint64_t v25 = v10;
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dsta, v23, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dsta, 0, 1, v9);
  }
  uint64_t v34 = (int *)type metadata accessor for RecordMetadata();
  *(void *)&v16[v34[5]] = *(void *)&v17[v34[5]];
  uint64_t v35 = v34[6];
  uint64_t v36 = &v16[v35];
  uint64_t v37 = &v17[v35];
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  swift_retain();
  v38(v36, v37, v9);
  *(void *)&v16[v34[7]] = *(void *)&v17[v34[7]];
  uint64_t v39 = v34[8];
  __dstb = &v16[v39];
  uint64_t v40 = &v17[v39];
  uint64_t v41 = sub_25B290000();
  uint64_t v42 = *(void *)(v41 - 8);
  uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48);
  swift_bridgeObjectRetain();
  if (v43(v40, 1, v41))
  {
    uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(__dstb, v40, *(void *)(*(void *)(v44 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))(__dstb, v40, v41);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(__dstb, 0, 1, v41);
  }
  *(void *)&v16[v34[9]] = *(void *)&v17[v34[9]];
  uint64_t v45 = *(int *)(v73 + 48);
  unint64_t v46 = (uint64_t *)&v16[v45];
  uint64_t v47 = (uint64_t *)&v17[v45];
  uint64_t v48 = *v47;
  unint64_t v49 = v47[1];
  sub_25B114300(*v47, v49);
  *unint64_t v46 = v48;
  v46[1] = v49;
  ((void (*)(char *, void, uint64_t, uint64_t))__src[7])(v16, 0, 1, v73);
LABEL_36:
  uint64_t v68 = *(int *)(v81 + 24);
  uint64_t v69 = (char *)a1 + v68;
  uint64_t v70 = (char *)v82 + v68;
  uint64_t v71 = *(void *)v70;
  v69[8] = v70[8];
  *(void *)uint64_t v69 = v71;
  return a1;
}

_OWORD *sub_25B26C714(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v38 = type metadata accessor for Record.ID(0);
  uint64_t v7 = *(int *)(v38 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_25B290080();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v37(v9, 1, v10))
  {
    uint64_t v12 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v13 = *(int *)(a3 + 20);
  uint64_t v14 = (_OWORD *)((char *)a1 + v13);
  uint64_t v15 = (_OWORD *)((char *)a2 + v13);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v35 = v16;
    uint64_t v36 = a3;
    long long v19 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v19;
    v14[2] = v15[2];
    uint64_t v20 = *(int *)(v38 + 24);
    int v21 = (char *)v14 + v20;
    uint64_t v22 = (char *)v15 + v20;
    if (v37((char *)v15 + v20, 1, v10))
    {
      uint64_t v23 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v21, v22, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
    }
    uint64_t v24 = (int *)type metadata accessor for RecordMetadata();
    *(void *)((char *)v14 + v24[5]) = *(void *)((char *)v15 + v24[5]);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))((char *)v14 + v24[6], (char *)v15 + v24[6], v10);
    *(void *)((char *)v14 + v24[7]) = *(void *)((char *)v15 + v24[7]);
    uint64_t v25 = v24[8];
    uint64_t v26 = (char *)v14 + v25;
    uint64_t v27 = (char *)v15 + v25;
    uint64_t v28 = sub_25B290000();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    *(void *)((char *)v14 + v24[9]) = *(void *)((char *)v15 + v24[9]);
    *(_OWORD *)((char *)v14 + *(int *)(v35 + 48)) = *(_OWORD *)((char *)v15 + *(int *)(v35 + 48));
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v35);
    a3 = v36;
  }
  uint64_t v31 = *(int *)(a3 + 24);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  *(void *)uint64_t v32 = *(void *)v33;
  v32[8] = v33[8];
  return a1;
}

void *sub_25B26CB40(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease();
  __src = (int *)type metadata accessor for Record.ID(0);
  uint64_t v9 = __src[6];
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = sub_25B290080();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  uint64_t v77 = v12;
  uint64_t v75 = v13;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  uint64_t v80 = a2;
  uint64_t v82 = a3;
  uint64_t v18 = *(int *)(a3 + 20);
  long long v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DA710);
  uint64_t v74 = *(void *)(v21 - 8);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  uint64_t v23 = v19;
  int v24 = v22(v19, 1, v21);
  uint64_t v25 = v20;
  uint64_t v79 = v21;
  int v26 = v22(v20, 1, v21);
  if (!v24)
  {
    if (v26)
    {
      sub_25B116DE0((uint64_t)v23, &qword_26A4DA710);
      goto LABEL_13;
    }
    uint64_t v38 = *((void *)v20 + 1);
    uint64_t v39 = v23;
    *(void *)uint64_t v23 = *(void *)v20;
    *((void *)v23 + 1) = v38;
    swift_bridgeObjectRelease();
    uint64_t v40 = *((void *)v20 + 3);
    *((void *)v23 + 2) = *((void *)v20 + 2);
    *((void *)v23 + 3) = v40;
    swift_bridgeObjectRelease();
    uint64_t v41 = *((void *)v20 + 5);
    *((void *)v23 + 4) = *((void *)v20 + 4);
    *((void *)v23 + 5) = v41;
    swift_bridgeObjectRelease();
    uint64_t v42 = __src[6];
    uint64_t v43 = &v23[v42];
    uint64_t v44 = &v20[v42];
    int v45 = v14(&v23[v42], 1, v77);
    int v46 = v14(v44, 1, v77);
    if (v45)
    {
      if (v46)
      {
        uint64_t v47 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v43, v44, *(void *)(*(void *)(v47 - 8) + 64));
        uint64_t v33 = v80;
        uint64_t v48 = v75;
        goto LABEL_28;
      }
      uint64_t v48 = v75;
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v43, v44, v77);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v43, 0, 1, v77);
    }
    else
    {
      uint64_t v48 = v75;
      if (v46)
      {
        (*(void (**)(char *, uint64_t))(v75 + 8))(v43, v77);
        uint64_t v56 = type metadata accessor for Record.ID.Ownership(0);
        memcpy(v43, v44, *(void *)(*(void *)(v56 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v75 + 40))(v43, v44, v77);
      }
    }
    uint64_t v33 = v80;
LABEL_28:
    int v57 = (int *)type metadata accessor for RecordMetadata();
    *(void *)&v39[v57[5]] = *(void *)&v25[v57[5]];
    swift_release();
    (*(void (**)(char *, char *, uint64_t))(v48 + 40))(&v39[v57[6]], &v25[v57[6]], v77);
    *(void *)&v39[v57[7]] = *(void *)&v25[v57[7]];
    swift_bridgeObjectRelease();
    uint64_t v81 = v57;
    uint64_t v58 = v57[8];
    size_t v59 = &v39[v58];
    uint64_t v60 = &v25[v58];
    uint64_t v61 = sub_25B290000();
    uint64_t v62 = *(void *)(v61 - 8);
    uint64_t v63 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 48);
    unint64_t v78 = v59;
    LODWORD(v59) = v63(v59, 1, v61);
    int v64 = v63(v60, 1, v61);
    if (v59)
    {
      if (!v64)
      {
        (*(void (**)(void *, char *, uint64_t))(v62 + 32))(v78, v60, v61);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v62 + 56))(v78, 0, 1, v61);
        goto LABEL_36;
      }
      size_t v65 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
      uint64_t v66 = v78;
    }
    else
    {
      if (!v64)
      {
        (*(void (**)(void *, char *, uint64_t))(v62 + 40))(v78, v60, v61);
        goto LABEL_36;
      }
      (*(void (**)(void *, uint64_t))(v62 + 8))(v78, v61);
      size_t v65 = *(void *)(*(void *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8) - 8) + 64);
      uint64_t v66 = v78;
    }
    memcpy(v66, v60, v65);
LABEL_36:
    *(void *)&v39[v81[9]] = *(void *)&v25[v81[9]];
    uint64_t v67 = *(int *)(v79 + 48);
    uint64_t v68 = *(void *)&v39[v67];
    unint64_t v69 = *(void *)&v39[v67 + 8];
    *(_OWORD *)&v39[v67] = *(_OWORD *)&v25[v67];
    sub_25B10DFF0(v68, v69);
LABEL_37:
    uint64_t v37 = v82;
    goto LABEL_38;
  }
  if (!v26)
  {
    long long v27 = *((_OWORD *)v20 + 1);
    uint64_t v28 = v23;
    *(_OWORD *)uint64_t v23 = *(_OWORD *)v20;
    *((_OWORD *)v23 + 1) = v27;
    *((_OWORD *)v23 + 2) = *((_OWORD *)v20 + 2);
    uint64_t v29 = __src[6];
    uint64_t v30 = &v23[v29];
    uint64_t v31 = &v20[v29];
    int v32 = v14(&v20[v29], 1, v77);
    uint64_t v33 = v80;
    if (v32)
    {
      uint64_t v34 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
      uint64_t v35 = v75;
    }
    else
    {
      uint64_t v35 = v75;
      (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v30, v31, v77);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v75 + 56))(v30, 0, 1, v77);
    }
    unint64_t v49 = (int *)type metadata accessor for RecordMetadata();
    *(void *)&v23[v49[5]] = *(void *)&v25[v49[5]];
    (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v23[v49[6]], &v25[v49[6]], v77);
    *(void *)&v23[v49[7]] = *(void *)&v25[v49[7]];
    uint64_t v50 = v49[8];
    uint64_t v51 = &v23[v50];
    uint64_t v52 = &v25[v50];
    uint64_t v53 = sub_25B290000();
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v54 + 32))(v51, v52, v53);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
    }
    *(void *)((char *)v28 + v49[9]) = *(void *)&v25[v49[9]];
    *(_OWORD *)((char *)v28 + *(int *)(v79 + 48)) = *(_OWORD *)&v25[*(int *)(v79 + 48)];
    (*(void (**)(void *, void, uint64_t))(v74 + 56))(v28, 0, 1);
    goto LABEL_37;
  }
LABEL_13:
  uint64_t v36 = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(0);
  memcpy(v23, v20, *(void *)(*(void *)(v36 - 8) + 64));
  uint64_t v33 = v80;
  uint64_t v37 = a3;
LABEL_38:
  uint64_t v70 = *(int *)(v37 + 24);
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (uint64_t)v33 + v70;
  *(void *)uint64_t v71 = *(void *)v72;
  v71[8] = *(unsigned char *)(v72 + 8);
  return a1;
}

uint64_t sub_25B26D3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B26D3B4);
}

uint64_t sub_25B26D3B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_index_37Tm(a1, a2, a3, type metadata accessor for Record.ID, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
}

uint64_t sub_25B26D3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B26D3F4);
}

uint64_t sub_25B26D3F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_index_38Tm(a1, a2, a3, a4, type metadata accessor for Record.ID, type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value);
}

uint64_t sub_25B26D420()
{
  uint64_t result = type metadata accessor for Record.ID(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t sub_25B26D4F4()
{
  unint64_t result = qword_26A4DB618;
  if (!qword_26A4DB618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB618);
  }
  return result;
}

unint64_t sub_25B26D54C()
{
  unint64_t result = qword_26A4DB620;
  if (!qword_26A4DB620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB620);
  }
  return result;
}

unint64_t sub_25B26D5A4()
{
  unint64_t result = qword_26A4DB628;
  if (!qword_26A4DB628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB628);
  }
  return result;
}

unint64_t sub_25B26D5FC()
{
  unint64_t result = qword_26A4DB630;
  if (!qword_26A4DB630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB630);
  }
  return result;
}

unint64_t sub_25B26D654()
{
  unint64_t result = qword_26A4DB638;
  if (!qword_26A4DB638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB638);
  }
  return result;
}

unint64_t sub_25B26D6AC()
{
  unint64_t result = qword_26A4DB640;
  if (!qword_26A4DB640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB640);
  }
  return result;
}

unint64_t sub_25B26D704()
{
  unint64_t result = qword_26A4DB648;
  if (!qword_26A4DB648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB648);
  }
  return result;
}

unint64_t sub_25B26D75C()
{
  unint64_t result = qword_26A4DB650;
  if (!qword_26A4DB650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB650);
  }
  return result;
}

unint64_t sub_25B26D7B4()
{
  unint64_t result = qword_26A4DB658;
  if (!qword_26A4DB658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB658);
  }
  return result;
}

unint64_t sub_25B26D80C()
{
  unint64_t result = qword_26A4DB660;
  if (!qword_26A4DB660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB660);
  }
  return result;
}

unint64_t sub_25B26D864()
{
  unint64_t result = qword_26A4DB668;
  if (!qword_26A4DB668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB668);
  }
  return result;
}

unint64_t sub_25B26D8BC()
{
  unint64_t result = qword_26A4DB670;
  if (!qword_26A4DB670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB670);
  }
  return result;
}

unint64_t sub_25B26D914()
{
  unint64_t result = qword_26A4DB678;
  if (!qword_26A4DB678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB678);
  }
  return result;
}

unint64_t sub_25B26D96C()
{
  unint64_t result = qword_26A4DB680;
  if (!qword_26A4DB680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB680);
  }
  return result;
}

unint64_t sub_25B26D9C4()
{
  unint64_t result = qword_26A4DB688;
  if (!qword_26A4DB688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB688);
  }
  return result;
}

unint64_t sub_25B26DA1C()
{
  unint64_t result = qword_26A4DB690;
  if (!qword_26A4DB690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB690);
  }
  return result;
}

unint64_t sub_25B26DA74()
{
  unint64_t result = qword_26A4DB698;
  if (!qword_26A4DB698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB698);
  }
  return result;
}

unint64_t sub_25B26DACC()
{
  unint64_t result = qword_26A4DB6A0;
  if (!qword_26A4DB6A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB6A0);
  }
  return result;
}

void *sub_25B26DB20(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB998);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B270104();
  sub_25B291280();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB9A8);
    sub_25B270158();
    sub_25B290CC0();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_25B26DC98(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6B616873646E6168 && a2 == 0xE900000000000065;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1668184435 && a2 == 0xE400000000000000 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 7037793 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_25B26DDDC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1635017060 && a2 == 0xE400000000000000;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701736302 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25B26DEB0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 12383 && a2 == 0xE200000000000000;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 12639 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25B26DF74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_25B26E048()
{
  unint64_t result = qword_26A4DB6C0;
  if (!qword_26A4DB6C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB6C0);
  }
  return result;
}

unint64_t sub_25B26E09C()
{
  unint64_t result = qword_26A4DB6C8;
  if (!qword_26A4DB6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB6C8);
  }
  return result;
}

unint64_t sub_25B26E0F0()
{
  unint64_t result = qword_26A4DB6D0;
  if (!qword_26A4DB6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB6D0);
  }
  return result;
}

uint64_t sub_25B26E144(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65756C6176 && a2 == 0xE500000000000000 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6C6F636F746F7270 && a2 == 0xEF6E6F6973726556)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

unint64_t sub_25B26E2A0()
{
  unint64_t result = qword_26A4DB718;
  if (!qword_26A4DB718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB718);
  }
  return result;
}

unint64_t sub_25B26E2F4()
{
  unint64_t result = qword_26A4DB738;
  if (!qword_26A4DB738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB738);
  }
  return result;
}

unint64_t sub_25B26E348()
{
  unint64_t result = qword_26A4DB768;
  if (!qword_26A4DB768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB768);
  }
  return result;
}

unint64_t sub_25B26E39C()
{
  unint64_t result = qword_26A4DB770;
  if (!qword_26A4DB770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB770);
  }
  return result;
}

unint64_t sub_25B26E3F0()
{
  unint64_t result = qword_26A4DB780;
  if (!qword_26A4DB780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB780);
  }
  return result;
}

unint64_t sub_25B26E444()
{
  unint64_t result = qword_26A4DB790;
  if (!qword_26A4DB790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB790);
  }
  return result;
}

unint64_t sub_25B26E498()
{
  unint64_t result = qword_26A4DB7A8;
  if (!qword_26A4DB7A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB7A8);
  }
  return result;
}

unint64_t sub_25B26E4EC()
{
  unint64_t result = qword_26A4DB7F0;
  if (!qword_26A4DB7F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB7F0);
  }
  return result;
}

unint64_t sub_25B26E540()
{
  unint64_t result = qword_26A4DB7F8;
  if (!qword_26A4DB7F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB7F8);
  }
  return result;
}

unint64_t sub_25B26E594()
{
  unint64_t result = qword_26A4DB808;
  if (!qword_26A4DB808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB808);
  }
  return result;
}

unint64_t sub_25B26E5E8()
{
  unint64_t result = qword_26A4DB818;
  if (!qword_26A4DB818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB818);
  }
  return result;
}

unint64_t sub_25B26E63C()
{
  unint64_t result = qword_26A4DB820;
  if (!qword_26A4DB820)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB820);
  }
  return result;
}

unint64_t sub_25B26E690()
{
  unint64_t result = qword_26A4DB830;
  if (!qword_26A4DB830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB830);
  }
  return result;
}

unint64_t sub_25B26E6E4()
{
  unint64_t result = qword_26A4DB840;
  if (!qword_26A4DB840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB840);
  }
  return result;
}

uint64_t sub_25B26E738(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4D9AF0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Handshake.Complete.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Handshake.Complete.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PairedDevice.PairedDeviceClass(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReplicatorMessage.Handshake.Response.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B26E910);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Handshake.Response.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Handshake.Response.CodingKeys;
}

unsigned char *_s16ReplicatorEngine17ReplicatorMessageO9HandshakeO8CompleteV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B26EA14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Handshake.Request.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Handshake.Request.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Ack.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Ack.CodingKeys;
}

unsigned char *_s16ReplicatorEngine17ReplicatorMessageO10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B26EB28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Handshake.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Handshake.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Handshake.RequestCodingKeys()
{
  return &type metadata for ReplicatorMessage.Handshake.RequestCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Handshake.ResponseCodingKeys()
{
  return &type metadata for ReplicatorMessage.Handshake.ResponseCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Handshake.CompleteCodingKeys()
{
  return &type metadata for ReplicatorMessage.Handshake.CompleteCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Sync.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Sync.CodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value.CodingKeys()
{
  return &type metadata for ReplicatorMessage.Sync.SyncRecord.Value.CodingKeys;
}

unsigned char *_s16ReplicatorEngine17ReplicatorMessageO4SyncV10SyncRecordV8VersionsO2V0V10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B26EC7CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value.DataCodingKeys()
{
  return &type metadata for ReplicatorMessage.Sync.SyncRecord.Value.DataCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.Sync.SyncRecord.Value.NoneCodingKeys()
{
  return &type metadata for ReplicatorMessage.Sync.SyncRecord.Value.NoneCodingKeys;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.RecordManifest()
{
  return &type metadata for ReplicatorMessage.RecordManifest;
}

unint64_t sub_25B26ECD8()
{
  unint64_t result = qword_26A4DB888;
  if (!qword_26A4DB888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB888);
  }
  return result;
}

unint64_t sub_25B26ED30()
{
  unint64_t result = qword_26A4DB890;
  if (!qword_26A4DB890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB890);
  }
  return result;
}

unint64_t sub_25B26ED88()
{
  unint64_t result = qword_26A4DB898;
  if (!qword_26A4DB898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB898);
  }
  return result;
}

unint64_t sub_25B26EDE0()
{
  unint64_t result = qword_26A4DB8A0;
  if (!qword_26A4DB8A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8A0);
  }
  return result;
}

unint64_t sub_25B26EE38()
{
  unint64_t result = qword_26A4DB8A8;
  if (!qword_26A4DB8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8A8);
  }
  return result;
}

unint64_t sub_25B26EE90()
{
  unint64_t result = qword_26A4DB8B0;
  if (!qword_26A4DB8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8B0);
  }
  return result;
}

unint64_t sub_25B26EEE8()
{
  unint64_t result = qword_26A4DB8B8;
  if (!qword_26A4DB8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8B8);
  }
  return result;
}

unint64_t sub_25B26EF40()
{
  unint64_t result = qword_26A4DB8C0;
  if (!qword_26A4DB8C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8C0);
  }
  return result;
}

unint64_t sub_25B26EF98()
{
  unint64_t result = qword_26A4DB8C8;
  if (!qword_26A4DB8C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8C8);
  }
  return result;
}

unint64_t sub_25B26EFF0()
{
  unint64_t result = qword_26A4DB8D0;
  if (!qword_26A4DB8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8D0);
  }
  return result;
}

unint64_t sub_25B26F048()
{
  unint64_t result = qword_26A4DB8D8;
  if (!qword_26A4DB8D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8D8);
  }
  return result;
}

unint64_t sub_25B26F0A0()
{
  unint64_t result = qword_26A4DB8E0;
  if (!qword_26A4DB8E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8E0);
  }
  return result;
}

unint64_t sub_25B26F0F8()
{
  unint64_t result = qword_26A4DB8E8;
  if (!qword_26A4DB8E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8E8);
  }
  return result;
}

unint64_t sub_25B26F150()
{
  unint64_t result = qword_26A4DB8F0;
  if (!qword_26A4DB8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8F0);
  }
  return result;
}

unint64_t sub_25B26F1A8()
{
  unint64_t result = qword_26A4DB8F8;
  if (!qword_26A4DB8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB8F8);
  }
  return result;
}

unint64_t sub_25B26F200()
{
  unint64_t result = qword_26A4DB900;
  if (!qword_26A4DB900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB900);
  }
  return result;
}

unint64_t sub_25B26F258()
{
  unint64_t result = qword_26A4DB908;
  if (!qword_26A4DB908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB908);
  }
  return result;
}

unint64_t sub_25B26F2B0()
{
  unint64_t result = qword_26A4DB910;
  if (!qword_26A4DB910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB910);
  }
  return result;
}

unint64_t sub_25B26F308()
{
  unint64_t result = qword_26A4DB918;
  if (!qword_26A4DB918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB918);
  }
  return result;
}

unint64_t sub_25B26F360()
{
  unint64_t result = qword_26A4DB920;
  if (!qword_26A4DB920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB920);
  }
  return result;
}

unint64_t sub_25B26F3B8()
{
  unint64_t result = qword_26A4DB928;
  if (!qword_26A4DB928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB928);
  }
  return result;
}

unint64_t sub_25B26F410()
{
  unint64_t result = qword_26A4DB930;
  if (!qword_26A4DB930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB930);
  }
  return result;
}

unint64_t sub_25B26F468()
{
  unint64_t result = qword_26A4DB938;
  if (!qword_26A4DB938)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB938);
  }
  return result;
}

unint64_t sub_25B26F4C0()
{
  unint64_t result = qword_26A4DB940;
  if (!qword_26A4DB940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB940);
  }
  return result;
}

unint64_t sub_25B26F518()
{
  unint64_t result = qword_26A4DB948;
  if (!qword_26A4DB948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB948);
  }
  return result;
}

unint64_t sub_25B26F570()
{
  unint64_t result = qword_26A4DB950;
  if (!qword_26A4DB950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB950);
  }
  return result;
}

unint64_t sub_25B26F5C8()
{
  unint64_t result = qword_26A4DB958;
  if (!qword_26A4DB958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB958);
  }
  return result;
}

unint64_t sub_25B26F620()
{
  unint64_t result = qword_26A4DB960;
  if (!qword_26A4DB960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB960);
  }
  return result;
}

unint64_t sub_25B26F678()
{
  unint64_t result = qword_26A4DB968;
  if (!qword_26A4DB968)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB968);
  }
  return result;
}

unint64_t sub_25B26F6D0()
{
  unint64_t result = qword_26A4DB970;
  if (!qword_26A4DB970)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB970);
  }
  return result;
}

unint64_t sub_25B26F728()
{
  unint64_t result = qword_26A4DB978;
  if (!qword_26A4DB978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB978);
  }
  return result;
}

unint64_t sub_25B26F780()
{
  unint64_t result = qword_26A4DB980;
  if (!qword_26A4DB980)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB980);
  }
  return result;
}

unint64_t sub_25B26F7D8()
{
  unint64_t result = qword_26A4DB988;
  if (!qword_26A4DB988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB988);
  }
  return result;
}

unint64_t sub_25B26F830()
{
  unint64_t result = qword_26A4DB990;
  if (!qword_26A4DB990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB990);
  }
  return result;
}

uint64_t sub_25B26F884(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x496E6F6973736573 && a2 == 0xE900000000000044;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x64726F636572 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_25B26F97C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74736575716572 && a2 == 0xE700000000000000;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xE800000000000000 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6574656C706D6F63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_25B26FAD4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x496E6F6973736573 && a2 == 0xE900000000000044;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025B29E520 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656369766564 && a2 == 0xE600000000000000 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73726556656E6F7ALL && a2 == 0xEC000000736E6F69)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_25B26FCA4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x496E6F6973736573 && a2 == 0xE900000000000044;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025B29E520 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x686374616D73696DLL && a2 == 0xEF73656E6F5A6465 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x614D64726F636572 && a2 == 0xEE0074736566696ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_25B26FEAC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x496E6F6973736573 && a2 == 0xE900000000000044;
  if (v2 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000025B29E520 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656369766564 && a2 == 0xE600000000000000 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73726556656E6F7ALL && a2 == 0xEC000000736E6F69 || (sub_25B290FB0() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x614D64726F636572 && a2 == 0xEE0074736566696ELL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

unint64_t sub_25B270104()
{
  unint64_t result = qword_26A4DB9A0;
  if (!qword_26A4DB9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB9A0);
  }
  return result;
}

unint64_t sub_25B270158()
{
  unint64_t result = qword_26A4DB9B0;
  if (!qword_26A4DB9B0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4DB9A8);
    sub_25B25E8D4(&qword_26A4DB4F0, (void (*)(uint64_t))type metadata accessor for Record.ID);
    sub_25B25E8D4(&qword_26A4D9228, MEMORY[0x263F07508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB9B0);
  }
  return result;
}

unint64_t sub_25B270234()
{
  unint64_t result = qword_26A4DB9C0;
  if (!qword_26A4DB9C0)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4DB9A8);
    sub_25B25E8D4(&qword_26A4DB6E0, (void (*)(uint64_t))type metadata accessor for Record.ID);
    sub_25B25E8D4((unint64_t *)&unk_26A4D9210, MEMORY[0x263F07508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB9C0);
  }
  return result;
}

unsigned char *_s16ReplicatorEngine17ReplicatorMessageO19HandshakeCodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x25B2703ACLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorMessage.RecordManifest.CodingKeys()
{
  return &type metadata for ReplicatorMessage.RecordManifest.CodingKeys;
}

unint64_t sub_25B2703E8()
{
  unint64_t result = qword_26A4DB9C8;
  if (!qword_26A4DB9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB9C8);
  }
  return result;
}

unint64_t sub_25B270440()
{
  unint64_t result = qword_26A4DB9D0;
  if (!qword_26A4DB9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB9D0);
  }
  return result;
}

unint64_t sub_25B270498()
{
  unint64_t result = qword_26A4DB9D8;
  if (!qword_26A4DB9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB9D8);
  }
  return result;
}

uint64_t Message.init(id:responseToID:messageType:senderDeviceID:protocolVersion:encodedBody:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  int v16 = (int *)type metadata accessor for Message();
  uint64_t v17 = a9 + v16[5];
  uint64_t v18 = sub_25B290080();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(a9, a1, v18);
  uint64_t result = sub_25B116B94(a2, v17);
  uint64_t v21 = (void *)(a9 + v16[6]);
  *uint64_t v21 = a3;
  v21[1] = a4;
  uint64_t v22 = (void *)(a9 + v16[7]);
  *uint64_t v22 = a5;
  v22[1] = a6;
  *(void *)(a9 + v16[8]) = a7;
  uint64_t v23 = (void *)(a9 + v16[9]);
  *uint64_t v23 = a8;
  v23[1] = a10;
  return result;
}

uint64_t type metadata accessor for Message()
{
  uint64_t result = qword_26A4D98B0;
  if (!qword_26A4D98B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25B270680(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      uint64_t v4 = 0x65736E6F70736572;
      unint64_t v3 = 0xEC00000044496F54;
      break;
    case 2:
      uint64_t v4 = 0x546567617373656DLL;
      uint64_t v5 = 6647929;
      goto LABEL_7;
    case 3:
      uint64_t v4 = 0x65447265646E6573;
      unint64_t v3 = 0xEE00444965636976;
      break;
    case 4:
      uint64_t v4 = 0x6C6F636F746F7270;
      unint64_t v3 = 0xEF6E6F6973726556;
      break;
    case 5:
      uint64_t v4 = 0x426465646F636E65;
      uint64_t v5 = 7955567;
LABEL_7:
      unint64_t v3 = v5 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE200000000000000;
  uint64_t v7 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEC00000044496F54;
      if (v4 == 0x65736E6F70736572) {
        goto LABEL_19;
      }
      goto LABEL_21;
    case 2:
      uint64_t v8 = 0x546567617373656DLL;
      uint64_t v9 = 6647929;
      goto LABEL_18;
    case 3:
      unint64_t v6 = 0xEE00444965636976;
      if (v4 != 0x65447265646E6573) {
        goto LABEL_21;
      }
      goto LABEL_19;
    case 4:
      uint64_t v7 = 0x6C6F636F746F7270;
      unint64_t v6 = 0xEF6E6F6973726556;
      goto LABEL_15;
    case 5:
      uint64_t v8 = 0x426465646F636E65;
      uint64_t v9 = 7955567;
LABEL_18:
      unint64_t v6 = v9 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
      if (v4 == v8) {
        goto LABEL_19;
      }
      goto LABEL_21;
    default:
LABEL_15:
      if (v4 != v7) {
        goto LABEL_21;
      }
LABEL_19:
      if (v3 == v6) {
        char v10 = 1;
      }
      else {
LABEL_21:
      }
        char v10 = sub_25B290FB0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

uint64_t sub_25B2708CC(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEA00000000007265;
  uint64_t v3 = 0x696669746E656469;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 0x6E656449656E6F7ALL;
    }
    else {
      uint64_t v5 = 0x69687372656E776FLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xEE00726569666974;
    }
    else {
      unint64_t v6 = 0xE900000000000070;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x696669746E656469;
  unint64_t v6 = 0xEA00000000007265;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 0x6E656449656E6F7ALL;
    }
    else {
      uint64_t v3 = 0x69687372656E776FLL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xEE00726569666974;
    }
    else {
      unint64_t v2 = 0xE900000000000070;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_25B290FB0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_25B270A08(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xEA00000000007265;
  uint64_t v3 = 0x696669746E656469;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v5 = 1701736314;
    }
    else {
      uint64_t v5 = 0x69687372656E776FLL;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE400000000000000;
    }
    else {
      unint64_t v6 = 0xE900000000000070;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  uint64_t v5 = 0x696669746E656469;
  unint64_t v6 = 0xEA00000000007265;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      uint64_t v3 = 1701736314;
    }
    else {
      uint64_t v3 = 0x69687372656E776FLL;
    }
    if (v7 == 1) {
      unint64_t v2 = 0xE400000000000000;
    }
    else {
      unint64_t v2 = 0xE900000000000070;
    }
  }
LABEL_15:
  if (v5 == v3 && v6 == v2) {
    char v8 = 1;
  }
  else {
    char v8 = sub_25B290FB0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_25B270B1C(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  unint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v4 = 1701667182;
      break;
    case 2:
      unint64_t v4 = 0x6C6F636F746F7270;
      unint64_t v3 = 0xEF6E6F6973726556;
      break;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v4 = 0x656372756F537369;
      break;
    case 4:
      unint64_t v4 = 0x7954656369766564;
      unint64_t v3 = 0xEA00000000006570;
      break;
    case 5:
      unint64_t v3 = 0x800000025B29BD50;
      unint64_t v4 = 0xD000000000000010;
      break;
    case 6:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v4 = 0x73656E6F7ALL;
      break;
    case 7:
      unint64_t v4 = 0x546567617373656DLL;
      unint64_t v3 = 0xEC00000073657079;
      break;
    case 8:
      unint64_t v4 = 0x746E656449736469;
      unint64_t v3 = 0xEF626F6C42797469;
      break;
    case 9:
      unint64_t v4 = 0x6E6974656B72616DLL;
      unint64_t v3 = 0xED0000656D614E67;
      break;
    case 10:
      unint64_t v4 = 0x54746375646F7270;
      unint64_t v3 = 0xEB00000000657079;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE400000000000000;
      if (v4 == 1701667182) {
        goto LABEL_31;
      }
      goto LABEL_34;
    case 2:
      unint64_t v5 = 0xEF6E6F6973726556;
      if (v4 != 0x6C6F636F746F7270) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 3:
      unint64_t v5 = 0xE800000000000000;
      if (v4 != 0x656372756F537369) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 4:
      unint64_t v5 = 0xEA00000000006570;
      if (v4 != 0x7954656369766564) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 5:
      unint64_t v5 = 0x800000025B29BD50;
      if (v4 != 0xD000000000000010) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 6:
      unint64_t v5 = 0xE500000000000000;
      if (v4 != 0x73656E6F7ALL) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 7:
      unint64_t v5 = 0xEC00000073657079;
      if (v4 != 0x546567617373656DLL) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 8:
      unint64_t v5 = 0xEF626F6C42797469;
      if (v4 != 0x746E656449736469) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 9:
      unint64_t v5 = 0xED0000656D614E67;
      if (v4 != 0x6E6974656B72616DLL) {
        goto LABEL_34;
      }
      goto LABEL_31;
    case 10:
      uint64_t v6 = 0x54746375646F7270;
      unint64_t v5 = 0xEB00000000657079;
      goto LABEL_30;
    default:
LABEL_30:
      if (v4 != v6) {
        goto LABEL_34;
      }
LABEL_31:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_34:
      }
        char v7 = sub_25B290FB0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_25B270EB4(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x73726556656E6F7ALL;
  }
  else {
    uint64_t v3 = 0x654465746F6D6572;
  }
  if (v2) {
    unint64_t v4 = 0xEC00000065636976;
  }
  else {
    unint64_t v4 = 0xEC000000736E6F69;
  }
  if (a2) {
    uint64_t v5 = 0x73726556656E6F7ALL;
  }
  else {
    uint64_t v5 = 0x654465746F6D6572;
  }
  if (a2) {
    unint64_t v6 = 0xEC000000736E6F69;
  }
  else {
    unint64_t v6 = 0xEC00000065636976;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = sub_25B290FB0();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_25B270F6C(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      uint64_t v4 = 0x6544746E65696C63;
      unint64_t v3 = 0xEF444964656E6966;
      break;
    case 2:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v4 = 0x6E6F6973726576;
      break;
    case 3:
      uint64_t v4 = 0x74616E6974736564;
      unint64_t v3 = 0xEB000000006E6F69;
      break;
    case 4:
      uint64_t v4 = 0x6974617269707865;
      unint64_t v3 = 0xEA00000000006E6FLL;
      break;
    case 5:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v4 = 0x736E6F6974706FLL;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xEF444964656E6966;
      if (v4 == 0x6544746E65696C63) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      unint64_t v5 = 0xE700000000000000;
      if (v4 != 0x6E6F6973726576) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v5 = 0xEB000000006E6F69;
      if (v4 != 0x74616E6974736564) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v6 = 0x6974617269707865;
      unint64_t v5 = 0xEA00000000006E6FLL;
      goto LABEL_15;
    case 5:
      unint64_t v5 = 0xE700000000000000;
      if (v4 != 0x736E6F6974706FLL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v4 != v6) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = sub_25B290FB0();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_25B271194()
{
  return sub_25B291260();
}

uint64_t sub_25B2712CC()
{
  return sub_25B291260();
}

uint64_t sub_25B2713EC()
{
  return sub_25B291260();
}

uint64_t sub_25B271508()
{
  return sub_25B291260();
}

uint64_t sub_25B27163C(char *a1, char *a2)
{
  return sub_25B270680(*a1, *a2);
}

uint64_t sub_25B271648()
{
  return sub_25B271194();
}

uint64_t sub_25B271650()
{
  sub_25B290630();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B271770()
{
  return sub_25B271508();
}

uint64_t sub_25B271778@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25B273B58();
  *a1 = result;
  return result;
}

void sub_25B2717A8(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEC00000044496F54;
      uint64_t v3 = 0x65736E6F70736572;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x546567617373656DLL;
      *(void *)(a1 + 8) = 0xEB00000000657079;
      break;
    case 3:
      strcpy((char *)a1, "senderDeviceID");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 4:
      *(void *)a1 = 0x6C6F636F746F7270;
      *(void *)(a1 + 8) = 0xEF6E6F6973726556;
      break;
    case 5:
      *(void *)a1 = 0x426465646F636E65;
      *(void *)(a1 + 8) = 0xEB0000000079646FLL;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_25B2718A8()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x65736E6F70736572;
      break;
    case 2:
      uint64_t result = 0x546567617373656DLL;
      break;
    case 3:
      uint64_t result = 0x65447265646E6573;
      break;
    case 4:
      uint64_t result = 0x6C6F636F746F7270;
      break;
    case 5:
      uint64_t result = 0x426465646F636E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B271994@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_25B273B58();
  *a1 = result;
  return result;
}

void sub_25B2719BC(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_25B2719C8(uint64_t a1)
{
  unint64_t v2 = sub_25B27272C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B271A04(uint64_t a1)
{
  unint64_t v2 = sub_25B27272C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t Message.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_25B290080();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t Message.id.setter(uint64_t a1)
{
  uint64_t v3 = sub_25B290080();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*Message.id.modify())()
{
  return nullsub_1;
}

uint64_t Message.responseToID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Message() + 20);
  return sub_25B271B74(v3, a1);
}

uint64_t sub_25B271B74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Message.responseToID.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for Message() + 20);
  return sub_25B116B94(a1, v3);
}

uint64_t (*Message.responseToID.modify())(void)
{
  return nullsub_1;
}

uint64_t Message.messageType.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Message() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Message.messageType.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Message() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Message.messageType.modify())(void)
{
  return nullsub_1;
}

uint64_t Message.senderDeviceID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for Message() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t Message.senderDeviceID.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for Message() + 28));
  uint64_t result = swift_bridgeObjectRelease();
  *unint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*Message.senderDeviceID.modify())(void)
{
  return nullsub_1;
}

uint64_t Message.protocolVersion.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for Message() + 32));
}

uint64_t Message.protocolVersion.setter(uint64_t a1)
{
  uint64_t result = type metadata accessor for Message();
  *(void *)(v1 + *(int *)(result + 32)) = a1;
  return result;
}

uint64_t (*Message.protocolVersion.modify())(void)
{
  return nullsub_1;
}

uint64_t Message.encodedBody.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for Message() + 36);
  uint64_t v2 = *(void *)v1;
  sub_25B114300(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t Message.encodedBody.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + *(int *)(type metadata accessor for Message() + 36);
  uint64_t result = sub_25B10DFF0(*(void *)v5, *(void *)(v5 + 8));
  *(void *)uint64_t v5 = a1;
  *(void *)(v5 + 8) = a2;
  return result;
}

uint64_t (*Message.encodedBody.modify())(void)
{
  return nullsub_1;
}

uint64_t Message.description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
  MEMORY[0x270FA5388](v1);
  uint64_t v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = 0;
  unint64_t v8 = 0xE000000000000000;
  sub_25B290AA0();
  sub_25B290650();
  sub_25B290080();
  sub_25B11FEE0((unint64_t *)&qword_26A4D9230);
  sub_25B290DB0();
  sub_25B290650();
  swift_bridgeObjectRelease();
  sub_25B290650();
  uint64_t v4 = type metadata accessor for Message();
  sub_25B271B74(v0 + *(int *)(v4 + 20), (uint64_t)v3);
  sub_25B290600();
  sub_25B290650();
  swift_bridgeObjectRelease();
  sub_25B290650();
  swift_bridgeObjectRetain();
  sub_25B290650();
  swift_bridgeObjectRelease();
  sub_25B290650();
  swift_bridgeObjectRetain();
  sub_25B290650();
  swift_bridgeObjectRelease();
  sub_25B290650();
  v6[1] = *(void *)(v0 + *(int *)(v4 + 32));
  sub_25B290DB0();
  sub_25B290650();
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t Message.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v33 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B290080();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v36 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB9E0);
  uint64_t v34 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = (int *)type metadata accessor for Message();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (uint64_t)&v13[*(int *)(v11 + 20)];
  uint64_t v35 = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v14, 1, 1, v5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B27272C();
  uint64_t v37 = v9;
  uint64_t v15 = (uint64_t)v39;
  sub_25B291280();
  if (v15)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    return sub_25B1DA620(v14);
  }
  else
  {
    uint64_t v16 = v35;
    uint64_t v39 = a1;
    LOBYTE(v40) = 0;
    sub_25B11FEE0(&qword_26A4D9228);
    sub_25B290CC0();
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
    uint64_t v19 = (uint64_t)v13;
    v18(v13, v36, v5);
    LOBYTE(v40) = 1;
    uint64_t v20 = (uint64_t)v33;
    sub_25B290C80();
    sub_25B116B94(v20, v14);
    LOBYTE(v40) = 2;
    uint64_t v21 = sub_25B290CA0();
    uint64_t v22 = v34;
    uint64_t v23 = (uint64_t *)(v19 + v10[6]);
    *uint64_t v23 = v21;
    v23[1] = v24;
    LOBYTE(v40) = 3;
    uint64_t v25 = sub_25B290CA0();
    int v26 = (uint64_t *)(v19 + v10[7]);
    *int v26 = v25;
    v26[1] = v27;
    char v41 = 5;
    sub_25B196AB4();
    sub_25B290CC0();
    *(_OWORD *)(v19 + v10[9]) = v40;
    LOBYTE(v40) = 4;
    uint64_t v28 = sub_25B290C90();
    char v30 = v29;
    (*(void (**)(char *, uint64_t))(v22 + 8))(v37, v38);
    uint64_t v31 = 7;
    if ((v30 & 1) == 0) {
      uint64_t v31 = v28;
    }
    *(void *)(v19 + v10[8]) = v31;
    sub_25B116D14(v19, v32);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
    return sub_25B116C7C(v19);
  }
}

unint64_t sub_25B27272C()
{
  unint64_t result = qword_26A4DB9E8;
  if (!qword_26A4DB9E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB9E8);
  }
  return result;
}

uint64_t Message.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DB9F0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B27272C();
  sub_25B291290();
  LOBYTE(v12) = 0;
  sub_25B290080();
  sub_25B11FEE0((unint64_t *)&unk_26A4D9210);
  sub_25B290D60();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for Message();
    LOBYTE(v12) = 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    sub_25B272A14();
    sub_25B290D60();
    LOBYTE(v12) = 2;
    sub_25B290D40();
    LOBYTE(v12) = 3;
    sub_25B290D40();
    LOBYTE(v12) = 4;
    sub_25B290D80();
    long long v12 = *(_OWORD *)(v3 + *(int *)(v9 + 36));
    v11[15] = 5;
    sub_25B196FCC();
    sub_25B290D60();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_25B272A14()
{
  unint64_t result = qword_26A4DB9F8;
  if (!qword_26A4DB9F8)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B33F200);
    sub_25B11FEE0((unint64_t *)&unk_26A4D9210);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DB9F8);
  }
  return result;
}

uint64_t sub_25B272AA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return Message.init(from:)(a1, a2);
}

uint64_t sub_25B272ABC(void *a1)
{
  return Message.encode(to:)(a1);
}

uint64_t sub_25B272AD4()
{
  return sub_25B11FEE0(&qword_26A4D9220);
}

char *initializeBufferWithCopyOfBuffer for Message(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B290080();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = &a1[v10];
    long long v12 = &a2[v10];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v10], 1, v7))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    uint64_t v15 = a3[6];
    uint64_t v16 = a3[7];
    uint64_t v17 = &a1[v15];
    uint64_t v18 = &a2[v15];
    uint64_t v19 = *((void *)v18 + 1);
    *(void *)uint64_t v17 = *(void *)v18;
    *((void *)v17 + 1) = v19;
    uint64_t v20 = &a1[v16];
    uint64_t v21 = &a2[v16];
    uint64_t v22 = *((void *)v21 + 1);
    *(void *)uint64_t v20 = *(void *)v21;
    *((void *)v20 + 1) = v22;
    uint64_t v23 = a3[9];
    *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
    uint64_t v24 = (uint64_t *)&a1[v23];
    uint64_t v25 = &a2[v23];
    uint64_t v26 = *(void *)&a2[v23];
    unint64_t v27 = *((void *)v25 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25B114300(v26, v27);
    *uint64_t v24 = v26;
    v24[1] = v27;
  }
  return a1;
}

uint64_t destroy for Message(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B290080();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 36));
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  return sub_25B10DFF0(v9, v10);
}

uint64_t initializeWithCopy for Message(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  unint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1, v6))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[6];
  uint64_t v14 = a3[7];
  uint64_t v15 = (void *)(a1 + v13);
  uint64_t v16 = (void *)(a2 + v13);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (void *)(a1 + v14);
  uint64_t v19 = (void *)(a2 + v14);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  uint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = a2 + v21;
  uint64_t v24 = *(void *)(a2 + v21);
  unint64_t v25 = *(void *)(v23 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B114300(v24, v25);
  *uint64_t v22 = v24;
  v22[1] = v25;
  return a1;
}

uint64_t assignWithCopy for Message(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  uint64_t v29 = a2;
  char v30 = a3;
  uint64_t v9 = a3[5];
  unint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(a2) = v12(a1 + v9, 1, v6);
  int v13 = v12((uint64_t)v11, 1, v6);
  if (!a2)
  {
    if (!v13)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v10, v11, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
LABEL_7:
  uint64_t v15 = v30[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(v29 + v15);
  *uint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = v30[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(v29 + v18);
  *uint64_t v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + v30[8]) = *(void *)(v29 + v30[8]);
  uint64_t v21 = v30[9];
  uint64_t v22 = (uint64_t *)(a1 + v21);
  uint64_t v23 = (uint64_t *)(v29 + v21);
  uint64_t v24 = *v23;
  unint64_t v25 = v23[1];
  sub_25B114300(*v23, v25);
  uint64_t v26 = *v22;
  unint64_t v27 = v22[1];
  *uint64_t v22 = v24;
  v22[1] = v25;
  sub_25B10DFF0(v26, v27);
  return a1;
}

char *initializeWithTake for Message(char *a1, char *a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  unint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v9], 1, v6))
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  uint64_t v13 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  uint64_t v14 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  return a1;
}

uint64_t assignWithTake for Message(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v29 = a2;
  char v30 = a3;
  uint64_t v9 = a3[5];
  unint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(a2) = v12(a1 + v9, 1, v6);
  int v13 = v12((uint64_t)v11, 1, v6);
  if (!a2)
  {
    if (!v13)
    {
      v8((uint64_t)v10, (uint64_t)v11, v6);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v10, v6);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v10, v11, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
LABEL_7:
  uint64_t v15 = v30[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(v29 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *uint64_t v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = v30[7];
  uint64_t v21 = (void *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(v29 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *uint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = v30[9];
  *(void *)(a1 + v30[8]) = *(void *)(v29 + v30[8]);
  uint64_t v26 = *(void *)(a1 + v25);
  unint64_t v27 = *(void *)(a1 + v25 + 8);
  *(_OWORD *)(a1 + v25) = *(_OWORD *)(v29 + v25);
  sub_25B10DFF0(v26, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for Message(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B2735C0);
}

uint64_t sub_25B2735C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for Message(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B2736F0);
}

uint64_t sub_25B2736F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_25B290080();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_25B273808()
{
  sub_25B290080();
  if (v0 <= 0x3F)
  {
    sub_25B2738F4();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void sub_25B2738F4()
{
  if (!qword_26A4D9238)
  {
    sub_25B290080();
    unint64_t v0 = sub_25B2909B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26A4D9238);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for Message.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B273A18);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Message.CodingKeys()
{
  return &type metadata for Message.CodingKeys;
}

unint64_t sub_25B273A54()
{
  unint64_t result = qword_26A4DBA00;
  if (!qword_26A4DBA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA00);
  }
  return result;
}

unint64_t sub_25B273AAC()
{
  unint64_t result = qword_26A4DBA08;
  if (!qword_26A4DBA08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA08);
  }
  return result;
}

unint64_t sub_25B273B04()
{
  unint64_t result = qword_26A4DBA10;
  if (!qword_26A4DBA10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA10);
  }
  return result;
}

uint64_t sub_25B273B58()
{
  unint64_t v0 = sub_25B290C30();
  swift_bridgeObjectRelease();
  if (v0 >= 6) {
    return 6;
  }
  else {
    return v0;
  }
}

uint64_t sub_25B273BA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 24) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B273C04()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B273C3C(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_25B273C84())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B273CD8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = *a2;
  swift_beginAccess();
  *(void *)(v4 + 32) = v3;
  *(void *)(v4 + 40) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B273D38()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_25B273D84(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_25B273DD8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B273E2C()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_25B273E60(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 48) = a1;
  return result;
}

uint64_t (*sub_25B273EA0())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B273EF4()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_25B273F28(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 49) = a1;
  return result;
}

uint64_t (*sub_25B273F68())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B273FBC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  swift_beginAccess();
  *(void *)(v3 + 56) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B27401C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B274054(uint64_t a1)
{
  swift_beginAccess();
  *(void *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_25B27409C())()
{
  return j_j__swift_endAccess;
}

uint64_t MetadataInMemoryStore.__allocating_init()()
{
  uint64_t result = swift_allocObject();
  uint64_t v1 = MEMORY[0x263F8EE80];
  *(void *)(result + 16) = MEMORY[0x263F8EE80];
  *(void *)(result + 24) = v1;
  uint64_t v2 = MEMORY[0x263F8EE88];
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 56) = v2;
  *(void *)(result + 64) = v1;
  *(_WORD *)(result + 48) = 1;
  return result;
}

uint64_t MetadataInMemoryStore.init()()
{
  uint64_t result = v0;
  uint64_t v2 = MEMORY[0x263F8EE80];
  *(void *)(v0 + 16) = MEMORY[0x263F8EE80];
  *(void *)(v0 + 24) = v2;
  uint64_t v3 = MEMORY[0x263F8EE88];
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 56) = v3;
  *(void *)(v0 + 64) = v2;
  *(_WORD *)(v0 + 48) = 1;
  return result;
}

uint64_t MetadataInMemoryStore.__allocating_init(pairingRelationship:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  MetadataInMemoryStore.init(pairingRelationship:)(a1);
  return v2;
}

uint64_t MetadataInMemoryStore.init(pairingRelationship:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9610);
  MEMORY[0x270FA5388](v4 - 8);
  unsigned int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B290080();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x263F8EE80];
  *(void *)(v2 + 16) = MEMORY[0x263F8EE80];
  *(void *)(v2 + 24) = v10;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  *(void *)(v2 + 56) = MEMORY[0x263F8EE88];
  *(void *)(v2 + 64) = v10;
  (*(void (**)(char *, uint64_t))(v11 + 16))(v9, a1);
  sub_25B276E10(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
  uint64_t v12 = type metadata accessor for PairingRelationship();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 0, 1, v12);
  swift_beginAccess();
  sub_25B20E308((uint64_t)v6, (uint64_t)v9);
  swift_endAccess();
  sub_25B276EE0(a1, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
  *(_WORD *)(v2 + 48) = 1;
  return v2;
}

uint64_t MetadataInMemoryStore.__allocating_init(pairingRelationships:)(uint64_t a1)
{
  swift_allocObject();
  uint64_t v2 = sub_25B2769C4(a1);
  swift_bridgeObjectRelease();
  return v2;
}

{
  uint64_t v2;

  uint64_t v2 = swift_allocObject();
  MetadataInMemoryStore.init(pairingRelationships:)(a1);
  return v2;
}

uint64_t MetadataInMemoryStore.init(pairingRelationships:)(uint64_t a1)
{
  uint64_t v1 = sub_25B2769C4(a1);
  swift_bridgeObjectRelease();
  return v1;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  void (**v28)(uint64_t, char *);
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (**v46)(uint64_t, char *);
  void *v47;
  uint64_t v48;
  uint64_t v49;
  int isUniquelyReferenced_nonNull_native;
  void *v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  void (**v72)(uint64_t, uint64_t);
  char *v73;
  void (**v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  int64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  void *v83;

  uint64_t v3 = type metadata accessor for PairingRelationship();
  uint64_t v79 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v75 = (uint64_t)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v66 - v6;
  uint64_t v8 = sub_25B290080();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v82 = (uint64_t)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  int v13 = (char *)&v66 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9EF0);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v66 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v76 = (char *)&v66 - v18;
  uint64_t v77 = 0;
  uint64_t v19 = MEMORY[0x263F8EE80];
  uint64_t v68 = v1;
  *(void *)(v1 + 24) = MEMORY[0x263F8EE80];
  uint64_t v20 = (void *)(v1 + 24);
  *(v20 - 1) = v19;
  uint64_t v21 = MEMORY[0x263F8EE88];
  v20[1] = 0;
  v20[2] = 0;
  v20[4] = v21;
  void v20[5] = v19;
  uint64_t v81 = v20;
  uint64_t v71 = a1;
  uint64_t v24 = *(void *)(a1 + 64);
  uint64_t v23 = a1 + 64;
  uint64_t v22 = v24;
  uint64_t v25 = 1 << *(unsigned char *)(v23 - 32);
  uint64_t v26 = -1;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  unint64_t v27 = v26 & v22;
  uint64_t v28 = (void (**)(uint64_t, char *))(v9 + 16);
  uint64_t v73 = v17;
  uint64_t v74 = (void (**)(char *, uint64_t, uint64_t))(v9 + 32);
  unint64_t v78 = v9;
  uint64_t v72 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  unint64_t v69 = v23;
  uint64_t v70 = (unint64_t)(v25 + 63) >> 6;
  uint64_t v67 = v70 - 1;
  while (1)
  {
    if (v27)
    {
      uint64_t v80 = (v27 - 1) & v27;
      char v30 = (uint64_t)v76;
      uint64_t v31 = __clz(__rbit64(v27)) | (v77 << 6);
LABEL_8:
      uint64_t v32 = v71;
      (*(void (**)(char *, unint64_t, uint64_t))(v78 + 16))(v17, *(void *)(v71 + 48) + *(void *)(v78 + 72) * v31, v8);
      uint64_t v33 = *(void *)(v32 + 56) + *(void *)(v79 + 72) * v31;
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9EE8);
      sub_25B276E10(v33, (uint64_t)&v17[*(int *)(v34 + 48)], (uint64_t (*)(void))type metadata accessor for PairingRelationship);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v17, 0, 1, v34);
      goto LABEL_27;
    }
    char v30 = (uint64_t)v76;
    uint64_t v35 = v77 + 1;
    if (__OFADD__(v77, 1)) {
      goto LABEL_40;
    }
    if (v35 < v70)
    {
      uint64_t v36 = *(void *)(v69 + 8 * v35);
      if (v36) {
        goto LABEL_12;
      }
      uint64_t v37 = v77 + 2;
      ++v77;
      if (v35 + 1 < v70)
      {
        uint64_t v36 = *(void *)(v69 + 8 * v37);
        if (v36) {
          goto LABEL_15;
        }
        uint64_t v77 = v35 + 1;
        if (v35 + 2 < v70)
        {
          uint64_t v36 = *(void *)(v69 + 8 * (v35 + 2));
          if (v36)
          {
            v35 += 2;
            goto LABEL_12;
          }
          uint64_t v37 = v35 + 3;
          uint64_t v77 = v35 + 2;
          if (v35 + 3 < v70) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9EE8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v17, 1, 1, v38);
    uint64_t v80 = 0;
LABEL_27:
    sub_25B276DA8((uint64_t)v17, v30);
    uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9EE8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v30, 1, v39) == 1)
    {
      swift_release();
      uint64_t result = v68;
      *(_WORD *)(v68 + 48) = 1;
      return result;
    }
    long long v40 = v30 + *(int *)(v39 + 48);
    (*v74)(v13, v30, v8);
    sub_25B276E78(v40, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    char v41 = *v28;
    uint64_t v42 = v82;
    uint64_t v43 = v8;
    uint64_t v44 = v13;
    int v45 = v43;
    int v46 = v28;
    (*v28)(v82, v13);
    uint64_t v47 = v81;
    swift_beginAccess();
    uint64_t v48 = (uint64_t)v7;
    unint64_t v49 = v75;
    sub_25B276E10((uint64_t)v7, v75, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v83 = (void *)*v47;
    uint64_t v51 = v83;
    *uint64_t v47 = 0x8000000000000000;
    uint64_t v53 = sub_25B18A93C(v42);
    uint64_t v54 = v51[2];
    uint64_t v55 = (v52 & 1) == 0;
    uint64_t v56 = v54 + v55;
    if (__OFADD__(v54, v55))
    {
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    int v57 = v52;
    if (v51[3] >= v56)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_25B193954();
      }
    }
    else
    {
      sub_25B18DF44(v56, isUniquelyReferenced_nonNull_native);
      uint64_t v58 = sub_25B18A93C(v82);
      if ((v57 & 1) != (v59 & 1)) {
        goto LABEL_42;
      }
      uint64_t v53 = v58;
    }
    uint64_t v60 = v49;
    uint64_t v61 = v83;
    int v13 = v44;
    if (v57)
    {
      sub_25B276F40(v60, v83[7] + *(void *)(v79 + 72) * v53, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
      uint64_t v8 = v45;
      uint64_t v28 = v46;
    }
    else
    {
      v83[(v53 >> 6) + 8] |= 1 << v53;
      uint64_t v8 = v45;
      uint64_t v28 = v46;
      ((void (*)(unint64_t, uint64_t, uint64_t))v41)(v61[6] + *(void *)(v78 + 72) * v53, v82, v45);
      sub_25B276E78(v60, v61[7] + *(void *)(v79 + 72) * v53, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
      uint64_t v62 = v61[2];
      uint64_t v63 = __OFADD__(v62, 1);
      int v64 = v62 + 1;
      if (v63) {
        goto LABEL_39;
      }
      v61[2] = v64;
      uint64_t v61 = v83;
    }
    *uint64_t v81 = v61;
    swift_bridgeObjectRelease();
    uint64_t v29 = *v72;
    (*v72)(v82, v8);
    swift_endAccess();
    uint64_t v7 = (char *)v48;
    sub_25B276EE0(v48, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
    v29((uint64_t)v13, v8);
    uint64_t v17 = v73;
    unint64_t v27 = v80;
  }
  uint64_t v36 = *(void *)(v69 + 8 * v37);
  if (v36)
  {
LABEL_15:
    uint64_t v35 = v37;
LABEL_12:
    uint64_t v80 = (v36 - 1) & v36;
    uint64_t v31 = __clz(__rbit64(v36)) + (v35 << 6);
    uint64_t v77 = v35;
    goto LABEL_8;
  }
  while (1)
  {
    uint64_t v35 = v37 + 1;
    if (__OFADD__(v37, 1)) {
      break;
    }
    if (v35 >= v70)
    {
      uint64_t v77 = v67;
      goto LABEL_26;
    }
    uint64_t v36 = *(void *)(v69 + 8 * v35);
    ++v37;
    if (v36) {
      goto LABEL_12;
    }
  }
LABEL_41:
  __break(1u);
LABEL_42:
  uint64_t result = sub_25B291190();
  __break(1u);
  return result;
}

uint64_t sub_25B274BB4(void *a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 64);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_25B18A8D0(a1);
  if (v5)
  {
    uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 16 * v4);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_25B274C54()
{
  swift_beginAccess();
  uint64_t v1 = MEMORY[0x263F8EE80];
  *(void *)(v0 + 16) = MEMORY[0x263F8EE80];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v0 + 64) = v1;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B274CC0(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9610);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B290080();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  sub_25B276E10(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
  uint64_t v9 = type metadata accessor for PairingRelationship();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 0, 1, v9);
  swift_beginAccess();
  sub_25B20E308((uint64_t)v4, (uint64_t)v7);
  return swift_endAccess();
}

uint64_t sub_25B274E54(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9610);
  MEMORY[0x270FA5388](v2 - 8);
  unint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B290080();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  uint64_t v9 = type metadata accessor for PairingRelationship();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  swift_beginAccess();
  sub_25B20E308((uint64_t)v4, (uint64_t)v7);
  return swift_endAccess();
}

uint64_t sub_25B274FC8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Record.ID(0);
  uint64_t v64 = *(void *)(v3 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (void *)((char *)v60 - v7);
  uint64_t v63 = type metadata accessor for RecordMetadata();
  uint64_t v9 = MEMORY[0x270FA5388](v63);
  uint64_t v67 = (uint64_t)v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)v60 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    return result;
  }
  uint64_t v16 = (void *)(v1 + 16);
  uint64_t v17 = (uint64_t *)(v1 + 64);
  uint64_t v18 = a1;
  uint64_t v19 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  uint64_t v66 = *(void *)(v12 + 72);
  v60[1] = v3;
  v60[2] = v18;
  swift_bridgeObjectRetain();
  uint64_t v61 = v14;
  uint64_t v62 = v8;
  while (1)
  {
    uint64_t v65 = v15;
    uint64_t v21 = v17;
    uint64_t v22 = v6;
    sub_25B276E10(v19, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
    sub_25B276E10((uint64_t)v14, (uint64_t)v8, type metadata accessor for Record.ID);
    swift_beginAccess();
    sub_25B276E10((uint64_t)v14, v67, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = (void *)*v16;
    uint64_t v24 = v68;
    *uint64_t v16 = 0x8000000000000000;
    unint64_t v26 = sub_25B18A8D0(v8);
    uint64_t v27 = v24[2];
    BOOL v28 = (v25 & 1) == 0;
    uint64_t v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      break;
    }
    char v30 = v25;
    if (v24[3] >= v29)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_25B193098();
      }
    }
    else
    {
      sub_25B18D018(v29, isUniquelyReferenced_nonNull_native);
      unint64_t v31 = sub_25B18A8D0(v8);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_41;
      }
      unint64_t v26 = v31;
    }
    uint64_t v6 = v22;
    uint64_t v33 = v68;
    if (v30)
    {
      sub_25B276F40(v67, v68[7] + v26 * v66, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
    }
    else
    {
      v68[(v26 >> 6) + 8] |= 1 << v26;
      sub_25B276E10((uint64_t)v8, v33[6] + *(void *)(v64 + 72) * v26, type metadata accessor for Record.ID);
      sub_25B276E78(v67, v33[7] + v26 * v66, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
      uint64_t v34 = v33[2];
      BOOL v35 = __OFADD__(v34, 1);
      uint64_t v36 = v34 + 1;
      if (v35) {
        goto LABEL_38;
      }
      v33[2] = v36;
    }
    *uint64_t v16 = v33;
    swift_bridgeObjectRelease();
    sub_25B276EE0((uint64_t)v8, type metadata accessor for Record.ID);
    swift_endAccess();
    sub_25B276E10((uint64_t)v14, (uint64_t)v22, type metadata accessor for Record.ID);
    uint64_t v37 = *(void *)&v14[*(int *)(v63 + 20)];
    uint64_t v17 = v21;
    if (!v37)
    {
      swift_beginAccess();
LABEL_24:
      swift_bridgeObjectRetain();
      unint64_t v51 = sub_25B18A8D0(v22);
      char v53 = v52;
      swift_bridgeObjectRelease();
      if (v53)
      {
        int v54 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = *v21;
        uint64_t v68 = (void *)*v21;
        *uint64_t v21 = 0x8000000000000000;
        uint64_t v20 = v65;
        uint64_t v14 = v61;
        if (!v54)
        {
          sub_25B192E00();
          uint64_t v55 = (uint64_t)v68;
        }
        sub_25B276EE0(*(void *)(v55 + 48) + *(void *)(v64 + 72) * v51, type metadata accessor for Record.ID);
        sub_25B21D7E4(v51, v55);
        *uint64_t v17 = v55;
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = v65;
        uint64_t v14 = v61;
      }
      sub_25B276EE0((uint64_t)v22, type metadata accessor for Record.ID);
      swift_bridgeObjectRelease();
      uint64_t v8 = v62;
      goto LABEL_5;
    }
    uint64_t v39 = *(void *)(v37 + 16);
    uint64_t v38 = *(void *)(v37 + 24);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    if (!v38) {
      goto LABEL_24;
    }
    int v40 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v68 = (void *)*v21;
    char v41 = v68;
    *uint64_t v21 = 0x8000000000000000;
    unint64_t v43 = sub_25B18A8D0(v22);
    uint64_t v44 = v41[2];
    BOOL v45 = (v42 & 1) == 0;
    uint64_t v46 = v44 + v45;
    if (__OFADD__(v44, v45)) {
      goto LABEL_39;
    }
    char v47 = v42;
    if (v41[3] >= v46)
    {
      if (v40)
      {
        uint64_t v50 = v68;
        if ((v42 & 1) == 0) {
          goto LABEL_32;
        }
      }
      else
      {
        sub_25B192E00();
        uint64_t v50 = v68;
        if ((v47 & 1) == 0) {
          goto LABEL_32;
        }
      }
    }
    else
    {
      sub_25B18C9D4(v46, v40);
      unint64_t v48 = sub_25B18A8D0(v22);
      if ((v47 & 1) != (v49 & 1)) {
        goto LABEL_41;
      }
      unint64_t v43 = v48;
      uint64_t v50 = v68;
      if ((v47 & 1) == 0)
      {
LABEL_32:
        v50[(v43 >> 6) + 8] |= 1 << v43;
        uint64_t v6 = v22;
        sub_25B276E10((uint64_t)v22, v50[6] + *(void *)(v64 + 72) * v43, type metadata accessor for Record.ID);
        int v57 = (void *)(v50[7] + 16 * v43);
        *int v57 = v39;
        v57[1] = v38;
        uint64_t v58 = v50[2];
        BOOL v35 = __OFADD__(v58, 1);
        uint64_t v59 = v58 + 1;
        if (v35) {
          goto LABEL_40;
        }
        uint64_t v50[2] = v59;
        goto LABEL_34;
      }
    }
    uint64_t v56 = (void *)(v50[7] + 16 * v43);
    swift_bridgeObjectRelease();
    *uint64_t v56 = v39;
    v56[1] = v38;
    uint64_t v6 = v22;
LABEL_34:
    uint64_t v17 = v21;
    *uint64_t v21 = (uint64_t)v50;
    swift_bridgeObjectRelease();
    sub_25B276EE0((uint64_t)v6, type metadata accessor for Record.ID);
    uint64_t v14 = v61;
    uint64_t v8 = v62;
    uint64_t v20 = v65;
LABEL_5:
    swift_endAccess();
    sub_25B276EE0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
    v19 += v66;
    uint64_t v15 = v20 - 1;
    if (!v15) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  uint64_t result = sub_25B291190();
  __break(1u);
  return result;
}

uint64_t sub_25B275660(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D93A8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v34 = (uint64_t)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for Record.ID(0) - 8;
  uint64_t result = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (void *)((char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    uint64_t v11 = (uint64_t *)(v1 + 16);
    uint64_t v12 = (uint64_t *)(v1 + 64);
    uint64_t v13 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v14 = *(void *)(v7 + 72);
    v32[1] = a1;
    swift_bridgeObjectRetain();
    uint64_t v15 = v34;
    uint64_t v33 = v9;
    do
    {
      sub_25B276E10(v13, (uint64_t)v9, type metadata accessor for Record.ID);
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v16 = sub_25B18A8D0(v9);
      char v18 = v17;
      swift_bridgeObjectRelease();
      if (v18)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v20 = *v11;
        uint64_t v35 = *v11;
        *uint64_t v11 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_25B193098();
          uint64_t v20 = v35;
        }
        sub_25B276EE0(*(void *)(v20 + 48) + v16 * v14, type metadata accessor for Record.ID);
        uint64_t v21 = *(void *)(v20 + 56);
        uint64_t v22 = type metadata accessor for RecordMetadata();
        uint64_t v23 = v14;
        uint64_t v24 = *(void *)(v22 - 8);
        uint64_t v25 = v21 + *(void *)(v24 + 72) * v16;
        uint64_t v15 = v34;
        sub_25B276E78(v25, v34, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
        sub_25B21DCF8(v16, v20);
        *uint64_t v11 = v20;
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v24 + 56))(v15, 0, 1, v22);
        uint64_t v14 = v23;
        uint64_t v9 = v33;
      }
      else
      {
        uint64_t v26 = type metadata accessor for RecordMetadata();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v15, 1, 1, v26);
      }
      sub_25B276FA8(v15);
      swift_endAccess();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      unint64_t v27 = sub_25B18A8D0(v9);
      char v29 = v28;
      swift_bridgeObjectRelease();
      if (v29)
      {
        int v30 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v31 = *v12;
        uint64_t v35 = *v12;
        *uint64_t v12 = 0x8000000000000000;
        if (!v30)
        {
          sub_25B192E00();
          uint64_t v31 = v35;
        }
        sub_25B276EE0(*(void *)(v31 + 48) + v27 * v14, type metadata accessor for Record.ID);
        sub_25B21D7E4(v27, v31);
        *uint64_t v12 = v31;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_endAccess();
      sub_25B276EE0((uint64_t)v9, type metadata accessor for Record.ID);
      v13 += v14;
      --v10;
    }
    while (v10);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_25B275A48()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_25B22A178(v2, v1);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 56) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B275AC0(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 56);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9D00);
  uint64_t v4 = sub_25B290080();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_25B292C10;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))(v7 + v6, a1, v4);
  swift_bridgeObjectRetain();
  uint64_t v8 = sub_25B22A178(v7, v3);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(void *)(v1 + 56) = v8;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B275C10(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 56);
  v5[2] = a1;
  swift_bridgeObjectRetain();
  *(void *)(v1 + 56) = sub_25B276564((uint64_t)sub_25B277008, (uint64_t)v5, v3);
  return swift_bridgeObjectRelease();
}

BOOL sub_25B275C98()
{
  return (sub_25B290580() & 1) == 0;
}

uint64_t MetadataInMemoryStore.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MetadataInMemoryStore.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_25B275D94(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  swift_beginAccess();
  *(void *)(v5 + 32) = a1;
  *(void *)(v5 + 40) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_25B275DEC())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B275E44(char a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 48) = a1;
  return result;
}

uint64_t (*sub_25B275E88())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B275EE0(char a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 49) = a1;
  return result;
}

uint64_t (*sub_25B275F24())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B275F7C(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess();
  *(void *)(v3 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_25B275FC8())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B276020()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x263F8EE80];
  *(void *)(v1 + 16) = MEMORY[0x263F8EE80];
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v1 + 64) = v2;
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B276090(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9610);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B290080();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  sub_25B276E10(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
  uint64_t v9 = type metadata accessor for PairingRelationship();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 0, 1, v9);
  swift_beginAccess();
  sub_25B20E308((uint64_t)v4, (uint64_t)v7);
  return swift_endAccess();
}

uint64_t sub_25B276228(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9610);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B290080();
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v8 + 16))(v7, a1);
  uint64_t v9 = type metadata accessor for PairingRelationship();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v4, 1, 1, v9);
  swift_beginAccess();
  sub_25B20E308((uint64_t)v4, (uint64_t)v7);
  return swift_endAccess();
}

uint64_t sub_25B2763A0(uint64_t a1)
{
  return sub_25B274FC8(a1);
}

uint64_t sub_25B2763C4(uint64_t a1)
{
  return sub_25B275660(a1);
}

uint64_t sub_25B2763E8()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_25B276438()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 48);
}

uint64_t sub_25B276478()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B2764BC()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 49);
}

uint64_t sub_25B2764FC()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B276540(void *a1)
{
  return sub_25B274BB4(a1);
}

uint64_t sub_25B276564(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v12[1] = *MEMORY[0x263EF8340];
  char v6 = *(unsigned char *)(a3 + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = sub_25B2766E8((void *)((char *)v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a3, v5);
    swift_release();
    if (v3) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v9 = sub_25B2766E8((unint64_t *)v10, v7, a3, v5);
    swift_release();
    MEMORY[0x261160890](v10, -1, -1);
  }
  return v9;
}

uint64_t sub_25B2766E8(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v36 = a4;
  uint64_t v28 = a2;
  char v29 = a1;
  uint64_t v35 = sub_25B290080();
  uint64_t result = MEMORY[0x270FA5388](v35);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v37 = a3;
  uint64_t v11 = *(void *)(a3 + 56);
  uint64_t v30 = 0;
  uint64_t v31 = a3 + 56;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  int64_t v32 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v33 = v7 + 16;
  uint64_t v34 = v7;
  uint64_t v15 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  while (v14)
  {
    unint64_t v16 = __clz(__rbit64(v14));
    v14 &= v14 - 1;
    unint64_t v17 = v16 | (v10 << 6);
LABEL_17:
    uint64_t v21 = v35;
    (*(void (**)(char *, unint64_t, uint64_t))(v34 + 16))(v9, *(void *)(v37 + 48) + *(void *)(v34 + 72) * v17, v35);
    char v22 = v36(v9);
    if (v4) {
      return (*v15)(v9, v21);
    }
    char v23 = v22;
    uint64_t result = (*v15)(v9, v21);
    if (v23)
    {
      *(unint64_t *)((char *)v29 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      BOOL v18 = __OFADD__(v30++, 1);
      if (v18) {
        goto LABEL_30;
      }
    }
  }
  BOOL v18 = __OFADD__(v10++, 1);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v10 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v10);
  if (v19)
  {
LABEL_16:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v10 << 6);
    goto LABEL_17;
  }
  int64_t v20 = v10 + 1;
  if (v10 + 1 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v10 + 2;
  if (v10 + 2 >= v32) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v10 + 3;
  if (v10 + 3 >= v32)
  {
LABEL_27:
    uint64_t v24 = v28;
    uint64_t v25 = v30;
    uint64_t v26 = v37;
    swift_retain();
    return sub_25B1A6800(v29, v24, v25, v26);
  }
  unint64_t v19 = *(void *)(v31 + 8 * v20);
  if (v19)
  {
LABEL_15:
    int64_t v10 = v20;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v32) {
      goto LABEL_27;
    }
    unint64_t v19 = *(void *)(v31 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_16;
    }
  }
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_25B2769C4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_25B290080();
  uint64_t v38 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  char v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PairingRelationship() - 8;
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v43 = (uint64_t)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v36 - v11;
  uint64_t v13 = MEMORY[0x263F8EE80];
  uint64_t v37 = v2;
  *(void *)(v2 + 24) = MEMORY[0x263F8EE80];
  unint64_t v14 = (void *)(v2 + 24);
  *(v14 - 1) = v13;
  v14[1] = 0;
  v14[2] = 0;
  v14[4] = MEMORY[0x263F8EE88];
  v14[5] = v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v16 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v17 = *(void *)(v10 + 72);
    int v40 = (char *)&v36 - v11;
    char v41 = (void (**)(char *, char *, uint64_t))(v38 + 16);
    uint64_t v39 = (void (**)(uint64_t, uint64_t))(v38 + 8);
    while (1)
    {
      uint64_t v42 = v15;
      sub_25B276E10(v16, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
      BOOL v18 = *v41;
      uint64_t v19 = v4;
      (*v41)(v6, v12, v4);
      swift_beginAccess();
      sub_25B276E10((uint64_t)v12, v43, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v44 = (void *)*v14;
      uint64_t v21 = v44;
      *unint64_t v14 = 0x8000000000000000;
      uint64_t v22 = (uint64_t)v6;
      unint64_t v24 = sub_25B18A93C((uint64_t)v6);
      uint64_t v25 = v21[2];
      BOOL v26 = (v23 & 1) == 0;
      uint64_t v27 = v25 + v26;
      if (__OFADD__(v25, v26)) {
        break;
      }
      char v28 = v23;
      if (v21[3] >= v27)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_25B193954();
        }
      }
      else
      {
        sub_25B18DF44(v27, isUniquelyReferenced_nonNull_native);
        unint64_t v29 = sub_25B18A93C(v22);
        if ((v28 & 1) != (v30 & 1)) {
          goto LABEL_17;
        }
        unint64_t v24 = v29;
      }
      uint64_t v4 = v19;
      uint64_t v31 = v44;
      if (v28)
      {
        sub_25B276F40(v43, v44[7] + v24 * v17, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
      }
      else
      {
        v44[(v24 >> 6) + 8] |= 1 << v24;
        v18((char *)(v31[6] + *(void *)(v38 + 72) * v24), (char *)v22, v19);
        sub_25B276E78(v43, v31[7] + v24 * v17, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
        uint64_t v32 = v31[2];
        BOOL v33 = __OFADD__(v32, 1);
        uint64_t v34 = v32 + 1;
        if (v33) {
          goto LABEL_16;
        }
        v31[2] = v34;
        uint64_t v31 = v44;
      }
      *unint64_t v14 = v31;
      swift_bridgeObjectRelease();
      char v6 = (char *)v22;
      (*v39)(v22, v19);
      swift_endAccess();
      uint64_t v12 = v40;
      sub_25B276EE0((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for PairingRelationship);
      v16 += v17;
      uint64_t v15 = v42 - 1;
      if (v42 == 1) {
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
LABEL_17:
    uint64_t result = sub_25B291190();
    __break(1u);
  }
  else
  {
LABEL_14:
    uint64_t result = v37;
    *(_WORD *)(v37 + 48) = 1;
  }
  return result;
}

uint64_t sub_25B276DA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B276E10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B276E78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B276EE0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_25B276F40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B276FA8(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D93A8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_25B277008()
{
  return sub_25B275C98();
}

uint64_t sub_25B277028@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 16);
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B277078@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B2770C8@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 40);
  *a2 = *(void *)(v3 + 32);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_25B277118@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 48);
  return result;
}

uint64_t sub_25B277160(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 48) = v2;
  return result;
}

uint64_t sub_25B2771A4@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 49);
  return result;
}

uint64_t sub_25B2771EC(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 49) = v2;
  return result;
}

uint64_t sub_25B277230@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  *a2 = *(void *)(v3 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for MetadataInMemoryStore()
{
  return self;
}

uint64_t method lookup function for MetadataInMemoryStore(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for MetadataInMemoryStore);
}

uint64_t dispatch thunk of MetadataInMemoryStore.recordMetadata.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.recordMetadata.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.recordMetadata.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.pairingRelationships.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.pairingRelationships.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.pairingRelationships.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.localDeviceID.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.localDeviceID.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.localDeviceID.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.isEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.isEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.isEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.allowListEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.allowListEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 240))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.allowListEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 248))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.allowList.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 256))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.allowList.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 264))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.allowList.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 272))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.__allocating_init(pairingRelationship:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.__allocating_init(pairingRelationships:)()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 328))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.clientDefinedID(for:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 336))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.removeAll()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 344))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.update(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 352))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(void *)v0 + 368))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.removePairingRelationship(with:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 360))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.remove(recordIDs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 376))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.isAllowListEnabled()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 384))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.allowListIDs()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 392))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.enableAllowList(enabled:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 400))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.setAllowList(idsIDs:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 408))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.addIDToAllowList(idsID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 416))();
}

uint64_t dispatch thunk of MetadataInMemoryStore.removeFromAllowList(idsID:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 424))();
}

unint64_t sub_25B2777BC()
{
  unint64_t result = qword_26A4DA8D0;
  if (!qword_26A4DA8D0)
  {
    sub_25B290080();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DA8D0);
  }
  return result;
}

void *CustomizableRetryTimer.init()()
{
  v0[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v0[6] = v1;
  v0[2] = 3;
  v0[3] = 0x4030000000000000;
  v0[4] = 3;
  return v0;
}

uint64_t CustomizableRetryTimer.init(maxRetries:intervalUntilRetry:)(uint64_t a1, double a2)
{
  *(void *)(v2 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v2 + 48) = v5;
  *(void *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
  *(void *)(v2 + 32) = a1;
  return v2;
}

uint64_t CustomizableRetryTimer.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_25B2778EC()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 48);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_25B10DCD0(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t sub_25B27796C()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 48);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_25B10DDCC(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

uint64_t sub_25B2779E0()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 48);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  sub_25B10DDCC(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

void sub_25B277A54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)v3;
  uint64_t v7 = *(const os_unfair_lock **)(v3 + 48);
  swift_retain();
  os_unfair_lock_assert_owner(v7 + 4);
  uint64_t v8 = swift_release();
  if ((uint64_t)v4[4] >= 1)
  {
    (*(void (**)(uint64_t))(*v4 + 232))(v8);
    uint64_t v9 = v4[4];
    BOOL v10 = __OFSUB__(v9, 1);
    uint64_t v11 = v9 - 1;
    if (v10)
    {
      __break(1u);
    }
    else
    {
      v4[4] = v11;
      if (qword_26A4D98C0 == -1)
      {
LABEL_4:
        uint64_t v12 = sub_25B290190();
        __swift_project_value_buffer(v12, (uint64_t)qword_26A4EB150);
        uint64_t v13 = sub_25B290160();
        os_log_type_t v14 = sub_25B2908A0();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)uint64_t v15 = 134349056;
          sub_25B2909C0();
          _os_log_impl(&dword_25B107000, v13, v14, "Retry timer will fire in %{public}fs", v15, 0xCu);
          MEMORY[0x261160890](v15, -1, -1);
        }

        uint64_t v17 = v4[5];
        if (v17)
        {
          BOOL v18 = *(os_unfair_lock_s **)(v17 + 24);
          MEMORY[0x270FA5388](v16);
          swift_retain();
          swift_retain();
          os_unfair_lock_lock(v18 + 4);
          sub_25B10DDCC(v19);
          os_unfair_lock_unlock(v18 + 4);
          swift_release();
          swift_release();
        }
        type metadata accessor for BasicTimer();
        uint64_t v23 = swift_allocObject();
        *(void *)(v23 + 16) = 0;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
        uint64_t v24 = swift_allocObject();
        *(_DWORD *)(v24 + 16) = 0;
        *(void *)(v23 + 24) = v24;
        v4[5] = v23;
        swift_release();
        uint64_t v25 = v4[5];
        if (v25)
        {
          BOOL v26 = (void *)swift_allocObject();
          _OWORD v26[2] = v4;
          v26[3] = a2;
          v26[4] = a3;
          uint64_t v27 = *(os_unfair_lock_s **)(v25 + 24);
          uint64_t v29 = MEMORY[0x270FA5388](v26);
          MEMORY[0x270FA5388](v29);
          swift_retain();
          swift_retain();
          swift_retain();
          swift_retain();
          os_unfair_lock_lock(v27 + 4);
          sub_25B10DDCC(v28);
          os_unfair_lock_unlock(v27 + 4);
          swift_release();
          swift_release();
          swift_release();
        }
        return;
      }
    }
    swift_once();
    goto LABEL_4;
  }
  if (qword_26A4D98C0 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_25B290190();
  __swift_project_value_buffer(v20, (uint64_t)qword_26A4EB150);
  char v30 = sub_25B290160();
  os_log_type_t v21 = sub_25B290880();
  if (os_log_type_enabled(v30, v21))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    _os_log_impl(&dword_25B107000, v30, v21, "Exhausted retry attempts; will not try again", v22, 2u);
    MEMORY[0x261160890](v22, -1, -1);
  }
}

uint64_t sub_25B277EAC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(const os_unfair_lock **)(v0 + 48);
  swift_retain();
  os_unfair_lock_assert_owner(v2 + 4);
  uint64_t result = swift_release();
  if (*(void *)(v1 + 40))
  {
    if (qword_26A4D98C0 != -1) {
      swift_once();
    }
    uint64_t v4 = sub_25B290190();
    __swift_project_value_buffer(v4, (uint64_t)qword_26A4EB150);
    uint64_t v5 = sub_25B290160();
    os_log_type_t v6 = sub_25B2908A0();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_25B107000, v5, v6, "Cancelling retry timer", v7, 2u);
      MEMORY[0x261160890](v7, -1, -1);
    }

    uint64_t v9 = *(void *)(v1 + 40);
    if (v9)
    {
      BOOL v10 = *(os_unfair_lock_s **)(v9 + 24);
      MEMORY[0x270FA5388](v8);
      swift_retain();
      swift_retain();
      os_unfair_lock_lock(v10 + 4);
      sub_25B10DDCC(v11);
      os_unfair_lock_unlock(v10 + 4);
      swift_release();
      swift_release();
    }
    *(void *)(v1 + 40) = 0;
    return swift_release();
  }
  return result;
}

uint64_t CustomizableRetryTimer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 16) = 3;
  *(void *)(v0 + 24) = 0x4030000000000000;
  *(_OWORD *)(v0 + 32) = xmmword_25B295590;
  return v0;
}

uint64_t CustomizableRetryTimer.__allocating_init(maxRetries:intervalUntilRetry:)(uint64_t a1, double a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v4 + 48) = v5;
  *(void *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a1;
  return v4;
}

void sub_25B278140()
{
  sub_25B277A54(v0[3], v0[4], v0[5]);
}

void sub_25B278174(void *a1)
{
  uint64_t v2 = (const os_unfair_lock *)a1[6];
  swift_retain();
  os_unfair_lock_assert_owner(v2 + 4);
  swift_release();
  if (qword_26A4D98C0 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_25B290190();
  __swift_project_value_buffer(v3, (uint64_t)qword_26A4EB150);
  uint64_t v4 = sub_25B290160();
  os_log_type_t v5 = sub_25B2908A0();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl(&dword_25B107000, v4, v5, "Resetting retry timer", v6, 2u);
    MEMORY[0x261160890](v6, -1, -1);
  }

  a1[4] = a1[2];
}

uint64_t sub_25B278288(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = *(os_unfair_lock_s **)(a1 + 48);
  swift_retain();
  os_unfair_lock_lock(v3 + 4);
  sub_25B1E41B4(&v6);
  os_unfair_lock_unlock(v3 + 4);
  uint64_t v4 = v6;
  swift_release();
  return a2(v4);
}

uint64_t sub_25B278324@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (__OFSUB__(*(void *)(a1 + 16), v3))
  {
    __break(1u);
  }
  else if (qword_26A4D98C0 == -1)
  {
    goto LABEL_3;
  }
  swift_once();
LABEL_3:
  uint64_t v4 = sub_25B290190();
  __swift_project_value_buffer(v4, (uint64_t)qword_26A4EB150);
  os_log_type_t v5 = sub_25B290160();
  os_log_type_t v6 = sub_25B2908A0();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134349056;
    sub_25B2909C0();
    _os_log_impl(&dword_25B107000, v5, v6, "Retry timer fired (attempt #%{public}ld)", v7, 0xCu);
    MEMORY[0x261160890](v7, -1, -1);
  }

  uint64_t result = sub_25B277EAC();
  *a2 = v3 == 0;
  return result;
}

uint64_t CustomizableRetryTimer.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

void sub_25B2784C0()
{
  sub_25B278174(v0);
}

uint64_t sub_25B2784DC()
{
  return sub_25B277EAC();
}

uint64_t type metadata accessor for CustomizableRetryTimer()
{
  return self;
}

uint64_t method lookup function for CustomizableRetryTimer(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CustomizableRetryTimer);
}

uint64_t dispatch thunk of CustomizableRetryTimer.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of CustomizableRetryTimer.__allocating_init(maxRetries:intervalUntilRetry:)()
{
  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of CustomizableRetryTimer.start(queue:handler:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 208))();
}

uint64_t dispatch thunk of CustomizableRetryTimer.reset()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 216))();
}

uint64_t dispatch thunk of CustomizableRetryTimer.cancel()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 224))();
}

uint64_t dispatch thunk of CustomizableRetryTimer.intervalUntilNextFireTime()()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 232))();
}

uint64_t sub_25B2785F8()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_25B278638()
{
  return sub_25B278288(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t sub_25B278644@<X0>(BOOL *a1@<X8>)
{
  return sub_25B278324(v1, a1);
}

uint64_t MessageType.description.getter()
{
  return 0;
}

ReplicatorEngine::MessageType::ID __swiftcall MessageType.ID.init(id:clientID:)(Swift::String id, Swift::String clientID)
{
  *uint64_t v2 = id;
  v2[1] = clientID;
  result.clientID = clientID;
  result.id = id;
  return result;
}

__n128 MessageType.init(id:protocolVersion:)@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)a3 = *(_OWORD *)a1;
  *(void *)(a3 + 16) = v3;
  *(void *)(a3 + 24) = v4;
  __n128 result = *a2;
  *(__n128 *)(a3 + 32) = *a2;
  return result;
}

uint64_t MessageType.ID.id.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageType.ID.id.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*MessageType.ID.id.modify())()
{
  return nullsub_1;
}

uint64_t MessageType.ID.clientID.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessageType.ID.clientID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*MessageType.ID.clientID.modify())()
{
  return nullsub_1;
}

uint64_t MessageType.ID.description.getter()
{
  return 540697705;
}

uint64_t MessageType.ID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_25B290630();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B290630();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B278A68(uint64_t a1)
{
  unint64_t v2 = sub_25B279628();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B278AA4(uint64_t a1)
{
  unint64_t v2 = sub_25B279628();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t MessageType.ID.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9CB0);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  os_log_type_t v6 = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v1 + 16);
  v10[1] = *(void *)(v1 + 24);
  v10[2] = v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B279628();
  sub_25B291290();
  char v12 = 0;
  uint64_t v8 = v10[3];
  sub_25B290D40();
  if (!v8)
  {
    char v11 = 1;
    sub_25B290D40();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MessageType.ID.hashValue.getter()
{
  return sub_25B291260();
}

uint64_t MessageType.ID.init(from:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9C58);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B279628();
  sub_25B291280();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v20 = 0;
  uint64_t v9 = sub_25B290CA0();
  uint64_t v11 = v10;
  char v19 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_25B290CA0();
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v18 = v12;
  v15(v8, v5);
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v18;
  a2[3] = v14;
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B278EE4()
{
  return sub_25B291260();
}

uint64_t sub_25B278F6C()
{
  swift_bridgeObjectRetain();
  sub_25B290630();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_25B290630();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B278FF0()
{
  return sub_25B291260();
}

uint64_t sub_25B279074@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return MessageType.ID.init(from:)(a1, a2);
}

uint64_t sub_25B27908C(void *a1)
{
  return MessageType.ID.encode(to:)(a1);
}

uint64_t MessageType.id.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = v3;
  a1[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

__n128 MessageType.id.setter(__n128 *a1)
{
  __n128 v5 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __n128 result = v5;
  *uint64_t v1 = v5;
  v1[1].n128_u64[0] = v2;
  v1[1].n128_u64[1] = v3;
  return result;
}

uint64_t (*MessageType.id.modify())()
{
  return nullsub_1;
}

__n128 MessageType.protocolVersion.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = v1[2];
  *a1 = result;
  return result;
}

__n128 MessageType.protocolVersion.setter(__n128 *a1)
{
  __n128 result = *a1;
  v1[2] = *a1;
  return result;
}

uint64_t (*MessageType.protocolVersion.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B2791A0(uint64_t a1)
{
  unint64_t v2 = sub_25B27967C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B2791DC(uint64_t a1)
{
  unint64_t v2 = sub_25B27967C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t MessageType.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9CA8);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v14 = *v1;
  uint64_t v8 = *((void *)v1 + 2);
  uint64_t v7 = *((void *)v1 + 3);
  uint64_t v9 = *((void *)v1 + 4);
  uint64_t v12 = *((void *)v1 + 5);
  uint64_t v13 = v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B27967C();
  sub_25B291290();
  long long v16 = v14;
  uint64_t v17 = v8;
  uint64_t v18 = v7;
  char v19 = 0;
  sub_25B196EB8();
  uint64_t v10 = v15;
  sub_25B290D60();
  if (!v10)
  {
    *(void *)&long long v16 = v13;
    *((void *)&v16 + 1) = v12;
    char v19 = 1;
    sub_25B196CE0();
    sub_25B290D60();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t MessageType.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9C50);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B27967C();
  sub_25B291280();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  char v18 = 0;
  sub_25B196C38();
  sub_25B290CC0();
  uint64_t v9 = *((void *)&v15 + 1);
  uint64_t v10 = v17;
  uint64_t v13 = v16;
  uint64_t v14 = v15;
  char v18 = 1;
  sub_25B1969B8();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B290CC0();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  long long v11 = v15;
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v13;
  *(void *)(a2 + 24) = v10;
  *(_OWORD *)(a2 + 32) = v11;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B2795F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return MessageType.init(from:)(a1, a2);
}

uint64_t sub_25B27960C(void *a1)
{
  return MessageType.encode(to:)(a1);
}

unint64_t sub_25B279628()
{
  unint64_t result = qword_26A4D92E8;
  if (!qword_26A4D92E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D92E8);
  }
  return result;
}

unint64_t sub_25B27967C()
{
  unint64_t result = qword_26A4D92D0;
  if (!qword_26A4D92D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D92D0);
  }
  return result;
}

unint64_t sub_25B2796D4()
{
  unint64_t result = qword_26A4D9310;
  if (!qword_26A4D9310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D9310);
  }
  return result;
}

unint64_t sub_25B27972C()
{
  unint64_t result = qword_26A4DBA18;
  if (!qword_26A4DBA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA18);
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageType()
{
  return &type metadata for MessageType;
}

ValueMetadata *type metadata accessor for MessageType.ID()
{
  return &type metadata for MessageType.ID;
}

ValueMetadata *type metadata accessor for MessageType.CodingKeys()
{
  return &type metadata for MessageType.CodingKeys;
}

unsigned char *_s16ReplicatorEngine11MessageTypeV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B279880);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageType.ID.CodingKeys()
{
  return &type metadata for MessageType.ID.CodingKeys;
}

unint64_t sub_25B2798BC()
{
  unint64_t result = qword_26A4DBA20;
  if (!qword_26A4DBA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA20);
  }
  return result;
}

unint64_t sub_25B279914()
{
  unint64_t result = qword_26A4DBA28;
  if (!qword_26A4DBA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA28);
  }
  return result;
}

unint64_t sub_25B27996C()
{
  unint64_t result = qword_26A4D92E0;
  if (!qword_26A4D92E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D92E0);
  }
  return result;
}

unint64_t sub_25B2799C4()
{
  unint64_t result = qword_26A4D92D8;
  if (!qword_26A4D92D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D92D8);
  }
  return result;
}

unint64_t sub_25B279A1C()
{
  unint64_t result = qword_26A4D92F8;
  if (!qword_26A4D92F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D92F8);
  }
  return result;
}

unint64_t sub_25B279A74()
{
  unint64_t result = qword_26A4D92F0;
  if (!qword_26A4D92F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4D92F0);
  }
  return result;
}

uint64_t RecordMetadata.clientDefinedID.setter(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    type metadata accessor for RecordMetadata.ClientDefinedID();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = a1;
    *(void *)(v5 + 24) = a2;
    uint64_t v6 = *(int *)(type metadata accessor for RecordMetadata() + 20);
    uint64_t result = swift_release();
    *(void *)(v2 + v6) = v5;
  }
  else
  {
    uint64_t v8 = *(int *)(type metadata accessor for RecordMetadata() + 20);
    uint64_t result = swift_release();
    *(void *)(v2 + v8) = 0;
  }
  return result;
}

uint64_t type metadata accessor for RecordMetadata()
{
  uint64_t result = qword_26A4D9398;
  if (!qword_26A4D9398) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for RecordMetadata.ClientDefinedID()
{
  return self;
}

uint64_t RecordMetadata.clientDefinedID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RecordMetadata() + 20));
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t RecordMetadata.init(id:clientDefinedID:version:destination:expiration:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v13 = *a5;
  uint64_t v14 = *a7;
  long long v15 = (int *)type metadata accessor for RecordMetadata();
  uint64_t v16 = v15[5];
  uint64_t v17 = a8 + v15[8];
  uint64_t v18 = sub_25B290000();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  sub_25B27D114(a1, a8, type metadata accessor for Record.ID);
  uint64_t v19 = 0;
  if (a3)
  {
    type metadata accessor for RecordMetadata.ClientDefinedID();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a2;
    *(void *)(v19 + 24) = a3;
  }
  *(void *)(a8 + v16) = v19;
  uint64_t v20 = a8 + v15[6];
  uint64_t v21 = sub_25B290080();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, a4, v21);
  *(void *)(a8 + v15[7]) = v13;
  uint64_t result = sub_25B1A93FC(a6, v17);
  *(void *)(a8 + v15[9]) = v14;
  return result;
}

uint64_t RecordMetadata.isRelevantToZoneVersionCalculation(for:)(uint64_t a1)
{
  uint64_t v3 = sub_25B290080();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Record.ID.Ownership(0);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for Record.ID(0);
  sub_25B27D278(v1 + *(int *)(v10 + 24), (uint64_t)v9, type metadata accessor for Record.ID.Ownership);
  int v11 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3);
  if (v11 == 1)
  {
    char v12 = 0;
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 32))(v6, v9, v3);
    char v12 = sub_25B290030();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v13 = type metadata accessor for RecordMetadata();
  if (!*(void *)(v1 + *(int *)(v13 + 28)))
  {
    if (v11 != 1) {
      return v12 & 1;
    }
    goto LABEL_7;
  }
  MEMORY[0x270FA5388](v13);
  *(void *)&v17[-16] = a1;
  BOOL v15 = sub_25B210ED4((uint64_t (*)(char *))sub_25B27D004, (uint64_t)&v17[-32], v14);
  if (v11 == 1 && v15) {
LABEL_7:
  }
    char v12 = 1;
  return v12 & 1;
}

uint64_t RecordMetadata.matches(predicate:)(uint64_t a1)
{
  uint64_t v3 = sub_25B290080();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for Record.ID.Ownership(0);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = &v27[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  char v12 = &v27[-v11];
  if ((*(unsigned char *)a1 & 1) != 0
    && (uint64_t v13 = type metadata accessor for Record.ID(0),
        sub_25B27D278((uint64_t)v1 + *(int *)(v13 + 24), (uint64_t)v12, type metadata accessor for Record.ID.Ownership),
        (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v3) != 1))
  {
    sub_25B27D2E0((uint64_t)v12, type metadata accessor for Record.ID.Ownership);
  }
  else
  {
    if (*(unsigned char *)(a1 + 1))
    {
      uint64_t v14 = type metadata accessor for Record.ID(0);
      sub_25B27D278((uint64_t)v1 + *(int *)(v14 + 24), (uint64_t)v10, type metadata accessor for Record.ID.Ownership);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1) {
        return 0;
      }
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 32))(v6, v10, v3);
      type metadata accessor for MetadataRecordPredicate();
      char v15 = sub_25B290030();
      (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
      if ((v15 & 1) == 0) {
        return 0;
      }
    }
    int v16 = *(unsigned __int8 *)(a1 + 2);
    if (v16 != 2)
    {
      uint64_t v17 = *(void *)((char *)v1 + *(int *)(type metadata accessor for RecordMetadata() + 28));
      if (v17)
      {
        uint64_t v18 = type metadata accessor for MetadataRecordPredicate();
        MEMORY[0x270FA5388](v18);
        *(void *)&v27[-16] = v19;
        if ((v16 ^ sub_25B210ED4((uint64_t (*)(char *))sub_25B27D004, (uint64_t)&v27[-32], v17))) {
          return 0;
        }
      }
      else if ((v16 & 1) == 0)
      {
        return 0;
      }
    }
    uint64_t v20 = *(void *)(a1 + 8);
    if (!v20) {
      return 1;
    }
    uint64_t v21 = v1[2];
    uint64_t v22 = v1[3];
    uint64_t v24 = v1[4];
    uint64_t v23 = v1[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char v25 = sub_25B21065C(v21, v22, v24, v23, v20);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v25) {
      return 1;
    }
  }
  return 0;
}

uint64_t RecordMetadata.Options.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t RecordMetadata.Options.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static RecordMetadata.Options.deleteOnOriginatorUnavailability.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_25B27A2D8()
{
  return sub_25B291260();
}

uint64_t sub_25B27A320()
{
  return sub_25B291250();
}

uint64_t sub_25B27A34C()
{
  return sub_25B291260();
}

uint64_t sub_25B27A390()
{
  return sub_25B290720();
}

uint64_t sub_25B27A3F0()
{
  return sub_25B2906F0();
}

uint64_t sub_25B27A440()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_25B27A478(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 16) == *(void *)(*(void *)a2 + 16)
    && *(void *)(*(void *)a1 + 24) == *(void *)(*(void *)a2 + 24))
  {
    return 1;
  }
  else
  {
    return sub_25B290FB0();
  }
}

uint64_t sub_25B27A4A4()
{
  return MEMORY[0x270F9D888](*(void *)(*(void *)v0 + 16), *(void *)(*(void *)v0 + 24));
}

uint64_t sub_25B27A4B0()
{
  return sub_25B290630();
}

uint64_t sub_25B27A4BC()
{
  return sub_25B291260();
}

uint64_t RecordMetadata.id.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B27D278(v1, a1, type metadata accessor for Record.ID);
}

uint64_t RecordMetadata.id.setter(uint64_t a1)
{
  return sub_25B27D0B0(a1, v1);
}

uint64_t (*RecordMetadata.id.modify())()
{
  return nullsub_1;
}

uint64_t sub_25B27A55C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for RecordMetadata() + 20));
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 16);
    uint64_t result = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v4 = 0;
    uint64_t result = 0;
  }
  *a2 = v4;
  a2[1] = result;
  return result;
}

uint64_t sub_25B27A5AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  if (v3)
  {
    uint64_t v4 = *a1;
    type metadata accessor for RecordMetadata.ClientDefinedID();
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v3;
    uint64_t v6 = *(int *)(type metadata accessor for RecordMetadata() + 20);
    swift_bridgeObjectRetain();
    uint64_t result = swift_release();
    *(void *)(a2 + v6) = v5;
  }
  else
  {
    uint64_t v8 = *(int *)(type metadata accessor for RecordMetadata() + 20);
    uint64_t result = swift_release();
    *(void *)(a2 + v8) = 0;
  }
  return result;
}

uint64_t (*RecordMetadata.clientDefinedID.modify(uint64_t a1))(uint64_t *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  uint64_t v3 = *(int *)(type metadata accessor for RecordMetadata() + 20);
  *(_DWORD *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(v1 + v3);
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
  }
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  return sub_25B27A6B4;
}

uint64_t sub_25B27A6B4(uint64_t *a1, char a2)
{
  uint64_t v3 = a1[1];
  if (a2)
  {
    uint64_t v4 = *((int *)a1 + 6);
    uint64_t v5 = a1[2];
    if (v3)
    {
      uint64_t v6 = *a1;
      type metadata accessor for RecordMetadata.ClientDefinedID();
      uint64_t v7 = swift_allocObject();
      *(void *)(v7 + 16) = v6;
      *(void *)(v7 + 24) = v3;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v7 = 0;
    }
    swift_release();
    *(void *)(v5 + v4) = v7;
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v3)
    {
      uint64_t v8 = *a1;
      type metadata accessor for RecordMetadata.ClientDefinedID();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v8;
      *(void *)(v9 + 24) = v3;
    }
    else
    {
      uint64_t v9 = 0;
    }
    uint64_t v11 = *((int *)a1 + 6);
    uint64_t v12 = a1[2];
    uint64_t result = swift_release();
    *(void *)(v12 + v11) = v9;
  }
  return result;
}

uint64_t RecordMetadata.version.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RecordMetadata() + 24);
  uint64_t v4 = sub_25B290080();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t RecordMetadata.version.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RecordMetadata() + 24);
  uint64_t v4 = sub_25B290080();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*RecordMetadata.version.modify())(void)
{
  return nullsub_1;
}

uint64_t RecordMetadata.destination.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + *(int *)(type metadata accessor for RecordMetadata() + 28));
  return swift_bridgeObjectRetain();
}

uint64_t RecordMetadata.destination.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(int *)(type metadata accessor for RecordMetadata() + 28);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + v3) = v2;
  return result;
}

uint64_t (*RecordMetadata.destination.modify())(void)
{
  return nullsub_1;
}

uint64_t RecordMetadata.expiration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RecordMetadata() + 32);
  return sub_25B1D86FC(v3, a1);
}

uint64_t RecordMetadata.expiration.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RecordMetadata() + 32);
  return sub_25B1A93FC(a1, v3);
}

uint64_t (*RecordMetadata.expiration.modify())(void)
{
  return nullsub_1;
}

uint64_t RecordMetadata.options.getter@<X0>(void *a1@<X8>)
{
  uint64_t result = type metadata accessor for RecordMetadata();
  *a1 = *(void *)(v1 + *(int *)(result + 36));
  return result;
}

uint64_t RecordMetadata.options.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t result = type metadata accessor for RecordMetadata();
  *(void *)(v1 + *(int *)(result + 36)) = v2;
  return result;
}

uint64_t (*RecordMetadata.options.modify())(void)
{
  return nullsub_1;
}

uint64_t RecordMetadata.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_25B290000();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  sub_25B290AA0();
  sub_25B290650();
  Record.ID.description.getter();
  sub_25B290650();
  swift_bridgeObjectRelease();
  sub_25B290650();
  uint64_t v9 = (int *)type metadata accessor for RecordMetadata();
  sub_25B290080();
  sub_25B27ED94((unint64_t *)&qword_26A4D9230, MEMORY[0x263F07508]);
  sub_25B290DB0();
  sub_25B290650();
  swift_bridgeObjectRelease();
  sub_25B290650();
  v12[0] = *(void *)(v0 + v9[7]);
  sub_25B290B90();
  sub_25B290650();
  v12[0] = *(void *)(v0 + v9[9]);
  sub_25B290600();
  sub_25B290650();
  swift_bridgeObjectRelease();
  uint64_t v10 = v13;
  sub_25B1D86FC(v1 + v9[8], (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_25B116DE0((uint64_t)v4, &qword_26A4D91F8);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v12[0] = 0;
    v12[1] = 0xE000000000000000;
    sub_25B290AA0();
    swift_bridgeObjectRelease();
    strcpy((char *)v12, "; expiration: ");
    HIBYTE(v12[1]) = -18;
    sub_25B27ED94((unint64_t *)&qword_26A4DB020, MEMORY[0x263F07490]);
    sub_25B290DB0();
    sub_25B290650();
    swift_bridgeObjectRelease();
    sub_25B290650();
    sub_25B290650();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v13;
  }
  return v10;
}

uint64_t RecordMetadata.init(id:version:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v33 = a1;
  uint64_t v34 = a4;
  uint64_t v7 = type metadata accessor for RecordMetadata();
  uint64_t v8 = (int *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v13;
  uint64_t v14 = sub_25B290080();
  uint64_t v29 = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Record.ID(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *a3;
  uint64_t v32 = type metadata accessor for Record.ID;
  sub_25B27D278(a1, (uint64_t)v20, type metadata accessor for Record.ID);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  uint64_t v21 = sub_25B290000();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  v22(v13, 1, 1, v21);
  uint64_t v23 = v8[7];
  uint64_t v24 = (uint64_t)&v10[v8[10]];
  v22((char *)v24, 1, 1, v21);
  sub_25B27D114((uint64_t)v20, (uint64_t)v10, type metadata accessor for Record.ID);
  *(void *)&v10[v23] = 0;
  uint64_t v25 = v29;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(&v10[v8[8]], v17, v29);
  *(void *)&v10[v8[9]] = v30;
  sub_25B1A93FC((uint64_t)v28, v24);
  *(void *)&v10[v8[11]] = 0;
  sub_25B27D114((uint64_t)v10, v34, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v31, v25);
  return sub_25B27D2E0(v33, v32);
}

uint64_t RecordMetadata.init(id:clientDefinedID:version:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = a3;
  uint64_t v30 = a2;
  uint64_t v35 = a6;
  uint64_t v9 = (int *)type metadata accessor for RecordMetadata();
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_25B290080();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Record.ID(0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = *a5;
  uint64_t v37 = a1;
  sub_25B27D278(a1, (uint64_t)v21, type metadata accessor for Record.ID);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v36 = a4;
  v22(v18, a4, v15);
  uint64_t v23 = sub_25B290000();
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  uint64_t v34 = v14;
  v24(v14, 1, 1, v23);
  uint64_t v31 = v9[5];
  uint64_t v25 = (uint64_t)&v11[v9[8]];
  uint64_t v26 = v23;
  uint64_t v27 = v33;
  v24((char *)v25, 1, 1, v26);
  sub_25B27D114((uint64_t)v21, (uint64_t)v11, type metadata accessor for Record.ID);
  uint64_t v28 = 0;
  if (v27)
  {
    type metadata accessor for RecordMetadata.ClientDefinedID();
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = v30;
    *(void *)(v28 + 24) = v27;
  }
  *(void *)&v11[v31] = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v11[v9[6]], v18, v15);
  *(void *)&v11[v9[7]] = v32;
  sub_25B1A93FC((uint64_t)v34, v25);
  *(void *)&v11[v9[9]] = 0;
  sub_25B27D114((uint64_t)v11, v35, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v36, v15);
  return sub_25B27D2E0(v37, type metadata accessor for Record.ID);
}

uint64_t RecordMetadata.hash(into:)(uint64_t a1)
{
  uint64_t v3 = sub_25B290000();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Record.ID.hash(into:)();
  uint64_t v10 = (int *)type metadata accessor for RecordMetadata();
  if (*(void *)(v1 + v10[5]))
  {
    sub_25B291230();
    swift_retain();
    sub_25B290630();
    swift_release();
  }
  else
  {
    sub_25B291230();
  }
  sub_25B290080();
  sub_25B27ED94(&qword_26A4D9220, MEMORY[0x263F07508]);
  sub_25B290540();
  uint64_t v11 = *(void *)(v1 + v10[7]);
  sub_25B291220();
  if (v11)
  {
    swift_bridgeObjectRetain();
    sub_25B11F318(a1, v11);
    swift_bridgeObjectRelease();
  }
  sub_25B1D86FC(v1 + v10[8], (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    sub_25B291230();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v9, v3);
    sub_25B291230();
    sub_25B27ED94(&qword_26A4DBA30, MEMORY[0x263F07490]);
    sub_25B290540();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return sub_25B291250();
}

uint64_t RecordMetadata.hashValue.getter()
{
  sub_25B291210();
  RecordMetadata.hash(into:)((uint64_t)v1);
  return sub_25B291260();
}

uint64_t sub_25B27B888@<X0>(uint64_t a1@<X8>)
{
  return sub_25B27D278(v1, a1, type metadata accessor for Record.ID);
}

uint64_t sub_25B27B8C0()
{
  sub_25B291210();
  RecordMetadata.hash(into:)((uint64_t)v1);
  return sub_25B291260();
}

uint64_t sub_25B27B904()
{
  sub_25B291210();
  RecordMetadata.hash(into:)((uint64_t)v1);
  return sub_25B291260();
}

ReplicatorEngine::RecordMetadata::CodingKeys_optional __swiftcall RecordMetadata.CodingKeys.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_25B290C30();
  result.value = swift_bridgeObjectRelease();
  char v5 = 6;
  if (v3 < 6) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

ReplicatorEngine::RecordMetadata::CodingKeys_optional __swiftcall RecordMetadata.CodingKeys.init(stringValue:)(Swift::String stringValue)
{
  uint64_t v2 = v1;
  result.value = RecordMetadata.CodingKeys.init(rawValue:)(stringValue).value;
  *uint64_t v2 = v4;
  return result;
}

ReplicatorEngine::RecordMetadata::CodingKeys_optional __swiftcall RecordMetadata.CodingKeys.init(intValue:)(Swift::Int intValue)
{
  *uint64_t v1 = 6;
  return (ReplicatorEngine::RecordMetadata::CodingKeys_optional)intValue;
}

uint64_t RecordMetadata.CodingKeys.intValue.getter()
{
  return 0;
}

uint64_t RecordMetadata.CodingKeys.rawValue.getter()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6544746E65696C63;
      break;
    case 2:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 3:
      uint64_t result = 0x74616E6974736564;
      break;
    case 4:
      uint64_t result = 0x6974617269707865;
      break;
    case 5:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RecordMetadata.CodingKeys.stringValue.getter()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6544746E65696C63;
      break;
    case 2:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 3:
      uint64_t result = 0x74616E6974736564;
      break;
    case 4:
      uint64_t result = 0x6974617269707865;
      break;
    case 5:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_25B27BB98(char *a1, char *a2)
{
  return sub_25B270F6C(*a1, *a2);
}

uint64_t sub_25B27BBA4()
{
  return sub_25B2712CC();
}

uint64_t sub_25B27BBAC()
{
  sub_25B290630();
  return swift_bridgeObjectRelease();
}

uint64_t sub_25B27BCB4()
{
  return sub_25B2713EC();
}

ReplicatorEngine::RecordMetadata::CodingKeys_optional sub_25B27BCBC(Swift::String *a1)
{
  return RecordMetadata.CodingKeys.init(rawValue:)(*a1);
}

void sub_25B27BCC8(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE200000000000000;
  uint64_t v3 = 25705;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xEF444964656E6966;
      uint64_t v3 = 0x6544746E65696C63;
      goto LABEL_3;
    case 2:
      *a1 = 0x6E6F6973726576;
      a1[1] = 0xE700000000000000;
      break;
    case 3:
      *a1 = 0x74616E6974736564;
      a1[1] = 0xEB000000006E6F69;
      break;
    case 4:
      *a1 = 0x6974617269707865;
      a1[1] = 0xEA00000000006E6FLL;
      break;
    case 5:
      *a1 = 0x736E6F6974706FLL;
      a1[1] = 0xE700000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_25B27BDB0()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6544746E65696C63;
      break;
    case 2:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 3:
      uint64_t result = 0x74616E6974736564;
      break;
    case 4:
      uint64_t result = 0x6974617269707865;
      break;
    case 5:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    default:
      return result;
  }
  return result;
}

ReplicatorEngine::RecordMetadata::CodingKeys_optional sub_25B27BE84@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  result.value = RecordMetadata.CodingKeys.init(rawValue:)(*(Swift::String *)&a1).value;
  *a2 = v5;
  return result;
}

uint64_t sub_25B27BEBC(uint64_t a1)
{
  unint64_t v2 = sub_25B27D17C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_25B27BEF8(uint64_t a1)
{
  unint64_t v2 = sub_25B27D17C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t RecordMetadata.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v39 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_25B290080();
  uint64_t v40 = *(void *)(v42 - 8);
  MEMORY[0x270FA5388](v42);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Record.ID(0);
  MEMORY[0x270FA5388](v7);
  uint64_t v43 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBA38);
  uint64_t v41 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for RecordMetadata();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = *(int *)(v13 + 20);
  *(void *)&v15[v45] = 0;
  uint64_t v16 = *(int *)(v13 + 32);
  char v47 = v15;
  uint64_t v17 = (uint64_t)&v15[v16];
  uint64_t v18 = sub_25B290000();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  uint64_t v48 = v17;
  v19(v17, 1, 1, v18);
  uint64_t v20 = a1[3];
  uint64_t v44 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v20);
  sub_25B27D17C();
  uint64_t v21 = v46;
  sub_25B291280();
  if (v21)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    swift_release();
    return sub_25B116DE0(v48, &qword_26A4D91F8);
  }
  else
  {
    uint64_t v46 = v18;
    uint64_t v22 = v6;
    uint64_t v23 = v42;
    LOBYTE(v49) = 0;
    sub_25B27ED94(&qword_26A4DB4F0, (void (*)(uint64_t))type metadata accessor for Record.ID);
    uint64_t v24 = v43;
    sub_25B290CC0();
    uint64_t v26 = (uint64_t)v24;
    uint64_t v27 = (uint64_t)v47;
    sub_25B27D114(v26, (uint64_t)v47, type metadata accessor for Record.ID);
    LOBYTE(v49) = 1;
    uint64_t v28 = sub_25B290C60();
    uint64_t v30 = v29;
    uint64_t v43 = v11;
    uint64_t v37 = v9;
    uint64_t v31 = v48;
    if (v29)
    {
      uint64_t v32 = v28;
      type metadata accessor for RecordMetadata.ClientDefinedID();
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v32;
      *(void *)(v33 + 24) = v30;
    }
    else
    {
      uint64_t v33 = 0;
    }
    *(void *)(v27 + v45) = v33;
    LOBYTE(v49) = 2;
    sub_25B27ED94(&qword_26A4D9228, MEMORY[0x263F07508]);
    sub_25B290CC0();
    (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v27 + v12[6], v22, v23);
    char v51 = 3;
    sub_25B27D1D0();
    sub_25B290CC0();
    *(void *)(v27 + v12[7]) = v49;
    LOBYTE(v49) = 4;
    sub_25B27ED94(&qword_26A4DBA50, MEMORY[0x263F07490]);
    sub_25B290C80();
    sub_25B1A93FC(v39, v31);
    char v51 = 5;
    sub_25B27D224();
    sub_25B290C80();
    uint64_t v34 = (void (**)(char *, uint64_t))(v41 + 8);
    if (v50 == 1)
    {
      (*v34)(v43, v37);
      uint64_t v35 = 0;
    }
    else
    {
      uint64_t v35 = v49;
      (*v34)(v43, v37);
    }
    uint64_t v36 = v38;
    *(void *)(v27 + v12[9]) = v35;
    sub_25B27D278(v27, v36, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
    return sub_25B27D2E0(v27, (uint64_t (*)(void))type metadata accessor for RecordMetadata);
  }
}

uint64_t RecordMetadata.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBA60);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_25B27D17C();
  sub_25B291290();
  LOBYTE(v12) = 0;
  type metadata accessor for Record.ID(0);
  sub_25B27ED94(&qword_26A4DB6E0, (void (*)(uint64_t))type metadata accessor for Record.ID);
  sub_25B290D60();
  if (!v2)
  {
    uint64_t v10 = (int *)type metadata accessor for RecordMetadata();
    if (*(void *)(v3 + v10[5]))
    {
      LOBYTE(v12) = 1;
      swift_bridgeObjectRetain();
      sub_25B290D40();
      swift_bridgeObjectRelease();
    }
    LOBYTE(v12) = 2;
    sub_25B290080();
    sub_25B27ED94((unint64_t *)&unk_26A4D9210, MEMORY[0x263F07508]);
    sub_25B290D60();
    uint64_t v12 = *(void *)(v3 + v10[7]);
    HIBYTE(v11) = 3;
    sub_25B27D340();
    sub_25B290D60();
    LOBYTE(v12) = 4;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    sub_25B27D394();
    sub_25B290D60();
    uint64_t v12 = *(void *)(v3 + v10[9]);
    HIBYTE(v11) = 5;
    sub_25B27D438();
    sub_25B290D60();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_25B27C9E0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return RecordMetadata.init(from:)(a1, a2);
}

uint64_t sub_25B27C9F8(void *a1)
{
  return RecordMetadata.encode(to:)(a1);
}

uint64_t sub_25B27CA10()
{
  return sub_25B290580() & 1;
}

BOOL _s16ReplicatorEngine14RecordMetadataV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v49 = sub_25B290000();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x270FA5388](v49);
  uint64_t v46 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9208);
  MEMORY[0x270FA5388](v5);
  uint64_t v48 = (uint64_t)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v44 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v44 - v14;
  if (*a1 == *a2 && a1[1] == a2[1] || (v16 = sub_25B290FB0(), BOOL result = 0, (v16 & 1) != 0))
  {
    if ((v19 = a1[4], uint64_t v18 = a1[5], v20 = a2[4], v21 = a2[5], a1[2] == a2[2]) && a1[3] == a2[3]
      || (v22 = sub_25B290FB0(), BOOL result = 0, (v22 & 1) != 0))
    {
      if (v19 == v20 && v18 == v21 || (v23 = sub_25B290FB0(), BOOL result = 0, (v23 & 1) != 0))
      {
        uint64_t v24 = type metadata accessor for Record.ID(0);
        if ((_s16ReplicatorEngine6RecordV2IDV9OwnershipO2eeoiySbAG_AGtFZ_0((uint64_t)a1 + *(int *)(v24 + 24), (uint64_t)a2 + *(int *)(v24 + 24)) & 1) == 0)return 0; {
        uint64_t v25 = (int *)type metadata accessor for RecordMetadata();
        }
        uint64_t v26 = v25[5];
        uint64_t v27 = *(void *)((char *)a1 + v26);
        uint64_t v28 = *(void *)((char *)a2 + v26);
        if (!v27)
        {
          if (v28) {
            return 0;
          }
LABEL_18:
          if (sub_25B290030())
          {
            uint64_t v30 = v25[7];
            uint64_t v31 = *(void *)((char *)a1 + v30);
            uint64_t v32 = *(void *)((char *)a2 + v30);
            if (v31)
            {
              if (!v32) {
                return 0;
              }
              swift_bridgeObjectRetain_n();
              swift_bridgeObjectRetain_n();
              char v33 = sub_25B11E308(v31, v32);
              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              uint64_t v34 = v49;
              if ((v33 & 1) == 0) {
                return 0;
              }
            }
            else
            {
              uint64_t v34 = v49;
              if (v32) {
                return 0;
              }
              swift_bridgeObjectRelease_n();
            }
            sub_25B1D86FC((uint64_t)a1 + v25[8], (uint64_t)v15);
            sub_25B1D86FC((uint64_t)a2 + v25[8], (uint64_t)v13);
            uint64_t v35 = *(int *)(v5 + 48);
            uint64_t v36 = v48;
            uint64_t v37 = v48 + v35;
            sub_25B1D86FC((uint64_t)v15, v48);
            uint64_t v45 = v37;
            sub_25B1D86FC((uint64_t)v13, v37);
            uint64_t v38 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
            if (v38(v36, 1, v34) == 1)
            {
              sub_25B116DE0((uint64_t)v13, &qword_26A4D91F8);
              sub_25B116DE0((uint64_t)v15, &qword_26A4D91F8);
              if (v38(v45, 1, v49) == 1)
              {
                sub_25B116DE0(v48, &qword_26A4D91F8);
                return *(void *)((char *)a1 + v25[9]) == *(void *)((char *)a2 + v25[9]);
              }
            }
            else
            {
              sub_25B1D86FC(v36, (uint64_t)v10);
              uint64_t v39 = v45;
              if (v38(v45, 1, v49) != 1)
              {
                uint64_t v40 = v47;
                uint64_t v41 = v39;
                uint64_t v42 = v49;
                (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v46, v41, v49);
                sub_25B27ED94(&qword_26A4DA718, MEMORY[0x263F07490]);
                LODWORD(v45) = sub_25B290580();
                uint64_t v43 = *(void (**)(char *, uint64_t))(v40 + 8);
                v43(v46, v42);
                sub_25B116DE0((uint64_t)v13, &qword_26A4D91F8);
                sub_25B116DE0((uint64_t)v15, &qword_26A4D91F8);
                v43(v10, v42);
                sub_25B116DE0(v36, &qword_26A4D91F8);
                if (v45) {
                  return *(void *)((char *)a1 + v25[9]) == *(void *)((char *)a2 + v25[9]);
                }
                return 0;
              }
              sub_25B116DE0((uint64_t)v13, &qword_26A4D91F8);
              sub_25B116DE0((uint64_t)v15, &qword_26A4D91F8);
              (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v49);
            }
            sub_25B116DE0(v48, &qword_26A4D9208);
          }
          return 0;
        }
        if (!v28) {
          return 0;
        }
        if (*(void *)(v27 + 16) == *(void *)(v28 + 16) && *(void *)(v27 + 24) == *(void *)(v28 + 24)) {
          goto LABEL_18;
        }
        char v29 = sub_25B290FB0();
        BOOL result = 0;
        if (v29) {
          goto LABEL_18;
        }
      }
    }
  }
  return result;
}

uint64_t sub_25B27D004()
{
  return sub_25B27D020() & 1;
}

uint64_t sub_25B27D020()
{
  return sub_25B290580() & 1;
}

uint64_t sub_25B27D0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Record.ID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B27D114(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_25B27D17C()
{
  unint64_t result = qword_26A4DBA40;
  if (!qword_26A4DBA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA40);
  }
  return result;
}

unint64_t sub_25B27D1D0()
{
  unint64_t result = qword_26A4DBA48;
  if (!qword_26A4DBA48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA48);
  }
  return result;
}

unint64_t sub_25B27D224()
{
  unint64_t result = qword_26A4DBA58;
  if (!qword_26A4DBA58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA58);
  }
  return result;
}

uint64_t sub_25B27D278(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_25B27D2E0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_25B27D340()
{
  unint64_t result = qword_26A4DBA68;
  if (!qword_26A4DBA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA68);
  }
  return result;
}

unint64_t sub_25B27D394()
{
  unint64_t result = qword_26A4DBA70;
  if (!qword_26A4DBA70)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26A4D91F8);
    sub_25B27ED94(&qword_26A4DBA78, MEMORY[0x263F07490]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA70);
  }
  return result;
}

unint64_t sub_25B27D438()
{
  unint64_t result = qword_26A4DBA80;
  if (!qword_26A4DBA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA80);
  }
  return result;
}

unint64_t sub_25B27D490()
{
  unint64_t result = qword_26A4DBA88;
  if (!qword_26A4DBA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA88);
  }
  return result;
}

unint64_t sub_25B27D4E8()
{
  unint64_t result = qword_26A4DBA90;
  if (!qword_26A4DBA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA90);
  }
  return result;
}

unint64_t sub_25B27D540()
{
  unint64_t result = qword_26A4DBA98;
  if (!qword_26A4DBA98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBA98);
  }
  return result;
}

unint64_t sub_25B27D598()
{
  unint64_t result = qword_26A4DBAA0;
  if (!qword_26A4DBAA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBAA0);
  }
  return result;
}

uint64_t sub_25B27D5EC()
{
  return sub_25B27ED94(&qword_26A4DA700, (void (*)(uint64_t))type metadata accessor for Record.ID);
}

uint64_t sub_25B27D634()
{
  return sub_25B27ED94(&qword_26A4DBAA8, (void (*)(uint64_t))type metadata accessor for RecordMetadata);
}

unint64_t sub_25B27D680()
{
  unint64_t result = qword_26A4DBAB0;
  if (!qword_26A4DBAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBAB0);
  }
  return result;
}

unint64_t sub_25B27D6D8()
{
  unint64_t result = qword_26A4DBAB8;
  if (!qword_26A4DBAB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBAB8);
  }
  return result;
}

unint64_t sub_25B27D730()
{
  unint64_t result = qword_26A4DBAC0;
  if (!qword_26A4DBAC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBAC0);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for RecordMetadata(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = a2[3];
    a1[2] = a2[2];
    a1[3] = v7;
    uint64_t v8 = a2[5];
    a1[4] = a2[4];
    a1[5] = v8;
    uint64_t v9 = *(int *)(type metadata accessor for Record.ID(0) + 24);
    __dst = (char *)v4 + v9;
    uint64_t v10 = (char *)a2 + v9;
    uint64_t v11 = sub_25B290080();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = type metadata accessor for Record.ID.Ownership(0);
      memcpy(__dst, v10, *(void *)(*(void *)(v14 - 8) + 64));
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    }
    else
    {
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
      v15(__dst, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
    }
    uint64_t v17 = a3[6];
    *(uint64_t *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    uint64_t v18 = (char *)v4 + v17;
    uint64_t v19 = (char *)a2 + v17;
    swift_retain();
    v15(v18, v19, v11);
    uint64_t v20 = a3[8];
    *(uint64_t *)((char *)v4 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v21 = (char *)v4 + v20;
    char v22 = (char *)a2 + v20;
    uint64_t v23 = sub_25B290000();
    uint64_t v24 = *(void *)(v23 - 8);
    uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
    swift_bridgeObjectRetain();
    if (v25(v22, 1, v23))
    {
      uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
      memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    *(uint64_t *)((char *)v4 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  }
  return v4;
}

uint64_t destroy for RecordMetadata(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(type metadata accessor for Record.ID(0) + 24);
  uint64_t v5 = sub_25B290080();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1 + *(int *)(a2 + 24), v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + *(int *)(a2 + 32);
  uint64_t v8 = sub_25B290000();
  uint64_t v11 = *(void *)(v8 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v7, 1, v8);
  if (!result)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v11 + 8);
    return v10(v7, v8);
  }
  return result;
}

void *initializeWithCopy for RecordMetadata(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  uint64_t v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  uint64_t v8 = *(int *)(type metadata accessor for Record.ID(0) + 24);
  __dst = (char *)a1 + v8;
  uint64_t v9 = (char *)a2 + v8;
  uint64_t v10 = sub_25B290080();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12(v9, 1, v10))
  {
    uint64_t v13 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(__dst, v9, *(void *)(*(void *)(v13 - 8) + 64));
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  }
  else
  {
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v14(__dst, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(__dst, 0, 1, v10);
  }
  uint64_t v15 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  swift_retain();
  v14(v16, v17, v10);
  uint64_t v18 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  uint64_t v21 = sub_25B290000();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  swift_bridgeObjectRetain();
  if (v23(v20, 1, v21))
  {
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

char *assignWithCopy for RecordMetadata(char *a1, char *a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = *((void *)a2 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = *((void *)a2 + 5);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(type metadata accessor for Record.ID(0) + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = sub_25B290080();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_retain();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(&a1[a3[6]], &a2[a3[6]], v9);
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[8];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_25B290000();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v21 = v20(v16, 1, v18);
  int v22 = v20(v17, 1, v18);
  if (!v21)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 24))(v16, v17, v18);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v16, v18);
    goto LABEL_12;
  }
  if (v22)
  {
LABEL_12:
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(v16, v17, *(void *)(*(void *)(v23 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
LABEL_13:
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  return a1;
}

char *initializeWithTake for RecordMetadata(char *a1, char *a2, int *a3)
{
  long long v6 = *((_OWORD *)a2 + 1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *((_OWORD *)a1 + 1) = v6;
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  uint64_t v7 = *(int *)(type metadata accessor for Record.ID(0) + 24);
  uint64_t v8 = &a1[v7];
  uint64_t v9 = &a2[v7];
  uint64_t v10 = sub_25B290080();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    uint64_t v12 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    int v13 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  }
  else
  {
    int v13 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v13(v8, v9, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  uint64_t v14 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  v13(&a1[v14], &a2[v14], v10);
  uint64_t v15 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  uint64_t v18 = sub_25B290000();
  uint64_t v19 = *(void *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v16, v17, v18);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  return a1;
}

char *assignWithTake for RecordMetadata(char *a1, char *a2, int *a3)
{
  uint64_t v6 = *((void *)a2 + 1);
  *(void *)a1 = *(void *)a2;
  *((void *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *((void *)a2 + 3);
  *((void *)a1 + 2) = *((void *)a2 + 2);
  *((void *)a1 + 3) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *((void *)a2 + 5);
  *((void *)a1 + 4) = *((void *)a2 + 4);
  *((void *)a1 + 5) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(type metadata accessor for Record.ID(0) + 24);
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = sub_25B290080();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    uint64_t v17 = type metadata accessor for Record.ID.Ownership(0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(&a1[a3[6]], &a2[a3[6]], v12);
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = sub_25B290000();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 40))(v19, v20, v21);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    memcpy(v19, v20, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_13:
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  return a1;
}

uint64_t getEnumTagSinglePayload for RecordMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B27E7F8);
}

uint64_t sub_25B27E7F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Record.ID(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_11:
    return v9(v10, a2, v8);
  }
  if (a2 == 2147483646)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
  else
  {
    uint64_t v14 = sub_25B290080();
    uint64_t v15 = *(void *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a2)
    {
      uint64_t v8 = v14;
      uint64_t v10 = a1 + a3[6];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      goto LABEL_11;
    }
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[8];
    return v17(v19, a2, v18);
  }
}

uint64_t storeEnumTagSinglePayload for RecordMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B27E99C);
}

uint64_t sub_25B27E99C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Record.ID(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[5]) = a2;
    return result;
  }
  uint64_t v13 = sub_25B290080();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[6];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[8];
  return v16(v18, a2, a2, v17);
}

void sub_25B27EB20()
{
  type metadata accessor for Record.ID(319);
  if (v0 <= 0x3F)
  {
    sub_25B290080();
    if (v1 <= 0x3F)
    {
      sub_25B1AA8CC();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

ValueMetadata *type metadata accessor for RecordMetadata.Options()
{
  return &type metadata for RecordMetadata.Options;
}

unsigned char *storeEnumTagSinglePayload for RecordMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B27ED14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RecordMetadata.CodingKeys()
{
  return &type metadata for RecordMetadata.CodingKeys;
}

uint64_t sub_25B27ED4C()
{
  return sub_25B27ED94(&qword_26A4DBAC8, (void (*)(uint64_t))type metadata accessor for RecordMetadata.ClientDefinedID);
}

uint64_t sub_25B27ED94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static UniformHasher.hash<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F280);
  MEMORY[0x270FA5388](v9);
  unint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UniformHasher();
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s16ReplicatorEngine13UniformHasherVACycfC_0();
  UniformHasher.combine<A>(_:)(a1, a2, a3);
  if (v4) {
    return sub_25B27F81C((uint64_t)v17);
  }
  sub_25B290480();
  *(void *)&v11[*(int *)(v9 + 36)] = 16;
  uint64_t v18 = sub_25B20CEEC((uint64_t)v11);
  sub_25B10DDE4(v18, v19, (uint64_t)v14);
  uint64_t v20 = sub_25B290080();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v14, 1, v20);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v21 + 32))(a4, v14, v20);
    return sub_25B27F81C((uint64_t)v17);
  }
  __break(1u);
  return result;
}

void UniformHasher.combine<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)MEMORY[0x26115FD30]();
  sub_25B27F050(a1, v3, a2, a3);
}

uint64_t sub_25B27F050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[5] = *MEMORY[0x263EF8340];
  v16[3] = a3;
  v16[4] = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for PropertyListTypeEncoder();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = 0;
  *(unsigned char *)(inited + 24) = 1;
  uint64_t v9 = (void *)sub_25B281964(v16);
  if (v4) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  uint64_t v10 = sub_25B2851A4(v9);
  unint64_t v12 = v11;
  swift_unknownObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  switch(v12 >> 62)
  {
    case 1uLL:
      if (v10 >> 32 < (int)v10) {
        __break(1u);
      }
      sub_25B114300(v10, v12);
      sub_25B1E3F04((int)v10, v10 >> 32);
      break;
    case 2uLL:
      uint64_t v14 = *(void *)(v10 + 16);
      uint64_t v15 = *(void *)(v10 + 24);
      sub_25B114300(v10, v12);
      swift_retain();
      swift_retain();
      sub_25B1E3F04(v14, v15);
      swift_release();
      swift_release();
      break;
    case 3uLL:
      sub_25B2904A0();
      sub_25B27FE5C();
      memset(v16, 0, 14);
      goto LABEL_8;
    default:
      v16[0] = v10;
      LOWORD(v16[1]) = v12;
      BYTE2(v16[1]) = BYTE2(v12);
      BYTE3(v16[1]) = BYTE3(v12);
      BYTE4(v16[1]) = BYTE4(v12);
      BYTE5(v16[1]) = BYTE5(v12);
      sub_25B2904A0();
      sub_25B27FE5C();
LABEL_8:
      sub_25B290450();
      break;
  }
  sub_25B10DFF0(v10, v12);
  return sub_25B10DFF0(v10, v12);
}

void UniformHasher.combine<A>(_:)(uint64_t a1)
{
  unint64_t v2 = (void *)MEMORY[0x26115FD30]();
  sub_25B27F398(a1);
}

uint64_t sub_25B27F398(uint64_t a1)
{
  id v3 = objc_msgSend(objc_allocWithZone((Class)STRPPropertyListTypeEncoder), sel_init);
  id v4 = objc_msgSend(v3, sel_encodeRootObject_, a1);

  uint64_t v5 = sub_25B2851A4(v4);
  unint64_t v7 = v6;
  uint64_t result = swift_unknownObjectRelease();
  if (!v1)
  {
    switch(v7 >> 62)
    {
      case 1uLL:
        if (v5 >> 32 < (int)v5) {
          __break(1u);
        }
        sub_25B114300(v5, v7);
        sub_25B1E3F04((int)v5, v5 >> 32);
        goto LABEL_8;
      case 2uLL:
        uint64_t v9 = *(void *)(v5 + 16);
        uint64_t v10 = *(void *)(v5 + 24);
        sub_25B114300(v5, v7);
        swift_retain();
        swift_retain();
        sub_25B1E3F04(v9, v10);
        swift_release();
        swift_release();
LABEL_8:
        sub_25B10DFF0(v5, v7);
        uint64_t result = sub_25B10DFF0(v5, v7);
        break;
      default:
        sub_25B2904A0();
        sub_25B27FE5C();
        sub_25B290450();
        sub_25B10DFF0(v5, v7);
        uint64_t result = sub_25B10DFF0(v5, v7);
        break;
    }
  }
  return result;
}

uint64_t UniformHasher.finalize()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F280);
  uint64_t v3 = v2 - 8;
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B290480();
  *(void *)&v5[*(int *)(v3 + 44)] = 16;
  uint64_t v9 = sub_25B20CEEC((uint64_t)v5);
  sub_25B10DDE4(v9, v10, (uint64_t)v8);
  uint64_t v11 = sub_25B290080();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a1, v8, v11);
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for UniformHasher()
{
  uint64_t result = qword_26B33F208;
  if (!qword_26B33F208) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25B27F81C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UniformHasher();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t static UniformHasher.hash<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F280);
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UniformHasher();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s16ReplicatorEngine13UniformHasherVACycfC_0();
  UniformHasher.combine<A>(_:)(a1);
  if (v2) {
    return sub_25B27F81C((uint64_t)v13);
  }
  sub_25B290480();
  *(void *)&v7[*(int *)(v5 + 36)] = 16;
  uint64_t v14 = sub_25B20CEEC((uint64_t)v7);
  sub_25B10DDE4(v14, v15, (uint64_t)v10);
  uint64_t v16 = sub_25B290080();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v10, 1, v16);
  if (result != 1)
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(a2, v10, v16);
    return sub_25B27F81C((uint64_t)v13);
  }
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UniformHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B2904A0();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  return v5(a1, a2, v4);
}

uint64_t destroy for UniformHasher(uint64_t a1)
{
  uint64_t v2 = sub_25B2904A0();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for UniformHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B2904A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for UniformHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B2904A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for UniformHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B2904A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for UniformHasher(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B2904A0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for UniformHasher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B27FCE0);
}

uint64_t sub_25B27FCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B2904A0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);
  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UniformHasher(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B27FD60);
}

uint64_t sub_25B27FD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B2904A0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  return v5(a1, a2, a2, v4);
}

uint64_t sub_25B27FDD0()
{
  uint64_t result = sub_25B2904A0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_25B27FE5C()
{
  unint64_t result = qword_26B33F220;
  if (!qword_26B33F220)
  {
    sub_25B2904A0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B33F220);
  }
  return result;
}

ReplicatorEngine::MessageSendOptions __swiftcall MessageSendOptions.init(timeout:retries:)(Swift::Double timeout, Swift::Int retries)
{
  *(Swift::Double *)uint64_t v2 = timeout;
  *(void *)(v2 + 8) = retries;
  result.timeout = timeout;
  result.retries = retries;
  return result;
}

uint64_t IncomingSyncServiceMessage.init(message:url:deviceID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for IncomingSyncServiceMessage();
  uint64_t v11 = a5 + *(int *)(v10 + 20);
  uint64_t v12 = sub_25B28FEA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  sub_25B116BFC(a1, a5);
  uint64_t result = sub_25B1AAB20(a2, v11);
  uint64_t v14 = (void *)(a5 + *(int *)(v10 + 24));
  *uint64_t v14 = a3;
  v14[1] = a4;
  return result;
}

uint64_t type metadata accessor for IncomingSyncServiceMessage()
{
  uint64_t result = qword_26A4DBAD0;
  if (!qword_26A4DBAD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t IncomingSyncServiceMessage.message.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_25B116D14(v1, a1);
}

uint64_t IncomingSyncServiceMessage.message.setter(uint64_t a1)
{
  return sub_25B27FFE0(a1, v1);
}

uint64_t sub_25B27FFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Message();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*IncomingSyncServiceMessage.message.modify())()
{
  return nullsub_1;
}

uint64_t IncomingSyncServiceMessage.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for IncomingSyncServiceMessage() + 20);
  return sub_25B116D78(v3, a1);
}

uint64_t IncomingSyncServiceMessage.url.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for IncomingSyncServiceMessage() + 20);
  return sub_25B1AAB20(a1, v3);
}

uint64_t (*IncomingSyncServiceMessage.url.modify())(void)
{
  return nullsub_1;
}

uint64_t IncomingSyncServiceMessage.deviceID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for IncomingSyncServiceMessage() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t IncomingSyncServiceMessage.deviceID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for IncomingSyncServiceMessage() + 24));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*IncomingSyncServiceMessage.deviceID.modify())(void)
{
  return nullsub_1;
}

uint64_t dispatch thunk of SyncServiceDelegate.syncService(_:didReceiveMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of SyncServiceDelegate.syncService(_:didReceiveMessage:url:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t dispatch thunk of SyncServiceDelegate.syncService(_:shouldAcceptIncomingMessage:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of SyncServiceDelegate.syncService(_:availableDevicesDidChange:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 32))();
}

char *initializeBufferWithCopyOfBuffer for IncomingSyncServiceMessage(char *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_25B290080();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = (int *)type metadata accessor for Message();
    uint64_t v11 = v10[5];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = &a2[v11];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&a2[v11], 1, v7))
    {
      uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      v9(v12, v13, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v12, 0, 1, v7);
    }
    uint64_t v16 = v10[6];
    uint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    uint64_t v19 = *((void *)v18 + 1);
    *(void *)uint64_t v17 = *(void *)v18;
    *((void *)v17 + 1) = v19;
    uint64_t v20 = v10[7];
    uint64_t v21 = &a1[v20];
    uint64_t v22 = &a2[v20];
    uint64_t v23 = *((void *)v22 + 1);
    *(void *)uint64_t v21 = *(void *)v22;
    *((void *)v21 + 1) = v23;
    *(void *)&a1[v10[8]] = *(void *)&a2[v10[8]];
    uint64_t v24 = v10[9];
    int v25 = (uint64_t *)&a1[v24];
    uint64_t v26 = (uint64_t *)&a2[v24];
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25B114300(v27, v28);
    *int v25 = v27;
    v25[1] = v28;
    uint64_t v29 = *(int *)(a3 + 20);
    uint64_t v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    uint64_t v32 = sub_25B28FEA0();
    uint64_t v33 = *(void *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
      memcpy(v30, v31, *(void *)(*(void *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    uint64_t v35 = *(int *)(a3 + 24);
    uint64_t v36 = &a1[v35];
    uint64_t v37 = &a2[v35];
    uint64_t v38 = *((void *)v37 + 1);
    *(void *)uint64_t v36 = *(void *)v37;
    *((void *)v36 + 1) = v38;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for IncomingSyncServiceMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B290080();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = type metadata accessor for Message();
  uint64_t v8 = a1 + *(int *)(v7 + 20);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4)) {
    v6(v8, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_25B10DFF0(*(void *)(a1 + *(int *)(v7 + 36)), *(void *)(a1 + *(int *)(v7 + 36) + 8));
  uint64_t v9 = a1 + *(int *)(a2 + 20);
  uint64_t v10 = sub_25B28FEA0();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for IncomingSyncServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = (int *)type metadata accessor for Message();
  uint64_t v10 = v9[5];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (const void *)(a2 + v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v10, 1, v6))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v11, (uint64_t)v12, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  uint64_t v14 = v9[6];
  uint64_t v15 = (void *)(a1 + v14);
  uint64_t v16 = (void *)(a2 + v14);
  uint64_t v17 = v16[1];
  void *v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = v9[7];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  *(void *)(a1 + v9[8]) = *(void *)(a2 + v9[8]);
  uint64_t v22 = v9[9];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B114300(v25, v26);
  *uint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = *(int *)(a3 + 20);
  unint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  uint64_t v30 = sub_25B28FEA0();
  uint64_t v31 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  uint64_t v33 = *(int *)(a3 + 24);
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (void *)(a2 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for IncomingSyncServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25B290080();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = (int *)type metadata accessor for Message();
  uint64_t v9 = v8[5];
  uint64_t v42 = a1;
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v44 = a2;
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v13 = v12(v10, 1, v5);
  int v14 = v12(v11, 1, v5);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v10, v11, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v10, v5);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v7((uint64_t)v10, (uint64_t)v11, v5);
LABEL_7:
  uint64_t v16 = v8[6];
  uint64_t v17 = (void *)(v42 + v16);
  uint64_t v18 = (void *)(v44 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = v8[7];
  uint64_t v20 = (void *)(v42 + v19);
  uint64_t v21 = (void *)(v44 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v42 + v8[8]) = *(void *)(v44 + v8[8]);
  uint64_t v22 = v8[9];
  uint64_t v23 = (uint64_t *)(v42 + v22);
  uint64_t v24 = (uint64_t *)(v44 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_25B114300(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *uint64_t v23 = v25;
  v23[1] = v26;
  sub_25B10DFF0(v27, v28);
  uint64_t v29 = *(int *)(a3 + 20);
  uint64_t v30 = (void *)(v42 + v29);
  uint64_t v31 = (void *)(v44 + v29);
  uint64_t v32 = sub_25B28FEA0();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 24))(v30, v31, v32);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_12;
  }
  if (v36)
  {
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 16))(v30, v31, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_13:
  uint64_t v38 = *(int *)(a3 + 24);
  uint64_t v39 = (void *)(v42 + v38);
  uint64_t v40 = (void *)(v44 + v38);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v42;
}

char *initializeWithTake for IncomingSyncServiceMessage(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290080();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = (int *)type metadata accessor for Message();
  uint64_t v10 = v9[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v10], 1, v6))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    v8(v11, v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v11, 0, 1, v6);
  }
  *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
  *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
  *(void *)&a1[v9[8]] = *(void *)&a2[v9[8]];
  *(_OWORD *)&a1[v9[9]] = *(_OWORD *)&a2[v9[9]];
  uint64_t v14 = *(int *)(a3 + 20);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = sub_25B28FEA0();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t assignWithTake for IncomingSyncServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_25B290080();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = (int *)type metadata accessor for Message();
  uint64_t v9 = v8[5];
  uint64_t v44 = a1;
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v46 = a2;
  uint64_t v11 = (void *)(a2 + v9);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v13 = v12(v10, 1, v5);
  int v14 = v12(v11, 1, v5);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v10, v11, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v10, 0, 1, v5);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v6 + 8))(v10, v5);
LABEL_6:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F200);
    memcpy(v10, v11, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  v7((uint64_t)v10, (uint64_t)v11, v5);
LABEL_7:
  uint64_t v16 = v8[6];
  uint64_t v17 = (void *)(v44 + v16);
  uint64_t v18 = (uint64_t *)(v46 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  uint64_t v21 = v8[7];
  uint64_t v22 = (void *)(v44 + v21);
  uint64_t v23 = (uint64_t *)(v46 + v21);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  *(void *)(v44 + v8[8]) = *(void *)(v46 + v8[8]);
  uint64_t v26 = v8[9];
  uint64_t v27 = *(void *)(v44 + v26);
  unint64_t v28 = *(void *)(v44 + v26 + 8);
  *(_OWORD *)(v44 + v26) = *(_OWORD *)(v46 + v26);
  sub_25B10DFF0(v27, v28);
  uint64_t v29 = *(int *)(a3 + 20);
  uint64_t v30 = (void *)(v44 + v29);
  uint64_t v31 = (void *)(v46 + v29);
  uint64_t v32 = sub_25B28FEA0();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v30, 1, v32);
  int v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v33 + 40))(v30, v31, v32);
      goto LABEL_13;
    }
    (*(void (**)(void *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_12;
  }
  if (v36)
  {
LABEL_12:
    uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    memcpy(v30, v31, *(void *)(*(void *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v33 + 32))(v30, v31, v32);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_13:
  uint64_t v38 = *(int *)(a3 + 24);
  uint64_t v39 = (void *)(v44 + v38);
  uint64_t v40 = (uint64_t *)(v46 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *uint64_t v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t getEnumTagSinglePayload for IncomingSyncServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_25B281374);
}

uint64_t sub_25B281374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Message();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for IncomingSyncServiceMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_25B2814A4);
}

uint64_t sub_25B2814A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Message();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9160);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_25B2815BC()
{
  type metadata accessor for Message();
  if (v0 <= 0x3F)
  {
    sub_25B1B32F0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

ValueMetadata *type metadata accessor for MessageSendOptions()
{
  return &type metadata for MessageSendOptions;
}

uint64_t dispatch thunk of SyncServicing.localDeviceID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SyncServicing.deviceIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of SyncServicing.add(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

uint64_t dispatch thunk of SyncServicing.resume()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of SyncServicing.send(message:url:remoteDevice:priority:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 40))();
}

uint64_t dispatch thunk of SyncServicing.sendWithResponse(message:url:remoteDevice:priority:options:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 48))();
}

uint64_t dispatch thunk of SyncServicing.pairingRelationshipPublisher.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of SyncServicing.pairingRelationshipPublisher.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of SyncServicing.pairingRelationshipPublisher.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of SyncServicing.fetchLocalDeviceID(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 80))();
}

uint64_t dispatch thunk of MetadataPersisting.localDeviceID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MetadataPersisting.isEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MetadataPersisting.recordMetadata.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MetadataPersisting.pairingRelationships.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MetadataPersisting.allowListEnabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MetadataPersisting.allowList.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of MetadataPersisting.clientDefinedID(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.localDeviceID.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.localDeviceID.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.isEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.isEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.allowListEnabled.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.allowListEnabled.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 56))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.allowList.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 64))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.allowList.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 72))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.removeAll()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.update(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.removePairingRelationship(with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 96))();
}

uint64_t dispatch thunk of MutableMetadataPersisting.remove(recordIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

uint64_t PropertyListTypeEncoder.version.getter()
{
  return *(void *)(v0 + 16);
}

uint64_t PropertyListTypeEncoder.__allocating_init(version:)(uint64_t a1, char a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(unsigned char *)(result + 24) = a2 & 1;
  return result;
}

uint64_t PropertyListTypeEncoder.init(version:)(uint64_t a1, char a2)
{
  *(void *)(v2 + 16) = a1;
  *(unsigned char *)(v2 + 24) = a2 & 1;
  return v2;
}

uint64_t sub_25B281964(void *a1)
{
  uint64_t v4 = sub_25B290B10();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B10FF48((uint64_t)a1, (uint64_t)v23);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F480);
  sub_25B281C78();
  if (swift_dynamicCast()) {
    return v23[6];
  }
  uint64_t v22 = v5;
  uint64_t v9 = *(void *)(v1 + 16);
  char v10 = *(unsigned char *)(v1 + 24);
  uint64_t v11 = type metadata accessor for PropertyListTypeEncoder.RootEncoder();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = 0;
  *(void *)(v12 + 24) = v9;
  *(unsigned char *)(v12 + 32) = v10;
  int v13 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v23[3] = v11;
  v23[4] = sub_25B282660(&qword_26B33F420);
  v23[0] = v12;
  swift_retain();
  uint64_t v8 = (uint64_t)v13;
  sub_25B290520();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    uint64_t v8 = *(void *)(v12 + 16);
    if (v8)
    {
      swift_unknownObjectRetain();
      swift_release();
    }
    else
    {
      sub_25B290AD0();
      uint64_t v8 = sub_25B290B20();
      swift_allocError();
      uint64_t v16 = v15;
      uint64_t v17 = (char *)v15 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBAE0) + 48);
      uint64_t v18 = a1[3];
      uint64_t v19 = __swift_project_boxed_opaque_existential_1(a1, v18);
      v16[3] = v18;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v16);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v18 - 8) + 16))(boxed_opaque_existential_1, v19, v18);
      uint64_t v21 = v22;
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v17, v7, v4);
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v8 - 8) + 104))(v16, *MEMORY[0x263F8DCE0], v8);
      swift_willThrow();
      swift_release();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v4);
    }
  }
  return v8;
}

unint64_t sub_25B281C78()
{
  unint64_t result = qword_26B33F488;
  if (!qword_26B33F488)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26B33F488);
  }
  return result;
}

uint64_t type metadata accessor for PropertyListTypeEncoder.RootEncoder()
{
  return self;
}

uint64_t PropertyListTypeEncoder.deinit()
{
  return v0;
}

uint64_t PropertyListTypeEncoder.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PropertyListTypeEncoder()
{
  return self;
}

uint64_t method lookup function for PropertyListTypeEncoder(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for PropertyListTypeEncoder);
}

uint64_t dispatch thunk of PropertyListTypeEncoder.__allocating_init(version:)(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 88))(a1, a2 & 1);
}

uint64_t dispatch thunk of PropertyListTypeEncoder.encode(_:)()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 96))();
}

uint64_t sub_25B281D80()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init);
  *(void *)(v0 + 16) = v1;
  v1;
  swift_unknownObjectRelease();
  type metadata accessor for PropertyListTypeEncoder.KeyedEncoder();
  swift_getWitnessTable();
  return sub_25B290D90();
}

uint64_t sub_25B281E54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v4;
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  sub_25B281C78();
  if (swift_dynamicCast())
  {
    v4[2] = v16[0];
  }
  else
  {
    uint64_t v10 = v4[3];
    char v11 = *((unsigned char *)v4 + 32);
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 24) = v10;
    *(unsigned char *)(v12 + 32) = v11;
    v16[3] = v7;
    v16[4] = sub_25B282660(&qword_26B33F420);
    v16[0] = v12;
    swift_retain();
    sub_25B290520();
    if (v3)
    {
      swift_release();
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    uint64_t v14 = *(void *)(v12 + 16);
    swift_unknownObjectRetain();
    swift_release();
    v4[2] = v14;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_25B282044()
{
  swift_unknownObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t sub_25B28207C()
{
  return MEMORY[0x263F8EE78];
}

unint64_t sub_25B282088()
{
  return sub_25B20D420(MEMORY[0x263F8EE78]);
}

uint64_t sub_25B282094()
{
  return sub_25B281D80();
}

uint64_t sub_25B2820B8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *v1;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF980]), sel_init);
  *(void *)(v3 + 16) = v4;
  id v5 = v4;
  swift_unknownObjectRelease();
  uint64_t v6 = *(void *)(v3 + 24);
  LOBYTE(v3) = *(unsigned char *)(v3 + 32);
  a1[3] = (uint64_t)&type metadata for PropertyListTypeEncoder.UnkeyedEncoder;
  a1[4] = sub_25B2826A4();
  uint64_t result = swift_allocObject();
  *a1 = result;
  *(void *)(result + 16) = MEMORY[0x263F8EE78];
  *(void *)(result + 24) = v5;
  *(void *)(result + 32) = v6;
  *(unsigned char *)(result + 40) = v3;
  return result;
}

uint64_t sub_25B28215C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *v2;
  a2[3] = a1;
  a2[4] = sub_25B282660(&qword_26B33F428);
  *a2 = v4;
  return swift_retain();
}

uint64_t sub_25B2821C0()
{
  uint64_t v1 = *v0;
  *(void *)(v1 + 16) = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
  return swift_unknownObjectRelease();
}

uint64_t sub_25B282210()
{
  uint64_t v1 = *v0;
  *(void *)(v1 + 16) = sub_25B290760();
  return swift_unknownObjectRelease();
}

uint64_t sub_25B28224C()
{
  uint64_t v1 = *v0;
  *(void *)(v1 + 16) = sub_25B290590();
  return swift_unknownObjectRelease();
}

uint64_t sub_25B282288()
{
  uint64_t v1 = *v0;
  *(void *)(v1 + 16) = sub_25B2907C0();
  return swift_unknownObjectRelease();
}

uint64_t sub_25B2822C4()
{
  uint64_t v1 = *v0;
  *(void *)(v1 + 16) = sub_25B290800();
  return swift_unknownObjectRelease();
}

uint64_t sub_25B282300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B282590(a1, a2, a3, MEMORY[0x263F07BE0]);
}

uint64_t sub_25B28232C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B28244C(a1, a2, a3, MEMORY[0x263F07DF0]);
}

uint64_t sub_25B282358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B2824B8(a1, a2, a3, MEMORY[0x263F07DF8]);
}

uint64_t sub_25B282384(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B282524(a1, a2, a3, MEMORY[0x263F07E08]);
}

uint64_t sub_25B2823B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B282590(a1, a2, a3, MEMORY[0x263F07E10]);
}

uint64_t sub_25B2823DC()
{
  return sub_25B290FE0();
}

uint64_t sub_25B2823F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B282590(a1, a2, a3, MEMORY[0x263F07D78]);
}

uint64_t sub_25B282420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B28244C(a1, a2, a3, MEMORY[0x263F07E28]);
}

uint64_t sub_25B28244C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 16) = a4();
  return swift_unknownObjectRelease();
}

uint64_t sub_25B28248C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B2824B8(a1, a2, a3, MEMORY[0x263F07E30]);
}

uint64_t sub_25B2824B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 16) = a4();
  return swift_unknownObjectRelease();
}

uint64_t sub_25B2824F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B282524(a1, a2, a3, MEMORY[0x263F07E38]);
}

uint64_t sub_25B282524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 16) = a4();
  return swift_unknownObjectRelease();
}

uint64_t sub_25B282564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B282590(a1, a2, a3, MEMORY[0x263F07E48]);
}

uint64_t sub_25B282590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = *v4;
  *(void *)(v5 + 16) = a4();
  return swift_unknownObjectRelease();
}

uint64_t sub_25B2825D0()
{
  return sub_25B290FF0();
}

uint64_t sub_25B2825E8(uint64_t a1, uint64_t a2)
{
  return sub_25B281E54(a1, a2);
}

uint64_t sub_25B28260C()
{
  return *(void *)(*(void *)v0 + 24);
}

uint64_t sub_25B28261C(uint64_t a1)
{
  uint64_t result = sub_25B282660(&qword_26B33F420);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_25B282660(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for PropertyListTypeEncoder.RootEncoder();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_25B2826A4()
{
  unint64_t result = qword_26B33F398[0];
  if (!qword_26B33F398[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_26B33F398);
  }
  return result;
}

uint64_t sub_25B2826F8()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 41, 7);
}

uint64_t type metadata accessor for PropertyListTypeEncoder.KeyedEncoder()
{
  return __swift_instantiateGenericMetadata();
}

void _s16ReplicatorEngine23PropertyListTypeEncoderC14UnkeyedEncoderVwxx_0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t _s16ReplicatorEngine23PropertyListTypeEncoderC14UnkeyedEncoderVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t _s16ReplicatorEngine23PropertyListTypeEncoderC14UnkeyedEncoderVwca_0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a2 + 8);
  uint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v7;
  return a1;
}

uint64_t _s16ReplicatorEngine23PropertyListTypeEncoderC14UnkeyedEncoderVwta_0(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  id v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t _s16ReplicatorEngine23PropertyListTypeEncoderC14UnkeyedEncoderVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t sub_25B2828E8(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PropertyListTypeEncoder.UnkeyedEncoder()
{
  return &type metadata for PropertyListTypeEncoder.UnkeyedEncoder;
}

uint64_t sub_25B28293C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void **)(v3 + 8);
  uint64_t v11 = sub_25B2912C0();
  char v13 = v12;
  if (v12)
  {
    uint64_t v11 = 0;
    *((void *)&v17 + 1) = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = MEMORY[0x263F8D6C8];
  }
  *(void *)&long long v17 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, v6);
  if (v13)
  {
    uint64_t v14 = sub_25B2912A0();
    uint64_t v21 = MEMORY[0x263F8D310];
    *(void *)&long long v20 = v14;
    *((void *)&v20 + 1) = v15;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_25B254744((uint64_t)&v17);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_25B1979E4(&v17, &v20);
  }
  __swift_project_boxed_opaque_existential_1(&v20, v21);
  objc_msgSend(v10, sel___swift_setObject_forKeyedSubscript_, a1, sub_25B290FA0());
  swift_unknownObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
}

void sub_25B282B08(uint64_t a1, uint64_t a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
  sub_25B28293C((uint64_t)v4, a1, a2);
}

void sub_25B282B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)sub_25B290760();
  sub_25B28293C((uint64_t)v5, a2, a3);
}

void sub_25B282BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)sub_25B290590();
  sub_25B28293C((uint64_t)v6, a3, a4);
}

void sub_25B282C00(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)sub_25B2907C0();
  sub_25B28293C((uint64_t)v4, a1, a2);
}

void sub_25B282C4C(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)sub_25B290800();
  sub_25B28293C((uint64_t)v4, a1, a2);
}

void sub_25B282C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  sub_25B28293C((uint64_t)v6, a2, a3);
}

void sub_25B282CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  sub_25B28293C((uint64_t)v6, a2, a3);
}

void sub_25B282D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  sub_25B28293C((uint64_t)v6, a2, a3);
}

void sub_25B282D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = (void *)a4();
  sub_25B28293C((uint64_t)v6, a2, a3);
}

uint64_t sub_25B282DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v23 = a5;
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v8 = *(void *)(a4 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](a1);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  char v12 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v12((char *)&v23 - v13, a1, v14);
  sub_25B281C78();
  int v15 = swift_dynamicCast();
  uint64_t v16 = v26[0];
  v12(v11, a1, a4);
  if (v15) {
    BOOL v17 = v16 == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17)
  {
    uint64_t v18 = *(void *)(v27 + 16);
    char v19 = *(unsigned char *)(v27 + 24);
    type metadata accessor for PropertyListTypeEncoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v18;
    *(unsigned char *)(inited + 24) = v19;
    v26[3] = a4;
    v26[4] = v23;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v26);
    v12((char *)boxed_opaque_existential_1, (uint64_t)v11, a4);
    uint64_t v16 = sub_25B281964(v26);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a4);
    swift_release();
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    if (v5) {
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a4);
  }
  sub_25B28293C(v16, v24, v25);
  return swift_unknownObjectRelease();
}

void sub_25B282FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init);
  sub_25B28293C((uint64_t)v5, a2, a3);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25B292C10;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(inited + 56) = v7;
  *(void *)(inited + 64) = *(void *)(a3 + 24);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(boxed_opaque_existential_1, a2, v7);
  id v9 = v5;
  swift_bridgeObjectRetain();
  sub_25B25325C(inited);
  type metadata accessor for PropertyListTypeEncoder.KeyedEncoder();
  swift_bridgeObjectRetain();
  id v10 = v9;
  swift_getWitnessTable();
  sub_25B290D90();
  swift_bridgeObjectRelease();
}

void sub_25B2831B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v4 = v3;
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF980]), sel_init);
  sub_25B28293C((uint64_t)v8, a1, a2);
  uint64_t v9 = *v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4A8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_25B292C10;
  uint64_t v11 = *(void *)(a2 + 16);
  *(void *)(inited + 56) = v11;
  *(void *)(inited + 64) = *(void *)(a2 + 24);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, a1, v11);
  id v13 = v8;
  swift_bridgeObjectRetain();
  sub_25B25325C(inited);
  uint64_t v14 = v9;
  uint64_t v15 = v4[2];
  LOBYTE(v4) = *((unsigned char *)v4 + 24);
  a3[3] = (uint64_t)&type metadata for PropertyListTypeEncoder.UnkeyedEncoder;
  a3[4] = sub_25B2826A4();
  uint64_t v16 = swift_allocObject();
  *a3 = v16;

  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v13;
  *(void *)(v16 + 32) = v15;
  *(unsigned char *)(v16 + 40) = (_BYTE)v4;
}

void sub_25B283330()
{
}

void sub_25B283394()
{
}

void sub_25B2833F8(uint64_t a1, uint64_t a2)
{
}

void sub_25B283410(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_25B283440(uint64_t a1, uint64_t a2)
{
}

void sub_25B283458(uint64_t a1, uint64_t a2)
{
}

void sub_25B283470(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B28349C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B2834C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B2834F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283520(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_25B28354C()
{
  return sub_25B291150();
}

void sub_25B283564(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283590(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B2835BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B2835E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283614(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_25B283640()
{
  return sub_25B291160();
}

uint64_t sub_25B283658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_25B282DD8(a1, a2, a5, a3, a4);
}

uint64_t sub_25B283680()
{
  return sub_25B291140();
}

uint64_t sub_25B2836AC()
{
  return sub_25B2910B0();
}

uint64_t sub_25B2836C4()
{
  return sub_25B2910A0();
}

uint64_t sub_25B2836DC()
{
  return sub_25B2910C0();
}

uint64_t sub_25B2836F8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B2838EC(a1, a2, a3, a4, MEMORY[0x263F8E3C0]);
}

uint64_t sub_25B283724()
{
  return sub_25B2910D0();
}

uint64_t sub_25B283740(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B283844(a1, a2, a3, a4, MEMORY[0x263F8E3D8]);
}

uint64_t sub_25B28376C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B283898(a1, a2, a3, a4, MEMORY[0x263F8E3E0]);
}

uint64_t sub_25B283798(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B2838EC(a1, a2, a3, a4, MEMORY[0x263F8E3E8]);
}

uint64_t sub_25B2837C4()
{
  return sub_25B291100();
}

uint64_t sub_25B2837E0()
{
  return sub_25B291110();
}

uint64_t sub_25B2837FC()
{
  return sub_25B2910E0();
}

uint64_t sub_25B283818(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B283844(a1, a2, a3, a4, MEMORY[0x263F8E3F8]);
}

uint64_t sub_25B283844(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_25B28386C(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B283898(a1, a2, a3, a4, MEMORY[0x263F8E408]);
}

uint64_t sub_25B283898(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_25B2838C0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_25B2838EC(a1, a2, a3, a4, MEMORY[0x263F8E410]);
}

uint64_t sub_25B2838EC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_25B28391C()
{
  return sub_25B291120();
}

uint64_t sub_25B283938()
{
  return sub_25B291130();
}

uint64_t sub_25B283954()
{
  return sub_25B2910F0();
}

void sub_25B283980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_25B2839A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v21 = a3;
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](a1);
  uint64_t v9 = (char *)&v22[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v10 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v10((char *)&v22[-1] - v11, a1, a2);
  sub_25B281C78();
  int v12 = swift_dynamicCast();
  uint64_t v13 = v22[0];
  v10(v9, a1, a2);
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {
    uint64_t v15 = *(void *)(v23 + 16);
    char v16 = *(unsigned char *)(v23 + 24);
    type metadata accessor for PropertyListTypeEncoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = v15;
    *(unsigned char *)(inited + 24) = v16;
    v22[3] = a2;
    v22[4] = v21;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v22);
    v10((char *)boxed_opaque_existential_1, (uint64_t)v9, a2);
    uint64_t v13 = sub_25B281964(v22);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
    swift_release();
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
    if (v3) {
      return result;
    }
    uint64_t v20 = v23;
  }
  else
  {
    uint64_t v20 = v23;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, a2);
  }
  objc_msgSend(*(id *)(v20 + 8), sel_addObject_, v13, v21);
  return swift_unknownObjectRelease();
}

uint64_t sub_25B283BC0()
{
  objc_msgSend(*(id *)(v0 + 8), sel_addObject_, objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9A0]), sel_init));
  type metadata accessor for PropertyListTypeEncoder.KeyedEncoder();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  return sub_25B290D90();
}

id sub_25B283C98()
{
  return objc_msgSend(*(id *)(v0 + 8), sel_count);
}

void sub_25B283CA8()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF9D0]), sel_init);
  objc_msgSend(*(id *)(v0 + 8), sel_addObject_, v1);
}

void sub_25B283D00()
{
  id v1 = (void *)sub_25B290760();
  objc_msgSend(*(id *)(v0 + 8), sel_addObject_, v1);
}

void sub_25B283D44()
{
  id v1 = (void *)sub_25B290590();
  objc_msgSend(*(id *)(v0 + 8), sel_addObject_, v1);
}

void sub_25B283D88()
{
  id v1 = (void *)sub_25B2907C0();
  objc_msgSend(*(id *)(v0 + 8), sel_addObject_, v1);
}

void sub_25B283DCC()
{
  id v1 = (void *)sub_25B290800();
  objc_msgSend(*(id *)(v0 + 8), sel_addObject_, v1);
}

void sub_25B283E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_25B283EEC()
{
  return sub_25B290F80();
}

void sub_25B283F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283F30(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283F5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = (void *)a4();
  objc_msgSend(*(id *)(v4 + 8), sel_addObject_, v5);
}

void sub_25B283FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B283FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = (void *)a4();
  objc_msgSend(*(id *)(v4 + 8), sel_addObject_, v5);
}

void sub_25B284018(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B284044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = (void *)a4();
  objc_msgSend(*(id *)(v4 + 8), sel_addObject_, v5);
}

void sub_25B28408C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_25B2840B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v5 = (void *)a4();
  objc_msgSend(*(id *)(v4 + 8), sel_addObject_, v5);
}

uint64_t sub_25B284100()
{
  return sub_25B290F90();
}

uint64_t sub_25B284118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_25B2839A0(a1, a2, a3);
}

uint64_t sub_25B284130()
{
  return sub_25B290E60();
}

uint64_t sub_25B28415C()
{
  return sub_25B290E90();
}

uint64_t sub_25B284188()
{
  return sub_25B290E80();
}

uint64_t sub_25B2841B4()
{
  return sub_25B290EA0();
}

uint64_t sub_25B2841E0()
{
  return sub_25B290EB0();
}

uint64_t sub_25B28420C()
{
  return sub_25B290EC0();
}

uint64_t sub_25B284238()
{
  return sub_25B290EE0();
}

uint64_t sub_25B284264()
{
  return sub_25B290EF0();
}

uint64_t sub_25B284290()
{
  return sub_25B290F00();
}

uint64_t sub_25B2842BC()
{
  return sub_25B290F10();
}

uint64_t sub_25B2842E8()
{
  return sub_25B290F30();
}

uint64_t sub_25B284314()
{
  return sub_25B290ED0();
}

uint64_t sub_25B284340()
{
  return sub_25B290F20();
}

uint64_t sub_25B28436C()
{
  return sub_25B290F40();
}

uint64_t sub_25B284398()
{
  return sub_25B290F50();
}

uint64_t sub_25B2843C4()
{
  return sub_25B290F60();
}

uint64_t sub_25B2843F0()
{
  return sub_25B290F70();
}

uint64_t sub_25B28441C()
{
  return sub_25B290E70();
}

uint64_t sub_25B284454@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  id v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x263EFF980]), sel_init);
  objc_msgSend((id)v3[1], sel_addObject_, v7);
  uint64_t v8 = *v3;
  uint64_t v9 = v3[2];
  char v10 = *((unsigned char *)v3 + 24);
  a3[3] = a1;
  a3[4] = a2;
  uint64_t v11 = swift_allocObject();
  *a3 = v11;
  *(void *)(v11 + 16) = v8;
  *(void *)(v11 + 24) = v7;
  *(void *)(v11 + 32) = v9;
  *(unsigned char *)(v11 + 40) = v10;
  return swift_bridgeObjectRetain();
}

void sub_25B28450C()
{
}

void __swiftcall PairedDevice.init(identifier:name:deviceClass:)(ReplicatorEngine::PairedDevice *__return_ptr retstr, Swift::String identifier, Swift::String name, ReplicatorEngine::PairedDevice::PairedDeviceClass deviceClass)
{
  ReplicatorEngine::PairedDevice::PairedDeviceClass v4 = *(unsigned char *)deviceClass;
  retstr->identifier = identifier;
  retstr->name = name;
  retstr->deviceClass = v4;
}

uint64_t PairedDevice.PairedDeviceClass.description.getter()
{
  uint64_t result = 0x64696C61766E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656E6F6870;
      break;
    case 2:
      uint64_t result = 6513005;
      break;
    case 3:
      uint64_t result = 0x6863746177;
      break;
    case 4:
      uint64_t result = 30324;
      break;
    default:
      return result;
  }
  return result;
}

BOOL static PairedDevice.PairedDeviceClass.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t PairedDevice.PairedDeviceClass.hash(into:)()
{
  return sub_25B291220();
}

uint64_t PairedDevice.PairedDeviceClass.hashValue.getter()
{
  return sub_25B291260();
}

uint64_t sub_25B2846A0()
{
  uint64_t result = 0x64696C61766E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656E6F6870;
      break;
    case 2:
      uint64_t result = 6513005;
      break;
    case 3:
      uint64_t result = 0x6863746177;
      break;
    case 4:
      uint64_t result = 30324;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t PairedDevice.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PairedDevice.name.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

void PairedDevice.deviceClass.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 32);
}

uint64_t PairedDevice.description.getter()
{
  sub_25B290AA0();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "PairedDevice: ");
  swift_bridgeObjectRetain();
  sub_25B290650();
  swift_bridgeObjectRelease();
  sub_25B290650();
  swift_bridgeObjectRetain();
  sub_25B290650();
  swift_bridgeObjectRelease();
  sub_25B290650();
  sub_25B290650();
  swift_bridgeObjectRelease();
  return v1[0];
}

BOOL _s16ReplicatorEngine12PairedDeviceV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  int v4 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  int v7 = *(unsigned __int8 *)(a2 + 32);
  BOOL v8 = *(void *)a1 == *(void *)a2 && *(void *)(a1 + 8) == *(void *)(a2 + 8);
  if (v8 || (v9 = sub_25B290FB0(), BOOL result = 0, (v9 & 1) != 0))
  {
    if (v2 == v5 && v3 == v6) {
      return v4 == v7;
    }
    char v12 = sub_25B290FB0();
    BOOL result = 0;
    if (v12) {
      return v4 == v7;
    }
  }
  return result;
}

unint64_t sub_25B284A08()
{
  unint64_t result = qword_26A4DBAE8;
  if (!qword_26A4DBAE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBAE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PairedDevice()
{
  return &type metadata for PairedDevice;
}

unsigned char *storeEnumTagSinglePayload for PairedDevice.PairedDeviceClass(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B284B38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairedDevice.PairedDeviceClass()
{
  return &type metadata for PairedDevice.PairedDeviceClass;
}

uint64_t static OPACKCoder.encode(_:version:)(void *a1, uint64_t a2, char a3)
{
  type metadata accessor for PropertyListTypeEncoder();
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 16) = a2;
  *(unsigned char *)(inited + 24) = a3 & 1;
  uint64_t v8 = inited;
  char v9 = (void *)sub_25B281964(a1);
  if (!v3)
  {
    uint64_t v8 = sub_25B2851A4(v9);
    swift_unknownObjectRelease();
  }
  return v8;
}

uint64_t static OPACKCoder.decode<A>(_:from:version:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t result = sub_25B284F38(v12);
  if (!v6)
  {
    type metadata accessor for PropertyListTypeDecoder();
    uint64_t inited = swift_initStackObject();
    *(void *)(inited + 16) = a4;
    *(unsigned char *)(inited + 24) = a5 & 1;
    sub_25B24BF7C(a6, (uint64_t)v12);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  return result;
}

uint64_t static OPACKCoder.encodeNSSecureCoding(_:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone((Class)STRPPropertyListTypeEncoder), sel_init);
  id v3 = objc_msgSend(v2, sel_encodeRootObject_, a1);

  uint64_t v4 = sub_25B2851A4(v3);
  swift_unknownObjectRelease();
  return v4;
}

id static OPACKCoder.decodeNSSecureCoding<A>(_:from:)(uint64_t a1, uint64_t a2, uint64_t a3, id a4)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  sub_25B284F38(&v14);
  if (!v4)
  {
    id v6 = objc_msgSend(objc_allocWithZone((Class)STRPPropertyListTypeDecoder), sel_init);
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
    __swift_project_boxed_opaque_existential_1(&v14, v15);
    v13[0] = 0;
    id v8 = objc_msgSend(v6, sel_decodeRootObjectOfClass_fromEncoded_error_, ObjCClassFromMetadata, sub_25B290FA0(), v13);

    swift_unknownObjectRelease();
    if (v8)
    {
      id v9 = v13[0];
      sub_25B2909E0();
      swift_unknownObjectRelease();
      if (swift_dynamicCast())
      {
        a4 = v12;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
        return a4;
      }
      sub_25B2905C0();
      id v10 = objc_allocWithZone(MEMORY[0x263F087E8]);
      a4 = (id)sub_25B290590();
      swift_bridgeObjectRelease();
      objc_msgSend(v10, sel_initWithDomain_code_userInfo_, a4, 1, 0);
    }
    else
    {
      a4 = v13[0];
      sub_25B28FE20();
    }

    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v14);
  }
  return a4;
}

uint64_t sub_25B284F38@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v8 = sub_25B2901E0();
  id v2 = (void *)sub_25B28FF00();
  id v3 = OPACKDecodeNSDataTm(v2, (uint64_t)&v8, MEMORY[0x263F38610]);

  if (v3)
  {
    sub_25B2909E0();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v9 = 0u;
    long long v10 = 0u;
  }
  sub_25B285304((uint64_t)&v9, (uint64_t)v11);
  sub_25B28536C((uint64_t)v11, (uint64_t)&v9);
  if (!*((void *)&v10 + 1))
  {
    sub_25B254744((uint64_t)&v9);
    goto LABEL_8;
  }
  sub_25B1979E4(&v9, a1);
  int v4 = v8;
  if (v4 != sub_25B2901E0())
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
LABEL_8:
    sub_25B2905C0();
    id v5 = objc_allocWithZone(MEMORY[0x263F087E8]);
    id v6 = (void *)sub_25B290590();
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_initWithDomain_code_userInfo_, v6, 2, 0);

    swift_willThrow();
  }
  return sub_25B254744((uint64_t)v11);
}

id OPACKCoder.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);
  return objc_msgSend(v1, sel_init);
}

id OPACKCoder.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OPACKCoder();
  return objc_msgSendSuper2(&v2, sel_init);
}

id OPACKCoder.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for OPACKCoder();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_25B2851A4(void *a1)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v9 = 0;
  id v1 = OPACKDecodeNSDataTm(a1, (uint64_t)&v9, MEMORY[0x263F38618]);
  if (v1)
  {
    objc_super v2 = v1;
    uint64_t v3 = sub_25B28FF10();
    unint64_t v5 = v4;

    LODWORD(v2) = v9;
    if (v2 == sub_25B2901E0()) {
      return v3;
    }
  }
  else
  {
    uint64_t v3 = 0;
    unint64_t v5 = 0xF000000000000000;
  }
  sub_25B2905C0();
  id v6 = objc_allocWithZone(MEMORY[0x263F087E8]);
  int v7 = (void *)sub_25B290590();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, sel_initWithDomain_code_userInfo_, v7, 2, 0);

  swift_willThrow();
  sub_25B111FF0(v3, v5);
  return v3;
}

uint64_t type metadata accessor for OPACKCoder()
{
  return self;
}

uint64_t sub_25B285304(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B28536C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B33F4C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id OPACKDecodeNSDataTm(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  id v5 = (id)a3();

  return v5;
}

uint64_t dispatch thunk of SuspensionPolicy.discardDate(for:hasRecordsFromRemoteDevice:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of SuspensionPolicy.unpairDate(for:hasRecordsFromRemoteDevice:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t sub_25B285454@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, void (*a4)(void, void, void)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v77 = a4;
  uint64_t v75 = a2;
  uint64_t v76 = a6;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D91F8);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  unint64_t v69 = &v61[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = &v61[-v12];
  uint64_t v14 = sub_25B290000();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v70 = &v61[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v66 = &v61[-v19];
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v67 = &v61[-v21];
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v74 = &v61[-v23];
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = &v61[-v25];
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = &v61[-v28];
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  uint64_t v32 = &v61[-v31];
  MEMORY[0x270FA5388](v30);
  uint64_t v34 = &v61[-v33];
  sub_25B28FF40();
  int v35 = *(void (**)(uint64_t, uint64_t, void (*)(void, void, void), uint64_t))(a5 + 8);
  uint64_t v72 = a1;
  uint64_t v73 = a5;
  int v71 = a3;
  v35(a1, a3, v77, a5);
  int v36 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v15 + 48);
  int v37 = v36(v13, 1, v14);
  uint64_t v68 = v34;
  if (v37 == 1)
  {
    sub_25B1D8764((uint64_t)v13);
    uint64_t v38 = v34;
    uint64_t v39 = v75;
    uint64_t v40 = (uint64_t)v69;
    uint64_t v41 = v72;
    uint64_t v42 = v73;
    uint64_t v43 = v77;
    goto LABEL_9;
  }
  uint64_t v64 = v36;
  uint64_t v63 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 32);
  v63(v32, v13, v14);
  char v44 = sub_25B28FF80();
  uint64_t v45 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 16);
  v45(v29, v32, v14);
  v45(v26, v75, v14);
  uint64_t v65 = v15;
  if ((v44 & 1) == 0)
  {
    uint64_t v46 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
    v46(v26, v14);
    v46(v29, v14);
    uint64_t v38 = v68;
    uint64_t v40 = (uint64_t)v69;
    goto LABEL_7;
  }
  int v62 = sub_25B28FF70();
  uint64_t v46 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
  v46(v26, v14);
  v46(v29, v14);
  uint64_t v38 = v68;
  uint64_t v40 = (uint64_t)v69;
  if ((v62 & 1) == 0)
  {
LABEL_7:
    v46(v32, v14);
    goto LABEL_8;
  }
  v46(v68, v14);
  v63(v38, v32, v14);
LABEL_8:
  int v36 = v64;
  uint64_t v15 = v65;
  uint64_t v39 = v75;
  uint64_t v41 = v72;
  uint64_t v42 = v73;
  uint64_t v43 = v77;
LABEL_9:
  (*(void (**)(uint64_t, void, void))(v42 + 16))(v41, v71 & 1, v43);
  if (v36((unsigned char *)v40, 1, v14) == 1)
  {
    sub_25B1D8764(v40);
    uint64_t v47 = v70;
    goto LABEL_17;
  }
  uint64_t v48 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 32);
  uint64_t v49 = v74;
  v48(v74, v40, v14);
  char v50 = sub_25B28FF80();
  char v51 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v15 + 16);
  char v52 = v67;
  v51(v67, v49, v14);
  char v53 = v66;
  v51(v66, v39, v14);
  if ((v50 & 1) == 0)
  {
    uint64_t v55 = v15;
    uint64_t v56 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
    v56(v53, v14);
    v56(v52, v14);
    uint64_t v38 = v68;
    uint64_t v47 = v70;
    goto LABEL_15;
  }
  uint64_t v77 = (void (*)(void, void, void))v48;
  char v54 = sub_25B28FF70();
  uint64_t v55 = v15;
  uint64_t v56 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
  v56(v53, v14);
  v56(v52, v14);
  uint64_t v38 = v68;
  uint64_t v47 = v70;
  if ((v54 & 1) == 0)
  {
LABEL_15:
    v56(v74, v14);
    goto LABEL_16;
  }
  v56(v68, v14);
  v77(v38, v74, v14);
LABEL_16:
  uint64_t v15 = v55;
LABEL_17:
  sub_25B28FF40();
  char v57 = sub_25B28FF80();
  uint64_t v58 = *(void (**)(unsigned char *, uint64_t))(v15 + 8);
  v58(v47, v14);
  if (v57)
  {
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v15 + 32))(v76, v38, v14);
    uint64_t v59 = 0;
  }
  else
  {
    v58(v38, v14);
    uint64_t v59 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v76, v59, 1, v14);
}

double sub_25B285AA0()
{
  return *(double *)(v0 + 24);
}

uint64_t LinearRetryTimer.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 16) = 3;
  *(void *)(v0 + 24) = 0x4030000000000000;
  *(_OWORD *)(v0 + 32) = xmmword_25B295590;
  return v0;
}

void *LinearRetryTimer.init()()
{
  v0[5] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v1 = swift_allocObject();
  *(_DWORD *)(v1 + 16) = 0;
  v0[6] = v1;
  v0[2] = 3;
  v0[3] = 0x4030000000000000;
  v0[4] = 3;
  return v0;
}

uint64_t LinearRetryTimer.__allocating_init(maxRetries:intervalUntilRetry:)(uint64_t a1, double a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v4 + 48) = v5;
  *(void *)(v4 + 16) = a1;
  *(double *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = a1;
  return v4;
}

uint64_t LinearRetryTimer.init(maxRetries:intervalUntilRetry:)(uint64_t a1, double a2)
{
  *(void *)(v2 + 40) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B33E990);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)(v2 + 48) = v5;
  *(void *)(v2 + 16) = a1;
  *(double *)(v2 + 24) = a2;
  *(void *)(v2 + 32) = a1;
  return v2;
}

uint64_t LinearRetryTimer.deinit()
{
  swift_release();
  swift_release();
  return v0;
}

uint64_t LinearRetryTimer.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LinearRetryTimer()
{
  return self;
}

uint64_t DuetHandshakeTask.handshakeDescriptor.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  char v5 = *(unsigned char *)(v1 + 48);
  *(void *)a1 = *(void *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 56);
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

void DuetHandshakeTask.schedule.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 80);
  *(void *)a1 = *(void *)(v1 + 72);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t DuetHandshakeTask.__allocating_init(handshakeDescriptor:schedule:handler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = swift_allocObject();
  DuetHandshakeTask.init(handshakeDescriptor:schedule:handler:)(a1, a2, a3, a4);
  return v8;
}

void *DuetHandshakeTask.init(handshakeDescriptor:schedule:handler:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = v4;
  uint64_t v218 = a4;
  uint64_t v205 = a3;
  uint64_t v228 = *MEMORY[0x263EF8340];
  uint64_t v210 = *v5;
  uint64_t v217 = sub_25B290000();
  uint64_t v220 = *(void **)(v217 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v217);
  v200 = &v190[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  double v194 = &v190[-v11];
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v202 = &v190[-v13];
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v201 = &v190[-v15];
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v193 = &v190[-v17];
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  v199 = &v190[-v19];
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  int v196 = &v190[-v21];
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v195 = &v190[-v23];
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v216 = &v190[-v25];
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  os_log_t v215 = (os_log_t)&v190[-v27];
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v211 = &v190[-v29];
  MEMORY[0x270FA5388](v28);
  uint64_t v219 = &v190[-v30];
  uint64_t v31 = sub_25B2908F0();
  uint64_t v212 = *(void **)(v31 - 8);
  v213 = (void (*)(unsigned char *, uint64_t))v31;
  MEMORY[0x270FA5388](v31);
  uint64_t v209 = &v190[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v206 = (void (*)(unsigned char *, unsigned char *, uint64_t))sub_25B2908C0();
  MEMORY[0x270FA5388](v206);
  v204 = &v190[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v34 = sub_25B290360();
  MEMORY[0x270FA5388](v34 - 8);
  uint64_t v203 = &v190[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v37 = *a1;
  uint64_t v36 = a1[1];
  uint64_t v39 = a1[2];
  uint64_t v38 = a1[3];
  int v40 = *((unsigned __int8 *)a1 + 32);
  uint64_t v41 = a1[5];
  uint64_t v208 = a1[6];
  uint64_t v214 = *(void *)a2;
  uint64_t v42 = v214;
  LODWORD(a1) = *(unsigned __int8 *)(a2 + 8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBAF0);
  uint64_t v43 = swift_allocObject();
  *(_DWORD *)(v43 + 20) = 0;
  *(unsigned char *)(v43 + 16) = 0;
  v5[11] = v43;
  v5[12] = 0;
  uint64_t v44 = swift_allocObject();
  *(_DWORD *)(v44 + 20) = 0;
  *(unsigned char *)(v44 + 16) = 0;
  v5[13] = v44;
  v5[2] = v37;
  v5[3] = v36;
  v5[4] = v39;
  void v5[5] = v38;
  int v198 = v40;
  *((unsigned char *)v5 + 48) = v40;
  uint64_t v45 = v208;
  v5[7] = v41;
  v5[8] = v45;
  v5[9] = v42;
  *((unsigned char *)v5 + 80) = (_BYTE)a1;
  aBlock = 0;
  unint64_t v223 = 0xE000000000000000;
  uint64_t v207 = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_25B290AA0();
  sub_25B290650();
  swift_bridgeObjectRetain();
  uint64_t v197 = v37;
  sub_25B290650();
  uint64_t v208 = v36;
  swift_bridgeObjectRelease();
  uint64_t v47 = aBlock;
  unint64_t v46 = v223;
  sub_25B10CB64();
  swift_bridgeObjectRetain();
  sub_25B290330();
  aBlock = (unsigned char *)MEMORY[0x263F8EE78];
  sub_25B10DD84((unint64_t *)&unk_26A4D9B40, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9B10);
  sub_25B10CBE8();
  sub_25B290A00();
  ((void (*)(unsigned char *, void, void (*)(unsigned char *, uint64_t)))v212[13])(v209, *MEMORY[0x263F8F138], v213);
  uint64_t v48 = v219;
  uint64_t v49 = v5;
  uint64_t v50 = v217;
  v49[14] = sub_25B290920();
  char v51 = v211;
  uint64_t v52 = sub_25B28FFD0();
  aBlock = (unsigned char *)v214;
  LODWORD(v204) = a1;
  LOBYTE(v223) = (_BYTE)a1;
  sub_25B287904(v52, v53);
  sub_25B28FF60();
  char v54 = v220;
  uint64_t v56 = v220 + 1;
  uint64_t v55 = (void (*)(unsigned char *, uint64_t))v220[1];
  v55(v51, v50);
  if (qword_26A4D98C0 != -1) {
    swift_once();
  }
  uint64_t v57 = sub_25B290190();
  uint64_t v58 = __swift_project_value_buffer(v57, (uint64_t)qword_26A4EB150);
  uint64_t v59 = (void (*)(os_log_t, unsigned char *, uint64_t))v54[2];
  v59(v215, v48, v50);
  uint64_t v220 = v54 + 2;
  uint64_t v206 = (void (*)(unsigned char *, unsigned char *, uint64_t))v59;
  v59(v216, v48, v50);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v209 = (unsigned char *)v58;
  uint64_t v60 = sub_25B290160();
  os_log_type_t v61 = sub_25B2908A0();
  int v62 = v61;
  BOOL v63 = os_log_type_enabled(v60, v61);
  uint64_t v211 = v47;
  uint64_t v212 = v56;
  v213 = v55;
  if (v63)
  {
    uint64_t v64 = swift_slowAlloc();
    uint64_t v192 = (unsigned char *)swift_slowAlloc();
    aBlock = v192;
    *(_DWORD *)uint64_t v64 = 136315906;
    int v191 = v62;
    uint64_t v221 = (uint64_t)v49;
    swift_retain();
    uint64_t v65 = sub_25B290600();
    uint64_t v203 = (unsigned char *)v46;
    uint64_t v221 = sub_25B288E98(v65, v66, (uint64_t *)&aBlock);
    sub_25B2909C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v64 + 12) = 2082;
    sub_25B10DD84((unint64_t *)&qword_26A4DB020, MEMORY[0x263F07490]);
    os_log_t v67 = v215;
    uint64_t v68 = sub_25B290DB0();
    uint64_t v221 = sub_25B288E98(v68, v69, (uint64_t *)&aBlock);
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    v55(v67, v50);
    *(_WORD *)(v64 + 22) = 2050;
    uint64_t v70 = v216;
    sub_25B28FFA0();
    uint64_t v221 = v71;
    unint64_t v46 = (unint64_t)v203;
    sub_25B2909C0();
    v55(v70, v50);
    uint64_t v47 = v211;
    *(_WORD *)(v64 + 32) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v221 = sub_25B288E98((uint64_t)v47, v46, (uint64_t *)&aBlock);
    sub_25B2909C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25B107000, v60, (os_log_type_t)v191, "%s scheduling Duet handshake task at: %{public}s in %{public}fs: %s", (uint8_t *)v64, 0x2Au);
    uint64_t v72 = v192;
    swift_arrayDestroy();
    MEMORY[0x261160890](v72, -1, -1);
    MEMORY[0x261160890](v64, -1, -1);
  }
  else
  {
    swift_release_n();
    v55(v215, v50);
    v55(v216, v50);

    swift_bridgeObjectRelease_n();
  }
  uint64_t v73 = v49;
  uint64_t v216 = self;
  id v74 = [v216 sharedScheduler];
  uint64_t v75 = (void *)sub_25B290590();
  uint64_t v76 = (void *)v49[14];
  uint64_t v77 = (void *)swift_allocObject();
  v77[2] = v49;
  v77[3] = v47;
  uint64_t v78 = v205;
  v77[4] = v46;
  v77[5] = v78;
  unint64_t v79 = v46;
  v77[6] = v218;
  uint64_t v226 = sub_25B287CFC;
  v227 = v77;
  aBlock = (unsigned char *)MEMORY[0x263EF8330];
  unint64_t v223 = 1107296256;
  v224 = sub_25B1A158C;
  v225 = &block_descriptor_16;
  uint64_t v80 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  id v81 = v76;
  swift_retain();
  swift_release();
  unsigned int v82 = objc_msgSend(v74, sel_registerForTaskWithIdentifier_usingQueue_launchHandler_, v75, v81, v80);
  _Block_release(v80);

  uint64_t v83 = v49[11];
  MEMORY[0x270FA5388](v84);
  v190[-16] = v82;
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v83 + 20));
  sub_25B287E40((unsigned char *)(v83 + 16));
  os_unfair_lock_unlock((os_unfair_lock_t)(v83 + 20));
  swift_release();
  if (v82)
  {
    id v85 = objc_allocWithZone(MEMORY[0x263F298E0]);
    swift_bridgeObjectRetain();
    uint64_t v86 = (void *)sub_25B290590();
    swift_bridgeObjectRelease();
    id v87 = objc_msgSend(v85, sel_initWithIdentifier_, v86);

    uint64_t v88 = (void *)v49[12];
    v49[12] = v87;

    uint64_t v89 = (void *)v49[12];
    uint64_t v90 = v217;
    if (v89)
    {
      uint64_t v91 = (unsigned char *)v214;
      char v92 = (char)v204;
      if (v214 >= 2 || v204 >= 2) {
        uint64_t v94 = 1;
      }
      else {
        uint64_t v94 = 2;
      }
      id v95 = v89;
      id v96 = objc_msgSend(v95, sel_setPriority_, v94);
      aBlock = v91;
      LOBYTE(v223) = v92;
      sub_25B287904((uint64_t)v96, v97);
      id v98 = objc_msgSend(v95, sel_setScheduleAfter_);
      aBlock = v91;
      LOBYTE(v223) = v92;
      sub_25B287904((uint64_t)v98, v99);
      aBlock = v91;
      LOBYTE(v223) = v92;
      objc_msgSend(v95, sel_setTrySchedulingBefore_, v100 + sub_25B288138());
      id v101 = v95;
      uint64_t v102 = (void *)sub_25B290590();
      [v101 setRemoteDevice:v102];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if (v198 == 4)
      {
        [v101 setTargetDevice:1];
        [v101 setRequiresRemoteDeviceWake:1];
      }
      else
      {
        [v101 setTargetDevice:3];
      }
      uint64_t v141 = v200;
      uint64_t v142 = v199;
      [v101 setRequiresExternalPower:0];
      id v143 = [v216 sharedScheduler];
      aBlock = 0;
      unsigned int v144 = objc_msgSend(v143, sel_submitTaskRequest_error_, v101, &aBlock);

      if (v144)
      {
        uint64_t v145 = v73[13];
        unint64_t v146 = aBlock;
        swift_retain();
        os_unfair_lock_lock((os_unfair_lock_t)(v145 + 20));
        sub_25B28819C((unsigned char *)(v145 + 16));
        os_unfair_lock_unlock((os_unfair_lock_t)(v145 + 20));
        swift_release();
        uint64_t v147 = v219;
        uint64_t v148 = v206;
        v206(v142, v219, v90);
        uint64_t v149 = v193;
        v148(v193, v147, v90);
        swift_retain_n();
        swift_bridgeObjectRetain();
        unint64_t v150 = sub_25B290160();
        os_log_type_t v151 = sub_25B290860();
        int v152 = v151;
        if (os_log_type_enabled(v150, v151))
        {
          uint64_t v153 = swift_slowAlloc();
          os_log_t v215 = (os_log_t)swift_slowAlloc();
          aBlock = v215;
          *(_DWORD *)uint64_t v153 = 136315906;
          LODWORD(v214) = v152;
          uint64_t v221 = (uint64_t)v73;
          swift_retain();
          uint64_t v154 = sub_25B290600();
          BOOL v155 = v213;
          uint64_t v220 = v73;
          uint64_t v221 = sub_25B288E98(v154, v156, (uint64_t *)&aBlock);
          uint64_t v216 = v101;
          sub_25B2909C0();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v153 + 12) = 2082;
          sub_25B10DD84((unint64_t *)&qword_26A4DB020, MEMORY[0x263F07490]);
          uint64_t v157 = sub_25B290DB0();
          uint64_t v221 = sub_25B288E98(v157, v158, (uint64_t *)&aBlock);
          sub_25B2909C0();
          swift_bridgeObjectRelease();
          v155(v142, v90);
          *(_WORD *)(v153 + 22) = 2050;
          sub_25B28FFA0();
          uint64_t v221 = v159;
          uint64_t v73 = v220;
          sub_25B2909C0();
          v155(v149, v90);
          *(_WORD *)(v153 + 32) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v221 = sub_25B288E98((uint64_t)v211, v46, (uint64_t *)&aBlock);
          sub_25B2909C0();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_25B107000, v150, (os_log_type_t)v214, "%s successful submitTaskRequest: %{public}s in %{public}fs: %s", (uint8_t *)v153, 0x2Au);
          os_log_t v160 = v215;
          swift_arrayDestroy();
          MEMORY[0x261160890](v160, -1, -1);
          MEMORY[0x261160890](v153, -1, -1);

          swift_release();
          v155(v219, v90);
          return v73;
        }
        swift_bridgeObjectRelease_n();

        swift_release();
        uint64_t v121 = v213;
        v213(v149, v90);
        v121(v142, v90);

        swift_release_n();
        double v122 = v147;
        uint64_t v123 = v90;
LABEL_30:
        v121(v122, v123);
        return v73;
      }
      uint64_t v216 = v101;
      uint64_t v161 = aBlock;
      uint64_t v162 = (void *)sub_25B28FE20();

      swift_willThrow();
      v163 = v194;
      uint64_t v164 = v219;
      unint64_t v165 = v206;
      v206(v194, v219, v90);
      v165(v141, v164, v90);
      swift_retain();
      id v166 = v162;
      swift_bridgeObjectRetain();
      swift_retain();
      id v167 = v162;
      unint64_t v168 = sub_25B290160();
      os_log_type_t v169 = sub_25B290880();
      uint64_t v170 = (uint64_t)v73;
      int v171 = v169;
      if (os_log_type_enabled(v168, v169))
      {
        uint64_t v172 = swift_slowAlloc();
        uint64_t v173 = (void *)swift_slowAlloc();
        uint64_t v209 = v173;
        uint64_t v220 = (void *)swift_slowAlloc();
        uint64_t v221 = v170;
        aBlock = v220;
        *(_DWORD *)uint64_t v172 = 136316162;
        os_log_t v215 = v168;
        swift_retain();
        uint64_t v174 = sub_25B290600();
        LODWORD(v214) = v171;
        unint64_t v175 = v46;
        uint64_t v221 = sub_25B288E98(v174, v176, (uint64_t *)&aBlock);
        sub_25B2909C0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v172 + 12) = 2112;
        id v177 = v162;
        uint64_t v178 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v221 = v178;
        sub_25B2909C0();
        *uint64_t v173 = v178;

        *(_WORD *)(v172 + 22) = 2082;
        sub_25B10DD84((unint64_t *)&qword_26A4DB020, MEMORY[0x263F07490]);
        uint64_t v179 = sub_25B290DB0();
        uint64_t v221 = sub_25B288E98(v179, v180, (uint64_t *)&aBlock);
        sub_25B2909C0();
        swift_bridgeObjectRelease();
        uint64_t v181 = v163;
        uint64_t v182 = v213;
        v213(v181, v90);
        *(_WORD *)(v172 + 32) = 2050;
        uint64_t v183 = v200;
        sub_25B28FFA0();
        uint64_t v221 = v184;
        sub_25B2909C0();
        v182(v183, v90);
        *(_WORD *)(v172 + 42) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v221 = sub_25B288E98((uint64_t)v211, v175, (uint64_t *)&aBlock);
        uint64_t v164 = v219;
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        os_log_t v185 = v215;
        _os_log_impl(&dword_25B107000, v215, (os_log_type_t)v214, "%s could not submitTaskRequest: %@ %{public}s in %{public}fs: %s", (uint8_t *)v172, 0x34u);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4DAC60);
        uint64_t v186 = v209;
        swift_arrayDestroy();
        MEMORY[0x261160890](v186, -1, -1);
        uint64_t v187 = v220;
        swift_arrayDestroy();
        MEMORY[0x261160890](v187, -1, -1);
        MEMORY[0x261160890](v172, -1, -1);
      }
      else
      {
        swift_release_n();

        uint64_t v188 = v163;
        uint64_t v182 = v213;
        v213(v188, v90);
        v182(v141, v90);

        swift_bridgeObjectRelease_n();
      }
      uint64_t v73 = (void *)v170;
      DuetHandshakeTask.cancel()();
      swift_release();

      v182(v164, v90);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v124 = v195;
      uint64_t v125 = v219;
      uint64_t v126 = v206;
      v206(v195, v219, v90);
      uint64_t v127 = v196;
      v126(v196, v125, v90);
      swift_retain_n();
      swift_bridgeObjectRetain();
      uint64_t v128 = sub_25B290160();
      os_log_type_t v129 = sub_25B290880();
      int v130 = v129;
      if (os_log_type_enabled(v128, v129))
      {
        uint64_t v131 = swift_slowAlloc();
        uint64_t v220 = (void *)swift_slowAlloc();
        uint64_t v221 = (uint64_t)v49;
        aBlock = v220;
        *(_DWORD *)uint64_t v131 = 136315906;
        LODWORD(v216) = v130;
        swift_retain();
        uint64_t v132 = sub_25B290600();
        uint64_t v221 = sub_25B288E98(v132, v133, (uint64_t *)&aBlock);
        sub_25B2909C0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v131 + 12) = 2082;
        sub_25B10DD84((unint64_t *)&qword_26A4DB020, MEMORY[0x263F07490]);
        uint64_t v134 = sub_25B290DB0();
        uint64_t v221 = sub_25B288E98(v134, v135, (uint64_t *)&aBlock);
        sub_25B2909C0();
        swift_bridgeObjectRelease();
        v213(v124, v90);
        *(_WORD *)(v131 + 22) = 2050;
        uint64_t v136 = v196;
        sub_25B28FFA0();
        uint64_t v221 = v137;
        uint64_t v138 = v213;
        sub_25B2909C0();
        v138(v136, v90);
        *(_WORD *)(v131 + 32) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v221 = sub_25B288E98((uint64_t)v211, v46, (uint64_t *)&aBlock);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25B107000, v128, (os_log_type_t)v216, "%s could not create bgTaskRequest: %{public}s in %{public}fs: %s", (uint8_t *)v131, 0x2Au);
        uint64_t v139 = v220;
        swift_arrayDestroy();
        MEMORY[0x261160890](v139, -1, -1);
        uint64_t v140 = v131;
        uint64_t v125 = v219;
        MEMORY[0x261160890](v140, -1, -1);
      }
      else
      {
        swift_release_n();
        uint64_t v138 = v213;
        v213(v124, v90);
        v138(v127, v90);

        swift_bridgeObjectRelease_n();
      }
      DuetHandshakeTask.cancel()();
      swift_release();
      v138(v125, v90);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v103 = v201;
    uint64_t v104 = v219;
    uint64_t v105 = v217;
    uint64_t v106 = v206;
    v206(v201, v219, v217);
    id v107 = v202;
    v106(v202, v104, v105);
    swift_retain_n();
    swift_bridgeObjectRetain();
    os_log_type_t v108 = sub_25B290160();
    os_log_type_t v109 = sub_25B290880();
    int v110 = v109;
    unint64_t v111 = v79;
    if (!os_log_type_enabled(v108, v109))
    {
      swift_bridgeObjectRelease_n();

      swift_release();
      uint64_t v121 = v213;
      v213(v107, v105);
      v121(v103, v105);
      swift_release_n();
      double v122 = v104;
      uint64_t v123 = v105;
      goto LABEL_30;
    }
    uint64_t v112 = swift_slowAlloc();
    uint64_t v220 = (void *)swift_slowAlloc();
    uint64_t v221 = (uint64_t)v73;
    aBlock = v220;
    *(_DWORD *)uint64_t v112 = 136315906;
    LODWORD(v216) = v110;
    swift_retain();
    uint64_t v113 = sub_25B290600();
    uint64_t v114 = v213;
    uint64_t v221 = sub_25B288E98(v113, v115, (uint64_t *)&aBlock);
    sub_25B2909C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v112 + 12) = 2082;
    sub_25B10DD84((unint64_t *)&qword_26A4DB020, MEMORY[0x263F07490]);
    uint64_t v116 = sub_25B290DB0();
    uint64_t v221 = sub_25B288E98(v116, v117, (uint64_t *)&aBlock);
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    v114(v103, v105);
    *(_WORD *)(v112 + 22) = 2050;
    uint64_t v118 = v202;
    sub_25B28FFA0();
    uint64_t v221 = v119;
    sub_25B2909C0();
    v114(v118, v105);
    *(_WORD *)(v112 + 32) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v221 = sub_25B288E98((uint64_t)v211, v111, (uint64_t *)&aBlock);
    sub_25B2909C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25B107000, v108, (os_log_type_t)v216, "%s could not registerForTask: %{public}s in %{public}fs: %s", (uint8_t *)v112, 0x2Au);
    uint64_t v120 = v220;
    swift_arrayDestroy();
    MEMORY[0x261160890](v120, -1, -1);
    MEMORY[0x261160890](v112, -1, -1);

    swift_release();
    v114(v219, v105);
  }
  return v73;
}

uint64_t sub_25B287904(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(v2 + 8) <= 1u && *(void *)v2 > 1uLL) {
    return sub_25B287904(result, a2);
  }
  return result;
}

uint64_t sub_25B287978(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9B28);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26A4D98C0 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_25B290190();
  __swift_project_value_buffer(v15, (uint64_t)qword_26A4EB150);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = sub_25B290160();
  os_log_type_t v17 = sub_25B290860();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = a1;
    uint64_t v30 = a2;
    uint64_t v31 = v27;
    *(_DWORD *)uint64_t v18 = 136315394;
    type metadata accessor for DuetHandshakeTask();
    uint64_t v26 = a3;
    swift_retain();
    uint64_t v29 = a6;
    uint64_t v19 = sub_25B290600();
    uint64_t v30 = sub_25B288E98(v19, v20, &v31);
    sub_25B2909C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v30 = sub_25B288E98(v26, a4, &v31);
    a6 = v29;
    sub_25B2909C0();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_25B107000, v16, v17, "%s calling handler for %s", (uint8_t *)v18, 0x16u);
    uint64_t v21 = v27;
    swift_arrayDestroy();
    a1 = v28;
    MEMORY[0x261160890](v21, -1, -1);
    MEMORY[0x261160890](v18, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  uint64_t v22 = sub_25B2907A0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v14, 1, 1, v22);
  uint64_t v23 = (void *)swift_allocObject();
  void v23[2] = 0;
  v23[3] = 0;
  v23[4] = a1;
  v23[5] = a2;
  v23[6] = a5;
  void v23[7] = a6;
  swift_retain();
  id v24 = a1;
  swift_retain();
  sub_25B115F94((uint64_t)v14, (uint64_t)&unk_26A4DBB00, (uint64_t)v23);
  return swift_release();
}

uint64_t sub_25B287CB4()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_25B287CFC(void *a1)
{
  return sub_25B287978(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_25B287D0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  return MEMORY[0x270FA2498](sub_25B287D30, 0, 0);
}

uint64_t sub_25B287D30()
{
  uint64_t v1 = *(void *)(v0 + 24);
  objc_msgSend(*(id *)(v0 + 16), sel_setTaskCompleted);
  uint64_t v2 = *(void *)(v1 + 104);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 20));
  sub_25B287E20((unsigned char *)(v2 + 16));
  uint64_t v3 = *(void (**)(uint64_t))(v0 + 32);
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 20));
  uint64_t v4 = swift_release();
  v3(v4);
  char v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

unsigned char *sub_25B287E20(unsigned char *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

unsigned char *sub_25B287E40(unsigned char *result)
{
  *uint64_t result = *(unsigned char *)(v1 + 16);
  return result;
}

Swift::Void __swiftcall DuetHandshakeTask.cancel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 96);
  if (v2)
  {
    id v3 = objc_msgSend(v2, sel_identifier);
    sub_25B2905C0();

    uint64_t v4 = *(void *)(v1 + 104);
    MEMORY[0x270FA5388](v5);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 20));
    sub_25B289500((unsigned char *)(v4 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 20));
    uint64_t v6 = swift_release();
    uint64_t v7 = *(void *)(v1 + 88);
    MEMORY[0x270FA5388](v6);
    swift_retain();
    os_unfair_lock_lock((os_unfair_lock_t)(v7 + 20));
    sub_25B289520((unsigned char *)(v7 + 16));
    os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 20));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_26A4D98C0 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25B290190();
    __swift_project_value_buffer(v8, (uint64_t)qword_26A4EB150);
    swift_retain_n();
    uint64_t v9 = sub_25B290160();
    os_log_type_t v10 = sub_25B290880();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v15 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_retain();
      uint64_t v13 = sub_25B290600();
      sub_25B288E98(v13, v14, &v15);
      sub_25B2909C0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_25B107000, v9, v10, "%s no bgTaskRequest identifier, cannot cancel", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x261160890](v12, -1, -1);
      MEMORY[0x261160890](v11, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
}

double sub_25B288138()
{
  if (*(unsigned __int8 *)(v0 + 8) > 1u) {
    return 1800.0;
  }
  double result = 0.0;
  if (*(uint64_t *)v0 >= 2) {
    sub_25B288138(0.0);
  }
  return result;
}

unsigned char *sub_25B28819C(unsigned char *result)
{
  *double result = 1;
  return result;
}

uint64_t DuetHandshakeTask.deinit()
{
  uint64_t v1 = v0;
  if (qword_26A4D98C0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_25B290190();
  __swift_project_value_buffer(v2, (uint64_t)qword_26A4EB150);
  swift_retain_n();
  id v3 = sub_25B290160();
  os_log_type_t v4 = sub_25B290860();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_retain();
    uint64_t v7 = sub_25B290600();
    sub_25B288E98(v7, v8, &v10);
    sub_25B2909C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B107000, v3, v4, "%s deinit, canceling", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261160890](v6, -1, -1);
    MEMORY[0x261160890](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  DuetHandshakeTask.cancel()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return v1;
}

uint64_t DuetHandshakeTask.__deallocating_deinit()
{
  DuetHandshakeTask.deinit();
  return swift_deallocClassInstance();
}

void sub_25B288400(unsigned char *a1, uint64_t a2, unint64_t a3)
{
  v33[1] = *(id *)MEMORY[0x263EF8340];
  if (*a1 == 1)
  {
    id v6 = objc_msgSend(self, sel_sharedScheduler);
    uint64_t v31 = a2;
    uint64_t v7 = (void *)sub_25B290590();
    v33[0] = 0;
    unsigned int v8 = objc_msgSend(v6, sel_cancelTaskRequestWithIdentifier_error_, v7, v33);

    if (v8)
    {
      uint64_t v9 = qword_26A4D98C0;
      id v10 = v33[0];
      if (v9 != -1) {
        swift_once();
      }
      uint64_t v11 = sub_25B290190();
      __swift_project_value_buffer(v11, (uint64_t)qword_26A4EB150);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v12 = sub_25B290160();
      os_log_type_t v13 = sub_25B290860();
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v28 = (void *)swift_slowAlloc();
        v33[0] = v28;
        *(_DWORD *)uint64_t v14 = 136315394;
        swift_retain();
        uint64_t v15 = sub_25B290600();
        sub_25B288E98(v15, v16, (uint64_t *)v33);
        sub_25B2909C0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v14 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_25B288E98(v31, a3, (uint64_t *)v33);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_25B107000, v12, v13, "%s successful cancelTaskRequest %s", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x261160890](v28, -1, -1);
        MEMORY[0x261160890](v14, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
    else
    {
      id v17 = v33[0];
      uint64_t v18 = (void *)sub_25B28FE20();

      swift_willThrow();
      if (qword_26A4D98C0 != -1) {
        swift_once();
      }
      uint64_t v19 = sub_25B290190();
      __swift_project_value_buffer(v19, (uint64_t)qword_26A4EB150);
      swift_retain();
      swift_bridgeObjectRetain();
      id v20 = v18;
      swift_retain();
      swift_bridgeObjectRetain();
      id v21 = v18;
      uint64_t v22 = sub_25B290160();
      os_log_type_t v23 = sub_25B290880();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t v29 = (void *)swift_slowAlloc();
        uint64_t v30 = (void *)swift_slowAlloc();
        v33[0] = v30;
        *(_DWORD *)uint64_t v24 = 136315650;
        swift_retain();
        uint64_t v25 = sub_25B290600();
        sub_25B288E98(v25, v26, (uint64_t *)v33);
        sub_25B2909C0();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_25B288E98(v31, a3, (uint64_t *)v33);
        sub_25B2909C0();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v24 + 22) = 2112;
        id v27 = v18;
        uint64_t v32 = _swift_stdlib_bridgeErrorToNSError();
        sub_25B2909C0();
        *uint64_t v29 = v32;

        _os_log_impl(&dword_25B107000, v22, v23, "%s could not cancelTaskRequest %s: %@", (uint8_t *)v24, 0x20u);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4DAC60);
        swift_arrayDestroy();
        MEMORY[0x261160890](v29, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x261160890](v30, -1, -1);
        MEMORY[0x261160890](v24, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
    *a1 = 0;
  }
}

void sub_25B2889D8(unsigned char *a1, uint64_t a2, unint64_t a3)
{
  if (*a1 == 1)
  {
    id v6 = objc_msgSend(self, sel_sharedScheduler);
    uint64_t v7 = (void *)sub_25B290590();
    unsigned int v18 = objc_msgSend(v6, sel_deregisterTaskWithIdentifier_, v7);

    if (qword_26A4D98C0 != -1) {
      swift_once();
    }
    uint64_t v8 = sub_25B290190();
    __swift_project_value_buffer(v8, (uint64_t)qword_26A4EB150);
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v9 = sub_25B290160();
    os_log_type_t v10 = sub_25B290860();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v16 = a2;
      uint64_t v11 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v19 = v17;
      *(_DWORD *)uint64_t v11 = 136315650;
      swift_retain();
      uint64_t v12 = sub_25B290600();
      sub_25B288E98(v12, v13, &v19);
      sub_25B2909C0();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2080;
      if (v18) {
        uint64_t v14 = 0x6673736563637573;
      }
      else {
        uint64_t v14 = 0x6F6E20646C756F63;
      }
      if (v18) {
        unint64_t v15 = 0xEA00000000006C75;
      }
      else {
        unint64_t v15 = 0xE900000000000074;
      }
      sub_25B288E98(v14, v15, &v19);
      sub_25B2909C0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 22) = 2080;
      swift_bridgeObjectRetain();
      sub_25B288E98(v16, a3, &v19);
      sub_25B2909C0();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_25B107000, v9, v10, "%s %s deregisterTask  %s", (uint8_t *)v11, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x261160890](v17, -1, -1);
      MEMORY[0x261160890](v11, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_release_n();
    }
    *a1 = 0;
  }
}

void *sub_25B288D18@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  char v9 = *((unsigned char *)a2 + 8);
  uint64_t v12 = *a2;
  char v13 = v9;
  uint64_t v10 = swift_allocObject();
  double result = DuetHandshakeTask.init(handshakeDescriptor:schedule:handler:)(a1, (uint64_t)&v12, a3, a4);
  *a5 = v10;
  return result;
}

void sub_25B288D98()
{
}

uint64_t sub_25B288DBC(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_25B288DF8(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_25B288E20(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_25B288E98(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  sub_25B2909C0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_25B288E98(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_25B288F6C(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_25B116E84((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_25B116E84((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_25B288F6C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_25B2909D0();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_25B289128(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_25B290B30();
  if (!v8)
  {
    sub_25B290BB0();
    __break(1u);
LABEL_17:
    uint64_t result = sub_25B290C10();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_25B289128(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_25B2891C0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_25B2893A0(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_25B2893A0(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_25B2891C0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_25B289338(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_25B290AB0();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_25B290BB0();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_25B290670();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    sub_25B290C10();
    __break(1u);
LABEL_14:
    uint64_t result = sub_25B290BB0();
    __break(1u);
  }
  else
  {
    return MEMORY[0x263F8EE78];
  }
  return result;
}

void *sub_25B289338(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9D80);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_25B2893A0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9D80);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_25B290C10();
  __break(1u);
  return result;
}

unsigned char **sub_25B2894F0(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void sub_25B289500(unsigned char *a1)
{
  sub_25B288400(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_25B289520(unsigned char *a1)
{
  sub_25B2889D8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t type metadata accessor for DuetHandshakeTask()
{
  return self;
}

uint64_t method lookup function for DuetHandshakeTask(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for DuetHandshakeTask);
}

uint64_t dispatch thunk of DuetHandshakeTask.__allocating_init(handshakeDescriptor:schedule:handler:)()
{
  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t sub_25B289590()
{
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_25B2895E0()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 32);
  long long v4 = *(_OWORD *)(v0 + 48);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_25B1165D0;
  *(_OWORD *)(v2 + 16) = v3;
  *(_OWORD *)(v2 + 32) = v4;
  return MEMORY[0x270FA2498](sub_25B287D30, 0, 0);
}

uint64_t sub_25B28968C()
{
  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_25B2896C0(char a1)
{
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v1 + 16) = a1;
  return result;
}

uint64_t (*sub_25B289700())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B289754()
{
  if (*(void *)(v0 + 24))
  {
    uint64_t v1 = *(void *)(v0 + 24);
  }
  else
  {
    uint64_t v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D99E0);
    sub_25B1D56BC();
    uint64_t v1 = sub_25B290240();
    *(void *)(v2 + 24) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t (*sub_25B2897E4(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_25B289754();
  return sub_25B1C60F8;
}

uint64_t sub_25B28982C@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *a1;
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 40);
  uint64_t v5 = *(void *)(v3 + 48);
  if (v4)
  {
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v4;
    *(void *)(v6 + 24) = v5;
    int64_t v7 = sub_25B10DC24;
  }
  else
  {
    int64_t v7 = 0;
    uint64_t v6 = 0;
  }
  *a2 = v7;
  a2[1] = (uint64_t (*)())v6;
  return sub_25B207E2C(v4);
}

uint64_t sub_25B2898C0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_25B28A07C;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  uint64_t v7 = *a2;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 40);
  *(void *)(v7 + 40) = v6;
  *(void *)(v7 + 48) = v5;
  sub_25B207E2C(v3);
  return sub_25B207D70(v8);
}

uint64_t sub_25B28997C()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 40);
  sub_25B207E2C(v1);
  return v1;
}

uint64_t sub_25B2899CC(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return sub_25B207D70(v5);
}

uint64_t (*sub_25B289A20())()
{
  return j__swift_endAccess;
}

uint64_t CallbackZoneAdvertiser.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 24) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D99E0);
  swift_allocObject();
  uint64_t v1 = sub_25B290220();
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = v1;
  return v0;
}

uint64_t CallbackZoneAdvertiser.init()()
{
  *(void *)(v0 + 24) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D99E0);
  swift_allocObject();
  uint64_t v1 = sub_25B290220();
  *(unsigned char *)(v0 + 16) = 0;
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 32) = v1;
  return v0;
}

uint64_t CallbackZoneAdvertiser.deinit()
{
  swift_release();
  swift_release();
  sub_25B207D70(*(void *)(v0 + 40));
  return v0;
}

uint64_t CallbackZoneAdvertiser.__deallocating_deinit()
{
  swift_release();
  swift_release();
  sub_25B207D70(*(void *)(v0 + 40));
  return swift_deallocClassInstance();
}

uint64_t sub_25B289BA4()
{
  return sub_25B289754();
}

uint64_t sub_25B289BC8()
{
  uint64_t v1 = *v0;
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 16);
}

uint64_t sub_25B289C08(char a1)
{
  uint64_t v3 = *v1;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 16) = a1;
  return result;
}

uint64_t (*sub_25B289C4C())()
{
  return j_j__swift_endAccess;
}

uint64_t sub_25B289CA4()
{
  uint64_t v1 = *v0;
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v3 = *(void (**)(uint64_t))(v1 + 40);
    if (v3)
    {
      uint64_t v4 = swift_retain();
      v3(v4);
      return sub_25B207D70((uint64_t)v3);
    }
  }
  return result;
}

uint64_t CallbackZoneAdvertiser.advertise(_:)()
{
  uint64_t result = swift_beginAccess();
  if (*(unsigned char *)(v0 + 16) == 1)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v2 = *(void (**)(uint64_t))(v0 + 40);
    if (v2)
    {
      uint64_t v3 = swift_retain();
      v2(v3);
      return sub_25B207D70((uint64_t)v2);
    }
  }
  return result;
}

uint64_t sub_25B289DAC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t result = swift_beginAccess();
  *a2 = *(unsigned char *)(v3 + 16);
  return result;
}

uint64_t sub_25B289DF4(char *a1, uint64_t *a2)
{
  char v2 = *a1;
  uint64_t v3 = *a2;
  uint64_t result = swift_beginAccess();
  *(unsigned char *)(v3 + 16) = v2;
  return result;
}

uint64_t sub_25B289E38@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25B289754();
  *a1 = result;
  return result;
}

uint64_t sub_25B289E64(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 24) = *a1;
  swift_retain();
  return swift_release();
}

uint64_t type metadata accessor for CallbackZoneAdvertiser()
{
  return self;
}

uint64_t method lookup function for CallbackZoneAdvertiser(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CallbackZoneAdvertiser);
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.isEnabled.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 112))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.isEnabled.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 120))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.isEnabled.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 128))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.zoneVersionPublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 136))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.zoneVersionPublisher.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 144))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.zoneVersionPublisher.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 152))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.callback.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 160))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.callback.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 168))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.callback.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 176))();
}

uint64_t dispatch thunk of CallbackZoneAdvertiser.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t sub_25B28A044()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_25B28A07C()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

void URL.extendedAttributeNames()()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_25B2905F0();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B28FE80();
  uint64_t v6 = sub_25B290610();
  swift_bridgeObjectRelease();
  ssize_t v7 = listxattr((const char *)(v6 + 32), 0, 0, 0);
  swift_release();
  if (v7 == -1)
  {
    type metadata accessor for URL.ExtendedAttributeError();
    sub_25B28BC04(&qword_26A4DBB08, (void (*)(uint64_t))type metadata accessor for URL.ExtendedAttributeError);
    uint64_t v1 = (void *)swift_allocError();
    *unsigned int v18 = 0;
    v18[1] = 0xE000000000000000;
    v18[2] = -1;
    MEMORY[0x26115EB10]();
    uint64_t v19 = sub_25B2901B0();
    if ((v19 & 0x100000000) == 0)
    {
      int v20 = v19;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10);
      sub_25B28FC70();
      int v25 = v20;
      sub_25B28B528(MEMORY[0x263F8EE78]);
      sub_25B28BC04(&qword_26A4DBB18, MEMORY[0x263F06080]);
      sub_25B28FE10();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      return;
    }
    goto LABEL_16;
  }
  uint64_t v8 = (char *)swift_slowAlloc();
  sub_25B28FE80();
  uint64_t v9 = sub_25B290610();
  swift_bridgeObjectRelease();
  ssize_t v10 = listxattr((const char *)(v9 + 32), v8, v7, 0);
  swift_release();
  if (v10 == -1)
  {
    type metadata accessor for URL.ExtendedAttributeError();
    sub_25B28BC04(&qword_26A4DBB08, (void (*)(uint64_t))type metadata accessor for URL.ExtendedAttributeError);
    uint64_t v1 = (void *)swift_allocError();
    *id v21 = 0;
    v21[1] = 0xE000000000000000;
    void v21[2] = -1;
    MEMORY[0x26115EB10]();
    uint64_t v22 = sub_25B2901B0();
    if ((v22 & 0x100000000) == 0)
    {
      int v23 = v22;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10);
      sub_25B28FC70();
      int v26 = v23;
      sub_25B28B528(MEMORY[0x263F8EE78]);
      sub_25B28BC04(&qword_26A4DBB18, MEMORY[0x263F06080]);
      sub_25B28FE10();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
      MEMORY[0x261160890](v8, -1, -1);
      return;
    }
    goto LABEL_17;
  }
  sub_25B2905D0();
  uint64_t v11 = sub_25B2905E0();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  id v12 = objc_msgSend(objc_allocWithZone(NSString), sel_initWithBytes_length_encoding_, v8, v7, v11);
  if (!v12)
  {
LABEL_12:
    MEMORY[0x261160890](v8, -1, -1);
    return;
  }
  char v13 = v12;
  uint64_t v14 = (void *)sub_25B290590();
  id v15 = objc_msgSend(v13, sel_componentsSeparatedByString_, v14);

  uint64_t v16 = (void *)sub_25B290730();
  if (v16[2])
  {
    if (swift_isUniquelyReferenced_nonNull_native())
    {
      uint64_t v17 = v16[2];
      if (v17)
      {
LABEL_7:
        v16[2] = v17 - 1;
        swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      goto LABEL_15;
    }
  }
  else
  {
    __break(1u);
  }
  uint64_t v16 = sub_25B28BBA4(v16);
  uint64_t v17 = v16[2];
  if (v17) {
    goto LABEL_7;
  }
LABEL_15:
  __break(1u);
LABEL_16:

  __break(1u);
LABEL_17:

  __break(1u);
}

uint64_t URL.extendedAttributeData(named:)()
{
  uint64_t result = sub_25B28FE50();
  if (!v0) {
    return v2;
  }
  return result;
}

uint64_t URL.setExtendedAttributeData(named:value:)()
{
  return sub_25B28FE50();
}

unint64_t URL.ExtendedAttributeError.errorDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_25B28FC70();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL.ExtendedAttributeError();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_25B28BC4C(v1, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = *((void *)v8 + 2);
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10);
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, &v8[*(int *)(v10 + 64)], v2);
    unint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    sub_25B290AA0();
    sub_25B290650();
    sub_25B290650();
    swift_bridgeObjectRelease();
    sub_25B290650();
    v13[1] = v9;
    sub_25B290DB0();
    sub_25B290650();
    swift_bridgeObjectRelease();
    sub_25B290650();
    sub_25B290B90();
    unint64_t v11 = v14;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    unint64_t v14 = 0;
    unint64_t v15 = 0xE000000000000000;
    sub_25B290AA0();
    swift_bridgeObjectRelease();
    unint64_t v14 = 0xD000000000000019;
    unint64_t v15 = 0x800000025B29EBB0;
    sub_25B290650();
    swift_bridgeObjectRelease();
    sub_25B290650();
    return v14;
  }
  return v11;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> URL.removeExtendedAttribute(named:)(Swift::String named)
{
}

uint64_t sub_25B28A934(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_25B290610();
  int v7 = removexattr(a1, (const char *)(v6 + 32), 0);
  uint64_t result = swift_release();
  if (v7 < 0)
  {
    MEMORY[0x26115EB10](result);
    uint64_t result = sub_25B2901B0();
    if ((result & 0x100000000) != 0)
    {
      __break(1u);
    }
    else
    {
      sub_25B28FC60();
      int v9 = sub_25B2901C0();
      uint64_t result = sub_25B2901C0();
      if (v9 != result)
      {
        type metadata accessor for URL.ExtendedAttributeError();
        sub_25B28BC04(&qword_26A4DBB08, (void (*)(uint64_t))type metadata accessor for URL.ExtendedAttributeError);
        swift_allocError();
        unint64_t v11 = v10;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10);
        *unint64_t v11 = a2;
        v11[1] = a3;
        void v11[2] = v7;
        sub_25B28FC70();
        swift_bridgeObjectRetain();
        sub_25B28B528(MEMORY[0x263F8EE78]);
        sub_25B28BC04(&qword_26A4DBB18, MEMORY[0x263F06080]);
        sub_25B28FE10();
        swift_storeEnumTagMultiPayload();
        return swift_willThrow();
      }
    }
  }
  return result;
}

uint64_t sub_25B28AAF8(const char *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  value[2] = *MEMORY[0x263EF8340];
  uint64_t v6 = a4;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v13 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        goto LABEL_35;
      }
      sub_25B114300(a2, a3);
      unint64_t v14 = (char *)sub_25B28FD00();
      if (!v14) {
        goto LABEL_8;
      }
      uint64_t v15 = sub_25B28FD30();
      if (__OFSUB__((int)a2, v15)) {
LABEL_35:
      }
        __break(1u);
      v14 += (int)a2 - v15;
LABEL_8:
      uint64_t v16 = sub_25B28FD20();
      if (v16 >= v13) {
        uint64_t v17 = (a2 >> 32) - (int)a2;
      }
      else {
        uint64_t v17 = v16;
      }
      if (v14) {
        size_t v18 = v17;
      }
      else {
        size_t v18 = 0;
      }
      uint64_t v6 = a4;
      uint64_t v19 = sub_25B290610();
      int v11 = setxattr(a1, (const char *)(v19 + 32), v14, v18, 0, 0);
      swift_release();
      uint64_t result = sub_25B10DFF0(a2, a3);
      if (v11 < 0)
      {
LABEL_29:
        type metadata accessor for URL.ExtendedAttributeError();
        sub_25B28BC04(&qword_26A4DBB08, (void (*)(uint64_t))type metadata accessor for URL.ExtendedAttributeError);
        uint64_t v29 = (void *)swift_allocError();
        *uint64_t v30 = v6;
        v30[1] = a5;
        v30[2] = v11;
        uint64_t v31 = swift_bridgeObjectRetain();
        MEMORY[0x26115EB10](v31);
        uint64_t v32 = sub_25B2901B0();
        if ((v32 & 0x100000000) != 0)
        {

          __break(1u);
          JUMPOUT(0x25B28AF24);
        }
        int v33 = v32;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10);
        sub_25B28FC70();
        LODWORD(value[0]) = v33;
        sub_25B28B528(MEMORY[0x263F8EE78]);
        sub_25B28BC04(&qword_26A4DBB18, MEMORY[0x263F06080]);
        sub_25B28FE10();
        swift_storeEnumTagMultiPayload();
        return swift_willThrow();
      }
      return result;
    case 2uLL:
      uint64_t v20 = *(void *)(a2 + 16);
      uint64_t v21 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v22 = (char *)sub_25B28FD00();
      if (!v22) {
        goto LABEL_19;
      }
      uint64_t v23 = sub_25B28FD30();
      if (__OFSUB__(v20, v23)) {
        goto LABEL_34;
      }
      v22 += v20 - v23;
LABEL_19:
      if (__OFSUB__(v21, v20)) {
        goto LABEL_33;
      }
      uint64_t v24 = sub_25B28FD20();
      if (v24 >= v21 - v20) {
        size_t v25 = v21 - v20;
      }
      else {
        size_t v25 = v24;
      }
      if (v22) {
        size_t v26 = v25;
      }
      else {
        size_t v26 = 0;
      }
      uint64_t v27 = sub_25B290610();
      int v11 = setxattr(a1, (const char *)(v27 + 32), v22, v26, 0, 0);
      swift_release();
      swift_release();
      uint64_t result = swift_release();
      if (v11 < 0) {
        goto LABEL_29;
      }
      return result;
    case 3uLL:
      memset(value, 0, 14);
      uint64_t v28 = sub_25B290610();
      int v11 = setxattr(a1, (const char *)(v28 + 32), value, 0, 0, 0);
      uint64_t result = swift_release();
      if (v11 < 0) {
        goto LABEL_29;
      }
      return result;
    default:
      value[0] = a2;
      LOWORD(value[1]) = a3;
      BYTE2(value[1]) = BYTE2(a3);
      BYTE3(value[1]) = BYTE3(a3);
      BYTE4(value[1]) = BYTE4(a3);
      BYTE5(value[1]) = BYTE5(a3);
      uint64_t v10 = sub_25B290610();
      int v11 = setxattr(a1, (const char *)(v10 + 32), value, BYTE6(a3), 0, 0);
      uint64_t result = swift_release();
      if (v11 < 0) {
        goto LABEL_29;
      }
      return result;
  }
}

uint64_t URL.setExtendedAttribute<A>(named:value:)(uint64_t a1, uint64_t a2)
{
  MEMORY[0x270FA5388](a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v7, v8);
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    uint64_t v10 = v13[0];
    unint64_t v11 = v13[1];
  }
  else
  {
    sub_25B28FDF0();
    swift_allocObject();
    sub_25B28FDE0();
    sub_25B28FDC0();
    uint64_t v10 = sub_25B28FDD0();
    unint64_t v11 = v12;
    uint64_t result = swift_release();
    if (v2) {
      return result;
    }
  }
  MEMORY[0x270FA5388](result);
  v13[-4] = v10;
  v13[-3] = v11;
  v13[-2] = a1;
  v13[-1] = a2;
  sub_25B28FE50();
  return sub_25B10DFF0(v10, v11);
}

uint64_t sub_25B28B100@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = sub_25B290610();
  ssize_t v10 = getxattr(a1, (const char *)(v9 + 32), 0, 0, 0, 0);
  swift_release();
  if (v10 < 1)
  {
    type metadata accessor for URL.ExtendedAttributeError();
    sub_25B28BC04(&qword_26A4DBB08, (void (*)(uint64_t))type metadata accessor for URL.ExtendedAttributeError);
    swift_allocError();
    *unint64_t v14 = a2;
    v14[1] = a3;
    swift_storeEnumTagMultiPayload();
    swift_bridgeObjectRetain();
    return swift_willThrow();
  }
  else
  {
    uint64_t v15 = sub_25B209B80(v10);
    unint64_t v16 = v11;
    swift_bridgeObjectRetain();
    sub_25B28B814(&v15, a1, a2, a3, v10);
    uint64_t result = v15;
    unint64_t v13 = v16;
    if (v4)
    {
      return sub_25B10DFF0(v15, v16);
    }
    else
    {
      *a4 = v15;
      a4[1] = v13;
    }
  }
  return result;
}

void sub_25B28B25C(void *a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v11 = sub_25B290610();
  ssize_t v12 = getxattr(a3, (const char *)(v11 + 32), a1, a6, 0, 0);
  swift_release();
  if (v12 < 1)
  {
    type metadata accessor for URL.ExtendedAttributeError();
    sub_25B28BC04(&qword_26A4DBB08, (void (*)(uint64_t))type metadata accessor for URL.ExtendedAttributeError);
    unint64_t v13 = (void *)swift_allocError();
    *unint64_t v14 = a4;
    v14[1] = a5;
    v14[2] = v12;
    uint64_t v15 = swift_bridgeObjectRetain();
    MEMORY[0x26115EB10](v15);
    if ((sub_25B2901B0() & 0x100000000) != 0)
    {

      __break(1u);
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10);
      sub_25B28FC70();
      sub_25B28B528(MEMORY[0x263F8EE78]);
      sub_25B28BC04(&qword_26A4DBB18, MEMORY[0x263F06080]);
      sub_25B28FE10();
      swift_storeEnumTagMultiPayload();
      swift_willThrow();
    }
  }
}

uint64_t URL.extendedAttribute<A>(named:of:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = MEMORY[0x263F06F78];
  uint64_t result = sub_25B28FE50();
  if (!v3)
  {
    if (a3 == v5)
    {
      return swift_dynamicCast();
    }
    else
    {
      sub_25B28FDB0();
      swift_allocObject();
      sub_25B28FDA0();
      sub_25B28FD90();
      swift_release();
      return sub_25B10DFF0(v7, v8);
    }
  }
  return result;
}

unint64_t sub_25B28B528(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x263F8EE80];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9C48);
  uint64_t v2 = sub_25B290C00();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_25B28C80C(v6, (uint64_t)&v15);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_25B28B654(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_25B1979E4(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_25B28B654(uint64_t a1, uint64_t a2)
{
  sub_25B291210();
  sub_25B290630();
  uint64_t v4 = sub_25B291260();
  return sub_25B28B6CC(a1, a2, v4);
}

unint64_t sub_25B28B6CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (sub_25B290FB0() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (sub_25B290FB0() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (sub_25B290FB0()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_25B28B814(void *a1, const char *a2, uint64_t a3, uint64_t a4, size_t a5)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unint64_t v5 = a1[1];
  switch(v5 >> 62)
  {
    case 1uLL:
      *(void *)&long long v31 = *a1;
      *((void *)&v31 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      swift_bridgeObjectRetain();
      sub_25B28BABC((int *)&v31, a2, a3, a4, a5);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v17 = *((void *)&v31 + 1) | 0x4000000000000000;
      *a1 = v31;
      a1[1] = v17;
      return result;
    case 2uLL:
      *(void *)&long long v31 = *a1;
      *((void *)&v31 + 1) = v5 & 0x3FFFFFFFFFFFFFFFLL;
      sub_25B28FEB0();
      uint64_t v18 = *((void *)&v31 + 1);
      uint64_t v19 = *(void *)(v31 + 16);
      uint64_t v30 = *(void *)(v31 + 24);
      uint64_t v20 = sub_25B28FD00();
      if (!v20)
      {
        __break(1u);
        JUMPOUT(0x25B28BAACLL);
      }
      uint64_t v21 = v20;
      uint64_t v22 = sub_25B28FD30();
      uint64_t v23 = v19 - v22;
      if (__OFSUB__(v19, v22))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v24 = __OFSUB__(v30, v19);
      uint64_t v25 = v30 - v19;
      if (v24) {
        goto LABEL_14;
      }
      uint64_t v26 = sub_25B28FD20();
      if (v26 >= v25) {
        uint64_t v27 = v25;
      }
      else {
        uint64_t v27 = v26;
      }
      sub_25B28B25C((void *)(v21 + v23), v21 + v23 + v27, a2, a3, a4, a5);
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v31;
      a1[1] = v18 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&v31 + 7) = 0;
      *(void *)&long long v31 = 0;
      sub_25B28B25C(&v31, (uint64_t)&v31, a2, a3, a4, a5);
      return swift_bridgeObjectRelease();
    default:
      *(void *)&long long v31 = *a1;
      WORD4(v31) = v5;
      BYTE10(v31) = BYTE2(v5);
      BYTE11(v31) = BYTE3(v5);
      BYTE12(v31) = BYTE4(v5);
      BYTE13(v31) = BYTE5(v5);
      BYTE14(v31) = BYTE6(v5);
      sub_25B28B25C(&v31, (uint64_t)&v31 + BYTE6(v5), a2, a3, a4, a5);
      uint64_t v11 = v31;
      uint64_t v12 = DWORD2(v31);
      uint64_t v13 = BYTE12(v31);
      uint64_t v14 = BYTE13(v31);
      uint64_t v15 = BYTE14(v31);
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v11;
      a1[1] = v12 | (v13 << 32) | (v14 << 40) | (v15 << 48);
      return result;
  }
}

uint64_t sub_25B28BABC(int *a1, const char *a2, uint64_t a3, uint64_t a4, size_t a5)
{
  uint64_t result = sub_25B28FEC0();
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  if ((int)v11 < (int)v12)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v18 = a4;
  uint64_t v19 = a2;
  uint64_t result = sub_25B28FD00();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  uint64_t v13 = result;
  uint64_t result = sub_25B28FD30();
  uint64_t v14 = v12 - result;
  if (__OFSUB__(v12, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v15 = v11 - v12;
  uint64_t v16 = sub_25B28FD20();
  if (v16 >= v15) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v16;
  }
  sub_25B28B25C((void *)(v13 + v14), v13 + v14 + v17, v19, a3, v18, a5);
  return swift_bridgeObjectRelease();
}

void *sub_25B28BBA4(void *a1)
{
  return sub_25B21822C(0, a1[2], 0, a1);
}

uint64_t type metadata accessor for URL.ExtendedAttributeError()
{
  uint64_t result = qword_26A4DBB20;
  if (!qword_26A4DBB20) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_25B28BC04(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_25B28BC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL.ExtendedAttributeError();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s10Foundation3URLV16ReplicatorEngineE22ExtendedAttributeErrorO2eeoiySbAF_AFtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_25B28FC70();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v44 - v8;
  uint64_t v10 = type metadata accessor for URL.ExtendedAttributeError();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (uint64_t *)((char *)&v44 - v14);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB30);
  uint64_t v17 = MEMORY[0x270FA5388](v16 - 8);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = &v19[*(int *)(v17 + 56)];
  sub_25B28BC4C(a1, (uint64_t)v19);
  sub_25B28BC4C(a2, (uint64_t)v20);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_25B28BC4C((uint64_t)v19, (uint64_t)v15);
    uint64_t v36 = *v15;
    uint64_t v37 = v15[1];
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      if (v36 == *(void *)v20 && v37 == *((void *)v20 + 1))
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v39 = sub_25B290FB0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v39 & 1) == 0)
        {
LABEL_22:
          sub_25B28C4CC((uint64_t)v19);
          goto LABEL_23;
        }
      }
      sub_25B28C4CC((uint64_t)v19);
      char v40 = 1;
      return v40 & 1;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    sub_25B28C7AC((uint64_t)v19);
LABEL_23:
    char v40 = 0;
    return v40 & 1;
  }
  uint64_t v47 = v9;
  uint64_t v48 = v4;
  sub_25B28BC4C((uint64_t)v19, (uint64_t)v13);
  uint64_t v22 = *(void *)v13;
  uint64_t v21 = *((void *)v13 + 1);
  uint64_t v23 = *((void *)v13 + 2);
  uint64_t v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10) + 64);
  uint64_t v25 = &v13[v24];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(&v13[v24], v48);
    goto LABEL_17;
  }
  uint64_t v27 = *(void *)v20;
  uint64_t v26 = *((void *)v20 + 1);
  uint64_t v45 = *((void *)v20 + 2);
  uint64_t v46 = v23;
  uint64_t v28 = v22;
  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
  uint64_t v30 = v25;
  uint64_t v31 = v48;
  v29(v47, v30, v48);
  v29(v7, &v20[v24], v31);
  if (v28 == v27 && v21 == v26)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v34 = v49;
    uint64_t v35 = v47;
  }
  else
  {
    char v33 = sub_25B290FB0();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v34 = v49;
    uint64_t v35 = v47;
    if ((v33 & 1) == 0) {
      goto LABEL_21;
    }
  }
  if (v46 != v45)
  {
LABEL_21:
    uint64_t v42 = *(void (**)(char *, uint64_t))(v34 + 8);
    v42(v7, v31);
    v42(v35, v31);
    goto LABEL_22;
  }
  sub_25B28BC04(&qword_26A4DBB18, MEMORY[0x263F06080]);
  char v40 = sub_25B28FE00();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v34 + 8);
  v41(v7, v31);
  v41(v35, v31);
  sub_25B28C4CC((uint64_t)v19);
  return v40 & 1;
}

uint64_t sub_25B28C0EC(const char *a1)
{
  return sub_25B28A934(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_25B28C108()
{
  return sub_25B28BC04(&qword_26A4DBB08, (void (*)(uint64_t))type metadata accessor for URL.ExtendedAttributeError);
}

uint64_t *_s22ExtendedAttributeErrorOwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      uint64_t v8 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10) + 64);
      uint64_t v9 = (char *)a1 + v8;
      uint64_t v10 = (char *)a2 + v8;
      uint64_t v11 = sub_25B28FC70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t _s22ExtendedAttributeErrorOwxx(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = swift_bridgeObjectRelease();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v4 = a1 + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10) + 64);
    uint64_t v5 = sub_25B28FC70();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  return result;
}

void *_s22ExtendedAttributeErrorOwcp(void *a1, void *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  if (EnumCaseMultiPayload == 1)
  {
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10) + 64);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_25B28FC70();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *_s22ExtendedAttributeErrorOwca(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_25B28C4CC((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    *a1 = *a2;
    a1[1] = a2[1];
    if (EnumCaseMultiPayload == 1)
    {
      a1[2] = a2[2];
      swift_bridgeObjectRetain();
      uint64_t v5 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10) + 64);
      uint64_t v6 = (char *)a1 + v5;
      uint64_t v7 = (char *)a2 + v5;
      uint64_t v8 = sub_25B28FC70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_25B28C4CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL.ExtendedAttributeError();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *_s22ExtendedAttributeErrorOwtk(void *a1, void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10) + 64);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_25B28FC70();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *_s22ExtendedAttributeErrorOwta(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_25B28C4CC((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v6 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB10) + 64);
      uint64_t v7 = (char *)a1 + v6;
      uint64_t v8 = (char *)a2 + v6;
      uint64_t v9 = sub_25B28FC70();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_25B28C6F8()
{
  v2[4] = &unk_25B29B6A8;
  uint64_t result = sub_25B28FC70();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v2[5] = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_25B28C7AC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4DBB30);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_25B28C80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D9AA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_25B28C874(const char *a1)
{
  return sub_25B20A450(a1);
}

uint64_t sub_25B28C88C@<X0>(const char *a1@<X0>, void *a2@<X8>)
{
  return sub_25B207E3C(a1, a2);
}

BOOL static ReplicatorError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t ReplicatorError.hash(into:)()
{
  return sub_25B291220();
}

uint64_t ReplicatorError.hashValue.getter()
{
  return sub_25B291260();
}

unint64_t sub_25B28C930()
{
  unint64_t result = qword_26A4DBB38;
  if (!qword_26A4DBB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26A4DBB38);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ReplicatorError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ReplicatorError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x25B28CAE0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ReplicatorError()
{
  return &type metadata for ReplicatorError;
}

uint64_t sub_25B28CB18()
{
  if (*(void *)(v0 + 16))
  {
    uint64_t v1 = *(void *)(v0 + 16);
  }
  else
  {
    uint64_t v2 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D99D0);
    sub_25B116394(&qword_26A4D99C8, &qword_26A4D99D0);
    uint64_t v1 = sub_25B290240();
    *(void *)(v2 + 16) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

uint64_t (*sub_25B28CBCC(uint64_t *a1))(void *a1)
{
  a1[1] = v1;
  *a1 = sub_25B28CB18();
  return sub_25B1D5770;
}

uint64_t HandshakeScheduler.__allocating_init(firstLockStateProvider:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  HandshakeScheduler.init(firstLockStateProvider:)(a1);
  return v2;
}

void *HandshakeScheduler.init(firstLockStateProvider:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v28 = (void *)a1;
  uint64_t v33 = *v1;
  uint64_t v32 = v33;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9B50);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v29 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9938);
  uint64_t v34 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  uint64_t v30 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_25B2908F0();
  uint64_t v6 = *(void *)(v27 - 8);
  MEMORY[0x270FA5388](v27);
  int v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_25B2908C0();
  MEMORY[0x270FA5388](v9);
  uint64_t v10 = sub_25B290360();
  MEMORY[0x270FA5388](v10 - 8);
  void v1[2] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D99D0);
  swift_allocObject();
  v1[3] = sub_25B290220();
  sub_25B10CB64();
  sub_25B290350();
  uint64_t v35 = MEMORY[0x263F8EE78];
  sub_25B2328C4((unint64_t *)&unk_26A4D9B40, MEMORY[0x263F8F0F8]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9B10);
  sub_25B116394((unint64_t *)&qword_26A4D9B20, (uint64_t *)&unk_26A4D9B10);
  sub_25B290A00();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F8F138], v27);
  uint64_t v11 = sub_25B290920();
  uint64_t v12 = MEMORY[0x263F8EE80];
  v1[4] = v11;
  v1[5] = v12;
  v1[6] = v12;
  v1[12] = MEMORY[0x263F8EE88];
  uint64_t v13 = v28;
  sub_25B10FF48((uint64_t)v28, (uint64_t)(v1 + 7));
  uint64_t v14 = v13[3];
  uint64_t v15 = v13[4];
  __swift_project_boxed_opaque_existential_1(v13, v14);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  uint64_t v16 = (void *)v1[4];
  id v36 = v16;
  uint64_t v17 = sub_25B2908E0();
  uint64_t v18 = (uint64_t)v29;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v29, 1, 1, v17);
  id v19 = v16;
  __swift_instantiateConcreteTypeFromMangledName(&qword_26A4D99A0);
  sub_25B116394(&qword_26A4D9998, &qword_26A4D99A0);
  sub_25B2328C4((unint64_t *)&unk_26A4D9B60, (void (*)(uint64_t))sub_25B10CB64);
  uint64_t v20 = v30;
  sub_25B290260();
  sub_25B116DE0(v18, (uint64_t *)&unk_26A4D9B50);

  swift_release();
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v32;
  uint64_t v24 = v33;
  *(_OWORD *)(v22 + 16) = *(_OWORD *)(v32 + 80);
  *(void *)(v22 + 32) = *(void *)(v24 + 96);
  *(_OWORD *)(v22 + 40) = *(_OWORD *)(v23 + 104);
  *(void *)(v22 + 56) = *(void *)(v24 + 120);
  *(void *)(v22 + 64) = v21;
  sub_25B116394(&qword_26A4D9930, (uint64_t *)&unk_26A4D9938);
  uint64_t v25 = v31;
  sub_25B290270();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v20, v25);
  swift_beginAccess();
  sub_25B2901F0();
  swift_endAccess();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  return v2;
}

uint64_t sub_25B28D270()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_25B28D2A8(unsigned __int8 *a1)
{
  int v1 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (v1) {
      sub_25B28D35C();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_25B28D310()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 72, 7);
}

uint64_t sub_25B28D348(unsigned __int8 *a1)
{
  return sub_25B28D2A8(a1);
}

uint64_t sub_25B28D35C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_25B290410();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (uint64_t *)((char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 32);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, *MEMORY[0x263F8F0E0], v2);
  id v7 = v6;
  LOBYTE(v6) = sub_25B290440();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (qword_26A4D98C0 != -1) {
LABEL_29:
  }
    swift_once();
  uint64_t v8 = sub_25B290190();
  __swift_project_value_buffer(v8, (uint64_t)qword_26A4EB150);
  uint64_t v9 = sub_25B290160();
  os_log_type_t v10 = sub_25B2908A0();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_25B107000, v9, v10, "Processing pended handshakes", v11, 2u);
    MEMORY[0x261160890](v11, -1, -1);
  }

  uint64_t v34 = (void *)(v1 + 48);
  swift_beginAccess();
  uint64_t v12 = *(void *)(v1 + 48);
  uint64_t v13 = v12 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v12 + 64);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v18 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_9;
    }
    int64_t v28 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v17) {
      goto LABEL_25;
    }
    unint64_t v29 = *(void *)(v13 + 8 * v28);
    ++v18;
    if (!v29)
    {
      int64_t v18 = v28 + 1;
      if (v28 + 1 >= v17) {
        goto LABEL_25;
      }
      unint64_t v29 = *(void *)(v13 + 8 * v18);
      if (!v29)
      {
        int64_t v18 = v28 + 2;
        if (v28 + 2 >= v17) {
          goto LABEL_25;
        }
        unint64_t v29 = *(void *)(v13 + 8 * v18);
        if (!v29) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v16 = (v29 - 1) & v29;
    unint64_t v20 = __clz(__rbit64(v29)) + (v18 << 6);
LABEL_9:
    uint64_t v21 = *(void *)(v12 + 48) + 56 * v20;
    uint64_t v22 = *(void *)(v21 + 8);
    uint64_t v23 = *(void *)(v21 + 16);
    uint64_t v24 = *(void *)(v21 + 24);
    char v25 = *(unsigned char *)(v21 + 32);
    uint64_t v26 = *(void *)(v12 + 56) + 16 * v20;
    uint64_t v27 = *(void *)v26;
    LOBYTE(v26) = *(unsigned char *)(v26 + 8);
    *(void *)&long long v37 = *(void *)v21;
    *((void *)&v37 + 1) = v22;
    uint64_t v38 = v23;
    uint64_t v39 = v24;
    char v40 = v25;
    long long v41 = *(_OWORD *)(v21 + 40);
    uint64_t v35 = v27;
    char v36 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_25B28E0A0(&v37, (uint64_t)&v35);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  int64_t v30 = v28 + 3;
  if (v30 < v17)
  {
    unint64_t v29 = *(void *)(v13 + 8 * v30);
    if (!v29)
    {
      while (1)
      {
        int64_t v18 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          goto LABEL_27;
        }
        if (v18 >= v17) {
          goto LABEL_25;
        }
        unint64_t v29 = *(void *)(v13 + 8 * v18);
        ++v30;
        if (v29) {
          goto LABEL_24;
        }
      }
    }
    int64_t v18 = v30;
    goto LABEL_24;
  }
LABEL_25:
  swift_release();
  uint64_t v31 = v34;
  swift_beginAccess();
  *uint64_t v31 = MEMORY[0x263F8EE80];
  return swift_bridgeObjectRelease();
}

uint64_t HandshakeScheduler.deinit()
{
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t HandshakeScheduler.__deallocating_deinit()
{
  HandshakeScheduler.deinit();
  return swift_deallocClassInstance();
}

uint64_t HandshakeScheduler.scheduleHandshake(with:schedule:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = sub_25B290320();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[0] = sub_25B290360();
  uint64_t v9 = *(void *)(v19[0] - 8);
  MEMORY[0x270FA5388](v19[0]);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = *(_OWORD *)(a1 + 16);
  v21[0] = *(_OWORD *)a1;
  v21[1] = v12;
  void v21[2] = *(_OWORD *)(a1 + 32);
  uint64_t v22 = *(void *)(a1 + 48);
  uint64_t v13 = *a2;
  char v14 = *((unsigned char *)a2 + 8);
  uint64_t v15 = swift_allocObject();
  long long v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)a1;
  *(void *)(v15 + 16) = v2;
  *(_OWORD *)(v15 + 40) = v16;
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(a1 + 32);
  *(void *)(v15 + 72) = *(void *)(a1 + 48);
  *(void *)(v15 + 80) = v13;
  *(unsigned char *)(v15 + 88) = v14;
  aBlock[4] = sub_25B28DB5C;
  void aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_25B10F584;
  aBlock[3] = &block_descriptor_17;
  int64_t v17 = _Block_copy(aBlock);
  swift_retain();
  sub_25B180D48((uint64_t)v21);
  sub_25B290340();
  v19[1] = MEMORY[0x263F8EE78];
  sub_25B2328C4((unint64_t *)&unk_26A4D9A00, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9AD0);
  sub_25B116394((unint64_t *)&qword_26A4D9AE0, (uint64_t *)&unk_26A4D9AD0);
  sub_25B290A00();
  MEMORY[0x26115F250](0, v11, v8, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, void))(v9 + 8))(v11, v19[0]);
  return swift_release();
}

void sub_25B28DA70(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = a1[10];
  uint64_t v8 = a1[11];
  __swift_project_boxed_opaque_existential_1(a1 + 7, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8))
  {
    long long v9 = *(_OWORD *)(a2 + 16);
    long long v13 = *(_OWORD *)a2;
    long long v14 = v9;
    long long v15 = *(_OWORD *)(a2 + 32);
    uint64_t v16 = *(void *)(a2 + 48);
    uint64_t v11 = a3;
    char v12 = a4;
    sub_25B28E0A0(&v13, (uint64_t)&v11);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v13 = *(_OWORD *)a2;
    long long v14 = v10;
    long long v15 = *(_OWORD *)(a2 + 32);
    uint64_t v16 = *(void *)(a2 + 48);
    uint64_t v11 = a3;
    char v12 = a4;
    sub_25B28DB88((uint64_t)&v13, (uint64_t)&v11);
  }
}

uint64_t sub_25B28DB54()
{
  return objectdestroy_5Tm_0(89);
}

void sub_25B28DB5C()
{
  sub_25B28DA70(*(void **)(v0 + 16), v0 + 24, *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

void sub_25B28DB88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_25B290410();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  long long v9 = (void *)((char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v10 = *(_OWORD *)(a1 + 16);
  v45[0] = *(_OWORD *)a1;
  v45[1] = v10;
  v45[2] = *(_OWORD *)(a1 + 32);
  uint64_t v46 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)a2;
  unsigned int v12 = *(unsigned __int8 *)(a2 + 8);
  long long v13 = *(void **)(v3 + 32);
  *long long v9 = v13;
  (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F8F0E0], v6);
  id v14 = v13;
  LOBYTE(a2) = sub_25B290440();
  (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  if (a2)
  {
    if (qword_26A4D98C0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v15 = sub_25B290190();
  uint64_t v16 = __swift_project_value_buffer(v15, (uint64_t)qword_26A4EB150);
  sub_25B180D48((uint64_t)v45);
  int64_t v17 = sub_25B290160();
  os_log_type_t v18 = sub_25B2908A0();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v43 = v20;
    *(_DWORD *)uint64_t v19 = 136446466;
    unsigned int v21 = v12;
    uint64_t v22 = v11;
    v41[1] = v16;
    unint64_t v23 = *((void *)&v45[0] + 1);
    uint64_t v24 = *(void *)&v45[0];
    swift_bridgeObjectRetain();
    uint64_t v47 = sub_25B288E98(v24, v23, &v43);
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    sub_25B180DAC((uint64_t)v45);
    *(_WORD *)(v19 + 12) = 2082;
    uint64_t v47 = v22;
    char v48 = v21;
    uint64_t v25 = ReplicationSchedule.description.getter();
    uint64_t v47 = sub_25B288E98(v25, v26, &v43);
    uint64_t v11 = v22;
    unsigned int v12 = v21;
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B107000, v17, v18, "Pending handshake for %{public}s with schedule %{public}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x261160890](v20, -1, -1);
    MEMORY[0x261160890](v19, -1, -1);
  }
  else
  {
    sub_25B180DAC((uint64_t)v45);
  }

  uint64_t v27 = (uint64_t *)(v3 + 48);
  swift_beginAccess();
  uint64_t v28 = *(void *)(v3 + 48);
  if (!*(void *)(v28 + 16)) {
    goto LABEL_14;
  }
  sub_25B180D48((uint64_t)v45);
  swift_bridgeObjectRetain();
  unint64_t v29 = sub_25B18AC48((uint64_t *)v45);
  if ((v30 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_25B180DAC((uint64_t)v45);
    goto LABEL_14;
  }
  uint64_t v31 = *(void *)(v28 + 56) + 16 * v29;
  uint64_t v32 = *(void *)v31;
  int v33 = *(unsigned __int8 *)(v31 + 8);
  swift_bridgeObjectRelease();
  sub_25B180DAC((uint64_t)v45);
  if (v33)
  {
    if (v33 == 1)
    {
      if (!v12) {
        goto LABEL_14;
      }
      if (v12 != 1) {
        goto LABEL_19;
      }
LABEL_16:
      if (v11 >= v32) {
        goto LABEL_19;
      }
LABEL_14:
      swift_beginAccess();
      sub_25B180D48((uint64_t)v45);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v42 = *v27;
      uint64_t *v27 = 0x8000000000000000;
      sub_25B222360(v11, v12, (uint64_t)v45, isUniquelyReferenced_nonNull_native);
      uint64_t *v27 = v42;
      swift_bridgeObjectRelease();
      sub_25B180DAC((uint64_t)v45);
      swift_endAccess();
      return;
    }
    if (v12 < 2) {
      goto LABEL_14;
    }
  }
  else if (!v12)
  {
    goto LABEL_16;
  }
LABEL_19:
  uint64_t v35 = sub_25B290160();
  os_log_type_t v36 = sub_25B2908A0();
  if (os_log_type_enabled(v35, v36))
  {
    long long v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    uint64_t v42 = v38;
    uint64_t v43 = v32;
    *(_DWORD *)long long v37 = 136446210;
    char v44 = v33;
    uint64_t v39 = ReplicationSchedule.description.getter();
    uint64_t v43 = sub_25B288E98(v39, v40, &v42);
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B107000, v35, v36, "Not replacing existing pended handshake with schedule %{public}s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261160890](v38, -1, -1);
    MEMORY[0x261160890](v37, -1, -1);
  }
}

uint64_t sub_25B28E0A0(long long *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v3;
  uint64_t v7 = sub_25B290410();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  long long v10 = (uint64_t *)((char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v11 = a1[1];
  long long v90 = *a1;
  long long v91 = v11;
  long long v92 = a1[2];
  uint64_t v93 = *((void *)a1 + 6);
  uint64_t v12 = *(void *)a2;
  unsigned int v13 = *(unsigned __int8 *)(a2 + 8);
  id v14 = (void *)v3[4];
  *long long v10 = v14;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F8F0E0], v7);
  id v15 = v14;
  LOBYTE(v14) = sub_25B290440();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if (v14)
  {
    if (qword_26A4D98C0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = sub_25B290190();
  __swift_project_value_buffer(v16, (uint64_t)qword_26A4EB150);
  swift_retain();
  sub_25B180D48((uint64_t)&v90);
  swift_retain();
  sub_25B180D48((uint64_t)&v90);
  int64_t v17 = sub_25B290160();
  os_log_type_t v18 = sub_25B2908A0();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    *(void *)&long long v87 = v77;
    *(_DWORD *)uint64_t v20 = 136315650;
    LODWORD(v75) = v19;
    uint64_t v94 = v3;
    swift_retain();
    long long v21 = *(_OWORD *)(v6 + 96);
    long long v83 = *(_OWORD *)(v6 + 80);
    long long v84 = v21;
    long long v85 = *(_OWORD *)(v6 + 112);
    type metadata accessor for HandshakeScheduler();
    uint64_t v22 = sub_25B290600();
    uint64_t v76 = v6;
    unsigned int v23 = v13;
    *(void *)&long long v83 = sub_25B288E98(v22, v24, (uint64_t *)&v87);
    sub_25B2909C0();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    unint64_t v25 = *((void *)&v90 + 1);
    uint64_t v26 = v90;
    swift_bridgeObjectRetain();
    uint64_t v27 = v26;
    unsigned int v13 = v23;
    *(void *)&long long v83 = sub_25B288E98(v27, v25, (uint64_t *)&v87);
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    sub_25B180DAC((uint64_t)&v90);
    sub_25B180DAC((uint64_t)&v90);
    *(_WORD *)(v20 + 22) = 2082;
    *(void *)&long long v83 = v12;
    BYTE8(v83) = v23;
    uint64_t v28 = ReplicationSchedule.description.getter();
    *(void *)&long long v83 = sub_25B288E98(v28, v29, (uint64_t *)&v87);
    uint64_t v6 = v76;
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_25B107000, v17, (os_log_type_t)v75, "%s scheduling handshake for %{public}s with schedule %{public}s", (uint8_t *)v20, 0x20u);
    uint64_t v30 = v77;
    swift_arrayDestroy();
    MEMORY[0x261160890](v30, -1, -1);
    MEMORY[0x261160890](v20, -1, -1);
  }
  else
  {
    swift_release_n();
    sub_25B180DAC((uint64_t)&v90);
    sub_25B180DAC((uint64_t)&v90);
  }

  swift_beginAccess();
  uint64_t v31 = v3[5];
  if (*(void *)(v31 + 16))
  {
    sub_25B180D48((uint64_t)&v90);
    swift_bridgeObjectRetain();
    unint64_t v32 = sub_25B18AC48((uint64_t *)&v90);
    if (v33)
    {
      sub_25B10FF48(*(void *)(v31 + 56) + 40 * v32, (uint64_t)&v87);
    }
    else
    {
      uint64_t v89 = 0;
      long long v87 = 0u;
      long long v88 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_25B180DAC((uint64_t)&v90);
    if (*((void *)&v88 + 1))
    {
      sub_25B180BD4(&v87, (uint64_t)&v83);
      uint64_t v34 = *((void *)&v84 + 1);
      uint64_t v35 = v85;
      __swift_project_boxed_opaque_existential_1(&v83, *((uint64_t *)&v84 + 1));
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v35 + 16))(&v87, v34, v35);
      if (BYTE8(v87))
      {
        if (BYTE8(v87) != 1)
        {
          if (v13 >= 2)
          {
LABEL_24:
            sub_25B10FF48((uint64_t)&v83, (uint64_t)&v87);
            char v48 = sub_25B290160();
            os_log_type_t v49 = sub_25B2908A0();
            if (os_log_type_enabled(v48, v49))
            {
              uint64_t v50 = swift_slowAlloc();
              uint64_t v51 = swift_slowAlloc();
              uint64_t v80 = v51;
              *(_DWORD *)uint64_t v50 = 136446466;
              uint64_t v52 = *((void *)&v88 + 1);
              uint64_t v53 = v89;
              __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v53 + 16))(&v81, v52, v53);
              uint64_t v78 = v81;
              char v79 = v82;
              uint64_t v54 = ReplicationSchedule.description.getter();
              uint64_t v81 = sub_25B288E98(v54, v55, &v80);
              sub_25B2909C0();
              swift_bridgeObjectRelease();
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
              *(_WORD *)(v50 + 12) = 2082;
              uint64_t v81 = v12;
              char v82 = v13;
              uint64_t v56 = ReplicationSchedule.description.getter();
              uint64_t v81 = sub_25B288E98(v56, v57, &v80);
              sub_25B2909C0();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_25B107000, v48, v49, "Not replacing existing scheduled handshake (%{public}s) with schedule %{public}s", (uint8_t *)v50, 0x16u);
              swift_arrayDestroy();
              MEMORY[0x261160890](v51, -1, -1);
              MEMORY[0x261160890](v50, -1, -1);
            }
            else
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            }

            uint64_t v58 = &v83;
            return __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
          }
          goto LABEL_21;
        }
        if (!v13)
        {
LABEL_21:
          LODWORD(v77) = v13;
          sub_25B10FF48((uint64_t)&v83, (uint64_t)&v87);
          os_log_type_t v36 = sub_25B290160();
          os_log_type_t v37 = sub_25B2908A0();
          if (os_log_type_enabled(v36, v37))
          {
            uint64_t v38 = swift_slowAlloc();
            uint64_t v75 = swift_slowAlloc();
            uint64_t v80 = v75;
            *(_DWORD *)uint64_t v38 = 136446466;
            uint64_t v76 = v6;
            uint64_t v39 = v12;
            uint64_t v41 = *((void *)&v88 + 1);
            uint64_t v40 = v89;
            __swift_project_boxed_opaque_existential_1(&v87, *((uint64_t *)&v88 + 1));
            uint64_t v42 = v41;
            uint64_t v12 = v39;
            (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v40 + 16))(&v81, v42, v40);
            uint64_t v78 = v81;
            char v79 = v82;
            uint64_t v43 = ReplicationSchedule.description.getter();
            uint64_t v81 = sub_25B288E98(v43, v44, &v80);
            sub_25B2909C0();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
            *(_WORD *)(v38 + 12) = 2082;
            uint64_t v81 = v39;
            char v82 = v77;
            uint64_t v45 = ReplicationSchedule.description.getter();
            uint64_t v81 = sub_25B288E98(v45, v46, &v80);
            uint64_t v6 = v76;
            sub_25B2909C0();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_25B107000, v36, v37, "Canceling and replacing existing scheduled handshake (%{public}s) with schedule %{public}s", (uint8_t *)v38, 0x16u);
            uint64_t v47 = v75;
            swift_arrayDestroy();
            MEMORY[0x261160890](v47, -1, -1);
            MEMORY[0x261160890](v38, -1, -1);
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v87);
          }

          uint64_t v59 = *((void *)&v84 + 1);
          uint64_t v60 = v85;
          __swift_project_boxed_opaque_existential_1(&v83, *((uint64_t *)&v84 + 1));
          (*(void (**)(uint64_t, uint64_t))(v60 + 32))(v59, v60);
          uint64_t v89 = 0;
          long long v87 = 0u;
          long long v88 = 0u;
          swift_beginAccess();
          sub_25B180D48((uint64_t)&v90);
          sub_25B20F2DC((uint64_t)&v87, (uint64_t *)&v90);
          swift_endAccess();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v83);
          goto LABEL_30;
        }
        if (v13 != 1) {
          goto LABEL_24;
        }
      }
      else if (v13)
      {
        goto LABEL_24;
      }
      if (v12 >= (uint64_t)v87) {
        goto LABEL_24;
      }
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v89 = 0;
    long long v87 = 0u;
    long long v88 = 0u;
  }
  LODWORD(v77) = v13;
  sub_25B116DE0((uint64_t)&v87, &qword_26A4DB228);
LABEL_30:
  uint64_t v61 = swift_allocObject();
  swift_weakInit();
  uint64_t v62 = swift_allocObject();
  uint64_t v63 = *(void *)(v6 + 80);
  *(void *)(v62 + 16) = v63;
  uint64_t v64 = *(void *)(v6 + 88);
  *(void *)(v62 + 24) = v64;
  uint64_t v65 = *(void *)(v6 + 96);
  *(void *)(v62 + 32) = v65;
  uint64_t v66 = *(void *)(v6 + 104);
  *(void *)(v62 + 40) = v66;
  uint64_t v67 = *(void *)(v6 + 112);
  *(void *)(v62 + 48) = v67;
  uint64_t v68 = *(void *)(v6 + 120);
  long long v69 = v91;
  *(_OWORD *)(v62 + 72) = v90;
  *(void *)(v62 + 56) = v68;
  *(void *)(v62 + 64) = v61;
  *(_OWORD *)(v62 + 88) = v69;
  *(_OWORD *)(v62 + 104) = v92;
  *(void *)(v62 + 120) = v93;
  if (v77)
  {
    long long v83 = v90;
    long long v84 = v91;
    long long v85 = v92;
    uint64_t v86 = v93;
    uint64_t v81 = v12;
    if (v77 == 1)
    {
      char v82 = 1;
      uint64_t v70 = *(void (**)(long long *, uint64_t *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v67 + 24);
      *((void *)&v88 + 1) = v64;
      uint64_t v89 = v67;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v87);
      sub_25B180D48((uint64_t)&v90);
      sub_25B180D48((uint64_t)&v90);
      swift_retain();
      v70(&v83, &v81, sub_25B28F978, v62, v64, v67);
    }
    else
    {
      char v82 = 2;
      uint64_t v72 = *(void (**)(long long *, uint64_t *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v68 + 24);
      *((void *)&v88 + 1) = v65;
      uint64_t v89 = v68;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v87);
      sub_25B180D48((uint64_t)&v90);
      sub_25B180D48((uint64_t)&v90);
      swift_retain();
      v72(&v83, &v81, sub_25B28F978, v62, v65, v68);
    }
  }
  else
  {
    long long v83 = v90;
    long long v84 = v91;
    long long v85 = v92;
    uint64_t v86 = v93;
    uint64_t v81 = v12;
    char v82 = 0;
    uint64_t v71 = *(void (**)(long long *, uint64_t *, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v66 + 24);
    *((void *)&v88 + 1) = v63;
    uint64_t v89 = v66;
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v87);
    sub_25B180D48((uint64_t)&v90);
    sub_25B180D48((uint64_t)&v90);
    swift_retain();
    v71(&v83, &v81, sub_25B28F978, v62, v63, v66);
  }
  sub_25B10FF48((uint64_t)&v87, (uint64_t)&v83);
  swift_beginAccess();
  sub_25B180D48((uint64_t)&v90);
  sub_25B20F2DC((uint64_t)&v83, (uint64_t *)&v90);
  swift_endAccess();
  swift_release();
  uint64_t v58 = &v87;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
}

uint64_t sub_25B28ED10()
{
  return sub_25B28CB18();
}

uint64_t sub_25B28ED34(uint64_t a1, uint64_t *a2)
{
  return HandshakeScheduler.scheduleHandshake(with:schedule:)(a1, a2);
}

uint64_t sub_25B28ED58@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_25B28CB18();
  *a1 = result;
  return result;
}

uint64_t sub_25B28ED84()
{
  uint64_t v0 = swift_retain();
  return sub_25B1D5718(v0);
}

uint64_t sub_25B28EDB0()
{
  return 48;
}

__n128 sub_25B28EDBC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_25B28EDD0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for HandshakeScheduler()
{
  return swift_getGenericMetadata();
}

uint64_t method lookup function for HandshakeScheduler(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for HandshakeScheduler);
}

uint64_t dispatch thunk of HandshakeScheduler.handshakePublisher.getter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 184))();
}

uint64_t dispatch thunk of HandshakeScheduler.handshakePublisher.setter()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 192))();
}

uint64_t dispatch thunk of HandshakeScheduler.handshakePublisher.modify()
{
  return (*(uint64_t (**)(void))(*(void *)v0 + 200))();
}

uint64_t dispatch thunk of HandshakeScheduler.__allocating_init(firstLockStateProvider:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t sub_25B28EEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_25B290320();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_25B290360();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  long long v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v12 = result;
    v17[1] = *(void *)(result + 32);
    uint64_t v13 = swift_allocObject();
    long long v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)a2;
    *(void *)(v13 + 16) = v12;
    *(_OWORD *)(v13 + 40) = v14;
    *(_OWORD *)(v13 + 56) = *(_OWORD *)(a2 + 32);
    *(void *)(v13 + 72) = *(void *)(a2 + 48);
    aBlock[4] = sub_25B28F9EC;
    void aBlock[5] = v13;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_25B10F584;
    aBlock[3] = &block_descriptor_16;
    id v15 = _Block_copy(aBlock);
    v17[0] = v7;
    uint64_t v16 = v15;
    swift_retain();
    sub_25B180D48(a2);
    sub_25B290340();
    v17[2] = MEMORY[0x263F8EE78];
    sub_25B2328C4((unint64_t *)&unk_26A4D9A00, MEMORY[0x263F8F030]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26A4D9AD0);
    sub_25B116394((unint64_t *)&qword_26A4D9AE0, (uint64_t *)&unk_26A4D9AD0);
    sub_25B290A00();
    MEMORY[0x26115F250](0, v10, v6, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, void))(v8 + 8))(v10, v17[0]);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_25B28F218(uint64_t a1)
{
  void (*v33)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v34;
  char v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void v48[2];
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  long long v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  long long v58;
  long long v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  void v67[3];
  uint64_t v68;
  uint64_t v69;
  _OWORD v70[3];
  uint64_t v71;

  uint64_t v2 = v1;
  uint64_t v4 = sub_25B290410();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (void *)((char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v8 = *(_OWORD *)(a1 + 16);
  v70[0] = *(_OWORD *)a1;
  v70[1] = v8;
  v70[2] = *(_OWORD *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v71 = v9;
  *(void *)&uint64_t v54 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 16);
  *((void *)&v54 + 1) = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 24);
  int v13 = *(unsigned __int8 *)(a1 + 32);
  long long v14 = *(void **)(v2 + 32);
  *uint64_t v7 = v14;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, *MEMORY[0x263F8F0E0], v4);
  id v15 = v14;
  LOBYTE(v14) = sub_25B290440();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_19:
    swift_once();
    goto LABEL_10;
  }
  uint64_t v4 = v2 + 40;
  swift_beginAccess();
  uint64_t v16 = *(void *)(v2 + 40);
  if (*(void *)(v16 + 16))
  {
    swift_bridgeObjectRetain();
    sub_25B180D48((uint64_t)v70);
    unint64_t v17 = sub_25B18AC48((uint64_t *)v70);
    if (v18)
    {
      sub_25B10FF48(*(void *)(v16 + 56) + 40 * v17, (uint64_t)&v58);
    }
    else
    {
      uint64_t v60 = 0;
      uint64_t v59 = 0u;
      uint64_t v58 = 0u;
    }
    swift_bridgeObjectRelease();
    sub_25B180DAC((uint64_t)v70);
  }
  else
  {
    uint64_t v60 = 0;
    uint64_t v59 = 0u;
    uint64_t v58 = 0u;
  }
  if (!*((void *)&v59 + 1)) {
    return sub_25B116DE0((uint64_t)&v58, &qword_26A4DB228);
  }
  uint64_t v52 = v10;
  uint64_t v53 = v9;
  sub_25B180BD4(&v58, (uint64_t)v67);
  if (qword_26A4D98C0 != -1) {
    goto LABEL_19;
  }
LABEL_10:
  uint64_t v19 = sub_25B290190();
  __swift_project_value_buffer(v19, (uint64_t)qword_26A4EB150);
  sub_25B10FF48((uint64_t)v67, (uint64_t)&v58);
  sub_25B180D48((uint64_t)v70);
  uint64_t v20 = sub_25B290160();
  os_log_type_t v21 = sub_25B2908A0();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v51 = v13;
  uint64_t v50 = v12;
  os_log_type_t v49 = v11;
  v48[1] = v4;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    unint64_t v57 = v24;
    *(_DWORD *)uint64_t v23 = 136446466;
    long long v25 = v70[0];
    swift_bridgeObjectRetain();
    uint64_t v65 = sub_25B288E98(v25, *((unint64_t *)&v25 + 1), &v57);
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    sub_25B180DAC((uint64_t)v70);
    *(_WORD *)(v23 + 12) = 2082;
    uint64_t v26 = *((void *)&v59 + 1);
    uint64_t v27 = v60;
    __swift_project_boxed_opaque_existential_1(&v58, *((uint64_t *)&v59 + 1));
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v27 + 16))(&v65, v26, v27);
    unint64_t v55 = v65;
    uint64_t v56 = v66;
    uint64_t v28 = ReplicationSchedule.description.getter();
    uint64_t v65 = sub_25B288E98(v28, v29, &v57);
    sub_25B2909C0();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
    _os_log_impl(&dword_25B107000, v20, v21, "Scheduled handshake task fired for %{public}s; schedule: %{public}s",
      (uint8_t *)v23,
      0x16u);
    swift_arrayDestroy();
    MEMORY[0x261160890](v24, -1, -1);
    MEMORY[0x261160890](v23, -1, -1);
  }
  else
  {
    sub_25B180DAC((uint64_t)v70);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v58);
  }

  uint64_t v31 = v68;
  uint64_t v32 = v69;
  __swift_project_boxed_opaque_existential_1(v67, v68);
  char v33 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v32 + 16);
  sub_25B180D48((uint64_t)v70);
  v33(&v58, v31, v32);
  uint64_t v34 = v58;
  uint64_t v35 = BYTE8(v58);
  sub_25B180D48((uint64_t)v70);
  os_log_type_t v36 = sub_25B290160();
  os_log_type_t v37 = sub_25B2908A0();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(void *)&uint64_t v58 = v39;
    *(_DWORD *)uint64_t v38 = 136446210;
    v48[0] = v2;
    uint64_t v40 = v34;
    uint64_t v42 = *((void *)&v70[0] + 1);
    uint64_t v41 = *(void *)&v70[0];
    swift_bridgeObjectRetain();
    uint64_t v65 = sub_25B288E98(v41, v42, (uint64_t *)&v58);
    sub_25B2909C0();
    uint64_t v34 = v40;
    swift_bridgeObjectRelease();
    sub_25B180DAC((uint64_t)v70);
    _os_log_impl(&dword_25B107000, v36, v37, "Scheduled handshake task fired for %{public}s; canceling", v38, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x261160890](v39, -1, -1);
    MEMORY[0x261160890](v38, -1, -1);
  }
  else
  {
    sub_25B180DAC((uint64_t)v70);
  }

  uint64_t v43 = v52;
  unint64_t v44 = v51;
  uint64_t v45 = v50;
  unint64_t v46 = v68;
  uint64_t v47 = v69;
  __swift_project_boxed_opaque_existential_1(v67, v68);
  (*(void (**)(uint64_t, uint64_t))(v47 + 32))(v46, v47);
  uint64_t v60 = 0;
  uint64_t v59 = 0u;
  uint64_t v58 = 0u;
  swift_beginAccess();
  sub_25B180D48((uint64_t)v70);
  sub_25B20F2DC((uint64_t)&v58, (uint64_t *)v70);
  swift_endAccess();
  uint64_t v58 = v54;
  *(void *)&uint64_t v59 = v49;
  *((void *)&v59 + 1) = v45;
  LOBYTE(v60) = v44;
  uint64_t v61 = v43;
  uint64_t v62 = v53;
  uint64_t v63 = v34;
  uint64_t v64 = v35;
  sub_25B290210();
  sub_25B180DAC((uint64_t)v70);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v67);
}

uint64_t sub_25B28F930()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 128, 7);
}

uint64_t sub_25B28F978()
{
  return sub_25B28EEFC(*(void *)(v0 + 64), v0 + 72);
}

uint64_t sub_25B28F990()
{
  return objectdestroy_5Tm_0(80);
}

uint64_t objectdestroy_5Tm_0(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v1, a1, 7);
}

uint64_t sub_25B28F9EC()
{
  long long v1 = *(_OWORD *)(v0 + 40);
  v3[0] = *(_OWORD *)(v0 + 24);
  v3[1] = v1;
  v3[2] = *(_OWORD *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 72);
  return sub_25B28F218((uint64_t)v3);
}

uint64_t sub_25B28FC60()
{
  return MEMORY[0x270EEDB50]();
}

uint64_t sub_25B28FC70()
{
  return MEMORY[0x270EEDB90]();
}

uint64_t sub_25B28FC80()
{
  return MEMORY[0x270EEDEE8]();
}

uint64_t sub_25B28FC90()
{
  return MEMORY[0x270EEDF30]();
}

uint64_t sub_25B28FCA0()
{
  return MEMORY[0x270EEDF38]();
}

uint64_t sub_25B28FCB0()
{
  return MEMORY[0x270EEE298]();
}

uint64_t sub_25B28FCC0()
{
  return MEMORY[0x270EEE378]();
}

uint64_t sub_25B28FCD0()
{
  return MEMORY[0x270EEE390]();
}

uint64_t sub_25B28FCE0()
{
  return MEMORY[0x270EEE3D0]();
}

uint64_t sub_25B28FCF0()
{
  return MEMORY[0x270EEE628]();
}

uint64_t sub_25B28FD00()
{
  return MEMORY[0x270EEE638]();
}

uint64_t sub_25B28FD10()
{
  return MEMORY[0x270EEE648]();
}

uint64_t sub_25B28FD20()
{
  return MEMORY[0x270EEE658]();
}

uint64_t sub_25B28FD30()
{
  return MEMORY[0x270EEE670]();
}

uint64_t sub_25B28FD40()
{
  return MEMORY[0x270EEE688]();
}

uint64_t sub_25B28FD50()
{
  return MEMORY[0x270EEE920]();
}

uint64_t sub_25B28FD60()
{
  return MEMORY[0x270EEE930]();
}

uint64_t sub_25B28FD70()
{
  return MEMORY[0x270EEE950]();
}

uint64_t sub_25B28FD80()
{
  return MEMORY[0x270EEEA60]();
}

uint64_t sub_25B28FD90()
{
  return MEMORY[0x270EEF238]();
}

uint64_t sub_25B28FDA0()
{
  return MEMORY[0x270EEF250]();
}

uint64_t sub_25B28FDB0()
{
  return MEMORY[0x270EEF268]();
}

uint64_t sub_25B28FDC0()
{
  return MEMORY[0x270EEF278]();
}

uint64_t sub_25B28FDD0()
{
  return MEMORY[0x270EEF288]();
}

uint64_t sub_25B28FDE0()
{
  return MEMORY[0x270EEF2A8]();
}

uint64_t sub_25B28FDF0()
{
  return MEMORY[0x270EEF2B8]();
}

uint64_t sub_25B28FE00()
{
  return MEMORY[0x270EEF7B8]();
}

uint64_t sub_25B28FE10()
{
  return MEMORY[0x270EEF800]();
}

uint64_t sub_25B28FE20()
{
  return MEMORY[0x270EEF840]();
}

uint64_t sub_25B28FE30()
{
  return MEMORY[0x270EEFC10]();
}

uint64_t sub_25B28FE40()
{
  return MEMORY[0x270EEFD28]();
}

uint64_t sub_25B28FE50()
{
  return MEMORY[0x270EEFE00]();
}

uint64_t sub_25B28FE60()
{
  return MEMORY[0x270EEFE20]();
}

uint64_t sub_25B28FE70()
{
  return MEMORY[0x270EEFE68]();
}

uint64_t sub_25B28FE80()
{
  return MEMORY[0x270EEFE80]();
}

uint64_t sub_25B28FE90()
{
  return MEMORY[0x270EEFF40]();
}

uint64_t sub_25B28FEA0()
{
  return MEMORY[0x270EEFF68]();
}

uint64_t sub_25B28FEB0()
{
  return MEMORY[0x270EEFFB0]();
}

uint64_t sub_25B28FEC0()
{
  return MEMORY[0x270EF0000]();
}

uint64_t sub_25B28FED0()
{
  return MEMORY[0x270EF0070]();
}

uint64_t sub_25B28FEE0()
{
  return MEMORY[0x270EF0090]();
}

uint64_t sub_25B28FEF0()
{
  return MEMORY[0x270EF00B0]();
}

uint64_t sub_25B28FF00()
{
  return MEMORY[0x270EF0120]();
}

uint64_t sub_25B28FF10()
{
  return MEMORY[0x270EF0178]();
}

uint64_t sub_25B28FF20()
{
  return MEMORY[0x270EF01C0]();
}

uint64_t sub_25B28FF30()
{
  return MEMORY[0x270EF01E0]();
}

uint64_t sub_25B28FF40()
{
  return MEMORY[0x270EF07A0]();
}

uint64_t sub_25B28FF50()
{
  return MEMORY[0x270EF07E0]();
}

uint64_t sub_25B28FF60()
{
  return MEMORY[0x270EF0898]();
}

uint64_t sub_25B28FF70()
{
  return MEMORY[0x270EF09A8]();
}

uint64_t sub_25B28FF80()
{
  return MEMORY[0x270EF09B8]();
}

uint64_t sub_25B28FF90()
{
  return MEMORY[0x270EF09C0]();
}

uint64_t sub_25B28FFA0()
{
  return MEMORY[0x270EF09E0]();
}

uint64_t sub_25B28FFB0()
{
  return MEMORY[0x270EF0AF8]();
}

uint64_t sub_25B28FFC0()
{
  return MEMORY[0x270EF0B88]();
}

uint64_t sub_25B28FFD0()
{
  return MEMORY[0x270EF0BB8]();
}

uint64_t sub_25B28FFE0()
{
  return MEMORY[0x270EF0BD8]();
}

uint64_t sub_25B28FFF0()
{
  return MEMORY[0x270EF0C30]();
}

uint64_t sub_25B290000()
{
  return MEMORY[0x270EF0C40]();
}

uint64_t sub_25B290010()
{
  return MEMORY[0x270EF0C58]();
}

uint64_t sub_25B290020()
{
  return MEMORY[0x270EF0C68]();
}

uint64_t sub_25B290030()
{
  return MEMORY[0x270EF0CB0]();
}

uint64_t sub_25B290040()
{
  return MEMORY[0x270EF0CB8]();
}

uint64_t sub_25B290050()
{
  return MEMORY[0x270EF0CE0]();
}

uint64_t sub_25B290060()
{
  return MEMORY[0x270EF0CF0]();
}

uint64_t sub_25B290070()
{
  return MEMORY[0x270EF0D08]();
}

uint64_t sub_25B290080()
{
  return MEMORY[0x270EF0D18]();
}

uint64_t sub_25B290090()
{
  return MEMORY[0x270F47988]();
}

uint64_t sub_25B2900C0()
{
  return MEMORY[0x270F479A8]();
}

uint64_t sub_25B2900D0()
{
  return MEMORY[0x270F479B0]();
}

uint64_t sub_25B2900E0()
{
  return MEMORY[0x270F479D0]();
}

uint64_t sub_25B2900F0()
{
  return MEMORY[0x270F479E0]();
}

uint64_t sub_25B290100()
{
  return MEMORY[0x270F479E8]();
}

uint64_t sub_25B290110()
{
  return MEMORY[0x270F479F0]();
}

uint64_t sub_25B290120()
{
  return MEMORY[0x270F47A60]();
}

uint64_t sub_25B290130()
{
  return MEMORY[0x270F47A80]();
}

uint64_t sub_25B290140()
{
  return MEMORY[0x270F47A90]();
}

uint64_t sub_25B290150()
{
  return MEMORY[0x270F47AB0]();
}

uint64_t sub_25B290160()
{
  return MEMORY[0x270FA2E00]();
}

uint64_t sub_25B290170()
{
  return MEMORY[0x270FA2E08]();
}

uint64_t sub_25B290180()
{
  return MEMORY[0x270FA2E18]();
}

uint64_t sub_25B290190()
{
  return MEMORY[0x270FA2E20]();
}

uint64_t sub_25B2901A0()
{
  return MEMORY[0x270FA1A18]();
}

uint64_t sub_25B2901B0()
{
  return MEMORY[0x270FA2C18]();
}

uint64_t sub_25B2901C0()
{
  return MEMORY[0x270FA2C20]();
}

uint64_t sub_25B2901D0()
{
  return MEMORY[0x270FA2C30]();
}

uint64_t sub_25B2901E0()
{
  return MEMORY[0x270FA08E0]();
}

uint64_t sub_25B2901F0()
{
  return MEMORY[0x270EE3B98]();
}

uint64_t sub_25B290200()
{
  return MEMORY[0x270EE3BA0]();
}

uint64_t sub_25B290210()
{
  return MEMORY[0x270EE3C50]();
}

uint64_t sub_25B290220()
{
  return MEMORY[0x270EE3C70]();
}

uint64_t sub_25B290230()
{
  return MEMORY[0x270EE3D90]();
}

uint64_t sub_25B290240()
{
  return MEMORY[0x270EE3E08]();
}

uint64_t sub_25B290250()
{
  return MEMORY[0x270EE3EC8]();
}

uint64_t sub_25B290260()
{
  return MEMORY[0x270EE3F78]();
}

uint64_t sub_25B290270()
{
  return MEMORY[0x270EE4008]();
}

uint64_t sub_25B290280()
{
  return MEMORY[0x270EF7318]();
}

uint64_t sub_25B290290()
{
  return MEMORY[0x270EF7340]();
}

uint64_t sub_25B2902A0()
{
  return MEMORY[0x270EF7480]();
}

uint64_t sub_25B2902B0()
{
  return MEMORY[0x270EF7488]();
}

uint64_t sub_25B2902C0()
{
  return MEMORY[0x270EF7490]();
}

uint64_t sub_25B2902D0()
{
  return MEMORY[0x270EF7678]();
}

uint64_t sub_25B2902E0()
{
  return MEMORY[0x270EF7680]();
}

uint64_t sub_25B2902F0()
{
  return MEMORY[0x270EF7688]();
}

uint64_t sub_25B290300()
{
  return MEMORY[0x270EF77E0]();
}

uint64_t sub_25B290310()
{
  return MEMORY[0x270FA0970]();
}

uint64_t sub_25B290320()
{
  return MEMORY[0x270FA09A8]();
}

uint64_t sub_25B290330()
{
  return MEMORY[0x270FA09D8]();
}

uint64_t sub_25B290340()
{
  return MEMORY[0x270FA09E8]();
}

uint64_t sub_25B290350()
{
  return MEMORY[0x270FA0A18]();
}

uint64_t sub_25B290360()
{
  return MEMORY[0x270FA0A48]();
}

uint64_t sub_25B290370()
{
  return MEMORY[0x270FA0A58]();
}

uint64_t sub_25B290380()
{
  return MEMORY[0x270FA0A60]();
}

uint64_t sub_25B290390()
{
  return MEMORY[0x270FA0A68]();
}

uint64_t sub_25B2903A0()
{
  return MEMORY[0x270FA0A70]();
}

uint64_t sub_25B2903B0()
{
  return MEMORY[0x270FA0A78]();
}

uint64_t sub_25B2903C0()
{
  return MEMORY[0x270FA0AC0]();
}

uint64_t sub_25B2903D0()
{
  return MEMORY[0x270FA0AD0]();
}

uint64_t sub_25B2903E0()
{
  return MEMORY[0x270FA0B00]();
}

uint64_t sub_25B2903F0()
{
  return MEMORY[0x270FA0B08]();
}

uint64_t sub_25B290400()
{
  return MEMORY[0x270FA0B20]();
}

uint64_t sub_25B290410()
{
  return MEMORY[0x270FA0BA8]();
}

uint64_t sub_25B290420()
{
  return MEMORY[0x270FA0BB0]();
}

uint64_t sub_25B290430()
{
  return MEMORY[0x270FA0BD0]();
}

uint64_t sub_25B290440()
{
  return MEMORY[0x270FA0BF0]();
}

uint64_t sub_25B290450()
{
  return MEMORY[0x270EEAA78]();
}

uint64_t sub_25B290460()
{
  return MEMORY[0x270EEAAA0]();
}

uint64_t sub_25B290470()
{
  return MEMORY[0x270EEAAA8]();
}

uint64_t sub_25B290480()
{
  return MEMORY[0x270EEB078]();
}

uint64_t _s16ReplicatorEngine13UniformHasherVACycfC_0()
{
  return MEMORY[0x270EEB088]();
}

uint64_t sub_25B2904A0()
{
  return MEMORY[0x270EEB090]();
}

uint64_t sub_25B2904B0()
{
  return MEMORY[0x270EF1818]();
}

uint64_t sub_25B2904C0()
{
  return MEMORY[0x270EF1820]();
}

uint64_t sub_25B2904D0()
{
  return MEMORY[0x270EF1840]();
}

uint64_t sub_25B2904E0()
{
  return MEMORY[0x270F9D060]();
}

uint64_t sub_25B2904F0()
{
  return MEMORY[0x270F9D0B8]();
}

uint64_t sub_25B290500()
{
  return MEMORY[0x270F9D1D0]();
}

uint64_t sub_25B290510()
{
  return MEMORY[0x270F9D208]();
}

uint64_t sub_25B290520()
{
  return MEMORY[0x270F9D220]();
}

uint64_t sub_25B290530()
{
  return MEMORY[0x270F9D318]();
}

uint64_t sub_25B290540()
{
  return MEMORY[0x270F9D320]();
}

uint64_t sub_25B290550()
{
  return MEMORY[0x270F9D478]();
}

uint64_t sub_25B290560()
{
  return MEMORY[0x270F9D488]();
}

uint64_t sub_25B290570()
{
  return MEMORY[0x270F9D490]();
}

uint64_t sub_25B290580()
{
  return MEMORY[0x270F9D598]();
}

uint64_t sub_25B290590()
{
  return MEMORY[0x270EF19B0]();
}

uint64_t sub_25B2905A0()
{
  return MEMORY[0x270EF19C8]();
}

uint64_t sub_25B2905B0()
{
  return MEMORY[0x270EF19E0]();
}

uint64_t sub_25B2905C0()
{
  return MEMORY[0x270EF19E8]();
}

uint64_t sub_25B2905D0()
{
  return MEMORY[0x270EF1AA8]();
}

uint64_t sub_25B2905E0()
{
  return MEMORY[0x270EF1AC8]();
}

uint64_t sub_25B2905F0()
{
  return MEMORY[0x270EF1AD0]();
}

uint64_t sub_25B290600()
{
  return MEMORY[0x270F9D5E0]();
}

uint64_t sub_25B290610()
{
  return MEMORY[0x270F9D620]();
}

uint64_t sub_25B290620()
{
  return MEMORY[0x270F9D648]();
}

uint64_t sub_25B290630()
{
  return MEMORY[0x270F9D708]();
}

uint64_t sub_25B290640()
{
  return MEMORY[0x270F9D740]();
}

uint64_t sub_25B290650()
{
  return MEMORY[0x270F9D798]();
}

uint64_t sub_25B290660()
{
  return MEMORY[0x270F9D7C0]();
}

uint64_t sub_25B290670()
{
  return MEMORY[0x270F9D7E0]();
}

uint64_t sub_25B290690()
{
  return MEMORY[0x270F9D8F8]();
}

uint64_t sub_25B2906A0()
{
  return MEMORY[0x270F9D938]();
}

uint64_t sub_25B2906B0()
{
  return MEMORY[0x270F9D9C0]();
}

uint64_t sub_25B2906C0()
{
  return MEMORY[0x270F9D9D0]();
}

uint64_t sub_25B2906D0()
{
  return MEMORY[0x270F9DAC0]();
}

uint64_t sub_25B2906E0()
{
  return MEMORY[0x270F9DAD8]();
}

uint64_t sub_25B2906F0()
{
  return MEMORY[0x270F9DAE0]();
}

uint64_t sub_25B290700()
{
  return MEMORY[0x270F9DB40]();
}

uint64_t sub_25B290710()
{
  return MEMORY[0x270F9DB58]();
}

uint64_t sub_25B290720()
{
  return MEMORY[0x270F9DB60]();
}

uint64_t sub_25B290730()
{
  return MEMORY[0x270EF1BB8]();
}

uint64_t sub_25B290740()
{
  return MEMORY[0x270F9DBB0]();
}

uint64_t sub_25B290750()
{
  return MEMORY[0x270F9DC20]();
}

uint64_t sub_25B290760()
{
  return MEMORY[0x270EF1BD8]();
}

uint64_t sub_25B290770()
{
  return MEMORY[0x270FA1DF8]();
}

uint64_t sub_25B290790()
{
  return MEMORY[0x270FA1F08]();
}

uint64_t sub_25B2907A0()
{
  return MEMORY[0x270FA1F10]();
}

uint64_t sub_25B2907B0()
{
  return MEMORY[0x270FA1FB0]();
}

uint64_t sub_25B2907C0()
{
  return MEMORY[0x270EF1C18]();
}

uint64_t sub_25B2907D0()
{
  return MEMORY[0x270F9DD60]();
}

uint64_t sub_25B2907E0()
{
  return MEMORY[0x270F9DDA0]();
}

uint64_t sub_25B2907F0()
{
  return MEMORY[0x270F9DDF0]();
}

uint64_t sub_25B290800()
{
  return MEMORY[0x270EF1C48]();
}

uint64_t sub_25B290810()
{
  return MEMORY[0x270EF1C98]();
}

uint64_t sub_25B290820()
{
  return MEMORY[0x270F9DEB0]();
}

uint64_t sub_25B290830()
{
  return MEMORY[0x270F9DEF0]();
}

uint64_t sub_25B290840()
{
  return MEMORY[0x270FA2B98]();
}

uint64_t sub_25B290850()
{
  return MEMORY[0x270EF1E60]();
}

uint64_t sub_25B290860()
{
  return MEMORY[0x270FA2E40]();
}

uint64_t sub_25B290870()
{
  return MEMORY[0x270FA2E58]();
}

uint64_t sub_25B290880()
{
  return MEMORY[0x270FA2E60]();
}

uint64_t sub_25B290890()
{
  return MEMORY[0x270FA2E70]();
}

uint64_t sub_25B2908A0()
{
  return MEMORY[0x270FA2E80]();
}

uint64_t sub_25B2908B0()
{
  return MEMORY[0x270FA0C20]();
}

uint64_t sub_25B2908C0()
{
  return MEMORY[0x270FA0C50]();
}

uint64_t sub_25B2908D0()
{
  return MEMORY[0x270FA0C78]();
}

uint64_t sub_25B2908E0()
{
  return MEMORY[0x270FA0CD0]();
}

uint64_t sub_25B2908F0()
{
  return MEMORY[0x270FA0D50]();
}

uint64_t sub_25B290900()
{
  return MEMORY[0x270FA0D88]();
}

uint64_t sub_25B290910()
{
  return MEMORY[0x270FA0DA0]();
}

uint64_t sub_25B290920()
{
  return MEMORY[0x270FA0DB8]();
}

uint64_t sub_25B290930()
{
  return MEMORY[0x270FA0DE8]();
}

uint64_t sub_25B290940()
{
  return MEMORY[0x270FA0E28]();
}

uint64_t sub_25B290950()
{
  return MEMORY[0x270FA0E38]();
}

uint64_t sub_25B290960()
{
  return MEMORY[0x270FA0EA0]();
}

uint64_t sub_25B290970()
{
  return MEMORY[0x270FA0EC0]();
}

uint64_t sub_25B290980()
{
  return MEMORY[0x270FA0EC8]();
}

uint64_t sub_25B290990()
{
  return MEMORY[0x270FA0F50]();
}

uint64_t sub_25B2909A0()
{
  return MEMORY[0x270EF21A8]();
}

uint64_t sub_25B2909B0()
{
  return MEMORY[0x270F9E3C0]();
}

uint64_t sub_25B2909C0()
{
  return MEMORY[0x270F9E530]();
}

uint64_t sub_25B2909D0()
{
  return MEMORY[0x270F9E560]();
}

uint64_t sub_25B2909E0()
{
  return MEMORY[0x270F9E670]();
}

uint64_t sub_25B290A00()
{
  return MEMORY[0x270F9E7E8]();
}

uint64_t sub_25B290A10()
{
  return MEMORY[0x270F9E7F0]();
}

uint64_t sub_25B290A20()
{
  return MEMORY[0x270F9E7F8]();
}

uint64_t sub_25B290A30()
{
  return MEMORY[0x270F9E800]();
}

uint64_t sub_25B290A40()
{
  return MEMORY[0x270F9E8C0]();
}

uint64_t sub_25B290A50()
{
  return MEMORY[0x270F9E8C8]();
}

uint64_t sub_25B290A60()
{
  return MEMORY[0x270F9E8E8]();
}

uint64_t sub_25B290A70()
{
  return MEMORY[0x270F9E958]();
}

uint64_t sub_25B290A80()
{
  return MEMORY[0x270F9E960]();
}

uint64_t sub_25B290A90()
{
  return MEMORY[0x270F9E970]();
}

uint64_t sub_25B290AA0()
{
  return MEMORY[0x270F9E9A8]();
}

uint64_t sub_25B290AB0()
{
  return MEMORY[0x270F9E9B0]();
}

uint64_t sub_25B290AC0()
{
  return MEMORY[0x270F9EA40]();
}

uint64_t sub_25B290AD0()
{
  return MEMORY[0x270F9EA78]();
}

uint64_t sub_25B290AE0()
{
  return MEMORY[0x270F9EA90]();
}

uint64_t sub_25B290AF0()
{
  return MEMORY[0x270F9EA98]();
}

uint64_t sub_25B290B00()
{
  return MEMORY[0x270F9EAA0]();
}

uint64_t sub_25B290B10()
{
  return MEMORY[0x270F9EAB0]();
}

uint64_t sub_25B290B20()
{
  return MEMORY[0x270F9EAB8]();
}

uint64_t sub_25B290B30()
{
  return MEMORY[0x270F9EB28]();
}

uint64_t sub_25B290B40()
{
  return MEMORY[0x270F9EB98]();
}

uint64_t sub_25B290B50()
{
  return MEMORY[0x270F9EBC0]();
}

uint64_t sub_25B290B60()
{
  return MEMORY[0x270F9EBE0]();
}

uint64_t sub_25B290B70()
{
  return MEMORY[0x270F9EC08]();
}

uint64_t sub_25B290B80()
{
  return MEMORY[0x270F9EC10]();
}

uint64_t sub_25B290B90()
{
  return MEMORY[0x270F9ED70]();
}

uint64_t sub_25B290BA0()
{
  return MEMORY[0x270F9EDF8]();
}

uint64_t sub_25B290BB0()
{
  return MEMORY[0x270F9EFE8]();
}

uint64_t sub_25B290BC0()
{
  return MEMORY[0x270F9EFF0]();
}

uint64_t sub_25B290BD0()
{
  return MEMORY[0x270F9F080]();
}

uint64_t sub_25B290BE0()
{
  return MEMORY[0x270F9F098]();
}

uint64_t sub_25B290BF0()
{
  return MEMORY[0x270F9F0A0]();
}

uint64_t sub_25B290C00()
{
  return MEMORY[0x270F9F0B0]();
}

uint64_t sub_25B290C10()
{
  return MEMORY[0x270F9F0C0]();
}

uint64_t sub_25B290C30()
{
  return MEMORY[0x270F9F230]();
}

uint64_t sub_25B290C40()
{
  return MEMORY[0x270F9F250]();
}

uint64_t sub_25B290C50()
{
  return MEMORY[0x270F9F258]();
}

uint64_t sub_25B290C60()
{
  return MEMORY[0x270F9F270]();
}

uint64_t sub_25B290C70()
{
  return MEMORY[0x270F9F278]();
}

uint64_t sub_25B290C80()
{
  return MEMORY[0x270F9F2A0]();
}

uint64_t sub_25B290C90()
{
  return MEMORY[0x270F9F2E0]();
}

uint64_t sub_25B290CA0()
{
  return MEMORY[0x270F9F2E8]();
}

uint64_t sub_25B290CB0()
{
  return MEMORY[0x270F9F2F0]();
}

uint64_t sub_25B290CC0()
{
  return MEMORY[0x270F9F318]();
}

uint64_t sub_25B290CD0()
{
  return MEMORY[0x270F9F350]();
}

uint64_t sub_25B290CE0()
{
  return MEMORY[0x270F9F358]();
}

uint64_t sub_25B290CF0()
{
  return MEMORY[0x270F9F360]();
}

uint64_t sub_25B290D00()
{
  return MEMORY[0x270F9F380]();
}

uint64_t sub_25B290D10()
{
  return MEMORY[0x270F9F390]();
}

uint64_t sub_25B290D20()
{
  return MEMORY[0x270F9F3E0]();
}

uint64_t sub_25B290D30()
{
  return MEMORY[0x270F9F418]();
}

uint64_t sub_25B290D40()
{
  return MEMORY[0x270F9F428]();
}

uint64_t sub_25B290D50()
{
  return MEMORY[0x270F9F430]();
}

uint64_t sub_25B290D60()
{
  return MEMORY[0x270F9F458]();
}

uint64_t sub_25B290D70()
{
  return MEMORY[0x270F9F490]();
}

uint64_t sub_25B290D80()
{
  return MEMORY[0x270F9F498]();
}

uint64_t sub_25B290D90()
{
  return MEMORY[0x270F9F4B0]();
}

uint64_t sub_25B290DA0()
{
  return MEMORY[0x270F9F4C8]();
}

uint64_t sub_25B290DB0()
{
  return MEMORY[0x270F9F4E0]();
}

uint64_t sub_25B290DC0()
{
  return MEMORY[0x270F9F5B0]();
}

uint64_t sub_25B290DD0()
{
  return MEMORY[0x270F9F5B8]();
}

uint64_t sub_25B290DE0()
{
  return MEMORY[0x270F9F5C0]();
}

uint64_t sub_25B290DF0()
{
  return MEMORY[0x270F9F5C8]();
}

uint64_t sub_25B290E00()
{
  return MEMORY[0x270F9F5D0]();
}

uint64_t sub_25B290E10()
{
  return MEMORY[0x270F9F5D8]();
}

uint64_t sub_25B290E20()
{
  return MEMORY[0x270F9F5E0]();
}

uint64_t sub_25B290E30()
{
  return MEMORY[0x270F9F5E8]();
}

uint64_t sub_25B290E40()
{
  return MEMORY[0x270F9F5F0]();
}

uint64_t sub_25B290E50()
{
  return MEMORY[0x270F9F5F8]();
}

uint64_t sub_25B290E60()
{
  return MEMORY[0x270F9F688]();
}

uint64_t sub_25B290E70()
{
  return MEMORY[0x270F9F690]();
}

uint64_t sub_25B290E80()
{
  return MEMORY[0x270F9F698]();
}

uint64_t sub_25B290E90()
{
  return MEMORY[0x270F9F6A0]();
}

uint64_t sub_25B290EA0()
{
  return MEMORY[0x270F9F6A8]();
}

uint64_t sub_25B290EB0()
{
  return MEMORY[0x270F9F6B0]();
}

uint64_t sub_25B290EC0()
{
  return MEMORY[0x270F9F6B8]();
}

uint64_t sub_25B290ED0()
{
  return MEMORY[0x270F9F6C0]();
}

uint64_t sub_25B290EE0()
{
  return MEMORY[0x270F9F6C8]();
}

uint64_t sub_25B290EF0()
{
  return MEMORY[0x270F9F6D0]();
}

uint64_t sub_25B290F00()
{
  return MEMORY[0x270F9F6D8]();
}

uint64_t sub_25B290F10()
{
  return MEMORY[0x270F9F6E0]();
}

uint64_t sub_25B290F20()
{
  return MEMORY[0x270F9F6E8]();
}

uint64_t sub_25B290F30()
{
  return MEMORY[0x270F9F6F0]();
}

uint64_t sub_25B290F40()
{
  return MEMORY[0x270F9F6F8]();
}

uint64_t sub_25B290F50()
{
  return MEMORY[0x270F9F700]();
}

uint64_t sub_25B290F60()
{
  return MEMORY[0x270F9F708]();
}

uint64_t sub_25B290F70()
{
  return MEMORY[0x270F9F710]();
}

uint64_t sub_25B290F80()
{
  return MEMORY[0x270F9F718]();
}

uint64_t sub_25B290F90()
{
  return MEMORY[0x270F9F720]();
}

uint64_t sub_25B290FA0()
{
  return MEMORY[0x270F9F7C0]();
}

uint64_t sub_25B290FB0()
{
  return MEMORY[0x270F9F7D0]();
}

uint64_t sub_25B290FC0()
{
  return MEMORY[0x270F9F860]();
}

uint64_t sub_25B290FD0()
{
  return MEMORY[0x270F9F868]();
}

uint64_t sub_25B290FE0()
{
  return MEMORY[0x270F9F8F8]();
}

uint64_t sub_25B290FF0()
{
  return MEMORY[0x270F9F900]();
}

uint64_t sub_25B291000()
{
  return MEMORY[0x270F9F960]();
}

uint64_t sub_25B291010()
{
  return MEMORY[0x270F9F968]();
}

uint64_t sub_25B291020()
{
  return MEMORY[0x270F9F970]();
}

uint64_t sub_25B291030()
{
  return MEMORY[0x270F9F978]();
}

uint64_t sub_25B291040()
{
  return MEMORY[0x270F9F980]();
}

uint64_t sub_25B291050()
{
  return MEMORY[0x270F9F988]();
}

uint64_t sub_25B291060()
{
  return MEMORY[0x270F9F990]();
}

uint64_t sub_25B291070()
{
  return MEMORY[0x270F9F998]();
}

uint64_t sub_25B291080()
{
  return MEMORY[0x270F9F9A0]();
}

uint64_t sub_25B291090()
{
  return MEMORY[0x270F9F9A8]();
}

uint64_t sub_25B2910A0()
{
  return MEMORY[0x270F9F9B0]();
}

uint64_t sub_25B2910B0()
{
  return MEMORY[0x270F9F9B8]();
}

uint64_t sub_25B2910C0()
{
  return MEMORY[0x270F9F9C0]();
}

uint64_t sub_25B2910D0()
{
  return MEMORY[0x270F9F9C8]();
}

uint64_t sub_25B2910E0()
{
  return MEMORY[0x270F9F9D0]();
}

uint64_t sub_25B2910F0()
{
  return MEMORY[0x270F9F9D8]();
}

uint64_t sub_25B291100()
{
  return MEMORY[0x270F9F9E0]();
}

uint64_t sub_25B291110()
{
  return MEMORY[0x270F9F9E8]();
}

uint64_t sub_25B291120()
{
  return MEMORY[0x270F9F9F0]();
}

uint64_t sub_25B291130()
{
  return MEMORY[0x270F9F9F8]();
}

uint64_t sub_25B291140()
{
  return MEMORY[0x270F9FA00]();
}

uint64_t sub_25B291150()
{
  return MEMORY[0x270F9FA08]();
}

uint64_t sub_25B291160()
{
  return MEMORY[0x270F9FA10]();
}

uint64_t sub_25B291170()
{
  return MEMORY[0x270F9FA88]();
}

uint64_t sub_25B291180()
{
  return MEMORY[0x270F9FB10]();
}

uint64_t sub_25B291190()
{
  return MEMORY[0x270F9FB18]();
}

uint64_t sub_25B2911A0()
{
  return MEMORY[0x270EF2680]();
}

uint64_t sub_25B2911B0()
{
  return MEMORY[0x270F9FB30]();
}

uint64_t sub_25B2911C0()
{
  return MEMORY[0x270F9FB38]();
}

uint64_t sub_25B2911D0()
{
  return MEMORY[0x270F9FB40]();
}

uint64_t sub_25B2911E0()
{
  return MEMORY[0x270F9FB48]();
}

uint64_t sub_25B2911F0()
{
  return MEMORY[0x270EF2710]();
}

uint64_t sub_25B291200()
{
  return MEMORY[0x270F9FC40]();
}

uint64_t sub_25B291210()
{
  return MEMORY[0x270F9FC48]();
}

uint64_t sub_25B291220()
{
  return MEMORY[0x270F9FC60]();
}

uint64_t sub_25B291230()
{
  return MEMORY[0x270F9FC68]();
}

uint64_t sub_25B291240()
{
  return MEMORY[0x270F9FC78]();
}

uint64_t sub_25B291250()
{
  return MEMORY[0x270F9FC80]();
}

uint64_t sub_25B291260()
{
  return MEMORY[0x270F9FC90]();
}

uint64_t sub_25B291270()
{
  return MEMORY[0x270F9FCF8]();
}

uint64_t sub_25B291280()
{
  return MEMORY[0x270F9FD70]();
}

uint64_t sub_25B291290()
{
  return MEMORY[0x270F9FD98]();
}

uint64_t sub_25B2912A0()
{
  return MEMORY[0x270FA0090]();
}

uint64_t sub_25B2912B0()
{
  return MEMORY[0x270FA0098]();
}

uint64_t sub_25B2912C0()
{
  return MEMORY[0x270FA00A0]();
}

uint64_t sub_25B2912D0()
{
  return MEMORY[0x270FA00A8]();
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

uint64_t IDSCopyIDForDevice()
{
  return MEMORY[0x270F3C978]();
}

uint64_t IDSCopyLocalDeviceUniqueID()
{
  return MEMORY[0x270F3C9A8]();
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x270F95F98]();
}

uint64_t MGGetFloat32Answer()
{
  return MEMORY[0x270F95FD0]();
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

uint64_t OPACKDecodeData()
{
  return MEMORY[0x270F24588]();
}

uint64_t OPACKEncoderCreateData()
{
  return MEMORY[0x270F24598]();
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x270ED7CD8](aBlock);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

{
  return MEMORY[0x270F9A3C0]();
}

{
  return MEMORY[0x270F9A3C8]();
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _swift_stdlib_bridgeErrorToNSError()
{
  return MEMORY[0x270FA0158]();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return MEMORY[0x270FA0160]();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void free(void *a1)
{
}

ssize_t getxattr(const char *path, const char *name, void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x270ED9DC0](path, name, value, size, *(void *)&position, *(void *)&options);
}

ssize_t listxattr(const char *path, char *namebuff, size_t size, int options)
{
  return MEMORY[0x270EDA080](path, namebuff, size, *(void *)&options);
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x270EDA328](__size);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x270EDA378](ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x270EDA738](*(void *)&token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x270EDA770](name, out_token, queue, handler);
}

nw_advertise_descriptor_t nw_advertise_descriptor_create_application_service(const char *application_service_name)
{
  return (nw_advertise_descriptor_t)MEMORY[0x270EF7A38](application_service_name);
}

nw_browse_descriptor_t nw_browse_descriptor_create_application_service(const char *application_service_name)
{
  return (nw_browse_descriptor_t)MEMORY[0x270EF7AA0](application_service_name);
}

uint64_t nw_browse_descriptor_set_browse_scope()
{
  return MEMORY[0x270EF7AB0]();
}

uint64_t nw_browse_descriptor_set_device_types()
{
  return MEMORY[0x270EF7AB8]();
}

nw_endpoint_t nw_browse_result_copy_endpoint(nw_browse_result_t result)
{
  return (nw_endpoint_t)MEMORY[0x270EF7AC8](result);
}

nw_browse_result_change_t nw_browse_result_get_changes(nw_browse_result_t old_result, nw_browse_result_t new_result)
{
  return MEMORY[0x270EF7AE0](old_result, new_result);
}

void nw_browser_cancel(nw_browser_t browser)
{
}

nw_browser_t nw_browser_create(nw_browse_descriptor_t descriptor, nw_parameters_t parameters)
{
  return (nw_browser_t)MEMORY[0x270EF7AF8](descriptor, parameters);
}

void nw_browser_set_browse_results_changed_handler(nw_browser_t browser, nw_browser_browse_results_changed_handler_t handler)
{
}

void nw_browser_set_queue(nw_browser_t browser, dispatch_queue_t queue)
{
}

void nw_browser_set_state_changed_handler(nw_browser_t browser, nw_browser_state_changed_handler_t state_changed_handler)
{
}

void nw_browser_start(nw_browser_t browser)
{
}

void nw_connection_cancel(nw_connection_t connection)
{
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  return (nw_endpoint_t)MEMORY[0x270EF7B80](connection);
}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  return (nw_protocol_metadata_t)MEMORY[0x270EF7B90](connection, definition);
}

nw_connection_t nw_connection_create(nw_endpoint_t endpoint, nw_parameters_t parameters)
{
  return (nw_connection_t)MEMORY[0x270EF7BA8](endpoint, parameters);
}

uint64_t nw_connection_get_id()
{
  return MEMORY[0x270EF7BF8]();
}

void nw_connection_receive(nw_connection_t connection, uint32_t minimum_incomplete_length, uint32_t maximum_length, nw_connection_receive_completion_t completion)
{
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
}

void nw_connection_start(nw_connection_t connection)
{
}

uint64_t nw_endpoint_create_application_service()
{
  return MEMORY[0x270EF7E90]();
}

uint64_t nw_endpoint_get_device_id()
{
  return MEMORY[0x270EF7F18]();
}

uint64_t nw_endpoint_get_device_name()
{
  return MEMORY[0x270EF7F20]();
}

uint64_t nw_endpoint_set_agent_identifier()
{
  return MEMORY[0x270EF7F98]();
}

nw_listener_t nw_listener_create(nw_parameters_t parameters)
{
  return (nw_listener_t)MEMORY[0x270EF8410](parameters);
}

void nw_listener_set_advertise_descriptor(nw_listener_t listener, nw_advertise_descriptor_t advertise_descriptor)
{
}

uint64_t nw_listener_set_event_handler()
{
  return MEMORY[0x270EF8448]();
}

void nw_listener_set_new_connection_handler(nw_listener_t listener, nw_listener_new_connection_handler_t handler)
{
}

void nw_listener_set_queue(nw_listener_t listener, dispatch_queue_t queue)
{
}

void nw_listener_start(nw_listener_t listener)
{
}

nw_parameters_t nw_parameters_create_application_service(void)
{
  return (nw_parameters_t)MEMORY[0x270EF8528]();
}

uint64_t nw_parameters_create_application_service_quic()
{
  return MEMORY[0x270EF8530]();
}

uint64_t nw_parameters_set_application_id()
{
  return MEMORY[0x270EF85F8]();
}

uint64_t nw_parameters_set_attach_protocol_listener()
{
  return MEMORY[0x270EF8600]();
}

uint64_t nw_parameters_set_include_ble()
{
  return MEMORY[0x270EF8650]();
}

void nw_parameters_set_include_peer_to_peer(nw_parameters_t parameters, BOOL include_peer_to_peer)
{
}

uint64_t nw_parameters_set_include_screen_off_devices()
{
  return MEMORY[0x270EF8660]();
}

void nw_parameters_set_local_only(nw_parameters_t parameters, BOOL local_only)
{
}

void nw_parameters_set_multipath_service(nw_parameters_t parameters, nw_multipath_service_t multipath_service)
{
}

uint64_t nw_parameters_set_preferred_interface_subtypes()
{
  return MEMORY[0x270EF86E8]();
}

uint64_t nw_parameters_set_preferred_netagent_classes()
{
  return MEMORY[0x270EF86F0]();
}

void nw_parameters_set_prohibit_constrained(nw_parameters_t parameters, BOOL prohibit_constrained)
{
}

void nw_parameters_set_prohibit_expensive(nw_parameters_t parameters, BOOL prohibit_expensive)
{
}

uint64_t nw_parameters_set_required_netagent_classes()
{
  return MEMORY[0x270EF8728]();
}

uint64_t nw_parameters_set_traffic_class()
{
  return MEMORY[0x270EF8770]();
}

nw_protocol_definition_t nw_protocol_copy_quic_definition(void)
{
  return (nw_protocol_definition_t)MEMORY[0x270EF8B58]();
}

BOOL nw_protocol_metadata_is_quic(nw_protocol_metadata_t metadata)
{
  return MEMORY[0x270EF8F40](metadata);
}

uint64_t nw_quic_set_keepalive()
{
  return MEMORY[0x270EF9320]();
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

id objc_allocWithZone(Class a1)
{
  return (id)MEMORY[0x270F9A538](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x270EDA9A0](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x270EDAA90]();
}

void os_unfair_lock_assert_owner(const os_unfair_lock *lock)
{
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

int removexattr(const char *path, const char *name, int options)
{
  return MEMORY[0x270EDB218](path, name, *(void *)&options);
}

int setxattr(const char *path, const char *name, const void *value, size_t size, u_int32_t position, int options)
{
  return MEMORY[0x270EDB460](path, name, value, size, *(void *)&position, *(void *)&options);
}

uint64_t swift_allocBox()
{
  return MEMORY[0x270FA0180]();
}

uint64_t swift_allocError()
{
  return MEMORY[0x270FA0190]();
}

uint64_t swift_allocObject()
{
  return MEMORY[0x270FA0198]();
}

uint64_t swift_allocateGenericClassMetadata()
{
  return MEMORY[0x270FA01A0]();
}

uint64_t swift_arrayDestroy()
{
  return MEMORY[0x270FA01C0]();
}

uint64_t swift_arrayInitWithCopy()
{
  return MEMORY[0x270FA01C8]();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return MEMORY[0x270FA01D0]();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return MEMORY[0x270FA01D8]();
}

uint64_t swift_beginAccess()
{
  return MEMORY[0x270FA01E0]();
}

uint64_t swift_bridgeObjectRelease()
{
  return MEMORY[0x270FA01E8]();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return MEMORY[0x270FA01F0]();
}

uint64_t swift_bridgeObjectRetain()
{
  return MEMORY[0x270FA01F8]();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return MEMORY[0x270FA0200]();
}

uint64_t swift_checkMetadataState()
{
  return MEMORY[0x270FA0208]();
}

uint64_t swift_deallocClassInstance()
{
  return MEMORY[0x270FA0228]();
}

uint64_t swift_dynamicCast()
{
  return MEMORY[0x270FA0260]();
}

uint64_t swift_endAccess()
{
  return MEMORY[0x270FA02C0]();
}

uint64_t swift_errorRelease()
{
  return MEMORY[0x270FA02C8]();
}

uint64_t swift_errorRetain()
{
  return MEMORY[0x270FA02D0]();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return MEMORY[0x270FA0300]();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return MEMORY[0x270FA0338]();
}

uint64_t swift_getErrorValue()
{
  return MEMORY[0x270FA0348]();
}

uint64_t swift_getForeignTypeMetadata()
{
  return MEMORY[0x270FA0370]();
}

uint64_t swift_getGenericMetadata()
{
  return MEMORY[0x270FA03B0]();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return MEMORY[0x270FA03D0]();
}

uint64_t swift_getObjCClassMetadata()
{
  return MEMORY[0x270FA03E0]();
}

uint64_t swift_getObjectType()
{
  return MEMORY[0x270FA03E8]();
}

uint64_t swift_getSingletonMetadata()
{
  return MEMORY[0x270FA0400]();
}

uint64_t swift_getTupleTypeLayout2()
{
  return MEMORY[0x270FA0410]();
}

uint64_t swift_getTupleTypeLayout3()
{
  return MEMORY[0x270FA0418]();
}

uint64_t swift_getTupleTypeMetadata2()
{
  return MEMORY[0x270FA0428]();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return MEMORY[0x270FA0440]();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return MEMORY[0x270FA0448]();
}

uint64_t swift_getWitnessTable()
{
  return MEMORY[0x270FA0450]();
}

uint64_t swift_initClassMetadata2()
{
  return MEMORY[0x270FA0458]();
}

uint64_t swift_initEnumMetadataMultiPayload()
{
  return MEMORY[0x270FA0460]();
}

uint64_t swift_initEnumMetadataSinglePayload()
{
  return MEMORY[0x270FA0470]();
}

uint64_t swift_initStackObject()
{
  return MEMORY[0x270FA0478]();
}

uint64_t swift_initStructMetadata()
{
  return MEMORY[0x270FA0488]();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return MEMORY[0x270FA0498]();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return MEMORY[0x270FA04C8]();
}

uint64_t swift_makeBoxUnique()
{
  return MEMORY[0x270FA04D8]();
}

uint64_t swift_once()
{
  return MEMORY[0x270FA04F0]();
}

uint64_t swift_release()
{
  return MEMORY[0x270FA0520]();
}

uint64_t swift_release_n()
{
  return MEMORY[0x270FA0528]();
}

uint64_t swift_retain()
{
  return MEMORY[0x270FA0530]();
}

uint64_t swift_retain_n()
{
  return MEMORY[0x270FA0538]();
}

uint64_t swift_setDeallocating()
{
  return MEMORY[0x270FA0550]();
}

uint64_t swift_slowAlloc()
{
  return MEMORY[0x270FA0558]();
}

uint64_t swift_slowDealloc()
{
  return MEMORY[0x270FA0560]();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return MEMORY[0x270FA0568]();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return MEMORY[0x270FA0578]();
}

uint64_t swift_task_alloc()
{
  return MEMORY[0x270FA2450]();
}

uint64_t swift_task_create()
{
  return MEMORY[0x270FA2458]();
}

uint64_t swift_task_dealloc()
{
  return MEMORY[0x270FA2460]();
}

uint64_t swift_unexpectedError()
{
  return MEMORY[0x270FA0588]();
}

uint64_t swift_unknownObjectRelease()
{
  return MEMORY[0x270FA0590]();
}

uint64_t swift_unknownObjectRelease_n()
{
  return MEMORY[0x270FA0598]();
}

uint64_t swift_unknownObjectRetain()
{
  return MEMORY[0x270FA05A0]();
}

uint64_t swift_unknownObjectRetain_n()
{
  return MEMORY[0x270FA05A8]();
}

uint64_t swift_unknownObjectWeakAssign()
{
  return MEMORY[0x270FA05D0]();
}

uint64_t swift_unknownObjectWeakDestroy()
{
  return MEMORY[0x270FA05E8]();
}

uint64_t swift_unknownObjectWeakInit()
{
  return MEMORY[0x270FA05F0]();
}

uint64_t swift_unknownObjectWeakLoadStrong()
{
  return MEMORY[0x270FA05F8]();
}

uint64_t swift_updateClassMetadata2()
{
  return MEMORY[0x270FA0628]();
}

uint64_t swift_weakDestroy()
{
  return MEMORY[0x270FA0648]();
}

uint64_t swift_weakInit()
{
  return MEMORY[0x270FA0650]();
}

uint64_t swift_weakLoadStrong()
{
  return MEMORY[0x270FA0658]();
}

uint64_t swift_willThrow()
{
  return MEMORY[0x270FA0670]();
}

uint64_t swift_willThrowTypedImpl()
{
  return MEMORY[0x270FA0678]();
}

xpc_object_t xpc_array_create(xpc_object_t *objects, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDBD18](objects, count);
}

xpc_object_t xpc_array_create_empty(void)
{
  return (xpc_object_t)MEMORY[0x270EDBD20]();
}

void xpc_array_set_string(xpc_object_t xarray, size_t index, const char *string)
{
}

void xpc_array_set_uint64(xpc_object_t xarray, size_t index, uint64_t value)
{
}

xpc_object_t xpc_dictionary_create_reply(xpc_object_t original)
{
  return (xpc_object_t)MEMORY[0x270EDC020](original);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return MEMORY[0x270EDC050](xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return (const char *)MEMORY[0x270EDC0A8](xdict, key);
}

uint64_t xpc_dictionary_send_reply()
{
  return MEMORY[0x270EDC0D8]();
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}