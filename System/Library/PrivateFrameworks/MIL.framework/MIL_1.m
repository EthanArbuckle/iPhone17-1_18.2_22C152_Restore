void sub_20F3D2728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  void *v47;
  int v48;

  if (a47 < 0) {
    operator delete(__p);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v48 & 1) == 0) {
LABEL_16:
    }
      _Unwind_Resume(a1);
  }
  else if (!v48)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v47);
  goto LABEL_16;
}

uint64_t MIL::Blob::FileWriter::ReadData(void *a1)
{
  std::istream::seekg();
  uint64_t result = std::istream::read();
  if (*(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL FileWriter]: Unknown error occured while reading data from the file.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3D28B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x21056C330](a1 + 1);
  std::iostream::~basic_iostream();

  JUMPOUT(0x21056C620);
}

{
  void *v1;
  uint64_t vars8;

  v1 = a1 + 52;
  MEMORY[0x21056C330](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x21056C620](v1);

  JUMPOUT(0x21056C700);
}

void virtual thunk to'std::fstream::~fstream(void *a1)
{
  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x21056C330](v1 + 3);
  std::iostream::~basic_iostream();

  JUMPOUT(0x21056C620);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);
  uint64_t vars8;

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(void *)(*a1 - 24));
  MEMORY[0x21056C330](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21056C620](v1 + 54);

  JUMPOUT(0x21056C700);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  v1 = a1 + 54;
  MEMORY[0x21056C330](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21056C620](v1);

  JUMPOUT(0x21056C700);
}

void MIL::Blob::LegacyStorageReader::~LegacyStorageReader(MIL::Blob::MMapFileReader **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

double MIL::Blob::LegacyStorageReader::LegacyStorageReader(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100](this + 4, 0) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  return result;
}

void MIL::Blob::LegacyStorageReader::EnsureLoaded(MIL::Blob::LegacyStorageReader *this)
{
  v3 = this;
  v1 = (std::once_flag::_State_type *)((char *)this + 24);
  long long v2 = &v3;
  if (atomic_load_explicit((atomic_ullong *volatile)v1, memory_order_acquire) != -1)
  {
    v5 = &v2;
    v4 = &v5;
    std::__call_once(v1, &v4, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<MIL::Blob::LegacyStorageReader::EnsureLoaded(void)::$_1 &&>>);
  }
}

uint64_t MIL::Blob::LegacyStorageReader::GetFileDataOffsetAndByteLength(MIL::Blob::LegacyStorageReader *this, unint64_t a2)
{
  unint64_t v6 = a2;
  MIL::Blob::LegacyStorageReader::EnsureLoaded(this);
  v3 = std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)this + 5, &v6);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "blobv1 identifier not found");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return v3[3];
}

void sub_20F3D2DE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::LegacyStorageReader::IsEncrypted(MIL::Blob::MMapFileReader **this)
{
  return MIL::Blob::MMapFileReader::IsEncrypted(this[4]);
}

unint64_t MIL::Blob::LegacyStorageReader::GetDataView<MIL::Fp16>(MIL::Blob::MMapFileReader **a1, unint64_t a2)
{
  unint64_t FileDataOffsetAndByteLength = MIL::Blob::LegacyStorageReader::GetFileDataOffsetAndByteLength((MIL::Blob::LegacyStorageReader *)a1, a2);
  unint64_t result = MIL::Blob::MMapFileReader::ReadData(a1[4], FileDataOffsetAndByteLength, v4);
  if (v6 < 2) {
    return 0;
  }
  return result;
}

unint64_t MIL::Blob::LegacyStorageReader::GetDataView<float>(MIL::Blob::MMapFileReader **a1, unint64_t a2)
{
  unint64_t FileDataOffsetAndByteLength = MIL::Blob::LegacyStorageReader::GetFileDataOffsetAndByteLength((MIL::Blob::LegacyStorageReader *)a1, a2);
  unint64_t result = MIL::Blob::MMapFileReader::ReadData(a1[4], FileDataOffsetAndByteLength, v4);
  if (v6 < 4) {
    return 0;
  }
  return result;
}

MIL::Blob::MMapFileReader *std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100](MIL::Blob::MMapFileReader **a1, MIL::Blob::MMapFileReader *a2)
{
  unint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::MMapFileReader::~MMapFileReader(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<MIL::Blob::LegacyStorageReader::EnsureLoaded(void)::$_1 &&>>()
{
}

void sub_20F3D3010(_Unwind_Exception *a1)
{
  MIL::Blob::MMapFileReader::~MMapFileReader(v1);
  MEMORY[0x21056C700]();
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  i = operator new(0x28uLL);
  void *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  i[4] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3D3268(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::clear((void *)a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::clear(void *result)
{
  if (result[3])
  {
    v1 = result;
    unint64_t result = (void *)result[2];
    if (result)
    {
      do
      {
        long long v2 = (void *)*result;
        operator delete(result);
        unint64_t result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  unint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      unint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t MIL::Blob::MMapEncryptedFileReader::MMapEncryptedFileReader(uint64_t a1, std::string::size_type a2)
{
  unint64_t v3 = *(void *)(MIL::Blob::MMapFileReader::MMapFileReader(a1, a2) + 48);
  if (v3 >= 0x40)
  {
    uint64_t v4 = *(void *)(a1 + 40);
    if (*(_DWORD *)v4 == 1162759500)
    {
      int v5 = *(unsigned __int8 *)(v4 + 4);
      if ((v5 - 3) <= 0xFFFFFFFD)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, *(unsigned __int8 *)(v4 + 4));
        float v13 = std::string::insert(&v31, 0, "Invalid Encrypted file header: Unsupported major version = ");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v32);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (v5 == 1) {
        unsigned int v6 = 64;
      }
      else {
        unsigned int v6 = *(unsigned __int8 *)(v4 + 7);
      }
      unint64_t v7 = v6;
      if (v3 <= v6)
      {
        BOOL v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v7);
        unint64_t v16 = std::string::insert(&v31, 0, "Invalid Encrypted file header: File does not contain any payload, size of Header = ");
        long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
        v16->__r_.__value_.__l.__size_ = 0;
        v16->__r_.__value_.__r.__words[2] = 0;
        v16->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v15, &v32);
        __cxa_throw(v15, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unint64_t v8 = *(void *)(v4 + 8);
      if (v8 - 1 >= v3 - v6)
      {
        size_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v31, v8);
        uint64_t v19 = std::string::insert(&v31, 0, "Invalid Encrypted file header: Incorrect size of decrypted file size = ");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v18, &v32);
        __cxa_throw(v18, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      unint64_t v9 = *(void *)(v4 + 16);
      if (v9)
      {
        if (v9 >> 52)
        {
          unint64_t v21 = *(void *)(v4 + 16);
          v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v31, v21);
          v23 = std::string::insert(&v31, 0, "Invalid Encrypted file header: Incorrect number of encrypted pages = ");
          long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v22, &v32);
          __cxa_throw(v22, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        if (v3 < v9 << 12)
        {
          unint64_t v25 = *(void *)(v4 + 16);
          v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v31, v25);
          v27 = std::string::insert(&v31, 0, "Invalid Encrypted file header: Incorrect number of encrypted bytes = ");
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          v32.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          std::runtime_error::runtime_error(v26, &v32);
          __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        int v10 = mremap_encrypted();
        if (v10)
        {
          v29 = operator new(0x108uLL);
          v32.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
          *(_OWORD *)&v32.__r_.__value_.__r.__words[1] = xmmword_20F911170;
          _OWORD *v29 = 0u;
          v29[1] = 0u;
          v29[2] = 0u;
          v29[3] = 0u;
          v29[4] = 0u;
          v29[5] = 0u;
          v29[6] = 0u;
          v29[7] = 0u;
          v29[8] = 0u;
          v29[9] = 0u;
          v29[10] = 0u;
          v29[11] = 0u;
          v29[12] = 0u;
          v29[13] = 0u;
          v29[14] = 0u;
          v29[15] = 0u;
          *((unsigned char *)v29 + 256) = 0;
          strerror_r(v10, (char *)v29, 0x100uLL);
          v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::operator+<char>();
          std::runtime_error::runtime_error(v30, &v31);
          __cxa_throw(v30, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
      }
      *(void *)(a1 + 4std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100](this + 4, 0) = v4 + v7;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = 1;
    }
  }
  return a1;
}

void sub_20F3D384C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      if (a21 < 0) {
        operator delete(a16);
      }
      MIL::Blob::MMapFileReader::~MMapFileReader(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

void MIL::Blob::MakeMMapFileReader()
{
}

void sub_20F3D3994(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10B0C40D03D9829);
  _Unwind_Resume(a1);
}

void MIL::Blob::MMapFileReader::~MMapFileReader(MIL::Blob::MMapFileReader *this)
{
}

uint64_t MIL::Blob::MMapFileReader::MMapFileReader(uint64_t a1, std::string::size_type a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v4 = (const char *)a2;
  }
  else {
    uint64_t v4 = *(const char **)a2;
  }
  if (stat(v4, &v18))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v21);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  off_t st_size = v18.st_size;
  if (*(char *)(a2 + 23) >= 0) {
    unsigned int v6 = (const char *)a2;
  }
  else {
    unsigned int v6 = *(const char **)a2;
  }
  unint64_t v7 = fopen(v6, "r");
  unint64_t v8 = v7;
  if (!v7)
  {
    long long v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v17, &v21);
    __cxa_throw(v17, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v9 = fileno(v7);
  int v10 = mmap(0, st_size, 1, 2, v9, 0);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C258710;
  buf.__r_.__value_.__l.__size_ = st_size;
  p_std::string buf = &buf;
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100]((uint64_t)&v21.__r_.__value_.__l.__size_, (uint64_t)&buf);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&buf);
  std::string::size_type v11 = v21.__r_.__value_.__r.__words[0];
  if (v21.__r_.__value_.__r.__words[0] + 1 <= 1)
  {
    BOOL v15 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v15, &buf);
    __cxa_throw(v15, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (st_size) {
    std::string::size_type v12 = v21.__r_.__value_.__r.__words[0];
  }
  else {
    std::string::size_type v12 = 0;
  }
  *(void *)(a1 + 4std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)this, 0) = v12;
  *(void *)(a1 + 48) = st_size;
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v13 = a2;
    }
    else {
      std::string::size_type v13 = *(void *)a2;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v11;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    p_std::string buf = (std::string *)st_size;
    _os_log_impl(&dword_20F348000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "MMapped %s to base address %lx with size %zu", (uint8_t *)&buf, 0x20u);
  }
  std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100]((uint64_t *)a1, (uint64_t *)&v21);
  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100]((uint64_t *)&v21, 0);
  std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](&v21.__r_.__value_.__l.__size_);
  fclose(v8);
  return a1;
}

void sub_20F3D3CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v35 - 89) < 0)
  {
    operator delete(*(void **)(v35 - 112));
    if ((v34 & 1) == 0)
    {
LABEL_6:
      std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](v32, 0);
      std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](v32 + 1);
      _Unwind_Resume(a1);
    }
  }
  else if (!v34)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v33);
  goto LABEL_6;
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](a1, v4);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1 + 1, (uint64_t)(a2 + 1));
  return a1;
}

uint64_t MIL::Blob::MMapFileReader::GetLength(MIL::Blob::MMapFileReader *this)
{
  return *((void *)this + 6);
}

unint64_t MIL::Blob::MMapFileReader::ReadData(MIL::Blob::MMapFileReader *this, unint64_t a2, uint64_t a3)
{
  return MIL::Util::Span<unsigned char,18446744073709551615ul>::Slice((void *)this + 5, a2, a3);
}

unint64_t MIL::Util::Span<unsigned char,18446744073709551615ul>::Slice(void *a1, unint64_t a2, uint64_t a3)
{
  if (!a3 || ((v3 = a1[1], v3 > a2) ? (BOOL v4 = a3 + a2 > v3) : (BOOL v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + a2;
}

void sub_20F3D3E64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::MMapFileReader::IsEncrypted(MIL::Blob::MMapFileReader *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t *std::unique_ptr<void,std::function<void ()(void *)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v3 = *result;
  *unint64_t result = a2;
  if (v3) {
    return (uint64_t *)std::function<void ()(void *)>::operator()((uint64_t)(result + 1), v3);
  }
  return result;
}

uint64_t std::function<void ()(void *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void *std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::~__func()
{
}

void *std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *unint64_t result = &unk_26C258710;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C258710;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::operator()(uint64_t a1, void **a2)
{
  return munmap(*a2, *(void *)(a1 + 8));
}

uint64_t std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0,std::allocator<MIL::Blob::MMapFileReader::MMapFileReader(std::string const&)::$_0>,void ()(void *)>::target_type()
{
}

uint64_t std::__function::__value_func<void ()(void *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *MIL::Blob::StorageData::StorageData(void *this)
{
  *this = &unk_26C2587A0;
  return this;
}

uint64_t MIL::Blob::StorageData::IsEncrypted(MIL::Blob::StorageData *this)
{
  return 0;
}

void MIL::Blob::StorageData::Make()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_20F3D4340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](v3);
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x21056C700](v2, 0x10F1C403FB7196CLL);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::~StorageReader(MIL::Blob::StorageReader::Impl **this)
{
}

{
  std::unique_ptr<MIL::Blob::StorageReader::Impl>::reset[abi:ne180100](this, 0);
}

void MIL::Blob::StorageReader::StorageReader(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = operator new(0x48uLL);
  v3[1] = 0;
  v3[2] = 0;
  void *v3 = &unk_26C258838;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v5, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v5 = *(std::string *)a2;
  }
  v3[3] = &unk_26C258888;
  *((_OWORD *)v3 + 2) = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  std::string::size_type v4 = v5.__r_.__value_.__r.__words[2];
  v3[7] = 0;
  v3[8] = 0;
  v3[6] = v4;
  operator new();
}

void sub_20F3D44F8(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v2, 0x1072C40375F26C8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::StorageReader()
{
}

{
  operator new();
}

uint64_t MIL::Blob::StorageReader::GetFilename(MIL::Blob::StorageReader *this)
{
  return MIL::Blob::StorageReader::Impl::GetFilename(*(void *)this);
}

uint64_t MIL::Blob::StorageReader::Impl::GetFilename(uint64_t this)
{
  if (!*(unsigned char *)(this + 24))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Storage data is not backed by a file.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

void sub_20F3D4658(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::StorageReader::GetDataView<signed char>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<signed char>(*a1, a2);
}

void MIL::Blob::StorageReader::GetDataView<MIL::Int4>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt6>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt4>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt3>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt2>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
}

void MIL::Blob::StorageReader::GetDataView<MIL::UInt1>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
}

uint64_t MIL::Blob::StorageReader::GetDataView<unsigned char>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned char>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Bf16>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Bf16>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Fp8E4M3FN>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp8E4M3FN>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Fp8E5M2>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp8E5M2>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Fp16>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp16>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<float>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<float>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<short>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<short>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<unsigned short>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned short>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<int>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<int>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetDataView<unsigned int>(MIL::Blob::StorageReader::Impl **a1, uint64_t a2)
{
  return MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned int>(*a1, a2);
}

uint64_t MIL::Blob::StorageReader::GetRawDataView(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  uint64_t v2 = *this;
  __n128 Metadata = MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v5);
  return (*(uint64_t (**)(void, void, void, __n128))(**((void **)v2 + 4) + 32))(*((void *)v2 + 4), v5[2], v5[1], Metadata);
}

uint64_t MIL::Blob::StorageReader::GetDataOffset(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v3);
  return v3[2];
}

uint64_t MIL::Blob::StorageReader::GetDataSize(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v3);
  return v3[1];
}

uint64_t MIL::Blob::StorageReader::IsEncrypted(MIL::Blob::StorageReader *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)this + 32) + 24))();
}

uint64_t MIL::Blob::StorageReader::GetDataType(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v3);
  return v3[1];
}

void MIL::Blob::StorageReader::GetAllOffsets(MIL::Blob::StorageReader::Impl **this@<X0>, uint64_t a2@<X8>)
{
}

void MIL::Blob::StorageReader::Impl::GetAllOffsets(MIL::Blob::StorageReader::Impl *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4 = *(unsigned int *)(*(uint64_t (**)(void, void, uint64_t))(**((void **)this + 4) + 32))(*((void *)this + 4), 0, 64);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::vector<unsigned long long>::reserve((void **)a2, v4);
  if (v4)
  {
    int v5 = 0;
    unint64_t v6 = 64;
    do
    {
      unint64_t v8 = *(unint64_t **)(a2 + 8);
      unint64_t v7 = *(void *)(a2 + 16);
      if ((unint64_t)v8 >= v7)
      {
        int v10 = *(unint64_t **)a2;
        uint64_t v11 = ((uint64_t)v8 - *(void *)a2) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v7 - (void)v10;
        if (v13 >> 2 > v12) {
          unint64_t v12 = v13 >> 2;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          BOOL v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a2 + 16, v14);
          int v10 = *(unint64_t **)a2;
          unint64_t v8 = *(unint64_t **)(a2 + 8);
        }
        else
        {
          BOOL v15 = 0;
        }
        unint64_t v16 = (unint64_t *)&v15[8 * v11];
        *unint64_t v16 = v6;
        int v9 = v16 + 1;
        while (v8 != v10)
        {
          unint64_t v17 = *--v8;
          *--unint64_t v16 = v17;
        }
        *(void *)a2 = v16;
        *(void *)(a2 + 8) = v9;
        *(void *)(a2 + 16) = &v15[8 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *unint64_t v8 = v6;
        int v9 = v8 + 1;
      }
      *(void *)(a2 + 8) = v9;
      MIL::Blob::StorageReader::Impl::GetMetadata(this, v6, (uint64_t)v18);
      unint64_t v6 = (v18[2] + v18[1] + 63) & 0xFFFFFFFFFFFFFFC0;
      ++v5;
    }
    while (v5 != v4);
  }
}

void sub_20F3D498C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Blob::StorageReader::GetDataPaddingInBits(MIL::Blob::StorageReader::Impl **this, uint64_t a2)
{
  MIL::Blob::StorageReader::Impl::GetMetadata(*this, a2, (uint64_t)v3);
  return v3[3];
}

__n128 MIL::Blob::StorageReader::Impl::GetMetadata@<Q0>(MIL::Blob::StorageReader::Impl *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 4) + 32))(*((void *)this + 4), a2, 64);
  long long v5 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v5;
  __n128 result = *(__n128 *)(v4 + 32);
  long long v7 = *(_OWORD *)(v4 + 48);
  *(__n128 *)(a3 + 32) = result;
  *(_OWORD *)(a3 + 48) = v7;
  if (*(_DWORD *)a3 != -559038737)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid sentinel in blob_metadata.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3D4A88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(void const*)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t MIL::Blob::anonymous namespace'::ValidateStorageHeader(uint64_t result)
{
  if (*(_DWORD *)(result + 4) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Storage Reader expects file format version 2.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3D4B7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::anonymous namespace'::InMemoryStorageData::~InMemoryStorageData(MIL::Blob::_anonymous_namespace_::InMemoryStorageData *this)
{
  *(void *)this = &unk_26C2587E8;
  uint64_t v1 = (void *)((char *)this + 24);
  std::function<void ()(void const*)>::operator()((uint64_t)this + 24, *((void *)this + 1));
  std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](v1);
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Blob::anonymous namespace'::InMemoryStorageData::GetLength(MIL::Blob::_anonymous_namespace_::InMemoryStorageData *this)
{
  return *((void *)this + 2);
}

unint64_t MIL::Blob::anonymous namespace'::InMemoryStorageData::GetView(MIL::Blob::_anonymous_namespace_::InMemoryStorageData *this, unint64_t a2, uint64_t a3)
{
  return MIL::Util::Span<unsigned char const,18446744073709551615ul>::Slice((void *)this + 1, a2, a3);
}

uint64_t std::function<void ()(void const*)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

unint64_t MIL::Util::Span<unsigned char const,18446744073709551615ul>::Slice(void *a1, unint64_t a2, uint64_t a3)
{
  if (!a3 || ((v3 = a1[1], v3 > a2) ? (BOOL v4 = a3 + a2 > v3) : (BOOL v4 = 1), v4))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + a2;
}

void sub_20F3D4D00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

MIL::Blob::StorageReader::Impl *std::unique_ptr<MIL::Blob::StorageReader::Impl>::reset[abi:ne180100](MIL::Blob::StorageReader::Impl **a1, MIL::Blob::StorageReader::Impl *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::StorageReader::Impl::~Impl(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::Blob::StorageReader::Impl::~Impl(MIL::Blob::StorageReader::Impl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((unsigned char *)this + 24))
  {
    if (*((char *)this + 23) < 0) {
      operator delete(*(void **)this);
    }
  }
}

void std::__shared_ptr_emplace<MIL::Blob::anonymous namespace'::MMapStorageData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Blob::anonymous namespace'::MMapStorageData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258838;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::Blob::anonymous namespace'::MMapStorageData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void MIL::Blob::anonymous namespace'::MMapStorageData::~MMapStorageData(MIL::Blob::_anonymous_namespace_::MMapStorageData *this)
{
  *(void *)this = &unk_26C258888;
  std::unique_ptr<MIL::Blob::MMapFileReader const>::reset[abi:ne180100]((MIL::Blob::MMapFileReader **)this + 5, 0);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Blob::anonymous namespace'::MMapStorageData::GetLength(MIL::Blob::MMapFileReader **this)
{
  uint64_t v2 = this[5];

  return MIL::Blob::MMapFileReader::GetLength(v2);
}

uint64_t MIL::Blob::anonymous namespace'::MMapStorageData::IsEncrypted(MIL::Blob::MMapFileReader **this)
{
  uint64_t v2 = this[5];

  return MIL::Blob::MMapFileReader::IsEncrypted(v2);
}

unint64_t MIL::Blob::anonymous namespace'::MMapStorageData::GetView(MIL::Blob::MMapFileReader **this, unint64_t a2, uint64_t a3)
{
  unint64_t v6 = this[5];

  return MIL::Blob::MMapFileReader::ReadData(v6, a2, a3);
}

void MIL::Blob::anonymous namespace'::MMapStorageData::EnsureLoaded(MIL::Blob::_anonymous_namespace_::MMapStorageData *this)
{
  unint64_t v3 = this;
  uint64_t v1 = (std::once_flag::_State_type *)((char *)this + 32);
  uint64_t v2 = &v3;
  if (atomic_load_explicit((atomic_ullong *volatile)v1, memory_order_acquire) != -1)
  {
    long long v5 = &v2;
    BOOL v4 = &v5;
  }
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<MIL::Blob::anonymous namespace'::MMapStorageData::EnsureLoaded(void)::{lambda(void)#2} &&>>()
{
}

void sub_20F3D5104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::Blob::MMapFileReader *a10)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<signed char>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 4, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (!v5) {
    return 0;
  }
  return result;
}

double MIL::Blob::StorageReader::Impl::GetAndCheckMetadata@<D0>(MIL::Blob::StorageReader::Impl *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)&double result = MIL::Blob::StorageReader::Impl::GetMetadata(a1, a2, a4).n128_u64[0];
  if (*(_DWORD *)(a4 + 4) != a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Metadata data type does not match requested type.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3D51F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::Int4>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 8, (uint64_t)&v8);
  uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_8;
  }
  if ((v11 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for byte-aligned sub-byte-sized type");
    goto LABEL_8;
  }
  unint64_t v6 = 8 * v9 - v11;
  if ((v6 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char const,true>(v4, v5, v6 >> 2);
}

void sub_20F3D5308(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt6>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 13, (uint64_t)&v8);
  uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_6;
  }
  unint64_t v6 = 8 * v9 - v11;
  if (v6 % 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char const,true>(v4, v5, v6 / 6);
}

void sub_20F3D5410(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt4>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 11, (uint64_t)&v8);
  uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_8;
  }
  if ((v11 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for byte-aligned sub-byte-sized type");
    goto LABEL_8;
  }
  unint64_t v6 = 8 * v9 - v11;
  if ((v6 & 3) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char const,true>(v4, v5, v6 >> 2);
}

void sub_20F3D5528(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt3>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 12, (uint64_t)&v8);
  uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_6;
  }
  unint64_t v6 = 8 * v9 - v11;
  if (v6 != 3 * (v6 / 3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char const,true>(v4, v5, v6 / 3);
}

void sub_20F3D5634(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt2>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 10, (uint64_t)&v8);
  uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v10, v9, v3);
  if (v11 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    goto LABEL_8;
  }
  if (v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for byte-aligned sub-byte-sized type");
    goto LABEL_8;
  }
  unint64_t v6 = 8 * v9 - v11;
  if (v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid padding for blob");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char const,true>(v4, v5, v6 >> 1);
}

void sub_20F3D5744(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageReader::Impl::GetDataViewForSubByteSized<MIL::UInt1>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 9, (uint64_t)&v7);
  uint64_t v4 = (*(uint64_t (**)(void *, uint64_t, uint64_t, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v9, v8, v3);
  if (v10 >= 8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "8 or more bits of padding for sub-byte sized data is incorrect");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char const,true>(v4, v5, 8 * v8 - v10);
}

void sub_20F3D5814(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned char>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 3, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (!v5) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Bf16>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 5, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 2) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp8E4M3FN>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 16, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (!v5) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp8E5M2>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 17, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (!v5) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<MIL::Fp16>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 1, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 2) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<float>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 2, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 4) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<short>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 6, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 2) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned short>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 7, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 2) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<int>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 14, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 4) {
    return 0;
  }
  return result;
}

uint64_t MIL::Blob::StorageReader::Impl::GetDataViewForByteAligned<unsigned int>(MIL::Blob::StorageReader::Impl *a1, uint64_t a2)
{
  double v3 = MIL::Blob::StorageReader::Impl::GetAndCheckMetadata(a1, a2, 15, (uint64_t)v6);
  uint64_t result = (*(uint64_t (**)(void *, void, void, double))(**((void **)a1 + 4) + 32))(*((void **)a1 + 4), v6[2], v6[1], v3);
  if (v5 < 4) {
    return 0;
  }
  return result;
}

void MIL::Blob::StorageWriter::~StorageWriter(MIL::Blob::FileWriter ***this)
{
}

{
  std::unique_ptr<MIL::Blob::StorageWriter::Impl>::reset[abi:ne180100](this, 0);
}

void MIL::Blob::StorageWriter::StorageWriter()
{
}

void sub_20F3D5D28(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x1032C4097EB098DLL);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<signed char>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<signed char>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<signed char>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D5E9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<unsigned char>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<unsigned char>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<unsigned char>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D6004(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<unsigned int>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<unsigned int>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<unsigned int>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D616C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Bf16>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Bf16>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Bf16>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D62D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp8E4M3FN>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp8E4M3FN>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D643C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp8E5M2>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp8E5M2>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D65A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Fp16>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp16>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Fp16>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D670C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<float>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<float>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<float>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D6874(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<short>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<short>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<short>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D69DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<int>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<int>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<int>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D6B44(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::Int4>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::Int4>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::Int4>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D6CC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt6>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt6>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt6>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D6E48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt4>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt4>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt4>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D6FC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt3>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt3>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt3>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D7148(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt2>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt2>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt2>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D72CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<MIL::UInt1>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt1>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<MIL::UInt1>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D7448(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Blob::StorageWriter::WriteData<unsigned short>(uint64_t *a1)
{
  return MIL::Blob::StorageWriter::Impl::WriteData<unsigned short>(*a1);
}

unint64_t MIL::Blob::StorageWriter::Impl::WriteData<unsigned short>(uint64_t a1)
{
  unint64_t NextAlignedOffset = MIL::Blob::FileWriter::GetNextAlignedOffset(*(MIL::Blob::FileWriter **)(a1 + 24));
  if ((NextAlignedOffset & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: dataOffset is expected to be 64 bits aligned.");
    goto LABEL_7;
  }
  unint64_t v3 = NextAlignedOffset;
  unint64_t v4 = NextAlignedOffset + 64;
  if (NextAlignedOffset != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24))
    || v4 != MIL::Blob::FileWriter::AppendData(*(void **)(a1 + 24)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL StorageWriter]: Metadata written to different offset than expected.");
LABEL_7:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v6 = *(_DWORD *)(a1 + 32);
  unint64_t v5 = (_DWORD *)(a1 + 32);
  _DWORD *v5 = v6 + 1;
  MIL::Blob::FileWriter::WriteData(*((void **)v5 - 1), (uint64_t)v5, 64, 0);
  return v3;
}

void sub_20F3D75B0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Blob::StorageWriter::GetFilePath(MIL::Blob::StorageWriter *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(long long **)this;
  if (*(char *)(*(void *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

MIL::Blob::FileWriter **std::unique_ptr<MIL::Blob::StorageWriter::Impl>::reset[abi:ne180100](MIL::Blob::FileWriter ***a1, MIL::Blob::FileWriter **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::StorageWriter::Impl::~Impl(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::Blob::StorageWriter::Impl::~Impl(MIL::Blob::FileWriter **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

MIL::Blob::FileWriter *std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](MIL::Blob::FileWriter **a1, MIL::Blob::FileWriter *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Blob::FileWriter::~FileWriter(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::Blob::StorageWriter::Impl::Impl(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v2 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v2;
  }
  operator new();
}

void sub_20F3D784C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](v2, 0);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::~BlockBuilder(MIL::Builder::BlockBuilder::BlockBuilderImpl **this)
{
  *this = (MIL::Builder::BlockBuilder::BlockBuilderImpl *)&unk_26C2588D8;
  std::unique_ptr<MIL::Builder::BlockBuilder::BlockBuilderImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  *this = (MIL::Builder::BlockBuilder::BlockBuilderImpl *)&unk_26C2588D8;
  std::unique_ptr<MIL::Builder::BlockBuilder::BlockBuilderImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  uint64_t vars8;

  *this = (MIL::Builder::BlockBuilder::BlockBuilderImpl *)&unk_26C2588D8;
  std::unique_ptr<MIL::Builder::BlockBuilder::BlockBuilderImpl>::reset[abi:ne180100](this + 1, 0);

  JUMPOUT(0x21056C700);
}

void MIL::Builder::BlockBuilder::BlockBuilder(void *a1)
{
  *a1 = &unk_26C2588D8;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::string &,MIL::IRScope const*&>();
}

{
  *a1 = &unk_26C2588D8;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::string &,MIL::IRScope const*&>();
}

{
  *a1 = &unk_26C2588D8;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,MIL::IRBlock &,std::string &,MIL::IRScope const*&,MIL::Builder::BlockBuilder*>();
}

{
  *a1 = &unk_26C2588D8;
  std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,MIL::IRBlock &,std::string &,MIL::IRScope const*&,MIL::Builder::BlockBuilder*>();
}

void std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::string &,MIL::IRScope const*&>()
{
}

void sub_20F3D7AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F2C406B460F26);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::Builder::BlockBuilder::BlockBuilderImpl,std::shared_ptr<MIL::MILContext> &,MIL::IRBlock &,std::string &,MIL::IRScope const*&,MIL::Builder::BlockBuilder*>()
{
}

void sub_20F3D7CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F2C406B460F26);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::GetOperation@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperation(*(void *)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperation@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 72), a2);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = *((void *)result + 6);
  *a3 = *((void *)result + 5);
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

unsigned __int8 *MIL::Builder::BlockBuilder::TryGetOperation@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 72), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

unsigned __int8 *MIL::Builder::BlockBuilder::GetVariable(uint64_t a1, uint64_t a2)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(*(void *)(a1 + 8), a2);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(uint64_t a1, uint64_t a2)
{
  uint64_t result = MIL::Builder::BlockBuilder::BlockBuilderImpl::TryGetVariable(a1, a2);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v4 = std::string::append(&v6, ".");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v7.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v7);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3D7F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *MIL::Builder::BlockBuilder::TryGetVariable(uint64_t a1, uint64_t a2)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::TryGetVariable(*(void *)(a1 + 8), a2);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::TryGetVariable(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, 1))
  {
    goto LABEL_2;
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 112), (unsigned __int8 *)a2);
  if (!result) {
    return result;
  }
  uint64_t v8 = (long long *)a2;
  if (!*((void *)std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 112, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v8)+ 8))return 0; {
LABEL_2:
  }
  uint64_t v8 = 0;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(a1 + 296, (unsigned __int8 *)a2, a2);
  if (v5)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    MIL::Builder::Variable::Make();
  }
  return (unsigned __int8 *)*((void *)v4 + 5);
}

void sub_20F3D80FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::AddOperation(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  long long v3 = *(uint64_t **)(a1 + 8);
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation(v3, a2);
}

void sub_20F3D8170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation(uint64_t *a1, unsigned __int8 *a2)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperator(a1, a2, &v3);
  v2[0] = v3;
  v2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::Make((uint64_t)v2);
}

void sub_20F3D8264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  stat v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::AddOperation(MIL::Builder::BlockBuilder *a1, long long *a2, uint64_t *a3)
{
  uint64_t v4 = (uint64_t *)*((void *)a1 + 1);
  long long v8 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  char v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v6 = *a3;
  std::string v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation(v4, (MIL::Builder::OperationBuilder::OperationBuilderImpl ***)&v8, &v6, a1);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
}

void sub_20F3D8324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOperation(uint64_t *a1, MIL::Builder::OperationBuilder::OperationBuilderImpl ***a2, uint64_t *a3, MIL::Builder::BlockBuilder *a4)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckAddedOperation((MIL::Builder::BlockBuilder::BlockBuilderImpl *)a1, *a2);
  if (*a3)
  {
    long long v8 = (std::__shared_weak_count *)a3[1];
    uint64_t v11 = *a3;
    unint64_t v12 = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationIterator((uint64_t)a1, &v11);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::insert(a1 + 6, v9, a2);
  }
  else
  {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::push_back[abi:ne180100](a1 + 6, (long long *)a2);
  }
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationAdded(a1, (uint64_t)a2, a4);
}

void sub_20F3D83F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::BlockBuilder::InsertOperations(MIL::Builder::BlockBuilder *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::InsertOperations(*((void **)a1 + 1), a2, a3, a4, a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::InsertOperations(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, MIL::Builder::BlockBuilder *a5)
{
  char v5 = a1 + 6;
  if (a4 > (uint64_t)(a1[7] - a1[6]) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Insertion position out of range");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  uint64_t v9 = (uint64_t *)a2;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckInsertedOperations((unint64_t)a1, a2, a3);
  uint64_t result = (uint64_t)std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__insert_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*>(v5, (void *)(a1[6] + 16 * a4), v9, &v9[2 * a3], (16 * a3) >> 4);
  if (a3)
  {
    uint64_t v12 = 16 * a3;
    do
    {
      uint64_t result = MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationAdded(a1, (uint64_t)v9, a5);
      v9 += 2;
      v12 -= 16;
    }
    while (v12);
  }
  return result;
}

void sub_20F3D84EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::InsertOperations(MIL::Builder::BlockBuilder *a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5)
{
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::InsertOperations(void *a1, uint64_t a2, unint64_t a3, unint64_t *a4, uint64_t a5, MIL::Builder::BlockBuilder *a6)
{
  if (a3 != a5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Operation and position spans must be of same size");
LABEL_19:
    v29 = (struct type_info *)off_26412C1F0;
    v30 = (void (*)(void *))MEMORY[0x263F8C080];
    goto LABEL_20;
  }
  uint64_t v9 = a2;
  if (a3 >= 2)
  {
    uint64_t v11 = a4 + 1;
    unint64_t v12 = *a4;
    unint64_t v13 = a3 - 1;
    while (1)
    {
      unint64_t v15 = *v11++;
      unint64_t v14 = v15;
      if (v15 < v12) {
        break;
      }
      unint64_t v12 = v14;
      if (!--v13) {
        goto LABEL_6;
      }
    }
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Insertion positions are not sorted");
    goto LABEL_19;
  }
LABEL_6:
  if (a3 && a4[a3 - 1] > (uint64_t)(a1[7] - a1[6]) >> 4)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Insertion position out of range");
    v29 = (struct type_info *)off_26412C1E0;
    v30 = (void (*)(void *))MEMORY[0x263F8C068];
LABEL_20:
    __cxa_throw(exception, v29, v30);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckInsertedOperations((unint64_t)a1, a2, a3);
  std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::resize(a1 + 6, a3 + ((uint64_t)(a1[7] - a1[6]) >> 4));
  if (a3)
  {
    uint64_t v16 = a1[7];
    uint64_t v17 = (void *)(v16 - 16 * a3);
    stat v18 = (uint64_t *)(v9 + 16 * a3 - 8);
    uint64_t v19 = a3;
    long long v20 = a4 - 1;
    do
    {
      std::string v21 = (void *)(a1[6] + 16 * v20[v19]);
      std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *>((uint64_t)&v31, v21, v17, v16);
      uint64_t v23 = v22;
      uint64_t v25 = *(v18 - 1);
      uint64_t v24 = *v18;
      if (*v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      v26 = *(std::__shared_weak_count **)(v22 - 8);
      *(void *)(v22 - 16) = v25;
      *(void *)(v22 - 8) = v24;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      uint64_t v16 = v23 - 16;
      v18 -= 2;
      uint64_t v17 = v21;
      --v19;
    }
    while (v19 * 8);
    uint64_t v27 = 16 * a3;
    do
    {
      MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationAdded(a1, v9, a6);
      v9 += 16;
      v27 -= 16;
    }
    while (v27);
  }
}

void sub_20F3D86F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::AddConst(uint64_t a1, long long *a2, long long *a3)
{
  long long v3 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *a3;
  *(_OWORD *)std::string __p = v3;
  *(void *)a3 = 0;
  *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  v4[0] = 0;
  v4[1] = 0;
  MIL::Builder::BlockBuilder::AddConst(a1, (uint64_t)__p, &v5, v4);
}

void sub_20F3D87A4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::AddConst(v5, (uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::AddConst(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  *a4 = 0;
  a4[1] = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddConst(v4);
}

void sub_20F3D8834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::AddConst(uint64_t *a1)
{
  v5[5] = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(__p, "const");
  Operator = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperator(a1, (unsigned __int8 *)__p, v5);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  MIL::UnknownLocation::Make((MIL::UnknownLocation *)Operator);
}

void sub_20F3D8CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v38 - 184, *(void **)(v38 - 176));
  v40 = *(std::__shared_weak_count **)(v38 - 152);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  v41 = *(std::__shared_weak_count **)(v38 - 128);
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  uint64_t v42 = *(void *)(v38 - 144);
  *(void *)(v38 - 144) = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  v43 = *(std::__shared_weak_count **)(v38 - 104);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  _Unwind_Resume(a1);
}

void *MIL::Builder::BlockBuilder::GetOperations@<X0>(MIL::Builder::BlockBuilder *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(a2, *(void **)(v2 + 48), *(void **)(v2 + 56), (uint64_t)(*(void *)(v2 + 56) - *(void *)(v2 + 48)) >> 4);
}

uint64_t MIL::Builder::BlockBuilder::GetNumOperations(MIL::Builder::BlockBuilder *this)
{
  return (uint64_t)(*(void *)(*((void *)this + 1) + 56) - *(void *)(*((void *)this + 1) + 48)) >> 4;
}

uint64_t MIL::Builder::BlockBuilder::GetOperation@<X0>(MIL::Builder::BlockBuilder::BlockBuilderImpl **this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperation(this[1], a2, a3);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperation@<X0>(MIL::Builder::BlockBuilder::BlockBuilderImpl *this@<X0>, unint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = *((void *)this + 6);
  uint64_t v5 = *((void *)this + 7);
  uint64_t result = (uint64_t)this + 48;
  if (a2 >= (v5 - v4) >> 4) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  long long v6 = *(_OWORD *)(v4 + 16 * a2);
  *a3 = v6;
  if (*((void *)&v6 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void MIL::Builder::BlockBuilder::Make()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F3D8FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  MEMORY[0x21056C700](v16, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3D9124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3D9254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3D9378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  MEMORY[0x21056C700](v16, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::BlockBuilder::GetOperationsByInput(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperationsByInput(*(void *)(a1 + 8), a2);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperationsByInput(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = (void *)(a1 + 112);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 112), a2))return (unsigned __int8 *)(a1 + 256); {
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v4, a2);
  }
  if (!v5) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v5 + 40;
}

uint64_t MIL::Builder::BlockBuilder::GetStateOperationsByInput@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetStateOperationsByInput(*(MIL::Builder::BlockBuilder::BlockBuilderImpl **)(a1 + 8), a2, a3);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::GetStateOperationsByInput@<X0>(MIL::Builder::BlockBuilder::BlockBuilderImpl *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap(a1, (uint64_t)v12);
  if (!std::operator==[abi:ne180100]<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>((uint64_t)v12, (void *)a1 + 48))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Program has been modified affecting the sequential ordering of state operations. Use UpdateStateDependencyMap() if the modification was intentional.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  char v10 = 1;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ExtractStateOpsHelper((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)v11);
  unint64_t v13 = (long long *)a2;
  long long v6 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v11, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v13);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(a3, *((void **)v6 + 5), *((void **)v6 + 6), (uint64_t)(*((void *)v6 + 6) - *((void *)v6 + 5)) >> 4);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v11);
  if (v10 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)v12);
}

void sub_20F3D955C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

unsigned __int8 *MIL::Builder::BlockBuilder::GetDataDependenciesForConsumerParam(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5 = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOrBuildDataDependencyGraph(*(MIL::Builder::BlockBuilder::BlockBuilderImpl **)(a1 + 8));

  return MIL::Builder::BlockBuilder::DataDependencyGraph::GetDataDependenciesForConsumerParam(v5, a2, a3);
}

void *MIL::Builder::BlockBuilder::GetDataDependenciesByVariableName(uint64_t a1, unsigned __int8 *a2)
{
  long long v3 = (void *)MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOrBuildDataDependencyGraph(*(MIL::Builder::BlockBuilder::BlockBuilderImpl **)(a1 + 8));

  return MIL::Builder::BlockBuilder::DataDependencyGraph::GetDataDependenciesByVariableName(v3, a2);
}

void MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v9 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceUsesOfInputVariable(v4, a2, __p, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3D96B4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceUsesOfInputVariable(void *a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8 = a1[47];
  a1[47] = 0;
  if (v8) {
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)(a1 + 47), v8);
  }
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 14, a2);
  if (v9)
  {
    std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set((uint64_t)v30, (uint64_t)(v9 + 40));
    char v10 = v31;
    if (v31)
    {
      while (1)
      {
        uint64_t v11 = *a4;
        if (!*a4) {
          break;
        }
        unint64_t v12 = (std::__shared_weak_count *)v10[3];
        uint64_t v28 = v10[2];
        v29 = v12;
        if (v12)
        {
          atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          uint64_t v11 = *a4;
        }
        unint64_t v13 = (std::__shared_weak_count *)a4[1];
        uint64_t v26 = v11;
        uint64_t v27 = v13;
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL v14 = MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationFollowsOperation((uint64_t)a1, &v28, &v26);
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v29)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          if (v14) {
            break;
          }
        }
        else if (v14)
        {
          break;
        }
LABEL_21:
        char v10 = (void *)*v10;
        if (!v10) {
          goto LABEL_22;
        }
      }
      uint64_t v15 = v10[2];
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v25 = *(std::string *)a3;
      }
      MIL::Builder::OperationBuilder::RenameArgument(v15, (uint64_t)a2, (uint64_t)&v25);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v25.__r_.__value_.__l.__data_);
      }
      goto LABEL_21;
    }
LABEL_22:
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v30);
  }
  uint64_t v16 = (MIL::Builder::OperationBuilder **)a1[6];
  uint64_t v17 = (MIL::Builder::OperationBuilder **)a1[7];
  if (v16 == v17) {
    return;
  }
  do
  {
    uint64_t BlocksRef = MIL::Builder::OperationBuilder::GetBlocksRef(*v16);
    uint64_t v19 = *(uint64_t **)BlocksRef;
    long long v20 = *(uint64_t **)(BlocksRef + 8);
    while (v19 != v20)
    {
      uint64_t v22 = *v19;
      std::string v21 = (std::__shared_weak_count *)v19[1];
      if (v21) {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v24 = *(std::string *)a3;
      }
      v23[0] = 0;
      v23[1] = 0;
      MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable(v22, (uint64_t)a2, (uint64_t)&v24, v23);
      if ((SHIBYTE(v24.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v21) {
          goto LABEL_34;
        }
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        goto LABEL_34;
      }
      operator delete(v24.__r_.__value_.__l.__data_);
      if (v21) {
        goto LABEL_33;
      }
LABEL_34:
      v19 += 2;
    }
    v16 += 2;
  }
  while (v16 != v17);
}

void sub_20F3D98D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
}

void MIL::Builder::BlockBuilder::RemoveOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v4 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOperation(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20F3D99A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOperation(uint64_t a1, MIL::Builder::OperationBuilder::OperationBuilderImpl ***a2)
{
  if (*a2)
  {
    uint64_t v5 = *(uint64_t **)(a1 + 48);
    uint64_t v6 = *(uint64_t **)(a1 + 56);
    uint64_t v7 = a1 + 48;
    uint64_t v8 = v5;
    if (v5 != v6)
    {
      while ((MIL::Builder::OperationBuilder::OperationBuilderImpl **)*v8 != *a2)
      {
        v8 += 2;
        if (v8 == v6)
        {
          uint64_t v8 = v6;
          break;
        }
      }
    }
    uint64_t v9 = std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<MIL::Builder::OperationBuilder> *>,std::shared_ptr<MIL::Builder::OperationBuilder>>(v5, v6, a2);
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::erase(v7, (uint64_t)v9, *(long long **)(a1 + 56));
    if (v8 != v6)
    {
      char v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v11 = *a2;
      unint64_t v12 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationRemoved(a1, &v11, 0);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
}

void sub_20F3D9A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::RemoveOperations(uint64_t a1, void *a2, uint64_t a3, char a4)
{
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOperations(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if (!a3) {
    goto LABEL_15;
  }
  unint64_t v7 = 0;
  uint64_t v8 = 8 * a3;
  char v9 = 1;
  char v10 = a2;
  do
  {
    unint64_t v11 = *v10;
    if (*v10 >= (uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::out_of_range::out_of_range[abi:ne180100](exception, "Operation index out of range");
      std::string v21 = (struct type_info *)off_26412C1E0;
      uint64_t v22 = (void (*)(void *))MEMORY[0x263F8C068];
      goto LABEL_18;
    }
    if (!(v9 & 1 | (v11 > v7)))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Indices are not strictly increasing");
      std::string v21 = (struct type_info *)off_26412C1F0;
      uint64_t v22 = (void (*)(void *))MEMORY[0x263F8C080];
LABEL_18:
      __cxa_throw(exception, v21, v22);
    }
    char v9 = 0;
    ++v10;
    unint64_t v7 = v11;
    v8 -= 8;
  }
  while (v8);
  uint64_t v12 = 0;
  uint64_t v13 = -a3;
  uint64_t v14 = 1 - a3;
  uint64_t v15 = a2 + 1;
  do
  {
    if (v14 == v12)
    {
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = (*(void *)(a1 + 56) - v16) >> 4;
    }
    else
    {
      uint64_t v17 = *v15;
      uint64_t v16 = *(void *)(a1 + 48);
    }
    uint64_t v18 = *(v15 - 1);
    long long v19 = *(_OWORD *)(v16 + 16 * v18);
    long long v23 = v19;
    if (*((void *)&v19 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v19 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationRemoved(a1, (MIL::Builder::OperationBuilder::OperationBuilderImpl ***)&v23, a4);
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *>((uint64_t)&v24, (long long *)(*(void *)(a1 + 48) + 16 * v18 + 16), (long long *)(*(void *)(a1 + 48) + 16 * v17), *(void *)(a1 + 48) + 16 * (v12 + v18));
    --v12;
    ++v15;
  }
  while (v13 != v12);
LABEL_15:
  std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::resize((uint64_t *)(a1 + 48), ((uint64_t)(*(void *)(a1 + 56) - *(void *)(a1 + 48)) >> 4) - a3);
}

void sub_20F3D9C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::AddInput(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddInput(v2, (uint64_t)__p);
}

void sub_20F3D9CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::AddInput(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  MIL::IRNamedValueType::Make();
}

void sub_20F3D9F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void **a16, void *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::UpdateOpInput(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)char v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v8 = *a3;
  char v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v7 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOpInput(v4, (long long *)v10, &v8, (uint64_t)__p);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_20F3DA008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MIL::Builder::BlockBuilder::AddConst(v18, (uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOpInput(uint64_t a1, long long *a2, void *a3, uint64_t a4)
{
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot update input of a null OperationBuilder");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v8 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v8) {
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100](a1 + 376, v8);
  }
  uint64_t v9 = a1 + 112;
  uint64_t v14 = a2;
  char v10 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v14);
  uint64_t result = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)(v10 + 40), a3, a3);
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(a4 + 23)) {
      return result;
    }
    goto LABEL_6;
  }
  if (*(void *)(a4 + 8))
  {
LABEL_6:
    uint64_t v14 = (long long *)a4;
    uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v9, (unsigned __int8 *)a4, (uint64_t)&std::piecewise_construct, &v14);
    return std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__erase_unique<std::shared_ptr<MIL::Builder::OperationBuilder>>((void *)v12 + 5, a3);
  }
  return result;
}

void sub_20F3DA13C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::RemoveOpInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = (std::__shared_weak_count *)a3[1];
  uint64_t v5 = *a3;
  uint64_t v6 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOpInput(v3, (unsigned __int8 *)__p, &v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3DA1D0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Builder::BlockBuilder::BlockBuilderImpl::RemoveOpInput(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot update input of a null OperationBuilder");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v6 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v6) {
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100](a1 + 376, v6);
  }
  uint64_t v7 = (void *)(a1 + 112);
  uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v7, a2);
  if (result)
  {
    uint64_t v11 = a2;
    uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)v7, a2, (uint64_t)&std::piecewise_construct, (long long **)&v11);
    return std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__erase_unique<std::shared_ptr<MIL::Builder::OperationBuilder>>((void *)v9 + 5, a3);
  }
  return result;
}

void sub_20F3DA2BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::UpdateOpOutput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v9 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOpOutput(v4, (unsigned __int8 *)__p, a3, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3DA350(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOpOutput(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot update output of a null OperationBuilder");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v8 = a1 + 72;
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 72), a2))
  {
    uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v17 = std::string::append(&v19, " is already defined in this block.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v16, &v20);
    __cxa_throw(v16, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v9 = *(void *)(a1 + 376);
  *(void *)(a1 + 376) = 0;
  if (v9) {
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100](a1 + 376, v9);
  }
  v20.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  char v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (long long **)&v20);
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 6);
  *((void *)v10 + 5) = v12;
  *((void *)v10 + 6) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return (*(uint64_t (**)(void, unsigned __int8 *, uint64_t, void))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40), a2, a3, 0);
}

void sub_20F3DA514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MIL::Builder::BlockBuilder::RenameOpOutput(uint64_t a1, uint64_t a2, std::string::size_type a3, uint64_t *a4)
{
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = (std::__shared_weak_count *)a4[1];
  uint64_t v6 = *a4;
  uint64_t v7 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::RenameOpOutput(v4, a2, a3, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_20F3DA5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::RenameOpOutput(void *a1, uint64_t a2, std::string::size_type a3, uint64_t *a4)
{
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot rename output of a null OperationBuilder");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v8 = a1 + 9;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 9, (unsigned __int8 *)a2))
  {
    v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    char v31 = std::string::append(&v39, " doesn't exist in this block.");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v30, &v40);
    __cxa_throw(v30, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v8, (unsigned __int8 *)a3))
  {
    v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    int v34 = std::string::append(&v39, " is already defined in this block.");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v33, &v40);
    __cxa_throw(v33, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v9 = a1[47];
  a1[47] = 0;
  if (v9) {
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)(a1 + 47), v9);
  }
  v40.__r_.__value_.__r.__words[0] = a3;
  char v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v8, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (long long **)&v40);
  uint64_t v12 = *a4;
  uint64_t v11 = a4[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 6);
  *((void *)v10 + 5) = v12;
  *((void *)v10 + 6) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = a1[5];
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 24))(v14, a2, 1);
  (*(void (**)(uint64_t, std::string::size_type, uint64_t, void))(*(void *)v14 + 80))(v14, a3, v15, 0);
  uint64_t v16 = a1[5];
  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetValue((uint64_t)a1, (long long *)a2, &v40);
  (*(void (**)(uint64_t, std::string::size_type, std::string *, void))(*(void *)v16 + 88))(v16, a3, &v40, 0);
  if (v40.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v40.__r_.__value_.__l.__size_);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v38 = *(std::string *)a3;
  }
  uint64_t v36 = 0;
  v37 = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceUsesOfInputVariable(a1, (unsigned __int8 *)a2, (uint64_t)&v38, &v36);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v38.__r_.__value_.__l.__data_);
  }
  uint64_t v18 = a1[22];
  uint64_t v17 = a1[23];
  if (v17 != v18)
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    while (1)
    {
      uint64_t v21 = v18 + 24 * v20;
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) == 0) {
        uint64_t v23 = *(unsigned __int8 *)(v21 + 23);
      }
      else {
        uint64_t v23 = *(void *)(v21 + 8);
      }
      uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
      int v25 = (char)v24;
      if ((v24 & 0x80u) != 0) {
        uint64_t v24 = *(void *)(a2 + 8);
      }
      if (v23 != v24) {
        goto LABEL_38;
      }
      uint64_t v26 = v25 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v22 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*(const void **)v21, v26, *(void *)(v21 + 8))) {
        goto LABEL_37;
      }
LABEL_38:
      ++v20;
      v19 += 24;
      if (v20 >= 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3)) {
        goto LABEL_39;
      }
    }
    if (*(unsigned char *)(v21 + 23))
    {
      uint64_t v27 = v19;
      while (*(unsigned __int8 *)(v18 + v27) == *v26)
      {
        ++v26;
        ++v27;
        if (!--v22) {
          goto LABEL_37;
        }
      }
      goto LABEL_38;
    }
LABEL_37:
    std::string::operator=((std::string *)(v18 + 24 * v20), (const std::string *)a3);
    uint64_t v18 = a1[22];
    uint64_t v17 = a1[23];
    goto LABEL_38;
  }
LABEL_39:
  (*(void (**)(void, uint64_t))(*(void *)a1[5] + 112))(a1[5], a2);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v8, (unsigned __int8 *)a2);
}

void sub_20F3DAA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v27 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void sub_20F3DAACC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x20F3DAAC4);
}

void sub_20F3DAAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  JUMPOUT(0x20F3DAAC4);
}

uint64_t MIL::Builder::BlockBuilder::GetType(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 8) + 40) + 24))(*(void *)(*(void *)(a1 + 8) + 40), a2, 1);
}

void MIL::Builder::BlockBuilder::GetValue(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::GetValue(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 56))(&v12);
  if (v12)
  {
    uint64_t v6 = v13;
    *a3 = v12;
    a3[1] = v6;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v11 = a2;
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 72, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v11);
    uint64_t v9 = (MIL::Builder::OperationBuilder *)*((void *)v7 + 5);
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v7 + 6);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v9)
    {
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v9);
      if ((*(unsigned int (**)(uint64_t))(*(void *)Operator + 104))(Operator)) {
        MIL::Builder::OperationBuilder::GetConstants((const void ****)v9);
      }
    }
    *a3 = 0;
    a3[1] = 0;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_20F3DAD9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  a9 = (void **)&a12;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::CreateBlock(long long ***this)
{
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateBlock(long long **this)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap((MIL::Builder::BlockBuilder::BlockBuilderImpl *)this, (uint64_t)v11);
  if (std::operator==[abi:ne180100]<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>((uint64_t)v11, this + 48))
  {
    memset(v10, 0, sizeof(v10));
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(v10, this[19], this[20], this[20] - this[19]);
    memset(&v9, 0, sizeof(v9));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v9, this[22], this[23], 0xAAAAAAAAAAAAAAABLL * (((char *)this[23] - (char *)this[22]) >> 3));
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v8, (uint64_t)(this + 25));
    memset(v7, 0, sizeof(v7));
    std::vector<std::shared_ptr<MIL::IROperation>>::reserve(v7, this[7] - this[6]);
    uint64_t v2 = this[6];
    if (v2 != this[7])
    {
      uint64_t v3 = *(const void *****)v2;
      uint64_t v4 = *((void *)v2 + 1);
      if (v4) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::CreateOperation(v3);
    }
    uint64_t v5 = this[31];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 1, 1uLL, memory_order_relaxed);
    }
    MIL::IRBlock::Make();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "State Operation dependencies are violated after program modification. Use UpdateStateDependencyMap() if the modification was intentional.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3DB0F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  __cxa_free_exception(v27);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::SetParent(MIL::Builder::BlockBuilder *this, const MIL::IRScope *a2)
{
  return (*(uint64_t (**)(void, const MIL::IRScope *))(**(void **)(*((void *)this + 1) + 40) + 104))(*(void *)(*((void *)this + 1) + 40), a2);
}

void MIL::Builder::BlockBuilder::TryGetConstExprValue()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "TryGetConstExprValue has been deprecated.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3DB268(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::UpdateStateDependencyMap(MIL::Builder::BlockBuilder::BlockBuilderImpl **this)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateStateDependencyMap(this[1]);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateStateDependencyMap(MIL::Builder::BlockBuilder::BlockBuilderImpl *this)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap(this, (uint64_t)v3);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__move_assign((uint64_t)this + 384, v3);
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)v3);
}

void MIL::Builder::BlockBuilder::UpdateStateDependencyMapForState(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateStateDependencyMapForState(v2, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20F3DB338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateStateDependencyMapForState(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v8 = *(std::string *)a2;
  }
  char v9 = 1;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ExtractStateOpsHelper(a1, (unsigned __int8 *)&v8, (uint64_t)v10);
  if (v9 && SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v11)
  {
    uint64_t v12 = (long long *)a2;
    uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v10, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v12);
    uint64_t v12 = (long long *)a2;
    uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 384, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v12);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__move_assign((uint64_t)(v5 + 40), v7);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table((uint64_t)v7);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v10);
}

void sub_20F3DB448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table((uint64_t)&a10);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v21 - 72);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::AddOutput(MIL::Builder::BlockBuilder *this, MIL::Builder::Variable::VariableImpl **a2)
{
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set an output to nullptr.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v2 = *((void *)this + 1);
  Name = (const void **)MIL::Builder::Variable::GetName(a2);

  MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOutput(v2, Name);
}

void sub_20F3DB508(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::AddOutput(uint64_t a1, const void **a2)
{
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 72), (unsigned __int8 *)a2)&& !(*(uint64_t (**)(void, const void **, uint64_t))(**(void **)(a1 + 40) + 24))(*(void *)(a1 + 40), a2, 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" is neither a function input nor is produced by any OperationBuilder in this block.", a2, (void **)&v9.__r_.__value_.__l.__data_);
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v4 = (uint64_t *)(a1 + 176);
  unint64_t v5 = *(void *)(a1 + 184);
  if (v5 >= *(void *)(a1 + 192))
  {
    uint64_t v6 = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (long long *)a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, (long long *)a2);
    uint64_t v6 = v5 + 24;
  }
  *(void *)(a1 + 184) = v6;
  uint64_t v7 = *(void **)(a1 + 376);
  if (v7)
  {
    MIL::Builder::BlockBuilder::DataDependencyGraph::AddBlockOutput(v7, (uint64_t)a2);
  }
}

void sub_20F3DB640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void MIL::Builder::BlockBuilder::AddOutput(uint64_t a1, const void **a2)
{
}

std::string *MIL::Builder::BlockBuilder::GetOutputNames@<X0>(MIL::Builder::BlockBuilder *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 1);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(long long **)(v2 + 176), *(long long **)(v2 + 184), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 184) - *(void *)(v2 + 176)) >> 3));
}

void MIL::Builder::BlockBuilder::GetInputNames(MIL::Builder::BlockBuilder::BlockBuilderImpl **this@<X0>, std::vector<std::string> *a2@<X8>)
{
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::GetInputNames(MIL::Builder::BlockBuilder::BlockBuilderImpl *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, (uint64_t)(*((void *)this + 20) - *((void *)this + 19)) >> 4);
  unint64_t v5 = (MIL::IRNamedValueType **)*((void *)this + 19);
  uint64_t v4 = (MIL::IRNamedValueType **)*((void *)this + 20);
  while (v5 != v4)
  {
    Name = (long long *)MIL::IRNamedValueType::GetName(*v5);
    end = a2->__end_;
    if (end >= a2->__end_cap_.__value_)
    {
      uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, Name);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, Name);
      uint64_t v8 = (uint64_t)&end[1];
    }
    a2->__end_ = (std::vector<std::string>::pointer)v8;
    v5 += 2;
  }
}

void sub_20F3DB74C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::GetOutputs(MIL::Builder::BlockBuilder::BlockBuilderImpl **this@<X0>, void **a2@<X8>)
{
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOutputs(MIL::Builder::BlockBuilder::BlockBuilderImpl *this@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::string const*>::reserve(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 23) - *((void *)this + 22)) >> 3));
  uint64_t v5 = *((void *)this + 22);
  for (uint64_t i = *((void *)this + 23); v5 != i; v5 += 24)
  {
    Variable = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)this, v5);
    uint64_t v8 = Variable;
    char v10 = (unsigned __int8 **)a2[1];
    unint64_t v9 = (unint64_t)a2[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = ((char *)v10 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)*a2;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v15);
      }
      else {
        int v16 = 0;
      }
      uint64_t v17 = (unsigned __int8 **)&v16[8 * v12];
      *uint64_t v17 = v8;
      uint64_t v11 = (char *)(v17 + 1);
      uint64_t v19 = (char *)*a2;
      uint64_t v18 = (char *)a2[1];
      if (v18 != *a2)
      {
        do
        {
          unint64_t v20 = (unsigned __int8 *)*((void *)v18 - 1);
          v18 -= 8;
          *--uint64_t v17 = v20;
        }
        while (v18 != v19);
        uint64_t v18 = (char *)*a2;
      }
      *a2 = v17;
      a2[1] = v11;
      a2[2] = &v16[8 * v15];
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *char v10 = Variable;
      uint64_t v11 = (char *)(v10 + 1);
    }
    a2[1] = v11;
  }
}

void sub_20F3DB8C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::BlockBuilder::GetLocation(MIL::Builder::BlockBuilder *this)
{
  return *(void *)(*((void *)this + 1) + 240);
}

uint64_t MIL::Builder::BlockBuilder::GetLocationPtr(MIL::Builder::BlockBuilder *this)
{
  return *((void *)this + 1) + 240;
}

void MIL::Builder::BlockBuilder::SetLocation(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::SetLocation(v2, (uint64_t *)&v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_20F3DB94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::SetLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set an empty location.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 248);
  *(void *)(a1 + 24std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v2;
  *(void *)(a1 + 248) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20F3DB9F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::GetScopePtr(MIL::Builder::BlockBuilder *this)
{
  return *(void *)(*((void *)this + 1) + 40);
}

uint64_t MIL::Builder::BlockBuilder::GetContext@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(this + 8);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t MIL::Builder::BlockBuilder::GetOpsetName(MIL::Builder::BlockBuilder *this)
{
  return *((void *)this + 1) + 16;
}

void MIL::Builder::BlockBuilder::SetAttribute(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *(_OWORD *)a3;
  *(_OWORD *)std::string __p = v4;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::SetAttribute(v3, (long long *)__p, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3DBAB0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::SetAttribute(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v7 = a2;
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 200, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 6);
  *(_OWORD *)(v4 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

unsigned __int8 *MIL::Builder::BlockBuilder::TryGetAttribute@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 200), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

std::vector<std::string>::iterator MIL::Builder::BlockBuilder::RemoveOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(v3 + 176);
  uint64_t v5 = *(void *)(v3 + 184);
  uint64_t v6 = (std::vector<std::string> *)(v3 + 176);
  v7.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(v4, v5, a2);
  v8.__i_ = v6->__end_;

  return std::vector<std::string>::erase(v6, v7, v8);
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::BlockBuilder::RemoveOutput(MIL::Builder::BlockBuilder *this, MIL::Builder::Variable::VariableImpl **a2)
{
  uint64_t result = MIL::Builder::Variable::TryGetName(a2);
  if (result)
  {
    uint64_t v4 = (uint64_t)result;
    uint64_t v5 = *((void *)this + 1);
    uint64_t v6 = *(void *)(v5 + 176);
    uint64_t v7 = *(void *)(v5 + 184);
    std::vector<std::string>::const_iterator v8 = (std::vector<std::string> *)(v5 + 176);
    v9.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(v6, v7, v4);
    v10.__i_ = v8->__end_;
    return (MIL::Builder::Variable::VariableImpl *)std::vector<std::string>::erase(v8, v9, v10).__i_;
  }
  return result;
}

unsigned __int8 *MIL::Builder::BlockBuilder::ReplaceInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceInput(*(void *)(a1 + 8), a2, a3, a4);
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a2);
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 40) + 80))(*(void *)(a1 + 40), a3, a4, 1);
  uint64_t v8 = *(void *)(a1 + 152);
  if (*(void *)(a1 + 160) != v8)
  {
    unint64_t v9 = 0;
    do
    {
      Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(v8 + 16 * v9));
      uint64_t v11 = Name[23];
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = Name[23];
      }
      else {
        uint64_t v12 = *((void *)Name + 1);
      }
      uint64_t v13 = *(unsigned __int8 *)(a2 + 23);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(a2 + 8);
      }
      if (v12 == v13)
      {
        if (v14 >= 0) {
          unint64_t v15 = (unsigned __int8 *)a2;
        }
        else {
          unint64_t v15 = *(unsigned __int8 **)a2;
        }
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)Name, v15, *((void *)Name + 1)))
          {
LABEL_20:
            if (*(char *)(a3 + 23) < 0) {
              std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
            }
            else {
              std::string v28 = *(std::string *)a3;
            }
            MIL::IRNamedValueType::Make();
          }
        }
        else
        {
          if (!Name[23]) {
            goto LABEL_20;
          }
          while (*Name == *v15)
          {
            ++Name;
            ++v15;
            if (!--v11) {
              goto LABEL_20;
            }
          }
        }
      }
      ++v9;
      uint64_t v8 = *(void *)(a1 + 152);
    }
    while (v9 < (*(void *)(a1 + 160) - v8) >> 4);
  }
  std::string::size_type v16 = *(void *)(a3 + 8);
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v17 = *(void *)(a3 + 8);
  }
  uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a2 + 8);
  }
  if (v17 == v18)
  {
    if (v19 >= 0) {
      unint64_t v20 = (unsigned __int8 *)a2;
    }
    else {
      unint64_t v20 = *(unsigned __int8 **)a2;
    }
    if ((*(unsigned char *)(a3 + 23) & 0x80) != 0)
    {
      uint64_t v23 = *(const std::string::value_type **)a3;
      if (!memcmp(*(const void **)a3, v20, *(void *)(a3 + 8))) {
        return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a3);
      }
      goto LABEL_43;
    }
    if (!*(unsigned char *)(a3 + 23)) {
      return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a3);
    }
    uint64_t v21 = (unsigned __int8 *)a3;
    uint64_t v22 = *(unsigned __int8 *)(a3 + 23);
    while (*v21 == *v20)
    {
      ++v21;
      ++v20;
      if (!--v22) {
        return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a3);
      }
    }
  }
  if ((*(unsigned char *)(a3 + 23) & 0x80) != 0)
  {
    uint64_t v23 = *(const std::string::value_type **)a3;
LABEL_43:
    std::string::__init_copy_ctor_external(&v27, v23, v16);
    goto LABEL_44;
  }
  std::string v27 = *(std::string *)a3;
LABEL_44:
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceUsesOfInputVariable((void *)a1, (unsigned __int8 *)a2, (uint64_t)&v27, &v25);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable(a1, a3);
}

void sub_20F3DBED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100]((void ***)(v23 - 56), 0);
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::ReplaceOutput(uint64_t a1, uint64_t a2, std::string *a3)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceOutput(*(void **)(a1 + 8), a2, a3, 1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceOutput(void *a1, uint64_t a2, std::string *a3, int a4)
{
  uint64_t v8 = a1 + 9;
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 9, (unsigned __int8 *)a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v25 = std::string::append(&v60, ".");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v61);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v8, (unsigned __int8 *)a3);
  if (!result)
  {
    std::string v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::string v28 = std::string::append(&v60, ".");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v61.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v27, &v61);
    __cxa_throw(v27, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (a4)
  {
    Variable = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)a1, a2);
    uint64_t v11 = MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)a1, (uint64_t)a3);
    uint64_t Type = MIL::Builder::Variable::TryGetType((MIL::Builder::Variable::VariableImpl **)Variable);
    uint64_t result = MIL::Builder::Variable::TryGetType((MIL::Builder::Variable::VariableImpl **)v11);
    if (Type != result)
    {
      v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      p_data = (const void **)&a3->__r_.__value_.__l.__data_;
      long long v32 = v30;
      v33 = p_data;
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(" and ", p_data, (void **)&v55.__r_.__value_.__l.__data_);
      int v34 = *(char *)(a2 + 23);
      if (v34 >= 0) {
        long long v35 = (const std::string::value_type *)a2;
      }
      else {
        long long v35 = *(const std::string::value_type **)a2;
      }
      if (v34 >= 0) {
        std::string::size_type v36 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v36 = *(void *)(a2 + 8);
      }
      v37 = std::string::append(&v55, v35, v36);
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v56.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::string v39 = std::string::append(&v56, " have different types, cannot replace output ");
      long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
      v57.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v40;
      v39->__r_.__value_.__l.__size_ = 0;
      v39->__r_.__value_.__r.__words[2] = 0;
      v39->__r_.__value_.__r.__words[0] = 0;
      int v41 = *(char *)(a2 + 23);
      if (v41 >= 0) {
        uint64_t v42 = (const std::string::value_type *)a2;
      }
      else {
        uint64_t v42 = *(const std::string::value_type **)a2;
      }
      if (v41 >= 0) {
        std::string::size_type v43 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        std::string::size_type v43 = *(void *)(a2 + 8);
      }
      v44 = std::string::append(&v57, v42, v43);
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v58.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      v46 = std::string::append(&v58, " with ");
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v59.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      int v48 = *((char *)v33 + 23);
      if (v48 >= 0) {
        v49 = (const std::string::value_type *)v33;
      }
      else {
        v49 = (const std::string::value_type *)*v33;
      }
      if (v48 >= 0) {
        std::string::size_type v50 = *((unsigned __int8 *)v33 + 23);
      }
      else {
        std::string::size_type v50 = (std::string::size_type)v33[1];
      }
      v51 = std::string::append(&v59, v49, v50);
      long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
      v60.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v52;
      v51->__r_.__value_.__l.__size_ = 0;
      v51->__r_.__value_.__r.__words[2] = 0;
      v51->__r_.__value_.__r.__words[0] = 0;
      v53 = std::string::append(&v60, ".");
      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
      v61.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v54;
      v53->__r_.__value_.__l.__size_ = 0;
      v53->__r_.__value_.__r.__words[2] = 0;
      v53->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v32, &v61);
      __cxa_throw(v32, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  uint64_t v14 = a1[22];
  uint64_t v13 = a1[23];
  if (v13 != v14)
  {
    uint64_t v15 = 0;
    unint64_t v16 = 0;
    while (1)
    {
      uint64_t v17 = v14 + 24 * v16;
      uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
      if ((v18 & 0x80u) == 0) {
        uint64_t v19 = *(unsigned __int8 *)(v17 + 23);
      }
      else {
        uint64_t v19 = *(void *)(v17 + 8);
      }
      uint64_t v20 = *(unsigned __int8 *)(a2 + 23);
      int v21 = (char)v20;
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = *(void *)(a2 + 8);
      }
      if (v19 != v20) {
        goto LABEL_24;
      }
      uint64_t v22 = v21 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v18 & 0x80) == 0) {
        break;
      }
      uint64_t result = memcmp(*(const void **)v17, v22, *(void *)(v17 + 8));
      if (!result) {
        goto LABEL_23;
      }
LABEL_24:
      ++v16;
      v15 += 24;
      if (v16 >= 0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3)) {
        return result;
      }
    }
    if (*(unsigned char *)(v17 + 23))
    {
      uint64_t v23 = v15;
      while (*(unsigned __int8 *)(v14 + v23) == *v22)
      {
        ++v22;
        ++v23;
        if (!--v18) {
          goto LABEL_23;
        }
      }
      goto LABEL_24;
    }
LABEL_23:
    uint64_t result = (uint64_t)std::string::operator=((std::string *)(v14 + 24 * v16), a3);
    uint64_t v14 = a1[22];
    uint64_t v13 = a1[23];
    goto LABEL_24;
  }
  return result;
}

void sub_20F3DC344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (*(char *)(v51 - 105) < 0) {
    operator delete(*(void **)(v51 - 128));
  }
  if (a49 < 0) {
    operator delete(__p);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v50) {
    __cxa_free_exception(v49);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::BlockBuilder::ReplaceOutput(uint64_t a1, uint64_t a2, std::string *a3, int a4)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::ReplaceOutput(*(void **)(a1 + 8), a2, a3, a4);
}

BOOL MIL::Builder::BlockBuilder::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((void *)(*(void *)(a1 + 8) + 200), a2) != 0;
}

uint64_t MIL::Builder::BlockBuilder::GetAttributes(MIL::Builder::BlockBuilder *this)
{
  return *((void *)this + 1) + 200;
}

void MIL::Builder::BlockBuilder::UpdateOutputNames(uint64_t a1, long long **a2)
{
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::UpdateOutputNames(uint64_t *a1, long long **a2)
{
  uint64_t v4 = (std::vector<std::string> *)(a1 + 22);
  std::vector<std::string>::__clear[abi:ne180100](a1 + 22);
  std::vector<std::string>::reserve(v4, 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    MIL::Builder::BlockBuilder::BlockBuilderImpl::GetVariable((uint64_t)a1, (uint64_t)v5);
    unint64_t v7 = a1[23];
    if (v7 >= a1[24])
    {
      uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)v4, v5);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, v5);
      uint64_t v8 = v7 + 24;
    }
    a1[23] = v8;
    uint64_t v5 = (long long *)((char *)v5 + 24);
  }
}

void *MIL::BuilderPrivate::BlockBuilderPrivate::PermuteOperations(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return MIL::Builder::BlockBuilder::BlockBuilderImpl::PermuteOperations(*(void **)(a1 + 8), a2, a3, a4);
}

void *MIL::Builder::BlockBuilder::BlockBuilderImpl::PermuteOperations(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v26 = a3;
  unint64_t v27 = a4;
  if (a4)
  {
    uint64_t v5 = result;
    for (unint64_t i = 0; i < a4; ++i)
    {
      uint64_t v7 = v26;
      unint64_t v8 = *(void *)(v26 + 8 * i);
      if (v8 != i)
      {
        uint64_t v9 = v5[6];
        if (i + a2 >= (v5[7] - v9) >> 4) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        long long v10 = *(_OWORD *)(v9 + 16 * (i + a2));
        long long v25 = v10;
        if (*((void *)&v10 + 1))
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v10 + 1) + 8), 1uLL, memory_order_relaxed);
          unint64_t v8 = *(void *)(v7 + 8 * i);
        }
        unint64_t v11 = i;
        while (v8 != i)
        {
          unint64_t v12 = v8;
          unint64_t v13 = v8 + a2;
          uint64_t v14 = v5[6];
          unint64_t v15 = (v5[7] - v14) >> 4;
          unint64_t v16 = v11 + a2;
          if (v15 <= v13 || v15 <= v16) {
            std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
          }
          long long v18 = *(_OWORD *)(v14 + 16 * v13);
          uint64_t v19 = *(void *)(v14 + 16 * v13 + 8);
          if (v19) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v20 = v14 + 16 * v16;
          int v21 = *(std::__shared_weak_count **)(v20 + 8);
          *(_OWORD *)uint64_t v20 = v18;
          if (v21) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v21);
          }
          *(void *)MIL::Util::Span<unsigned long,18446744073709551615ul>::At(&v26, v1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v11;
          unint64_t v8 = *(void *)(v26 + 8 * v12);
          unint64_t v11 = v12;
        }
        uint64_t v22 = v5[6];
        if (v11 >= (v5[7] - v22) >> 4) {
          std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v23 = v22 + 16 * v11;
        uint64_t v24 = *(std::__shared_weak_count **)(v23 + 8);
        *(_OWORD *)uint64_t v23 = v25;
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        uint64_t result = (void *)MIL::Util::Span<unsigned long,18446744073709551615ul>::At(&v26, v11);
        *uint64_t result = v11;
        a4 = v27;
      }
    }
  }
  return result;
}

void sub_20F3DC6EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3DC990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F3DCA40(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,0>(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__construct_node_hash<std::string const&,decltype(nullptr)>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F3DCDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__construct_node_hash<std::string const&,decltype(nullptr)>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3DCE94(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Builder::Variable const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Builder::Variable const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

unsigned __int8 *MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOperator@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  if (!*a1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v8 = std::string::append(&v13, ".");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t Opset = MIL::MILContext::GetOpset(*a1);
  double result = MIL::IROpset::TryGetOperatorSharedPtr(Opset, a2, a3);
  if (!*a3)
  {
    unint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint8x8_t v11 = std::string::append(&v13, ".");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v10, &v14);
    __cxa_throw(v10, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3DD0D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      long long v25 = *(std::__shared_weak_count **)(v21 + 8);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

BOOL MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckAddedOperation(MIL::Builder::BlockBuilder::BlockBuilderImpl *this, MIL::Builder::OperationBuilder::OperationBuilderImpl **a2)
{
  if (MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)a2))
  {
    unint64_t v4 = 0;
    uint64_t v5 = (void *)((char *)this + 72);
    do
    {
      OutputName = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName(a2, v4);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v5, OutputName))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        long long v9 = std::string::append(&v12, " in this block.");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v13);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      ++v4;
    }
    while (v4 < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)a2));
  }
  BOOL result = MIL::Builder::OperationBuilder::IsPartOfBlock((MIL::Builder::OperationBuilder *)a2);
  if (result)
  {
    uint8x8_t v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Operation is already part of another BlockBuilder.");
    __cxa_throw(v11, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3DD2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  __cxa_free_exception(v21);
  _Unwind_Resume(a1);
}

void *MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationIterator(uint64_t a1, void *a2)
{
  BOOL result = *(void **)(a1 + 48);
  unint64_t v4 = *(void **)(a1 + 56);
  if (result != v4)
  {
    while (*result != *a2)
    {
      result += 2;
      if (result == v4)
      {
        BOOL result = v4;
        break;
      }
    }
  }
  if (result == v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Trying to find index for Operation not in this Block.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3DD3D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::insert(uint64_t *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v7 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v8 = (uint64_t)a2 - *a1;
  uint64_t v9 = v8 >> 4;
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v16 = ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v16 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = v10 - v7;
    if (v17 >> 3 > v16) {
      unint64_t v16 = v17 >> 3;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    int v41 = a1 + 2;
    if (v18)
    {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a1 + 2), v18);
      uint64_t v21 = v20;
    }
    else
    {
      unint64_t v19 = 0;
      uint64_t v21 = 0;
    }
    int v23 = (long long *)&v19[16 * v9];
    long long v38 = v19;
    *(void *)&long long v39 = v23;
    *((void *)&v39 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v23;
    long long v40 = &v19[16 * v21];
    if (v9 == v21)
    {
      if (v8 < 1)
      {
        if ((void *)v7 == v4) {
          unint64_t v25 = 1;
        }
        else {
          unint64_t v25 = v8 >> 3;
        }
        uint64_t v45 = v11;
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v11, v25);
        uint64_t v28 = v39;
        uint64_t v29 = *((void *)&v39 + 1) - v39;
        if (*((void *)&v39 + 1) == (void)v39)
        {
          int64x2_t v34 = vdupq_n_s64(v39);
          unint64_t v31 = (unint64_t)&v26[16 * (v25 >> 2)];
        }
        else
        {
          uint64_t v30 = v29 >> 4;
          unint64_t v31 = (unint64_t)&v26[16 * (v25 >> 2) + (v29 & 0xFFFFFFFFFFFFFFF0)];
          uint64_t v32 = 16 * v30;
          v33 = &v26[16 * (v25 >> 2)];
          do
          {
            *(_OWORD *)v33 = *(_OWORD *)v28;
            v33 += 16;
            *(void *)uint64_t v28 = 0;
            *(void *)(v28 + 8) = 0;
            v28 += 16;
            v32 -= 16;
          }
          while (v32);
          int64x2_t v34 = (int64x2_t)v39;
        }
        long long v35 = v40;
        uint64_t v42 = v38;
        long long v38 = v26;
        *(void *)&long long v39 = &v26[16 * (v25 >> 2)];
        int64x2_t v43 = v34;
        *((void *)&v39 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
        long long v40 = &v26[16 * v27];
        v44 = v35;
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&v42);
        int v23 = (long long *)*((void *)&v39 + 1);
      }
      else
      {
        if (v9 >= -1) {
          uint64_t v24 = v9 + 1;
        }
        else {
          uint64_t v24 = v9 + 2;
        }
        std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *>((uint64_t)&v42, v23, v23, (uint64_t)&v23[-(v24 >> 1)]);
        *(void *)&long long v39 = v39 - 16 * (v24 >> 1);
        *((void *)&v39 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v23;
      }
    }
    *(void *)int v23 = *a3;
    uint64_t v36 = a3[1];
    *((void *)v23 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v36;
    if (v36)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      int v23 = (long long *)*((void *)&v39 + 1);
    }
    *((void *)&v39 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v23 + 1;
    unint64_t v4 = (void *)std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(a1, &v38, v4);
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&v38);
  }
  else if (a2 == (void *)v6)
  {
    long long v22 = *(_OWORD *)a3;
    *(_OWORD *)a2 = *(_OWORD *)a3;
    if (*((void *)&v22 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v22 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    a1[1] = (uint64_t)(a2 + 2);
  }
  else
  {
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__move_range((uint64_t)a1, a2, v6, (uint64_t)(a2 + 2));
    if (v4 <= a3) {
      a3 += 2 * (a1[1] > (unint64_t)a3);
    }
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    *unint64_t v4 = v13;
    uint64_t v14 = v7 + 16 * v9;
    unint64_t v15 = *(std::__shared_weak_count **)(v14 + 8);
    *(void *)(v14 + 8) = v12;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  return v4;
}

void sub_20F3DD664(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void **std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  BOOL result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, v13);
    unint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    BOOL result = std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20F3DD780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationAdded(void *a1, uint64_t a2, MIL::Builder::BlockBuilder *a3)
{
  MIL::Builder::OperationBuilder::GetInputArguments(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, (uint64_t)&v40);
  for (unint64_t i = v42; i; unint64_t i = (uint64_t **)*i)
  {
    if (MIL::Builder::Variable::TryGetName((MIL::Builder::Variable::VariableImpl **)i[2]))
    {
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)MIL::Builder::Variable::GetName((MIL::Builder::Variable::VariableImpl **)i[2]);
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 14), (unsigned __int8 *)v39.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v39);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)(v7 + 40), (void *)a2, (void *)a2);
    }
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v40);
  MIL::Builder::OperationBuilder::GetOutputs(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, (void **)&v40);
  uint64_t v8 = v40;
  uint64_t v9 = v41;
  if (v40 != v41)
  {
    do
    {
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)MIL::Builder::Variable::GetName(*v8);
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 9), (unsigned __int8 *)v39.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v39);
      uint64_t v12 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2;
      uint64_t v11 = *(void *)(a2 + 8);
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v13 = (std::__shared_weak_count *)*((void *)v10 + 6);
      *((void *)v10 + 5) = v12;
      *((void *)v10 + 6) = v11;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      uint64_t v14 = a1[5];
      Name = MIL::Builder::Variable::GetName(*v8);
      uint64_t Type = MIL::Builder::Variable::TryGetType(*v8);
      (*(void (**)(uint64_t, MIL::Builder::Variable::VariableImpl *, uint64_t, void))(*(void *)v14 + 80))(v14, Name, Type, 0);
      ++v8;
    }
    while (v8 != v9);
    uint64_t v8 = v40;
  }
  if (v8)
  {
    int v41 = v8;
    operator delete(v8);
  }
  MIL::Builder::OperationBuilder::GetBlocks(*(MIL::Builder::OperationBuilder **)a2, &v40);
  long long v17 = v40;
  unint64_t v18 = v41;
  while (v17 != v18)
  {
    uint64_t v19 = *((void *)(*v17)[1] + 5);
    (*(void (**)(uint64_t, void))(*(void *)v19 + 104))(v19, *(void *)(*((void *)a3 + 1) + 40));
    v17 += 2;
  }
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v40;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  MIL::Builder::OperationBuilder::UpdateOwnership(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, a3, (uint64_t)&v40);
  uint64_t v20 = v42;
  if (v42)
  {
    while (1)
    {
      if (*((char *)v20 + 39) < 0) {
        std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)v20[2], (std::string::size_type)v20[3]);
      }
      else {
        std::string v39 = *(std::string *)(v20 + 2);
      }
      MIL::Builder::Variable::UpdateOwner((MIL::Builder::Variable *)v20[5], a3);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 37, (unsigned __int8 *)&v39))break; {
      uint64_t v21 = (long long *)v20[5];
      }
      v20[5] = 0;
      uint64_t v36 = (std::string *)v21;
      std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::__emplace_unique_key_args<std::unique_ptr<MIL::Builder::Variable const>,std::unique_ptr<MIL::Builder::Variable const>>((uint64_t)(a1 + 42), &v36, (uint64_t *)&v36);
      long long v22 = v36;
      uint64_t v36 = 0;
      if (v22) {
        goto LABEL_23;
      }
LABEL_24:
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v39.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = (uint64_t **)*v20;
      if (!v20) {
        goto LABEL_30;
      }
    }
    uint64_t v36 = &v39;
    int v23 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 37), (unsigned __int8 *)&v39, (uint64_t)&std::piecewise_construct, (long long **)&v36);
    uint64_t v24 = v20[5];
    v20[5] = 0;
    long long v22 = (std::string *)*((void *)v23 + 5);
    *((void *)v23 + 5) = v24;
    if (!v22) {
      goto LABEL_24;
    }
LABEL_23:
    (*(void (**)(std::string *))(v22->__r_.__value_.__r.__words[0] + 8))(v22);
    goto LABEL_24;
  }
LABEL_30:
  unint64_t v25 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2;
  uint64_t v26 = a1[1];
  *(void *)&long long v38 = *a1;
  *((void *)&v38 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v26;
  if (v26) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v26 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::SetContext((uint64_t)v25, &v38);
  if (*((void *)&v38 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v38 + 1));
  }
  MIL::Builder::OperationBuilder::GetOutputs(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, (void **)&v39.__r_.__value_.__l.__data_);
  std::string::size_type size = v39.__r_.__value_.__l.__size_;
  uint64_t v27 = (MIL::Builder::Variable::VariableImpl ***)v39.__r_.__value_.__r.__words[0];
  if (v39.__r_.__value_.__r.__words[0] != v39.__r_.__value_.__l.__size_)
  {
    do
    {
      MIL::Builder::Variable::TryGetValueSharedPtr(*v27, &v36);
      if (v36)
      {
        uint64_t v29 = a1[5];
        uint64_t v30 = MIL::Builder::Variable::GetName(*v27);
        (*(void (**)(uint64_t, MIL::Builder::Variable::VariableImpl *, std::string **, uint64_t))(*(void *)v29 + 88))(v29, v30, &v36, 1);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      ++v27;
    }
    while (v27 != (MIL::Builder::Variable::VariableImpl ***)size);
    uint64_t v27 = (MIL::Builder::Variable::VariableImpl ***)v39.__r_.__value_.__r.__words[0];
  }
  if (v27)
  {
    v39.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
    operator delete(v27);
  }
  unint64_t v31 = (void *)a1[47];
  if (v31)
  {
    uint64_t v32 = *(std::__shared_weak_count **)(a2 + 8);
    int64x2_t v34 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2;
    long long v35 = v32;
    if (v32) {
      atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::BlockBuilder::DataDependencyGraph::AddOperation(v31, (uint64_t)&v34);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table((uint64_t)&v40);
}

void sub_20F3DDBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__move_range(uint64_t a1, void *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (void *)((char *)a2 + v6 - a4);
  uint64_t v8 = (_OWORD *)v6;
  if ((unint64_t)v7 < a3)
  {
    uint64_t v9 = v7;
    uint64_t v8 = *(_OWORD **)(a1 + 8);
    do
    {
      *v8++ = *(_OWORD *)v9;
      *uint64_t v9 = 0;
      v9[1] = 0;
      v9 += 2;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *>((uint64_t)&v11, a2, v7, v6);
}

uint64_t std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, void *a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (void *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(v7, (uint64_t)a3, a1[1], (_OWORD *)a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

void *std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *>(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = a3;
    do
    {
      long long v8 = *((_OWORD *)v7 - 1);
      v7 -= 2;
      *uint64_t v7 = 0;
      v7[1] = 0;
      uint64_t v9 = *(std::__shared_weak_count **)(a4 - 8);
      *(_OWORD *)(a4 - 16) = v8;
      a4 -= 16;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    while (v7 != a2);
  }
  return a3;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  unint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)unint64_t v5 = 0;
      *((void *)v5 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
      long long v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    long long v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *long long v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

_OWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  unint64_t v4 = a4;
  long long v9 = a4;
  long long v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4++ = *(_OWORD *)a2;
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      a2 += 16;
    }
    while (a2 != a3);
    long long v9 = v4;
  }
  char v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::OperationBuilder>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

unint64_t MIL::Builder::BlockBuilder::DataDependencyGraph::AddOperation(void *a1, uint64_t a2)
{
  unint64_t v31 = *(MIL::Builder::OperationBuilder **)a2;
  v33 = &v31;
  unint64_t v4 = std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder *&&>,std::tuple<>>((uint64_t)(a1 + 10), &v31, (uint64_t)&std::piecewise_construct, &v33);
  Parameters = (void *)MIL::Builder::OperationBuilder::GetParameters(*(MIL::Builder::OperationBuilder **)a2);
  uint64_t v6 = (void *)*Parameters;
  uint64_t v26 = Parameters + 1;
  if ((void *)*Parameters != Parameters + 1)
  {
    do
    {
      v33 = (MIL::Builder::OperationBuilder **)(v6 + 4);
      uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(v4 + 3), (unsigned __int8 *)v6 + 32, (uint64_t)&std::piecewise_construct, (long long **)&v33);
      uint64_t v8 = v6[7];
      if (v6[8] != v8)
      {
        uint64_t v9 = 0;
        unsigned int v10 = 0;
        uint64_t v11 = (uint64_t)(v7 + 40);
        do
        {
          uint64_t v12 = (MIL::IRArgument **)(v8 + 16 * v9);
          if ((*(unsigned int (**)(void))(*(void *)*v12 + 16))())
          {
            uint64_t Name = MIL::IRArgument::GetName(*v12);
            MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(a1, Name, &v33);
            uint64_t v29 = (long long *)v33;
            uint64_t v30 = v34;
            if (v34) {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v14 = *(std::__shared_weak_count **)(a2 + 8);
            uint64_t v27 = *(MIL::Builder::OperationBuilder **)a2;
            uint64_t v28 = v14;
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Builder::DataDependency::MakeWithNonLexicalConsumer(&v29, &v27, (uint64_t)(v6 + 4), v10, &v31);
            if (v28) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v28);
            }
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
            long long v35 = &v33;
            long long v15 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const&>,std::tuple<>>((uint64_t)(a1 + 5), &v33, (uint64_t)&std::piecewise_construct, &v35);
            std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__emplace_unique_key_args<MIL::Builder::DataDependency,MIL::Builder::DataDependency const&>((uint64_t)(v15 + 4), &v31, &v31);
            std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__emplace_unique_key_args<MIL::Builder::DataDependency,MIL::Builder::DataDependency const&>(v11, &v31, &v31);
            if (v32) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v32);
            }
            if (v34) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v34);
            }
          }
          uint64_t v8 = v6[7];
          uint64_t v9 = ++v10;
        }
        while (v10 < (unint64_t)((v6[8] - v8) >> 4));
      }
      uint64_t v16 = (void *)v6[1];
      if (v16)
      {
        do
        {
          long long v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          long long v17 = (void *)v6[2];
          BOOL v18 = *v17 == (void)v6;
          uint64_t v6 = v17;
        }
        while (!v18);
      }
      uint64_t v6 = v17;
    }
    while (v17 != v26);
  }
  unint64_t result = MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)a2);
  if (result)
  {
    for (unint64_t i = 0; i < result; ++i)
    {
      Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, i);
      MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(a1, OutputName, &v33);
      long long v22 = (long long *)v33;
      uint64_t v24 = *(MIL::Builder::OperationBuilder **)a2;
      uint64_t v23 = *(void *)(a2 + 8);
      if (v23) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
      }
      unint64_t v25 = (std::__shared_weak_count *)*((void *)v22 + 4);
      *((void *)v22 + 3) = v24;
      *((void *)v22 + 4) = v23;
      if (v25)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        long long v22 = (long long *)v33;
      }
      *((void *)v22 + 5) = i;
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      unint64_t result = MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)a2);
    }
  }
  return result;
}

void sub_20F3DE30C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v14 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v15 = a3[1];
  i[2] = *a3;
  i[3] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    void *i = *v23;
LABEL_40:
    void *v23 = i;
    goto LABEL_41;
  }
  void *i = *v14;
  *long long v14 = i;
  *(void *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3DE5C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3DE8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::OperationBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3DE95C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3DEBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3DEC98(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::__emplace_unique_key_args<std::unique_ptr<MIL::Builder::Variable const>,std::unique_ptr<MIL::Builder::Variable const>>(uint64_t a1, void *a2, uint64_t *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    long long v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v14 = (void *)(a1 + 16);
  unint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v15 = *a3;
  *a3 = 0;
  i[2] = v15;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    void *i = *v23;
LABEL_38:
    void *v23 = i;
    goto LABEL_39;
  }
  void *i = *v14;
  *long long v14 = i;
  *(void *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    uint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3DEF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<MIL::Builder::Variable const>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::unique_ptr<MIL::Builder::Variable const>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[2];
    __p[2] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, (unsigned __int8 *)a2);
  if (!v6)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint8x8_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    unint64_t v7 = (std::string *)operator new(0x48uLL);
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C258908;
    v7[1] = __p;
    v7[2].__r_.__value_.__r.__words[0] = 0;
    v7[2].__r_.__value_.__l.__size_ = 0;
    v7[2].__r_.__value_.__r.__words[2] = 0;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    uint8x8_t v10 = v7 + 1;
    uint64_t v11 = v7;
    unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>((uint64_t)a1, (unsigned __int8 *)&__p, (long long *)&__p);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v8 = *((void *)v6 + 6);
  *a3 = *((void *)v6 + 5);
  a3[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_20F3DF0E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__emplace_unique_key_args<MIL::Builder::OperationBuilder *,std::piecewise_construct_t const&,std::tuple<MIL::Builder::OperationBuilder *&&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  float v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)float v16 = 0;
  *((void *)v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
  *((void *)v16 + 2) = **a4;
  *(_OWORD *)(v16 + 24) = 0u;
  *(_OWORD *)(v16 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *((_DWORD *)v16 + 14) = 1065353216;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t v13 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v13;
}

void sub_20F3DF3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3DF718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F3DF7C8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::ProducerInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258908;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::ProducerInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258908;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::ProducerInfo>::__on_zero_shared(uint64_t a1)
{
  std::allocator<MIL::Builder::DataDependency::ProducerInfo>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<MIL::Builder::DataDependency::ProducerInfo>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v4 = *(void **)a2;
    operator delete(v4);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F3DFB40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a2;
  double result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F3DFBB8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      unint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          unint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  float v16 = operator new(0x48uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *float v16 = 0;
  v16[1] = v9;
  float v17 = *a4;
  v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *unint64_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  unint64_t v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v13;
}

void sub_20F3DFE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const,std::unordered_set<MIL::Builder::DataDependency>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const,std::unordered_set<MIL::Builder::DataDependency>>,0>(uint64_t a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(a1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__emplace_unique_key_args<MIL::Builder::DataDependency,MIL::Builder::DataDependency const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::hash<MIL::Builder::DataDependency>::operator()(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v9)
        {
          if (MIL::Builder::operator==(i + 2, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v9;
  uint64_t v17 = a3[1];
  i[2] = *a3;
  i[3] = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  unint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    void *i = *v25;
LABEL_40:
    *unint64_t v25 = i;
    goto LABEL_41;
  }
  void *i = *v16;
  *float v16 = i;
  *(void *)(v24 + 8 * v3) = v16;
  if (*i)
  {
    unint64_t v26 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_40;
  }
LABEL_41:
  ++*v7;
  return i;
}

void sub_20F3E0188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::Builder::Variable const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckInsertedOperations(unint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = (MIL::Builder::BlockBuilder::BlockBuilderImpl *)result;
  if (a3)
  {
    uint64_t v4 = 0;
    uint64_t v5 = 1;
    do
    {
      unint64_t v6 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(a2 + 16 * v4);
      MIL::Builder::BlockBuilder::BlockBuilderImpl::CheckAddedOperation(v24, v6);
      double result = MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v6);
      if (result)
      {
        for (unint64_t i = 0; i < result; ++i)
        {
          Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName(v6, i);
          uint64_t v9 = 0;
          do
          {
            unint64_t v10 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(a2 + 16 * v9);
            uint64_t NumOutputs = i;
            if (v9 != v4) {
              uint64_t NumOutputs = MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)(a2 + 16 * v9));
            }
            if (NumOutputs)
            {
              for (unint64_t j = 0; j != NumOutputs; ++j)
              {
                uint64_t v13 = MIL::Builder::OperationBuilder::GetOutputName(v10, j);
                uint64_t v14 = *(unsigned __int8 *)(OutputName + 23);
                if ((v14 & 0x80u) == 0) {
                  uint64_t v15 = *(unsigned __int8 *)(OutputName + 23);
                }
                else {
                  uint64_t v15 = *(void *)(OutputName + 8);
                }
                uint64_t v16 = *(unsigned __int8 *)(v13 + 23);
                int v17 = (char)v16;
                if ((v16 & 0x80u) != 0) {
                  uint64_t v16 = *(void *)(v13 + 8);
                }
                if (v15 == v16)
                {
                  if (v17 >= 0) {
                    float v18 = (unsigned __int8 *)v13;
                  }
                  else {
                    float v18 = *(unsigned __int8 **)v13;
                  }
                  if ((v14 & 0x80) != 0)
                  {
                    if (!memcmp(*(const void **)OutputName, v18, *(void *)(OutputName + 8)))
                    {
LABEL_31:
                      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::operator+<char>();
                      unint64_t v21 = std::string::append(&v25, " in this block.");
                      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
                      v26.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v22;
                      v21->__r_.__value_.__l.__size_ = 0;
                      v21->__r_.__value_.__r.__words[2] = 0;
                      v21->__r_.__value_.__r.__words[0] = 0;
                      std::runtime_error::runtime_error(exception, &v26);
                      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
                    }
                  }
                  else
                  {
                    if (!*(unsigned char *)(OutputName + 23)) {
                      goto LABEL_31;
                    }
                    float v19 = (unsigned __int8 *)OutputName;
                    while (*v19 == *v18)
                    {
                      ++v19;
                      ++v18;
                      if (!--v14) {
                        goto LABEL_31;
                      }
                    }
                  }
                }
              }
            }
            ++v9;
          }
          while (v9 != v5);
          double result = MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)v6);
        }
      }
      ++v4;
      ++v5;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_20F3E0420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__insert_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*>(uint64_t *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    unint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = a1 + 2;
    uint64_t v10 = v11;
    unint64_t v12 = *(v9 - 1);
    if (a5 <= (uint64_t)(v11 - v12) >> 4)
    {
      uint64_t v19 = v12 - (void)a2;
      uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 4;
      if (v20 >= a5)
      {
        unint64_t v21 = &a3[2 * a5];
      }
      else
      {
        unint64_t v21 = &a3[2 * v20];
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder>*>((uint64_t)v9, v21, a4, (void *)*(v9 - 1));
        if (v19 < 1) {
          return v5;
        }
      }
      std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)&v5[2 * a5]);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)v26, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 4);
      if (v14 >> 60) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = ((uint64_t)a2 - v13) >> 4;
      uint64_t v16 = v10 - v13;
      if (v16 >> 3 > v14) {
        unint64_t v14 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v17 = v14;
      }
      v26[4] = v9;
      if (v17) {
        float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v9, v17);
      }
      else {
        float v18 = 0;
      }
      long long v22 = (uint64_t *)&v18[16 * v15];
      v26[0] = v18;
      v26[1] = v22;
      void v26[3] = &v18[16 * v17];
      size_t v23 = &v22[2 * a5];
      do
      {
        uint64_t *v22 = *v7;
        uint64_t v24 = v7[1];
        v22[1] = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        v22 += 2;
        v7 += 2;
      }
      while (v22 != v23);
      void v26[2] = v23;
      uint64_t v5 = (void *)std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(a1, v26, v5);
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v26);
    }
  }
  return v5;
}

void sub_20F3E060C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = (v3 - *a1) >> 4;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      uint64_t v6 = *a1 + 16 * a2;
      while (v3 != v6)
      {
        unint64_t v7 = *(std::__shared_weak_count **)(v3 - 8);
        if (v7) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        }
        v3 -= 16;
      }
      a1[1] = v6;
    }
  }
  else
  {
    unint64_t v5 = a2 - v4;
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__append(a1, v5);
  }
}

void std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - *a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - *a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    uint64_t v18 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v13;
    uint64_t v15 = &v13[16 * v10];
    unint64_t v17 = &v13[16 * v12];
    bzero(v15, 16 * a2);
    uint64_t v16 = &v15[16 * a2];
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&v14);
  }
}

void sub_20F3E083C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<MIL::IRNamedValueType>::shared_ptr[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *double result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void *std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>*,std::shared_ptr<MIL::Builder::OperationBuilder>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder> const*,std::shared_ptr<MIL::Builder::OperationBuilder>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F3E0938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::CreateStateDependencyMap@<X0>(MIL::Builder::BlockBuilder::BlockBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  LOBYTE(__p) = 0;
  char v9 = 0;
  MIL::Builder::BlockBuilder::BlockBuilderImpl::ExtractStateOpsHelper((uint64_t)this, (unsigned __int8 *)&__p, (uint64_t)v10);
  if (v9 && v8 < 0) {
    operator delete(__p);
  }
  for (unint64_t i = v11; i; unint64_t i = (uint64_t *)*i)
  {
    unint64_t v12 = (long long *)(i + 2);
    uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v12);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__move_assign((uint64_t)(v4 + 40), v6);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table((uint64_t)v6);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v10);
}

void sub_20F3E0A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,int a21,__int16 a22,char a23,char a24)
{
  if (a20)
  {
    if (a19 < 0) {
      operator delete(__p);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(v24);
  _Unwind_Resume(a1);
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::ExtractStateOpsHelper(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v4 = *(MIL::Builder::OperationBuilder ***)(a1 + 48);
  uint64_t v5 = *(MIL::Builder::OperationBuilder ***)(a1 + 56);
  if (v4 != v5)
  {
    while (1)
    {
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*v4);
      if (!(*(uint64_t (**)(uint64_t))(*(void *)Operator + 240))(Operator)) {
        goto LABEL_29;
      }
      uint64_t v8 = MIL::Builder::OperationBuilder::GetOperator(*v4);
      char v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 240))(v8);
      if (!MIL::IRMemoryEffect::TryAsStateReadEffect(v9))
      {
        uint64_t v10 = MIL::Builder::OperationBuilder::GetOperator(*v4);
        uint64_t v11 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 240))(v10);
        if (!MIL::IRMemoryEffect::TryAsStateWriteEffect(v11)) {
          goto LABEL_29;
        }
      }
      uint64_t Parameters = MIL::Builder::OperationBuilder::GetParameters(*v4);
      std::string::basic_string[abi:ne180100]<0>(__p, "input");
      uint64_t v13 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(Parameters, (const void **)__p);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (Parameters + 8 == v13)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "State Op missing required state input.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "input");
      unint64_t v14 = (void **)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(Parameters, (const void **)__p);
      uint64_t v15 = (void *)(*(uint64_t (**)(void))(*(void *)**v14 + 32))(**v14);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (!v15)
      {
        uint64_t v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v24, "State input needs to have a name, cannot be a literal.");
        v24->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v24, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      if (!a2[24]) {
        goto LABEL_28;
      }
      uint64_t v16 = a2[23];
      if ((v16 & 0x80u) == 0) {
        uint64_t v17 = a2[23];
      }
      else {
        uint64_t v17 = *((void *)a2 + 1);
      }
      uint64_t v18 = *((unsigned __int8 *)v15 + 23);
      int v19 = (char)v18;
      if ((v18 & 0x80u) != 0) {
        uint64_t v18 = v15[1];
      }
      if (v17 != v18) {
        goto LABEL_29;
      }
      uint64_t v20 = v19 >= 0 ? (unsigned __int8 *)v15 : (unsigned __int8 *)*v15;
      if ((v16 & 0x80) == 0) {
        break;
      }
      if (!memcmp(*(const void **)a2, v20, *((void *)a2 + 1))) {
        goto LABEL_28;
      }
LABEL_29:
      v4 += 2;
      if (v4 == v5) {
        return;
      }
    }
    if (a2[23])
    {
      unint64_t v21 = a2;
      while (*v21 == *v20)
      {
        ++v21;
        ++v20;
        if (!--v16) {
          goto LABEL_28;
        }
      }
      goto LABEL_29;
    }
LABEL_28:
    __p[0] = v15;
    long long v22 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)v15, (uint64_t)&std::piecewise_construct, (long long **)__p);
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::push_back[abi:ne180100]((uint64_t *)v22 + 5, (long long *)v4);
    goto LABEL_29;
  }
}

void sub_20F3E0D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v14);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::CreateStateDependencyMap@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 1065353216;
  uint64_t v3 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v5 = 0;
    do
    {
      long long v6 = *(_OWORD *)(v3 + 16 * v5);
      long long v23 = v6;
      if (*((void *)&v6 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v6 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set((uint64_t)v17, &v23, 1);
      if (*((void *)&v23 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
      }
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)(*a1 + 16 * v5));
      uint64_t v8 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)Operator + 240))(Operator);
      if (MIL::IRMemoryEffect::TryAsStateReadEffect(v8))
      {
        uint64_t v9 = 16 * v5 + 16;
        for (unint64_t i = v5; i + 1 < (a1[1] - *a1) >> 4; ++i)
        {
          uint64_t v11 = MIL::Builder::OperationBuilder::GetOperator(*(MIL::Builder::OperationBuilder **)(*a1 + v9));
          unint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 240))(v11);
          if (!MIL::IRMemoryEffect::TryAsStateReadEffect(v12))
          {
            unint64_t v5 = i;
            break;
          }
          std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)v17, (void *)(*a1 + v9), (void *)(*a1 + v9));
          v9 += 16;
        }
      }
      uint64_t v13 = v18;
      if (v18)
      {
        do
        {
          *(void *)&long long v23 = v13 + 2;
          uint64_t v14 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(a2, v13 + 2, (uint64_t)&std::piecewise_construct, (void **)&v23);
          if (v14 + 4 != (void *)&v20)
          {
            *((_DWORD *)v14 + 16) = v22;
            std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *> *>>(v14 + 4, (void *)v21, 0);
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
        uint64_t v15 = v18;
      }
      else
      {
        uint64_t v15 = 0;
      }
      int v22 = v19;
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *> *>>(&v20, v15, 0);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v17);
      ++v5;
      uint64_t v3 = *a1;
    }
    while (v5 < (a1[1] - *a1) >> 4);
  }
  return std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&v20);
}

void sub_20F3E1000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table(v22);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_20F3E10A4(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::OperationBuilder> const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void **)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      uint64_t v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  uint64_t v15 = a1 + 16;
  uint64_t v16 = operator new(0x48uLL);
  v28[0] = v16;
  v28[1] = a1 + 16;
  *uint64_t v16 = 0;
  v16[1] = v9;
  uint64_t v17 = *a4;
  v16[2] = **a4;
  uint64_t v18 = v17[1];
  v16[3] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)v16 + 2) = 0u;
  *((_OWORD *)v16 + 3) = 0u;
  *((_DWORD *)v16 + 16) = 1065353216;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v10 || (float)(v20 * (float)v10) < v19)
  {
    BOOL v21 = 1;
    if (v10 >= 3) {
      BOOL v21 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v10);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  std::string v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *std::string v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = v15;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v26 >= v10) {
          v26 %= v10;
        }
      }
      else
      {
        v26 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t v13 = (void *)v28[0];
  v28[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v13;
}

void sub_20F3E135C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *> *>>(void *a1, void *a2, void *a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = a1[1];
  if (v6)
  {
    for (uint64_t i = 0; i != v6; ++i)
      *(void *)(*a1 + 8 * i) = 0;
    unint64_t v8 = (void *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8) {
      BOOL v9 = a2 == a3;
    }
    else {
      BOOL v9 = 1;
    }
    if (v9)
    {
      unint64_t v10 = v8;
    }
    else
    {
      do
      {
        uint64_t v12 = v4[2];
        uint64_t v11 = v4[3];
        if (v11) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v13 = (std::__shared_weak_count *)v8[3];
        v8[2] = v12;
        v8[3] = v11;
        if (v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        }
        unint64_t v10 = (void *)*v8;
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi(a1, v8);
        unint64_t v4 = (void *)*v4;
        if (!v10) {
          break;
        }
        unint64_t v8 = v10;
      }
      while (v4 != a3);
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node((int)a1, v10);
  }
  while (v4 != a3)
  {
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_multi<std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, v4 + 2);
    unint64_t v4 = (void *)*v4;
  }
}

void sub_20F3E1458(void *a1)
{
  __cxa_begin_catch(a1);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_20F3E1470(_Unwind_Exception *a1)
{
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi(void *a1, void *a2)
{
  unint64_t v4 = a2 + 2;
  unint64_t v5 = a2[2];
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  a2[1] = v8;
  inserted = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_prepare((uint64_t)a1, v8, v4);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_perform(a1, a2, inserted);
  return a2;
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_prepare(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  float v7 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    uint64_t v9 = 2 * v6;
    BOOL v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    size_t v11 = v10 | v9;
    unint64_t v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v11;
    }
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<false>(a1, v13);
    unint64_t v6 = *(void *)(a1 + 8);
  }
  uint8x8_t v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    unint64_t v15 = a2;
    if (v6 <= a2) {
      unint64_t v15 = a2 % v6;
    }
  }
  else
  {
    unint64_t v15 = (v6 - 1) & a2;
  }
  uint64_t v16 = *(void **)(*(void *)a1 + 8 * v15);
  if (!v16) {
    return 0;
  }
  int v17 = 0;
  do
  {
    double result = v16;
    uint64_t v16 = (void *)*v16;
    if (!v16) {
      break;
    }
    unint64_t v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      unint64_t v20 = v16[1];
      if (v19 >= v6) {
        unint64_t v20 = v19 % v6;
      }
    }
    else
    {
      unint64_t v20 = v19 & (v6 - 1);
    }
    if (v20 != v15) {
      break;
    }
    BOOL v21 = v19 == a2 && v16[2] == *a3;
    int v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi_perform(void *result, void *a2, void *a3)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(void *)(*result + 8 * v4) = result + 2;
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
LABEL_18:
    *(void *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v3) {
        v6 %= *(void *)&v3;
      }
    }
    else
    {
      v6 &= *(void *)&v3 - 1;
    }
    if (v6 != v4) {
      goto LABEL_18;
    }
  }
LABEL_19:
  ++result[3];
  return result;
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__rehash<false>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__do_rehash<false>(a1, prime);
    }
  }
}

void std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__do_rehash<false>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      for (uint64_t i = (void *)*v7; *v7; uint64_t i = (void *)*v7)
      {
        unint64_t v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2) {
            v12 %= a2;
          }
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          uint64_t v7 = i;
        }
        else
        {
          size_t v13 = i;
          if (*(void *)(*(void *)a1 + 8 * v12))
          {
            do
            {
              uint8x8_t v14 = v13;
              size_t v13 = (void *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *uint64_t v7 = v13;
            *uint8x8_t v14 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = i;
          }
          else
          {
            *(void *)(*(void *)a1 + 8 * v12) = v7;
            uint64_t v7 = i;
            unint64_t v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    BOOL v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_multi<std::shared_ptr<MIL::Builder::OperationBuilder> const&>(void *a1, unint64_t *a2)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__construct_node<std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)a1, a2, (uint64_t)&v4);
  return std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__node_insert_multi(a1, v4);
}

void sub_20F3E19E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__construct_node<std::shared_ptr<MIL::Builder::OperationBuilder> const&>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 16;
  double result = operator new(0x20uLL);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  *double result = 0;
  result[1] = 0;
  unint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  result[2] = *a2;
  result[3] = v8;
  if (v8)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    unint64_t v7 = result[2];
  }
  *(unsigned char *)(a3 + 16) = 1;
  unint64_t v9 = HIDWORD(v7);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
  result[1] = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint8x8_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3E1D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  double result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F3E1DDC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      int8x8_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const,std::unordered_set<MIL::Builder::DataDependency>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

BOOL std::operator==[abi:ne180100]<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  int8x8_t v3 = (uint64_t *)(a1 + 16);
  do
  {
    int8x8_t v3 = (uint64_t *)*v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    uint64_t v5 = (const void **)(v3 + 2);
    uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v3 + 16);
    if (!v6) {
      break;
    }
    uint64_t v7 = v6;
    uint64_t v8 = *((unsigned __int8 *)v3 + 39);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    }
    else {
      uint64_t v9 = v3[3];
    }
    uint64_t v10 = v6[39];
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)v6 + 3);
    }
    if (v9 != v10) {
      break;
    }
    if (v11 >= 0) {
      unint64_t v12 = v6 + 16;
    }
    else {
      unint64_t v12 = (unsigned __int8 *)*((void *)v6 + 2);
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v5, v12, v3[3])) {
        return v4;
      }
    }
    else if (*((unsigned char *)v3 + 39))
    {
      while (*(unsigned __int8 *)v5 == *v12)
      {
        uint64_t v5 = (const void **)((char *)v5 + 1);
        ++v12;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_20:
    ;
  }
  while (std::operator==[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder> const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>((uint64_t)(v3 + 5), (void *)v7 + 5));
  return v4;
}

BOOL std::operator==[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::pair<std::shared_ptr<MIL::Builder::OperationBuilder> const,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  int8x8_t v3 = (void *)(a1 + 16);
  do
  {
    int8x8_t v3 = (void *)*v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    uint64_t v5 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>(a2, v3 + 2);
    if (!v5) {
      break;
    }
  }
  while (v3[2] == v5[2]
       && std::operator==[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>((uint64_t)(v3 + 4), v5 + 4));
  return v4;
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  double result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      double result = (void *)*result;
    }
    while (result);
  }
  return result;
}

BOOL std::operator==[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  unint64_t v3 = (void *)(a1 + 16);
  do
  {
    unint64_t v3 = (void *)*v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    unint64_t v5 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>(a2, v3 + 2);
    if (!v5) {
      break;
    }
  }
  while (v3[2] == v5[2]);
  return v4;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint8x8_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3E2594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3E2638(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::GetOrBuildDataDependencyGraph(MIL::Builder::BlockBuilder::BlockBuilderImpl *this)
{
  if (!*((void *)this + 47)) {
    operator new();
  }
  return *((void *)this + 47);
}

void sub_20F3E27E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MIL::Builder::BlockBuilder::DataDependencyGraph::GetDataDependenciesForConsumerParam(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v8 = a2;
  unint64_t v5 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>((void *)(a1 + 80), &v8);
  if (!v5) {
    return (unsigned __int8 *)(a1 + 120);
  }
  uint8x8_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v5 + 3, a3);
  if (v6) {
    return v6 + 40;
  }
  else {
    return (unsigned __int8 *)(a1 + 120);
  }
}

void MIL::Builder::BlockBuilder::DataDependencyGraph::AddBlockOutput(void *a1, uint64_t a2)
{
  MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(a1, a2, &v8);
  uint64_t v4 = v8;
  unint64_t v5 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::DataDependency::MakeWithBlockOutputConsumer(&v4, &v6);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v10 = &v8;
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const&>,std::tuple<>>((uint64_t)(a1 + 5), &v8, (uint64_t)&std::piecewise_construct, &v10);
  std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__emplace_unique_key_args<MIL::Builder::DataDependency,MIL::Builder::DataDependency const&>((uint64_t)(v3 + 4), &v6, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_20F3E2910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(a2 + 120);
    std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::~__hash_table(a2 + 80);
    std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::~__hash_table(a2 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2);
    JUMPOUT(0x21056C700);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

void *MIL::Builder::BlockBuilder::DataDependencyGraph::GetDataDependenciesByVariableName(void *a1, unsigned __int8 *a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, a2);
  if (!v3) {
    return a1 + 15;
  }
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::OperationBuilder>,std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::find<std::shared_ptr<MIL::Builder::OperationBuilder>>(a1 + 5, (void *)v3 + 5);
  if (v4) {
    return v4 + 4;
  }
  else {
    return a1 + 15;
  }
}

BOOL MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationFollowsOperation(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v5 = (std::__shared_weak_count *)a2[1];
  uint64_t v12 = *a2;
  unint64_t v13 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationIterator(a1, &v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v10 = *a3;
  long long v11 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = MIL::Builder::BlockBuilder::BlockBuilderImpl::OperationIterator(a1, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8 < v6;
}

void sub_20F3E2B20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x20F3E2B0CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_20F3E2BC8(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::erase(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *,std::shared_ptr<MIL::Builder::OperationBuilder> *>((uint64_t)&v10, a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
        v7 -= 16;
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t *std::remove[abi:ne180100]<std::__wrap_iter<std::shared_ptr<MIL::Builder::OperationBuilder> *>,std::shared_ptr<MIL::Builder::OperationBuilder>>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 == a2)
  {
LABEL_5:
    uint64_t v5 = a2;
  }
  else
  {
    uint64_t v5 = a1;
    while (*v5 != *a3)
    {
      v5 += 2;
      if (v5 == a2) {
        goto LABEL_5;
      }
    }
  }
  if (v5 != a2)
  {
    for (uint64_t i = v5 + 2; i != a2; i += 2)
    {
      uint64_t v7 = *i;
      if (*i != *a3)
      {
        uint64_t v8 = i[1];
        uint64_t *i = 0;
        i[1] = 0;
        unint64_t v9 = (std::__shared_weak_count *)v5[1];
        uint64_t *v5 = v7;
        v5[1] = v8;
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
        v5 += 2;
      }
    }
  }
  return v5;
}

uint64_t MIL::Builder::BlockBuilder::BlockBuilderImpl::OnOperationRemoved(uint64_t a1, MIL::Builder::OperationBuilder::OperationBuilderImpl ***a2, char a3)
{
  MIL::Builder::OperationBuilder::RemoveOwningBlock(*a2);
  uint64_t v6 = *(MIL::Builder::BlockBuilder::DataDependencyGraph **)(a1 + 376);
  if (v6) {
    MIL::Builder::BlockBuilder::DataDependencyGraph::RemoveOperation(v6, *a2);
  }
  MIL::Builder::OperationBuilder::GetOutputs(*a2, (void **)&v17);
  uint64_t v7 = v17;
  uint64_t v8 = v18;
  if (v17 != v18)
  {
    do
    {
      uint64_t Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(*v7);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((void *)(a1 + 72), Name);
      (*(void (**)(void, unsigned __int8 *))(**(void **)(a1 + 40) + 112))(*(void *)(a1 + 40), Name);
      if ((a3 & 1) == 0)
      {
        v10.__i_ = (std::__wrap_iter<const std::string *>::iterator_type)std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(*(void *)(a1 + 176), *(void *)(a1 + 184), (uint64_t)Name);
        v11.__i_ = *(std::__wrap_iter<const std::string *>::iterator_type *)(a1 + 184);
        std::vector<std::string>::erase((std::vector<std::string> *)(a1 + 176), v10, v11);
      }
      ++v7;
    }
    while (v7 != v8);
    uint64_t v7 = v17;
  }
  if (v7)
  {
    float v18 = v7;
    operator delete(v7);
  }
  MIL::Builder::OperationBuilder::GetInputArguments(*a2, (uint64_t)&v17);
  uint64_t v12 = v19;
  if (v19)
  {
    uint64_t v13 = a1 + 112;
    do
    {
      uint8x8_t v14 = (long long *)MIL::Builder::Variable::TryGetName((MIL::Builder::Variable::VariableImpl **)v12[2]);
      if (v14)
      {
        unint64_t v20 = v14;
        unint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v13, (unsigned __int8 *)v14, (uint64_t)&std::piecewise_construct, &v20);
        std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__erase_unique<std::shared_ptr<MIL::Builder::OperationBuilder>>((void *)v15 + 5, a2);
      }
      uint64_t v12 = (uint64_t **)*v12;
    }
    while (v12);
  }
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v17);
}

void sub_20F3E2E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t MIL::Builder::BlockBuilder::DataDependencyGraph::RemoveOperation(MIL::Builder::BlockBuilder::DataDependencyGraph *this, MIL::Builder::OperationBuilder::OperationBuilderImpl **a2)
{
  unint64_t v16 = a2;
  if (MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)a2))
  {
    unint64_t v4 = 0;
    do
    {
      Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName(a2, v4);
      MIL::Builder::BlockBuilder::DataDependencyGraph::GetProducerInfo(this, OutputName, &v14);
      uint64_t v6 = v14;
      uint64_t v7 = (std::__shared_weak_count *)*((void *)v14 + 4);
      *((void *)v14 + 3) = 0;
      *((void *)v6 + 4) = 0;
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      float v17 = &v14;
      if (!std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo> const&>,std::tuple<>>((uint64_t)this + 40, &v14, (uint64_t)&std::piecewise_construct, &v17)[7])
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(this, v14);
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__erase_unique<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>((void *)this + 5, &v14);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      ++v4;
    }
    while (v4 < MIL::Builder::OperationBuilder::GetNumOutputs((MIL::Builder::OperationBuilder *)a2));
  }
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>((void *)this + 10, &v16);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  for (uint64_t i = (void *)v8[5]; i; uint64_t i = (void *)*i)
  {
    for (unint64_t j = (uint64_t *)i[7]; j; unint64_t j = (uint64_t *)*j)
    {
      MIL::Builder::DataDependency::GetProducerInfo((void **)j + 2, &v14);
      std::vector<std::string>::const_iterator v11 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>((void *)this + 5, &v14);
      uint64_t v12 = v11;
      if (!v11) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__erase_unique<MIL::Builder::DataDependency>(v11 + 4, j + 2);
      if (!v12[7] && !*((void *)v14 + 3))
      {
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(this, v14);
        std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__erase_unique<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>((void *)this + 5, &v14);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__erase_unique<MIL::Builder::OperationBuilder *>((void *)this + 10, &v16);
}

void sub_20F3E3058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::__erase_unique<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(void *a1, void *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  uint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t *std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::__erase_unique<MIL::Builder::DataDependency>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::find<MIL::Builder::DataDependency>(a1, a2);
  if (result)
  {
    std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

void *std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::find<MIL::Builder::DataDependency>(void *a1, void *a2)
{
  unint64_t v4 = std::hash<MIL::Builder::DataDependency>::operator()((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(void **)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  std::vector<std::string>::const_iterator v11 = (void *)*v10;
  if (*v10)
  {
    do
    {
      unint64_t v12 = v11[1];
      if (v12 == v6)
      {
        if (MIL::Builder::operator==(v11 + 2, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(void *)&v5) {
            v12 %= *(void *)&v5;
          }
        }
        else
        {
          v12 &= *(void *)&v5 - 1;
        }
        if (v12 != v9) {
          return 0;
        }
      }
      std::vector<std::string>::const_iterator v11 = (void *)*v11;
    }
    while (v11);
  }
  return v11;
}

uint64_t std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::__unordered_map_hasher<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::hash<MIL::Builder::OperationBuilder *>,std::equal_to<MIL::Builder::OperationBuilder *>,true>,std::__unordered_map_equal<MIL::Builder::OperationBuilder *,std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,std::equal_to<MIL::Builder::OperationBuilder *>,std::hash<MIL::Builder::OperationBuilder *>,true>,std::allocator<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>>::__erase_unique<MIL::Builder::OperationBuilder *>(void *a1, void *a2)
{
  uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, (void *)result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Builder::OperationBuilder *,std::unordered_map<std::string,std::unordered_set<MIL::Builder::DataDependency>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

uint64_t *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__erase_unique<std::shared_ptr<MIL::Builder::OperationBuilder>>(void *a1, void *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,std::hash<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>,std::unordered_set<MIL::Builder::DataDependency>>>>::find<std::shared_ptr<MIL::Builder::DataDependency::ProducerInfo>>(a1, a2);
  if (result)
  {
    std::__hash_table<MIL::Builder::DataDependency,std::hash<MIL::Builder::DataDependency>,std::equal_to<MIL::Builder::DataDependency>,std::allocator<MIL::Builder::DataDependency>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint8x8_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(void *)float v17 = 0;
  *((void *)v17 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v10;
  float v18 = *a4;
  long long v19 = **a4;
  *((void *)v17 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v17 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v19;
  *((void *)v18 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  *(_OWORD *)(v17 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 18) = 1065353216;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_20F3E3658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  int8x8_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint8x8_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 8) = v9;
  *(v7 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a1 + 16;
    *uint8x8_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  uint64_t v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (long long *)__last.__i_, (long long *)this->__end_, (uint64_t)__first.__i_);
    size_t v6 = v5;
    std::vector<std::string>::pointer end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

uint64_t std::remove[abi:ne180100]<std::__wrap_iter<std::string *>,std::string>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(a1, a2, (unsigned __int8 **)a3);
  if (v5 == a2) {
    return a2;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v5 + 24;
  if (v5 + 24 != a2)
  {
    uint64_t v8 = v5;
    while (1)
    {
      uint64_t v9 = v6;
      uint64_t v6 = v7;
      uint64_t v10 = *(unsigned __int8 *)(v9 + 47);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = *(unsigned __int8 *)(v9 + 47);
      }
      else {
        uint64_t v11 = *(void *)(v9 + 32);
      }
      uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(a3 + 8);
      }
      if (v11 != v12) {
        goto LABEL_20;
      }
      if (v13 >= 0) {
        uint8x8_t v14 = (unsigned __int8 *)a3;
      }
      else {
        uint8x8_t v14 = *(unsigned __int8 **)a3;
      }
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v6, v14, *(void *)(v9 + 32))) {
          goto LABEL_20;
        }
      }
      else if (*(unsigned char *)(v9 + 47))
      {
        uint64_t v15 = 0;
        while (*(unsigned __int8 *)(v6 + v15) == v14[v15])
        {
          if (v10 == ++v15) {
            goto LABEL_23;
          }
        }
LABEL_20:
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        long long v16 = *(_OWORD *)v6;
        *(void *)(v8 + 16) = *(void *)(v6 + 16);
        *(_OWORD *)uint64_t v8 = v16;
        v8 += 24;
        *(unsigned char *)(v9 + 47) = 0;
        *(unsigned char *)uint64_t v6 = 0;
      }
LABEL_23:
      uint64_t v7 = v6 + 24;
      if (v6 + 24 == a2) {
        return v8;
      }
    }
  }
  return v5;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0) {
        operator delete(*(void **)a4);
      }
      long long v7 = *v5;
      *(void *)(a4 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a4 = v7;
      a4 += 24;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      uint64_t v5 = (long long *)((char *)v5 + 24);
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    char v5 = *((unsigned char *)a3 + 23);
    if (v5 >= 0) {
      uint64_t v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    }
    else {
      uint64_t v6 = a3[1];
    }
    if (v5 >= 0) {
      long long v7 = (unsigned __int8 *)a3;
    }
    else {
      long long v7 = *a3;
    }
    do
    {
      uint64_t v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0) {
        uint64_t v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)(v3 + 8);
      }
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(void *)(v3 + 8))) {
            return v3;
          }
        }
        else
        {
          if (!*(unsigned char *)(v3 + 23)) {
            return v3;
          }
          uint64_t v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10) {
              return v3;
            }
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void *std::shared_ptr<MIL::IRNamedValueType>::operator=[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRNamedValueType>::shared_ptr[abi:ne180100]<MIL::IRNamedValueType,std::default_delete<MIL::IRNamedValueType>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t MIL::Util::Span<unsigned long,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + 8 * a2;
}

void sub_20F3E3BB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Builder::BlockBuilder::BlockBuilderImpl *std::unique_ptr<MIL::Builder::BlockBuilder::BlockBuilderImpl>::reset[abi:ne180100](MIL::Builder::BlockBuilder::BlockBuilderImpl **a1, MIL::Builder::BlockBuilder::BlockBuilderImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Builder::BlockBuilder::BlockBuilderImpl::~BlockBuilderImpl(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::~BlockBuilderImpl(MIL::Builder::BlockBuilder::BlockBuilderImpl *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table((uint64_t)this + 384);
  uint64_t v2 = *((void *)this + 47);
  *((void *)this + 47) = 0;
  if (v2) {
    std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)this + 376, v2);
  }
  std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::~__hash_table((uint64_t)this + 336);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table((uint64_t)this + 296);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)this + 256);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 31);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 200);
  long long v6 = (void **)((char *)this + 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  long long v6 = (void **)((char *)this + 152);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table((uint64_t)this + 112);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 72);
  long long v6 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v6);
  uint64_t v4 = *((void *)this + 5);
  *((void *)this + 5) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  char v5 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[2];
      void v2[2] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImpl(uint64_t a1, void *a2, long long *a3)
{
  *(void *)a1 = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  long long v4 = *a3;
  *(void *)(a1 + 32) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 16) = v4;
  *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  memset(v7, 0, sizeof(v7));
  int v8 = 1065353216;
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  MIL::IRMutableScope::Make();
}

void sub_20F3E4054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a16 < 0)
  {
    operator delete(a11);
    if ((a9 & 1) == 0)
    {
LABEL_8:
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(v25 + 384);
      uint64_t v34 = *v32;
      *uint64_t v32 = 0;
      if (v34) {
        std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)v32, v34);
      }
      std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::~__hash_table(v25 + 336);
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table(v30);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v25 + 256);
      long long v35 = *(std::__shared_weak_count **)(v25 + 248);
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v29);
      std::string __p = (void *)(v28 + 128);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table(v31);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v28 + 24);
      std::string __p = (void *)v28;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      uint64_t v36 = *v27;
      uint64_t *v27 = 0;
      if (v36) {
        (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
      }
      if (*(char *)(v25 + 39) < 0) {
        operator delete(*v26);
      }
      v37 = *(std::__shared_weak_count **)(v25 + 8);
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!a9)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v33);
  goto LABEL_8;
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImpl(void *a1, void *a2, MIL::IRObject *this, long long *a4)
{
  *a1 = *a2;
  uint64_t v7 = a2[1];
  a1[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = *a4;
  a1[4] = *((void *)a4 + 2);
  *((_OWORD *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
  *((void *)a4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  float v18 = a1 + 2;
  *(_OWORD *)(a1 + 1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *((_DWORD *)a1 + 26) = 1065353216;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_DWORD *)a1 + 36) = 1065353216;
  *(_OWORD *)(a1 + 19) = 0u;
  *(_OWORD *)(a1 + 2std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *(_OWORD *)(a1 + 23) = 0u;
  uint64_t Attributes = MIL::IRObject::GetAttributes(this);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)(a1 + 25), Attributes);
  LocationPtr = (void *)MIL::IRObject::GetLocationPtr(this);
  a1[30] = *LocationPtr;
  uint64_t v11 = LocationPtr[1];
  a1[31] = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *((_OWORD *)a1 + 16) = 0u;
  *((_OWORD *)a1 + 17) = 0u;
  *((_DWORD *)a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 39) = 0u;
  *((_DWORD *)a1 + 82) = 1065353216;
  *((_OWORD *)a1 + 2std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((_OWORD *)a1 + 22) = 0u;
  *((_DWORD *)a1 + 92) = 1065353216;
  a1[51] = 0;
  *(_OWORD *)(a1 + 47) = 0u;
  *(_OWORD *)(a1 + 49) = 0u;
  *((_DWORD *)a1 + 104) = 1065353216;
  if (*a1)
  {
    if ((*(uint64_t (**)(void, void *))(*(void *)*a1 + 16))(*a1, v18))
    {
      if (MIL::IRCachedScope::IsCacheEnabled((MIL::IRObject *)((char *)this + 64)))
      {
        uint64_t v12 = (atomic_ullong *)a2[1];
        v19[0] = *(const void **)a2;
        v19[1] = v12;
        if (v12) {
          atomic_fetch_add_explicit(v12 + 1, 1uLL, memory_order_relaxed);
        }
        MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImplCommon((uint64_t)a1, v19, (uint64_t)this);
      }
      (*(void (**)(std::string *__return_ptr, MIL::IRObject *))(*(void *)this + 32))(&v21, this);
      int v13 = (atomic_ullong *)a2[1];
      v20[0] = *(const void **)a2;
      v20[1] = v13;
      if (v13) {
        atomic_fetch_add_explicit(v13 + 1, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImplCommon((uint64_t)a1, v20, (uint64_t)v21.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v16 = std::string::append(&v21, " is not registered in the context.");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v22);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint8x8_t v14 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v14, "Cannot initialize a BlockBuilder with an empty context.");
  __cxa_throw(v14, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3E4504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a21 < 0)
  {
    operator delete(a16);
    if ((v33 & 1) == 0)
    {
LABEL_8:
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::shared_ptr<MIL::Builder::OperationBuilder>,std::unordered_set<std::shared_ptr<MIL::Builder::OperationBuilder>>>>>>::~__hash_table(v27 + 384);
      uint64_t v35 = *v32;
      *uint64_t v32 = 0;
      if (v35) {
        std::default_delete<MIL::Builder::BlockBuilder::DataDependencyGraph>::operator()[abi:ne180100]((uint64_t)v32, v35);
      }
      std::__hash_table<std::unique_ptr<MIL::Builder::Variable const>,std::hash<std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::unique_ptr<MIL::Builder::Variable const>>,std::allocator<std::unique_ptr<MIL::Builder::Variable const>>>::~__hash_table(v27 + 336);
      std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table(v31);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v27 + 256);
      uint64_t v36 = *(std::__shared_weak_count **)(v27 + 248);
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a9);
      std::string __p = v29 + 17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<MIL::Builder::DataDependency>>>>::~__hash_table(v30);
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a10);
      std::string __p = v29 + 1;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      uint64_t v37 = *v29;
      uint64_t *v29 = 0;
      if (v37) {
        (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
      }
      if (*(char *)(v27 + 39) < 0) {
        operator delete(*a11);
      }
      long long v38 = *(std::__shared_weak_count **)(v27 + 8);
      if (v38) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v38);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v33)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v28);
  goto LABEL_8;
}

void MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImplCommon(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v4 = a3 + 64;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 64) + 32))(a3 + 64);
  std::unordered_map<std::string,MIL::IRValueType const*>::unordered_map((uint64_t)v11, v5);
  if (v12)
  {
    int v6 = *(const MIL::IRValueType **)(v12 + 40);
    if (!v7) {
      __cxa_bad_cast();
    }
    if (!MIL::MILContextImpl::TypeIsRegistered(v7, v6))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Cannot initialize a BlockBuilder using a different MILContext than the IRBlock.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 64))(v4);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v10, v8);
  MIL::IRMutableScope::Make();
}

void sub_20F3E4BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27)
{
  __cxa_free_exception(v27);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28 - 144);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<MIL::Builder::OperationBuilder>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v7);
  }
  return result;
}

void sub_20F3E4CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100]((void *)a1, v12);
    int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v20, a2, v15, v9);
    int v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      long long v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_20F3E4E3C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F3E4E44(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::DataDependency::GetVariableName(MIL::Builder::DataDependency *this)
{
  return **(void **)this;
}

uint64_t **MIL::Builder::DataDependency::GetProducer@<X0>(uint64_t **this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = **this;
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = *(void *)(v2 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t MIL::Builder::DataDependency::GetProducerOutputIndex(MIL::Builder::DataDependency *this)
{
  return *(void *)(**(void **)this + 40);
}

uint64_t MIL::Builder::DataDependency::GetConsumer@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)this + 24);
  *a2 = *(void *)(*(void *)this + 16);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t MIL::Builder::DataDependency::IsLexicalConsumer(MIL::Builder::DataDependency *this)
{
  return *(unsigned __int8 *)(*(void *)this + 32);
}

uint64_t MIL::Builder::DataDependency::GetConsumerArgumentIndex(MIL::Builder::DataDependency *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)(*(void *)this + 16) || *(unsigned char *)(v1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to call GetConsumerArgumentIndex on a data dependency that does not have an explicit consumer.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return *(unsigned int *)(v1 + 64);
}

void sub_20F3E4F24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::DataDependency::GetConsumerNestedBlockIndex(MIL::Builder::DataDependency *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)(*(void *)this + 16) || !*(unsigned char *)(v1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to call GetConsumerNestedBlockIndex on a data dependency that does not have a lexical consumer.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return *(void *)(v1 + 72);
}

void sub_20F3E4FA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::DataDependency::GetConsumerParameterName(MIL::Builder::DataDependency *this)
{
  uint64_t v1 = *(void *)this;
  if (!*(void *)(*(void *)this + 16) || *(unsigned char *)(v1 + 32))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to call GetConsumerParameterName on a data dependency that does not have an explicit consumer.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return v1 + 40;
}

void sub_20F3E5024(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 MIL::Builder::DataDependency::DataDependency(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

double MIL::Builder::DataDependency::MakeWithNonLexicalConsumer@<D0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v7 = a1[1];
  *(void *)&long long v11 = *a1;
  *((void *)&v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a2[1];
  *(void *)&long long v12 = *a2;
  *((void *)&v12 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v13 = *(std::string *)a3;
  }
  LODWORD(v14) = a4;
  *((void *)&v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = -1;
  uint64_t v9 = (char *)operator new(0x68uLL);
  *(_OWORD *)(v9 + 24) = v11;
  *((void *)v9 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(void *)uint64_t v9 = &unk_26C258958;
  *(_OWORD *)(v9 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v12;
  v9[56] = 0;
  *(std::string *)(v9 + 64) = v13;
  double result = *(double *)&v14;
  *(_OWORD *)(v9 + 88) = v14;
  *a5 = v9 + 24;
  a5[1] = v9;
  return result;
}

void sub_20F3E514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::DataDependency::DataDependencyImpl::~DataDependencyImpl(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[1];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

double MIL::Builder::DataDependency::MakeWithBlockOutputConsumer@<D0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(v7) = -1;
  *((void *)&v7 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = -1;
  uint64_t v5 = (char *)operator new(0x68uLL);
  *((void *)v5 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v5 + 2) = 0;
  *((void *)v5 + 3) = v4;
  *(void *)uint64_t v5 = &unk_26C258958;
  *((void *)v5 + 5) = 0;
  *((void *)v5 + 6) = 0;
  *((void *)v5 + 4) = v3;
  v5[56] = 0;
  *((void *)v5 + 9) = 0;
  *((void *)v5 + 1std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  *((void *)v5 + 8) = 0;
  double result = *(double *)&v7;
  *(_OWORD *)(v5 + 88) = v7;
  *a2 = v5 + 24;
  a2[1] = v5;
  return result;
}

void sub_20F3E5288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

void **MIL::Builder::DataDependency::GetProducerInfo@<X0>(void **this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (*this)[1];
  *a2 = **this;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

BOOL MIL::Builder::operator==(void *a1, void *a2)
{
  return *a1 == *a2;
}

BOOL MIL::Builder::operator!=(void *a1, void *a2)
{
  return *a1 != *a2;
}

unint64_t std::hash<MIL::Builder::DataDependency>::operator()(uint64_t a1, void *a2)
{
  unint64_t v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69
                                                                      * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) >> 47));
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::DataDependencyImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::DataDependencyImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258958;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<MIL::Builder::DataDependency::DataDependencyImpl>::__on_zero_shared(uint64_t a1)
{
  std::allocator<MIL::Builder::DataDependency::DataDependencyImpl>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<MIL::Builder::DataDependency::DataDependencyImpl>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void MIL::Builder::FunctionBuilder::FunctionBuilder(void *a1)
{
  *a1 = &unk_26C2589A8;
  std::make_unique[abi:ne180100]<MIL::Builder::FunctionBuilder::FunctionBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::shared_ptr<MIL::IRFunction const> &,decltype(nullptr)>();
}

{
  *a1 = &unk_26C2589A8;
  std::make_unique[abi:ne180100]<MIL::Builder::FunctionBuilder::FunctionBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::shared_ptr<MIL::IRFunction const> &,decltype(nullptr)>();
}

{
  *a1 = &unk_26C2589A8;
  operator new();
}

void std::make_unique[abi:ne180100]<MIL::Builder::FunctionBuilder::FunctionBuilderImpl,std::shared_ptr<MIL::MILContext> &,std::shared_ptr<MIL::IRFunction const> &,decltype(nullptr)>()
{
}

void sub_20F3E553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x10F2C4041A7B0FCLL);
  _Unwind_Resume(a1);
}

void sub_20F3E5684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21056C700](v10, 0x10F2C4041A7B0FCLL);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::~FunctionBuilder(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **this)
{
  *this = (MIL::Builder::FunctionBuilder::FunctionBuilderImpl *)&unk_26C2589A8;
  std::unique_ptr<MIL::Builder::FunctionBuilder::FunctionBuilderImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  *this = (MIL::Builder::FunctionBuilder::FunctionBuilderImpl *)&unk_26C2589A8;
  std::unique_ptr<MIL::Builder::FunctionBuilder::FunctionBuilderImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  uint64_t vars8;

  *this = (MIL::Builder::FunctionBuilder::FunctionBuilderImpl *)&unk_26C2589A8;
  std::unique_ptr<MIL::Builder::FunctionBuilder::FunctionBuilderImpl>::reset[abi:ne180100](this + 1, 0);

  JUMPOUT(0x21056C700);
}

unsigned __int8 *MIL::Builder::FunctionBuilder::GetBlock@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  return MIL::Builder::FunctionBuilder::FunctionBuilderImpl::GetBlock(*(void *)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::Builder::FunctionBuilder::FunctionBuilderImpl::GetBlock@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  double result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 40), a2);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = *((void *)result + 6);
  *a3 = *((void *)result + 5);
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void MIL::Builder::FunctionBuilder::Make()
{
}

{
  operator new();
}

void sub_20F3E58AC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21056C700](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3E59B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  MEMORY[0x21056C700](v13, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::CreateFunction(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **this)
{
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::CreateFunction(MIL::Builder::FunctionBuilder::FunctionBuilderImpl *this)
{
  std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](&v10, (const void ***)this);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v9, (uint64_t)this + 168);
  v8[0] = 0;
  v8[1] = 0;
  long long v7 = v8;
  uint64_t v2 = *((void *)this + 7);
  if (v2) {
    MIL::Builder::BlockBuilder::CreateBlock(*(long long ****)(v2 + 40));
  }
  uint64_t v3 = *((void *)this + 20);
  uint64_t v5 = *((void *)this + 19);
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)this + 111) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 11), *((void *)this + 12));
  }
  else {
    std::string __p = *(std::string *)((char *)this + 88);
  }
  MIL::IRFunction::Make();
}

void sub_20F3E5B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, char a19, void *a20,uint64_t a21,char a22)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy((uint64_t)&a19, a20);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a22);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v22 - 56, *(char **)(v22 - 48));
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::FunctionBuilder::AddInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t ***)(a1 + 8);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  uint64_t v5 = MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddInput(v4, (const void **)&__p.__r_.__value_.__l.__data_, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_20F3E5C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddInput(uint64_t **a1, const void **a2, uint64_t a3)
{
  if (a1 + 1 != (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)a1, a2))
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v8 = a1;
    uint64_t v9 = exception;
    long long v11 = v8[19];
    uint64_t v10 = v8[20];
    v13[0] = v11;
    v13[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(v10 + 1, 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "input already defined");
    MIL::InvalidOperationError::InvalidOperationError(v9, v13, v12);
  }
  (*(void (**)(uint64_t *, const void **, uint64_t, uint64_t))(*a1[10] + 80))(a1[10], a2, a3, 1);
  long long v14 = a2;
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, a2, (uint64_t)&std::piecewise_construct, (long long **)&v14)[7] = a3;
  return MIL::Builder::FunctionBuilder::FunctionBuilderImpl::TryGetVariable((uint64_t)a1, (uint64_t)a2);
}

void sub_20F3E5D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL MIL::Builder::FunctionBuilder::RemoveInput(uint64_t a1, const void **a2)
{
  return std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__erase_unique<std::string>(*(uint64_t ***)(a1 + 8), a2) != 0;
}

uint64_t MIL::Builder::FunctionBuilder::TryGetInput(uint64_t a1, uint64_t a2)
{
  return MIL::Builder::FunctionBuilder::FunctionBuilderImpl::TryGetVariable(*(void *)(a1 + 8), a2);
}

void MIL::Builder::FunctionBuilder::GetInputs(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **this@<X0>, uint64_t a2@<X8>)
{
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::GetInputs(MIL::Builder::FunctionBuilder::FunctionBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a2, (unint64_t)(float)*((unint64_t *)this + 2));
  unint64_t v5 = *(void *)this;
  if (*(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)this != (MIL::Builder::FunctionBuilder::FunctionBuilderImpl *)((char *)this + 8))
  {
    do
    {
      uint64_t Variable = MIL::Builder::FunctionBuilder::FunctionBuilderImpl::TryGetVariable((uint64_t)this, v5 + 32);
      std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>(a2, &Variable, &Variable);
      uint64_t v6 = *(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)(v5 + 8);
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = *(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = *(MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)(v5 + 16);
          BOOL v8 = *(void *)v7 == v5;
          unint64_t v5 = (unint64_t)v7;
        }
        while (!v8);
      }
      unint64_t v5 = (unint64_t)v7;
    }
    while (v7 != (MIL::Builder::FunctionBuilder::FunctionBuilderImpl *)((char *)this + 8));
  }
}

void sub_20F3E5EE4(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::AddBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock(v2, (uint64_t)__p);
}

void sub_20F3E5F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v3, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v3 = *(std::string *)a2;
  }
  MIL::Builder::BlockBuilder::Make();
}

void sub_20F3E60D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::FunctionBuilder::SelectedSpecialization(MIL::Builder::FunctionBuilder *this)
{
  return *((void *)this + 1) + 88;
}

std::string *MIL::Builder::FunctionBuilder::SetSpecialization(uint64_t a1, std::string *a2)
{
  return MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetSpecialization(*(void *)(a1 + 8), a2);
}

std::string *MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetSpecialization(uint64_t a1, std::string *a2)
{
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 40), (unsigned __int8 *)a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v8, ".");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }

  return std::string::operator=((std::string *)(a1 + 88), a2);
}

void sub_20F3E6234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::Builder::FunctionBuilder::GetType(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)(a1 + 8) + 80) + 24))(*(void *)(*(void *)(a1 + 8) + 80), a2, 1);
}

uint64_t MIL::Builder::FunctionBuilder::GetLocation(MIL::Builder::FunctionBuilder *this)
{
  return *(void *)(*((void *)this + 1) + 152);
}

uint64_t MIL::Builder::FunctionBuilder::GetLocationPtr(MIL::Builder::FunctionBuilder *this)
{
  return *((void *)this + 1) + 152;
}

void MIL::Builder::FunctionBuilder::SetLocation(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetLocation(v2, (uint64_t *)&v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_20F3E6324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set location to nullptr.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 160);
  *(void *)(a1 + 152) = v2;
  *(void *)(a1 + 16std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20F3E63CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::SetAttribute(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *(_OWORD *)a3;
  *(_OWORD *)std::string __p = v4;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetAttribute(v3, (long long *)__p, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3E6450(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::SetAttribute(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v7 = a2;
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 168, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 + 6);
  *(_OWORD *)(v4 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

unsigned __int8 *MIL::Builder::FunctionBuilder::TryGetAttribute@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  double result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 168), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t MIL::Builder::FunctionBuilder::GetContext@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 8);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = *(void *)(v2 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void MIL::Builder::FunctionBuilder::AddBlock(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *a3;
  *(_OWORD *)std::string __p = v4;
  *(void *)a3 = 0;
  *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock(v3, (unsigned __int8 *)__p, (MIL::Builder::BlockBuilder **)&v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3E65B0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Builder::FunctionBuilder::FunctionBuilderImpl::AddBlock(uint64_t a1, unsigned __int8 *a2, MIL::Builder::BlockBuilder **a3)
{
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add nullptr BlockBuilder.");
    goto LABEL_24;
  }
  Opsetuint64_t Name = MIL::Builder::BlockBuilder::GetOpsetName(*a3);
  uint64_t v7 = a2[23];
  if ((v7 & 0x80u) == 0) {
    uint64_t v8 = a2[23];
  }
  else {
    uint64_t v8 = *((void *)a2 + 1);
  }
  uint64_t v9 = *(unsigned __int8 *)(OpsetName + 23);
  int v10 = (char)v9;
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *(void *)(OpsetName + 8);
  }
  if (v8 != v9) {
    goto LABEL_23;
  }
  if (v10 >= 0) {
    long long v11 = (unsigned __int8 *)OpsetName;
  }
  else {
    long long v11 = *(unsigned __int8 **)OpsetName;
  }
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v11, *((void *)a2 + 1))) {
      goto LABEL_18;
    }
LABEL_23:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot register a BlockBuilder with a different name than its specialization.");
    goto LABEL_24;
  }
  if (a2[23])
  {
    uint64_t v12 = a2;
    while (*v12 == *v11)
    {
      ++v12;
      ++v11;
      if (!--v7) {
        goto LABEL_18;
      }
    }
    goto LABEL_23;
  }
LABEL_18:
  uint64_t v13 = *(void *)(a1 + 24);
  MIL::Builder::BlockBuilder::GetContext((uint64_t)*a3, &v22);
  std::string::size_type v14 = v22.__r_.__value_.__r.__words[0];
  if (v22.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v22.__r_.__value_.__l.__size_);
  }
  if (v13 != v14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This FunctionBuilder holds a different MILContext than the one used to create this BlockBuilders.");
LABEL_24:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Builder::BlockBuilder::SetParent(*a3, *(const MIL::IRScope **)(a1 + 80));
  double result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__emplace_unique_key_args<std::string,std::string&,std::shared_ptr<MIL::Builder::BlockBuilder>&>(a1 + 40, a2, (long long *)a2, (std::string::size_type *)a3);
  if (!v16)
  {
    int v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v19 = std::string::append(&v21, " already has a Block in this FunctionBuilder.");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v18, &v22);
    __cxa_throw(v18, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3E67D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL MIL::Builder::FunctionBuilder::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((void *)(*(void *)(a1 + 8) + 168), a2) != 0;
}

uint64_t MIL::Builder::FunctionBuilder::GetAttributes(MIL::Builder::FunctionBuilder *this)
{
  return *((void *)this + 1) + 168;
}

uint64_t MIL::Builder::FunctionBuilder::GetSpecializations(MIL::Builder::FunctionBuilder *this)
{
  return *((void *)this + 1) + 40;
}

void MIL::Builder::FunctionBuilder::ClearInputs(MIL::Builder::FunctionBuilder *this)
{
  uint64_t v1 = *((void *)this + 1);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v1, *(char **)(v1 + 8));
  *(void *)uint64_t v1 = v1 + 8;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 8) = 0;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRBlock>>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::string const&,std::unique_ptr<MIL::IRBlock>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v12, v9, v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::string const&,std::unique_ptr<MIL::IRBlock>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  uint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v8 + 6) = *(void *)(a2 + 16);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  *((void *)v8 + 7) = v10;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3E69E8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::FunctionBuilder::FunctionBuilderImpl::TryGetVariable(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), a2, 1);
  if (result)
  {
    uint64_t v8 = 0;
    long long v5 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(a1 + 112, (unsigned __int8 *)a2, a2);
    if (v6)
    {
      if (*(char *)(a2 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else {
        std::string __p = *(std::string *)a2;
      }
      MIL::Builder::Variable::Make();
    }
    return *((void *)v5 + 5);
  }
  return result;
}

void sub_20F3E6B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    long long v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  std::string v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *std::string v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    std::string v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3E6D9C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<MIL::Builder::BlockBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::BlockBuilder,std::default_delete<MIL::Builder::BlockBuilder>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::Builder::BlockBuilder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::BlockBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::BlockBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__emplace_unique_key_args<std::string,std::string&,std::shared_ptr<MIL::Builder::BlockBuilder>&>(uint64_t a1, unsigned __int8 *a2, long long *a3, std::string::size_type *a4)
{
  unint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    float v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__construct_node_hash<std::string&,std::shared_ptr<MIL::Builder::BlockBuilder>&>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20F3E7154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__construct_node_hash<std::string&,std::shared_ptr<MIL::Builder::BlockBuilder>&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, std::string::size_type *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<MIL::Blob::LegacyStorageReader>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_20F3E71DC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl(uint64_t a1, void *a2, MIL::IRObject **a3)
{
  unint64_t v6 = (const void ***)(*(uint64_t (**)(void))(*(void *)*a3 + 128))();
  std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100]((uint64_t *)a1, v6);
  *(void *)(a1 + 24) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 32) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(void *)(a1 + 8std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)*a3 + 32))();
  if (*(char *)(v8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)v8, *(void *)(v8 + 8));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    *(void *)(a1 + 104) = *(void *)(v8 + 16);
    *(_OWORD *)(a1 + 88) = v9;
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  LocationPtr = (void *)MIL::IRObject::GetLocationPtr(*a3);
  *(void *)(a1 + 152) = *LocationPtr;
  uint64_t v11 = LocationPtr[1];
  *(void *)(a1 + 16std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t Attributes = MIL::IRObject::GetAttributes(*a3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a1 + 168, Attributes);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*((void *)*a3 + 8) + 32))((uint64_t)*a3 + 64, v13);
  std::unordered_map<std::string,MIL::IRValueType const*>::unordered_map((uint64_t)v17, v14);
  uint64_t v15 = (*(uint64_t (**)(uint64_t))(*((void *)*a3 + 8) + 64))((uint64_t)*a3 + 64);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v16, v15);
  MIL::IRMutableScope::Make();
}

void sub_20F3E75D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a21);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a26);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a10);
  uint64_t v30 = *(std::__shared_weak_count **)(v26 + 160);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table(v28);
  if (*(char *)(v26 + 111) < 0) {
    operator delete(*a9);
  }
  uint64_t v31 = *(void *)(v26 + 80);
  *(void *)(v26 + 8std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v27);
  uint64_t v32 = *(std::__shared_weak_count **)(v26 + 32);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v26, *(char **)(v26 + 8));
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::Builder::BlockBuilder>::operator=[abi:ne180100]<MIL::Builder::BlockBuilder,std::default_delete<MIL::Builder::BlockBuilder>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::Builder::BlockBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::BlockBuilder,std::default_delete<MIL::Builder::BlockBuilder>,void>((uint64_t *)&v6, a2);
  unint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3E79AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::BlockBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3E7A4C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

MIL::Builder::FunctionBuilder::FunctionBuilderImpl *std::unique_ptr<MIL::Builder::FunctionBuilder::FunctionBuilderImpl>::reset[abi:ne180100](MIL::Builder::FunctionBuilder::FunctionBuilderImpl **a1, MIL::Builder::FunctionBuilder::FunctionBuilderImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Builder::FunctionBuilder::FunctionBuilderImpl::~FunctionBuilderImpl(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::~FunctionBuilderImpl(MIL::Builder::FunctionBuilder::FunctionBuilderImpl *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 168);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 20);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table((uint64_t)this + 112);
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  uint64_t v3 = *((void *)this + 10);
  *((void *)this + 1std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 40);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)this, *((char **)this + 1));
}

void MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 24) = *a2;
  uint64_t v2 = a2[1];
  *(void *)(a1 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  long long v6 = 0u;
  long long v7 = 0u;
  int v8 = 1065353216;
  long long v3 = 0u;
  long long v4 = 0u;
  int v5 = 1065353216;
  MIL::IRMutableScope::Make();
}

void sub_20F3E7C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl();
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table((uint64_t)(v18 + 3));
  if (*(char *)(v15 + 111) < 0) {
    operator delete(*v18);
  }
  uint64_t v20 = *v17;
  *float v17 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v16);
  unint64_t v21 = *(std::__shared_weak_count **)(v15 + 32);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::~OperationBuilder(void ***this)
{
  *this = (void **)&unk_26C258A38;
  std::unique_ptr<MIL::Builder::OperationBuilder::OperationBuilderImpl>::reset[abi:ne180100](this + 3, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

{
  uint64_t vars8;

  MIL::Builder::OperationBuilder::~OperationBuilder(this);

  JUMPOUT(0x21056C700);
}

void MIL::Builder::OperationBuilder::OperationBuilder(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C258A38;
  std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperator const> &,std::shared_ptr<MIL::MILContext>,MIL::Builder::BlockBuilder *&>();
}

{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C258A38;
  std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperation> &,std::shared_ptr<MIL::MILContext>,std::string,MIL::Builder::BlockBuilder *&>();
}

{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C258A38;
  std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperation>,std::shared_ptr<MIL::MILContext>,std::string,MIL::IRScope const*&,MIL::Builder::BlockBuilder *&>();
}

{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C258A38;
  std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,MIL::IROperation const,std::shared_ptr<MIL::MILContext>,std::string,MIL::IRScope const*&,MIL::Builder::BlockBuilder *&>();
}

void sub_20F3E7E38(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperator const> &,std::shared_ptr<MIL::MILContext>,MIL::Builder::BlockBuilder *&>()
{
}

void sub_20F3E7F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x10F2C402763F690);
  _Unwind_Resume(a1);
}

void sub_20F3E7FB0(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperation> &,std::shared_ptr<MIL::MILContext>,std::string,MIL::Builder::BlockBuilder *&>()
{
}

void sub_20F3E80C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v16, v15);
  MEMORY[0x21056C700](v14, 0x10F2C402763F690);
  _Unwind_Resume(a1);
}

void sub_20F3E8178(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,std::shared_ptr<MIL::IROperation>,std::shared_ptr<MIL::MILContext>,std::string,MIL::IRScope const*&,MIL::Builder::BlockBuilder *&>()
{
}

void sub_20F3E8280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v16, v15);
  MEMORY[0x21056C700](v14, 0x10F2C402763F690);
  _Unwind_Resume(a1);
}

void sub_20F3E8334(_Unwind_Exception *exception_object)
{
  long long v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::Builder::OperationBuilder::OperationBuilderImpl,MIL::IROperation const,std::shared_ptr<MIL::MILContext>,std::string,MIL::IRScope const*&,MIL::Builder::BlockBuilder *&>()
{
}

void sub_20F3E8418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F2C402763F690);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)unint64_t v13 = *(_OWORD *)a2;
  uint64_t v14 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v12 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, v13, (uint64_t)__p, v10);
}

void sub_20F3E8530(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::OperationBuilder::AddInput((uint64_t)va, (uint64_t)va1, v3);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(uint64_t a1, _OWORD *a2, uint64_t a3, void *a4)
{
  if (*a4)
  {
    uint64_t v7 = a2;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&std::piecewise_construct, &v7);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v6 = *(std::string *)a3;
    }
    MIL::IRArgument::Make();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3E87F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v32 - 104));
  if (a32) {
    (*(void (**)(uint64_t))(*(void *)a32 + 8))(a32);
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v13 = *(std::string *)a2;
  }
  uint64_t v9 = a3[1];
  v12[0] = *a3;
  v12[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a4[1];
  v11[0] = *a4;
  v11[1] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, &v13, v12, v11);
}

void sub_20F3E8998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v20 = *(std::__shared_weak_count **)(v18 + 8);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(uint64_t a1, _OWORD *a2, void *a3, void *a4)
{
  if (*a3)
  {
    if (*a4)
    {
      uint64_t v7 = a2;
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 16), (const void **)a2, (uint64_t)&std::piecewise_construct, &v7);
      uint64_t v5 = a3[1];
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      MIL::IRArgument::Make();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot bind an input to a null IRValue.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3E8BF8(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  if (a4) {
    (*(void (**)(uint64_t))(*(void *)a4 + 8))(a4);
  }
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddOutput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddOutput(v8, (unsigned __int8 *)__p, a3, v10);
}

void sub_20F3E8D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddOutput(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an output to a null OperationBuilder.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  if (v6 == v7) {
    goto LABEL_34;
  }
  while (1)
  {
    uint64_t v8 = *(MIL::IRNamedValueType **)v6;
    uint64_t v9 = *(std::__shared_weak_count **)(v6 + 8);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t Name = MIL::IRNamedValueType::GetName(v8);
    uint64_t v11 = a2[23];
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = a2[23];
    }
    else {
      uint64_t v12 = *((void *)a2 + 1);
    }
    uint64_t v13 = *(unsigned __int8 *)(Name + 23);
    int v14 = (char)v13;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(Name + 8);
    }
    if (v12 != v13) {
      break;
    }
    if (v14 >= 0) {
      uint64_t v15 = (unsigned __int8 *)Name;
    }
    else {
      uint64_t v15 = *(unsigned __int8 **)Name;
    }
    if ((v11 & 0x80) != 0)
    {
      BOOL v24 = memcmp(*(const void **)a2, v15, *((void *)a2 + 1)) == 0;
    }
    else
    {
      if (!a2[23])
      {
        BOOL v24 = 1;
        if (!v9) {
          goto LABEL_28;
        }
LABEL_27:
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        goto LABEL_28;
      }
      uint64_t v16 = v11 - 1;
      uint64_t v17 = a2;
      do
      {
        int v19 = *v17++;
        int v18 = v19;
        int v21 = *v15++;
        int v20 = v21;
        BOOL v23 = v16-- != 0;
        BOOL v24 = v18 == v20;
      }
      while (v18 == v20 && v23);
    }
    if (v9) {
      goto LABEL_27;
    }
LABEL_28:
    if (v24) {
      goto LABEL_33;
    }
    v6 += 16;
    if (v6 == v7)
    {
      uint64_t v6 = v7;
LABEL_33:
      if (v6 != *(void *)(a1 + 48))
      {
        uint64_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        uint64_t v27 = std::string::append(&v30, " is already bound for this Operation.");
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v31.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v26, &v31);
        __cxa_throw(v26, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
LABEL_34:
      if ((char)a2[23] < 0) {
        std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *((void *)a2 + 1));
      }
      else {
        std::string v29 = *(std::string *)a2;
      }
      MIL::IRNamedValueType::Make();
    }
  }
  BOOL v24 = 0;
  if (!v9) {
    goto LABEL_28;
  }
  goto LABEL_27;
}

void sub_20F3E911C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0)
  {
    operator delete(a24);
    if ((v35 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v35)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v36);
  goto LABEL_8;
}

void MIL::Builder::OperationBuilder::CreateOperation(const void ****this)
{
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::CreateOperation(const void ***this)
{
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100](&v22, this + 2);
  memset(v21, 0, sizeof(v21));
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(v21, this[5], this[6], ((char *)this[6] - (char *)this[5]) >> 4);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v20, (uint64_t)(this + 8));
  uint64_t v17 = 0;
  int v18 = 0;
  unint64_t v19 = 0;
  std::vector<std::shared_ptr<MIL::IRBlock>>::reserve(&v17, ((char *)this[21] - (char *)this[20]) >> 4);
  uint64_t v2 = (MIL::Builder::BlockBuilder **)this[20];
  for (uint64_t i = (MIL::Builder::BlockBuilder **)this[21]; v2 != i; v2 += 2)
  {
    MIL::Builder::BlockBuilder::CreateBlock(&v24, *v2);
    if (v24) {
      operator new();
    }
    uint64_t v24 = 0;
    long long v4 = v18;
    if ((unint64_t)v18 >= v19)
    {
      uint64_t v6 = ((uint64_t)v18 - v17) >> 4;
      unint64_t v7 = v6 + 1;
      if ((unint64_t)(v6 + 1) >> 60) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v8 = v19 - v17;
      if ((uint64_t)(v19 - v17) >> 3 > v7) {
        unint64_t v7 = v8 >> 3;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v9 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v9 = v7;
      }
      v23[4] = &v19;
      uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v19, v9);
      uint64_t v11 = &v10[16 * v6];
      v23[0] = v10;
      v23[1] = v11;
      v23[3] = &v10[16 * v12];
      *(void *)uint64_t v11 = 0;
      *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
      uint64_t v23[2] = v11 + 16;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__swap_out_circular_buffer(&v17, v23);
      uint64_t v5 = v18;
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v23);
    }
    else
    {
      *int v18 = 0;
      v4[1] = 0;
      uint64_t v5 = v4 + 2;
    }
    int v18 = v5;
    uint64_t v13 = v24;
    uint64_t v24 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  int v14 = this[23];
  if (v14) {
    (*((void (**)(const void **, char *))*v14 + 2))(v14, (char *)this + 200);
  }
  uint64_t v15 = this[14];
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = this[1];
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
  }
  MIL::IROperation::Make();
}

void sub_20F3E94D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,void *a26)
{
  *(void *)(v26 - 96) = &a14;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 96));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a17);
  a17 = (void **)&a22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a17);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetNumArguments(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v2 + 16, a2);
  if (v2 + 24 == v3) {
    return 0;
  }
  else {
    return (uint64_t)(*(void *)(v3 + 64) - *(void *)(v3 + 56)) >> 4;
  }
}

uint64_t MIL::Builder::OperationBuilder::GetArgumentForParameter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetArgumentForParameter(*(void *)(a1 + 24), a2, a3);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetArgumentForParameter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 16, (const void **)a2);
  if (a1 + 24 == v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v19 = std::string::append(&v49, ".");
    long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v50);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 56);
  if (a3 >= (unint64_t)((*(void *)(v6 + 64) - v8) >> 4))
  {
    int v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unsigned int v22 = a3;
    BOOL v23 = v21;
    std::to_string(&v44, v22);
    uint64_t v24 = std::string::insert(&v44, 0, "Requested argument ");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    uint64_t v26 = std::string::append(&v45, " for parameter ");
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    int v28 = *(char *)(a2 + 23);
    if (v28 >= 0) {
      std::string v29 = (const std::string::value_type *)a2;
    }
    else {
      std::string v29 = *(const std::string::value_type **)a2;
    }
    if (v28 >= 0) {
      std::string::size_type v30 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v30 = *(void *)(a2 + 8);
    }
    std::string v31 = std::string::append(&v46, v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    int v33 = std::string::append(&v47, ", but only ");
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v43, (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 4);
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v35 = &v43;
    }
    else {
      int v35 = (std::string *)v43.__r_.__value_.__r.__words[0];
    }
    if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v43.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v43.__r_.__value_.__l.__size_;
    }
    uint64_t v37 = std::string::append(&v48, (const std::string::value_type *)v35, size);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::string v39 = std::string::append(&v49, " arguments are bound.");
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v23, &v50);
    __cxa_throw(v23, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v9 = v8 + 16 * a3;
  uint64_t v11 = *(MIL::IRArgument **)v9;
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 8);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*(void *)(a1 + 152) && (*(unsigned int (**)(MIL::IRArgument *))(*(void *)v11 + 16))(v11))
  {
    uint64_t v12 = *(void *)(a1 + 152);
    uint64_t Name = MIL::IRArgument::GetName(v11);
    uint64_t Variable = (uint64_t)MIL::Builder::BlockBuilder::GetVariable(v12, Name);
LABEL_10:
    uint64_t v16 = Variable;
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(MIL::IRArgument *))(*(void *)v11 + 16))(v11))
  {
    uint64_t v15 = MIL::IRArgument::GetName(v11);
    uint64_t Variable = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable(a1, v15);
    goto LABEL_10;
  }
  (*(void (**)(uint64_t *__return_ptr, MIL::IRArgument *))(*(void *)v11 + 48))(&v41, v11);
  uint64_t v16 = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable(a1, &v41);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
LABEL_13:
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v16;
}

void sub_20F3E9978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v44 - 57) < 0) {
    operator delete(*(void **)(v44 - 80));
  }
  if (*(char *)(v44 - 89) < 0) {
    operator delete(*(void **)(v44 - 112));
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v44 - 121) < 0) {
    operator delete(*(void **)(v44 - 144));
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v43 & 1) == 0) {
LABEL_20:
    }
      _Unwind_Resume(a1);
  }
  else if (!v43)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v42);
  goto LABEL_20;
}

unsigned __int8 *MIL::Builder::OperationBuilder::GetParameterNames@<X0>(unsigned __int8 **this@<X0>, uint64_t a2@<X8>)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetParameterNames(this[3], a2);
}

unsigned __int8 *MIL::Builder::OperationBuilder::OperationBuilderImpl::GetParameterNames@<X0>(unsigned __int8 *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t v3 = (unsigned __int8 *)*((void *)this + 2);
  long long v4 = this + 24;
  if (v3 != this + 24)
  {
    do
    {
      this = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, v3 + 32, (uint64_t)(v3 + 32));
      uint64_t v5 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 2);
          BOOL v7 = *(void *)v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v4);
  }
  return this;
}

void sub_20F3E9B7C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::Make()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F3E9C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v13) {
    MEMORY[0x21056C700](v12, 0xA1C4030951706);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3E9DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MIL::Builder::OperationBuilder::Make(v14);
  _Unwind_Resume(a1);
}

void sub_20F3E9ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MIL::Builder::OperationBuilder::Make(v14);
  _Unwind_Resume(a1);
}

void sub_20F3E9FDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v18) {
    MEMORY[0x21056C700](v17, 0xA1C4030951706);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::Make(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::Make();
}

{
  char v1;
  std::__shared_weak_count **v2;
  std::__shared_weak_count *v3;

  uint64_t v3 = (std::__shared_weak_count *)OUTLINED_FUNCTION_3(a1);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (*v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v2);
  }
  if (v1) {
    OUTLINED_FUNCTION_1_0();
  }
}

void sub_20F3EA0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::Make(void *a1)
{
  uint64_t v2 = (void *)(*(uint64_t (**)(void))(*(void *)*a1 + 216))(*a1);
  if (v2[1] == *v2)
  {
    uint64_t v3 = (void *)*a1;
    long long v4 = (atomic_ullong *)a1[1];
    __p[5] = v3;
    __p[6] = v4;
    if (v4) {
      atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
    }
    __p[3] = 0;
    __p[4] = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    MIL::Builder::OperationBuilder::Make();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "If the operation may have nested blocks, please use the other OperationBuilder Make API which takes IROperation, MILContext and OpsetName");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EA1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::Make(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = 0;
  a2[1] = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  MIL::Builder::OperationBuilder::Make();
}

void sub_20F3EA2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::OperationBuilder::UpdateOwnership@<X0>(MIL::Builder::OperationBuilder::OperationBuilderImpl **this@<X0>, MIL::Builder::BlockBuilder *a2@<X1>, uint64_t a3@<X8>)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::UpdateOwnership(this[3], a2, a3);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::UpdateOwnership@<X0>(MIL::Builder::OperationBuilder::OperationBuilderImpl *this@<X0>, MIL::Builder::BlockBuilder *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((void *)this + 19))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "OperationBuilder is already part of another BlockBuilder.");
    goto LABEL_14;
  }
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot update OperationBuilder's ownership to a null pointer.");
LABEL_14:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v6 = *((void *)this + 20);
  for (uint64_t i = *((void *)this + 21); v6 != i; v6 += 16)
  {
    uint64_t v9 = *(MIL::Builder::BlockBuilder **)v6;
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 8);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ScopePtr = (const MIL::IRScope *)MIL::Builder::BlockBuilder::GetScopePtr(a2);
    MIL::Builder::BlockBuilder::SetParent(v9, ScopePtr);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  *((void *)this + 19) = a2;

  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a3, (uint64_t *)this + 28);
}

void sub_20F3EA414(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::RemoveOwningBlock(MIL::Builder::OperationBuilder::OperationBuilderImpl **this)
{
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::RemoveOwningBlock(MIL::Builder::OperationBuilder::OperationBuilderImpl *this)
{
  *((void *)this + 19) = 0;
  uint64_t v1 = *((void *)this + 20);
  for (uint64_t i = *((void *)this + 21); v1 != i; v1 += 16)
  {
    uint64_t v3 = *(MIL::Builder::BlockBuilder **)v1;
    long long v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::BlockBuilder::SetParent(v3, 0);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_20F3EA4B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::OperationBuilder::GetNumOutputs(MIL::Builder::OperationBuilder *this)
{
  return (uint64_t)(*(void *)(*((void *)this + 3) + 48) - *(void *)(*((void *)this + 3) + 40)) >> 4;
}

uint64_t MIL::Builder::OperationBuilder::GetOutput(MIL::Builder::OperationBuilder::OperationBuilderImpl **this, unint64_t a2)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutput(this[3], a2, (const MIL::Builder::OperationBuilder *)this);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutput(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, unint64_t a2, const MIL::Builder::OperationBuilder *a3)
{
  uint64_t v4 = *((void *)this + 5);
  if (a2 >= (*((void *)this + 6) - v4) >> 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v34, a2);
    uint64_t v15 = std::string::insert(&v34, 0, "Attempting to access output ");
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    uint64_t v17 = std::string::append(&v35, " for ");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    uint64_t v19 = (*(uint64_t (**)(void))(**(void **)this + 16))();
    int v20 = *(char *)(v19 + 23);
    if (v20 >= 0) {
      int v21 = (const std::string::value_type *)v19;
    }
    else {
      int v21 = *(const std::string::value_type **)v19;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(v19 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(v19 + 8);
    }
    BOOL v23 = std::string::append(&v36, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    long long v25 = std::string::append(&v37, " operation, but only ");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v33, (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 4);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v27 = &v33;
    }
    else {
      long long v27 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    std::string v29 = std::string::append(&v38, (const std::string::value_type *)v27, size);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::string v31 = std::string::append(&v39, " outputs are defined.");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v40);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v5 = v4 + 16 * a2;
  uint64_t v6 = *(MIL::IRNamedValueType **)v5;
  BOOL v7 = *(std::__shared_weak_count **)(v5 + 8);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = *((void *)this + 19);
  uint64_t Name = MIL::IRNamedValueType::GetName(v6);
  if (v8) {
    uint64_t Variable = (uint64_t)MIL::Builder::BlockBuilder::GetVariable(v8, Name);
  }
  else {
    uint64_t Variable = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable((uint64_t)this, Name);
  }
  uint64_t v11 = Variable;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v11;
}

void sub_20F3EA738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v49 - 57) < 0) {
    operator delete(*(void **)(v49 - 80));
  }
  if (*(char *)(v49 - 89) < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v48 & 1) == 0) {
LABEL_20:
    }
      _Unwind_Resume(a1);
  }
  else if (!v48)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v47);
  goto LABEL_20;
}

uint64_t MIL::Builder::OperationBuilder::GetOutputName(MIL::Builder::OperationBuilder::OperationBuilderImpl **this, unint64_t a2)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputName(this[3], a2);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputName(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 5);
  if (a2 >= (*((void *)this + 6) - v2) >> 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, a2);
    uint64_t v8 = std::string::insert(&v27, 0, "Attempting to access output ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v28, " for ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)this + 16))();
    int v13 = *(char *)(v12 + 23);
    if (v13 >= 0) {
      uint64_t v14 = (const std::string::value_type *)v12;
    }
    else {
      uint64_t v14 = *(const std::string::value_type **)v12;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(v12 + 8);
    }
    long long v16 = std::string::append(&v29, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v30, " operation, but only ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v26, (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 4);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v20 = &v26;
    }
    else {
      int v20 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::string::size_type v22 = std::string::append(&v31, (const std::string::value_type *)v20, size);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v32, " outputs are defined.");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v33);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = *(MIL::IRNamedValueType **)(v2 + 16 * a2);

  return MIL::IRNamedValueType::GetName(v3);
}

void sub_20F3EAA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v42 - 41) < 0) {
    operator delete(*(void **)(v42 - 64));
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0) {
LABEL_20:
    }
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v40);
  goto LABEL_20;
}

uint64_t MIL::Builder::OperationBuilder::GetOutputType(MIL::Builder::OperationBuilder::OperationBuilderImpl **this, unint64_t a2)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(this[3], a2);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, unint64_t a2)
{
  uint64_t v2 = *((void *)this + 5);
  if (a2 >= (*((void *)this + 6) - v2) >> 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, a2);
    uint64_t v8 = std::string::insert(&v27, 0, "Attempting to access output ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v28, " for ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)this + 16))();
    int v13 = *(char *)(v12 + 23);
    if (v13 >= 0) {
      uint64_t v14 = (const std::string::value_type *)v12;
    }
    else {
      uint64_t v14 = *(const std::string::value_type **)v12;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(v12 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(v12 + 8);
    }
    long long v16 = std::string::append(&v29, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    long long v18 = std::string::append(&v30, " operation, but only ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v26, (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 4);
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v20 = &v26;
    }
    else {
      int v20 = (std::string *)v26.__r_.__value_.__r.__words[0];
    }
    if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v26.__r_.__value_.__l.__size_;
    }
    std::string::size_type v22 = std::string::append(&v31, (const std::string::value_type *)v20, size);
    long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    long long v24 = std::string::append(&v32, " outputs are defined.");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v33);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = *(MIL::IRNamedValueType **)(v2 + 16 * a2);

  return MIL::IRNamedValueType::GetType(v3);
}

void sub_20F3EAD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v42 - 41) < 0) {
    operator delete(*(void **)(v42 - 64));
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v41 & 1) == 0) {
LABEL_20:
    }
      _Unwind_Resume(a1);
  }
  else if (!v41)
  {
    goto LABEL_20;
  }
  __cxa_free_exception(v40);
  goto LABEL_20;
}

void *MIL::Builder::OperationBuilder::GetChildOperations@<X0>(MIL::Builder::OperationBuilder *this@<X0>, uint64_t a2@<X8>)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetChildOperations(*((void **)this + 3), a2);
}

{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstChildOperations(*((void **)this + 3), a2);
}

void *MIL::Builder::OperationBuilder::OperationBuilderImpl::GetChildOperations@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (!this[19])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Attempting to get child operations of an OperationBuilder that is not part of a block.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = this;
  uint64_t v4 = (MIL::IRNamedValueType **)this[5];
  uint64_t v5 = (MIL::IRNamedValueType **)this[6];
  while (v4 != v5)
  {
    uint64_t v6 = v3[19];
    uint64_t Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v4);
    this = MIL::Builder::BlockBuilder::GetOperationsByInput(v6, Name);
    for (uint64_t i = (void *)this[2]; i; uint64_t i = (void *)*i)
      this = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__emplace_unique_key_args<std::shared_ptr<MIL::Builder::OperationBuilder>,std::shared_ptr<MIL::Builder::OperationBuilder> const&>(a2, i + 2, i + 2);
    v4 += 2;
  }
  return this;
}

void sub_20F3EAF50(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstChildOperations@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  if (!this[19])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Attempting to get child operations of an OperationBuilder that is not part of a block.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = this;
  uint64_t v4 = (MIL::IRNamedValueType **)this[5];
  uint64_t v5 = (MIL::IRNamedValueType **)this[6];
  while (v4 != v5)
  {
    uint64_t v6 = v3[19];
    uint64_t Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v4);
    this = MIL::Builder::BlockBuilder::GetOperationsByInput(v6, Name);
    for (uint64_t i = (void *)this[2]; i; uint64_t i = (void *)*i)
      this = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__emplace_unique_impl<std::shared_ptr<MIL::Builder::OperationBuilder> const&>((void *)a2, i + 2);
    v4 += 2;
  }
  return this;
}

void sub_20F3EB054(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetOperator(MIL::Builder::OperationBuilder *this)
{
  return **((void **)this + 3);
}

uint64_t MIL::Builder::OperationBuilder::GetOpsetName(MIL::Builder::OperationBuilder::OperationBuilderImpl **this)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOpsetName(this[3]);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOpsetName(MIL::Builder::OperationBuilder::OperationBuilderImpl *this)
{
  if (*((char *)this + 143) < 0)
  {
    if (*((void *)this + 16)) {
      return (uint64_t)this + 120;
    }
LABEL_5:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "this OperationBuilder does not have an opset name.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (!*((unsigned char *)this + 143)) {
    goto LABEL_5;
  }
  return (uint64_t)this + 120;
}

void sub_20F3EB104(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(this + 24);
  uint64_t v4 = *v2;
  uint64_t v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void MIL::Builder::OperationBuilder::RenameArgument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(&v5, (void *)(a1 + 8));
  MIL::Builder::OperationBuilder::OperationBuilderImpl::RenameInput(v4, a2, (uint64_t)__p, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3EB1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::RenameInput(void *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  uint64_t v8 = (void *)a1[2];
  long long v9 = a1 + 3;
  if (v8 != a1 + 3)
  {
    do
    {
      uint64_t v10 = v8[7];
      if (v8[8] != v10)
      {
        unint64_t v11 = 0;
        do
        {
          uint64_t v12 = (MIL::IRArgument **)(v10 + 16 * v11);
          if ((*(unsigned int (**)(void))(*(void *)*v12 + 16))())
          {
            uint64_t Name = (unsigned __int8 *)MIL::IRArgument::GetName(*v12);
            uint64_t v14 = Name[23];
            if ((v14 & 0x80u) == 0) {
              uint64_t v15 = Name[23];
            }
            else {
              uint64_t v15 = *((void *)Name + 1);
            }
            uint64_t v16 = *(unsigned __int8 *)(a2 + 23);
            int v17 = (char)v16;
            if ((v16 & 0x80u) != 0) {
              uint64_t v16 = *(void *)(a2 + 8);
            }
            if (v15 == v16)
            {
              if (v17 >= 0) {
                long long v18 = (const std::string::value_type *)a2;
              }
              else {
                long long v18 = *(const std::string::value_type **)a2;
              }
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)Name, v18, *((void *)Name + 1)))
                {
LABEL_20:
                  if (*(char *)(a3 + 23) < 0) {
                    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
                  }
                  else {
                    std::string v26 = *(std::string *)a3;
                  }
                  MIL::IRArgument::Make();
                }
              }
              else
              {
                if (!Name[23]) {
                  goto LABEL_20;
                }
                while (*Name == *(unsigned __int8 *)v18)
                {
                  ++Name;
                  ++v18;
                  if (!--v14) {
                    goto LABEL_20;
                  }
                }
              }
            }
          }
          ++v11;
          uint64_t v10 = v8[7];
        }
        while (v11 < (v8[8] - v10) >> 4);
      }
      long long v19 = (void *)v8[1];
      if (v19)
      {
        do
        {
          int v20 = v19;
          long long v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          int v20 = (void *)v8[2];
          BOOL v21 = *v20 == (void)v8;
          uint64_t v8 = v20;
        }
        while (!v21);
      }
      uint64_t v8 = v20;
    }
    while (v20 != v9);
  }
  uint64_t v22 = a1[19];
  if (v22)
  {
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string v25 = *(std::string *)a3;
    }
    long long v24 = *a4;
    *(void *)a4 = 0;
    *((void *)a4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    MIL::Builder::BlockBuilder::UpdateOpInput(v22, (uint64_t)&v25, (uint64_t *)&v24, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v24 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20F3EB4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::GetInputArguments(MIL::Builder::OperationBuilder::OperationBuilderImpl **this@<X0>, uint64_t a2@<X8>)
{
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::GetInputArguments(MIL::Builder::OperationBuilder::OperationBuilderImpl *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a2, (unint64_t)(float)*((unint64_t *)this + 4));
  long long v5 = (MIL::Builder::OperationBuilder::OperationBuilderImpl *)*((void *)this + 2);
  if (v5 != (MIL::Builder::OperationBuilder::OperationBuilderImpl *)((char *)this + 24))
  {
    do
    {
      if (*((void *)v5 + 8) != *((void *)v5 + 7))
      {
        LODWORD(v6) = 0;
        do
        {
          uint64_t ArgumentForParameter = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetArgumentForParameter((uint64_t)this, (uint64_t)v5 + 32, v6);
          std::__hash_table<MIL::Builder::Variable const*,std::hash<MIL::Builder::Variable const*>,std::equal_to<MIL::Builder::Variable const*>,std::allocator<MIL::Builder::Variable const*>>::__emplace_unique_key_args<MIL::Builder::Variable const*,MIL::Builder::Variable const*>(a2, &ArgumentForParameter, &ArgumentForParameter);
          unint64_t v6 = (v6 + 1);
        }
        while (v6 < (uint64_t)(*((void *)v5 + 8) - *((void *)v5 + 7)) >> 4);
      }
      uint64_t v7 = (MIL::Builder::OperationBuilder::OperationBuilderImpl *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (MIL::Builder::OperationBuilder::OperationBuilderImpl *)*((void *)v5 + 2);
          BOOL v9 = *(void *)v8 == (void)v5;
          long long v5 = v8;
        }
        while (!v9);
      }
      long long v5 = v8;
    }
    while (v8 != (MIL::Builder::OperationBuilder::OperationBuilderImpl *)((char *)this + 24));
  }
}

void sub_20F3EB640(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::GetOutputs(MIL::Builder::OperationBuilder::OperationBuilderImpl **this@<X0>, void **a2@<X8>)
{
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputs(MIL::Builder::OperationBuilder::OperationBuilderImpl *this@<X0>, const MIL::Builder::OperationBuilder *a2@<X1>, void **a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::string const*>::reserve(a3, (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 4);
  if (*((void *)this + 6) != *((void *)this + 5))
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t Output = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutput(this, v6, a2);
      uint64_t v8 = Output;
      uint64_t v10 = (uint64_t *)a3[1];
      unint64_t v9 = (unint64_t)a3[2];
      if ((unint64_t)v10 >= v9)
      {
        uint64_t v12 = ((char *)v10 - (unsigned char *)*a3) >> 3;
        if ((unint64_t)(v12 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v9 - (void)*a3;
        uint64_t v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
          uint64_t v14 = v12 + 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a3 + 2), v15);
        }
        else {
          uint64_t v16 = 0;
        }
        int v17 = (uint64_t *)&v16[8 * v12];
        *int v17 = v8;
        unint64_t v11 = (char *)(v17 + 1);
        long long v19 = (char *)*a3;
        long long v18 = (char *)a3[1];
        if (v18 != *a3)
        {
          do
          {
            uint64_t v20 = *((void *)v18 - 1);
            v18 -= 8;
            *--int v17 = v20;
          }
          while (v18 != v19);
          long long v18 = (char *)*a3;
        }
        *a3 = v17;
        a3[1] = v11;
        a3[2] = &v16[8 * v15];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v10 = Output;
        unint64_t v11 = (char *)(v10 + 1);
      }
      a3[1] = v11;
      ++v6;
    }
    while (v6 < (uint64_t)(*((void *)this + 6) - *((void *)this + 5)) >> 4);
  }
}

void sub_20F3EB7B8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Builder::OperationBuilder::SetAttribute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v7 = (std::__shared_weak_count *)a3[1];
  uint64_t v9 = *a3;
  uint64_t v10 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::SetAttribute(v6, (long long *)__p, &v9);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  return std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
}

void sub_20F3EB870(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::SetAttribute(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 64, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v8);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
  *((void *)v4 + 5) = v6;
  *((void *)v4 + 6) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

uint64_t MIL::Builder::OperationBuilder::GetType(uint64_t a1, uint64_t a2)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(*(void *)(a1 + 24), a2);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputType(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v24 = *(std::string *)a2;
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__s1, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  }
  else {
    std::string __s1 = v24;
  }
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v5 = *(MIL::IRNamedValueType **)v3;
      uint64_t v6 = *(std::__shared_weak_count **)(v3 + 8);
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t Name = MIL::IRNamedValueType::GetName(v5);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      uint64_t v9 = *(unsigned __int8 *)(Name + 23);
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(Name + 8);
      }
      if (size != v9) {
        break;
      }
      if (v10 >= 0) {
        unint64_t v11 = (unsigned __int8 *)Name;
      }
      else {
        unint64_t v11 = *(unsigned __int8 **)Name;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        BOOL v20 = memcmp(__s1.__r_.__value_.__l.__data_, v11, __s1.__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
        {
          BOOL v20 = 1;
          if (!v6) {
            goto LABEL_33;
          }
LABEL_32:
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
          goto LABEL_33;
        }
        uint64_t v12 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          int v15 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          int v14 = v15;
          int v17 = *v11++;
          int v16 = v17;
          BOOL v19 = v12-- != 0;
          BOOL v20 = v14 == v16;
        }
        while (v14 == v16 && v19);
      }
      if (v6) {
        goto LABEL_32;
      }
LABEL_33:
      if (v20) {
        goto LABEL_38;
      }
      v3 += 16;
      if (v3 == v4)
      {
        uint64_t v3 = v4;
        goto LABEL_38;
      }
    }
    BOOL v20 = 0;
    if (!v6) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
LABEL_38:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s1.__r_.__value_.__l.__data_);
  }
  if (v3 == *(void *)(a1 + 48)) {
    uint64_t Type = 0;
  }
  else {
    uint64_t Type = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)v3);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  return Type;
}

void sub_20F3EBAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MIL::Builder::OperationBuilder::IsPartOfBlock(MIL::Builder::OperationBuilder *this)
{
  return *(void *)(*((void *)this + 3) + 152) != 0;
}

uint64_t MIL::Builder::OperationBuilder::GetLocation(MIL::Builder::OperationBuilder *this)
{
  return *(void *)(*((void *)this + 3) + 104);
}

uint64_t MIL::Builder::OperationBuilder::GetLocationPtr(MIL::Builder::OperationBuilder *this)
{
  return *((void *)this + 3) + 104;
}

void MIL::Builder::OperationBuilder::SetLocation(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::SetLocation(v2, (uint64_t *)&v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_20F3EBB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::SetLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set an empty location.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 112);
  *(void *)(a1 + 104) = v2;
  *(void *)(a1 + 112) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20F3EBC10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetSpecificationOpsetName(MIL::Builder::OperationBuilder *this)
{
  return *((void *)this + 3) + 200;
}

std::string *MIL::Builder::OperationBuilder::SetSpecificationOpsetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 24) + 200), a2);
}

void MIL::Builder::OperationBuilder::AddBlock(uint64_t a1, uint64_t a2)
{
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  MIL::Builder::BlockBuilder *v4;
  std::__shared_weak_count *v5;

  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  uint64_t v4 = *(MIL::Builder::BlockBuilder **)a2;
  uint64_t v5 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddBlock(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddBlock(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[23];
  if (v2)
  {
    uint64_t v5 = (MIL::Builder::BlockBuilder *)a1[19];
    if (v5)
    {
      MIL::Builder::BlockBuilder::GetScopePtr(v5);
      uint64_t v2 = a1[23];
    }
    uint64_t v6 = a1[24];
    uint64_t v9 = v2;
    uint64_t v10 = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    MIL::Builder::BlockBuilder::Make();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Need to set the context of this Operation in order to add a block to it.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EBDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3EBE6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void **MIL::Builder::OperationBuilder::OperationBuilderImpl::AddBlock(uint64_t a1, MIL::Builder::BlockBuilder **a2)
{
  uint64_t v4 = *(MIL::Builder::BlockBuilder **)(a1 + 152);
  if (v4)
  {
    uint64_t v5 = *a2;
    ScopePtr = (const MIL::IRScope *)MIL::Builder::BlockBuilder::GetScopePtr(v4);
    MIL::Builder::BlockBuilder::SetParent(v5, ScopePtr);
  }

  return std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::push_back[abi:ne180100]((uint64_t *)(a1 + 160), (uint64_t)a2);
}

void *MIL::Builder::OperationBuilder::GetBlocks@<X0>(MIL::Builder::OperationBuilder *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::BlockBuilder>*,std::shared_ptr<MIL::Builder::BlockBuilder>*>(a2, *(void **)(v2 + 160), *(void **)(v2 + 168), (uint64_t)(*(void *)(v2 + 168) - *(void *)(v2 + 160)) >> 4);
}

void MIL::Builder::OperationBuilder::SetContext(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 24);
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::SetContext(v2, (uint64_t *)&v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_20F3EBF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::SetContext(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 184);
  uint64_t v3 = *a2;
  if (v2) {
    BOOL v4 = v2 == v3;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot change the context of an OperationBuilder that already has one.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v5 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 192);
  *(void *)(a1 + 184) = v3;
  *(void *)(a1 + 192) = v5;
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F3EC000(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetContext@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 24);
  uint64_t v4 = *(void *)(v2 + 184);
  uint64_t v3 = *(void *)(v2 + 192);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, MIL::Builder::Variable::VariableImpl **a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  *(void *)&long long v10 = *a4;
  *((void *)&v10 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, (long long *)__p, a3, &v10);
}

void sub_20F3EC0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(uint64_t a1, long long *a2, MIL::Builder::Variable::VariableImpl **a3, long long *a4)
{
  if (a3)
  {
    if (*(void *)a4)
    {
      uint64_t Name = MIL::Builder::Variable::TryGetName(a3);
      if (Name)
      {
        uint64_t v18 = *((void *)a2 + 2);
        long long v17 = *a2;
        *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        *((void *)a2 + 2) = 0;
        *(void *)a2 = 0;
        if (*((char *)Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)Name, *((void *)Name + 1));
        }
        else
        {
          long long v9 = *(_OWORD *)Name;
          v16.__r_.__value_.__r.__words[2] = *((void *)Name + 2);
          *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
        }
        long long v15 = *a4;
        *(void *)a4 = 0;
        *((void *)a4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, &v17, (uint64_t)&v16, &v15);
      }
      long long v13 = *a2;
      uint64_t v14 = *((void *)a2 + 2);
      *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
      *((void *)a2 + 2) = 0;
      *(void *)a2 = 0;
      MIL::Builder::Variable::TryGetValueSharedPtr(a3, &v12);
      long long v11 = *a4;
      *(void *)a4 = 0;
      *((void *)a4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
      MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(a1, &v13, &v12, &v11);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add a null Variable as an input.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EC2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::AddInputBool(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<BOOL>(v8, (uint64_t)__p, a3, v10);
}

{
  uint64_t v8;
  uint64_t v9;
  void v10[2];
  void *__p[2];
  uint64_t v12;

  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<BOOL>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EC3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

{
  MIL::IRConstantDimension *v4;
  uint64_t v5;
  void *v6;
  std::runtime_error *exception;
  void *__p[3];

  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v5 = *(void *)(a3 + 8);
      uint64_t v6 = operator new(8uLL);
      __p[0] = v6;
      *uint64_t v6 = v5;
      __p[1] = v6 + 1;
      __p[2] = v6 + 1;
      MIL::IRTensorValueType::Make(v4, 2, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EC570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v13 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v11 = *(std::string *)a3;
  }
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<std::string>(v8, (uint64_t)__p, (uint64_t)&v11, v10);
}

void sub_20F3EC6D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::string v25 = *(std::__shared_weak_count **)(v23 + 8);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<std::string>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EC8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void MIL::Builder::OperationBuilder::AddInputBFloat16(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Bf16>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3ECA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Bf16>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3ECBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat16(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int16 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp16>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3ECCE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp16>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3ECE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat8E5M2(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E5M2>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3ECFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E5M2>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3ED13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat8E4M3FN(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E4M3FN>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3ED268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E4M3FN>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3ED3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat32(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a3, (void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v7 = a3[1];
  v8[0] = *a3;
  v8[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<float>(v6, (uint64_t)__p, v8);
}

void sub_20F3ED530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<float>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 184))
  {
    if (*a3) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3ED6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat64(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a3, (void *)(a1 + 8));
  uint64_t v6 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v10 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v7 = a3[1];
  v8[0] = *a3;
  v8[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<double>(v6, (uint64_t)__p, v8);
}

void sub_20F3ED800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<double>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*(void *)(a1 + 184))
  {
    if (*a3) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3ED99C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt4(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Int4>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EDAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Int4>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EDCB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<signed char>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EDE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EDFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<short>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EE0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<short>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EE26C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<int>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EE398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<int>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EE52C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<long long>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EE658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<long long>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EE7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt1(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt1>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EE918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt1>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EEB04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt2(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt2>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EEC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt2>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EEE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt3(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt3>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EEFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt3>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EF1A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt4(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt4>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EF308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt4>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EF4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt6(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt6>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EF658(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt6>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EF844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  __cxa_free_exception(v23);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned char>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EF9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned char>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EFB3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned short>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EFC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned short>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3EFDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned int>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3EFF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned int>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F00BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned long long>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F01E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned long long>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 184))
  {
    if (*a4) {
      MIL::IRTensorValueType::MakeScalar();
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F037C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_free_exception(v18);
  _Unwind_Resume(a1);
}

void sub_20F3F04A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void sub_20F3F067C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<std::string>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F07C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<std::string>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 3, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F09B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputBFloat16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Bf16>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F0AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Bf16>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 1;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 7, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F0CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp16>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F0E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp16>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 1;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 4, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F1000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat8E5M2(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E5M2>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F1144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E5M2>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 25, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F1324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat8E4M3FN(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E4M3FN>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F1468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Fp8E4M3FN>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 24, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F1648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<float>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F178C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<float>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 2;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 5, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F1970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputFloat64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<double>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F1AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<double>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 3;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 6, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F1C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Int4>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F1DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::Int4>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 13, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F1FD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<signed char>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F2128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<signed char>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 9, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F2308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<short>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F244C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<short>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 1;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 10, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F2630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<int>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F2774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<int>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 2;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 11, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F2958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputInt64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<long long>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F2A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<long long>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 3;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 12, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F2C80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt1(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt1>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F2DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt1>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 21, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F2FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt2(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt2>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F3110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt2>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 19, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F330C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt3(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt3>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F345C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt3>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 22, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F3658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt4>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F37A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt4>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 20, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F39A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt6(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt6>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F3AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<MIL::UInt6>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 23, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F3CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned char>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F3E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned char>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = v5 - v6;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 14, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F4020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt16(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned short>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F4164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned short>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 1;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 15, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F4348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt32(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned int>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned int>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 2;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 16, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F4670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInputUInt64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v12 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned long long>(v8, (uint64_t)__p, a3, v10);
}

void sub_20F3F47B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::Builder::OperationBuilder::AddOutput();
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInputLiteral<unsigned long long>(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v4 = *(MIL::IRConstantDimension **)(a1 + 184);
  if (v4)
  {
    if (*a4)
    {
      uint64_t v6 = *a3;
      uint64_t v5 = a3[1];
      uint64_t v7 = operator new(8uLL);
      __p[0] = v7;
      *uint64_t v7 = (v5 - v6) >> 3;
      __p[1] = v7 + 1;
      __p[2] = v7 + 1;
      MIL::IRTensorValueType::Make(v4, 17, (MIL::MILContext ***)__p);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
  }
  else
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This OperationBuilder needs a context in order to accept literal inputs.");
  }
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F4998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20)
{
  __cxa_free_exception(v20);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v16 = *(std::string *)a2;
  }
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  uint64_t v19 = *a3;
  BOOL v20 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  long long v15 = 0;
  long long v17 = (void **)&v13;
  char v18 = 0;
  uint64_t v13 = (uint64_t *)operator new(0x10uLL);
  uint64_t v14 = v13;
  long long v15 = v13 + 2;
  uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v15, &v19, &v21, v13);
  uint64_t v10 = (std::__shared_weak_count *)a4[1];
  uint64_t v11 = *a4;
  uint64_t v12 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, (long long *)&v16, &v13, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  long long v17 = (void **)&v13;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v17);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_20F3F4B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  uint64_t v23 = *(std::__shared_weak_count **)(v21 + 8);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(uint64_t a1, long long *a2, uint64_t **a3, uint64_t *a4)
{
  if (!*a4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add an input to a null OperationBuilder.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v4 = *a3;
  uint64_t v5 = a3[1];
  if (*a3 != v5)
  {
    uint64_t v9 = (uint64_t **)(a1 + 16);
    do
    {
      uint64_t v10 = *v4;
      *(void *)&long long v24 = *v4;
      uint64_t v11 = v4[1];
      *((void *)&v24 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      if (!v10)
      {
        long long v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v17, "Cannot bind an input to a null IRArgument.");
        __cxa_throw(v17, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      std::string v25 = a2;
      uint64_t v12 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)a2, (uint64_t)&std::piecewise_construct, &v25);
      std::vector<std::shared_ptr<MIL::IRArgument>>::push_back[abi:ne180100](v12 + 7, &v24);
      if (*(void *)(a1 + 152))
      {
        uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v24 + 32))(v24);
        if (v13)
        {
          uint64_t v14 = *(void *)(a1 + 152);
          if (*(char *)(v13 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)v13, *(void *)(v13 + 8));
          }
          else
          {
            long long v15 = *(_OWORD *)v13;
            v23.__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
            *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v15;
          }
          std::string v16 = (std::__shared_weak_count *)a4[1];
          uint64_t v21 = *a4;
          uint64_t v22 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v20 = 0;
          MIL::Builder::BlockBuilder::UpdateOpInput(v14, (uint64_t)&v23, &v21, (uint64_t)__p);
          if (SHIBYTE(v20) < 0) {
            operator delete(__p[0]);
          }
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
          if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v23.__r_.__value_.__l.__data_);
          }
        }
      }
      if (*((void *)&v24 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
      }
      v4 += 2;
    }
    while (v4 != v5);
  }
}

void sub_20F3F4E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::AddInput(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, uint64_t *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v12 = *(std::string *)a2;
  }
  uint64_t v9 = (std::__shared_weak_count *)a4[1];
  uint64_t v10 = *a4;
  uint64_t v11 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::AddInput(v8, (long long *)&v12, a3, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_20F3F4F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  char v18 = *(std::__shared_weak_count **)(v16 + 8);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::OperationBuilder::RemoveInputs(uint64_t a1, const void **a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(&v6, (void *)(a1 + 8));
  uint64_t v4 = MIL::Builder::OperationBuilder::OperationBuilderImpl::RemoveInputs(v3, a2, &v6);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

void sub_20F3F4FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::RemoveInputs(uint64_t a1, const void **a2, uint64_t *a3)
{
  uint64_t v6 = (uint64_t **)(a1 + 16);
  uint64_t result = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(a1 + 16, a2);
  if (result)
  {
    if (*(void *)(a1 + 152))
    {
      char v18 = a2;
      uint64_t v8 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v18);
      uint64_t v9 = (void *)v8[7];
      for (uint64_t i = (void *)v8[8]; v9 != i; v9 += 2)
      {
        uint64_t v11 = (*(uint64_t (**)(void))(*(void *)*v9 + 32))(*v9);
        if (v11)
        {
          uint64_t v12 = *(void *)(a1 + 152);
          if (*(char *)(v11 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
          }
          else
          {
            long long v13 = *(_OWORD *)v11;
            v17.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
            *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v13;
          }
          uint64_t v14 = (std::__shared_weak_count *)a3[1];
          uint64_t v15 = *a3;
          uint64_t v16 = v14;
          if (v14) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::BlockBuilder::RemoveOpInput(v12, (uint64_t)&v17, &v15);
          if (v16) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    return std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__erase_unique<std::string>(v6, a2) != 0;
  }
  return result;
}

void sub_20F3F512C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MIL::Builder::OperationBuilder::TryGetAttribute@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)(a1 + 24) + 64), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t MIL::Builder::OperationBuilder::GetParameters(MIL::Builder::OperationBuilder *this)
{
  return *((void *)this + 3) + 16;
}

uint64_t MIL::Builder::OperationBuilder::TryGetConstant@<X0>(const void ****this@<X0>, void *a2@<X8>)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::TryGetConstant(this[3], a2);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::TryGetConstant@<X0>(const void ***this@<X0>, void *a2@<X8>)
{
  uint64_t result = (*((uint64_t (**)(const void **))**this + 13))(*this);
  if (result) {
    MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstants(this);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_20F3F5298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::GetConstants(const void ****this)
{
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::GetConstants(const void ***this)
{
  if ((*((uint64_t (**)(const void **))**this + 13))(*this))
  {
    std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100]((uint64_t *)&v19, this + 2);
    if (this[19])
    {
      uint64_t v2 = v19;
      if (v19 != v20)
      {
        do
        {
          uint64_t v3 = v2[7];
          if (v2[8] != v3)
          {
            uint64_t v4 = 0;
            unint64_t v5 = 0;
            do
            {
              if ((*(uint64_t (**)(void))(**(void **)(v3 + v4) + 32))(*(void *)(v3 + v4)))
              {
                uint64_t v6 = this[19];
                uint64_t Name = MIL::IRArgument::GetName(*(MIL::IRArgument **)(v3 + v4));
                MIL::Builder::BlockBuilder::GetValue(&v16, v6, Name);
                uint64_t v8 = v16;
                if (v17) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                }
                if (v8)
                {
                  uint64_t v9 = this[19];
                  uint64_t v10 = MIL::IRArgument::GetName(*(MIL::IRArgument **)(v3 + v4));
                  MIL::Builder::BlockBuilder::GetValue(&v16, v9, v10);
                  v18[3] = v16;
                  v18[4] = v17;
                  if (v17) {
                    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  MIL::IRArgument::Make();
                }
              }
              ++v5;
              uint64_t v3 = v2[7];
              v4 += 16;
            }
            while (v5 < (v2[8] - v3) >> 4);
          }
          uint64_t v11 = (void *)v2[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v2[2];
              BOOL v13 = *v12 == (void)v2;
              uint64_t v2 = v12;
            }
            while (!v13);
          }
          uint64_t v2 = v12;
        }
        while (v12 != v20);
      }
    }
    memset(v18, 0, 24);
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(v18, this[5], this[6], ((char *)this[6] - (char *)this[5]) >> 4);
    uint64_t v14 = (MIL::UnknownLocation *)std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v16, (uint64_t)(this + 8));
    MIL::UnknownLocation::Make(v14);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "This operator does not have constant function defined.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F56E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  __cxa_free_exception(v24);
  _Unwind_Resume(a1);
}

BOOL MIL::Builder::OperationBuilder::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((void *)(*(void *)(a1 + 24) + 64), a2) != 0;
}

uint64_t MIL::Builder::OperationBuilder::GetAttributes(MIL::Builder::OperationBuilder *this)
{
  return *((void *)this + 3) + 64;
}

uint64_t MIL::Builder::OperationBuilder::GetOwningBlock(MIL::Builder::OperationBuilder::OperationBuilderImpl **this)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOwningBlock(this[3]);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOwningBlock(MIL::Builder::OperationBuilder::OperationBuilderImpl *this)
{
  uint64_t result = *((void *)this + 19);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "This OperationBuilder does not have an owning block");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_20F3F5888(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::GetBlocksRef(MIL::Builder::OperationBuilder *this)
{
  return *((void *)this + 3) + 160;
}

uint64_t MIL::Builder::OperationBuilder::GetIRArgument(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return MIL::Builder::OperationBuilder::OperationBuilderImpl::GetIRArgument(*(void *)(a1 + 24), a2, a3);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetIRArgument(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 16, (const void **)a2);
  if (a1 + 24 == v6)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v11 = std::string::append(&v39, ".");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v40);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 + 56);
  if (a3 >= (*(void *)(v6 + 64) - v8) >> 4)
  {
    BOOL v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v14 = a3;
    uint64_t v15 = v13;
    std::to_string(&v34, v14);
    uint64_t v16 = std::string::insert(&v34, 0, "Requested argument ");
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    char v18 = std::string::append(&v35, " for parameter ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      uint64_t v21 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v21 = *(const std::string::value_type **)a2;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a2 + 8);
    }
    std::string v23 = std::string::append(&v36, v21, v22);
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    std::string v25 = std::string::append(&v37, ", but only ");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v33, (uint64_t)(*(void *)(v7 + 64) - *(void *)(v7 + 56)) >> 4);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v27 = &v33;
    }
    else {
      uint64_t v27 = (std::string *)v33.__r_.__value_.__r.__words[0];
    }
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v33.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v33.__r_.__value_.__l.__size_;
    }
    std::string v29 = std::string::append(&v38, (const std::string::value_type *)v27, size);
    long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
    v39.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v30;
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    std::string v31 = std::string::append(&v39, " arguments are bound.");
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v40.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v15, &v40);
    v15->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(v15, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  return v8 + 16 * a3;
}

void sub_20F3F5B54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v49 - 57) < 0) {
    operator delete(*(void **)(v49 - 80));
  }
  if (*(char *)(v49 - 89) < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v48) {
    __cxa_free_exception(v47);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::RenameOutput(uint64_t a1@<X0>, unint64_t a2@<X1>, std::string::size_type a3@<X2>, uint64_t *a4@<X8>)
{
  std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(a4, (void *)(a1 + 8));
  uint64_t v8 = *(MIL::Builder::OperationBuilder::OperationBuilderImpl **)(a1 + 24);
  uint64_t v9 = a4[1];
  v10[0] = *a4;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::OperationBuilderImpl::RenameOutput(v8, a2, a3, v10);
}

void sub_20F3F5D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  long long v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::RenameOutput(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, unint64_t a2, std::string::size_type a3, uint64_t *a4)
{
  uint64_t v7 = *((void *)this + 19);
  if (v7)
  {
    Outputuint64_t Name = MIL::Builder::OperationBuilder::OperationBuilderImpl::GetOutputName(this, a2);
    uint64_t v10 = (std::__shared_weak_count *)a4[1];
    uint64_t v14 = *a4;
    uint64_t v15 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::BlockBuilder::RenameOpOutput(v7, OutputName, a3, &v14);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  uint64_t v11 = *((void *)this + 5);
  if (a2 < (*((void *)this + 6) - v11) >> 4)
  {
    long long v12 = (MIL::IRNamedValueType **)(v11 + 16 * a2);
    if (*(char *)(a3 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else {
      std::string __p = *(std::string *)a3;
    }
    MIL::IRNamedValueType::GetType(*v12);
    MIL::IRNamedValueType::Make();
  }
  std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
}

void sub_20F3F5E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(MIL::BuilderPrivate::OperationBuilderPrivate *this, const MIL::Builder::OperationBuilder *a2)
{
  return *((void *)this + 3) + 16;
}

uint64_t MIL::Builder::OperationBuilder::SetVisited(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 24) + 304) = a2;
  return this;
}

uint64_t MIL::Builder::OperationBuilder::IsVisited(MIL::Builder::OperationBuilder *this)
{
  return *(unsigned __int8 *)(*((void *)this + 3) + 304);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint64_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 7) = 0;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

void **std::vector<std::shared_ptr<MIL::IRBlock>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v7);
  }
  return result;
}

void sub_20F3F6010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = 0;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(a1 + 224, (unsigned __int8 *)a2, a2);
  if (v4)
  {
    if (*(char *)(a2 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else {
      std::string __p = *(std::string *)a2;
    }
    MIL::Builder::Variable::Make();
  }
  return *((void *)v3 + 5);
}

void sub_20F3F612C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::GetVariable(uint64_t a1, void *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>&,decltype(nullptr)>(a1 + 264, a2, a2);
  if (v4)
  {
    uint64_t v5 = a2[1];
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::Builder::Variable::Make();
  }
  return v3[4];
}

void sub_20F3F623C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__emplace_unique_key_args<std::string,std::string const&,decltype(nullptr)>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__construct_node_hash<std::string const&,decltype(nullptr)>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  std::string::size_type v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F3F64C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::__construct_node_hash<std::string const&,decltype(nullptr)>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3F6564(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>&,decltype(nullptr)>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void **)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      unint64_t v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          unint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  uint64_t v14 = a1 + 16;
  unint64_t v15 = operator new(0x28uLL);
  v26[0] = v15;
  v26[1] = a1 + 16;
  *unint64_t v15 = 0;
  v15[1] = v8;
  uint64_t v16 = a3[1];
  v15[2] = *a3;
  v15[3] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  v15[4] = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    BOOL v19 = 1;
    if (v9 >= 3) {
      BOOL v19 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v9);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = v14;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9) {
          v24 %= v9;
        }
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t v12 = (void *)v26[0];
  v26[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return v12;
}

void sub_20F3F6808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::unique_ptr<MIL::Builder::Variable const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::unique_ptr<MIL::Builder::Variable const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__emplace_unique_impl<std::shared_ptr<MIL::Builder::OperationBuilder> const&>(void *a1, unint64_t *a2)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::__construct_node<std::shared_ptr<MIL::Builder::OperationBuilder> const&>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__node_insert_unique(a1, __p);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = __p;
    std::string __p = 0;
    if (v5) {
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
    }
  }
  return inserted;
}

void sub_20F3F6954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__node_insert_unique(void *a1, void *a2)
{
  uint64_t v2 = a2;
  char v4 = a2 + 2;
  unint64_t v5 = a2[2];
  unint64_t v6 = HIDWORD(v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * v5) + 8) ^ HIDWORD(v5));
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  *(v4 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
  unint64_t v9 = std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v8, v4);
  if (v9) {
    return v9;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return v2;
}

void *std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder const>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder const>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder const>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL) {
      uint64_t v5 = v3 <= a2 ? a2 % v3 : a2;
    }
    else {
      uint64_t v5 = (v3 - 1) & a2;
    }
    unint64_t v6 = *(void **)(*(void *)a1 + 8 * v5);
    if (v6)
    {
      for (uint64_t i = (void *)*v6; i; uint64_t i = (void *)*i)
      {
        unint64_t v8 = i[1];
        if (v8 == a2)
        {
          if (i[2] == *a3) {
            return i;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v3) {
              v8 %= v3;
            }
          }
          else
          {
            v8 &= v3 - 1;
          }
          if (v8 != v5) {
            break;
          }
        }
      }
    }
  }
  float v9 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v10 = *(float *)(a1 + 32);
  if (!v3 || (float)(v10 * (float)v3) < v9)
  {
    uint64_t v11 = 2 * v3;
    BOOL v12 = v3 < 3 || (v3 & (v3 - 1)) != 0;
    size_t v13 = v12 | v11;
    unint64_t v14 = vcvtps_u32_f32(v9 / v10);
    if (v13 <= v14) {
      size_t v15 = v14;
    }
    else {
      size_t v15 = v13;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v15);
  }
  return 0;
}

void **std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, v13);
    size_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)size_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::__swap_out_circular_buffer(a1, v18);
    float v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v18);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    float v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20F3F6C28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::BlockBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::BlockBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::BlockBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::BlockBuilder>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::BlockBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::BlockBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::BlockBuilder>*>,std::reverse_iterator<std::shared_ptr<MIL::Builder::BlockBuilder>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::BlockBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::BlockBuilder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::BlockBuilder>>,std::reverse_iterator<std::shared_ptr<MIL::Builder::BlockBuilder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v16[4] = result;
    char v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, v12);
    long long v14 = &v13[16 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[16 * v15];
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    v16[2] = v14 + 16;
    std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::__swap_out_circular_buffer(a1, v16);
    uint64_t v8 = (_OWORD *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = *(_OWORD *)a2;
    uint64_t v8 = v7 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20F3F6E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::Builder::BlockBuilder>*,std::shared_ptr<MIL::Builder::BlockBuilder>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::BlockBuilder>>,std::shared_ptr<MIL::Builder::BlockBuilder>*,std::shared_ptr<MIL::Builder::BlockBuilder>*,std::shared_ptr<MIL::Builder::BlockBuilder>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F3F6ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Builder::BlockBuilder>>,std::shared_ptr<MIL::Builder::BlockBuilder>*,std::shared_ptr<MIL::Builder::BlockBuilder>*,std::shared_ptr<MIL::Builder::BlockBuilder>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint8x8_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint8x8_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::BlockBuilder>>,std::shared_ptr<MIL::Builder::BlockBuilder>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Builder::BlockBuilder>>,std::shared_ptr<MIL::Builder::BlockBuilder>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void **std::vector<std::shared_ptr<MIL::IRArgument>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<MIL::IRArgument>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20F3F70C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!std::less<std::string>::operator()[abi:ne180100](v4, a2, v2 + 4))
      {
        if (!std::less<std::string>::operator()[abi:ne180100](v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  unint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void **std::unique_ptr<MIL::Builder::OperationBuilder::OperationBuilderImpl>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Builder::OperationBuilder::OperationBuilderImpl::~OperationBuilderImpl(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::~OperationBuilderImpl(void **this)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::~__hash_table((uint64_t)(this + 33));
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table((uint64_t)(this + 28));
  if (*((char *)this + 223) < 0) {
    operator delete(this[25]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[24];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v5 = this + 20;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 143) < 0) {
    operator delete(this[15]);
  }
  unint64_t v3 = (std::__shared_weak_count *)this[14];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(this + 8));
  uint64_t v5 = this + 5;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)(this + 2), this[3]);
  uint64_t v4 = (std::__shared_weak_count *)this[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::unique_ptr<MIL::Builder::Variable const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  MIL::UnknownLocation::Make((MIL::UnknownLocation *)a1);
}

void sub_20F3F745C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  long long v14 = a10;
  a10 = 0;
  if (v14) {
    MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl();
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(v12 + 3));
  a10 = v12;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v11, *(void **)(v10 + 24));
  uint64_t v15 = *(std::__shared_weak_count **)(v10 + 8);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(uint64_t a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  long long v6 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  long long v10 = *a3;
  long long v11 = v6;
  *(void *)a3 = 0;
  *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v9 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(a1, (MIL::IRObject **)&v11, (uint64_t)&v10, (long long *)__p, 0, a5);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v10 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
  }
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  return a1;
}

void sub_20F3F755C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v15, v14);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(uint64_t a1, MIL::IRObject **a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(void))(*(void *)*a2 + 80))();
  uint64_t v12 = (const void ***)(*(uint64_t (**)(void))(*(void *)*a2 + 160))();
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100]((uint64_t *)(a1 + 16), v12);
  unint64_t v13 = (void **)(*(uint64_t (**)(void))(*(void *)*a2 + 176))();
  *(void *)(a1 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((void *)(a1 + 40), *v13, v13[1], ((char *)v13[1] - (char *)*v13) >> 4);
  uint64_t Attributes = MIL::IRObject::GetAttributes(*a2);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a1 + 64, Attributes);
  LocationPtr = (void *)MIL::IRObject::GetLocationPtr(*a2);
  *(void *)(a1 + 104) = *LocationPtr;
  uint64_t v16 = LocationPtr[1];
  *(void *)(a1 + 112) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  long long v17 = *a4;
  *(void *)(a1 + 136) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 12std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v17;
  *((void *)a4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(void *)(a1 + 144) = a5;
  *(void *)(a1 + 152) = a6;
  *(void *)(a1 + 16std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 20std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(unsigned char *)(a1 + 304) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImplFromIROperationCommon((MIL::Builder::OperationBuilder::OperationBuilderImpl *)a1, *a2);
  return a1;
}

void sub_20F3F7744(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table(v2 + 224);
  if (*(char *)(v2 + 223) < 0) {
    operator delete(*v7);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 192);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 143) < 0) {
    operator delete(*v6);
  }
  long long v10 = *(std::__shared_weak_count **)(v2 + 112);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v4);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v3, *(void **)(v2 + 24));
  long long v11 = *(std::__shared_weak_count **)(v2 + 8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImplFromIROperationCommon(MIL::Builder::OperationBuilder::OperationBuilderImpl *this, const MIL::IROperation *a2)
{
  uint64_t v4 = (char *)*((void *)this + 2);
  uint64_t v5 = (char *)this + 24;
  if (v4 != (char *)this + 24)
  {
    while (1)
    {
      uint64_t v6 = *((void *)v4 + 7);
      if (*((void *)v4 + 8) != v6) {
        break;
      }
LABEL_26:
      unint64_t v21 = (char *)*((void *)v4 + 1);
      if (v21)
      {
        do
        {
          size_t v22 = v21;
          unint64_t v21 = *(char **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          size_t v22 = (char *)*((void *)v4 + 2);
          BOOL v23 = *(void *)v22 == (void)v4;
          uint64_t v4 = v22;
        }
        while (!v23);
      }
      uint64_t v4 = v22;
      if (v22 == v5) {
        goto LABEL_32;
      }
    }
    unint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = (MIL::IRArgument **)(v6 + 16 * v7);
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*v8 + 40))();
      if (v9)
      {
        uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 40))(v9);
        if (v10)
        {
          uint64_t v11 = v10;
          if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 120))(v10)) {
            break;
          }
        }
      }
      ++v7;
      uint64_t v6 = *((void *)v4 + 7);
      if (v7 >= (*((void *)v4 + 8) - v6) >> 4) {
        goto LABEL_26;
      }
    }
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v11 + 128))(&__n, v11);
    uint64_t Name = MIL::IRArgument::GetName(*v8);
    uint64_t v13 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
    std::string::size_type size = __n.__r_.__value_.__l.__size_;
    if ((__n.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(__n.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = __n.__r_.__value_.__l.__size_;
    }
    uint64_t v16 = *(unsigned __int8 *)(Name + 23);
    int v17 = (char)v16;
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *(void *)(Name + 8);
    }
    if (v15 == v16)
    {
      if (v17 >= 0) {
        float v18 = (unsigned __int8 *)Name;
      }
      else {
        float v18 = *(unsigned __int8 **)Name;
      }
      if ((*((unsigned char *)&__n.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        unint64_t v20 = (const std::string::value_type *)__n.__r_.__value_.__r.__words[0];
        if (memcmp(__n.__r_.__value_.__l.__data_, v18, __n.__r_.__value_.__l.__size_)) {
          goto LABEL_51;
        }
        std::string::__init_copy_ctor_external(&v41, v20, size);
      }
      else
      {
        if (*((unsigned char *)&__n.__r_.__value_.__s + 23))
        {
          p_n = &__n;
          while (p_n->__r_.__value_.__s.__data_[0] == *v18)
          {
            p_n = (std::string *)((char *)p_n + 1);
            ++v18;
            if (!--v13) {
              goto LABEL_21;
            }
          }
          goto LABEL_51;
        }
LABEL_21:
        std::string v41 = __n;
      }
      MIL::IRArgument::Make();
    }
LABEL_51:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Constexpr output name must be the same as the argument name.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
LABEL_32:
  uint64_t v24 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 232))(a2);
  if (v24)
  {
    uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 16))(v24);
    if (v26 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    char v27 = (const void *)v25;
    std::string::size_type v28 = v26;
    if (v26 >= 0x17)
    {
      uint64_t v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v30 = v26 | 7;
      }
      uint64_t v31 = v30 + 1;
      std::string v29 = (std::string *)operator new(v30 + 1);
      __n.__r_.__value_.__l.__size_ = v28;
      __n.__r_.__value_.__r.__words[2] = v31 | 0x8000000000000000;
      __n.__r_.__value_.__r.__words[0] = (std::string::size_type)v29;
    }
    else
    {
      *((unsigned char *)&__n.__r_.__value_.__s + 23) = v26;
      std::string v29 = &__n;
      if (!v26)
      {
LABEL_41:
        v29->__r_.__value_.__s.__data_[v28] = 0;
        std::string::operator=((std::string *)((char *)this + 200), &__n);
        if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__n.__r_.__value_.__l.__data_);
        }
        goto LABEL_43;
      }
    }
    memmove(v29, v27, v28);
    goto LABEL_41;
  }
LABEL_43:
  long long v32 = (void **)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 216))(a2);
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRBlock>*,std::shared_ptr<MIL::IRBlock>*>(&v38, *v32, v32[1], ((char *)v32[1] - (char *)*v32) >> 4);
  std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::reserve((uint64_t *)this + 20, (v39 - v38) >> 4);
  if (v38 != v39)
  {
    uint64_t v33 = *((void *)this + 24);
    uint64_t v36 = *((void *)this + 23);
    uint64_t v37 = v33;
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
    }
    if (*((char *)this + 143) < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 15), *((void *)this + 16));
    }
    else {
      std::string __p = *(std::string *)((unsigned char *)this + 5);
    }
    MIL::Builder::BlockBuilder::Make();
  }
  __n.__r_.__value_.__r.__words[0] = (std::string::size_type)&v38;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__n);
}

void sub_20F3F7E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<MIL::Builder::BlockBuilder>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v7);
  }
  return result;
}

void sub_20F3F7F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<MIL::IRBlock>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRBlock>*,std::shared_ptr<MIL::IRBlock>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::shared_ptr<MIL::IRBlock>*,std::shared_ptr<MIL::IRBlock>*,std::shared_ptr<MIL::IRBlock>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F3F8008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::shared_ptr<MIL::IRBlock>*,std::shared_ptr<MIL::IRBlock>*,std::shared_ptr<MIL::IRBlock>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::shared_ptr<MIL::IRBlock>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::shared_ptr<MIL::IRBlock>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImpl(uint64_t a1, MIL::IRObject *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6)
{
  (*(void (**)(MIL::IRObject *))(*(void *)a2 + 80))(a2);
  uint64_t v12 = (const void ***)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 160))(a2);
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100]((uint64_t *)(a1 + 16), v12);
  uint64_t v13 = (void **)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 176))(a2);
  *(void *)(a1 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((void *)(a1 + 40), *v13, v13[1], ((char *)v13[1] - (char *)*v13) >> 4);
  uint64_t Attributes = MIL::IRObject::GetAttributes(a2);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a1 + 64, Attributes);
  LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a2);
  *(void *)(a1 + 104) = *LocationPtr;
  uint64_t v16 = LocationPtr[1];
  *(void *)(a1 + 112) = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  long long v17 = *a4;
  *(void *)(a1 + 136) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 12std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v17;
  *((void *)a4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(void *)(a1 + 144) = a5;
  *(void *)(a1 + 152) = a6;
  *(void *)(a1 + 16std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(a1 + 20std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(void *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 256) = 1065353216;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 28std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(_DWORD *)(a1 + 296) = 1065353216;
  *(unsigned char *)(a1 + 304) = 0;
  MIL::Builder::OperationBuilder::OperationBuilderImpl::OperationBuilderImplFromIROperationCommon((MIL::Builder::OperationBuilder::OperationBuilderImpl *)a1, a2);
  return a1;
}

void sub_20F3F82B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>,std::equal_to<std::shared_ptr<MIL::IRValue const>>,std::hash<std::shared_ptr<MIL::IRValue const>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::unique_ptr<MIL::Builder::Variable const>>>>::~__hash_table(v5);
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::Builder::Variable>>>>::~__hash_table(v2 + 224);
  if (*(char *)(v2 + 223) < 0) {
    operator delete(*v6);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v2 + 192);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v2 + 143) < 0) {
    operator delete(*v7);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(v2 + 112);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v4);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v3, *(void **)(v2 + 24));
  uint64_t v11 = *(std::__shared_weak_count **)(v2 + 8);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C2D8] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C198], MEMORY[0x263F8C0A0]);
}

void std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20F3F8470(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<MIL::Builder::OperationBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::OperationBuilder,void>();
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<MIL::Builder::OperationBuilder>::__enable_weak_this[abi:ne180100]<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void std::__shared_ptr_pointer<MIL::Builder::OperationBuilder *,std::shared_ptr<MIL::Builder::OperationBuilder>::__shared_ptr_default_delete<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder>,std::allocator<MIL::Builder::OperationBuilder>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::OperationBuilder *,std::shared_ptr<MIL::Builder::OperationBuilder>::__shared_ptr_default_delete<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder>,std::allocator<MIL::Builder::OperationBuilder>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::OperationBuilder *,std::shared_ptr<MIL::Builder::OperationBuilder>::__shared_ptr_default_delete<MIL::Builder::OperationBuilder,MIL::Builder::OperationBuilder>,std::allocator<MIL::Builder::OperationBuilder>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void OUTLINED_FUNCTION_1_0()
{
  JUMPOUT(0x21056C700);
}

uint64_t OUTLINED_FUNCTION_3(uint64_t a1)
{
  return *(void *)a1;
}

void MIL::Builder::ProgramBuilder::ProgramBuilder(void *a1)
{
  *a1 = &unk_26C258B08;
  operator new();
}

{
  *a1 = &unk_26C258B08;
  operator new();
}

void sub_20F3F86A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21056C700](v10, 0x10E0C4071EA3CCFLL);
  _Unwind_Resume(a1);
}

void sub_20F3F8788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21056C700](v10, 0x10E0C4071EA3CCFLL);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::~ProgramBuilder(MIL::Builder::ProgramBuilder *this)
{
  *(void *)this = &unk_26C258B08;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::Builder::ProgramBuilder::ProgramBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26C258B08;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::Builder::ProgramBuilder::ProgramBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26C258B08;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::Builder::ProgramBuilder::ProgramBuilderImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }

  JUMPOUT(0x21056C700);
}

unsigned __int8 *MIL::Builder::ProgramBuilder::GetFunction@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  return MIL::Builder::ProgramBuilder::ProgramBuilderImpl::GetFunction(*(void *)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::Builder::ProgramBuilder::ProgramBuilderImpl::GetFunction@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 16), a2);
  if (!result) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v5 = *((void *)result + 6);
  *a3 = *((void *)result + 5);
  a3[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void MIL::Builder::ProgramBuilder::Make()
{
}

{
  operator new();
}

{
  operator new();
}

void sub_20F3F89C8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21056C700](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3F8AA4(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21056C700](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3F8B80(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21056C700](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::CreateProgram(MIL::Builder::ProgramBuilder::ProgramBuilderImpl **this)
{
}

void MIL::Builder::ProgramBuilder::ProgramBuilderImpl::CreateProgram(MIL::Builder::ProgramBuilder::ProgramBuilderImpl *this)
{
}

void sub_20F3F8CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)va);
  uint64_t v11 = *(void *)(v9 - 24);
  *(void *)(v9 - 24) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::CreateProgramWithoutValidation(MIL::Builder::ProgramBuilder::ProgramBuilderImpl **this)
{
}

void MIL::Builder::ProgramBuilder::ProgramBuilderImpl::CreateProgramWithoutValidation(MIL::Builder::ProgramBuilder::ProgramBuilderImpl *this)
{
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v5, (uint64_t)this + 72);
  uint64_t v2 = *((void *)this + 4);
  if (v2) {
    MIL::Builder::FunctionBuilder::CreateFunction(*(MIL::Builder::FunctionBuilder::FunctionBuilderImpl ***)(v2 + 40));
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *((void *)this + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::IRProgram::Make();
}

void sub_20F3F8EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, uint64_t a5, std::__shared_weak_count *a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  if (a6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a6);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v7 - 72);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::AddFunction(uint64_t a1, unsigned __int8 *a2)
{
}

void MIL::Builder::ProgramBuilder::ProgramBuilderImpl::AddFunction(uint64_t a1, unsigned __int8 *a2)
{
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 16), a2))
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::Builder::FunctionBuilder::Make();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  uint64_t v5 = std::string::append(&v7, " is already part of this ProgramBuilder.");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, &v8);
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3F9088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a17 < 0)
  {
    operator delete(a12);
    if ((v24 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

unsigned __int8 *MIL::Builder::ProgramBuilder::RemoveFunction(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((void *)(*(void *)(a1 + 8) + 16), a2);
}

uint64_t MIL::Builder::ProgramBuilder::GetLocation(MIL::Builder::ProgramBuilder *this)
{
  return *(void *)(*((void *)this + 1) + 56);
}

uint64_t MIL::Builder::ProgramBuilder::GetLocationPtr(MIL::Builder::ProgramBuilder *this)
{
  return *((void *)this + 1) + 56;
}

void MIL::Builder::ProgramBuilder::SetLocation(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  MIL::Builder::ProgramBuilder::ProgramBuilderImpl::SetLocation(v2, (uint64_t *)&v3);
  if (*((void *)&v3 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v3 + 1));
  }
}

void sub_20F3F9180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::ProgramBuilder::ProgramBuilderImpl::SetLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set location to nullptr.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v3 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v2;
  *(void *)(a1 + 64) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20F3F9228(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::SetAttribute(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  long long v4 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  long long v5 = *(_OWORD *)a3;
  *(_OWORD *)std::string __p = v4;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  MIL::Builder::ProgramBuilder::ProgramBuilderImpl::SetAttribute(v3, (long long *)__p, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3F92AC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Builder::ProgramBuilder::ProgramBuilderImpl::SetAttribute(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v7 = a2;
  long long v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 72, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  long long v6 = (std::__shared_weak_count *)*((void *)v4 + 6);
  *(_OWORD *)(v4 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

unsigned __int8 *MIL::Builder::ProgramBuilder::TryGetAttribute@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 72), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

void MIL::Builder::ProgramBuilder::AddFunction(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v3 = *(uint64_t **)(a1 + 8);
  long long v4 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  MIL::Builder::ProgramBuilder::ProgramBuilderImpl::AddFunction(v3, a2, (uint64_t *)&v4);
  if (*((void *)&v4 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
}

void sub_20F3F93C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::ProgramBuilder::ProgramBuilderImpl::AddFunction(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3)
{
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add nullptr FunctionBuilder.");
    goto LABEL_12;
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1 + 2, a2))
  {
    uint64_t v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v14 = std::string::append(&v16, " is already part of this ProgramBuilder.");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v13, &v17);
    __cxa_throw(v13, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *a1;
  MIL::Builder::FunctionBuilder::GetContext(*a3, &v17);
  std::string::size_type v8 = v17.__r_.__value_.__r.__words[0];
  if (v17.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v17.__r_.__value_.__l.__size_);
  }
  if (v7 != v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This ProgramBuilder holds a different MILContext than the one used to create this FunctionBuilder.");
LABEL_12:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, a2, (uint64_t)&std::piecewise_construct, (long long **)&v17);
  long long v10 = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  *(_OWORD *)(v9 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_20F3F9568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

BOOL MIL::Builder::ProgramBuilder::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((void *)(*(void *)(a1 + 8) + 72), a2) != 0;
}

uint64_t MIL::Builder::ProgramBuilder::GetAttributes(MIL::Builder::ProgramBuilder *this)
{
  return *((void *)this + 1) + 72;
}

uint64_t MIL::Builder::ProgramBuilder::GetFunctions(MIL::Builder::ProgramBuilder *this)
{
  return *((void *)this + 1) + 16;
}

uint64_t MIL::MILResult::operator=(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = *(void *)(a2 + 40);
  *(_OWORD *)uint64_t v6 = v7;
  *(unsigned char *)(a2 + 47) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  return a1;
}

std::string *MIL::MILResult::operator=(std::string *a1, const std::string *a2)
{
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  std::string::size_type v4 = a2->__r_.__value_.__r.__words[2];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1->__r_.__value_.__r.__words[2];
  a1->__r_.__value_.__l.__size_ = size;
  a1->__r_.__value_.__r.__words[2] = v4;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  std::string::operator=(a1 + 1, a2 + 1);
  return a1;
}

void *std::shared_ptr<MIL::Builder::FunctionBuilder>::operator=[abi:ne180100]<MIL::Builder::FunctionBuilder,std::default_delete<MIL::Builder::FunctionBuilder>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::Builder::FunctionBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::FunctionBuilder,std::default_delete<MIL::Builder::FunctionBuilder>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  std::string::size_type v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  BOOL v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3F99AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  std::string::size_type v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *std::string::size_type v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3F9A4C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<MIL::Builder::FunctionBuilder>::shared_ptr[abi:ne180100]<MIL::Builder::FunctionBuilder,std::default_delete<MIL::Builder::FunctionBuilder>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Builder::FunctionBuilder  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Builder::ProgramBuilder::ProgramBuilderImpl::ProgramBuilderImpl(uint64_t a1, void *a2)
{
  uint64_t v2 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  MIL::UnknownLocation::Make((MIL::UnknownLocation *)a1);
}

void sub_20F3F9C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl();
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v11);
  unint64_t v13 = *(std::__shared_weak_count **)(v10 + 8);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Builder::ProgramBuilder::ProgramBuilderImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2 + 72);
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 64);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2 + 16);
    unint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    JUMPOUT(0x21056C700);
  }
}

uint64_t MIL::Builder::ProgramBuilder::ProgramBuilderImpl::ProgramBuilderImpl(uint64_t a1, void *a2, MIL::IRObject *this)
{
  *(void *)a1 = *a2;
  uint64_t v5 = a2[1];
  *(void *)(a1 + 8) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 1065353216;
  LocationPtr = (void *)MIL::IRObject::GetLocationPtr(this);
  *(void *)(a1 + 56) = *LocationPtr;
  uint64_t v7 = LocationPtr[1];
  *(void *)(a1 + 64) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t Attributes = MIL::IRObject::GetAttributes(this);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(a1 + 72, Attributes);
  uint64_t v9 = *(void *)((*(uint64_t (**)(MIL::IRObject *))(*(void *)this + 72))(this) + 16);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 8);
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v11 = *(void *)(v9 + 48);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::Builder::FunctionBuilder::Make();
  }
  return a1;
}

void sub_20F3F9EB0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v3);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 64);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  long long v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::Make()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F3F9FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x21056C700](v14, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3FA0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x21056C700](v14, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3FA198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MEMORY[0x21056C700](v14, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void sub_20F3FA27C(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21056C700](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::Make(MIL::Builder::Variable *this, const MIL::IRArgument *a2, const MIL::Builder::OperationBuilder *a3)
{
  if ((*(unsigned int (**)(MIL::Builder::Variable *))(*(void *)this + 16))(this))
  {
    uint64_t Name = MIL::IRArgument::GetName(this);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)Name, *(void *)(Name + 8));
    }
    else
    {
      long long v5 = *(_OWORD *)Name;
      v7.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
      *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v5;
    }
    MIL::Builder::Variable::Make();
  }
  (*(void (**)(uint64_t *__return_ptr, MIL::Builder::Variable *))(*(void *)this + 48))(&v6, this);
  MIL::Builder::Variable::Make();
}

void sub_20F3FA3AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Builder::Variable::Variable(void *a1)
{
  *a1 = &unk_26C258B98;
  operator new();
}

{
  *a1 = &unk_26C258B98;
  operator new();
}

{
  *a1 = &unk_26C258B98;
  operator new();
}

{
  *a1 = &unk_26C258B98;
  operator new();
}

void sub_20F3FA49C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x21056C700](v14, 0x1072C409AFF1A62);
  _Unwind_Resume(a1);
}

void sub_20F3FA598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x21056C700](v14, 0x1072C409AFF1A62);
  _Unwind_Resume(a1);
}

void sub_20F3FA694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  MEMORY[0x21056C700](v14, 0x1072C409AFF1A62);
  _Unwind_Resume(a1);
}

void sub_20F3FA77C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21056C700](v10, 0x1072C409AFF1A62);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetValue(MIL::Builder::Variable::VariableImpl **this)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(this[1], &v9);
  uint64_t v2 = v9;
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::Builder::Variable::VariableImpl::GetName(this[1]);
    std::operator+<char>();
    long long v5 = std::string::append(&v7, " is not associated with a value.");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v8.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v8.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v8);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v2;
}

void sub_20F3FA888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
    {
LABEL_8:
      uint64_t v25 = *(std::__shared_weak_count **)(v23 - 40);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MIL::Builder::Variable::VariableImpl::TryGetValue(MIL::Builder::Variable::VariableImpl *this@<X0>, void *a2@<X8>)
{
  int v2 = *((_DWORD *)this + 6);
  if (v2)
  {
    if (v2 == 1) {
      uint64_t v3 = this;
    }
    else {
      uint64_t v3 = 0;
    }
    uint64_t v5 = *(void *)v3;
    uint64_t v4 = *((void *)v3 + 1);
    *a2 = v5;
    a2[1] = v4;
    if (v4) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    MIL::Builder::Variable::VariableImpl::GetValueFromBuilder((uint64_t)this, (long long *)this, a2);
  }
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::Variable::VariableImpl::GetName(MIL::Builder::Variable::VariableImpl *this)
{
  uint64_t result = MIL::Builder::Variable::VariableImpl::TryGetName(this);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This variable holds an IRValue literal.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3FA984(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::TryGetValue(MIL::Builder::Variable::VariableImpl **this)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(this[1], &v3);
  uint64_t v1 = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void MIL::Builder::Variable::TryGetValueSharedPtr(MIL::Builder::Variable::VariableImpl **this@<X0>, void *a2@<X8>)
{
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::Variable::GetName(MIL::Builder::Variable::VariableImpl **this)
{
  uint64_t result = MIL::Builder::Variable::VariableImpl::TryGetName(this[1]);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable is not associated with a name.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3FAA40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::Variable::VariableImpl::TryGetName(MIL::Builder::Variable::VariableImpl *this)
{
  if (!this || *((_DWORD *)this + 6))
  {
    MIL::Builder::Variable::VariableImpl::TryGetValue(this, &v2);
    uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    if (v1) {
      return (MIL::Builder::Variable::VariableImpl *)(*(uint64_t (**)(uint64_t))(*(void *)v1 + 136))(v1);
    }
    else {
      return 0;
    }
  }
  return this;
}

void sub_20F3FAAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

MIL::Builder::Variable::VariableImpl *MIL::Builder::Variable::TryGetName(MIL::Builder::Variable::VariableImpl **this)
{
  return MIL::Builder::Variable::VariableImpl::TryGetName(this[1]);
}

uint64_t MIL::Builder::Variable::TryGetType(MIL::Builder::Variable::VariableImpl **this)
{
  return MIL::Builder::Variable::VariableImpl::TryGetType(this[1]);
}

uint64_t MIL::Builder::Variable::VariableImpl::TryGetType(MIL::Builder::Variable::VariableImpl *this)
{
  int v1 = *((_DWORD *)this + 6);
  if (v1)
  {
    if (v1 == 1) {
      uint64_t v2 = this;
    }
    else {
      uint64_t v2 = 0;
    }
    uint64_t v3 = *(void *)v2;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 1);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    return v5;
  }
  else
  {
    return MIL::Builder::Variable::VariableImpl::GetTypeFromBuilder((uint64_t)this, (uint64_t)this);
  }
}

void sub_20F3FABB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Builder::Variable::UpdateOwner(MIL::Builder::Variable *this, const MIL::Builder::BlockBuilder *a2)
{
  return MIL::Builder::Variable::VariableImpl::UpdateOwner(*((void *)this + 1), a2);
}

uint64_t MIL::Builder::Variable::VariableImpl::UpdateOwner(uint64_t this, const MIL::Builder::BlockBuilder *a2)
{
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot call UpdateOwner with a null pointer.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (*(_DWORD *)(this + 40) != 1) {
    *(_DWORD *)(this + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 1;
  }
  *(void *)(this + 32) = a2;
  return this;
}

void sub_20F3FAC48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::~Variable(MIL::Builder::Variable *this)
{
  *(void *)this = &unk_26C258B98;
  std::unique_ptr<MIL::Builder::Variable::VariableImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  *(void *)this = &unk_26C258B98;
  std::unique_ptr<MIL::Builder::Variable::VariableImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C258B98;
  std::unique_ptr<MIL::Builder::Variable::VariableImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);

  JUMPOUT(0x21056C700);
}

void MIL::Builder::Variable::GetScalarValue<MIL::Int4>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "rdar://111816272: Compile-time known scalar values is not defined for sub-byte data types.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3FAD9C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::GetScalarValue<MIL::UInt4>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "rdar://111816272: Compile-time known scalar values is not defined for sub-byte data types.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3FADF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::GetScalarValue<MIL::UInt2>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "rdar://111816272: Compile-time known scalar values is not defined for sub-byte data types.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3FAE54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::GetScalarValue<MIL::UInt1>()
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "rdar://111816272: Compile-time known scalar values is not defined for sub-byte data types.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3FAEB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<BOOL>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<BOOL>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<BOOL>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<BOOL>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FAF54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<unsigned char>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned char>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned char>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<unsigned char>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB00C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<unsigned short>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned short>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned short>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<unsigned short>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<unsigned int>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned int>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned int>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<unsigned int>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<unsigned long long>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned long long>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<unsigned long long>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<unsigned long long>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<signed char>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<signed char>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<signed char>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<signed char>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB2EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<short>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<short>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<short>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<short>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<int>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<int>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<int>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<int>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<long long>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<long long>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<long long>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<long long>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Bf16>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Bf16>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Bf16>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<MIL::Bf16>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Fp8E4M3FN>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp8E4M3FN>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp8E4M3FN>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<MIL::Fp8E4M3FN>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Fp8E5M2>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp8E5M2>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp8E5M2>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<MIL::Fp8E5M2>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB73C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::GetScalarValue<MIL::Fp16>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp16>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

uint64_t MIL::Builder::Variable::VariableImpl::GetScalarValue<MIL::Fp16>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = MIL::IRValue::GetScalar<MIL::Fp16>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB7F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

float MIL::Builder::Variable::GetScalarValue<float>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<float>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

float MIL::Builder::Variable::VariableImpl::GetScalarValue<float>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  float v1 = MIL::IRValue::GetScalar<float>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

double MIL::Builder::Variable::GetScalarValue<double>(uint64_t a1)
{
  return MIL::Builder::Variable::VariableImpl::GetScalarValue<double>(*(MIL::Builder::Variable::VariableImpl **)(a1 + 8));
}

double MIL::Builder::Variable::VariableImpl::GetScalarValue<double>(MIL::Builder::Variable::VariableImpl *a1)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  double v1 = MIL::IRValue::GetScalar<double>(v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v1;
}

void sub_20F3FB974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::GetScalarValue<std::string>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
}

void MIL::Builder::Variable::VariableImpl::GetScalarValue<std::string>(MIL::Builder::Variable::VariableImpl *a1@<X0>, std::string *a2@<X8>)
{
  MIL::Builder::Variable::VariableImpl::TryGetValue(a1, &v4);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Variable does not hold an IRValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::IRValue::GetScalar<std::string>(v4, a2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20F3FBA2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  __cxa_free_exception(v10);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void MIL::Builder::Variable::VariableImpl::GetValueFromBuilder(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3)
  {
    if (v3 == 1)
    {
      MIL::Builder::BlockBuilder::GetValue(*(void *)(a1 + 32), a2, a3);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
  }
  else
  {
    MIL::Builder::OperationBuilder::TryGetConstant(*(const void *****)(a1 + 32), a3);
  }
}

uint64_t MIL::Builder::Variable::VariableImpl::GetTypeFromBuilder(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 2) {
    return MIL::Builder::FunctionBuilder::GetType(*(void *)(a1 + 32), a2);
  }
  if (v2) {
    return MIL::Builder::BlockBuilder::GetType(*(void *)(a1 + 32), a2);
  }
  return MIL::Builder::OperationBuilder::GetType(*(void *)(a1 + 32), a2);
}

std::string *MIL::Builder::Variable::VariableImpl::VariableImpl(std::string *this, long long *a2, std::string::size_type a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  this[1].__r_.__value_.__l.__size_ = a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 0;
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a Variable without an owning builder.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

{
  long long v5;
  std::runtime_error *exception;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  this[1].__r_.__value_.__l.__size_ = a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 1;
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a Variable without an owning builder.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

{
  long long v5;
  std::runtime_error *exception;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = 0;
  this[1].__r_.__value_.__l.__size_ = a3;
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = 2;
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a Variable without an owning builder.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return this;
}

void sub_20F3FBB4C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unique_ptr<MIL::Builder::Variable::VariableImpl>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void sub_20F3FBC6C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

void sub_20F3FBD3C(_Unwind_Exception *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Builder::Variable::VariableImpl::VariableImpl(uint64_t result, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *(void *)uint64_t result = *a2;
  *(void *)(result + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 24) = 1;
  *(void *)(result + 32) = a3;
  *(_DWORD *)(result + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0;
  if (!a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a Variable without an owning builder.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3FBDF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void MIL::Conversion::OpConversionImpl::~OpConversionImpl(MIL::Conversion::OpConversionImpl *this)
{
}

{
  std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));
}

{
  uint64_t vars8;

  std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
  std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy((uint64_t)this + 8, *((void **)this + 2));

  JUMPOUT(0x21056C700);
}

void *MIL::Conversion::OpConversion::OpConversion(void *this)
{
  *this = &unk_26C258BD8;
  return this;
}

void MIL::Conversion::OpConversion::Make(MIL::Conversion::OpConversion *this)
{
}

void MIL::Conversion::OpConversionImpl::RegisterConversion(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4)
{
  std::string v8 = (uint64_t **)(a1 + 8);
  if (std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(a1 + 8, a2))
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
    uint64_t v9 = std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
    uint64_t v10 = (const void ***)v9[7];
    for (uint64_t i = (const void ***)v9[8]; v10 != i; v10 += 3)
    {
      std::set<std::string>::set[abi:ne180100]((uint64_t *)&v28, v10);
      if (v29[1] == *(char **)(a3 + 16))
      {
        uint8x8_t v12 = (long long *)v28;
        if (v28 == (std::string *)v29)
        {
LABEL_22:
          std::pair<std::string,std::set<std::string>>::pair[abi:ne180100]<true,0>(&__p, (long long *)a2, (const void ***)a3);
          p_p = &__p;
          uint64_t v23 = std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__emplace_unique_key_args<std::pair<std::string,std::set<std::string>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
          std::function<void ()(MIL::Transform::ProgramTransformer &)>::operator=(v23 + 10, a4);
          std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v26, v27);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v28, v29[0]);
          return;
        }
        unint64_t v13 = *(const void ***)a3;
        while ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&__p, (unsigned __int8 *)v12 + 32, (unsigned __int8 *)v13 + 32) & 1) != 0)
        {
          uint64_t v14 = (long long *)*((void *)v12 + 1);
          long long v15 = v12;
          if (v14)
          {
            do
            {
              uint8x8_t v12 = v14;
              uint64_t v14 = *(long long **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint8x8_t v12 = (long long *)*((void *)v15 + 2);
              BOOL v16 = *(void *)v12 == (void)v15;
              long long v15 = v12;
            }
            while (!v16);
          }
          float v17 = (const void **)v13[1];
          if (v17)
          {
            do
            {
              float v18 = (const void ***)v17;
              float v17 = (const void **)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              float v18 = (const void ***)v13[2];
              BOOL v16 = *v18 == v13;
              unint64_t v13 = (const void **)v18;
            }
            while (!v16);
          }
          unint64_t v13 = (const void **)v18;
          if (v12 == (long long *)v29) {
            goto LABEL_22;
          }
        }
      }
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v28, v29[0]);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  BOOL v19 = std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  unint64_t v20 = v19;
  unint64_t v21 = v19[8];
  if (v21 >= v19[9])
  {
    uint64_t v22 = std::vector<std::set<std::string>>::__push_back_slow_path<std::set<std::string> const&>(v19 + 7, (const void ***)a3);
  }
  else
  {
    std::set<std::string>::set[abi:ne180100]((uint64_t *)v19[8], (const void ***)a3);
    uint64_t v22 = v21 + 24;
    v20[8] = v21 + 24;
  }
  v20[8] = v22;
  std::pair<std::string,std::set<std::string>>::pair[abi:ne180100]<true,0>(&__p, (long long *)a2, (const void ***)a3);
  std::string::size_type v28 = &__p;
  unint64_t v24 = std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__emplace_unique_key_args<std::pair<std::string,std::set<std::string>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&v28);
  std::function<void ()(MIL::Transform::ProgramTransformer &)>::operator=(v24 + 10, a4);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v26, v27);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20F3FC20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, char *a17)
{
}

void MIL::Conversion::OpConversionImpl::ConvertProgram(MIL::Conversion::OpConversionImpl *a1, const MIL::IRProgram *a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  if (MIL::Conversion::OpConversionImpl::CanConvertProgram(a1, a2))
  {
    MIL::Transform::ProgramTransformer::ProgramTransformer((MIL::Transform::ProgramTransformer *)v15, a2);
    v14[0] = 0;
    v14[1] = 0;
    unint64_t v13 = v14;
    uint64_t v6 = (*(uint64_t (**)(const MIL::IRProgram *))(*(void *)a2 + 72))(a2) + 16;
    while (1)
    {
      uint64_t v6 = *(void *)v6;
      if (!v6) {
        break;
      }
      uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v6 + 40) + 48))(*(void *)(v6 + 40));
      std::string v8 = (const void **)(*(uint64_t (**)(void))(**(void **)(v6 + 40) + 32))(*(void *)(v6 + 40));
      MIL::Conversion::OpConversionImpl::PopulateProgramOps((uint64_t)a1, (uint64_t)a2, v8, v7, &v13);
    }
    MIL::Conversion::OpConversionImpl::GetValidConversion((uint64_t)a1, &v13, a3, v12);
    uint64_t v9 = v12[0];
    uint64_t v10 = v12[1];
    while (v9 != v10)
    {
      std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100]((uint64_t)v16, v9);
      if (!v17) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 48))(v17, v15);
      std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::~__value_func[abi:ne180100](v16);
      v9 += 32;
    }
    MIL::Transform::ProgramTransformer::GetProgram((MIL::Transform::ProgramTransformer *)v15);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Program cannot be converted due to train opset.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3FC4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void MIL::Conversion::OpConversionImpl::ConvertProgram(MIL::Conversion::OpConversionImpl *a1, const MIL::IRProgram *a2, const void **a3)
{
  v25[0] = 0;
  v25[1] = 0;
  unint64_t v24 = v25;
  uint64_t v6 = (*(uint64_t (**)(const MIL::IRProgram *))(*(void *)a2 + 40))(a2);
  uint64_t Opset = (MIL::IROpset *)MIL::MILContext::GetOpset(v6);
  MIL::IROpset::GetReversedOperatorNamesMap(Opset, (uint64_t)v22);
  for (uint64_t i = v23; i; uint64_t i = (uint64_t *)*i)
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v9 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v9 = (size_t)a3[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v19, v9 + 2);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v19;
    }
    else {
      uint64_t v10 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if (v9)
    {
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v11 = a3;
      }
      else {
        uint64_t v11 = *a3;
      }
      memmove(v10, v11, v9);
    }
    strcpy((char *)v10 + v9, "::");
    int v12 = *((char *)i + 63);
    if (v12 >= 0) {
      unint64_t v13 = (const std::string::value_type *)(i + 5);
    }
    else {
      unint64_t v13 = (const std::string::value_type *)i[5];
    }
    if (v12 >= 0) {
      std::string::size_type v14 = *((unsigned __int8 *)i + 63);
    }
    else {
      std::string::size_type v14 = i[6];
    }
    long long v15 = std::string::append(&v19, v13, v14);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    std::string::size_type v21 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(&v24, (const void **)__p, (uint64_t)__p);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v22);
  int v17 = *((char *)a3 + 23);
  if (v17 < 0)
  {
    if (a3[1] != (const void *)5) {
      goto LABEL_40;
    }
    a3 = (const void **)*a3;
  }
  else if (v17 != 5)
  {
    goto LABEL_40;
  }
  if (*(_DWORD *)a3 == 829648745 && *((unsigned char *)a3 + 4) == 55)
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "ios16::non_maximum_suppression");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(&v24, (const void **)v22, (uint64_t)v22);
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v22, "ios16::resample");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(&v24, (const void **)v22, (uint64_t)v22);
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(v22, "ios16::crop_resize");
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(&v24, (const void **)v22, (uint64_t)v22);
    if (SHIBYTE(v23) < 0) {
      operator delete(v22[0]);
    }
  }
LABEL_40:
  MIL::Conversion::OpConversionImpl::ConvertProgram(a1, a2, (uint64_t)&v24);
}

void sub_20F3FC7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,char *a31)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a30, a31);
  _Unwind_Resume(a1);
}

void MIL::Conversion::OpConversionImpl::TryConvertProgram(MIL::Conversion::OpConversionImpl *a1, const MIL::IRProgram *a2, uint64_t a3)
{
}

void sub_20F3FC898(void *a1, uint64_t a2)
{
  MIL::Conversion::OpConversionImpl::TryConvertProgram(a1, a2, v2);
  JUMPOUT(0x20F3FC88CLL);
}

void MIL::Conversion::OpConversionImpl::TryConvertProgram(MIL::Conversion::OpConversionImpl *a1, const MIL::IRProgram *a2, const void **a3)
{
}

void sub_20F3FC8C8(void *a1, uint64_t a2)
{
  MIL::Conversion::OpConversionImpl::TryConvertProgram(a1, a2, v2);
  JUMPOUT(0x20F3FC8BCLL);
}

uint64_t MIL::Conversion::OpConversionImpl::CanConvertProgram(MIL::Conversion::OpConversionImpl *this, const MIL::IRProgram *a2)
{
  int v2 = *(uint64_t ***)((*(uint64_t (**)(const MIL::IRProgram *))(*(void *)a2 + 72))(a2) + 16);
  if (!v2) {
    return 1;
  }
  while (1)
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t *))(*v2[5] + 32))(v2[5]);
    int v4 = *(char *)(v3 + 23);
    if (v4 < 0)
    {
      if (*(void *)(v3 + 8) != 11) {
        goto LABEL_11;
      }
      uint64_t v3 = *(void *)v3;
    }
    else if (v4 != 11)
    {
      goto LABEL_11;
    }
    if (*(void *)v3 == 0x72745F3631736F69 && *(void *)(v3 + 3) == 0x6E696172745F3631) {
      return 0;
    }
LABEL_11:
    uint64_t v6 = (*(uint64_t (**)(uint64_t *))(*v2[5] + 32))(v2[5]);
    int v7 = *(char *)(v6 + 23);
    if (v7 < 0)
    {
      if (*(void *)(v6 + 8) != 11) {
        goto LABEL_20;
      }
      uint64_t v6 = *(void *)v6;
    }
    else if (v7 != 11)
    {
      goto LABEL_20;
    }
    if (*(void *)v6 == 0x72745F3731736F69 && *(void *)(v6 + 3) == 0x6E696172745F3731) {
      return 0;
    }
LABEL_20:
    uint64_t v9 = (*(uint64_t (**)(uint64_t *))(*v2[5] + 48))(v2[5]);
    uint64_t v10 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
    uint64_t v11 = **v10;
    int v12 = (*v10)[1];
    while (v11 != v12)
    {
      uint64_t v13 = *v11;
      if ((*(uint64_t (**)(void))(*(void *)*v11 + 232))(*v11))
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 232))(v13);
        long long v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
        if (v16 == 11 && *v15 == 0x72745F3631736F69 && *(void *)((char *)v15 + 3) == 0x6E696172745F3631) {
          return 0;
        }
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 232))(v13);
        std::string v19 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
        if (v20 == 11 && *v19 == 0x72745F3731736F69 && *(void *)((char *)v19 + 3) == 0x6E696172745F3731) {
          return 0;
        }
      }
      v11 += 2;
    }
    int v2 = (uint64_t **)*v2;
    if (!v2) {
      return 1;
    }
  }
}

void *std::function<void ()(MIL::Transform::ProgramTransformer &)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::pair<std::string,std::set<std::string>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    std::string v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  int v7 = (std::string *)(v6 + 4);
  std::string v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  void v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20F3FCD88(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::set<std::string>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<std::string>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<std::string>>>,0>(uint64_t a1)
{
  int v2 = (void **)(a1 + 24);
  std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<std::set<std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char **)**a1;
  if (v2)
  {
    int v4 = (char **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 3;
        std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)(v4 - 3), *(v4 - 2));
        int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__emplace_unique_key_args<std::pair<std::string,std::set<std::string>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__find_equal<std::pair<std::string,std::set<std::string>>>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    std::string v8 = v6;
    std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__find_equal<std::pair<std::string,std::set<std::string>>>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        std::string v8 = (void *)v4;
        long long v9 = (const void **)(v4 + 32);
        if (!std::less<std::pair<std::string,std::set<std::string>>>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32)))break; {
        uint64_t v4 = *v8;
        }
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::pair<std::string,std::set<std::string>>>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    std::string v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = operator new(0x70uLL);
  uint64_t v7 = *a2;
  long long v8 = **a2;
  result[6] = *((void *)*a2 + 2);
  *((_OWORD *)result + 2) = v8;
  *((void *)v7 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v7 + 2) = 0;
  *(void *)uint64_t v7 = 0;
  result[7] = *((void *)v7 + 3);
  long long v9 = v7 + 2;
  uint64_t v10 = *((void *)v7 + 4);
  *(void *)a3 = result;
  *(void *)(a3 + 8) = v5;
  result[8] = v10;
  uint64_t v11 = (char *)(result + 8);
  uint64_t v12 = *((void *)v7 + 5);
  result[9] = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *((void *)v7 + 3) = v9;
    *long long v9 = 0;
    *((void *)v7 + 5) = 0;
  }
  else
  {
    result[7] = v11;
  }
  result[13] = 0;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

uint64_t std::less<std::pair<std::string,std::set<std::string>>>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v5 = *((char *)a3 + 23);
  int v6 = *((char *)a2 + 23);
  if (v6 >= 0) {
    size_t v7 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v7 = (size_t)a2[1];
  }
  if (v6 >= 0) {
    long long v8 = a2;
  }
  else {
    long long v8 = *a2;
  }
  if (v5 >= 0) {
    size_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v9 = (size_t)a3[1];
  }
  if (v5 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *a3;
  }
  if (v9 >= v7) {
    size_t v11 = v7;
  }
  else {
    size_t v11 = v9;
  }
  int v12 = memcmp(v8, v10, v11);
  BOOL v13 = v7 < v9;
  if (v12) {
    BOOL v13 = v12 < 0;
  }
  if (v13) {
    return 1;
  }
  int v15 = memcmp(v10, v8, v11);
  BOOL v16 = v9 < v7;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16) {
    return 0;
  }
  else {
    return std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((const void **)a2[3], a2 + 4, (const void **)a3[3], (const void ***)a3 + 4, (uint64_t)&v17);
  }
}

uint64_t std::__lexicographical_compare[abi:ne180100]<std::__less<void,void> &,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>,std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(const void **a1, const void **a2, const void **a3, const void ***a4, uint64_t a5)
{
  if (a3 == (const void **)a4) {
    return 0;
  }
  size_t v7 = a3;
  while (a1 != a2 && !std::less<std::string>::operator()[abi:ne180100](a5, a1 + 4, v7 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100](a5, v7 + 4, a1 + 4))
    {
      uint64_t v10 = (const void **)a1[1];
      size_t v11 = a1;
      if (v10)
      {
        do
        {
          a1 = v10;
          uint64_t v10 = (const void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          a1 = (const void **)v11[2];
          BOOL v12 = *a1 == v11;
          size_t v11 = a1;
        }
        while (!v12);
      }
      BOOL v13 = (const void **)v7[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = (const void ***)v13;
          BOOL v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (const void ***)v7[2];
          BOOL v12 = *v14 == v7;
          size_t v7 = (const void **)v14;
        }
        while (!v12);
      }
      size_t v7 = (const void **)v14;
      if (v14 != a4) {
        continue;
      }
    }
    return 0;
  }
  return 1;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::set<std::string>> const,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::set<std::string>> const,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,0>(uint64_t a1)
{
  std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

std::string *std::pair<std::string,std::set<std::string>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, const void ***a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&this[1], a3);
  return this;
}

void sub_20F3FD3C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20F3FD6D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::vector<std::set<std::string>>::__push_back_slow_path<std::set<std::string> const&>(uint64_t *a1, const void ***a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v13 = v10;
  uint64_t v14 = (uint64_t *)&v10[24 * v4];
  BOOL v16 = &v10[24 * v9];
  std::set<std::string>::set[abi:ne180100](v14, a2);
  int v15 = v14 + 3;
  std::vector<std::set<std::string>>::__swap_out_circular_buffer(a1, &v13);
  uint64_t v11 = a1[1];
  std::__split_buffer<std::set<std::string>>::~__split_buffer(&v13);
  return v11;
}

void sub_20F3FD7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::set<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<std::string>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>,std::reverse_iterator<std::set<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v19 = a6;
  *((void *)&v19 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    uint64_t v14 = a6;
  }
  else
  {
    uint64_t v8 = a3;
    do
    {
      uint64_t v9 = *(void *)(v8 - 24);
      v8 -= 24;
      *(void *)(v7 - 24) = v9;
      uint64_t v10 = (void *)(a3 - 16);
      uint64_t v11 = *(void *)(a3 - 16);
      *(void *)(v7 - 16) = v11;
      uint64_t v12 = v7 - 16;
      uint64_t v13 = *(void *)(a3 - 8);
      *(void *)(v7 - 8) = v13;
      if (v13)
      {
        *(void *)(v11 + 16) = v12;
        *(void *)(a3 - 24) = v10;
        *uint64_t v10 = 0;
        *(void *)(a3 - 8) = 0;
      }
      else
      {
        *(void *)(v7 - 24) = v12;
      }
      uint64_t v7 = *((void *)&v19 + 1) - 24;
      *((void *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    uint64_t v14 = v19;
  }
  char v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::reverse_iterator<std::set<std::string>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v1, *(char **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::set<std::string>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::set<std::string>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(i - 24, *(char **)(i - 16));
  }
}

uint64_t MIL::Conversion::OpConversionImpl::PopulateProgramOps(uint64_t a1, uint64_t a2, const void **a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  uint64_t Opset = (MIL::IROpset *)MIL::MILContext::GetOpset(v10);
  MIL::IROpset::GetReversedOperatorNamesMap(Opset, (uint64_t)v66);
  uint64_t v12 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 56))(a4);
  uint64_t v14 = **v12;
  uint64_t v13 = (*v12)[1];
  std::string v59 = v13;
  while (v14 != v13)
  {
    uint64_t v15 = *v14;
    BOOL v16 = (void **)(*(uint64_t (**)(void))(*(void *)*v14 + 208))(*v14);
    char v17 = (void *)**v16;
    long long v18 = (void *)(*v16)[1];
    while (v17 != v18)
    {
      MIL::Conversion::OpConversionImpl::PopulateProgramOps(a1, a2, a3, *v17, a5);
      v17 += 2;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 232))(v15))
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 232))(v15);
      uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
      std::string::size_type v22 = v21;
      if (v21 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v23 = (const void *)v20;
      if (v21 >= 0x17)
      {
        uint64_t v40 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v21 | 7) != 0x17) {
          uint64_t v40 = v21 | 7;
        }
        uint64_t v41 = v40 + 1;
        p_dst = operator new(v40 + 1);
        __dst.__r_.__value_.__l.__size_ = v22;
        __dst.__r_.__value_.__r.__words[2] = v41 | 0x8000000000000000;
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
      }
      else
      {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v21;
        p_dst = &__dst;
        if (!v21)
        {
LABEL_35:
          p_dst[v22] = 0;
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t size = __dst.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v62, size + 2);
          if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v43 = &v62;
          }
          else {
            int v43 = (std::string *)v62.__r_.__value_.__r.__words[0];
          }
          if (size)
          {
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v44 = &__dst;
            }
            else {
              uint64_t v44 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            memmove(v43, v44, size);
          }
          strcpy((char *)v43 + size, "::");
          uint64_t v45 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
          std::string v46 = (MIL::IROpset *)MIL::MILContext::GetOpset(v45);
          MIL::IROpset::GetReversedOperatorNamesMap(v46, (uint64_t)&v60);
          uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 64))(v15);
          char v48 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v47 + 16))(v47);
          uint64_t v49 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(&v60, v48);
          if (!v49) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          long long v52 = (const std::string::value_type *)*((void *)v49 + 5);
          std::string v50 = v49 + 40;
          uint64_t v51 = v52;
          int v53 = (char)v50[23];
          if (v53 >= 0) {
            long long v54 = (const std::string::value_type *)v50;
          }
          else {
            long long v54 = v51;
          }
          if (v53 >= 0) {
            std::string::size_type v55 = v50[23];
          }
          else {
            std::string::size_type v55 = *((void *)v50 + 1);
          }
          std::string v56 = std::string::append(&v62, v54, v55);
          long long v57 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
          std::string::size_type v64 = v56->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v57;
          v56->__r_.__value_.__l.__size_ = 0;
          v56->__r_.__value_.__r.__words[2] = 0;
          v56->__r_.__value_.__r.__words[0] = 0;
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a5, (const void **)__p, (uint64_t)__p);
          if (SHIBYTE(v64) < 0) {
            operator delete(__p[0]);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v60);
          if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          {
            uint64_t v39 = (void *)v62.__r_.__value_.__r.__words[0];
            goto LABEL_57;
          }
          goto LABEL_58;
        }
      }
      memmove(p_dst, v23, v22);
      goto LABEL_35;
    }
    if (*((char *)a3 + 23) >= 0) {
      size_t v25 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v25 = (size_t)a3[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__dst, v25 + 2);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v26 = &__dst;
    }
    else {
      uint64_t v26 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    }
    if (v25)
    {
      if (*((char *)a3 + 23) >= 0) {
        char v27 = a3;
      }
      else {
        char v27 = *a3;
      }
      memmove(v26, v27, v25);
    }
    strcpy((char *)v26 + v25, "::");
    uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 64))(v15);
    std::string v29 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
    uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v66, v29);
    if (!v30) {
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    }
    uint64_t v33 = (const std::string::value_type *)*((void *)v30 + 5);
    uint64_t v31 = v30 + 40;
    long long v32 = v33;
    int v34 = (char)v31[23];
    if (v34 >= 0) {
      std::string v35 = (const std::string::value_type *)v31;
    }
    else {
      std::string v35 = v32;
    }
    if (v34 >= 0) {
      std::string::size_type v36 = v31[23];
    }
    else {
      std::string::size_type v36 = *((void *)v31 + 1);
    }
    uint64_t v37 = std::string::append(&__dst, v35, v36);
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    std::string::size_type v61 = v37->__r_.__value_.__r.__words[2];
    long long v60 = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(a5, (const void **)&v60, (uint64_t)&v60);
    if (SHIBYTE(v61) < 0)
    {
      uint64_t v39 = (void *)v60;
LABEL_57:
      operator delete(v39);
    }
LABEL_58:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    v14 += 2;
    uint64_t v13 = v59;
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v66);
}

void sub_20F3FDF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
}

void MIL::Conversion::OpConversionImpl::GetValidConversion(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v21[0] = 0;
  v21[1] = 0;
  uint64_t v20 = v21;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(a3, (const void **)v6 + 4))
      {
        if (!std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>((uint64_t)&v20, (const void **)v6 + 4)|| (long long v18 = (long long *)(v6 + 4), !*((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v20, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v18)+ 56)))
        {
          long long v18 = (long long *)(v6 + 4);
          *((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v20, (const void **)v6 + 4, (uint64_t)&std::piecewise_construct, &v18)+ 56) = 0;
          MIL::Conversion::OpConversionImpl::GetConversionOrderReverse(a1, (const void **)v6 + 4, a3, (uint64_t **)&v20, (uint64_t *)&v18);
          if (v18 == v19)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            std::runtime_error::runtime_error(exception, &v17);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>>(a4, (void *)a4[1], (uint64_t)v18, (uint64_t)v19, ((char *)v19 - (char *)v18) >> 5);
          v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
          std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
        }
      }
      uint64_t v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v6[2];
          BOOL v11 = *v10 == (void)v6;
          uint64_t v6 = v10;
        }
        while (!v11);
      }
      uint64_t v6 = v10;
    }
    while (v10 != v5);
    uint64_t v13 = (void *)*a4;
    uint64_t v12 = (void *)a4[1];
    uint64_t v14 = v12 - 4;
    if (v13 != v12 && v14 > v13)
    {
      do
      {
        std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::swap[abi:ne180100](v13, v14);
        v13 += 4;
        v14 -= 4;
      }
      while (v13 < v14);
    }
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v20, v21[0]);
}

void sub_20F3FE1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0)
    {
LABEL_6:
      std::string __p = &a16;
      std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a19, a20);
      std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
      _Unwind_Resume(a1);
    }
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void MIL::Conversion::OpConversionImpl::GetConversionOrderReverse(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, uint64_t *a5@<X8>)
{
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  *((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, a2, (uint64_t)&std::piecewise_construct, (long long **)&__p)+ 56) = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  uint64_t v10 = std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 8), a2, (uint64_t)&std::piecewise_construct, (long long **)&__p);
  BOOL v11 = (const void ***)v10[7];
  if (v11 == (const void ***)v10[8])
  {
LABEL_17:
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    return;
  }
  std::string v17 = (const void ***)v10[8];
LABEL_3:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v12 = *v11;
  if (*v11 != (const void **)(v11 + 1))
  {
    do
    {
      if (!std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>(a3, v12 + 4))
      {
        if (!std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__count_unique<std::string>((uint64_t)a4, v12 + 4)|| (p_p = (std::string *)(v12 + 4), !*((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, v12 + 4, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 56)))
        {
          MIL::Conversion::OpConversionImpl::GetConversionOrderReverse(&__p, a1, v12 + 4, a3, a4);
          if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
          {
            p_p = &__p;
            std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a5;
            std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v11 += 3;
            if (v11 == v17) {
              goto LABEL_17;
            }
            goto LABEL_3;
          }
          std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>>(a5, (void *)a5[1], (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 5);
          p_p = &__p;
          std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        }
      }
      uint64_t v13 = (const void **)v12[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = (const void ***)v13;
          uint64_t v13 = (const void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (const void ***)v12[2];
          BOOL v15 = *v14 == v12;
          uint64_t v12 = (const void **)v14;
        }
        while (!v15);
      }
      uint64_t v12 = (const void **)v14;
    }
    while (v14 != v11 + 1);
  }
  std::pair<std::string,std::set<std::string>>::pair[abi:ne180100]<true,0>(&__p, (long long *)a2, v11);
  p_p = &__p;
  BOOL v16 = std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::__emplace_unique_key_args<std::pair<std::string,std::set<std::string>>,std::piecewise_construct_t const&,std::tuple<std::pair<std::string,std::set<std::string>>&&>,std::tuple<>>((uint64_t **)(a1 + 32), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
  std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::push_back[abi:ne180100](a5, (uint64_t)(v16 + 10));
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)v19, v19[1]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  p_p = (std::string *)a2;
  *((unsigned char *)std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, a2, (uint64_t)&std::piecewise_construct, (long long **)&p_p)+ 56) = 1;
}

void sub_20F3FE474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[56] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20F3FE5E4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    BOOL v15 = v14;
    BOOL v16 = &v14[32 * v10];
    long long v18 = &v14[32 * v13];
    std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100]((uint64_t)v16, a2);
    std::string v17 = v16 + 32;
    std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_20F3FE6F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](result - 32, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

uint64_t std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__insert_with_size[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)>*>>>(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = a1[2];
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 5)
  {
    uint64_t v13 = *a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *a1) >> 5);
    if (v14 >> 59) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = ((uint64_t)a2 - v13) >> 5;
    uint64_t v16 = v10 - v13;
    if (v16 >> 4 > v14) {
      unint64_t v14 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    v31[4] = v9;
    if (v17) {
      long long v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v9, v17);
    }
    else {
      long long v18 = 0;
    }
    uint64_t v27 = (uint64_t)&v18[32 * v15];
    v31[0] = v18;
    v31[1] = v27;
    v31[3] = &v18[32 * v17];
    uint64_t v28 = 32 * a5;
    uint64_t v29 = v27 + 32 * a5;
    do
    {
      uint64_t v27 = std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](v27, v7)+ 32;
      v7 += 32;
      v28 -= 32;
    }
    while (v28);
    v31[2] = v29;
    uint64_t v5 = (void *)std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__swap_out_circular_buffer(a1, v31, (uint64_t)v5);
    std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::~__split_buffer((uint64_t)v31);
    return v5;
  }
  uint64_t v19 = v12 - (void)a2;
  uint64_t v20 = (uint64_t)(v12 - (void)a2) >> 5;
  if (v20 >= a5)
  {
    uint64_t v22 = a3 + 32 * a5;
LABEL_18:
    std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__move_range((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[4 * a5]);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)> *>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)> *>>,std::function<void ()(MIL::Transform::ProgramTransformer &)> *>((uint64_t)v31, v7, v22, v5);
    return v5;
  }
  uint64_t v22 = a3 + 32 * v20;
  uint64_t v23 = *(void *)(v9 - 8);
  if (v22 != a4)
  {
    uint64_t v24 = a3 + 32 * v20;
    uint64_t v25 = *(void *)(v9 - 8);
    do
    {
      uint64_t v26 = std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](v25, v24);
      v24 += 32;
      uint64_t v25 = v26 + 32;
      v23 += 32;
    }
    while (v24 != a4);
  }
  a1[1] = v23;
  if (v19 >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_20F3FE9CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = v6;
    do
    {
      uint64_t v11 = std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](v8, v10);
      v10 += 32;
      uint64_t v8 = v11 + 32;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::function<void ()(MIL::Transform::ProgramTransformer &)> *,std::function<void ()(MIL::Transform::ProgramTransformer &)> *,std::function<void ()(MIL::Transform::ProgramTransformer &)> *>((uint64_t)&v13, a2, v7, v6);
}

uint64_t std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = a2[1];
  uint64_t v7 = *a1;
  uint64_t v8 = v6;
  if (v7 != a3)
  {
    uint64_t v9 = a3;
    uint64_t v8 = a2[1];
    do
    {
      v9 -= 32;
      uint64_t v8 = std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](v8 - 32, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  uint64_t v10 = a1[1];
  uint64_t v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](v11, v3);
      v3 += 32;
      v11 += 32;
    }
    while (v3 != v10);
    uint64_t v8 = a2[1];
  }
  a2[2] = v11;
  uint64_t v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  uint64_t v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  uint64_t v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::function<void ()(MIL::Transform::ProgramTransformer &)> *,std::function<void ()(MIL::Transform::ProgramTransformer &)> *,std::function<void ()(MIL::Transform::ProgramTransformer &)> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v7 = (void *)(a4 - 32);
  uint64_t v8 = a3;
  while (v8 != a2)
  {
    v8 -= 32;
    v4 -= 32;
    uint64_t v9 = v7 - 4;
    std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::operator=[abi:ne180100](v7, v8);
    uint64_t v7 = v9;
  }
  return a3;
}

void *std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)> *>>,std::move_iterator<std::__wrap_iter<std::function<void ()(MIL::Transform::ProgramTransformer &)> *>>,std::function<void ()(MIL::Transform::ProgramTransformer &)> *>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::operator=[abi:ne180100](a4, v5);
      v5 += 32;
      a4 += 4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::vector<std::function<void ()(MIL::Transform::ProgramTransformer &)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        uint64_t v4 = std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::set<std::string>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::set<std::string>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::set<std::string>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::set<std::string>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::pair<std::string,std::set<std::string>> const,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

MIL::Matching::CompiledPattern *MIL::Matching::CompiledPattern::CompiledPattern(MIL::Matching::CompiledPattern *this, uint64_t (****a2)(void), MIL::MILContext *a3, MIL::MILContext *a4)
{
  *(void *)this = 0;
  *((void *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  uint64_t v10 = &unk_26C258CA0;
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  uint64_t v5 = MIL::MatchingPrivate::PatternPrivate::CompilePattern(a2, (const MIL::Matching::Pattern *)&v10, a3, a4);
  uint64_t v6 = (char *)operator new(0x38uLL);
  *((void *)v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C258D20;
  *(_OWORD *)(v6 + 24) = v11;
  uint64_t v7 = v12;
  uint64_t v12 = 0;
  long long v11 = 0uLL;
  *((void *)v6 + 5) = v7;
  *((void *)v6 + 6) = v5;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 1);
  *(void *)this = v6 + 24;
  *((void *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v6;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v10 = &unk_26C258CA0;
  uint64_t v13 = (void **)&v11;
  std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__destroy_vector::operator()[abi:ne180100](&v13);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v10);
  return this;
}

void sub_20F3FEF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::InstructionBuilderImpl::~InstructionBuilderImpl(_anonymous_namespace_::InstructionBuilderImpl *this)
{
  *(void *)this = &unk_26C258CA0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__destroy_vector::operator()[abi:ne180100](&v2);
  UnknownLocationImpl::~UnknownLocationImpl(this);
}

{
  void **v2;

  *(void *)this = &unk_26C258CA0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__destroy_vector::operator()[abi:ne180100](&v2);
  UnknownLocationImpl::~UnknownLocationImpl(this);
  MEMORY[0x21056C700]();
}

void *MIL::Matching::CompiledPattern::CompiledPattern(void *result, void *a2)
{
  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = a2[1];
  *uint64_t result = *a2;
  result[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *MIL::Matching::CompiledPattern::operator=(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void MIL::Matching::CompiledPattern::~CompiledPattern(MIL::Matching::CompiledPattern *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t MIL::MatchingPrivate::CompiledPatternPrivate::GetFirstInstruction(MIL::MatchingPrivate::CompiledPatternPrivate *this, const MIL::Matching::CompiledPattern *a2)
{
  return *(void *)(*(void *)this + 24);
}

void anonymous namespace'::InstructionBuilderImpl::CreateOperationPredicate(int a1, int a2, MIL::Matching::_anonymous_namespace_ *this)
{
}

void sub_20F3FF13C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

void anonymous namespace'::InstructionBuilderImpl::CreatePushToken(int a1, int a2, MIL::Matching::_anonymous_namespace_ *this)
{
}

void sub_20F3FF1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

void anonymous namespace'::InstructionBuilderImpl::CreateSetEdgePredicate(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  MIL::Matching::CreateSetEdgePredicateInstruction((uint64_t)v4, a3);
}

void sub_20F3FF2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (a2) {
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::InstructionBuilderImpl::CreateAdvanceCursorForward(_anonymous_namespace_::InstructionBuilderImpl *this, const MIL::Matching::Instruction *a2)
{
}

void sub_20F3FF358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

void anonymous namespace'::InstructionBuilderImpl::CreateSplit(uint64_t a1, const MIL::Matching::Instruction *a2)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v3 = *((void *)a2 + 2);
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  MIL::Matching::CreateSplitInstruction((void ***)__p, a2);
}

void sub_20F3FF414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
  if (__p)
  }
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *anonymous namespace'::InstructionBuilderImpl::SetSplitAlternative(_anonymous_namespace_::InstructionBuilderImpl *this, MIL::Matching::Instruction *a2, MIL::Matching::Instruction *a3, const MIL::Matching::Instruction *a4)
{
  return MIL::Matching::SetSplitInstructionAlternative(a2, (unint64_t)a3, a4, a4);
}

void anonymous namespace'::InstructionBuilderImpl::CreateReturnState(_anonymous_namespace_::InstructionBuilderImpl *this)
{
}

void sub_20F3FF4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

void anonymous namespace'::InstructionBuilderImpl::CreatePrepareForParallelForward(_anonymous_namespace_::InstructionBuilderImpl *this, const MIL::Matching::Instruction *a2)
{
}

void sub_20F3FF560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

void anonymous namespace'::InstructionBuilderImpl::CreateParallelForward(_anonymous_namespace_::InstructionBuilderImpl *this, const MIL::Matching::Instruction *a2, const MIL::Matching::Instruction *a3, const MIL::Matching::Instruction *a4)
{
}

void sub_20F3FF5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
  _Unwind_Resume(exception_object);
  }
}

uint64_t anonymous namespace'::InstructionBuilderImpl::Add(uint64_t a1, uint64_t *a2)
{
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t v4 = (void *)(a1 + 24);
  unint64_t v5 = v6;
  uint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = v4 - 2;
    uint64_t v11 = *(v4 - 2);
    uint64_t v12 = ((uint64_t)v7 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - v11;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    v20[4] = v4;
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v4, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    unint64_t v17 = &v16[8 * v12];
    v20[0] = v16;
    v20[1] = v17;
    v20[3] = &v16[8 * v15];
    uint64_t v18 = *a2;
    *a2 = 0;
    *(void *)unint64_t v17 = v18;
    void v20[2] = v17 + 8;
    std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__swap_out_circular_buffer(v10, v20);
    uint64_t v9 = *(void **)(a1 + 16);
    std::__split_buffer<std::unique_ptr<MIL::Matching::Instruction>>::~__split_buffer(v20);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *uint64_t v7 = v8;
    uint64_t v9 = v7 + 1;
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 16) = v9;
  return *(v9 - 1);
}

void sub_20F3FF778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<MIL::Matching::Instruction>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<MIL::Matching::Instruction>>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<MIL::Matching::Instruction>>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MIL::Matching::Instruction>>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MIL::Matching::Instruction>>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MIL::Matching::Instruction>>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MIL::Matching::Instruction>>,std::reverse_iterator<std::unique_ptr<MIL::Matching::Instruction>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    std::__shared_weak_count *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<MIL::Matching::Instruction>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<MIL::Matching::Instruction>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      void v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

uint64_t std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void std::__shared_ptr_emplace<MIL::Matching::CompiledPattern::CompiledPatternImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258D20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::CompiledPattern::CompiledPatternImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258D20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<MIL::Matching::CompiledPattern::CompiledPatternImpl>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::unique_ptr<MIL::Matching::Instruction>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void *MIL::Edge::Edge(void *this)
{
  *this = &unk_26C258D70;
  return this;
}

void MIL::Edge::Make()
{
}

void *MIL::EdgeIndexes::EdgeIndexes(void *this)
{
  *this = &unk_26C258DB8;
  return this;
}

void MIL::EdgeIndexesImpl::~EdgeIndexesImpl(MIL::EdgeIndexesImpl *this)
{
  *(void *)this = &unk_26C258DF0;
  uint64_t v2 = (char *)this + 8;
  std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::~__hash_table((uint64_t)v2);
}

{
  uint64_t vars8;

  MIL::EdgeIndexesImpl::~EdgeIndexesImpl(this);

  JUMPOUT(0x21056C700);
}

void MIL::EdgeIndexes::BuildForBlock(MIL::EdgeIndexes *this, const MIL::IRBlock *a2)
{
  long long v54 = 0u;
  long long v55 = 0u;
  int v56 = 1065353216;
  memset(v52, 0, sizeof(v52));
  int v53 = 1065353216;
  memset(v50, 0, sizeof(v50));
  int v51 = 1065353216;
  memset(v48, 0, sizeof(v48));
  int v49 = 1065353216;
  uint64_t v2 = (*(uint64_t (**)(MIL::EdgeIndexes *, const MIL::IRBlock *))(*(void *)this + 40))(this, a2);
  uint64_t v3 = *(MIL::IRNamedValueType ***)v2;
  uint64_t v4 = *(MIL::IRNamedValueType ***)(v2 + 8);
  if (*(MIL::IRNamedValueType ***)v2 != v4)
  {
    do
    {
      *(void *)&long long v47 = MIL::IRNamedValueType::GetName(*v3);
      DWORD2(v47) = -1;
      std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::pair<std::reference_wrapper<std::string const> const,int>>((uint64_t)v48, (uint64_t *)&v47, &v47);
      v3 += 2;
    }
    while (v3 != v4);
  }
  uint64_t v5 = (uint64_t ***)(*(uint64_t (**)(MIL::EdgeIndexes *))(*(void *)this + 56))(this);
  uint64_t v6 = **v5;
  uint64_t v41 = (*v5)[1];
  if (v6 != v41)
  {
    unsigned int v7 = 0;
    uint64_t v45 = (char *)this + 64;
    do
    {
      uint64_t v42 = v6;
      uint64_t v43 = *v6;
      uint64_t v8 = (void *)(*(uint64_t (**)(void))(*(void *)*v6 + 160))();
      uint64_t v9 = (void *)*v8;
      uint64_t v44 = v8 + 1;
      if ((void *)*v8 != v8 + 1)
      {
        do
        {
          uint64_t v11 = (MIL::IRArgument **)v9[7];
          for (uint64_t i = (MIL::IRArgument **)v9[8]; v11 != i; v11 += 2)
          {
            if (((*(uint64_t (**)(void))(*(void *)*v11 + 24))() & 1) == 0)
            {
              uint64_t Name = MIL::IRArgument::GetName(*v11);
              *(void *)&long long v47 = Name;
              if (std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>(v48, (uint64_t *)&v47))
              {
                operator new();
              }
              if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)v45 + 24))(v45, Name, 1)) {
                operator new();
              }
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v47);
              uint64_t v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Program parameter '", 19);
              int v26 = *(char *)(Name + 23);
              if (v26 >= 0) {
                uint64_t v27 = Name;
              }
              else {
                uint64_t v27 = *(void *)Name;
              }
              if (v26 >= 0) {
                uint64_t v28 = *(unsigned __int8 *)(Name + 23);
              }
              else {
                uint64_t v28 = *(void *)(Name + 8);
              }
              uint64_t v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"' from operation ", 17);
              uint64_t v30 = (void *)std::ostream::operator<<();
              uint64_t v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" does not resolve. ", 19);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Are the operations topologically sorted?", 40);
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::stringbuf::str();
              std::logic_error::logic_error(exception, &v46);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
            }
          }
          uint64_t v13 = (void *)v9[1];
          if (v13)
          {
            do
            {
              char v14 = v13;
              uint64_t v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              char v14 = (void *)v9[2];
              BOOL v15 = *v14 == (void)v9;
              uint64_t v9 = v14;
            }
            while (!v15);
          }
          uint64_t v9 = v14;
        }
        while (v14 != v44);
      }
      long long v16 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)v43 + 208))(v43);
      unint64_t v17 = **v16;
      uint64_t v18 = (*v16)[1];
      while (v17 != v18)
      {
        v17 += 2;
      }
      uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v43 + 176))(v43);
      uint64_t v20 = *(MIL::IRNamedValueType ***)v19;
      int v21 = *(MIL::IRNamedValueType ***)(v19 + 8);
      while (v20 != v21)
      {
        *(void *)&long long v47 = MIL::IRNamedValueType::GetName(*v20);
        DWORD2(v47) = v7;
        std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::pair<std::reference_wrapper<std::string const> const,int>>((uint64_t)v48, (uint64_t *)&v47, &v47);
        if ((v22 & 1) == 0)
        {
          uint64_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v33, "Two first appears at inserted for the same output!");
          __cxa_throw(v33, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        v20 += 2;
      }
      ++v7;
      uint64_t v6 = v42 + 2;
    }
    while (v42 + 2 != v41);
  }
  uint64_t v23 = (uint64_t *)(*(uint64_t (**)(MIL::EdgeIndexes *))(*(void *)this + 88))(this);
  uint64_t v24 = *v23;
  if (*v23 != v23[1])
  {
    *(void *)&long long v47 = *v23;
    if (std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>(v48, (uint64_t *)&v47))
    {
      operator new();
    }
    if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*((void *)this + 8) + 24))((char *)this + 64, v24, 1))
    {
      operator new();
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v47);
    int v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v47, (uint64_t)"Program parameter '", 19);
    int v35 = *(char *)(v24 + 23);
    if (v35 >= 0) {
      uint64_t v36 = v24;
    }
    else {
      uint64_t v36 = *(void *)v24;
    }
    if (v35 >= 0) {
      uint64_t v37 = *(unsigned __int8 *)(v24 + 23);
    }
    else {
      uint64_t v37 = *(void *)(v24 + 8);
    }
    long long v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"' from block output does not resolve.", 37);
    uint64_t v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v39, &v46);
    v39->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v39, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  operator new();
}

void sub_20F4009D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  if (a22 < 0)
  {
    operator delete(__p);
    if ((v57 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a23);
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a56);
      std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::~__hash_table(v58 - 256);
      std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::~__hash_table(v58 - 208);
      std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::~__hash_table(v58 - 160);
      _Unwind_Resume(a1);
    }
  }
  else if (!v57)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v56);
  goto LABEL_6;
}

uint64_t ***MIL::anonymous namespace'::AddLexicalEdges(uint64_t a1, void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  uint64_t v11 = **result;
  uint64_t v23 = (*result)[1];
  if (v11 != v23)
  {
    do
    {
      uint64_t v25 = v11;
      uint64_t v24 = *v11;
      uint64_t v12 = (void *)(*(uint64_t (**)(void))(*(void *)*v11 + 160))();
      uint64_t v13 = (void *)*v12;
      int v26 = v12 + 1;
      if ((void *)*v12 != v12 + 1)
      {
        do
        {
          BOOL v15 = (MIL::IRArgument **)v13[7];
          char v14 = (MIL::IRArgument **)v13[8];
          while (v15 != v14)
          {
            if (((*(uint64_t (**)(void))(*(void *)*v15 + 24))() & 1) == 0)
            {
              uint64_t Name = (void *)MIL::IRArgument::GetName(*v15);
              std::string __p = Name;
              if (std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>(a2, (uint64_t *)&__p))
              {
                operator new();
              }
              if ((*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)a3 + 24))(a3, Name, 1)) {
                operator new();
              }
            }
            v15 += 2;
          }
          unint64_t v17 = (void *)v13[1];
          if (v17)
          {
            do
            {
              uint64_t v18 = v17;
              unint64_t v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              uint64_t v18 = (void *)v13[2];
              BOOL v19 = *v18 == (void)v13;
              uint64_t v13 = v18;
            }
            while (!v19);
          }
          uint64_t v13 = v18;
        }
        while (v18 != v26);
      }
      uint64_t result = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 208))(v24);
      uint64_t v20 = **result;
      int v21 = (*result)[1];
      while (v20 != v21)
      {
        uint64_t v22 = *v20;
        v20 += 2;
      }
      uint64_t v11 = v25 + 2;
    }
    while (v25 + 2 != v23);
  }
  return result;
}

void sub_20F401218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, ...)
{
  va_start(va, a14);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

BOOL MIL::operator==(uint64_t a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2)) {
    return 0;
  }
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  if (v5 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 24))(a2)) {
    return 0;
  }
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (v6 != (*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2)) {
    return 0;
  }
  unsigned int v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  uint64_t v9 = v7[23];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v7[23];
  }
  else {
    uint64_t v10 = *((void *)v7 + 1);
  }
  uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(v8 + 8);
  }
  if (v10 != v11) {
    return 0;
  }
  if (v12 >= 0) {
    uint64_t v13 = (unsigned __int8 *)v8;
  }
  else {
    uint64_t v13 = *(unsigned __int8 **)v8;
  }
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v7, v13, *((void *)v7 + 1))) {
      return 0;
    }
  }
  else if (v7[23])
  {
    while (*v7 == *v13)
    {
      ++v7;
      ++v13;
      if (!--v9) {
        goto LABEL_19;
      }
    }
    return 0;
  }
LABEL_19:
  if ((*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 40))(a1, v13)) {
    return 1;
  }
  BOOL v15 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v17 = v15[23];
  if ((v17 & 0x80u) == 0) {
    uint64_t v18 = v15[23];
  }
  else {
    uint64_t v18 = *((void *)v15 + 1);
  }
  uint64_t v19 = *(unsigned __int8 *)(v16 + 23);
  int v20 = (char)v19;
  if ((v19 & 0x80u) != 0) {
    uint64_t v19 = *(void *)(v16 + 8);
  }
  if (v18 != v19) {
    return 0;
  }
  if (v20 >= 0) {
    int v21 = (unsigned __int8 *)v16;
  }
  else {
    int v21 = *(unsigned __int8 **)v16;
  }
  if ((v17 & 0x80) != 0) {
    return memcmp(*(const void **)v15, v21, *((void *)v15 + 1)) == 0;
  }
  if (!v15[23]) {
    return 1;
  }
  uint64_t v22 = v17 - 1;
  do
  {
    int v24 = *v15++;
    int v23 = v24;
    int v26 = *v21++;
    int v25 = v26;
    BOOL v28 = v22-- != 0;
    BOOL result = v23 == v25;
  }
  while (v23 == v25 && v28);
  return result;
}

BOOL MIL::operator!=(uint64_t a1, uint64_t a2)
{
  return !MIL::operator==(a1, a2);
}

const void ***MIL::EdgeIndexesImpl::ForwardEdgesForIdentifierName(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>((void *)(a1 + 88), &v4);
  if (v2) {
    return v2 + 3;
  }
  else {
    return 0;
  }
}

void *MIL::EdgeIndexesImpl::BackwardEdgesForParameter(uint64_t a1, int a2, uint64_t a3)
{
  int v5 = a2;
  uint64_t v6 = a3;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::find<MIL::ParameterSpec>((void *)(a1 + 8), &v5);
  if (!v3) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v3 + 4;
}

uint64_t *MIL::EdgeIndexesImpl::BackwardLexicalEdgesByIdentifier(MIL::EdgeIndexesImpl *this, int a2)
{
  int v4 = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::find<int>((void *)this + 6, &v4);
  if (v2) {
    return v2 + 3;
  }
  else {
    return 0;
  }
}

const void ***std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::find<std::reference_wrapper<std::string const>>(void *a1, uint64_t *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v15, *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(const void *****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = (unint64_t)v11[1];
      if (v6 == v13)
      {
        if (MIL::ConstReferenceWrapperEq<std::string>::operator()(v12, v11 + 2, (unsigned __int8 **)a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (const void ***)*v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  const void ****v10;
  const void ***v11;
  uint64_t v12;
  unint64_t v13;
  char v15;

  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v15, *a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(const void *****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = (unint64_t)v11[1];
      if (v13 == v6)
      {
        if (MIL::ConstReferenceWrapperEq<std::string>::operator()(v12, v11 + 2, (unsigned __int8 **)a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (const void ***)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL MIL::ConstReferenceWrapperEq<std::string>::operator()(uint64_t a1, const void ***a2, unsigned __int8 **a3)
{
  uint64_t v3 = *a2;
  unint64_t v4 = *a3;
  uint64_t v5 = *((unsigned __int8 *)*a2 + 23);
  size_t v6 = (size_t)(*a2)[1];
  if ((v5 & 0x80u) == 0) {
    uint8x8_t v7 = (const void *)*((unsigned __int8 *)*a2 + 23);
  }
  else {
    uint8x8_t v7 = (*a2)[1];
  }
  unint64_t v8 = (const void *)v4[23];
  int v9 = (char)v8;
  if ((char)v8 < 0) {
    unint64_t v8 = (const void *)*((void *)v4 + 1);
  }
  if (v7 != v8) {
    return 0;
  }
  if (v9 >= 0) {
    uint64_t v10 = v4;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)v4;
  }
  if ((v5 & 0x80) == 0)
  {
    BOOL result = 1;
    if (!v5) {
      return result;
    }
    while (*(unsigned __int8 *)v3 == *v10)
    {
      uint64_t v3 = (const void **)((char *)v3 + 1);
      ++v10;
      if (!--v5) {
        return result;
      }
    }
    return 0;
  }
  return memcmp(*v3, v10, v6) == 0;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v13 = a1 + 16;
  char v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(void *)char v14 = 0;
  *((void *)v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 4std::unique_ptr<MIL::Blob::FileWriter>::reset[abi:ne180100](this + 3, 0) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  char v25 = 1;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  int v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *(void *)v24[0] = *v21;
    *int v21 = v24[0];
  }
  else
  {
    *(void *)v24[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v24[0];
    *(void *)(*(void *)a1 + 8 * v4) = v13;
    if (*(void *)v24[0])
    {
      unint64_t v22 = *(void *)(*(void *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8) {
          v22 %= v8;
        }
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v22) = v24[0];
    }
  }
  uint64_t i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_20F401AB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v2 + 24);
    }
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Edge const>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Edge const>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F401D8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Edge const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Edge const>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a2;
  BOOL result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F401E04(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *MIL::EdgeIndexesImpl::EdgeIndexesImpl(void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  *a1 = &unk_26C258DF0;
  uint64_t v7 = (uint64_t)(a1 + 11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(a1 + 1), a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(a1 + 6), a3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(v7, a4);
  return a1;
}

void *std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::find<MIL::ParameterSpec>(void *a1, int *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v16, *((void *)a2 + 1));
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = v4 ^ (2 * v5);
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    uint64_t v10 = v4 ^ (2 * v5);
    if (v7 >= *(void *)&v6) {
      uint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v10 = (*(void *)&v6 - 1) & v7;
  }
  uint8x8_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  unint64_t v12 = (void *)*v11;
  if (*v11)
  {
    uint64_t v13 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v14 = v12[1];
      if (v7 == v14)
      {
        if (std::equal_to<MIL::ParameterSpec>::operator()[abi:ne180100](v13, (uint64_t)(v12 + 2), (uint64_t)a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(void *)&v6) {
            v14 %= *(void *)&v6;
          }
        }
        else
        {
          v14 &= *(void *)&v6 - 1;
        }
        if (v14 != v10) {
          return 0;
        }
      }
      unint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t std::equal_to<MIL::ParameterSpec>::operator()[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  unint64_t v3 = *(unsigned __int8 **)(a2 + 8);
  uint64_t v4 = *(unsigned __int8 ***)(a3 + 8);
  uint64_t v5 = v3[23];
  if ((v5 & 0x80u) == 0) {
    int8x8_t v6 = (unsigned __int8 *)v3[23];
  }
  else {
    int8x8_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
  }
  unint64_t v7 = (unsigned __int8 *)*((unsigned __int8 *)v4 + 23);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    unint64_t v7 = v4[1];
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    unint64_t v9 = *(unsigned __int8 **)(a3 + 8);
  }
  else {
    unint64_t v9 = *v4;
  }
  if ((v5 & 0x80) != 0) {
    return memcmp(*(const void **)v3, v9, *((void *)v3 + 1)) == 0;
  }
  if (!v3[23]) {
    return 1;
  }
  uint64_t v10 = v5 - 1;
  do
  {
    int v12 = *v3++;
    int v11 = v12;
    int v14 = *v9++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  int8x8_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void MIL::anonymous namespace'::EdgeImpl::~EdgeImpl(MIL::_anonymous_namespace_::EdgeImpl *this)
{
}

uint64_t MIL::anonymous namespace'::EdgeImpl::ProducingOpIdx(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t MIL::anonymous namespace'::EdgeImpl::ConsumingOpIdx(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t MIL::anonymous namespace'::EdgeImpl::ParameterName(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  uint64_t result = *((void *)this + 2);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Parameter name is nullptr");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F402194(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL MIL::anonymous namespace'::EdgeImpl::IsLexicalEdge(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  return *((void *)this + 2) == 0;
}

uint64_t MIL::anonymous namespace'::EdgeImpl::IdentifierName(MIL::_anonymous_namespace_::EdgeImpl *this)
{
  return *((void *)this + 3);
}

void std::__shared_ptr_pointer<MIL::Edge  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::Edge  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::Edge  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::piecewise_construct_t const&,std::tuple<std::reference_wrapper<std::string const>&&>,std::tuple<>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v28, *a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = v8;
      if (v8 >= v10) {
        unint64_t v4 = v8 % v10;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v8;
    }
    int v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(void **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (MIL::ConstReferenceWrapperEq<std::string>::operator()(a1 + 32, (const void ***)i + 2, (unsigned __int8 **)a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  BOOL v16 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  uint64_t v29 = a1 + 16;
  *(void *)uint64_t i = 0;
  *((void *)i + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
  uint64_t v17 = **a4;
  *((void *)i + 4) = 0;
  *((void *)i + 5) = 0;
  *((void *)i + 2) = v17;
  *((void *)i + 3) = 0;
  char v30 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  char v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)uint64_t i = *v25;
LABEL_38:
    *char v25 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *v16;
  *BOOL v16 = i;
  *(void *)(v24 + 8 * v4) = v16;
  if (*(void *)i)
  {
    unint64_t v26 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    char v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F4024CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unint64_t v3 = __p + 3;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
  if (__p) {
    operator delete(__p);
  }
}

uint64_t std::vector<std::shared_ptr<MIL::Edge const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Edge const>>,std::reverse_iterator<std::shared_ptr<MIL::Edge const>*>,std::reverse_iterator<std::shared_ptr<MIL::Edge const>*>,std::reverse_iterator<std::shared_ptr<MIL::Edge const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Edge const>>,std::reverse_iterator<std::shared_ptr<MIL::Edge const>*>,std::reverse_iterator<std::shared_ptr<MIL::Edge const>*>,std::reverse_iterator<std::shared_ptr<MIL::Edge const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *uint64_t v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Edge const>>,std::reverse_iterator<std::shared_ptr<MIL::Edge const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Edge const>>,std::reverse_iterator<std::shared_ptr<MIL::Edge const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    int8x8_t v2 = __p;
    do
    {
      unint64_t v3 = (void *)*v2;
      unint64_t v4 = (std::__shared_weak_count *)v2[5];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::unordered_map<std::string,std::shared_ptr<MIL::Edge const>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__deallocate_node(a1, *(char **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,std::vector<std::shared_ptr<MIL::Edge const>>>>>::__deallocate_node(uint64_t a1, char *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = *(char **)v2;
      unint64_t v4 = (void **)(v2 + 24);
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v4);
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::reference_wrapper<std::string const>,int>,std::__unordered_map_hasher<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperHasher<std::string>,MIL::ConstReferenceWrapperEq<std::string>,true>,std::__unordered_map_equal<std::reference_wrapper<std::string const>,std::__hash_value_type<std::reference_wrapper<std::string const>,int>,MIL::ConstReferenceWrapperEq<std::string>,MIL::ConstReferenceWrapperHasher<std::string>,true>,std::allocator<std::__hash_value_type<std::reference_wrapper<std::string const>,int>>>::__emplace_unique_key_args<std::reference_wrapper<std::string const>,std::pair<std::reference_wrapper<std::string const> const,int>>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  unint64_t v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v25, *a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v8)
        {
          if (MIL::ConstReferenceWrapperEq<std::string>::operator()(a1 + 32, (const void ***)i + 2, (unsigned __int8 **)a2))
          {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *(void *)uint64_t i = 0;
  *((void *)i + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
  *((_OWORD *)i + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *a3;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *(void *)uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v3) = a1 + 16;
  if (*(void *)i)
  {
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F402A48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::__unordered_map_hasher<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::hash<MIL::ParameterSpec>,std::equal_to<MIL::ParameterSpec>,true>,std::__unordered_map_equal<MIL::ParameterSpec,std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,std::equal_to<MIL::ParameterSpec>,std::hash<MIL::ParameterSpec>,true>,std::allocator<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>>>::__emplace_unique_key_args<MIL::ParameterSpec,std::pair<MIL::ParameterSpec const,std::shared_ptr<MIL::Edge const>>>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v7 = *a2;
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v28, *((void *)a2 + 1));
  unint64_t v9 = v7 ^ (2 * v8);
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      uint64_t v3 = v7 ^ (2 * v8);
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
    }
    else
    {
      uint64_t v3 = (v10 - 1) & v9;
    }
    char v13 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      unint64_t v14 = *v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = v14[1];
          if (v15 == v9)
          {
            if (std::equal_to<MIL::ParameterSpec>::operator()[abi:ne180100](a1 + 32, (uint64_t)(v14 + 2), (uint64_t)a2)) {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10) {
                v15 %= v10;
              }
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
    }
  }
  float v16 = (void *)(a1 + 16);
  unint64_t v14 = operator new(0x30uLL);
  uint64_t v29 = a1 + 16;
  *unint64_t v14 = 0;
  v14[1] = v9;
  long long v17 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_OWORD *)a3;
  *((_OWORD *)v14 + 2) = v17;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  char v30 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    BOOL v20 = 1;
    if (v10 >= 3) {
      BOOL v20 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v10);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        uint64_t v3 = v9 % v10;
      }
      else {
        uint64_t v3 = v9;
      }
    }
    else
    {
      uint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v24 = *(void *)a1;
  char v25 = *(void **)(*(void *)a1 + 8 * v3);
  if (v25)
  {
    *unint64_t v14 = *v25;
LABEL_38:
    *char v25 = v14;
    goto LABEL_39;
  }
  *unint64_t v14 = *v16;
  *float v16 = v14;
  *(void *)(v24 + 8 * v3) = v16;
  if (*v14)
  {
    unint64_t v26 = *(void *)(*v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v26 >= v10) {
        v26 %= v10;
      }
    }
    else
    {
      v26 &= v10 - 1;
    }
    char v25 = (void *)(*(void *)a1 + 8 * v26);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_20F402DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::ParameterSpec,std::shared_ptr<MIL::Edge const>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void MIL::Matching::Instruction::~Instruction(MIL::Matching::Instruction *this)
{
}

void MIL::Matching::Machine::Machine(MIL::Matching::Machine *this, const MIL::Matching::Instruction *a2, MIL::Builder::BlockBuilder *a3, MIL::Builder::OperationBuilder *a4)
{
}

void sub_20F402F08(_Unwind_Exception *a1)
{
  std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::CoroutineRunner<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState>::Start<MIL::Matching::anonymous namespace'::InstructionBase const*,MIL::Matching::anonymous namespace'::MatchState>(uint64_t a1, void *a2, uint64_t a3)
{
  if (*(_DWORD *)(a1 + 392) != -1)
  {
  }
  uint64_t result = (*(uint64_t (**)(void, void *, uint64_t))(*(void *)*a2 + 16))(*a2, v7, a3);
  *((_DWORD *)v7 + 44) = 0;
  *((_DWORD *)v7 + 45) = DelegateChain;
  *(_OWORD *)(v7 + 23) = 0u;
  *(_OWORD *)(v7 + 25) = 0u;
  *(void *)(*(void *)(a1 + 280) + 8 * DelegateChain) = v7;
  *(_DWORD *)(a1 + 392) = DelegateChain;
  *(void *)(a1 + 408) = *(void *)(a1 + 400);
  if (*(unsigned char *)(a1 + 368)) {
    *(unsigned char *)(a1 + 368) = 0;
  }
  *(void *)(a1 + 424) = 0;
  return result;
}

void *MIL::Matching::anonymous namespace'::AsInstructionBase(void *this, const MIL::Matching::Instruction *a2)
{
  if (this)
  {
    if (!this)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unexpected Instruction subclass");
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
  }
  return this;
}

void sub_20F4030B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Matching::Machine::~Machine(MIL::Matching::Machine *this)
{
}

uint64_t MIL::Matching::Machine::Reset(MIL::Matching::Machine *this, const MIL::Matching::Instruction *a2, MIL::Builder::BlockBuilder *a3, MIL::Builder::OperationBuilder *a4)
{
  uint64_t v6 = *(void *)this;
  *(void *)uint64_t v6 = a3;
  *(void *)(v6 + 8) = a4;
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::FreeAll((uint64_t **)(v6 + 48));
  uint64_t v7 = *(void *)this;
  uint64_t v9 = *(void *)this;
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = v9 + 16;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
}

void MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::FreeAll(uint64_t **a1)
{
  bzero(a1[6], (char *)a1[7] - (char *)a1[6]);
  bzero(a1[3], (char *)a1[4] - (char *)a1[3]);
  *(unsigned char *)(**a1 + 152) = 0;
  *(_DWORD *)a1[3] |= 1u;
  uint64_t v2 = 8 * ((char *)a1[1] - (char *)*a1) - 1;
  uint64_t v3 = **a1;
  *(void *)(v3 + 16std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v2;
  *(void *)(v3 + 168) = -1;
  a1[9] = (uint64_t *)1;
  a1[10] = (uint64_t *)v2;
}

uint64_t MIL::Matching::Machine::FindNextMatch(MIL::Matching::Machine::MachineImpl **a1, uint64_t *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  do
  {
    MIL::Matching::Machine::MachineImpl::MaybeCollectGarbage(*a1);
    unint64_t v4 = *a1;
    uint64_t v5 = (_DWORD *)*((void *)*a1 + 50);
    if (v5 == *((_DWORD **)*a1 + 51))
    {
      unint64_t v6 = *((void *)v4 + 52);
      if ((unint64_t)v5 >= v6)
      {
        uint64_t v8 = v6 - (void)v5;
        uint64_t v9 = v8 >> 1;
        if ((unint64_t)(v8 >> 1) <= 1) {
          uint64_t v9 = 1;
        }
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v10 = v9;
        }
        if (v10 >> 62) {
LABEL_48:
        }
          std::__throw_bad_array_new_length[abi:ne180100]();
        uint64_t v11 = operator new(4 * v10);
        int v12 = &v11[v10];
        int v13 = *((_DWORD *)v4 + 98);
        *((void *)v4 + 5std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v11;
        *uint64_t v11 = v13;
        uint64_t v7 = v11 + 1;
        *((void *)v4 + 5std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v11 + 1;
        *((void *)v4 + 52) = v12;
        if (v5) {
          operator delete(v5);
        }
      }
      else
      {
        _DWORD *v5 = *((_DWORD *)v4 + 98);
        uint64_t v7 = v5 + 1;
      }
      *((void *)v4 + 5std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
    }
    uint64_t v14 = *((void *)v4 + 53);
    uint64_t v15 = v14;
    do
    {
      *((void *)v4 + 53) = v15 + 1;
      uint64_t v16 = *(unsigned int *)(*((void *)v4 + 51) - 4);
      *((_DWORD *)v4 + 95) = v16;
      long long v17 = *(uint64_t (****)(void))(*((void *)v4 + 35) + 8 * v16);
      *((void *)v4 + 48) = v17;
      int v18 = (**v17)();
      switch(v18)
      {
        case 3:
          if (*((unsigned char *)v4 + 368)) {
            *((unsigned char *)v4 + 368) = 0;
          }
          {
            uint64_t v21 = *((void *)v4 + 50);
            uint64_t v22 = *((void *)v4 + 51) - 4;
            *((void *)v4 + 5std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v22;
            if (v21 == v22)
            {
              *((_DWORD *)v4 + 98) = -1;
              return 1;
            }
          }
          break;
        case 1:
          if (*((unsigned char *)v4 + 368)) {
            *((unsigned char *)v4 + 368) = 0;
          }
          uint64_t v24 = (char *)*((void *)v4 + 51);
          unint64_t v23 = *((void *)v4 + 52);
          if ((unint64_t)v24 >= v23)
          {
            unint64_t v26 = (char *)*((void *)v4 + 50);
            uint64_t v27 = (v24 - v26) >> 2;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v29 = v23 - (void)v26;
            if (v29 >> 1 > v28) {
              unint64_t v28 = v29 >> 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              if (v30 >> 62) {
                goto LABEL_48;
              }
              uint64_t v31 = (char *)operator new(4 * v30);
            }
            else
            {
              uint64_t v31 = 0;
            }
            long long v32 = &v31[4 * v27];
            *(_DWORD *)long long v32 = *((_DWORD *)v4 + 94);
            char v25 = v32 + 4;
            while (v24 != v26)
            {
              int v33 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v32 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v33;
              v32 -= 4;
            }
            *((void *)v4 + 5std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v32;
            *((void *)v4 + 5std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v25;
            *((void *)v4 + 52) = &v31[4 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v24 = *((_DWORD *)v4 + 94);
            char v25 = v24 + 4;
          }
          *((void *)v4 + 5std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v25;
          break;
        case 0:
          uint64_t v19 = *((void *)v4 + 50);
          uint64_t v20 = *((void *)v4 + 51) - 4;
          *((void *)v4 + 5std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v20;
          if (v19 == v20)
          {
            MIL::MatchingPrivate::MatchConverter::ConvertMatch((uint64_t ***)*a1 + 54, *((void *)*a1 + 40), (void *)*a1 + 6, a2);
            return 0;
          }
          break;
      }
      uint64_t v15 = *((void *)v4 + 53);
    }
    while ((unint64_t)(v15 - v14) < 0x64);
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < a3);
  return 2;
}

void MIL::Matching::Machine::MachineImpl::MaybeCollectGarbage(MIL::Matching::Machine::MachineImpl *this)
{
  uint64_t v1 = (uint64_t *)((char *)this + 48);
  uint64_t v2 = *((void *)this + 7) - *((void *)this + 6);
  unint64_t v3 = *((void *)this + 16);
  BOOL v4 = v3 <= 0x63 && 4 * (v2 & 0x1FFFFFFFFFFFFFFFuLL) > v3;
  if (v4)
  {
    unint64_t v6 = 8 * v2;
    unint64_t v7 = v6 - v3;
    unint64_t v8 = *((void *)this + 55);
    BOOL v4 = v7 > v8;
    unint64_t v9 = v7 - v8;
    unint64_t v10 = v6 >> 2;
    if (v4 && v9 >= v10)
    {
      MIL::Matching::Machine::MachineImpl::Mark(this);
      MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Sweep(v1, v12);
      *((void *)this + 55) = 8 * (*((void *)this + 7) - *((void *)this + 6)) - *((void *)this + 16);
    }
  }
}

void MIL::Matching::CreateOperationPredicateInstruction(int a1, MIL::Matching::_anonymous_namespace_ *this)
{
}

void MIL::Matching::CreateAdvanceCursorForwardInstruction(MIL::Matching *this, const MIL::Matching::Instruction *a2)
{
}

void MIL::Matching::CreateSplitInstruction(void ***a1, const MIL::Matching::Instruction *a2)
{
  unint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v4 = (char *)v2 - (char *)*a1;
  if (v2 == *a1)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
  }
  else
  {
    if (v4 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)operator new((char *)v2 - (char *)*a1);
    unint64_t v6 = &v5[8 * (v4 >> 3)];
  }
  if (v2 != v3)
  {
    unint64_t v7 = v5;
    do
    {
      unint64_t v9 = v8;
      if (v7 >= v6)
      {
        uint64_t v11 = (v7 - v5) >> 3;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        if ((v6 - v5) >> 2 > v12) {
          unint64_t v12 = (v6 - v5) >> 2;
        }
        if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13)
        {
          if (v13 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v14 = (char *)operator new(8 * v13);
        }
        else
        {
          uint64_t v14 = 0;
        }
        uint64_t v15 = &v14[8 * v11];
        *(void *)uint64_t v15 = v9;
        unint64_t v10 = v15 + 8;
        if (v7 != v5)
        {
          do
          {
            uint64_t v16 = *((void *)v7 - 1);
            v7 -= 8;
            *((void *)v15 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
            v15 -= 8;
          }
          while (v7 != v5);
          unint64_t v7 = v5;
        }
        uint64_t v5 = v15;
        unint64_t v6 = &v14[8 * v13];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(void *)unint64_t v7 = v8;
        unint64_t v10 = v7 + 8;
      }
      ++v3;
      unint64_t v7 = v10;
    }
    while (v3 != v2);
  }
  operator new();
}

void sub_20F403798(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Matching::SetSplitInstructionAlternative(MIL::Matching *this, unint64_t a2, void *a3, const MIL::Matching::Instruction *a4)
{
  if (!this
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Expected a SplitInstruction");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  unint64_t v8 = v6;
  uint64_t v10 = v8[1];
  if (a2 >= (v8[2] - v10) >> 3) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  *(void *)(v10 + 8 * a2) = result;
  return result;
}

void sub_20F403894(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Matching::CreatePushTokenInstruction(int a1, MIL::Matching::_anonymous_namespace_ *this)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  operator new();
}

void sub_20F403974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x21056C700](v2, 0x10E1C40E2CB26B8);
  _Unwind_Resume(a1);
}

void MIL::Matching::CreateSetEdgePredicateInstruction(uint64_t a1, void *a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100]((uint64_t)v4, a1);
  operator new();
}

void sub_20F403AA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  MEMORY[0x21056C700](v2, 0x10E1C40E2CB26B8);
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MIL::Matching::CreateReturnStateInstruction(MIL::Matching *this)
{
}

void MIL::Matching::CreatePrepareForParallelForwardInstruction(MIL::Matching *this, const MIL::Matching::Instruction *a2)
{
}

void MIL::Matching::CreateParallelForwardInstruction(MIL::Matching *this, const MIL::Matching::Instruction *a2, const MIL::Matching::Instruction *a3, const MIL::Matching::Instruction *a4)
{
  operator new();
}

void MIL::Matching::Machine::MachineImpl::Mark(MIL::Matching::Machine::MachineImpl *this)
{
  uint64_t v2 = (char *)this + 48;
  if (*((unsigned char *)this + 368)) {
  uint64_t v3 = *((unsigned int *)this + 98);
  }
  if (v3 == -1)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(*((void *)this + 35) + 8 * v3);
    do
    {
      uint64_t v5 = v4;
      uint64_t v4 = *(void *)(v4 + 184);
    }
    while (v4);
  }
  uint64_t v6 = (void *)*((void *)this + 28);
  *((void *)this + 29) = v6;
  unint64_t v7 = *((void *)this + 30);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v9 = v7 - (void)v6;
    uint64_t v10 = v9 >> 2;
    if ((unint64_t)(v9 >> 2) <= 1) {
      uint64_t v10 = 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v12 = operator new(8 * v11);
    uint64_t v13 = &v12[v11];
    *uint64_t v12 = v5;
    uint64_t v8 = v12 + 1;
    *((void *)this + 28) = v12;
    *((void *)this + 29) = v12 + 1;
    *((void *)this + 3std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v13;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = v5;
    uint64_t v8 = v6 + 1;
  }
  *((void *)this + 29) = v8;
  uint64_t v15 = (uint64_t *)*((void *)this + 28);
  uint64_t v14 = (uint64_t *)*((void *)this + 29);
  while (v15 != v14)
  {
    uint64_t v16 = *v15++;
    (*(void (**)(uint64_t, char *))(*(void *)v16 + 8))(v16, v2);
  }
}

void MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Sweep(uint64_t *a1, int8x8_t a2)
{
  uint64_t v5 = a1 + 6;
  uint64_t v3 = (char *)a1[6];
  uint64_t v4 = (char *)v5[1];
  size_t v6 = v4 - v3;
  unint64_t v7 = (v4 - v3) >> 2;
  uint64_t v8 = a1[3];
  if (v7 != (a1[4] - v8) >> 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "BUG: size of 'used' and 'allocated' bitsets don't match");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  *(_DWORD *)v3 |= 1u;
  if (v4 != v3)
  {
    uint64_t v9 = 0;
    uint64_t v10 = a1[10];
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      int v11 = *(_DWORD *)(v8 + 4 * v9);
      int v12 = *(_DWORD *)&v3[4 * v9];
      *(_DWORD *)(v8 + 4 * v9) = v12 & v11;
      int v13 = v11 & ~v12;
      if (v13)
      {
        uint64_t v14 = 32 * v9;
        uint64_t v15 = *a1;
        unint64_t v16 = a1[9];
        unsigned int v17 = v13;
        do
        {
          uint64_t v18 = __clz(__rbit32(v17));
          unsigned int v19 = v17 >> v18;
          unint64_t v20 = v14 + v18;
          uint64_t v21 = __clz(__rbit32(~v19));
          uint64_t v14 = v20 + v21;
          uint64_t v22 = (void *)(*(void *)(v15 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (v20 & 0x3F));
          void *v22 = v20 + v21 - 1;
          v22[1] = v16;
          a1[9] = v20;
          if (v19 == -1) {
            break;
          }
          unsigned int v17 = v19 >> v21;
          unint64_t v16 = v20;
        }
        while (v17);
      }
      a2.i32[0] = v13;
      a2 = vcnt_s8(a2);
      a2.i16[0] = vaddlv_u8((uint8x8_t)a2);
      v10 += a2.u32[0];
      ++v9;
    }
    while (v9 != v7);
    a1[10] = v10;
  }

  bzero(v3, v6);
}

void sub_20F403EB4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::anonymous namespace'::MatchState::MarkObjectsAsUsed(uint64_t *a1, uint64_t a2)
{
  uint64_t result = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::MarkAsUsed(a2, *a1);
  uint64_t v5 = a1[4];
  for (unint64_t i = v5 & 0xFFFFFFFFFFFFFFLL; (v5 & 0xFFFFFFFFFFFFFFLL) != 0; unint64_t i = v5 & 0xFFFFFFFFFFFFFFLL)
  {
    uint64_t v7 = *(void *)(a2 + 136);
    int v8 = *(_DWORD *)(v7 + 4 * (i >> 5));
    if ((v8 & (1 << v5)) != 0) {
      break;
    }
    *(_DWORD *)(v7 + 4 * (i >> std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy((uint64_t)this + 32, *((void **)this + 5)) = v8 | (1 << v5);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a2 + 88) + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (v5 & 0x3F) + 144);
  }
  return result;
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::MarkAsUsed(uint64_t result, uint64_t a2)
{
  unint64_t v2 = a2 & 0xFFFFFFFFFFFFFFLL;
  if ((a2 & 0xFFFFFFFFFFFFFFLL) != 0)
  {
    LOBYTE(v3) = a2;
    uint64_t v4 = (void *)result;
    do
    {
      uint64_t result = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)v4, v2);
      uint64_t v5 = v4[6];
      int v6 = *(_DWORD *)(v5 + 4 * (v2 >> 5));
      if ((v6 & (1 << v3)) != 0) {
        break;
      }
      *(_DWORD *)(v5 + 4 * (v2 >> std::__tree<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::__map_value_compare<std::pair<std::string,std::set<std::string>>,std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>,std::less<std::pair<std::string,std::set<std::string>>>,true>,std::allocator<std::__value_type<std::pair<std::string,std::set<std::string>>,std::function<void ()(MIL::Transform::ProgramTransformer &)>>>>::destroy((uint64_t)this + 32, *((void **)this + 5)) = v6 | (1 << v3);
      uint64_t v3 = *(void *)(*(void *)(*v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (v3 & 0x3F) + 144);
      unint64_t v2 = v3 & 0xFFFFFFFFFFFFFFLL;
    }
    while ((v3 & 0xFFFFFFFFFFFFFFLL) != 0);
  }
  return result;
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated(uint64_t result, unint64_t a2)
{
  if (((*(_DWORD *)(*(void *)(result + 24) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> a2) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "BUG: Attempted to access a free chunk as an allocated one");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return result;
}

void sub_20F404070(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::anonymous namespace'::Position,6ul,6ul>::AssertChunkIsAllocated(uint64_t result, unint64_t a2)
{
  if (((*(_DWORD *)(*(void *)(result + 24) + ((a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) >> a2) & 1) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "BUG: Attempted to access a free chunk as an allocated one");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return result;
}

void sub_20F4040F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Matching::anonymous namespace'::Tree<MIL::Matching::anonymous namespace'::CoroutineData<MIL::Matching::anonymous namespace'::CoroutineBodyContainer>>::Traverse(char **a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    unint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(*(void *)&v1[8 * v4] + 192);
      if (v5)
      {
        do
        {
          unint64_t v6 = (unint64_t)a1[2];
          if ((unint64_t)v2 >= v6)
          {
            uint64_t v7 = *a1;
            uint64_t v8 = (v2 - *a1) >> 3;
            unint64_t v9 = v8 + 1;
            if ((unint64_t)(v8 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v10 = v6 - (void)v7;
            if (v10 >> 2 > v9) {
              unint64_t v9 = v10 >> 2;
            }
            if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v11 = v9;
            }
            if (v11)
            {
              if (v11 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int v12 = (char *)operator new(8 * v11);
            }
            else
            {
              int v12 = 0;
            }
            int v13 = &v12[8 * v8];
            *(void *)int v13 = v5;
            uint64_t v14 = v13 + 8;
            if (v2 != v7)
            {
              do
              {
                uint64_t v15 = *((void *)v2 - 1);
                v2 -= 8;
                *((void *)v13 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v15;
                v13 -= 8;
              }
              while (v2 != v7);
              unint64_t v2 = *a1;
            }
            *a1 = v13;
            a1[1] = v14;
            a1[2] = &v12[8 * v11];
            if (v2) {
              operator delete(v2);
            }
            unint64_t v2 = v14;
          }
          else
          {
            *(void *)unint64_t v2 = v5;
            v2 += 8;
          }
          a1[1] = v2;
          uint64_t v5 = *(void *)(v5 + 208);
        }
        while (v5);
        uint64_t v1 = *a1;
      }
      ++v4;
    }
    while (v4 < (v2 - v1) >> 3);
  }
}

void MIL::Matching::Machine::MachineImpl::MachineImpl(MIL::Matching::Machine::MachineImpl *this, MIL::Builder::BlockBuilder *a2, MIL::Builder::OperationBuilder *a3)
{
  *(void *)this = a2;
  *((void *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a3;
  *((void *)this + 2) = &unk_26C259010;
  *((void *)this + 5) = (char *)this + 16;
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::PersistentListArena((uint64_t)this + 48);
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 25) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 13) = xmmword_20F911A10;
  {
    *((void *)this + 39) = 0;
    *((_OWORD *)this + 14) = 0u;
    *((_OWORD *)this + 15) = 0u;
    *((_OWORD *)this + 16) = 0u;
    *((_OWORD *)this + 17) = 0u;
    *((_OWORD *)this + 18) = 0u;
    *((_DWORD *)this + 76) = 0;
    *((unsigned char *)this + 32std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
    *((unsigned char *)this + 368) = 0;
    *((void *)this + 47) = -1;
    *((_DWORD *)this + 98) = -1;
    *((_OWORD *)this + 25) = 0u;
    *((_OWORD *)this + 26) = 0u;
    MIL::MatchingPrivate::MatchConverter::MatchConverter((MIL::Matching::Machine::MachineImpl *)((char *)this + 432));
  }
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::logic_error::logic_error(exception, "Expected a zero chunk ID");
  __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
}

void sub_20F404350(_Unwind_Exception *a1)
{
  __cxa_free_exception(v5);
  uint64_t v7 = (void *)v1[23];
  if (v7)
  {
    v1[24] = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)v1[20];
  if (v8)
  {
    v1[21] = v8;
    operator delete(v8);
  }
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::~PersistentListArena(v3);
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void *MIL::Matching::CoroutineRunner<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState>::~CoroutineRunner(void *a1)
{
  unint64_t v2 = (void *)a1[50];
  if (v2)
  {
    a1[51] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[35];
  if (v3)
  {
    a1[36] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a1[31];
  if (v4)
  {
    uint64_t v5 = (void *)a1[32];
    unint64_t v6 = (void *)a1[31];
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *--v5;
        uint64_t v7 = v8;
        void *v5 = 0;
        if (v8) {
          MEMORY[0x21056C700](v7, 0x1022C40FA248018);
        }
      }
      while (v5 != v4);
      unint64_t v6 = (void *)a1[31];
    }
    a1[32] = v4;
    operator delete(v6);
  }
  unint64_t v9 = (void *)a1[28];
  if (v9)
  {
    a1[29] = v9;
    operator delete(v9);
  }
  uint64_t v10 = (void *)a1[23];
  if (v10)
  {
    a1[24] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)a1[20];
  if (v11)
  {
    a1[21] = v11;
    operator delete(v11);
  }
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::~PersistentListArena((uint64_t)(a1 + 6));
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100](a1 + 2);
  return a1;
}

void std::__function::__func<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::~__func()
{
}

void *std::__function::__func<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26C259010;
  return result;
}

void std::__function::__func<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C259010;
}

uint64_t std::__function::__func<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::operator()()
{
  return 1;
}

uint64_t std::__function::__func<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1},std::allocator<MIL::Matching::anonymous namespace'::AdditionalContext::AdditionalContext(MIL::Builder::BlockBuilder *,MIL::Builder::OperationBuilder *)::{lambda(MIL::Builder::DataDependency const&)#1}>,BOOL ()(MIL::Builder::DataDependency const&)>::target_type()
{
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::PersistentListArena(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 72) = xmmword_20F911A10;
  if (MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateChunk((uint64_t *)a1, 0))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Expected a zero chunk ID");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return a1;
}

void sub_20F404604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  __cxa_free_exception(v11);
  int v13 = (void *)v10[6];
  if (v13)
  {
    v10[7] = v13;
    operator delete(v13);
  }
  uint64_t v14 = (void *)v10[3];
  if (v14)
  {
    v10[4] = v14;
    operator delete(v14);
  }
  a10 = v10;
  std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

unint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateChunk(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = a1[9];
  if (v2 == -1) {
    MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateBlock();
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + (((unint64_t)a1[9] >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (a1[9] & 0x3F);
  if (v2 == *(void *)v4)
  {
    a1[9] = *(void *)(v4 + 8);
  }
  else
  {
    a1[9] = v2 + 1;
    *(_OWORD *)(*(void *)(v3 + (((v2 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * ((v2 + 1) & 0x3F)) = *(_OWORD *)v4;
  }
  *(void *)(v4 + 144) = a2;
  *(unsigned char *)(v4 + 152) = 0;
  *(_DWORD *)(a1[3] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v2;
  --a1[10];
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)a1, v2);
  return v2;
}

void MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateBlock()
{
}

void sub_20F404888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

uint64_t std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    unint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>,std::reverse_iterator<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>*>>::operator()[abi:ne180100](uint64_t result)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(result + 16) + 8);
  std::vector<unsigned int>::size_type v2 = *(uint64_t **)(*(void *)(result + 8) + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      uint64_t result = MEMORY[0x21056C700](result, 0x1000C40C72100A4);
    }
    ++v1;
  }
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = MEMORY[0x21056C700](result, 0x1000C40C72100A4);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<std::string>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    std::vector<unsigned int>::pointer begin = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      std::vector<unsigned int>::pointer begin = this->__begin_;
      std::vector<std::string>::pointer end = this->__end_;
    }
    else
    {
      char v14 = 0;
    }
    long long v15 = &v14[4 * v11];
    long long v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    unsigned int v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__base_destruct_at_end[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    uint64_t result = v5;
    *uint64_t v4 = 0;
    if (v5) {
      uint64_t result = MEMORY[0x21056C700](result, 0x1000C40C72100A4);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

unint64_t MIL::Matching::PersistentListArena<MIL::Matching::anonymous namespace'::Position,6ul,6ul>::AllocateChunk(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = a1[9];
  if (v2 == -1) {
    operator new();
  }
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + (((unint64_t)a1[9] >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * (a1[9] & 0x3F);
  if (v2 == *(void *)v4)
  {
    a1[9] = *(void *)(v4 + 8);
  }
  else
  {
    a1[9] = v2 + 1;
    *(_OWORD *)(*(void *)(v3 + (((v2 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) + 160 * ((v2 + 1) & 0x3F)) = *(_OWORD *)v4;
  }
  *(void *)(v4 + 144) = a2;
  *(unsigned char *)(v4 + 152) = 0;
  *(_DWORD *)(a1[3] + ((v2 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v2;
  --a1[10];
  return v2;
}

void sub_20F404F58(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x1000C40C72100A4);
  _Unwind_Resume(a1);
}

void *std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::anonymous namespace'::Position,6ul,6ul>::Chunk,64ul>>>::~vector[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)*a1;
  if (*a1)
  {
    uint64_t v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        void *v3 = 0;
        if (v6) {
          MEMORY[0x21056C700](v5, 0x1000C40C72100A4);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::~PersistentListArena(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v5 = (void **)a1;
  std::vector<std::unique_ptr<std::array<MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Chunk,64ul>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  return a1;
}

void **std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100](void **result, void *a2)
{
  unint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    MIL::MatchingPrivate::MatchConverter::~MatchConverter((MIL::MatchingPrivate::MatchConverter *)(v2 + 54));
    JUMPOUT(0x21056C700);
  }
  return result;
}

BOOL MIL::Matching::anonymous namespace'::CoroutineManager<MIL::Matching::anonymous namespace'::CoroutineBodyContainer>::KillOrReturnFromDelegate(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(v3 + 8 * a2);
  int v5 = *(_DWORD *)(v4 + 180);
  if (v5 == -1)
  {
    uint64_t v6 = a2;
    uint64_t v7 = *(void *)(v4 + 184);
    uint64_t v9 = a1;
    *(void *)(v3 + 8 * v6) = v7;
  }
  else
  {
    uint64_t v9 = a1;
  }
  return v5 != -1;
}

uint64_t *MIL::Matching::anonymous namespace'::Tree<MIL::Matching::anonymous namespace'::CoroutineData<MIL::Matching::anonymous namespace'::CoroutineBodyContainer>>::RemoveSubtree<MIL::Matching::anonymous namespace'::CoroutineManager<MIL::Matching::anonymous namespace'::CoroutineBodyContainer>::CleanupCallback>(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = a2[23];
  if (v6 && *(void **)(v6 + 192) == a2) {
    *(void *)(v6 + 192) = a2[26];
  }
  uint64_t v7 = a2[25];
  if (v7) {
    *(void *)(v7 + 208) = a2[26];
  }
  uint64_t v8 = a2[26];
  if (v8) {
    *(void *)(v8 + 20std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v7;
  }
  uint64_t v9 = *(char **)a1;
  *(void *)(a1 + 8) = *(void *)a1;
  unint64_t v10 = *(void *)(a1 + 16);
  if ((unint64_t)v9 >= v10)
  {
    uint64_t v12 = v10 - (void)v9;
    uint64_t v13 = v12 >> 2;
    if ((unint64_t)(v12 >> 2) <= 1) {
      uint64_t v13 = 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v15 = operator new(8 * v14);
    long long v16 = &v15[v14];
    *long long v15 = a2;
    uint64_t v11 = (char *)(v15 + 1);
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v15 + 1;
    *(void *)(a1 + 16) = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(void *)uint64_t v9 = a2;
    uint64_t v11 = v9 + 8;
  }
  *(void *)(a1 + 8) = v11;
}

uint64_t *MIL::Matching::anonymous namespace'::Tree<MIL::Matching::anonymous namespace'::CoroutineData<MIL::Matching::anonymous namespace'::CoroutineBodyContainer>>::DeallocateTraversedNodes<MIL::Matching::anonymous namespace'::CoroutineManager<MIL::Matching::anonymous namespace'::CoroutineBodyContainer>::CleanupCallback>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)v2;
    uint64_t v5 = *(unsigned int *)(*(void *)v2 + 180);
    if (v5 != -1)
    {
      uint64_t v6 = *a2;
      *(_DWORD *)(*(void *)(*a2 + 56) + 8 * v5) = *(_DWORD *)(*a2 + 80);
      *(_DWORD *)(v6 + 8std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v5;
      --*(void *)(v6 + 88);
    }
    *uint64_t v4 = result[6];
    result[6] = (uint64_t)v4;
    v2 += 8;
  }
  return result;
}

uint64_t MIL::Matching::anonymous namespace'::CoroutineManager<MIL::Matching::anonymous namespace'::CoroutineBodyContainer>::AllocateDelegateChain(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 80);
  uint64_t v4 = *(void **)(a1 + 56);
  uint64_t v3 = *(void **)(a1 + 64);
  if (v2 == v3 - v4)
  {
    uint64_t v5 = (v2 + 1);
    unint64_t v6 = *(void *)(a1 + 72);
    if ((unint64_t)v3 >= v6)
    {
      uint64_t v8 = v6 - (void)v4;
      if (v8 >> 2 <= (unint64_t)(v2 + 1)) {
        uint64_t v9 = v2 + 1;
      }
      else {
        uint64_t v9 = v8 >> 2;
      }
      if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      if (v10 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(8 * v10);
      uint64_t v12 = &v11[8 * v2];
      *(void *)uint64_t v12 = v5;
      uint64_t v7 = v12 + 8;
      if (v3 != v4)
      {
        do
        {
          uint64_t v13 = *--v3;
          *((void *)v12 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v13;
          v12 -= 8;
        }
        while (v3 != v4);
        uint64_t v3 = *(void **)(a1 + 56);
      }
      *(void *)(a1 + 56) = v12;
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = &v11[8 * v10];
      if (v3) {
        operator delete(v3);
      }
    }
    else
    {
      void *v3 = v5;
      uint64_t v7 = v3 + 1;
    }
    *(void *)(a1 + 64) = v7;
    uint64_t v2 = *(unsigned int *)(a1 + 80);
  }
  if (v2 == -1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Maximum number of coroutines has been reached");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(_DWORD *)(a1 + 8std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = *(_DWORD *)(*(void *)(a1 + 56) + 8 * v2);
  ++*(void *)(a1 + 88);
  return v2;
}

void sub_20F4053C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *MIL::Matching::anonymous namespace'::MemoryPool<216ul,8ul,16ul>::Allocate(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 24);
  if (!result) {
    operator new();
  }
  *(void *)(a1 + 24) = *result;
  return result;
}

void sub_20F405574(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x1022C40FA248018);
  _Unwind_Resume(a1);
}

void MIL::Matching::anonymous namespace'::OperationPredicateInstruction::~OperationPredicateInstruction(MIL::Matching::_anonymous_namespace_::OperationPredicateInstruction *this)
{
  *(void *)this = &unk_26C2590A0;
  std::__function::__value_func<BOOL ()(MIL::Builder::OperationBuilder &)>::~__value_func[abi:ne180100]((void *)this + 1);

  UnknownLocationImpl::~UnknownLocationImpl(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C2590A0;
  std::__function::__value_func<BOOL ()(MIL::Builder::OperationBuilder &)>::~__value_func[abi:ne180100]((void *)this + 1);
  UnknownLocationImpl::~UnknownLocationImpl(this);

  JUMPOUT(0x21056C700);
}

__n128 MIL::Matching::anonymous namespace'::InstructionImpl<MIL::Matching::anonymous namespace'::OperationPredicateInstruction,MIL::Matching::anonymous namespace'::OperationPredicateCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26C2590F8;
  *(void *)(a2 + 8) = a1;
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t std::__function::__value_func<BOOL ()(MIL::Builder::OperationBuilder &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<BOOL ()(MIL::Builder::OperationBuilder &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t MIL::Matching::anonymous namespace'::OperationPredicateCoroutine::Run(uint64_t a1, uint64_t a2)
{
  if (!*(_DWORD *)(*(void *)(a2 + 384) + 176))
  {
    if (*(_DWORD *)(a1 + 24) != 2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "OperationPredicate invoked when there is no cursor");
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v4 = (long long *)(a1 + 16);
    unint64_t v5 = *(void *)(a1 + 16);
    if (v5)
    {
      unint64_t v6 = (void *)(a2 + 48);
      while (1)
      {
        MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated(a2 + 48, v5 & 0xFFFFFFFFFFFFFFLL);
        uint64_t v7 = *(void *)(*v6 + ((v5 >> 3) & 0x1FFFFFFFFFFFF8));
        if (v7)
        {
          uint64_t v8 = v7 + 160 * (v5 & 0x3F) + 24 * HIBYTE(v5) - 24;
          if (!*(_DWORD *)(v8 + 8) && *(void *)v8 == *(void *)(a1 + 32)) {
            break;
          }
        }
        unint64_t v5 = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Pop((void *)(a2 + 48), v5);
        if (!v5) {
          goto LABEL_9;
        }
      }
    }
    else
    {
LABEL_9:
      uint64_t v9 = *(void *)(*(void *)(a1 + 8) + 32);
      if (!v9) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t, void))(*(void *)v9 + 48))(v9, *(void *)(a1 + 32)))
      {
        unint64_t v10 = *(void *)(a1 + 16);
        *(void *)&long long v15 = *(void *)(a1 + 32);
        DWORD2(v15) = 0;
        *(void *)&long long v16 = *(void *)(a1 + 56);
        *(void *)(a1 + 16) = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Append((uint64_t *)(a2 + 48), v10, &v15);
        uint64_t v11 = (void *)(*(void *)(a1 + 8) + 40);
        long long v12 = *(_OWORD *)(a1 + 32);
        long long v15 = *v4;
        long long v16 = v12;
        long long v17 = *(_OWORD *)(a1 + 48);
        return 2;
      }
    }
  }
  return 3;
}

void sub_20F405928(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::anonymous namespace'::OperationPredicateCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

uint64_t MIL::Matching::CoroutineMacroHelper::ReplaceCurrent<MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState>,MIL::Matching::anonymous namespace'::InstructionBase const* const&,MIL::Matching::anonymous namespace'::MatchState>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 280) + 8 * *(unsigned int *)(a1 + 380));
  uint64_t v4 = (char **)(a1 + 224);
  unint64_t v5 = *(char **)(a1 + 224);
  uint64_t v22 = a1 + 224;
  *(void *)(a1 + 232) = v5;
  for (uint64_t i = *(void *)(v3 + 192); i; v5 = v9)
  {
    unint64_t v8 = *(void *)(a1 + 240);
    if ((unint64_t)v5 >= v8)
    {
      unint64_t v10 = *v4;
      uint64_t v11 = (v5 - *v4) >> 3;
      unint64_t v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v8 - (void)v10;
      if (v13 >> 2 > v12) {
        unint64_t v12 = v13 >> 2;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v12;
      }
      if (v14)
      {
        if (v14 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v15 = (char *)operator new(8 * v14);
      }
      else
      {
        long long v15 = 0;
      }
      long long v16 = &v15[8 * v11];
      *(void *)long long v16 = i;
      uint64_t v9 = v16 + 8;
      if (v5 != v10)
      {
        do
        {
          uint64_t v17 = *((void *)v5 - 1);
          v5 -= 8;
          *((void *)v16 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v17;
          v16 -= 8;
        }
        while (v5 != v10);
        unint64_t v5 = *v4;
      }
      *(void *)(a1 + 224) = v16;
      *(void *)(a1 + 232) = v9;
      *(void *)(a1 + 24std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = &v15[8 * v14];
      if (v5) {
        operator delete(v5);
      }
    }
    else
    {
      *(void *)unint64_t v5 = i;
      uint64_t v9 = v5 + 8;
    }
    *(void *)(a1 + 232) = v9;
    uint64_t i = *(void *)(i + 208);
  }
  *(void *)(v3 + 192) = 0;
  int v18 = *(_DWORD *)(v3 + 180);
  uint64_t result = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*a2 + 16))(*a2, v3, a3);
  *(_DWORD *)(v3 + 176) = 0;
  *(_DWORD *)(v3 + 18std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v18;
  return result;
}

unint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Pop(void *a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a2 >> 57) {
    return a2 - 0x100000000000000;
  }
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)a1, a2 & 0xFFFFFFFFFFFFFFLL);
  return *(void *)(*(void *)(*a1 + ((v3 >> 3) & 0x1FFFFFFFFFFFF8)) + 160 * (v2 & 0x3F) + 144);
}

unint64_t MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Append(uint64_t *a1, unint64_t a2, long long *a3)
{
  unint64_t Chunk = a2 & 0xFFFFFFFFFFFFFFLL;
  MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)a1, a2 & 0xFFFFFFFFFFFFFFLL);
  if (a2 >> 57 > 2
    || (uint64_t v7 = *(void *)(*a1 + ((a2 >> 3) & 0x1FFFFFFFFFFFF8)),
        HIBYTE(a2) != *(unsigned __int8 *)(v7 + 160 * (a2 & 0x3F) + 152)))
  {
    unint64_t Chunk = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AllocateChunk(a1, a2);
    uint64_t v7 = *(void *)(*a1 + ((Chunk >> 3) & 0x1FFFFFFFFFFFFFF8));
  }
  uint64_t v8 = v7 + 160 * (Chunk & 0x3F);
  unsigned int v9 = *(unsigned __int8 *)(v8 + 152);
  *(unsigned char *)(v8 + 152) = v9 + 1;
  uint64_t v10 = v8 + 24 * v9;
  long long v11 = *a3;
  *(void *)(v10 + 16) = *((void *)a3 + 2);
  *(_OWORD *)uint64_t v10 = v11;
  return Chunk & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v8 + 152) << 56);
}

void MIL::Matching::anonymous namespace'::AdvanceCursorForwardInstruction::~AdvanceCursorForwardInstruction(MIL::Matching::_anonymous_namespace_::AdvanceCursorForwardInstruction *this)
{
  UnknownLocationImpl::~UnknownLocationImpl(this);

  JUMPOUT(0x21056C700);
}

__n128 MIL::Matching::anonymous namespace'::InstructionImpl<MIL::Matching::anonymous namespace'::AdvanceCursorForwardInstruction,MIL::Matching::anonymous namespace'::AdvanceCursorForwardCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26C259198;
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 4std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 24) = v4;
  *(__n128 *)(a2 + 8) = result;
  *(void *)(a2 + 56) = a1;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 8std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
  return result;
}

uint64_t MIL::Matching::anonymous namespace'::AdvanceCursorForwardCoroutine::Run(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(*(void *)(a2 + 384) + 176);
  if (v4 == 472) {
    goto LABEL_35;
  }
  if (v4 == 459) {
    goto LABEL_51;
  }
  if (v4) {
    return 3;
  }
  int v5 = *(_DWORD *)(a1 + 16);
  if (v5 != 2)
  {
    unint64_t v6 = (unint64_t *)(a1 + 8);
    if (v5 == 1)
    {
      unint64_t v11 = *v6;
      if (*v6)
      {
        unint64_t v12 = (void *)(a2 + 48);
        while (1)
        {
          MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated(a2 + 48, v11 & 0xFFFFFFFFFFFFFFLL);
          uint64_t v13 = *(void *)(*v12 + ((v11 >> 3) & 0x1FFFFFFFFFFFF8));
          if (v13)
          {
            uint64_t v14 = v13 + 160 * (v11 & 0x3F) + 24 * HIBYTE(v11) - 24;
            if (!*(_DWORD *)(v14 + 8))
            {
              if (*(void *)v14) {
                break;
              }
            }
          }
          unint64_t v11 = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Pop((void *)(a2 + 48), v11);
          if (!v11) {
            goto LABEL_15;
          }
        }
        char v15 = 0;
      }
      else
      {
LABEL_15:
        char v15 = 1;
      }
      *(unsigned char *)(a1 + 88) = v15;
      DataDependenciesByVariableuint64_t Name = MIL::Builder::BlockBuilder::GetDataDependenciesByVariableName(*(void *)a2, *(unsigned __int8 **)(a1 + 24));
      uint64_t v17 = 0;
      uint64_t v18 = DataDependenciesByVariableName[2];
      *(void *)(a1 + 72) = v18;
      *(void *)(a1 + 8std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
      while (v18 != v17)
      {
        MIL::Builder::DataDependency::GetConsumer(v18 + 16, v41);
        int v21 = 0;
        if (*(void *)&v41[0])
        {
          int v22 = *(unsigned __int8 *)(a1 + 88);
          if (*(unsigned char *)(a1 + 88))
          {
            MIL::Builder::DataDependency::GetConsumer(*(void *)(a1 + 72) + 16, &v39);
            int v21 = 0;
            if (v39 != *(MIL::BuilderPrivate::OperationBuilderPrivate **)(a2 + 8)) {
              goto LABEL_30;
            }
          }
          uint64_t v23 = *(void *)(*(void *)(a1 + 32) + 24);
          if (!v23) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v23 + 48))(v23, *(void *)(a1 + 72) + 16))
          {
            unint64_t v24 = *(void *)(a1 + 40);
            MIL::Builder::DataDependency::GetConsumer(*(void *)(a1 + 72) + 16, &v37);
            if (v38) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            }
          }
          else
          {
            int v21 = 0;
          }
          if (v22)
          {
LABEL_30:
            if (v40) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v40);
            }
          }
        }
        if (*((void *)&v41[0] + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41[0] + 1));
        }
        if (v21)
        {
          uint64_t v25 = *(void *)(a2 + 384);
          int v26 = 472;
          goto LABEL_54;
        }
LABEL_35:
        uint64_t v17 = *(void *)(a1 + 80);
        uint64_t v18 = **(void **)(a1 + 72);
        *(void *)(a1 + 72) = v18;
      }
    }
    else
    {
      if (v5)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Unexpected cursor state");
        __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
      }
      uint64_t v7 = (void *)(a1 + 40);
      {
        *(void *)(a1 + 24) = *(void *)(a2 + 8);
        uint64_t v8 = 2;
        *(_DWORD *)(a1 + 16) = 2;
        *uint64_t v7 = 0;
        *(void *)(a1 + 48) = 0;
        unsigned int v9 = (void *)(*(void *)(a1 + 56) + 8);
        long long v10 = *(_OWORD *)(a1 + 24);
        v41[0] = *(_OWORD *)v6;
        v41[1] = v10;
        v41[2] = *(_OWORD *)(a1 + 40);
        return v8;
      }
    }
    return 3;
  }
  unint64_t v19 = 0;
  *(void *)(a1 + 64) = 0;
LABEL_40:
  if (v19 >= MIL::Builder::OperationBuilder::GetNumOutputs(*(MIL::Builder::OperationBuilder **)(a1 + 24))) {
    return 3;
  }
  uint64_t v28 = *(void *)a2;
  Outputuint64_t Name = (unsigned __int8 *)MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)(a1 + 24), *(void *)(a1 + 64));
  unint64_t v30 = MIL::Builder::BlockBuilder::GetDataDependenciesByVariableName(v28, OutputName);
  uint64_t v31 = 0;
  uint64_t v32 = v30[2];
  *(void *)(a1 + 72) = v32;
  *(void *)(a1 + 8std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
  while (1)
  {
    if (v32 == v31)
    {
      unint64_t v19 = *(void *)(a1 + 64) + 1;
      *(void *)(a1 + 64) = v19;
      goto LABEL_40;
    }
    MIL::Builder::DataDependency::GetConsumer(v32 + 16, v41);
    int v33 = 0;
    if (*(void *)&v41[0])
    {
      uint64_t v34 = *(void *)(*(void *)(a1 + 32) + 24);
      if (!v34) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      int v33 = 0;
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v34 + 48))(v34, *(void *)(a1 + 72) + 16))
      {
        unint64_t v35 = *(void *)(a1 + 40);
        MIL::Builder::DataDependency::GetConsumer(*(void *)(a1 + 72) + 16, &v39);
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
      }
    }
    if (*((void *)&v41[0] + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v41[0] + 1));
    }
    if (v33) {
      break;
    }
LABEL_51:
    uint64_t v31 = *(void *)(a1 + 80);
    uint64_t v32 = **(void **)(a1 + 72);
    *(void *)(a1 + 72) = v32;
  }
  uint64_t v25 = *(void *)(a2 + 384);
  int v26 = 459;
LABEL_54:
  *(_DWORD *)(v25 + 176) = v26;
  uint64_t v36 = (void *)(*(void *)(a1 + 56) + 8);
  return 2;
}

void sub_20F4060CC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::anonymous namespace'::AdvanceCursorForwardCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

uint64_t MIL::Matching::anonymous namespace'::AdvanceCursorForwardCoroutine::CheckParallelEdges(unint64_t a1, MIL::BuilderPrivate::OperationBuilderPrivate *a2, uint64_t *a3)
{
  if (!a1) {
    return 1;
  }
  unint64_t v5 = a1;
  uint64_t v6 = (uint64_t)(a3 + 17);
  while (1)
  {
    uint64_t v8 = *(void *)(a3[17] + ((v5 >> 3) & 0x1FFFFFFFFFFFF8)) + 160 * (v5 & 0x3F) + 24 * HIBYTE(v5);
    int v11 = *(_DWORD *)(v8 - 24);
    uint64_t v10 = v8 - 24;
    int v9 = v11;
    uint64_t v12 = *a3;
    if (v11 == 1)
    {
      uint64_t Parameters = (void *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(a2, v7);
      uint64_t v23 = (unsigned __int8 *)(Parameters + 1);
      unint64_t v24 = (unsigned __int8 *)*Parameters;
      if ((void *)*Parameters == Parameters + 1) {
        return 0;
      }
      while (1)
      {
        uint64_t v25 = (void *)*((void *)MIL::Builder::BlockBuilder::GetDataDependenciesForConsumerParam(v12, (uint64_t)a2, v24 + 32)+ 2);
        if (v25) {
          break;
        }
LABEL_42:
        uint64_t v34 = (unsigned __int8 *)*((void *)v24 + 1);
        if (v34)
        {
          do
          {
            unint64_t v35 = v34;
            uint64_t v34 = *(unsigned __int8 **)v34;
          }
          while (v34);
        }
        else
        {
          do
          {
            unint64_t v35 = (unsigned __int8 *)*((void *)v24 + 2);
            BOOL v21 = *(void *)v35 == (void)v24;
            unint64_t v24 = v35;
          }
          while (!v21);
        }
        unint64_t v24 = v35;
        if (v35 == v23) {
          return 0;
        }
      }
      while (1)
      {
        Variableuint64_t Name = (unsigned __int8 *)MIL::Builder::DataDependency::GetVariableName((MIL::Builder::DataDependency *)(v25 + 2));
        uint64_t v27 = *(unsigned __int8 ***)(v10 + 8);
        uint64_t v28 = VariableName[23];
        if ((v28 & 0x80u) == 0) {
          uint64_t v29 = (unsigned __int8 *)VariableName[23];
        }
        else {
          uint64_t v29 = (unsigned __int8 *)*((void *)VariableName + 1);
        }
        unint64_t v30 = (unsigned __int8 *)*((unsigned __int8 *)v27 + 23);
        int v31 = (char)v30;
        if ((char)v30 < 0) {
          unint64_t v30 = v27[1];
        }
        if (v29 != v30) {
          goto LABEL_41;
        }
        if (v31 >= 0) {
          uint64_t v32 = *(unsigned __int8 **)(v10 + 8);
        }
        else {
          uint64_t v32 = *v27;
        }
        if ((v28 & 0x80) != 0)
        {
          if (memcmp(*(const void **)VariableName, v32, *((void *)VariableName + 1))) {
            goto LABEL_41;
          }
        }
        else if (VariableName[23])
        {
          while (*VariableName == *v32)
          {
            ++VariableName;
            ++v32;
            if (!--v28) {
              goto LABEL_39;
            }
          }
          goto LABEL_41;
        }
LABEL_39:
        uint64_t v33 = *(void *)(*(void *)(v10 + 16) + 24);
        if (!v33) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        if ((*(uint64_t (**)(uint64_t, void *))(*(void *)v33 + 48))(v33, v25 + 2)) {
          goto LABEL_49;
        }
LABEL_41:
        uint64_t v25 = (void *)*v25;
        if (!v25) {
          goto LABEL_42;
        }
      }
    }
    if (v9 == 2) {
      break;
    }
LABEL_49:
    if (!v5) {
      return 1;
    }
  }
  uint64_t v13 = (void *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(a2, v7);
  uint64_t v14 = (unsigned __int8 *)(v13 + 1);
  char v15 = (unsigned __int8 *)*v13;
  if ((void *)*v13 != v13 + 1)
  {
    do
    {
      for (uint64_t i = (uint64_t **)*((void *)MIL::Builder::BlockBuilder::GetDataDependenciesForConsumerParam(v12, (uint64_t)a2, v15 + 32)+ 2); i; uint64_t i = (uint64_t **)*i)
      {
        MIL::Builder::DataDependency::GetProducer(i + 2, &v37);
        if (v37 == *(void *)(v10 + 8))
        {
          uint64_t v17 = *(void *)(*(void *)(v10 + 16) + 24);
          if (!v17) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          char v18 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v17 + 48))(v17, (uint64_t *)i + 2);
          if (v38) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v38);
          }
          if (v18) {
            goto LABEL_49;
          }
        }
        else if (v38)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
      }
      unint64_t v19 = (unsigned __int8 *)*((void *)v15 + 1);
      if (v19)
      {
        do
        {
          unint64_t v20 = v19;
          unint64_t v19 = *(unsigned __int8 **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v20 = (unsigned __int8 *)*((void *)v15 + 2);
          BOOL v21 = *(void *)v20 == (void)v15;
          char v15 = v20;
        }
        while (!v21);
      }
      char v15 = v20;
    }
    while (v20 != v14);
  }
  return 0;
}

void sub_20F4063DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Matching::CoroutineMacroHelper::SpawnDelegate<MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState>,MIL::Matching::anonymous namespace'::InstructionBase const* const&,MIL::Matching::anonymous namespace'::MatchState>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned int *)(a1 + 380);
  uint64_t v6 = *(void *)(a1 + 280);
  uint64_t v7 = *(void *)(v6 + 8 * v5);
  uint64_t result = (*(uint64_t (**)(void, void *, uint64_t))(*(void *)*a2 + 16))(*a2, v8, a3);
  v8[22] = 0xFFFFFFFF00000000;
  v8[23] = v7;
  v8[24] = 0;
  v8[25] = 0;
  v8[26] = 0;
  if (v7)
  {
    uint64_t v10 = *(void *)(v7 + 192);
    v8[26] = v10;
    if (v10) {
      *(void *)(v10 + 20std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v8;
    }
    *(void *)(v7 + 192) = v8;
  }
  *(void *)(v6 + 8 * v5) = v8;
  return result;
}

void MIL::Matching::anonymous namespace'::AdvanceCursorForwardCoroutine::CreateNewState(MIL::Builder::DataDependency *this@<X1>, _OWORD *a2@<X0>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v7 = a2[1];
  *(_OWORD *)a4 = *a2;
  *(_OWORD *)(a4 + 16) = v7;
  *(_OWORD *)(a4 + 32) = a2[2];
  MIL::Builder::DataDependency::GetConsumer((uint64_t)this, v9);
  uint64_t v8 = (std::__shared_weak_count *)v9[1];
  *(void *)(a4 + 16) = v9[0];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  *(_DWORD *)(a4 + 8) = 2;
  *(void *)(a4 + 24) = a3 + 16;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 4std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = this;
}

unint64_t MIL::Matching::anonymous namespace'::AdditionalContext::Pop(uint64_t a1, unint64_t a2)
{
  char v2 = a2;
  unint64_t v3 = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a2 >> 57) {
    return a2 - 0x100000000000000;
  }
  return *(void *)(*(void *)(*(void *)(a1 + 136) + ((v3 >> 3) & 0x1FFFFFFFFFFFF8)) + 160 * (v2 & 0x3F) + 144);
}

void MIL::Matching::anonymous namespace'::SplitInstruction::~SplitInstruction(MIL::Matching::_anonymous_namespace_::SplitInstruction *this)
{
  *(void *)this = &unk_26C2591D0;
  char v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }

  UnknownLocationImpl::~UnknownLocationImpl(this);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_26C2591D0;
  char v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  UnknownLocationImpl::~UnknownLocationImpl(this);

  JUMPOUT(0x21056C700);
}

__n128 MIL::Matching::anonymous namespace'::InstructionImpl<MIL::Matching::anonymous namespace'::SplitInstruction,MIL::Matching::anonymous namespace'::SplitCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26C2591F8;
  *(void *)(a2 + 8) = a1;
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t MIL::Matching::anonymous namespace'::SplitCoroutine::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 384);
  int v3 = *(_DWORD *)(v2 + 176);
  if (v3 == 602)
  {
    unint64_t v4 = *(void *)(a1 + 64) + 1;
    *(void *)(a1 + 64) = v4;
  }
  else
  {
    if (v3) {
      return 3;
    }
    unint64_t v4 = 0;
    *(void *)(a1 + 64) = 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 8) + 8);
  if (v4 < (*(void *)(*(void *)(a1 + 8) + 16) - v5) >> 3)
  {
    *(_DWORD *)(v2 + 176) = 602;
    return 2;
  }
  return 3;
}

uint64_t MIL::Matching::anonymous namespace'::SplitCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

void *MIL::Matching::anonymous namespace'::ChangeStateInstruction::ChangeStateInstruction(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_26C2592C0;
  uint64_t v5 = (void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    if (v6 == a2)
    {
      a1[4] = a1 + 1;
      (*(void (**)(void))(*(void *)*v5 + 24))();
      goto LABEL_7;
    }
    a1[4] = v6;
  }
  else
  {
    uint64_t v5 = a1 + 4;
  }
  void *v5 = 0;
LABEL_7:
  a1[5] = a3;
  return a1;
}

void *std::function<void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::~function(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::~__func()
{
}

__n128 std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C259230;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C259230;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::operator()(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  unint64_t v4 = *a3;
  long long v6 = *(_OWORD *)(a1 + 8);
  unint64_t v7 = a3[5];
  unint64_t result = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Append((uint64_t *)(a2 + 48), v4, &v6);
  *a3 = result;
  return result;
}

uint64_t std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreatePushTokenInstruction(std::variant<MIL::Builder::OperationBuilder *,MIL::Matching::BeginList,MIL::Matching::EndList> const&,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::target_type()
{
}

void MIL::Matching::anonymous namespace'::ChangeStateInstruction::~ChangeStateInstruction(MIL::Matching::_anonymous_namespace_::ChangeStateInstruction *this)
{
  *(void *)this = &unk_26C2592C0;

  UnknownLocationImpl::~UnknownLocationImpl(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C2592C0;
  UnknownLocationImpl::~UnknownLocationImpl(this);

  JUMPOUT(0x21056C700);
}

__n128 MIL::Matching::anonymous namespace'::InstructionImpl<MIL::Matching::anonymous namespace'::ChangeStateInstruction,MIL::Matching::anonymous namespace'::ChangeStateCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = a3[1];
  __n128 result = (__n128)a3[2];
  long long v5 = *a3;
  *(void *)a2 = &unk_26C259318;
  *(void *)(a2 + 8) = a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t MIL::Matching::anonymous namespace'::ChangeStateCoroutine::Run(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(*(void *)(a2 + 384) + 176)) {
    return 3;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 32);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  long long v6 = (void *)(*(void *)(a1 + 8) + 40);
  long long v7 = *(_OWORD *)(a1 + 32);
  v8[0] = *(_OWORD *)(a1 + 16);
  v8[1] = v7;
  void v8[2] = *(_OWORD *)(a1 + 48);
  return 2;
}

uint64_t MIL::Matching::anonymous namespace'::ChangeStateCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

void *std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::~__func(void *a1)
{
  *a1 = &unk_26C259350;
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::~__func(void *a1)
{
  *a1 = &unk_26C259350;
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_26C259350;
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F406CA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C259350;
  return std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::operator()(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(a3 + 24) = result + 8;
  return result;
}

uint64_t std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0,std::allocator<MIL::Matching::CreateSetEdgePredicateInstruction(std::function<BOOL ()(MIL::Builder::DataDependency const&)>,MIL::Matching::Instruction const*)::$_0>,void ()(MIL::Matching::CoroutineContext<MIL::Matching::anonymous namespace'::AdditionalContext,MIL::Matching::anonymous namespace'::CoroutineBodyContainer,MIL::Matching::anonymous namespace'::MatchState> &,MIL::Matching::anonymous namespace'::MatchState&)>::target_type()
{
}

void MIL::Matching::anonymous namespace'::ReturnStateInstruction::~ReturnStateInstruction(MIL::Matching::_anonymous_namespace_::ReturnStateInstruction *this)
{
  UnknownLocationImpl::~UnknownLocationImpl(this);

  JUMPOUT(0x21056C700);
}

__n128 MIL::Matching::anonymous namespace'::InstructionImpl<MIL::Matching::anonymous namespace'::ReturnStateInstruction,MIL::Matching::anonymous namespace'::ReturnStateCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26C259428;
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 4std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 24) = v4;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t MIL::Matching::anonymous namespace'::ReturnStateCoroutine::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 384);
  if (*(_DWORD *)(v2 + 176)) {
    return 3;
  }
  int v4 = *(unsigned __int8 *)(a2 + 368);
  long long v5 = *(_OWORD *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 32std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 336) = v6;
  *(_OWORD *)(a2 + 352) = v5;
  if (!v4) {
    *(unsigned char *)(a2 + 368) = 1;
  }
  uint64_t result = 0;
  *(_DWORD *)(v2 + 176) = 711;
  return result;
}

uint64_t MIL::Matching::anonymous namespace'::ReturnStateCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

void MIL::Matching::anonymous namespace'::PrepareForParallelForwardInstruction::~PrepareForParallelForwardInstruction(MIL::Matching::_anonymous_namespace_::PrepareForParallelForwardInstruction *this)
{
  UnknownLocationImpl::~UnknownLocationImpl(this);

  JUMPOUT(0x21056C700);
}

__n128 MIL::Matching::anonymous namespace'::InstructionImpl<MIL::Matching::anonymous namespace'::PrepareForParallelForwardInstruction,MIL::Matching::anonymous namespace'::PrepareForParallelForwardCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26C2594B8;
  *(void *)(a2 + 8) = a1;
  __n128 result = *(__n128 *)a3;
  long long v4 = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)(a2 + 16) = result;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  return result;
}

uint64_t MIL::Matching::anonymous namespace'::PrepareForParallelForwardCoroutine::Run(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(*(void *)(a2 + 384) + 176);
  if (v4 == 766) {
    goto LABEL_11;
  }
  if (v4) {
    return 3;
  }
  long long v6 = (long long *)(a1 + 16);
  unint64_t v5 = *(void *)(a1 + 16);
  *(void *)&long long v20 = 0;
  DWORD2(v2std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 1;
  *(void *)&long long v21 = 0;
  *(void *)(a1 + 16) = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Append((uint64_t *)(a2 + 48), v5, &v20);
  if (!*(_DWORD *)(a1 + 24))
  {
    *(_DWORD *)(a1 + 24) = 1;
    uint64_t Parameters = (void *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(*(MIL::BuilderPrivate::OperationBuilderPrivate **)(a2 + 8), v7);
    uint64_t v13 = (void *)*Parameters;
    int v11 = Parameters + 1;
    uint64_t v12 = v13;
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v11;
    while (v12 != v11)
    {
      unint64_t v15 = 0;
      *(void *)(a1 + 8std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
      while (1)
      {
        uint64_t v16 = v12[7];
        if (v15 >= (v12[8] - v16) >> 4) {
          break;
        }
        if ((*(unsigned int (**)(void))(**(void **)(v16 + 16 * v15) + 16))(*(void *)(v16 + 16 * v15)))
        {
          *(void *)(a1 + 32) = MIL::IRArgument::GetName(*(MIL::IRArgument **)(*(void *)(*(void *)(a1 + 64) + 56)
                                                                              + 16 * *(void *)(a1 + 80)));
          *(_DWORD *)(*(void *)(a2 + 384) + 176) = 766;
          return 2;
        }
LABEL_11:
        unint64_t v15 = *(void *)(a1 + 80) + 1;
        *(void *)(a1 + 8std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v15;
        uint64_t v12 = *(void **)(a1 + 64);
      }
      uint64_t v17 = (void *)v12[1];
      if (v17)
      {
        do
        {
          char v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          char v18 = (void *)v12[2];
          BOOL v19 = *v18 == (void)v12;
          uint64_t v12 = v18;
        }
        while (!v19);
      }
      *(void *)(a1 + 64) = v18;
      int v11 = *(void **)(a1 + 72);
      uint64_t v12 = v18;
    }
    return 3;
  }
  uint64_t v8 = (void *)(*(void *)(a1 + 8) + 8);
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v20 = *v6;
  long long v21 = v9;
  long long v22 = *(_OWORD *)(a1 + 48);
  return 2;
}

uint64_t MIL::Matching::anonymous namespace'::PrepareForParallelForwardCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
}

void MIL::Matching::anonymous namespace'::ParallelForwardInstruction::~ParallelForwardInstruction(MIL::Matching::_anonymous_namespace_::ParallelForwardInstruction *this)
{
  UnknownLocationImpl::~UnknownLocationImpl(this);

  JUMPOUT(0x21056C700);
}

double MIL::Matching::anonymous namespace'::InstructionImpl<MIL::Matching::anonymous namespace'::ParallelForwardInstruction,MIL::Matching::anonymous namespace'::ParallelForwardCoroutine>::ConstructCoroutine(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v4 = a3[1];
  long long v3 = a3[2];
  long long v5 = *a3;
  *(void *)a2 = &unk_26C259548;
  *(void *)(a2 + 8) = a1;
  *(_OWORD *)(a2 + 16) = v5;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v3;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 96) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 16std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
  double result = NAN;
  *(void *)(a2 + 168) = -1;
  return result;
}

uint64_t MIL::Matching::anonymous namespace'::ParallelForwardCoroutine::Run(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 384);
  int v5 = *(_DWORD *)(v4 + 176);
  uint64_t result = 3;
  if (v5 > 845)
  {
    if (v5 != 846)
    {
      if (v5 != 852) {
        return result;
      }
      goto LABEL_32;
    }
    long long v20 = *(_OWORD *)(a2 + 320);
    long long v21 = *(_OWORD *)(a2 + 336);
    long long v22 = *(_OWORD *)(a2 + 352);
    int v23 = *(unsigned __int8 *)(a2 + 368);
    *(unsigned char *)(a1 + 16std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v23;
    *(_OWORD *)(a1 + 128) = v21;
    *(_OWORD *)(a1 + 144) = v22;
    *(_OWORD *)(a1 + 112) = v20;
    if (v23)
    {
      *(_DWORD *)(*(void *)(a2 + 384) + 176) = 852;
      unint64_t v24 = (void *)(*(void *)(a1 + 8) + 24);
      long long v25 = *(_OWORD *)(a1 + 96);
      long long v38 = *(_OWORD *)(a1 + 80);
      long long v39 = v25;
      long long v37 = *(_OWORD *)(a1 + 64);
      *(void *)&long long v37 = *(void *)(a1 + 112);
      *(void *)&long long v39 = v26;
      unint64_t v27 = *(void *)(a1 + 144);
      if (v27)
      {
        unint64_t v28 = v26;
        do
        {
        }
        while (v27);
        *(void *)&long long v39 = v28;
      }
      return 2;
    }
LABEL_25:
    *(_DWORD *)(*(void *)(a2 + 384) + 176) = 837;
    int v32 = *(_DWORD *)(a1 + 168);
LABEL_33:
    *(_DWORD *)(a2 + 376) = v32;
    return 1;
  }
  if (!v5)
  {
    if (!*(_DWORD *)(a1 + 24))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "ParallelForward invoked when there is no cursor");
      __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
    }
    uint64_t v17 = *(void *)(a1 + 8);
    uint64_t v18 = *(unsigned int *)(a2 + 380);
    if (v18 == -1) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = *(void *)(*(void *)(a2 + 280) + 8 * v18);
    }
    (*(void (**)(void, void *, uint64_t))(**(void **)(v17 + 8) + 16))(*(void *)(v17 + 8), v30, a1 + 16);
    *((_DWORD *)v30 + 44) = 0;
    *((_DWORD *)v30 + 45) = DelegateChain;
    v30[23] = v19;
    v30[24] = 0;
    v30[25] = 0;
    v30[26] = 0;
    if (v19)
    {
      uint64_t v31 = *(void *)(v19 + 192);
      v30[26] = v31;
      if (v31) {
        *(void *)(v31 + 20std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v30;
      }
      *(void *)(v19 + 192) = v30;
    }
    *(void *)(*(void *)(a2 + 280) + 8 * DelegateChain) = v30;
    *(_DWORD *)(a1 + 168) = DelegateChain;
    goto LABEL_25;
  }
  if (v5 == 837)
  {
    long long v7 = *(_OWORD *)(a2 + 320);
    long long v8 = *(_OWORD *)(a2 + 336);
    long long v9 = *(_OWORD *)(a2 + 352);
    int v10 = *(unsigned __int8 *)(a2 + 368);
    *(unsigned char *)(a1 + 16std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v10;
    *(_OWORD *)(a1 + 128) = v8;
    *(_OWORD *)(a1 + 144) = v9;
    *(_OWORD *)(a1 + 112) = v7;
    if (v10)
    {
      long long v11 = *(_OWORD *)(a2 + 320);
      long long v12 = *(_OWORD *)(a2 + 352);
      *(_OWORD *)(a1 + 8std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = *(_OWORD *)(a2 + 336);
      *(_OWORD *)(a1 + 96) = v12;
      *(_OWORD *)(a1 + 64) = v11;
      uint64_t v13 = *(void *)(a1 + 8);
      long long v14 = *(_OWORD *)(a1 + 32);
      long long v37 = *(_OWORD *)(a1 + 16);
      long long v38 = v14;
      long long v39 = *(_OWORD *)(a1 + 48);
      *(void *)&long long v37 = *(void *)(a1 + 64);
      uint64_t v15 = *(unsigned int *)(a2 + 380);
      if (v15 == -1) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = *(void *)(*(void *)(a2 + 280) + 8 * v15);
      }
      (*(void (**)(void, void *, long long *))(**(void **)(v13 + 16) + 16))(*(void *)(v13 + 16), v34, &v37);
      *((_DWORD *)v34 + 44) = 0;
      *((_DWORD *)v34 + 45) = v33;
      v34[23] = v16;
      v34[24] = 0;
      v34[25] = 0;
      v34[26] = 0;
      if (v16)
      {
        uint64_t v35 = *(void *)(v16 + 192);
        v34[26] = v35;
        if (v35) {
          *(void *)(v35 + 20std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = v34;
        }
        *(void *)(v16 + 192) = v34;
      }
      *(void *)(*(void *)(a2 + 280) + 8 * v33) = v34;
      *(_DWORD *)(a1 + 172) = v33;
      uint64_t v4 = *(void *)(a2 + 384);
LABEL_32:
      *(_DWORD *)(v4 + 176) = 846;
      int v32 = *(_DWORD *)(a1 + 172);
      goto LABEL_33;
    }
  }
  return result;
}

void sub_20F407428(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::anonymous namespace'::ParallelForwardCoroutine::MarkObjectsAsUsed(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 160))
  {
  }
  return result;
}

unint64_t MIL::Matching::anonymous namespace'::AdditionalContext::Append(uint64_t a1, unint64_t a2, long long *a3)
{
  long long v6 = (uint64_t *)(a1 + 136);
  unint64_t Chunk = a2 & 0xFFFFFFFFFFFFFFLL;
  if (a2 >> 57 > 2
    || (uint64_t v8 = *(void *)(*(void *)(a1 + 136) + ((a2 >> 3) & 0x1FFFFFFFFFFFF8)),
        HIBYTE(a2) != *(unsigned __int8 *)(v8 + 160 * (a2 & 0x3F) + 152)))
  {
    uint64_t v8 = *(void *)(*v6 + ((Chunk >> 3) & 0x1FFFFFFFFFFFFFF8));
  }
  uint64_t v9 = v8 + 160 * (Chunk & 0x3F);
  unsigned int v10 = *(unsigned __int8 *)(v9 + 152);
  *(unsigned char *)(v9 + 152) = v10 + 1;
  uint64_t v11 = v9 + 24 * v10;
  long long v12 = *a3;
  *(void *)(v11 + 16) = *((void *)a3 + 2);
  *(_OWORD *)uint64_t v11 = v12;
  return Chunk & 0xFFFFFFFFFFFFFFLL | ((unint64_t)*(unsigned __int8 *)(v9 + 152) << 56);
}

void *MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(void *a1, uint64_t a2)
{
  *a1 = &unk_26C259580;
  uint64_t v4 = (char *)operator new(0x30uLL);
  *((void *)v4 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v4 + 2) = 0;
  *(void *)uint64_t v4 = &unk_26C2595C0;
  *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
  *((void *)v4 + 5) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[1] = v4 + 24;
  a1[2] = v4;
  return a1;
}

void sub_20F40760C(_Unwind_Exception *a1)
{
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void *MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(void *result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 16);
  *uint64_t result = &unk_26C259580;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v2 = *(void *)(a2 + 16);
  *uint64_t result = &unk_26C259580;
  result[1] = v3;
  result[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t MIL::Matching::InvalidMatchAccess::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void MIL::Matching::InvalidMatchAccess::~InvalidMatchAccess(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&unk_26C259580;
  uint64_t v2 = this[2].__vftable;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v2);
  }

  std::exception::~exception(this);
}

{
  uint64_t vars8;

  MIL::Matching::InvalidMatchAccess::~InvalidMatchAccess(this);

  JUMPOUT(0x21056C700);
}

char *MIL::Matching::InvalidMatchAccess::what(MIL::Matching::InvalidMatchAccess *this)
{
  uint64_t result = (char *)*((void *)this + 1);
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

__n128 MIL::Matching::OutputView::OutputView(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 MIL::Matching::OutputView::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t MIL::Matching::OutputView::GetType(MIL::Matching::OutputView *this)
{
  return MIL::Builder::OperationBuilder::GetOutputType(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)this, *((void *)this + 1));
}

uint64_t MIL::Matching::OutputView::GetName(MIL::Matching::OutputView *this)
{
  return MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)this, *((void *)this + 1));
}

void *MIL::Matching::MatchView::MatchView(void *result, uint64_t a2)
{
  *__n128 result = a2;
  return result;
}

void *MIL::Matching::MatchView::MatchView(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

{
  *__n128 result = *a2;
  return result;
}

{
  *__n128 result = *a2;
  return result;
}

{
  *__n128 result = *a2;
  return result;
}

void *MIL::Matching::MatchView::operator=(void *result, void *a2)
{
  *__n128 result = *a2;
  return result;
}

{
  *__n128 result = *a2;
  return result;
}

uint64_t MIL::Matching::MatchView::GetKind(MIL::Matching::MatchView *this)
{
  int v1 = *(_DWORD *)(*(void *)this + 8);
  if (!v1) {
    return **(void **)this != 0;
  }
  if (v1 != 1)
  {
    if (v1 == 2)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Invalid MatchView");
    }
    else
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Trying to visit a std::variant that is in an invalid state");
    }
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }
  return 2;
}

void sub_20F4078E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL MIL::Matching::MatchView::IsNone(MIL::Matching::MatchView *this)
{
  return MIL::Matching::MatchView::GetKind(this) == 0;
}

uint64_t MIL::Matching::MatchView::GetOperator(MIL::MatchingPrivate::MatchItem **this)
{
  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);

  return MIL::Builder::OperationBuilder::GetOperator(Operation);
}

uint64_t MIL::MatchingPrivate::MatchItem::GetOperation(MIL::MatchingPrivate::MatchItem *this)
{
  if (!this || *((_DWORD *)this + 2) || (uint64_t result = *(void *)this) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "MatchView is not holding an Operation");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_20F4079B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::MatchView::GetOpsetName(MIL::MatchingPrivate::MatchItem **this)
{
  Operation = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)MIL::MatchingPrivate::MatchItem::GetOperation(*this);

  return MIL::Builder::OperationBuilder::GetOpsetName(Operation);
}

uint64_t MIL::Matching::MatchView::GetNumOutputs(MIL::MatchingPrivate::MatchItem **this)
{
  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);

  return MIL::Builder::OperationBuilder::GetNumOutputs(Operation);
}

uint64_t MIL::Matching::MatchView::GetOutput@<X0>(MIL::MatchingPrivate::MatchItem **this@<X0>, MIL::Builder::OperationBuilder **a2@<X8>)
{
  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  uint64_t result = MIL::Builder::OperationBuilder::GetNumOutputs(Operation);
  if (result != 1)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v6, "The operation does not have exactly one output");
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)v6);
  }
  *a2 = Operation;
  a2[1] = 0;
  return result;
}

void sub_20F407AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

unint64_t MIL::Matching::MatchView::GetOutput@<X0>(MIL::MatchingPrivate::MatchItem **this@<X0>, unint64_t a2@<X1>, MIL::Builder::OperationBuilder **a3@<X8>)
{
  Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  unint64_t result = MIL::Builder::OperationBuilder::GetNumOutputs(Operation);
  if (result <= a2)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v8, "Output index is out of range");
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)v8);
  }
  *a3 = Operation;
  a3[1] = (MIL::Builder::OperationBuilder *)a2;
  return result;
}

void sub_20F407B9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::Matching::MatchView::GetArgumentCount(MIL::MatchingPrivate::MatchItem **a1, const void **a2)
{
  uint64_t Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);

  return MIL::Builder::OperationBuilder::GetNumArguments(Operation, a2);
}

uint64_t MIL::Matching::MatchView::GetArgument@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  if (MIL::Builder::OperationBuilder::GetNumArguments(Operation, (const void **)a2) != 1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"The op ", 7);
    uint64_t v9 = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v9);
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
    int v12 = *(char *)(v11 + 23);
    if (v12 >= 0) {
      uint64_t v13 = v11;
    }
    else {
      uint64_t v13 = *(void *)v11;
    }
    if (v12 >= 0) {
      uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
    }
    else {
      uint64_t v14 = *(void *)(v11 + 8);
    }
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    int v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" does not have exactly one argument bound to '", 46);
    int v17 = *(char *)(a2 + 23);
    if (v17 >= 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = *(void *)a2;
    }
    if (v17 >= 0) {
      uint64_t v19 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v19 = *(void *)(a2 + 8);
    }
    long long v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v18, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"' parameter. It has ", 20);
    long long v21 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" parameter(s).", 14);
    exception = __cxa_allocate_exception(0x18uLL);
    std::stringbuf::str();
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)v23);
  }
  uint64_t result = MIL::Builder::OperationBuilder::GetIRArgument(Operation, a2, 0);
  *a3 = Operation;
  a3[1] = result;
  return result;
}

void sub_20F407D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t MIL::Matching::MatchView::GetVariadicArgument@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, const void **a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  if (MIL::Builder::OperationBuilder::GetNumArguments(Operation, a2) <= a3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Argument index is out of range.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  uint64_t result = MIL::Builder::OperationBuilder::GetIRArgument(Operation, (uint64_t)a2, a3);
  *a4 = Operation;
  a4[1] = result;
  return result;
}

void sub_20F407E7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Matching::MatchView::TryGetAttribute@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);

  return MIL::Builder::OperationBuilder::TryGetAttribute(Operation, a2, a3);
}

unsigned __int8 *MIL::Matching::MatchView::GetAttribute@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  uint64_t result = MIL::Builder::OperationBuilder::TryGetAttribute(Operation, a2, a3);
  if (!*a3)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v9, "'.");
    std::string v10 = *v8;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)&v10);
  }
  return result;
}

void sub_20F407FA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      long long v25 = *(std::__shared_weak_count **)(v21 + 8);
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

uint64_t MIL::Matching::MatchView::GetAttributes(MIL::MatchingPrivate::MatchItem **this)
{
  uint64_t Operation = (MIL::Builder::OperationBuilder *)MIL::MatchingPrivate::MatchItem::GetOperation(*this);

  return MIL::Builder::OperationBuilder::GetAttributes(Operation);
}

void MIL::Matching::MatchView::SetAttribute(MIL::MatchingPrivate::MatchItem **a1, uint64_t a2, uint64_t *a3)
{
  uint64_t Operation = MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v9 = *(std::string *)a2;
  }
  long long v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Builder::OperationBuilder::SetAttribute(Operation, (uint64_t)&v9, &v7, &v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_20F4080F8(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  MIL::Builder::BlockBuilder::ReplaceUsesOfInputVariable((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::MatchView::GetLastEdge@<X0>(MIL::MatchingPrivate::MatchItem **this@<X0>, void *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::GetOperation(*this);
  *a2 = *((void *)*this + 2);
  return result;
}

uint64_t MIL::Matching::MatchView::GetOperation(MIL::MatchingPrivate::MatchItem **this)
{
  return MIL::MatchingPrivate::MatchItem::GetOperation(*this);
}

uint64_t MIL::Matching::MatchView::GetLength(MIL::MatchingPrivate::MatchItem **this)
{
  return MIL::MatchingPrivate::MatchItem::GetListLength(*this);
}

uint64_t MIL::MatchingPrivate::MatchItem::GetListLength(MIL::MatchingPrivate::MatchItem *this)
{
  if (!this || *((_DWORD *)this + 2) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "MatchView is not holding a List");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return *(void *)this;
}

void sub_20F4081C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t MIL::Matching::MatchView::operator[]@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  unint64_t result = MIL::MatchingPrivate::MatchItem::GetListLength(*a1);
  if (result <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "List index out of range");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  *a3 = (char *)*a1 + 32 * *((void *)*a1 + 3) + 32 * a2;
  return result;
}

void sub_20F408268(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::MatchView::AsArray<2ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 2uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  return result;
}

uint64_t MIL::MatchingPrivate::MatchItem::CheckArrayLength(MIL::MatchingPrivate::MatchItem *this, unint64_t a2)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::GetListLength(this);
  if (result != a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    long long v6 = this;
    uint64_t v7 = exception;
    unint64_t ListLength = MIL::MatchingPrivate::MatchItem::GetListLength(v6);
    std::to_string(&v18, ListLength);
    std::string v9 = std::string::insert(&v18, 0, "Length mismatch: tried to convert a list of ");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    uint64_t v11 = std::string::append(&v19, " elements to an array of length ");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v17, a2);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v17;
    }
    else {
      uint64_t v13 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v17.__r_.__value_.__l.__size_;
    }
    uint64_t v15 = std::string::append(&v20, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v7, &v21);
    v7->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v7, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_20F408410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

uint64_t MIL::Matching::MatchView::AsArray<3ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 3uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<4ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 4uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<5ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 5uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<6ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 6uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<7ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 7uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<8ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 8uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<9ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 9uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<10ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xAuLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<11ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xBuLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<12ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xCuLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<13ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xDuLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  a2[12] = v5 + 384;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<14ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xEuLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  a2[12] = v5 + 384;
  a2[13] = v5 + 416;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<15ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0xFuLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  a2[12] = v5 + 384;
  a2[13] = v5 + 416;
  a2[14] = v5 + 448;
  return result;
}

uint64_t MIL::Matching::MatchView::AsArray<16ul>@<X0>(MIL::MatchingPrivate::MatchItem **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = MIL::MatchingPrivate::MatchItem::CheckArrayLength(*a1, 0x10uLL);
  uint64_t v5 = (uint64_t)*a1 + 32 * *((void *)*a1 + 3);
  *a2 = v5;
  a2[1] = v5 + 32;
  a2[2] = v5 + 64;
  a2[3] = v5 + 96;
  a2[4] = v5 + 128;
  a2[5] = v5 + 160;
  a2[6] = v5 + 192;
  a2[7] = v5 + 224;
  a2[8] = v5 + 256;
  a2[9] = v5 + 288;
  a2[10] = v5 + 320;
  a2[11] = v5 + 352;
  a2[12] = v5 + 384;
  a2[13] = v5 + 416;
  a2[14] = v5 + 448;
  a2[15] = v5 + 480;
  return result;
}

__n128 MIL::Matching::ArgumentView::ArgumentView(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

__n128 MIL::Matching::ArgumentView::operator=(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t MIL::Matching::ArgumentView::GetType(MIL::Matching::ArgumentView *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(***((void ***)this + 1) + 40))(**((void **)this + 1));
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 32);
    return v3();
  }
  else
  {
    uint64_t OwningBlock = MIL::Builder::OperationBuilder::GetOwningBlock(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)this);
    uint64_t Name = MIL::IRArgument::GetName(**((MIL::IRArgument ***)this + 1));
    uint64_t result = MIL::Builder::BlockBuilder::GetType(OwningBlock, Name);
    if (!result)
    {
      exception = __cxa_allocate_exception(0x18uLL);
      MIL::IRArgument::GetName(**((MIL::IRArgument ***)this + 1));
      std::operator+<char>();
      uint64_t v8 = std::string::append(&v9, "' is unknown");
      std::string v10 = *v8;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)&v10);
    }
  }
  return result;
}

void sub_20F408CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::Matching::ArgumentView::TryGetName(MIL::Matching::ArgumentView *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 32))();
}

uint64_t MIL::Matching::ArgumentView::TryGetValue(MIL::Matching::ArgumentView *this)
{
  uint64_t v2 = (MIL::IRArgument **)*((void *)this + 1);
  uint64_t v3 = (*(uint64_t (**)(void))(*(void *)*v2 + 40))();
  if (!v3)
  {
    uint64_t OwningBlock = MIL::Builder::OperationBuilder::GetOwningBlock(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)this);
    uint64_t Name = (long long *)MIL::IRArgument::GetName(*v2);
    MIL::Builder::BlockBuilder::GetValue(OwningBlock, Name, &v7);
    uint64_t v3 = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return v3;
}

uint64_t MIL::Matching::ArgumentView::GetValue(MIL::Matching::ArgumentView *this)
{
  uint64_t result = MIL::Matching::ArgumentView::TryGetValue(this);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x18uLL);
    std::string::basic_string[abi:ne180100]<0>(v3, "Selected argument doesn't have a known value");
    MIL::Matching::InvalidMatchAccess::InvalidMatchAccess(exception, (uint64_t)v3);
  }
  return result;
}

void sub_20F408E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::Matching::ArgumentView::IsConnectedTo(MIL::Matching::ArgumentView *this, const MIL::Matching::OutputView *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***((void ***)this + 1) + 32))(**((void **)this + 1));
  if (result)
  {
    uint64_t v4 = (unsigned __int8 *)result;
    Outputuint64_t Name = MIL::Builder::OperationBuilder::GetOutputName(*(MIL::Builder::OperationBuilder::OperationBuilderImpl ***)a2, *((void *)a2 + 1));
    uint64_t v6 = v4[23];
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = v4[23];
    }
    else {
      uint64_t v7 = *((void *)v4 + 1);
    }
    uint64_t v8 = *(unsigned __int8 *)(OutputName + 23);
    int v9 = (char)v8;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(OutputName + 8);
    }
    if (v7 == v8)
    {
      if (v9 >= 0) {
        std::string v10 = (unsigned __int8 *)OutputName;
      }
      else {
        std::string v10 = *(unsigned __int8 **)OutputName;
      }
      if ((v6 & 0x80) != 0)
      {
        return memcmp(*(const void **)v4, v10, *((void *)v4 + 1)) == 0;
      }
      else if (v4[23])
      {
        uint64_t v11 = v6 - 1;
        do
        {
          int v13 = *v4++;
          int v12 = v13;
          int v15 = *v10++;
          int v14 = v15;
          BOOL v17 = v11-- != 0;
          uint64_t result = v12 == v14;
        }
        while (v12 == v14 && v17);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MIL::Matching::ArgumentView::IsSameVariableAs(MIL::Matching::ArgumentView *this, const MIL::Matching::ArgumentView *a2)
{
  uint64_t result = (*(uint64_t (**)(void))(***((void ***)this + 1) + 32))(**((void **)this + 1));
  if (result)
  {
    uint64_t v4 = (unsigned __int8 *)result;
    uint64_t result = (*(uint64_t (**)(void))(***((void ***)a2 + 1) + 32))(**((void **)a2 + 1));
    if (result)
    {
      uint64_t v5 = v4[23];
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v4[23];
      }
      else {
        uint64_t v6 = *((void *)v4 + 1);
      }
      uint64_t v7 = *(unsigned __int8 *)(result + 23);
      int v8 = (char)v7;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *(void *)(result + 8);
      }
      if (v6 == v7)
      {
        if (v8 >= 0) {
          int v9 = (unsigned __int8 *)result;
        }
        else {
          int v9 = *(unsigned __int8 **)result;
        }
        if ((v5 & 0x80) != 0)
        {
          return memcmp(*(const void **)v4, v9, *((void *)v4 + 1)) == 0;
        }
        else if (v4[23])
        {
          uint64_t v10 = v5 - 1;
          do
          {
            int v12 = *v4++;
            int v11 = v12;
            int v14 = *v9++;
            int v13 = v14;
            BOOL v16 = v10-- != 0;
            uint64_t result = v11 == v13;
          }
          while (v11 == v13 && v16);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MIL::Matching::ArgumentView::IsSameValueAs(MIL::Matching::ArgumentView *this, const MIL::Matching::ArgumentView *a2)
{
  uint64_t Value = MIL::Matching::ArgumentView::TryGetValue(this);
  if (!Value) {
    return 0;
  }
  uint64_t v4 = Value;
  uint64_t v5 = MIL::Matching::ArgumentView::TryGetValue(a2);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 16);

  return v6(v4, v5);
}

uint64_t MIL::Matching::ArgumentView::IsSameAs(MIL::Matching::ArgumentView *this, const MIL::Matching::ArgumentView *a2)
{
  if (MIL::Matching::ArgumentView::IsSameVariableAs(this, a2)) {
    return 1;
  }

  return MIL::Matching::ArgumentView::IsSameValueAs(this, a2);
}

void *MIL::Matching::EdgeView::EdgeView(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

{
  *uint64_t result = *a2;
  return result;
}

{
  *uint64_t result = *a2;
  return result;
}

{
  *uint64_t result = *a2;
  return result;
}

void *MIL::Matching::EdgeView::operator=(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

{
  *uint64_t result = *a2;
  return result;
}

BOOL MIL::Matching::EdgeView::IsPresent(MIL::Matching::EdgeView *this)
{
  return *(void *)this != 0;
}

uint64_t MIL::Matching::EdgeView::GetProducerOutputIndex(MIL::Matching::EdgeView *this)
{
  DataDependency = (MIL::Builder::DataDependency *)MIL::Matching::EdgeView::EdgeViewImpl::GetDataDependency(this);

  return MIL::Builder::DataDependency::GetProducerOutputIndex(DataDependency);
}

uint64_t MIL::Matching::EdgeView::EdgeViewImpl::GetDataDependency(MIL::Matching::EdgeView::EdgeViewImpl *this)
{
  uint64_t result = *(void *)this;
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Attempted to access an absent edge");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_20F40923C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Matching::EdgeView::GetConsumerParameterName(MIL::Matching::EdgeView *this)
{
  DataDependency = (MIL::Builder::DataDependency *)MIL::Matching::EdgeView::EdgeViewImpl::GetDataDependency(this);

  return MIL::Builder::DataDependency::GetConsumerParameterName(DataDependency);
}

uint64_t MIL::Matching::EdgeView::GetConsumerArgumentIndex(MIL::Matching::EdgeView *this)
{
  DataDependency = (MIL::Builder::DataDependency *)MIL::Matching::EdgeView::EdgeViewImpl::GetDataDependency(this);
  return MIL::Builder::DataDependency::GetConsumerArgumentIndex(DataDependency);
}

void MIL::Matching::Match::Match(MIL::Matching::Match *this)
{
}

void sub_20F409348(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Match::Match(MIL::Matching::Match *this, const MIL::Matching::Match *a2)
{
}

void sub_20F4093D4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Matching::Match::Match(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  *uint64_t result = v2;
  return result;
}

char **MIL::Matching::Match::operator=(char **a1, char ***a2)
{
  uint64_t v3 = *a1;
  if (v3 != (char *)*a2) {
    std::vector<MIL::MatchingPrivate::MatchItem>::__assign_with_size[abi:ne180100]<MIL::MatchingPrivate::MatchItem*,MIL::MatchingPrivate::MatchItem*>(v3, **a2, (uint64_t)(*a2)[1], ((*a2)[1] - **a2) >> 5);
  }
  return a1;
}

uint64_t *MIL::Matching::Match::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)a1, v4);
  }
  return a1;
}

void MIL::Matching::Match::~Match(MIL::Matching::Match *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

uint64_t MIL::Matching::Match::GetRootView@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)this + 8) - 32;
  return this;
}

void MIL::MatchingPrivate::MatchConverter::MatchConverter(MIL::MatchingPrivate::MatchConverter *this)
{
}

void MIL::MatchingPrivate::MatchConverter::~MatchConverter(MIL::MatchingPrivate::MatchConverter *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<MIL::MatchingPrivate::MatchConverter::MatchConverterImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

uint64_t *MIL::MatchingPrivate::MatchConverter::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v4 = *a1;
  *a1 = v3;
  if (v4) {
    std::default_delete<MIL::MatchingPrivate::MatchConverter::MatchConverterImpl>::operator()[abi:ne180100]((uint64_t)a1, v4);
  }
  return a1;
}

void MIL::MatchingPrivate::MatchConverter::ConvertMatch(uint64_t ***a1, unint64_t a2, void *a3, uint64_t *a4)
{
  uint64_t v6 = *a1;
  int v8 = (char **)(*a1 + 3);
  uint64_t v7 = *v8;
  v6[1] = **a1;
  void v6[4] = (uint64_t *)v7;
  uint64_t v9 = *a4;
  std::vector<MIL::MatchingPrivate::MatchItem>::resize(*a4, 1uLL);
  if (a2)
  {
    long long v60 = (unint64_t *)(v6 + 5);
    do
    {
      MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::AssertChunkIsAllocated((uint64_t)a3, a2 & 0xFFFFFFFFFFFFFFLL);
      uint64_t v10 = *(void *)(*a3 + ((a2 >> 3) & 0x1FFFFFFFFFFFF8)) + 160 * (a2 & 0x3F) + 24 * HIBYTE(a2);
      uint64_t v11 = v10 - 24;
      int v12 = *(_DWORD *)(v10 - 16);
      if (v12)
      {
        if (v12 == 1)
        {
          std::string v20 = v6[1];
          unint64_t v21 = (unint64_t)v6[4];
          uint64_t v22 = (uint64_t)(v21 - (void)v6[3]) >> 5;
          if (*v6 != v20)
          {
            v22 -= *(v20 - 1);
            v6[1] = v20 - 1;
          }
          unint64_t v24 = *(void **)v9;
          uint64_t v23 = *(void *)(v9 + 8);
          for (uint64_t i = v22; i; --i)
          {
            PushItem((long long *)(v21 - 32), (void **)v9);
            unint64_t v21 = (unint64_t)(v6[4] - 4);
            void v6[4] = (uint64_t *)v21;
          }
          uint64_t v26 = (v23 - (uint64_t)v24) >> 5;
          long long v62 = *(_OWORD *)v11;
          uint64_t v64 = *(void *)(v11 + 16);
          if (v21 >= *v60)
          {
            uint64_t v40 = (uint64_t)(v21 - (void)*v8) >> 5;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 59) {
LABEL_70:
            }
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            uint64_t v42 = *v60 - (void)*v8;
            if (v42 >> 4 > v41) {
              unint64_t v41 = v42 >> 4;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v43 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43) {
              uint64_t v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)v60, v43);
            }
            else {
              uint64_t v44 = 0;
            }
            int v53 = &v44[32 * v40];
            *(_OWORD *)int v53 = v62;
            *((void *)v53 + 2) = v64;
            *((void *)v53 + 3) = v26;
            long long v55 = v6[3];
            long long v54 = (char *)v6[4];
            int v56 = v53;
            if (v54 != (char *)v55)
            {
              do
              {
                long long v57 = *((_OWORD *)v54 - 1);
                *((_OWORD *)v56 - 2) = *((_OWORD *)v54 - 2);
                *((_OWORD *)v56 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v57;
                v56 -= 32;
                v54 -= 32;
              }
              while (v54 != (char *)v55);
              long long v54 = *v8;
            }
            unint64_t v28 = (unint64_t)(v53 + 32);
            void v6[3] = (uint64_t *)v56;
            void v6[4] = (uint64_t *)(v53 + 32);
            uint64_t v6[5] = (uint64_t *)&v44[32 * v43];
            if (v54) {
              operator delete(v54);
            }
          }
          else
          {
            uint64_t v27 = *(void *)(v11 + 16);
            *(_OWORD *)unint64_t v21 = *(_OWORD *)v11;
            *(void *)(v21 + 16) = v27;
            *(void *)(v21 + 24) = v26;
            unint64_t v28 = v21 + 32;
          }
          void v6[4] = (uint64_t *)v28;
          if (*(_DWORD *)(v28 - 24) != 1) {
            *(_DWORD *)(v28 - 24) = 1;
          }
          *(void *)(v28 - 32) = v22;
        }
        else
        {
          if (v12 != 2)
          {
            exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(exception, "Trying to visit a std::variant that is in an invalid state");
            goto LABEL_69;
          }
          uint64_t v13 = ((char *)v6[4] - (char *)v6[3]) >> 5;
          int v15 = v6[1];
          unint64_t v14 = (unint64_t)v6[2];
          if ((unint64_t)v15 >= v14)
          {
            uint64_t v29 = *v6;
            uint64_t v30 = v15 - *v6;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v32 = v14 - (void)v29;
            if (v32 >> 2 > v31) {
              unint64_t v31 = v32 >> 2;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v33 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              int v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(v6 + 2), v33);
              uint64_t v29 = *v6;
              int v15 = v6[1];
            }
            else
            {
              int v34 = 0;
            }
            uint64_t v45 = (uint64_t *)&v34[8 * v30];
            *uint64_t v45 = v13;
            std::string v46 = v45 + 1;
            while (v15 != v29)
            {
              uint64_t v47 = *--v15;
              *--uint64_t v45 = v47;
            }
            *uint64_t v6 = v45;
            v6[1] = v46;
            v6[2] = (uint64_t *)&v34[8 * v33];
            if (v29) {
              operator delete(v29);
            }
            v6[1] = v46;
          }
          else
          {
            *int v15 = v13;
            v6[1] = v15 + 1;
          }
        }
      }
      else
      {
        long long v61 = *(_OWORD *)v11;
        uint64_t v63 = *(void *)(v11 + 16);
        BOOL v16 = v6[4];
        BOOL v17 = v6[5];
        if (v16 >= v17)
        {
          uint64_t v35 = ((char *)v16 - *v8) >> 5;
          unint64_t v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 59) {
            goto LABEL_70;
          }
          uint64_t v37 = (char *)v17 - *v8;
          if (v37 >> 4 > v36) {
            unint64_t v36 = v37 >> 4;
          }
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v38 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v36;
          }
          if (v38) {
            long long v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)v60, v38);
          }
          else {
            long long v39 = 0;
          }
          char v48 = &v39[32 * v35];
          *(_OWORD *)char v48 = v61;
          *((void *)v48 + 2) = v63;
          *((void *)v48 + 3) = 0;
          std::string v50 = v6[3];
          int v49 = (char *)v6[4];
          int v51 = v48;
          if (v49 != (char *)v50)
          {
            do
            {
              long long v52 = *((_OWORD *)v49 - 1);
              *((_OWORD *)v51 - 2) = *((_OWORD *)v49 - 2);
              *((_OWORD *)v51 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v52;
              v51 -= 32;
              v49 -= 32;
            }
            while (v49 != (char *)v50);
            int v49 = *v8;
          }
          std::string v19 = v48 + 32;
          void v6[3] = (uint64_t *)v51;
          void v6[4] = (uint64_t *)(v48 + 32);
          uint64_t v6[5] = (uint64_t *)&v39[32 * v38];
          if (v49) {
            operator delete(v49);
          }
        }
        else
        {
          uint64_t v18 = *(void *)(v11 + 16);
          *(_OWORD *)BOOL v16 = *(_OWORD *)v11;
          v16[2] = v18;
          void v16[3] = 0;
          std::string v19 = (char *)(v16 + 4);
        }
        void v6[4] = (uint64_t *)v19;
      }
      a2 = MIL::Matching::PersistentListArena<MIL::Matching::MatchToken,6ul,6ul>::Pop(a3, a2);
    }
    while (a2);
  }
  uint64_t v58 = (long long *)v6[3];
  if ((char *)v6[4] - (char *)v58 != 32)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Malformed match token string");
LABEL_69:
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }

  PushItem(v58, (void **)v9);
}

void sub_20F409A50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<MIL::MatchingPrivate::MatchItem>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<MIL::MatchingPrivate::MatchItem>::__append((void **)a1, a2 - v2);
  }
}

void PushItem(long long *a1, void **a2)
{
  uint64_t v5 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  uint64_t v6 = v4 - (unsigned char *)*a2;
  uint64_t v7 = *((void *)a1 + 3) - (v6 >> 5);
  long long v24 = *a1;
  uint64_t v25 = *((void *)a1 + 2);
  uint64_t v8 = (uint64_t)(a2 + 2);
  uint64_t v9 = (char *)a2[2];
  if (v4 >= v9)
  {
    uint64_t v13 = v6 >> 5;
    unint64_t v14 = (v6 >> 5) + 1;
    if (v14 >> 59) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v15 = v9 - v5;
    unint64_t v16 = (v9 - v5) >> 4;
    if (v16 > v14) {
      unint64_t v14 = v16;
    }
    if (v15 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v8, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    std::string v19 = &v18[32 * v13];
    std::string v20 = &v18[32 * v17];
    *(_OWORD *)std::string v19 = v24;
    *((void *)v19 + 2) = v25;
    *((void *)v19 + 3) = v7;
    int v12 = v19 + 32;
    uint64_t v22 = (char *)*a2;
    unint64_t v21 = (char *)a2[1];
    if (v21 != *a2)
    {
      do
      {
        long long v23 = *((_OWORD *)v21 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v21 - 2);
        *((_OWORD *)v19 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v23;
        v19 -= 32;
        v21 -= 32;
      }
      while (v21 != v22);
      unint64_t v21 = (char *)*a2;
    }
    *a2 = v19;
    a2[1] = v12;
    a2[2] = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    long long v10 = *a1;
    uint64_t v11 = *((void *)a1 + 2);
    *(_OWORD *)uint64_t v4 = v10;
    *((void *)v4 + 2) = v11;
    *((void *)v4 + 3) = v7;
    int v12 = v4 + 32;
  }
  a2[1] = v12;
}

uint64_t MIL::MatchingPrivate::MatchPrivate::GetOperation(MIL::MatchingPrivate::MatchItem **a1)
{
  return MIL::MatchingPrivate::MatchItem::GetOperation(*a1);
}

uint64_t MIL::MatchingPrivate::MatchPrivate::GetIRArgumentFromArgumentView@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(uint64_t **)(this + 8);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  *a2 = v5;
  a2[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void MIL::MatchingPrivate::MatchPrivate::GetAllMatchedOperations(uint64_t ***a1, void **a2)
{
  unint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  if (v2 != v3)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    do
    {
      if (v2)
      {
        if (!*((_DWORD *)v2 + 2))
        {
          uint64_t v6 = *v2;
          if (*v2)
          {
            uint64_t v8 = a2[1];
            unint64_t v7 = (unint64_t)a2[2];
            if ((unint64_t)v8 >= v7)
            {
              uint64_t v10 = ((char *)v8 - (unsigned char *)*a2) >> 3;
              if ((unint64_t)(v10 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v11 = v7 - (void)*a2;
              uint64_t v12 = v11 >> 2;
              if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
                uint64_t v12 = v10 + 1;
              }
              if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v13 = v12;
              }
              if (v13)
              {
                unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v5, v13);
                uint64_t v6 = *v2;
              }
              else
              {
                unint64_t v14 = 0;
              }
              unint64_t v15 = &v14[8 * v10];
              *(void *)unint64_t v15 = v6;
              uint64_t v9 = v15 + 8;
              unint64_t v17 = (char *)*a2;
              unint64_t v16 = (char *)a2[1];
              if (v16 != *a2)
              {
                do
                {
                  uint64_t v18 = *((void *)v16 - 1);
                  v16 -= 8;
                  *((void *)v15 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v18;
                  v15 -= 8;
                }
                while (v16 != v17);
                unint64_t v16 = (char *)*a2;
              }
              *a2 = v15;
              a2[1] = v9;
              a2[2] = &v14[8 * v13];
              if (v16) {
                operator delete(v16);
              }
            }
            else
            {
              *uint64_t v8 = v6;
              uint64_t v9 = v8 + 1;
            }
            a2[1] = v9;
          }
        }
      }
      v2 += 4;
    }
    while (v2 != v3);
  }
}

uint64_t MIL::MatchingPrivate::MatchPrivate::GetOperationAndOutputIndex(MIL::MatchingPrivate::MatchPrivate *this, const MIL::Matching::OutputView *a2)
{
  return *(void *)this;
}

void std::__shared_ptr_emplace<MIL::Matching::InvalidMatchAccess::InvalidMatchAccessImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2595C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::InvalidMatchAccess::InvalidMatchAccessImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2595C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<MIL::Matching::InvalidMatchAccess::InvalidMatchAccessImpl>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void std::default_delete<MIL::Matching::Match::MatchImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x21056C700);
  }
}

char *std::vector<MIL::MatchingPrivate::MatchItem>::__assign_with_size[abi:ne180100]<MIL::MatchingPrivate::MatchItem*,MIL::MatchingPrivate::MatchItem*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  unint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *unint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<MIL::MatchingPrivate::MatchItem>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      std::string v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    std::string v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *std::vector<MIL::MatchingPrivate::MatchItem>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void std::default_delete<MIL::MatchingPrivate::MatchConverter::MatchConverterImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(void *)(a2 + 32) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x21056C700);
  }
}

void std::vector<MIL::MatchingPrivate::MatchItem>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::function<void ()(MIL::Transform::ProgramTransformer &)>>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[32 * v10];
    unint64_t v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    unint64_t v16 = &v14[32 * a2];
    uint64_t v18 = (char *)*a1;
    size_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      size_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void MIL::Matching::Matcher::Matcher(MIL::Matching::Matcher *this, MIL::Builder::BlockBuilder *a2, MIL::Builder::OperationBuilder *a3, const MIL::Matching::CompiledPattern *a4)
{
}

void sub_20F40A134(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x1062C40F7BBE452);
  _Unwind_Resume(a1);
}

void MIL::Matching::Matcher::~Matcher(MIL::Matching::Matcher *this)
{
  uint64_t v1 = *(unsigned char **)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<MIL::Matching::Matcher::MatcherImpl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

uint64_t MIL::Matching::Matcher::Reset(MIL::Matching::Matcher *this, MIL::Builder::BlockBuilder *a2, MIL::Builder::OperationBuilder *a3, const MIL::Matching::CompiledPattern *a4)
{
  std::optional<MIL::Matching::CompiledPattern>::operator=[abi:ne180100]<MIL::Matching::CompiledPattern const&,void>(*(void *)this, (uint64_t *)a4);
  unint64_t v7 = *(MIL::MatchingPrivate::CompiledPatternPrivate **)this;
  uint64_t v8 = (MIL::Matching::Machine *)(*(void *)this + 24);
  FirstInstruction = (const MIL::Matching::Instruction *)MIL::MatchingPrivate::CompiledPatternPrivate::GetFirstInstruction(v7, v9);

  return MIL::Matching::Machine::Reset(v8, FirstInstruction, a2, a3);
}

uint64_t std::optional<MIL::Matching::CompiledPattern>::operator=[abi:ne180100]<MIL::Matching::CompiledPattern const&,void>(uint64_t a1, uint64_t *a2)
{
  if (*(unsigned char *)(a1 + 16))
  {
    MIL::Matching::CompiledPattern::operator=((void *)a1, a2);
  }
  else
  {
    MIL::Matching::CompiledPattern::CompiledPattern((void *)a1, a2);
    *(unsigned char *)(a1 + 16) = 1;
  }
  return a1;
}

uint64_t MIL::Matching::Matcher::FindNextMatch(uint64_t a1, uint64_t *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a3)
{
  int NextMatch = MIL::Matching::Machine::FindNextMatch((MIL::Matching::Machine::MachineImpl **)(*(void *)a1 + 24), a2, a3);
  if (NextMatch == 2) {
    return 2;
  }
  else {
    return NextMatch == 1;
  }
}

MIL::Matching::Matcher::MatcherImpl *MIL::Matching::Matcher::MatcherImpl::MatcherImpl(MIL::Matching::Matcher::MatcherImpl *this, const MIL::Matching::CompiledPattern *a2, MIL::Builder::BlockBuilder *a3, MIL::Builder::OperationBuilder *a4)
{
  unint64_t v7 = (MIL::MatchingPrivate::CompiledPatternPrivate *)MIL::Matching::CompiledPattern::CompiledPattern(this, a2);
  *((unsigned char *)v7 + 16) = 1;
  FirstInstruction = (const MIL::Matching::Instruction *)MIL::MatchingPrivate::CompiledPatternPrivate::GetFirstInstruction(v7, v8);
  MIL::Matching::Machine::Machine((MIL::Matching::Matcher::MatcherImpl *)((char *)this + 24), FirstInstruction, a3, a4);
  return this;
}

void sub_20F40A2CC(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 16)) {
    MIL::Matching::CompiledPattern::~CompiledPattern(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::default_delete<MIL::Matching::Matcher::MatcherImpl>::operator()[abi:ne180100](uint64_t a1, unsigned char *a2)
{
  if (a2)
  {
    MIL::Matching::Machine::~Machine((MIL::Matching::Machine *)(a2 + 24));
    if (a2[16]) {
      MIL::Matching::CompiledPattern::~CompiledPattern((MIL::Matching::CompiledPattern *)a2);
    }
    JUMPOUT(0x21056C700);
  }
}

Pattern *MIL::Matching::Pattern::Pattern(Pattern *this, const Pattern *a2)
{
  Pattern v2 = a2[1];
  *this = *a2;
  this[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *MIL::Matching::Pattern::Pattern(void *this, const MIL::Matching::Pattern *a2)
{
  uint64_t v2 = *((void *)a2 + 1);
  *this = *(void *)a2;
  this[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *MIL::Matching::Pattern::operator=(void *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

void MIL::Matching::Pattern::~Pattern(MIL::Matching::Pattern *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t MIL::Matching::Pattern::DebugString(MIL::Matching::Pattern *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 24))();
}

void MIL::Matching::Pattern::PatternImpl::OperationPredicate::DebugString(std::string *a1@<X8>)
{
  std::operator+<char>();
  uint64_t v3 = std::string::append(&v4, ")");
  *a1 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_20F40A4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 MIL::Matching::Op@<Q0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  std::string v4 = (__n128 *)operator new(0x38uLL);
  v4->n128_u64[1] = 0;
  v4[1].n128_u64[0] = 0;
  v4->n128_u64[0] = (unint64_t)&unk_26C2598D8;
  v4[1].n128_u64[1] = (unint64_t)&unk_26C259650;
  __n128 result = *a1;
  void v4[2] = *a1;
  v4[3].n128_u64[0] = a1[1].n128_u64[0];
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  *a2 = (char *)v4 + 24;
  a2[1] = v4;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::Maybe::DebugString(MIL::Matching::Pattern::PatternImpl::Maybe *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 24))(&v6);
  uint64_t v3 = std::string::insert(&v6, 0, "Maybe(");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_20F40A63C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double MIL::Matching::Maybe@<D0>(MIL::Matching *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Maybe,std::allocator<MIL::Matching::Pattern::PatternImpl::Maybe>,MIL::Matching::Pattern const&,void>((uint64_t *)this, v5);
  double result = v5[0];
  *a2 = *(_OWORD *)v5;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::ZeroOrMore::DebugString(MIL::Matching::Pattern::PatternImpl::ZeroOrMore *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 24))(&v6);
  uint64_t v3 = std::string::insert(&v6, 0, "ZeroOrMore(");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_20F40A778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double MIL::Matching::ZeroOrMore@<D0>(MIL::Matching *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::ZeroOrMore,std::allocator<MIL::Matching::Pattern::PatternImpl::ZeroOrMore>,MIL::Matching::Pattern const&,void>((uint64_t *)this, v5);
  double result = v5[0];
  *a2 = *(_OWORD *)v5;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::OneOrMore::DebugString(MIL::Matching::Pattern::PatternImpl::OneOrMore *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 24))(&v6);
  uint64_t v3 = std::string::insert(&v6, 0, "OneOrMore(");
  long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  uint64_t v5 = std::string::append(&v7, ")");
  *a2 = *v5;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
}

void sub_20F40A8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

double MIL::Matching::OneOrMore@<D0>(MIL::Matching *this@<X0>, _OWORD *a2@<X8>)
{
  std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::OneOrMore,std::allocator<MIL::Matching::Pattern::PatternImpl::OneOrMore>,MIL::Matching::Pattern const&,void>((uint64_t *)this, v5);
  double result = v5[0];
  *a2 = *(_OWORD *)v5;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::Chain::DebugString(MIL::Matching::Pattern::PatternImpl::Chain *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 1) + 24))(&v11);
  long long v4 = std::string::append(&v11, " >> ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr))(**((void **)this + 3) + 24))(__p);
  if ((v10 & 0x80u) == 0) {
    std::string v6 = __p;
  }
  else {
    std::string v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_20F40AA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double MIL::Matching::operator>>@<D0>(uint64_t *a1@<X0>, void *a2@<X1>, _OWORD *a3@<X8>)
{
  std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Chain,std::allocator<MIL::Matching::Pattern::PatternImpl::Chain>,MIL::Matching::Pattern const&,MIL::Matching::Pattern const&,void>(a1, a2, v5);
  double result = v5[0];
  *a3 = *(_OWORD *)v5;
  return result;
}

void MIL::Matching::Pattern::PatternImpl::Via::DebugString(std::string *a1@<X8>)
{
  std::operator+<char>();
  uint64_t v3 = std::string::append(&v4, ")");
  *a1 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_20F40AB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Via(uint64_t a1@<X0>, void *a2@<X8>)
{
  v11[4] = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  std::string v4 = operator new(0x58uLL);
  v4[1] = 0;
  void v4[2] = 0;
  *std::string v4 = &unk_26C259A68;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v9 = *(std::string *)a1;
  }
  v10[0] = __p.__r_.__value_.__l.__size_;
  std::string::size_type v5 = __p.__r_.__value_.__r.__words[0];
  *(void *)((char *)v10 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v6 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  std::string::size_type v7 = operator new(0x20uLL);
  *std::string::size_type v7 = &unk_26C259AB8;
  v7[1] = v5;
  v7[2] = v10[0];
  *(void *)((char *)v7 + 23) = *(void *)((char *)v10 + 7);
  *((unsigned char *)v7 + 3std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v6;
  v11[3] = v7;
  MIL::Matching::Pattern::PatternImpl::Via::Via((uint64_t)(v4 + 3), (long long *)&v9, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100](v11);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  *a2 = v4 + 3;
  a2[1] = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20F40ACDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__shared_weak_count::~__shared_weak_count(v24);
  operator delete(v26);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *MIL::Matching::Pattern::PatternImpl::Parallel::DebugString@<X0>(MIL::Matching::Pattern::PatternImpl::Parallel *this@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a2, "Parallel(");
  uint64_t v4 = *((void *)this + 1);
  if (*((void *)this + 2) != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      if (v6)
      {
        std::string::append(a2, ", ");
        uint64_t v4 = *((void *)this + 1);
      }
      (*(void (**)(void **__return_ptr))(**(void **)(v4 + v5) + 24))(__p);
      if ((v11 & 0x80u) == 0) {
        std::string::size_type v7 = __p;
      }
      else {
        std::string::size_type v7 = (void **)__p[0];
      }
      if ((v11 & 0x80u) == 0) {
        std::string::size_type v8 = v11;
      }
      else {
        std::string::size_type v8 = (std::string::size_type)__p[1];
      }
      std::string::append(a2, (const std::string::value_type *)v7, v8);
      if ((char)v11 < 0) {
        operator delete(__p[0]);
      }
      ++v6;
      uint64_t v4 = *((void *)this + 1);
      v5 += 16;
    }
    while (v6 < (*((void *)this + 2) - v4) >> 4);
  }
  return std::string::append(a2, ")");
}

void sub_20F40AE4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

double MIL::Matching::Parallel@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (a2) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0;
  }
  v6[0] = v4;
  v6[1] = a2;
  std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Parallel,std::allocator<MIL::Matching::Pattern::PatternImpl::Parallel>,MIL::Util::Span<MIL::Matching::Pattern const,18446744073709551615ul>,void>((uint64_t)v6, v7);
  double result = v7[0];
  *a3 = *(_OWORD *)v7;
  return result;
}

uint64_t MIL::MatchingPrivate::PatternPrivate::CompilePattern(uint64_t (****this)(void), const MIL::Matching::Pattern *a2, MIL::Matching::InstructionBuilder *a3, MIL::MILContext *a4)
{
  (*(void (**)(const MIL::Matching::Pattern *))(*(void *)a2 + 48))(a2);
  uint64_t v8 = 0;
  std::string v9 = a3;
  unsigned __int8 v10 = a2;
  return (***this)();
}

uint64_t MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a3 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::size_type v7 = *(void **)(a1 + 8);
    size_t v8 = *(void *)(a1 + 16);
  }
  else
  {
    std::string::size_type v7 = (void *)(a1 + 8);
    size_t v8 = *(unsigned __int8 *)(a1 + 31);
  }
  MIL::Matching::GetOperatorsByQualifiedName(v6, v7, v8, (uint64_t)v15);
  std::string v9 = *(uint64_t (****)(void, void *, uint64_t))(a3 + 16);
  std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set((uint64_t)v14, (uint64_t)v15);
  size_t v17 = 0;
  unsigned __int8 v10 = operator new(0x30uLL);
  *unsigned __int8 v10 = &unk_26C259848;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v10 + 1), v14);
  size_t v17 = v10;
  uint64_t v11 = (**v9)(v9, v16, a2);
  std::__function::__value_func<BOOL ()(MIL::Builder::OperationBuilder &)>::~__value_func[abi:ne180100](v16);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v14);
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 == 1)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "TODO");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a3 + 16) + 24))(*(void *)(a3 + 16), v11);
  }
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v15);
  return v11;
}

void sub_20F40B130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void MIL::Matching::Pattern::PatternImpl::OperationPredicate::~OperationPredicate(void **this)
{
  *this = &unk_26C259650;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C259650;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Matching::Pattern::PatternImpl::Maybe::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (***(uint64_t (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v6 = *(void *)(a3 + 16);
  std::string __p = 0;
  LODWORD(v13) = 0;
  uint64_t v7 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v6 + 8))(v6, &__p, a2);
  uint64_t v8 = *(void *)(a3 + 16);
  std::string v9 = operator new(0x10uLL);
  unint64_t v13 = v9 + 2;
  unint64_t v14 = v9 + 2;
  *std::string v9 = v5;
  v9[1] = v7;
  std::string __p = v9;
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v8 + 32))(v8, &__p);
  if (__p)
  {
    unint64_t v13 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_20F40B338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Pattern::PatternImpl::Maybe::~Maybe(MIL::Matching::Pattern::PatternImpl::Maybe *this)
{
  *(void *)this = &unk_26C259698;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C259698;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Matching::Pattern::PatternImpl::ZeroOrMore::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  LODWORD(v14) = 2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 8))(v5, &__p, a2);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = operator new(0x10uLL);
  unint64_t v14 = v8 + 2;
  uint64_t v15 = v8 + 2;
  *uint64_t v8 = 0;
  v8[1] = v6;
  std::string __p = v8;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, &__p);
  if (__p)
  {
    unint64_t v14 = __p;
    operator delete(__p);
  }
  uint64_t v10 = (***(uint64_t (****)(void, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 8), v9, a3);
  (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(a3 + 16) + 40))(*(void *)(a3 + 16), v9, 0, v10);
  uint64_t v11 = *(void *)(a3 + 16);
  std::string __p = 0;
  LODWORD(v14) = 1;
  return (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 8))(v11, &__p, v9);
}

void sub_20F40B578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Pattern::PatternImpl::ZeroOrMore::~ZeroOrMore(MIL::Matching::Pattern::PatternImpl::ZeroOrMore *this)
{
  *(void *)this = &unk_26C2596E0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C2596E0;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Matching::Pattern::PatternImpl::OneOrMore::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  LODWORD(v14) = 2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v5 + 8))(v5, &__p, a2);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = operator new(0x10uLL);
  unint64_t v14 = v8 + 2;
  uint64_t v15 = v8 + 2;
  *uint64_t v8 = 0;
  v8[1] = v6;
  std::string __p = v8;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v7 + 32))(v7, &__p);
  if (__p)
  {
    unint64_t v14 = __p;
    operator delete(__p);
  }
  uint64_t v10 = (***(uint64_t (****)(void, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 8), v9, a3);
  (*(void (**)(void, uint64_t, void, uint64_t))(**(void **)(a3 + 16) + 40))(*(void *)(a3 + 16), v9, 0, v10);
  uint64_t v11 = *(void *)(a3 + 16);
  std::string __p = 0;
  LODWORD(v14) = 1;
  return (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(void *)v11 + 8))(v11, &__p, v10);
}

void sub_20F40B7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Matching::Pattern::PatternImpl::OneOrMore::~OneOrMore(MIL::Matching::Pattern::PatternImpl::OneOrMore *this)
{
  *(void *)this = &unk_26C259728;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C259728;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Matching::Pattern::PatternImpl::Chain::Compile(uint64_t (****a1)(void, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  int v13 = 2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 8))(v5, &v12, a2);
  do
  {
    uint64_t v6 = (**a1[3])(a1[3], v6, a3);
    uint64_t v7 = a1[1];
    uint64_t v8 = (uint64_t (**)(void *, uint64_t, uint64_t))*v7;
  }
  while (a1);
  uint64_t v9 = (*v8)(v7, v6, a3);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v12 = 0;
  int v13 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v10 + 8))(v10, &v12, v9);
}

void MIL::Matching::Pattern::PatternImpl::Chain::~Chain(MIL::Matching::Pattern::PatternImpl::Chain *this)
{
  *(void *)this = &unk_26C259770;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C259770;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Matching::Pattern::PatternImpl::Via::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a3 + 16);
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100]((uint64_t)v7, a1 + 32);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void *, uint64_t))(*(void *)v4 + 16))(v4, v7, a2);
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100](v7);
  return v5;
}

void sub_20F40BB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void MIL::Matching::Pattern::PatternImpl::Via::~Via(MIL::Matching::Pattern::PatternImpl::Via *this)
{
  *(void *)this = &unk_26C2597B8;
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100]((void *)this + 4);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C2597B8;
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::~__value_func[abi:ne180100]((void *)this + 4);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Matching::Pattern::PatternImpl::Parallel::Compile(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) - *(void *)(a1 + 8) <= 0x1FuLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "At least two branches must be specified for Parallel() pattern");
    uint64_t v10 = (struct type_info *)off_26412C1F0;
    uint64_t v11 = (void (*)(void *))MEMORY[0x263F8C080];
LABEL_12:
    __cxa_throw(exception, v10, v11);
  }
  uint64_t v5 = *(void *)(a3 + 16);
  void v20[2] = 2;
  uint64_t v6 = (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t))(*(void *)v5 + 8))(v5, v20, a2);
  uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(a3 + 16) + 48))(*(void *)(a3 + 16));
  uint64_t result = (***(uint64_t (****)(void))(*(void *)(a1 + 16) - 16))();
  if (*(_DWORD *)a3)
  {
    if (*(_DWORD *)a3 == 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error((std::runtime_error *)exception, "TODO");
      uint64_t v10 = (struct type_info *)MEMORY[0x263F8C1F0];
      uint64_t v11 = (void (*)(void *))MEMORY[0x263F8C070];
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = result;
    int v13 = *(void **)(a1 + 8);
    uint64_t v14 = (uint64_t)(*(void *)(a1 + 16) - (void)v13) >> 4;
    uint64_t v15 = v14 - 2;
    if (v14 != 2)
    {
      uint64_t v16 = 16 * v14 - 32;
      do
      {
        uint64_t v17 = (***(uint64_t (****)(void, uint64_t, uint64_t))(*(void *)(a1 + 8) + v16))(*(void *)(*(void *)(a1 + 8) + v16), v7, a3);
        uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a3 + 16) + 64))(*(void *)(a3 + 16), v17, v12, v7);
        v16 -= 16;
        --v15;
      }
      while (v15);
      int v13 = *(void **)(a1 + 8);
    }
    uint64_t v18 = (**(uint64_t (***)(void, uint64_t, uint64_t))*v13)(*v13, v7, a3);
    uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(**(void **)(a3 + 16) + 64))(*(void *)(a3 + 16), v18, v12, v6);
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(a3 + 16) + 56))(*(void *)(a3 + 16), v19);
  }
  return result;
}

void sub_20F40BEF8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Matching::Pattern::PatternImpl::Parallel::~Parallel(MIL::Matching::Pattern::PatternImpl::Parallel *this)
{
  *(void *)this = &unk_26C259800;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26C259800;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x21056C700](this, 0xA1C4030951706);
}

uint64_t std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<std::shared_ptr<MIL::IROperator const>,std::hash<std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::shared_ptr<MIL::IROperator const>>,std::allocator<std::shared_ptr<MIL::IROperator const>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IROperator const>,std::shared_ptr<MIL::IROperator const> const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_20F40C034(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::shared_ptr<MIL::IROperator const>,std::hash<std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::shared_ptr<MIL::IROperator const>>,std::allocator<std::shared_ptr<MIL::IROperator const>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IROperator const>,std::shared_ptr<MIL::IROperator const> const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  uint64_t v15 = a3[1];
  i[2] = *a3;
  i[3] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void *)a1;
  long long v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    void *i = *v23;
LABEL_40:
    void *v23 = i;
    goto LABEL_41;
  }
  void *i = *v14;
  *uint64_t v14 = i;
  *(void *)(v22 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9) {
        v24 %= v9;
      }
    }
    else
    {
      v24 &= v9 - 1;
    }
    long long v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F40C2C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<MIL::Builder::OperationBuilder>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::~__func(void *a1)
{
  *a1 = &unk_26C259848;
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::~__func(void *a1)
{
  *a1 = &unk_26C259848;
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_26C259848;
  std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_20F40C3D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C259848;
  return std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(a1 + 8);
}

void std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

BOOL std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::operator()(uint64_t a1, MIL::Builder::OperationBuilder *this)
{
  unint64_t v3 = (void *)(a1 + 24);
  do
    unint64_t v3 = (void *)*v3;
  while (v3 && MIL::Builder::OperationBuilder::GetOperator(this) != v3[2]);
  return v3 != 0;
}

uint64_t std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0,std::allocator<MIL::Matching::Pattern::PatternImpl::OperationPredicate::Compile(MIL::Matching::Instruction *,MIL::Matching::anonymous namespace'::CompileContext const&)::$_0>,BOOL ()(MIL::Builder::OperationBuilder &)>::target_type()
{
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OperationPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2598D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OperationPredicate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2598D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OperationPredicate>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void *std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Maybe,std::allocator<MIL::Matching::Pattern::PatternImpl::Maybe>,MIL::Matching::Pattern const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26C259928;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  result[3] = &unk_26C259698;
  result[4] = v6;
  result[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Maybe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Maybe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259928;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Maybe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void *std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::ZeroOrMore,std::allocator<MIL::Matching::Pattern::PatternImpl::ZeroOrMore>,MIL::Matching::Pattern const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26C259978;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  result[3] = &unk_26C2596E0;
  result[4] = v6;
  result[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::ZeroOrMore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259978;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::ZeroOrMore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259978;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::ZeroOrMore>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void *std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::OneOrMore,std::allocator<MIL::Matching::Pattern::PatternImpl::OneOrMore>,MIL::Matching::Pattern const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X8>)
{
  uint64_t result = operator new(0x30uLL);
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26C2599C8;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  result[3] = &unk_26C259728;
  result[4] = v6;
  result[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *a2 = result + 3;
  a2[1] = result;
  return result;
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OneOrMore>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2599C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OneOrMore>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2599C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::OneOrMore>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void *std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Chain,std::allocator<MIL::Matching::Pattern::PatternImpl::Chain>,MIL::Matching::Pattern const&,MIL::Matching::Pattern const&,void>@<X0>(uint64_t *a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x40uLL);
  uint64_t result = std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Chain>::__shared_ptr_emplace[abi:ne180100]<MIL::Matching::Pattern const&,MIL::Matching::Pattern const&,std::allocator<MIL::Matching::Pattern::PatternImpl::Chain>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_20F40C948(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Chain>::__shared_ptr_emplace[abi:ne180100]<MIL::Matching::Pattern const&,MIL::Matching::Pattern const&,std::allocator<MIL::Matching::Pattern::PatternImpl::Chain>,0>(void *result, uint64_t *a2, void *a3)
{
  result[1] = 0;
  result[2] = 0;
  *uint64_t result = &unk_26C259A18;
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  result[3] = &unk_26C259770;
  result[4] = v4;
  result[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a3[1];
  result[6] = *a3;
  result[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Chain>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259A18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Chain>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259A18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Chain>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Via>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259A68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Via>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259A68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Via>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C259AB8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C259AB8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = &unk_26C259AB8;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20F40CC3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C259AB8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

BOOL std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::operator()(uint64_t a1, MIL::Builder::DataDependency *this)
{
  MIL::Builder::DataDependency::GetConsumer((uint64_t)this, &v19);
  if (!v19) {
    goto LABEL_20;
  }
  ConsumerParameteruint64_t Name = (unsigned __int8 *)MIL::Builder::DataDependency::GetConsumerParameterName(this);
  uint64_t v5 = ConsumerParameterName[23];
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = ConsumerParameterName[23];
  }
  else {
    uint64_t v6 = *((void *)ConsumerParameterName + 1);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 31);
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 16);
  }
  if (v6 == v7)
  {
    if (v8 >= 0) {
      unint64_t v9 = (unsigned __int8 *)(a1 + 8);
    }
    else {
      unint64_t v9 = *(unsigned __int8 **)(a1 + 8);
    }
    if ((v5 & 0x80) != 0)
    {
      BOOL v17 = memcmp(*(const void **)ConsumerParameterName, v9, *((void *)ConsumerParameterName + 1)) == 0;
    }
    else if (ConsumerParameterName[23])
    {
      uint64_t v10 = v5 - 1;
      do
      {
        int v12 = *ConsumerParameterName++;
        int v11 = v12;
        int v14 = *v9++;
        int v13 = v14;
        BOOL v16 = v10-- != 0;
        BOOL v17 = v11 == v13;
      }
      while (v11 == v13 && v16);
    }
    else
    {
      BOOL v17 = 1;
    }
  }
  else
  {
LABEL_20:
    BOOL v17 = 0;
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  return v17;
}

void sub_20F40CDDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<MIL::Matching::Via(std::string)::$_0,std::allocator<MIL::Matching::Via(std::string)::$_0>,BOOL ()(MIL::Builder::DataDependency const&)>::target_type()
{
}

uint64_t MIL::Matching::Pattern::PatternImpl::Via::Via(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C2597B8;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 24) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v5;
  }
  std::__function::__value_func<BOOL ()(MIL::Builder::DataDependency const&)>::__value_func[abi:ne180100](a1 + 32, a3);
  return a1;
}

void sub_20F40CEC8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<MIL::Matching::Pattern::PatternImpl::Parallel,std::allocator<MIL::Matching::Pattern::PatternImpl::Parallel>,MIL::Util::Span<MIL::Matching::Pattern const,18446744073709551615ul>,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x38uLL);
  uint64_t result = std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::__shared_ptr_emplace[abi:ne180100]<MIL::Util::Span<MIL::Matching::Pattern const,18446744073709551615ul>,std::allocator<MIL::Matching::Pattern::PatternImpl::Parallel>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_20F40CF2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::__shared_ptr_emplace[abi:ne180100]<MIL::Util::Span<MIL::Matching::Pattern const,18446744073709551615ul>,std::allocator<MIL::Matching::Pattern::PatternImpl::Parallel>,0>(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_26C259B38;
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 24) = &unk_26C259800;
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 0u;
  *(void *)(a1 + 32) = 0;
  std::vector<MIL::Matching::Pattern>::__init_with_size[abi:ne180100]<MIL::Matching::Pattern const*,MIL::Matching::Pattern const*>((void *)(a1 + 32), v3, &v3[2 * v4], (16 * v4) >> 4);
  return a1;
}

void sub_20F40CFC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259B38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C259B38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<MIL::Matching::Pattern::PatternImpl::Parallel>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void *std::vector<MIL::Matching::Pattern>::__init_with_size[abi:ne180100]<MIL::Matching::Pattern const*,MIL::Matching::Pattern const*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MIL::Matching::Pattern>,MIL::Matching::Pattern const*,MIL::Matching::Pattern const*,MIL::Matching::Pattern*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F40D0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<MIL::Matching::Pattern>,MIL::Matching::Pattern const*,MIL::Matching::Pattern const*,MIL::Matching::Pattern*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      *uint64_t v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MIL::Matching::Pattern>,MIL::Matching::Pattern*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<MIL::Matching::Pattern>,MIL::Matching::Pattern*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

unint64_t MIL::Matching::ParseQualifiedOpName@<X0>(unsigned __int8 *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v15 = a1;
  unint64_t v16 = a2;
  unint64_t result = std::string_view::rfind[abi:ne180100](&v15, "::", 0xFFFFFFFFFFFFFFFFLL);
  if (result == -1)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
    uint64_t v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"'", 1);
    int v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"' is not a qualified operator name of the form 'opset_name::op_name'", 68);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v13);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  uint64_t v5 = v15;
  unint64_t v6 = v16;
  if (v16 >= result) {
    unint64_t v7 = result;
  }
  else {
    unint64_t v7 = v16;
  }
  *a3 = v15;
  a3[1] = v7;
  BOOL v8 = v6 >= result + 2;
  unint64_t v9 = v6 - (result + 2);
  if (!v8) {
    std::__throw_out_of_range[abi:ne180100]("string_view::substr");
  }
  a3[2] = &v5[result + 2];
  a3[3] = v9;
  return result;
}

void sub_20F40D2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t std::string_view::rfind[abi:ne180100](unsigned __int8 **a1, char *__s, unint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  size_t v7 = strlen(__s);
  if (v6 >= a3) {
    unint64_t v8 = a3;
  }
  else {
    unint64_t v8 = v6;
  }
  size_t v9 = v6 - v8;
  size_t v10 = v8 + v7;
  if (v9 <= v7) {
    size_t v11 = v6;
  }
  else {
    size_t v11 = v10;
  }
  int v12 = &v5[v11];
  if (v7 && v11)
  {
    std::string v13 = v5;
    int v14 = &v5[v11];
    do
    {
      if (*v13 == *__s)
      {
        uint64_t v15 = 1;
        while (v7 != v15)
        {
          if (&v13[v15] == v12) {
            goto LABEL_20;
          }
          int v16 = v13[v15];
          int v17 = __s[v15++];
          if (v16 != v17) {
            goto LABEL_11;
          }
        }
        int v14 = v13;
      }
LABEL_11:
      ++v13;
    }
    while (v13 != v12);
  }
  else
  {
    int v14 = &v5[v11];
  }
LABEL_20:
  if (v14 != v12 || v7 == 0) {
    return v14 - v5;
  }
  else {
    return -1;
  }
}

void MIL::Matching::GetOperatorByQualifiedName(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, void *a4@<X8>)
{
  MIL::Matching::ParseQualifiedOpName(a2, a3, &v29);
  size_t v6 = v30;
  if (v30 > 0x7FFFFFFFFFFFFFF7) {
    goto LABEL_24;
  }
  size_t v7 = v29;
  if (v30 >= 0x17)
  {
    uint64_t v9 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17) {
      uint64_t v9 = v30 | 7;
    }
    uint64_t v10 = v9 + 1;
    p_dst = (void **)operator new(v9 + 1);
    size_t v27 = v6;
    unint64_t v28 = v10 | 0x8000000000000000;
    std::string __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v28) = v30;
  p_dst = (void **)&__dst;
  if (v30) {
LABEL_8:
  }
    memmove(p_dst, v7, v6);
  *((unsigned char *)p_dst + v6) = 0;
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void ***))(*(void *)a1 + 16))(a1, &__dst);
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst);
  }
  if (!v11)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__dst);
    int v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"No such opset '", 15);
    BOOL v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v29, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"'", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v25);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  size_t v12 = v32;
  if (v32 > 0x7FFFFFFFFFFFFFF7) {
LABEL_24:
  }
    std::string::__throw_length_error[abi:ne180100]();
  std::string v13 = v31;
  if (v32 >= 0x17)
  {
    uint64_t v15 = (v32 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v32 | 7) != 0x17) {
      uint64_t v15 = v32 | 7;
    }
    uint64_t v16 = v15 + 1;
    int v14 = (void **)operator new(v15 + 1);
    size_t v27 = v12;
    unint64_t v28 = v16 | 0x8000000000000000;
    std::string __dst = v14;
    goto LABEL_19;
  }
  HIBYTE(v28) = v32;
  int v14 = (void **)&__dst;
  if (v32) {
LABEL_19:
  }
    memmove(v14, v13, v12);
  *((unsigned char *)v14 + v12) = 0;
  MIL::IROpset::TryGetOperatorSharedPtr(v11, (unsigned __int8 *)&__dst, a4);
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst);
  }
  if (!*a4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&__dst);
    unint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__dst, (uint64_t)"No such operator '", 18);
    size_t v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v31, v32);
    uint64_t v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' in opset '", 12);
    long long v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v29, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"'.", 2);
    unint64_t v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v24, &v25);
    v24->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v24, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
}

void sub_20F40D708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      unint64_t v24 = *(std::__shared_weak_count **)(v20 + 8);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

void MIL::Matching::GetOperatorsByQualifiedName(uint64_t a1@<X0>, void *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  __src = a2;
  size_t __len = a3;
  if (std::string_view::rfind[abi:ne180100]((unsigned __int8 **)&__src, "::", 0xFFFFFFFFFFFFFFFFLL) != -1)
  {
    MIL::Matching::GetOperatorByQualifiedName(a1, (unsigned __int8 *)__src, __len, &v23);
    std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set(a4, &v23, 1);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    return;
  }
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  (*(void (**)(std::__shared_weak_count **__return_ptr, uint64_t))(*(void *)a1 + 24))(&v23, a1);
  size_t v6 = v23;
  for (uint64_t i = v24; v6 != i; ++v6)
  {
    if (SHIBYTE(v6->__shared_weak_owners_) < 0)
    {
      std::string::__init_copy_ctor_external(&__dst, (const std::string::value_type *)v6->__vftable, v6->__shared_owners_);
    }
    else
    {
      std::__shared_count v8 = v6->std::__shared_count;
      __dst.__r_.__value_.__r.__words[2] = v6->__shared_weak_owners_;
      *(std::__shared_count *)&__dst.__r_.__value_.__l.__data_ = v8;
    }
    uint64_t Opset = MIL::MILContext::GetOpset(a1);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    size_t v10 = __len;
    if (__len >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = __src;
    if (__len >= 0x17)
    {
      size_t v13 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__len | 7) != 0x17) {
        size_t v13 = __len | 7;
      }
      size_t v14 = v13 + 1;
      p_dst = operator new(v13 + 1);
      __dst.__r_.__value_.__l.__size_ = v10;
      __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = __len;
      p_dst = &__dst;
      if (!__len) {
        goto LABEL_18;
      }
    }
    memmove(p_dst, v11, v10);
LABEL_18:
    *((unsigned char *)p_dst + v1std::unique_ptr<MIL::Matching::Machine::MachineImpl>::reset[abi:ne180100]((void **)this, 0) = 0;
    MIL::IROpset::TryGetOperatorSharedPtr(Opset, (unsigned __int8 *)&__dst, &v18);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (v18) {
      std::__hash_table<std::shared_ptr<MIL::IROperator const>,std::hash<std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::shared_ptr<MIL::IROperator const>>,std::allocator<std::shared_ptr<MIL::IROperator const>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IROperator const>,std::shared_ptr<MIL::IROperator const> const&>(a4, &v18, &v18);
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
  }
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (!*(void *)(a4 + 24))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v23);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"No such operator '", 18);
    uint64_t v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__src, __len);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"' in all registered opsets.", 27);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &__dst);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
}

void sub_20F40DAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a19);
      std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v20);
      _Unwind_Resume(a1);
    }
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t std::unordered_set<std::shared_ptr<MIL::IROperator const>>::unordered_set(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 16 * a3;
    do
    {
      std::__hash_table<std::shared_ptr<MIL::IROperator const>,std::hash<std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::shared_ptr<MIL::IROperator const>>,std::allocator<std::shared_ptr<MIL::IROperator const>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IROperator const>,std::shared_ptr<MIL::IROperator const> const&>(a1, a2, a2);
      a2 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

void sub_20F40DBD0(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Passes::CompressionOptions::CompressionOptions(MIL::Passes::CompressionOptions *this)
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void MIL::Passes::CompressionOptions::~CompressionOptions(MIL::Passes::CompressionOptions *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x1000C4000313F17);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x1000C4000313F17);
  }
}

uint64_t MIL::Passes::CompressionOptions::GetMinimalNumElementsToCompress(MIL::Passes::CompressionOptions *this)
{
  return **(void **)this;
}

void MIL::Passes::QuantizationOptions::QuantizationOptions()
{
}

void sub_20F40DE10(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A0C403EC3ECEDLL);
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizationOptions::~QuantizationOptions(MIL::Passes::QuantizationOptions *this)
{
}

{
  std::unique_ptr<MIL::Passes::QuantizationOptions::QuantizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t MIL::Passes::QuantizationOptions::GetQuantizationMode(MIL::Passes::QuantizationOptions *this)
{
  return **(unsigned int **)this;
}

uint64_t MIL::Passes::QuantizationOptions::GetFloatType(MIL::Passes::QuantizationOptions *this)
{
  return *(unsigned int *)(*(void *)this + 4);
}

uint64_t MIL::Passes::QuantizationOptions::GetOpTypes(MIL::Passes::QuantizationOptions *this)
{
  return *(void *)this + 8;
}

uint64_t MIL::Passes::QuantizationOptions::GetMinimalNumElementsToCompress(MIL::Passes::QuantizationOptions *this)
{
  return *(void *)(*(void *)this + 48);
}

void MIL::Passes::SparsificationOptions::SparsificationOptions()
{
}

void sub_20F40DF30(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

void MIL::Passes::SparsificationOptions::~SparsificationOptions(MIL::Passes::SparsificationOptions *this)
{
  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x1000C40451B5BE8);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)this;
  *(void *)this = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x1000C40451B5BE8);
  }
}

uint64_t MIL::Passes::SparsificationOptions::GetSparsificationMode(MIL::Passes::SparsificationOptions *this)
{
  return **(unsigned int **)this;
}

float MIL::Passes::SparsificationOptions::GetThresholdOrtargetPercetile(MIL::Passes::SparsificationOptions *this)
{
  return *(float *)(*(void *)this + 4);
}

uint64_t MIL::Passes::SparsificationOptions::GetMinimalNumElementsToCompress(MIL::Passes::SparsificationOptions *this)
{
  return *(void *)(*(void *)this + 8);
}

void MIL::Passes::PalettizationOptions::PalettizationOptions()
{
  std::unordered_set<std::string>::unordered_set((uint64_t)v0, 0, 0);
  operator new();
}

{
  operator new();
}

void sub_20F40E0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x21056C700](v2, 0x10A0C409DF1B1DFLL);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20F40E17C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A0C409DF1B1DFLL);
  _Unwind_Resume(a1);
}

void MIL::Passes::PalettizationOptions::~PalettizationOptions(MIL::Passes::PalettizationOptions *this)
{
}

{
  std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t MIL::Passes::PalettizationOptions::GetPalettizationMode(MIL::Passes::PalettizationOptions *this)
{
  return **(unsigned int **)this;
}

uint64_t MIL::Passes::PalettizationOptions::GetNBits(MIL::Passes::PalettizationOptions *this)
{
  return *(unsigned int *)(*(void *)this + 4);
}

uint64_t MIL::Passes::PalettizationOptions::GetOpTypes(MIL::Passes::PalettizationOptions *this)
{
  return *(void *)this + 8;
}

uint64_t MIL::Passes::PalettizationOptions::GetOutputChannelBlockSize(MIL::Passes::PalettizationOptions *this)
{
  return *(void *)(*(void *)this + 48);
}

uint64_t MIL::Passes::PalettizationOptions::GetInputChannelBlockSize(MIL::Passes::PalettizationOptions *this)
{
  return *(void *)(*(void *)this + 56);
}

uint64_t MIL::Passes::PalettizationOptions::GetVectorSize(MIL::Passes::PalettizationOptions *this)
{
  return *(void *)(*(void *)this + 64);
}

uint64_t MIL::Passes::PalettizationOptions::GetMinimalNumElementsToCompress(MIL::Passes::PalettizationOptions *this)
{
  return *(void *)(*(void *)this + 72);
}

uint64_t MIL::Passes::CompressWeightsFp32ToFp16(MIL::MILContext ***this, uint64_t **a2, const MIL::Passes::CompressionOptions *a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = **a2;
  LOBYTE(v20[0]) = 0;
  char v24 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "const");
  MIL::Matching::Op(&__p, v19);
  v25[0] = &unk_26C259B88;
  v25[1] = v4;
  void v25[2] = v20;
  void v25[3] = v25;
  MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v19, (uint64_t)v25);
  std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](v25);
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v19);
  if (v18 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v24)
  {
    if (v21 < 0)
    {
      if (v20[1] != 5) {
        goto LABEL_27;
      }
      uint64_t v5 = (void *)v20[0];
    }
    else
    {
      if (v21 != 5) {
        goto LABEL_27;
      }
      uint64_t v5 = v20;
    }
    int v6 = *(_DWORD *)v5;
    int v7 = *((unsigned __int8 *)v5 + 4);
    if (v6 != 829648745 || v7 != 55) {
      goto LABEL_27;
    }
    if (v23 < 0)
    {
      if (v22[1] != 5) {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)v22[0];
    }
    else
    {
      if (v23 != 5) {
        goto LABEL_27;
      }
      uint64_t v9 = v22;
    }
    int v10 = *(_DWORD *)v9;
    int v11 = *((unsigned __int8 *)v9 + 4);
    if (v10 != 829648745 || v11 != 56)
    {
LABEL_27:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Only ios17->ios18 upgrading is supported.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "ios17::constexpr_cast");
    MIL::Matching::Op(&v15, v19);
    MIL::Conversion::MakeIos17ToIos18ConstCastTransform(v25);
    MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v19, (uint64_t)v25);
    std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](v25);
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v19);
    if (v16 < 0) {
      operator delete((void *)v15.n128_u64[0]);
    }
  }
  return std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
}

void sub_20F40E454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100]((void *)(v23 - 56));
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)&a21);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::QuantizeWeights(MIL::MILContext ***this, MIL::Transform::ProgramTransformer *a2, const MIL::Passes::QuantizationOptions *a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  LOBYTE(v20[0]) = 0;
  char v24 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "const");
  MIL::Matching::Op(&__p, v19);
  v25[0] = &unk_26C259C08;
  v25[1] = a2;
  void v25[2] = v20;
  void v25[3] = v25;
  MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v19, (uint64_t)v25);
  std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](v25);
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v19);
  if (v18 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v24)
  {
    if (v21 < 0)
    {
      if (v20[1] != 5) {
        goto LABEL_27;
      }
      uint64_t v5 = (void *)v20[0];
    }
    else
    {
      if (v21 != 5) {
        goto LABEL_27;
      }
      uint64_t v5 = v20;
    }
    int v6 = *(_DWORD *)v5;
    int v7 = *((unsigned __int8 *)v5 + 4);
    if (v6 != 829648745 || v7 != 55) {
      goto LABEL_27;
    }
    if (v23 < 0)
    {
      if (v22[1] != 5) {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)v22[0];
    }
    else
    {
      if (v23 != 5) {
        goto LABEL_27;
      }
      uint64_t v9 = v22;
    }
    int v10 = *(_DWORD *)v9;
    int v11 = *((unsigned __int8 *)v9 + 4);
    if (v10 != 829648745 || v11 != 56)
    {
LABEL_27:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Only ios17->ios18 upgrading is supported.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "ios17::constexpr_affine_dequantize");
    MIL::Matching::Op(&v15, v19);
    MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(v25);
    MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v19, (uint64_t)v25);
    std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](v25);
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v19);
    if (v16 < 0) {
      operator delete((void *)v15.n128_u64[0]);
    }
  }
  return std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
}

void sub_20F40E6E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100]((void *)(v23 - 56));
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)&a21);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::SparsifyWeights(MIL::MILContext ***this, MIL::Transform::ProgramTransformer *a2, const MIL::Passes::SparsificationOptions *a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  LOBYTE(v20[0]) = 0;
  char v24 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "const");
  MIL::Matching::Op(&__p, v19);
  v25[0] = &unk_26C259C88;
  v25[1] = a2;
  void v25[2] = v20;
  void v25[3] = v25;
  MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v19, (uint64_t)v25);
  std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](v25);
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v19);
  if (v18 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v24)
  {
    if (v21 < 0)
    {
      if (v20[1] != 5) {
        goto LABEL_27;
      }
      uint64_t v5 = (void *)v20[0];
    }
    else
    {
      if (v21 != 5) {
        goto LABEL_27;
      }
      uint64_t v5 = v20;
    }
    int v6 = *(_DWORD *)v5;
    int v7 = *((unsigned __int8 *)v5 + 4);
    if (v6 != 829648745 || v7 != 55) {
      goto LABEL_27;
    }
    if (v23 < 0)
    {
      if (v22[1] != 5) {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)v22[0];
    }
    else
    {
      if (v23 != 5) {
        goto LABEL_27;
      }
      uint64_t v9 = v22;
    }
    int v10 = *(_DWORD *)v9;
    int v11 = *((unsigned __int8 *)v9 + 4);
    if (v10 != 829648745 || v11 != 56)
    {
LABEL_27:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Only ios17->ios18 upgrading is supported.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "ios17::constexpr_sparse_to_dense");
    MIL::Matching::Op(&v15, v19);
    MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(v25);
    MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v19, (uint64_t)v25);
    std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](v25);
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v19);
    if (v16 < 0) {
      operator delete((void *)v15.n128_u64[0]);
    }
  }
  return std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
}

void sub_20F40E974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100]((void *)(v23 - 56));
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)&a21);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::PalettizeWeights(MIL::MILContext ***this, MIL::Transform::ProgramTransformer *a2, const MIL::Passes::PalettizationOptions *a3)
{
  v25[4] = *MEMORY[0x263EF8340];
  LOBYTE(v20[0]) = 0;
  char v24 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "const");
  MIL::Matching::Op(&__p, v19);
  v25[0] = &unk_26C259D08;
  v25[1] = a2;
  void v25[2] = v20;
  void v25[3] = v25;
  MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v19, (uint64_t)v25);
  std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](v25);
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v19);
  if (v18 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v24)
  {
    if (v21 < 0)
    {
      if (v20[1] != 5) {
        goto LABEL_27;
      }
      uint64_t v5 = (void *)v20[0];
    }
    else
    {
      if (v21 != 5) {
        goto LABEL_27;
      }
      uint64_t v5 = v20;
    }
    int v6 = *(_DWORD *)v5;
    int v7 = *((unsigned __int8 *)v5 + 4);
    if (v6 != 829648745 || v7 != 55) {
      goto LABEL_27;
    }
    if (v23 < 0)
    {
      if (v22[1] != 5) {
        goto LABEL_27;
      }
      uint64_t v9 = (void *)v22[0];
    }
    else
    {
      if (v23 != 5) {
        goto LABEL_27;
      }
      uint64_t v9 = v22;
    }
    int v10 = *(_DWORD *)v9;
    int v11 = *((unsigned __int8 *)v9 + 4);
    if (v10 != 829648745 || v11 != 56)
    {
LABEL_27:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Only ios17->ios18 upgrading is supported.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v15, "ios17::constexpr_lut_to_dense");
    MIL::Matching::Op(&v15, v19);
    MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(v25);
    MIL::Transform::ProgramTransformer::MatchAndReplace(this, (const MIL::Matching::Pattern *)v19, (uint64_t)v25);
    std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](v25);
    MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)v19);
    if (v16 < 0) {
      operator delete((void *)v15.n128_u64[0]);
    }
  }
  return std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v20);
}

void sub_20F40EC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,char a23)
{
  std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100]((void *)(v23 - 56));
  MIL::Matching::Pattern::~Pattern((MIL::Matching::Pattern *)&a21);
  if (a14 < 0) {
    operator delete(__p);
  }
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

uint64_t std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t MIL::Passes::QuantizationOptions::QuantizationOptionsImpl::QuantizationOptionsImpl(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  std::unordered_set<std::string>::unordered_set(a1 + 8, a4);
  *(void *)(a1 + 48) = a5;
  if ((a3 - 6) <= 0xFFFFFFFD)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    MIL::IRDataTypeToString(a3, &v14);
    int v10 = std::string::insert(&v14, 0, "Invalid floatType ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    size_t v12 = std::string::append(&v15, ", choices are float32 or float16.");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v16);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return a1;
}

void sub_20F40EE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_10:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20F40EEE4(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<MIL::Passes::QuantizationOptions::QuantizationOptionsImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *unint64_t result = a2;
  if (v2)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 8);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t MIL::Passes::SparsificationOptions::SparsificationOptionsImpl::SparsificationOptionsImpl(uint64_t result, int a2, uint64_t a3, float a4)
{
  *(_DWORD *)unint64_t result = a2;
  *(float *)(result + 4) = a4;
  *(void *)(result + 8) = a3;
  if (a2 == 1 && a4 < 0.0)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid threshold, must >= 0 but get ", 37);
    uint64_t v5 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)".", 1);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(exception, &v9);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  BOOL v4 = a4 > 1.0;
  if (a4 < 0.0) {
    BOOL v4 = 1;
  }
  if (a2 == 2 && v4)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Invalid percentile, it is required that 0 <= percentile <= 1 but get ", 69);
    int v7 = (void *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)".", 1);
    std::__shared_count v8 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::logic_error::logic_error(v8, &v9);
    v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v8, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_20F40F114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a17);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t std::unordered_set<std::string>::unordered_set(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 24 * a3;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, a2, (uint64_t)a2);
      a2 += 24;
      v5 -= 24;
    }
    while (v5);
  }
  return a1;
}

void sub_20F40F1D0(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::PalettizationOptions::PalettizationOptionsImpl::PalettizationOptionsImpl(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  std::unordered_set<std::string>::unordered_set(a1 + 8, a4);
  *(void *)(a1 + 48) = a5;
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 64) = a7;
  *(void *)(a1 + 72) = a8;
  if (a2 == 3)
  {
    if (a3 != -1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v27, a3);
      int v18 = std::string::insert(&v27, 0, "nbits must be -1 in the UNIQUE mode, but get ");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      uint64_t v20 = std::string::append(&v28, ".");
      long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      v29.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(exception, &v29);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    if (a6 | a5)
    {
      std::string v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v15, "unique palettization per-channel is not allowed because nbits might not be deterministic.");
      goto LABEL_12;
    }
  }
  else if ((a3 - 1) >= 4 && a3 != 6 && a3 != 8)
  {
    int v22 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v27, a3);
    uint64_t v23 = std::string::insert(&v27, 0, "nbits must be one of {1, 2, 3, 4, 6, 8} in non-UNIQUE mode, but get ");
    long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    uint64_t v25 = std::string::append(&v28, ".");
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v22, &v29);
    v22->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v22, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  if (a2 != 1 && a7 >= 2)
  {
    std::string v15 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v15, "vector palettization can only be used in KMEANS mode.");
LABEL_12:
    v15->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v15, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return a1;
}

void sub_20F40F494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_10:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28);
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

uint64_t *std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *unint64_t result = a2;
  if (v2)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v2 + 8);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

__n128 std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C259B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C259B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, void *a3)
{
  MIL::Matching::MatchView::MatchView(&v9, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::Matching::MatchView::GetAttribute(&v9, (unsigned __int8 *)__p, &v13);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5) >= *(void *)(a1 + 8))
  {
    int v6 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 32))(v13);
    uint64_t v7 = MIL::IRValueType::AsTensorType(v6);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 88))(v7) == 5)
    {
      MILContext = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
      v12[0] = v13;
      v12[1] = (uint64_t)v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Passes::CompressFp32ValueToFp16(MILContext, v12);
    }
  }
  MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v9);
}

void sub_20F40F808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v27 - 88);
  std::string v29 = *(std::__shared_weak_count **)(v27 - 40);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0,std::allocator<MIL::Passes::CompressWeightsFp32ToFp16(MIL::Transform::ProgramTransformer &,MIL::Passes::CompressionOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void MIL::Passes::anonymous namespace'::AddOperationWithAttrsMap(MIL::Transform::MatchContext *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *a4 = 0;
  a4[48] = 0;
  int v7 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(void *)(a2 + 8) != 5) {
      goto LABEL_34;
    }
    char v11 = *(_DWORD **)a2;
    if (**(_DWORD **)a2 != 829648745 || *(unsigned char *)(*(void *)a2 + 4) != 53)
    {
      if ((*v11 != 829648745 || *((unsigned char *)v11 + 4) != 54) && (*v11 != 829648745 || *((unsigned char *)v11 + 4) != 55))
      {
LABEL_30:
        int v15 = *v11;
        int v16 = *((unsigned __int8 *)v11 + 4);
        if (v15 == 829648745 && v16 == 56)
        {
          MIL::Transform::MatchContext::GetMILContextPtr((void **)this, &v40);
          std::string::basic_string[abi:ne180100]<0>(__p, "ios17");
          MIL::Passes::RegisterOpsetIfNot(&v40, (uint64_t *)__p);
          if (SHIBYTE(v39) < 0) {
            operator delete(__p[0]);
          }
          if (v41) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v41);
          }
          std::operator+<char>();
          if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v37 = &v42;
          }
          else {
            uint64_t v37 = (std::string *)v42.__r_.__value_.__r.__words[0];
          }
          __p[0] = 0;
          __p[1] = 0;
          MIL::Transform::MatchContext::AddOperationWithSpecifiedOpsetName((uint64_t **)this, (char *)v37, (uint64_t *)__p);
        }
LABEL_34:
        if ((v7 & 0x80u) == 0) {
          size_t v18 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v18 = *(void *)(a2 + 8);
        }
        long long v19 = &v42;
        std::string::basic_string[abi:ne180100]((uint64_t)&v42, v18 + 2);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v19 = (std::string *)v42.__r_.__value_.__r.__words[0];
        }
        if (v18)
        {
          if (*(char *)(a2 + 23) >= 0) {
            uint64_t v20 = (_DWORD *)a2;
          }
          else {
            uint64_t v20 = *(_DWORD **)a2;
          }
          memmove(v19, v20, v18);
        }
        strcpy((char *)v19 + v18, "::");
        int v21 = *(char *)(a3 + 23);
        if (v21 >= 0) {
          int v22 = (const std::string::value_type *)a3;
        }
        else {
          int v22 = *(const std::string::value_type **)a3;
        }
        if (v21 >= 0) {
          std::string::size_type v23 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v23 = *(void *)(a3 + 8);
        }
        long long v24 = std::string::append(&v42, v22, v23);
        long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        int64_t v39 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)__n128 __p = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v42.__r_.__value_.__l.__data_);
        }
        if (v39 >= 0) {
          long long v26 = (char *)__p;
        }
        else {
          long long v26 = (char *)__p[0];
        }
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
        MIL::Transform::MatchContext::AddOperation((uint64_t **)this, v26, (uint64_t *)&v42);
      }
LABEL_56:
      if ((v7 & 0x80u) == 0) {
        size_t v27 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v27 = *(void *)(a2 + 8);
      }
      uint64_t v28 = &v42;
      std::string::basic_string[abi:ne180100]((uint64_t)&v42, v27 + 2);
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v28 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      if (v27)
      {
        if (*(char *)(a2 + 23) >= 0) {
          std::string v29 = (_DWORD *)a2;
        }
        else {
          std::string v29 = *(_DWORD **)a2;
        }
        memmove(v28, v29, v27);
      }
      strcpy((char *)v28 + v27, "::");
      int v30 = *(char *)(a3 + 23);
      if (v30 >= 0) {
        unint64_t v31 = (const std::string::value_type *)a3;
      }
      else {
        unint64_t v31 = *(const std::string::value_type **)a3;
      }
      if (v30 >= 0) {
        std::string::size_type v32 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        std::string::size_type v32 = *(void *)(a3 + 8);
      }
      unint64_t v33 = std::string::append(&v42, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      int64_t v39 = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)__n128 __p = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (v39 >= 0) {
        uint64_t v35 = (char *)__p;
      }
      else {
        uint64_t v35 = (char *)__p[0];
      }
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
      MIL::Transform::MatchContext::AddOperation((uint64_t **)this, v35, (uint64_t *)&v42);
    }
  }
  else
  {
    if (v7 != 5) {
      goto LABEL_34;
    }
    if (*(_DWORD *)a2 != 829648745 || *(unsigned char *)(a2 + 4) != 53)
    {
      if (*(_DWORD *)a2 != 829648745 || *(unsigned char *)(a2 + 4) != 54)
      {
        BOOL v10 = *(_DWORD *)a2 == 829648745 && *(unsigned char *)(a2 + 4) == 55;
        char v11 = (_DWORD *)a2;
        if (!v10) {
          goto LABEL_30;
        }
      }
      goto LABEL_56;
    }
  }
  MIL::Transform::MatchContext::GetMILContextPtr((void **)this, &v43);
  std::string::basic_string[abi:ne180100]<0>(__p, "ios16");
  MIL::Passes::RegisterOpsetIfNot(&v43, (uint64_t *)__p);
  if (SHIBYTE(v39) < 0) {
    operator delete(__p[0]);
  }
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  std::operator+<char>();
  if (v39 >= 0) {
    unint64_t v36 = (char *)__p;
  }
  else {
    unint64_t v36 = (char *)__p[0];
  }
  *(_OWORD *)&v42.__r_.__value_.__l.__data_ = 0uLL;
  MIL::Transform::MatchContext::AddOperationWithSpecifiedOpsetName((uint64_t **)this, v36, (uint64_t *)&v42);
}

void sub_20F40FDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  std::__optional_destruct_base<std::pair<std::string,std::string>,false>::~__optional_destruct_base[abi:ne180100](v28);
  _Unwind_Resume(a1);
}

void *std::pair<std::string,std::string>::pair[abi:ne180100]<char const(&)[6],char const(&)[6],0>(void *a1, char *a2, char *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_20F40FEB4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::string,std::string>::operator=[abi:ne180100](uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  return a1;
}

__n128 std::__optional_storage_base<std::pair<std::string,std::string>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::pair<std::string,std::string>,false>>(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 48) == *((unsigned __int8 *)a2 + 48))
  {
    if (*(unsigned char *)(a1 + 48)) {
      std::pair<std::string,std::string>::operator=[abi:ne180100](a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 48))
  {
    std::__optional_destruct_base<std::pair<std::string,std::string>,false>::reset[abi:ne180100](a1);
  }
  else
  {
    long long v3 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v3;
    *(long long *)((char *)a2 + 8) = 0uLL;
    *(void *)a2 = 0;
    __n128 result = *(__n128 *)((char *)a2 + 24);
    *(void *)(a1 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = *((void *)a2 + 5);
    *(__n128 *)(a1 + 24) = result;
    a2[2] = 0uLL;
    *((void *)a2 + 3) = 0;
    *(unsigned char *)(a1 + 48) = 1;
  }
  return result;
}

void std::__optional_destruct_base<std::pair<std::string,std::string>,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
}

void *std::__function::__value_func<void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

__n128 std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C259C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C259C08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, void *a3)
{
  MIL::Matching::MatchView::MatchView(&v19, a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "val");
  MIL::Matching::MatchView::GetAttribute(&v19, (unsigned __int8 *)&__p, &v25);
  if (v22 < 0) {
    operator delete(__p);
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v25 + 32))(v25);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5) >= *(void *)(**(void **)(a1 + 8) + 48))
  {
    long long v6 = (MIL::IRValueType *)(*(uint64_t (**)(void *))(*(void *)v25 + 32))(v25);
    uint64_t v7 = MIL::IRValueType::AsTensorType(v6);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 88))(v7) == *(_DWORD *)(**(void **)(a1 + 8) + 4))
    {
      std::__shared_count v8 = (MIL::IRValueType *)(*(uint64_t (**)(void *))(*(void *)v25 + 32))(v25);
      std::string v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v8);
      if (!MIL::IRTensorValueType::IsScalar(v9))
      {
        uint64_t Operation = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)MIL::Matching::MatchView::GetOperation(&v19);
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        uint64_t v11 = **(void **)(a1 + 8);
        std::string::basic_string[abi:ne180100]<0>(&__p, "output");
        char v13 = v12;
        if (v22 < 0)
        {
          operator delete(__p);
          if ((v13 & 1) == 0) {
            goto LABEL_6;
          }
        }
        else if ((v12 & 1) == 0)
        {
          goto LABEL_6;
        }
        MILContext = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
        int v15 = v25;
        int v16 = v26;
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = v24;
        switch(***(_DWORD ***)(a1 + 8))
        {
          case 1:
            __n128 __p = v15;
            int v21 = v16;
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Passes::QuantizeValueAsymmetricInt8(MILContext, (uint64_t *)&__p, v17 | 0x100000000);
          case 2:
            __n128 __p = v15;
            int v21 = v16;
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Passes::QuantizeValueAsymmetricUInt8(MILContext, (uint64_t *)&__p, v17 | 0x100000000);
          case 3:
            __n128 __p = v15;
            int v21 = v16;
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Passes::QuantizeValueSymmetricInt8(MILContext, (uint64_t *)&__p, v17 | 0x100000000);
          case 4:
            __n128 __p = v15;
            int v21 = v16;
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Passes::QuantizeValueNoZeroPointUInt8(MILContext, (uint64_t *)&__p, v17 | 0x100000000);
          default:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Unsupported quantization mode.");
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
      }
    }
  }
LABEL_6:
  MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v19);
}

void sub_20F4104AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::string v29 = *(std::__shared_weak_count **)(v27 - 40);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0,std::allocator<MIL::Passes::QuantizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::QuantizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

uint64_t MIL::Passes::anonymous namespace'::InferIOChannels(MIL::Builder::OperationBuilder::OperationBuilderImpl **this, void *a2, int **a3, void *a4, void *a5)
{
  if (*((char *)a3 + 23) < 0)
  {
    uint64_t v11 = a3[1];
    if (v11 == (int *)5 && **a3 == 1970302569 && *((unsigned char *)*a3 + 4) == 116) {
      goto LABEL_17;
    }
    if (v11 != (int *)6) {
      goto LABEL_139;
    }
    BOOL v10 = *a3;
    goto LABEL_12;
  }
  if (*((unsigned char *)a3 + 23) != 5)
  {
    BOOL v10 = (int *)a3;
    if (*((unsigned char *)a3 + 23) != 6) {
      goto LABEL_139;
    }
LABEL_12:
    int v13 = *v10;
    int v14 = *((unsigned __int16 *)v10 + 2);
    if (v13 != 1886680431 || v14 != 29813) {
      goto LABEL_139;
    }
    goto LABEL_17;
  }
  if (*(_DWORD *)a3 != 1970302569 || *((unsigned char *)a3 + 4) != 116)
  {
LABEL_139:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Only input or output mode is supported.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
LABEL_17:
  Outputuint64_t Type = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType(this, 0);
  uint64_t v17 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(OutputType);
  uint64_t v18 = MIL::IRTensorValueType::Rank(v17);
  int v19 = v18;
  int v20 = *((char *)a3 + 23);
  if (v20 < 0)
  {
    if (a3[1] != (int *)5) {
      goto LABEL_29;
    }
    int v21 = *a3;
  }
  else
  {
    int v21 = (int *)a3;
    if (v20 != 5) {
      goto LABEL_29;
    }
  }
  int v22 = *v21;
  int v23 = *((unsigned __int8 *)v21 + 4);
  BOOL v24 = v22 == 1970302569 && v23 == 116;
  if (v24 && v18 == 1) {
    return 0;
  }
LABEL_29:
  v84 = a5;
  v85 = a4;
  MIL::Builder::OperationBuilder::GetChildOperations((MIL::Builder::OperationBuilder *)this, (uint64_t)v89);
  long long v26 = v90;
  if (v90)
  {
    int v83 = v19;
    int v81 = v19 - 1;
    int v82 = v19 - 2;
    int v27 = -1;
    while (1)
    {
      std::string v29 = (MIL::Builder::OperationBuilder *)v26[2];
      uint64_t v28 = (std::__shared_weak_count *)v26[3];
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v29);
      uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
      if (std::string::find((const std::string *)v31, 46, 0) == -1)
      {
        if (*(char *)(v31 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v31, *(void *)(v31 + 8));
        }
        else
        {
          long long v33 = *(_OWORD *)v31;
          v88.__r_.__value_.__r.__words[2] = *(void *)(v31 + 16);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v33;
        }
      }
      else
      {
        std::string::size_type v32 = std::string::find((const std::string *)v31, 46, 0);
        std::string::basic_string(&v88, (const std::string *)v31, v32 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
      }
      if (a2[3]
        && !std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v88))
      {
        BOOL v51 = 1;
        goto LABEL_127;
      }
      int v34 = *((char *)a3 + 23);
      if (v34 < 0)
      {
        if (a3[1] != (int *)6)
        {
LABEL_51:
          BOOL v39 = 0;
          goto LABEL_52;
        }
        uint64_t v35 = *a3;
      }
      else
      {
        uint64_t v35 = (int *)a3;
        if (v34 != 6) {
          goto LABEL_51;
        }
      }
      int v36 = *v35;
      int v37 = *((unsigned __int16 *)v35 + 2);
      BOOL v39 = v36 == 1886680431 && v37 == 29813;
LABEL_52:
      int v40 = !v39;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v88.__r_.__value_.__l.__size_;
        if (v88.__r_.__value_.__l.__size_ != 14) {
          goto LABEL_83;
        }
        std::string v42 = (std::string *)v88.__r_.__value_.__r.__words[0];
      }
      else
      {
        int v41 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        if (HIBYTE(v88.__r_.__value_.__r.__words[2]) != 14) {
          goto LABEL_80;
        }
        std::string v42 = &v88;
      }
      std::string::size_type v44 = v42->__r_.__value_.__r.__words[0];
      uint64_t v45 = *(std::string::size_type *)((char *)v42->__r_.__value_.__r.__words + 6);
      if (v44 == 0x6172745F766E6F63 && v45 == 0x65736F70736E6172)
      {
        uint64_t Output = MIL::Builder::OperationBuilder::GetOutput(this, 0);
        std::string::basic_string[abi:ne180100]<0>(__p, "weight");
        uint64_t ArgumentForParameter = MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v29, (uint64_t)__p, 0);
        if (v87 < 0) {
          operator delete(__p[0]);
        }
        if (Output == ArgumentForParameter)
        {
          int v49 = *((char *)a3 + 23);
          if (v49 < 0)
          {
            if (a3[1] == (int *)6)
            {
              std::string v50 = *a3;
LABEL_71:
              int v52 = *v50;
              int v53 = *((unsigned __int16 *)v50 + 2);
              int v40 = v52 == 1886680431 && v53 == 29813;
              goto LABEL_78;
            }
          }
          else
          {
            std::string v50 = (int *)a3;
            if (v49 == 6) {
              goto LABEL_71;
            }
          }
          int v40 = 0;
        }
      }
LABEL_78:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        int v41 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
LABEL_80:
        if (v41 != 6) {
          goto LABEL_125;
        }
        long long v55 = &v88;
        goto LABEL_85;
      }
      std::string::size_type size = v88.__r_.__value_.__l.__size_;
LABEL_83:
      if (size != 6) {
        goto LABEL_125;
      }
      long long v55 = (std::string *)v88.__r_.__value_.__r.__words[0];
LABEL_85:
      int data = (int)v55->__r_.__value_.__l.__data_;
      int v57 = WORD2(v55->__r_.__value_.__r.__words[0]);
      if (data != 1836343661 || v57 != 27765) {
        goto LABEL_125;
      }
      uint64_t v59 = MIL::Builder::OperationBuilder::GetOutput(this, 0);
      std::string::basic_string[abi:ne180100]<0>(__p, "y");
      uint64_t v60 = MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v29, (uint64_t)__p, 0);
      if (v87 < 0) {
        operator delete(__p[0]);
      }
      if (v59 != v60) {
        goto LABEL_125;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "transpose_y");
      long long v61 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v29, (uint64_t)__p, 0);
      uint64_t Value = (const void *)MIL::Builder::Variable::TryGetValue(v61);
      int v63 = MIL::IRValue::GetScalar<BOOL>(Value);
      if (v87 < 0) {
        operator delete(__p[0]);
      }
      int v64 = *((unsigned __int8 *)a3 + 23);
      if (v63)
      {
        if ((v64 & 0x80) != 0)
        {
          int v40 = v81;
          if (a3[1] != (int *)6) {
            goto LABEL_125;
          }
          v65 = (uint64_t *)*a3;
LABEL_104:
          unsigned int v67 = 1869968496;
          unsigned int v68 = bswap32(*(_DWORD *)v65);
          if (v68 == 1869968496 && (v68 = bswap32(*((unsigned __int16 *)v65 + 2)) >> 16, unsigned int v67 = 30068, v68 == 30068))
          {
            int v69 = 0;
          }
          else if (v68 < v67)
          {
            int v69 = -1;
          }
          else
          {
            int v69 = 1;
          }
          if (v69) {
            int v73 = -1;
          }
          else {
            int v73 = -2;
          }
          goto LABEL_124;
        }
        v65 = (uint64_t *)a3;
        int v40 = v81;
        if (v64 == 6) {
          goto LABEL_104;
        }
      }
      else
      {
        if ((v64 & 0x80) != 0)
        {
          int v40 = v82;
          if (a3[1] != (int *)6) {
            goto LABEL_125;
          }
          v66 = (uint64_t *)*a3;
LABEL_109:
          unsigned int v70 = 1869968496;
          unsigned int v71 = bswap32(*(_DWORD *)v66);
          if (v71 == 1869968496 && (v71 = bswap32(*((unsigned __int16 *)v66 + 2)) >> 16, unsigned int v70 = 30068, v71 == 30068))
          {
            int v72 = 0;
          }
          else if (v71 < v70)
          {
            int v72 = -1;
          }
          else
          {
            int v72 = 1;
          }
          if (v72) {
            int v73 = -2;
          }
          else {
            int v73 = -1;
          }
LABEL_124:
          int v40 = v73 + v83;
          goto LABEL_125;
        }
        v66 = (uint64_t *)a3;
        int v40 = v82;
        if (v64 == 6) {
          goto LABEL_109;
        }
      }
LABEL_125:
      BOOL v51 = v27 >= 0 && v27 != v40;
      if (v27 < 0 || v27 == v40) {
        int v27 = v40;
      }
LABEL_127:
      if ((SHIBYTE(v88.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v28) {
          goto LABEL_130;
        }
LABEL_129:
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        goto LABEL_130;
      }
      operator delete(v88.__r_.__value_.__l.__data_);
      if (v28) {
        goto LABEL_129;
      }
LABEL_130:
      if (v51)
      {
        uint64_t v25 = 0;
        goto LABEL_143;
      }
      long long v26 = (void *)*v26;
      if (!v26) {
        goto LABEL_141;
      }
    }
  }
  int v27 = -1;
LABEL_141:
  void *v85 = v27;
  v76 = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType(this, 0);
  uint64_t v77 = MIL::IRValueType::AsTensorType(v76);
  uint64_t v78 = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v77 + 96))(v77) + 8 * *v85);
  uint64_t v79 = (*(uint64_t (**)(uint64_t))(*(void *)v78 + 16))(v78);
  void *v84 = (*(uint64_t (**)(uint64_t))(*(void *)v79 + 48))(v79);
  uint64_t v25 = 1;
LABEL_143:
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)v89);
  return v25;
}

void sub_20F410CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  std::__hash_table<std::shared_ptr<MIL::Builder::OperationBuilder>,std::hash<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::equal_to<std::shared_ptr<MIL::Builder::OperationBuilder>>,std::allocator<std::shared_ptr<MIL::Builder::OperationBuilder>>>::~__hash_table((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

__n128 std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C259C88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C259C88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, void *a3)
{
  MIL::Matching::MatchView::MatchView(&v14, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::Matching::MatchView::GetAttribute(&v14, (unsigned __int8 *)__p, &v22);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5) >= *(void *)(**(void **)(a1 + 8) + 8))
  {
    long long v6 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v22 + 32))(v22);
    uint64_t v7 = MIL::IRValueType::AsTensorType(v6);
    unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
    if (v8 <= 0xE && ((1 << v8) & 0x4230) != 0)
    {
      long long v19 = 0u;
      long long v20 = 0u;
      int v21 = 1065353216;
      int v10 = ***(_DWORD ***)(a1 + 8);
      if (v10 != 1)
      {
        if (v10 == 2)
        {
          MILContext = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
          uint64_t v17 = v22;
          uint64_t v18 = v23;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Passes::SparsifyWithPercentile(MILContext, &v17, *(float *)(**(void **)(a1 + 8) + 4));
        }
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "invalid sparsification mode.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      char v12 = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
      uint64_t v17 = v22;
      uint64_t v18 = v23;
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Passes::SparsifyWithThreshold(v12, &v17, *(float *)(**(void **)(a1 + 8) + 4));
    }
  }
  MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v14);
}

void sub_20F4110A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v28 - 96);
  int v30 = *(std::__shared_weak_count **)(v28 - 40);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0,std::allocator<MIL::Passes::SparsifyWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::SparsificationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

__n128 std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C259D08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C259D08;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, void *a3)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  MIL::Matching::MatchView::MatchView(&v47, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "val");
  MIL::Matching::MatchView::GetAttribute(&v47, (unsigned __int8 *)__p, &v63);
  if (SBYTE7(v49) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = (*(uint64_t (**)(void *))(*(void *)v63 + 32))(v63);
  if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5) < *(void *)(**(void **)(a1 + 8) + 72)) {
    goto LABEL_23;
  }
  long long v6 = (MIL::IRValueType *)(*(uint64_t (**)(void *))(*(void *)v63 + 32))(v63);
  uint64_t v7 = MIL::IRValueType::AsTensorType(v6);
  unsigned int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 88))(v7);
  if (v8 > 0xE || ((1 << v8) & 0x4230) == 0) {
    goto LABEL_23;
  }
  int v10 = *(int ***)(a1 + 8);
  uint64_t v11 = *v10;
  if (*((void *)*v10 + 6) || *((void *)v11 + 7) || v11[1] == 3 || *((void *)v11 + 8) >= 2uLL)
  {
    uint64_t Operation = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)MIL::Matching::MatchView::GetOperation(&v47);
    unint64_t v61 = 0;
    long long v62 = 0;
    uint64_t v13 = **(void **)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    char v15 = v14;
    if (SBYTE7(v49) < 0)
    {
      operator delete(__p[0]);
      if ((v15 & 1) == 0) {
        goto LABEL_23;
      }
    }
    else if ((v14 & 1) == 0)
    {
      goto LABEL_23;
    }
    unint64_t v59 = 0;
    uint64_t v60 = 0;
    uint64_t v16 = **(void **)(a1 + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    char v18 = v17;
    if (SBYTE7(v49) < 0)
    {
      operator delete(__p[0]);
      if (v18)
      {
LABEL_16:
        int v56 = 0;
        int v57 = 0;
        uint64_t v58 = 0;
        long long v19 = *(int ***)(a1 + 8);
        long long v20 = *v19;
        unint64_t v21 = *((void *)*v19 + 6);
        if (v21)
        {
          if (v61 % v21) {
            goto LABEL_27;
          }
          uint64_t v22 = v62;
          int v23 = (std::__shared_weak_count *)operator new(0x10uLL);
          p_shared_weak_owners = (std::__shared_weak_count *)&v23->__shared_weak_owners_;
          v23->__vftable = v22;
          v23->__shared_owners_ = v21;
          int v57 = (std::__shared_weak_count *)&v23->__shared_weak_owners_;
          uint64_t v58 = &v23->__shared_weak_owners_;
          int v56 = v23;
          long long v20 = *v19;
        }
        else
        {
          int v23 = 0;
          p_shared_weak_owners = 0;
        }
        unint64_t v25 = *((void *)v20 + 7);
        if (v25)
        {
          if (v59 % v25) {
            goto LABEL_27;
          }
          uint64_t v28 = (char *)p_shared_weak_owners - (char *)v23;
          uint64_t v29 = ((char *)p_shared_weak_owners - (char *)v23) >> 4;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 60) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v60;
          if (v28 >> 3 > v30) {
            unint64_t v30 = v28 >> 3;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v32 = v30;
          }
          if (v32)
          {
            long long v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v58, v32);
            int v23 = (std::__shared_weak_count *)v56;
            p_shared_weak_owners = v57;
          }
          else
          {
            long long v33 = 0;
          }
          int v34 = &v33[16 * v29];
          uint64_t v35 = &v33[16 * v32];
          *(void *)int v34 = v31;
          *((void *)v34 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v25;
          int v36 = (std::__shared_weak_count *)(v34 + 16);
          if (p_shared_weak_owners != v23)
          {
            do
            {
              *((_OWORD *)v34 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_OWORD *)&p_shared_weak_owners[-1].__shared_owners_;
              v34 -= 16;
              p_shared_weak_owners = (std::__shared_weak_count *)((char *)p_shared_weak_owners - 16);
            }
            while (p_shared_weak_owners != v23);
            int v23 = (std::__shared_weak_count *)v56;
          }
          int v56 = v34;
          int v57 = v36;
          uint64_t v58 = (uint64_t *)v35;
          if (v23) {
            operator delete(v23);
          }
          int v57 = v36;
          long long v19 = *(int ***)(a1 + 8);
          long long v20 = *v19;
        }
        uint64_t v53 = *((void *)v20 + 8);
        LOBYTE(v54) = 0;
        char v55 = 0;
        unint64_t v37 = *((void *)*v19 + 8);
        if (v37 >= 2)
        {
          unint64_t v38 = *((void *)*v19 + 6);
          if (v38 && v38 % v37 || v61 % v37)
          {
LABEL_27:
            MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
            if (v56)
            {
              int v57 = (std::__shared_weak_count *)v56;
              operator delete(v56);
            }
            goto LABEL_74;
          }
          long long v54 = v62;
          char v55 = 1;
        }
        *(_OWORD *)__n128 __p = 0u;
        long long v49 = 0u;
        int v50 = 1065353216;
        int v42 = **v19;
        if (v42 != 2)
        {
          if (v42 == 1)
          {
            MILContext = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
            BOOL v51 = v63;
            int v52 = v64;
            if (v64) {
              atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            MIL::Passes::PalettizePerBlockKmeans(MILContext, (uint64_t *)&v51, *(_DWORD *)(**(void **)(a1 + 8) + 4), (uint64_t)&v53, (uint64_t **)&v56);
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, "invalid palettization mode.");
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
        }
        std::string::size_type v44 = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
        BOOL v51 = v63;
        int v52 = v64;
        if (v64) {
          atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MIL::Passes::PalettizePerBlockUniform(v44, (uint64_t *)&v51, *(_DWORD *)(**(void **)(a1 + 8) + 4), (uint64_t **)&v56);
      }
    }
    else if (v17)
    {
      goto LABEL_16;
    }
LABEL_23:
    MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
    goto LABEL_74;
  }
  memset(v66, 0, sizeof(v66));
  int v67 = 1065353216;
  int v26 = **v10;
  if (v26 != 3)
  {
    if (v26 != 2)
    {
      if (v26 == 1)
      {
        int v27 = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
        int v56 = v63;
        int v57 = v64;
        if (v64) {
          atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MIL::Passes::PalettizeKmeans(v27, (uint64_t *)&v56, *(_DWORD *)(**(void **)(a1 + 8) + 4));
      }
      std::string v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v46, "invalid palettization mode.");
      v46->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v46, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    BOOL v39 = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
    int v56 = v63;
    int v57 = v64;
    if (v64) {
      atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Passes::PalettizeUniform(v39, (uint64_t *)&v56, *(_DWORD *)(**(void **)(a1 + 8) + 4));
  }
  v65[0] = -1;
  int v40 = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
  int v56 = v63;
  int v57 = v64;
  if (v64) {
    atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Passes::PalettizeUnique(v40, (uint64_t *)&v56, v65, (uint64_t)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)v66, (uint64_t *)__p);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)__p);
  if (v57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v57);
  }
  if (v65[0] != -1)
  {
    Opsetuint64_t Name = MIL::Matching::MatchView::GetOpsetName(&v47);
    std::string::basic_string[abi:ne180100]<0>(v65, "constexpr_lut_to_dense");
  }
  MIL::Transform::MatchContext::RejectMatch((uint64_t)a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v66);
LABEL_74:
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&v47);
}

void sub_20F411B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v32 - 112);
  int v34 = *(std::__shared_weak_count **)(v32 - 152);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0,std::allocator<MIL::Passes::PalettizeWeights(MIL::Transform::ProgramTransformer &,MIL::Passes::PalettizationOptions const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

uint64_t std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 40 * v6;
    std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20F411E00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const*,std::shared_ptr<MIL::IRValue const> const&,0>(void *a1, void *a2, uint64_t *a3)
{
  *a1 = *a2;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  unsigned int v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription(v4, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_20F411E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Passes::RegisterOpsetIfNot(MIL::Opsets::Common::ios15 **a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(MIL::Opsets::Common::ios15 *))(*(void *)*a1 + 16))(*a1);
  if (!result)
  {
    int v6 = *((char *)a2 + 23);
    if (v6 < 0)
    {
      if (a2[1] != 5) {
        goto LABEL_36;
      }
      a2 = (uint64_t *)*a2;
    }
    else if (v6 != 5)
    {
      goto LABEL_36;
    }
    if (*(_DWORD *)a2 == 829648745 && *((unsigned char *)a2 + 4) == 53)
    {
      char v12 = *a1;
      return MIL::Opsets::Common::ios15::Registerios15Opsets(v12, v5);
    }
    else if (*(_DWORD *)a2 == 829648745 && *((unsigned char *)a2 + 4) == 54)
    {
      uint64_t v13 = *a1;
      return MIL::Opsets::Common::ios16::Registerios16Opsets(v13, v5);
    }
    else if (*(_DWORD *)a2 == 829648745 && *((unsigned char *)a2 + 4) == 55)
    {
      char v14 = *a1;
      return MIL::Opsets::Common::ios17::Registerios17Opsets(v14, v5);
    }
    else
    {
      if (*(_DWORD *)a2 != 829648745 || *((unsigned char *)a2 + 4) != 56)
      {
LABEL_36:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported opset name");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      uint64_t v11 = *a1;
      return MIL::Opsets::Common::ios18::Registerios18Opsets(v11, v5);
    }
  }
  return result;
}

void sub_20F412020(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Passes::CompressFp32ValueToFp16(MIL::IRConstantDimension *a1, uint64_t *a2)
{
  v7[18] = *MEMORY[0x263EF8340];
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    int v6 = v4;
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v5 = v3;
  MIL::ValueInferenceUtils::GetCastedTensor<MIL::Fp16>(&v5, v7);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::ToIRTensorValue((uint64_t)v7, a1);
}

void sub_20F4121F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  for (uint64_t i = 40; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v30 + i);
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(&a21);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizeValueAsymmetricUInt8(MIL::IRConstantDimension *a1, uint64_t *a2, uint64_t a3)
{
  v54[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v41[0] = v6;
  v41[1] = v5;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v42);
  v54[0] = &unk_26C259F58;
  v54[1] = MIL::MathOps::MinimumOp<float>;
  v54[3] = v54;
  MIL::ValueInference::Tensor<float>::Reduce(v42, (unint64_t **)&v40, 1, (uint64_t)v54, (uint64_t)&v34);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v54);
  v53[0] = &unk_26C259F58;
  v53[1] = MIL::MathOps::MaximumOp<float>;
  v53[3] = v53;
  MIL::ValueInference::Tensor<float>::Reduce(v42, (unint64_t **)&v40, 1, (uint64_t)v53, (uint64_t)v28);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v53);
  v52[0] = &unk_26C25A008;
  v52[1] = MIL::MathOps::NegateOp<float>;
  v52[3] = v52;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v34, (uint64_t)v52, (uint64_t)&v24);
  v51[0] = &unk_26C25A008;
  v51[1] = MIL::MathOps::ReluOp<float>;
  v51[3] = v51;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v24, (uint64_t)v51, (uint64_t)v27);
  v50[0] = &unk_26C25A008;
  v50[1] = MIL::MathOps::NegateOp<float>;
  v50[3] = v50;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v27, (uint64_t)v50, (uint64_t)&__src);
  if ((void)__p)
  {
    *((void *)&__p + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v44;
  uint64_t v36 = v45;
  uint64_t v45 = 0;
  long long v44 = 0uLL;
  if ((void)v37)
  {
    *((void *)&v37 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v37;
    operator delete((void *)v37);
  }
  long long v37 = v46;
  uint64_t v8 = v47;
  uint64_t v47 = 0;
  long long v46 = 0uLL;
  uint64_t v38 = v8;
  uint64_t v39 = v48;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v50);
  MIL::ValueInference::Tensor<float>::~Tensor(v27);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v51);
  MIL::ValueInference::Tensor<float>::~Tensor(&v24);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v52);
  v49[0] = &unk_26C25A008;
  v49[1] = MIL::MathOps::ReluOp<float>;
  v49[3] = v49;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v28, (uint64_t)v49, (uint64_t)&__src);
  if ((void)v29)
  {
    *((void *)&v29 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v29;
    operator delete((void *)v29);
  }
  long long v29 = v44;
  uint64_t v30 = v45;
  uint64_t v45 = 0;
  long long v44 = 0uLL;
  if ((void)v31)
  {
    *((void *)&v31 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
    operator delete((void *)v31);
  }
  long long v31 = v46;
  uint64_t v9 = v47;
  uint64_t v47 = 0;
  long long v46 = 0uLL;
  uint64_t v32 = v9;
  uint64_t v33 = v48;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v49);
  long long v44 = 0uLL;
  __src = 0;
  int v10 = operator new(4uLL);
  BOOL v24 = v10;
  *int v10 = 1132396544;
  unint64_t v25 = v10 + 1;
  int v26 = v10 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(v27, &__src, &v24);
  if (v24)
  {
    unint64_t v25 = v24;
    operator delete(v24);
  }
  if (__src)
  {
    *(void *)&long long v44 = __src;
    operator delete(__src);
  }
  long long v44 = 0uLL;
  __src = 0;
  uint64_t v11 = operator new(4uLL);
  unint64_t v21 = v11;
  *uint64_t v11 = 0;
  uint64_t v22 = v11 + 1;
  int v23 = v11 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v24, &__src, &v21);
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  if (__src)
  {
    *(void *)&long long v44 = __src;
    operator delete(__src);
  }
  long long v44 = 0uLL;
  __src = 0;
  char v12 = operator new(4uLL);
  char v18 = v12;
  *char v12 = 1132396544;
  long long v19 = v12 + 1;
  long long v20 = v12 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v21, &__src, &v18);
  if (v18)
  {
    long long v19 = v18;
    operator delete(v18);
  }
  if (__src)
  {
    *(void *)&long long v44 = __src;
    operator delete(__src);
  }
  memset(v15, 0, sizeof(v15));
  if ((a3 & 0xFF00000000) != 0)
  {
    uint64_t v13 = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v42);
    if ((int)a3 < 0) {
      a3 = (int)(((v13[1] - *v13) >> 3) + a3);
    }
    else {
      a3 = a3;
    }
    __src = *(void **)(*(void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v42) + 8 * a3);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v15, (char *)&__src, (uint64_t)&v44, 1uLL);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  (*(void (**)(uint64_t))(*(void *)v14 + 88))(v14);
}

void sub_20F412A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&a21);
  MIL::ValueInference::Tensor<float>::~Tensor(&a29);
  MIL::ValueInference::Tensor<float>::~Tensor(&a37);
  MIL::ValueInference::Tensor<float>::~Tensor(&a45);
  MIL::ValueInference::Tensor<float>::~Tensor(&a53);
  MIL::ValueInference::Tensor<float>::~Tensor(&a61);
  MIL::ValueInference::Tensor<float>::~Tensor(&a69);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x220]);
  unsigned int v71 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v71;
    operator delete(v71);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x288]);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::CreateFloatTensor(void *a1@<X0>, void *a2@<X8>)
{
  double v4 = MIL::ValueInference::Tensor<float>::Tensor((uint64_t)a2);
  uint64_t v5 = (*(uint64_t (**)(double))(*(void *)*a1 + 32))(v4);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) == 5)
  {
    uint64_t v6 = (std::__shared_weak_count *)a1[1];
    uint64_t v19 = *a1;
    long long v20 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::ValueInference::Tensor<float>::FromIRTensorValue(&v19, (uint64_t)&v21);
    uint64_t v7 = (void *)a2[1];
    if (v7)
    {
      a2[2] = v7;
      operator delete(v7);
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = 0;
    }
    uint64_t v8 = (void *)a2[4];
    *(_OWORD *)(a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v22;
    a2[3] = v23;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    if (v8)
    {
      a2[5] = v8;
      operator delete(v8);
      a2[4] = 0;
      a2[5] = 0;
      a2[6] = 0;
    }
    *((_OWORD *)a2 + 2) = v24;
    uint64_t v9 = v25;
    uint64_t v10 = v26;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
    a2[6] = v9;
    a2[7] = v10;
    MIL::ValueInference::Tensor<float>::~Tensor(&v21);
    uint64_t v11 = v20;
    if (v20) {
LABEL_9:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  else
  {
    char v12 = (std::__shared_weak_count *)a1[1];
    uint64_t v17 = *a1;
    char v18 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::ValueInferenceUtils::GetCastedTensor<float>(&v17, &v21);
    uint64_t v13 = (void *)a2[1];
    if (v13)
    {
      a2[2] = v13;
      operator delete(v13);
      a2[1] = 0;
      a2[2] = 0;
      a2[3] = 0;
    }
    uint64_t v14 = (void *)a2[4];
    *(_OWORD *)(a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v22;
    a2[3] = v23;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    if (v14)
    {
      a2[5] = v14;
      operator delete(v14);
      a2[4] = 0;
      a2[5] = 0;
      a2[6] = 0;
    }
    *((_OWORD *)a2 + 2) = v24;
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    uint64_t v25 = 0;
    long long v24 = 0uLL;
    a2[6] = v15;
    a2[7] = v16;
    MIL::ValueInference::Tensor<float>::~Tensor(&v21);
    uint64_t v11 = v18;
    if (v18) {
      goto LABEL_9;
    }
  }
}

void sub_20F412E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(v10);
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::DeduceAxesToReduce(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  if ((a2 & 0xFF00000000) != 0)
  {
    if ((int)a2 < 0) {
      uint64_t v5 = (int)a2 + (int)a1;
    }
    else {
      uint64_t v5 = a2;
    }
    std::vector<unsigned long long>::reserve((void **)a3, a1 - 1);
    if (a1)
    {
      uint64_t v6 = 0;
      do
      {
        if (v6 != v5)
        {
          uint64_t v8 = *(void **)(a3 + 8);
          unint64_t v7 = *(void *)(a3 + 16);
          if ((unint64_t)v8 >= v7)
          {
            uint64_t v10 = *(void **)a3;
            uint64_t v11 = ((uint64_t)v8 - *(void *)a3) >> 3;
            unint64_t v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v13 = v7 - (void)v10;
            if (v13 >> 2 > v12) {
              unint64_t v12 = v13 >> 2;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v14 = v12;
            }
            if (v14)
            {
              uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v14);
              uint64_t v10 = *(void **)a3;
              uint64_t v8 = *(void **)(a3 + 8);
            }
            else
            {
              uint64_t v15 = 0;
            }
            uint64_t v16 = &v15[8 * v11];
            *(void *)uint64_t v16 = v6;
            uint64_t v9 = v16 + 8;
            while (v8 != v10)
            {
              uint64_t v17 = *--v8;
              *((void *)v16 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v17;
              v16 -= 8;
            }
            *(void *)a3 = v16;
            *(void *)(a3 + 8) = v9;
            *(void *)(a3 + 16) = &v15[8 * v14];
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            *uint64_t v8 = v6;
            uint64_t v9 = v8 + 1;
          }
          *(void *)(a3 + 8) = v9;
        }
        ++v6;
      }
      while (v6 != a1);
    }
  }
  else
  {
    std::vector<unsigned long long>::reserve((void **)a3, a1);
    if (a1)
    {
      uint64_t v18 = 0;
      uint64_t v19 = (void *)(a3 + 16);
      long long v20 = *(void **)(a3 + 8);
      do
      {
        if ((unint64_t)v20 >= *v19)
        {
          long long v22 = *(void **)a3;
          uint64_t v23 = ((uint64_t)v20 - *(void *)a3) >> 3;
          unint64_t v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v25 = *v19 - (void)v22;
          if (v25 >> 2 > v24) {
            unint64_t v24 = v25 >> 2;
          }
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26)
          {
            int v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v26);
            long long v22 = *(void **)a3;
            long long v20 = *(void **)(a3 + 8);
          }
          else
          {
            int v27 = 0;
          }
          uint64_t v28 = &v27[8 * v23];
          *(void *)uint64_t v28 = v18;
          uint64_t v21 = v28 + 8;
          while (v20 != v22)
          {
            uint64_t v29 = *--v20;
            *((void *)v28 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v29;
            v28 -= 8;
          }
          *(void *)a3 = v28;
          *(void *)(a3 + 8) = v21;
          *(void *)(a3 + 16) = &v27[8 * v26];
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          void *v20 = v18;
          uint64_t v21 = v20 + 1;
        }
        *(void *)(a3 + 8) = v21;
        ++v18;
        long long v20 = v21;
      }
      while (v18 != a1);
    }
  }
}

void sub_20F4130DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float MIL::MathOps::MinimumOp<float>(float result, float a2)
{
  if (a2 < result) {
    return a2;
  }
  return result;
}

float MIL::MathOps::MaximumOp<float>(float result, float a2)
{
  if (result < a2) {
    return a2;
  }
  return result;
}

float MIL::MathOps::NegateOp<float>(float a1)
{
  return -a1;
}

float MIL::MathOps::ReluOp<float>(float a1)
{
  return fmaxf(a1, 0.0);
}

void *MIL::Passes::anonymous namespace'::CalculateScaleTensor@<X0>(MIL::ParserContext *this@<X1>, void *a2@<X0>, void *a3@<X2>, uint64_t a4@<X8>)
{
  v19[4] = *MEMORY[0x263EF8340];
  v19[0] = &unk_26C259F58;
  v19[1] = MIL::MathOps::SubOp<float>;
  v19[3] = v19;
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
  unint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v14, *(const void **)ProgramFirstSet, *(void *)(ProgramFirstSet + 8), (uint64_t)(*(void *)(ProgramFirstSet + 8) - *(void *)ProgramFirstSet) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(this, a2, (uint64_t)v19, &v14, (uint64_t)v17);
  v18[0] = &unk_26C259F58;
  v18[1] = MIL::MathOps::RealDivOp<float>;
  v18[3] = v18;
  uint64_t v9 = MIL::ParserContext::GetProgramFirstSet(this);
  long long __p = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(v17, a3, (uint64_t)v18, &__p, a4);
  if (__p)
  {
    unint64_t v12 = __p;
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v18);
  MIL::ValueInference::Tensor<float>::~Tensor(v17);
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
  return std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v19);
}

void sub_20F4132BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((void *)(v16 - 104));
  MIL::ValueInference::Tensor<float>::~Tensor(&a16);
  if (a13) {
    operator delete(a13);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((void *)(v16 - 72));
  _Unwind_Resume(a1);
}

void *MIL::Passes::anonymous namespace'::CalculateZeroPointTensor@<X0>(MIL::ParserContext *a1@<X0>, MIL::ParserContext *a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  v44[4] = *MEMORY[0x263EF8340];
  v44[0] = &unk_26C25A008;
  v44[1] = MIL::MathOps::NegateOp<float>;
  v44[3] = v44;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)a1, (uint64_t)v44, (uint64_t)&v32);
  v43[0] = &unk_26C259F58;
  v43[1] = MIL::MathOps::SubOp<float>;
  v43[3] = v43;
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a2);
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v28, *(const void **)ProgramFirstSet, *(void *)(ProgramFirstSet + 8), (uint64_t)(*(void *)(ProgramFirstSet + 8) - *(void *)ProgramFirstSet) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a2, a1, (uint64_t)v43, &v28, (uint64_t)v31);
  v42[0] = &unk_26C259F58;
  v42[1] = MIL::MathOps::RealDivOp<float>;
  v42[3] = v42;
  uint64_t v11 = MIL::ParserContext::GetProgramFirstSet(a1);
  long long __p = 0;
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v11, *(void *)(v11 + 8), (uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(&v32, v31, (uint64_t)v42, &__p, (uint64_t)v38);
  if (__p)
  {
    unint64_t v26 = __p;
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v42);
  MIL::ValueInference::Tensor<float>::~Tensor(v31);
  if (v28)
  {
    uint64_t v29 = v28;
    operator delete(v28);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v43);
  MIL::ValueInference::Tensor<float>::~Tensor(&v32);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v44);
  v41[0] = &unk_26C259F58;
  v41[1] = MIL::MathOps::MulOp<float>;
  _OWORD v41[3] = v41;
  uint64_t v12 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v38);
  long long v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(v38, a3, (uint64_t)v41, &v22, (uint64_t)&v32);
  v40[0] = &unk_26C25A008;
  v40[1] = MIL::MathOps::RoundOp<float>;
  v40[3] = v40;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v32, (uint64_t)v40, (uint64_t)a5);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v40);
  MIL::ValueInference::Tensor<float>::~Tensor(&v32);
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v41);
  v39[0] = &unk_26C259F58;
  v39[1] = MIL::MathOps::AddOp<float>;
  v39[3] = v39;
  uint64_t v13 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)a5);
  uint64_t v19 = 0;
  long long v20 = 0;
  uint64_t v21 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v19, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a5, a4, (uint64_t)v39, &v19, (uint64_t)&v32);
  unint64_t v14 = (void *)a5[1];
  if (v14)
  {
    a5[2] = v14;
    operator delete(v14);
    a5[1] = 0;
    a5[2] = 0;
    a5[3] = 0;
  }
  uint64_t v15 = (void *)a5[4];
  *(_OWORD *)(a5 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v33;
  a5[3] = v34;
  uint64_t v34 = 0;
  long long v33 = 0uLL;
  if (v15)
  {
    a5[5] = v15;
    operator delete(v15);
    a5[4] = 0;
    a5[5] = 0;
    a5[6] = 0;
  }
  *((_OWORD *)a5 + 2) = v35;
  uint64_t v16 = v36;
  uint64_t v17 = v37;
  uint64_t v36 = 0;
  long long v35 = 0uLL;
  a5[6] = v16;
  a5[7] = v17;
  MIL::ValueInference::Tensor<float>::~Tensor(&v32);
  if (v19)
  {
    long long v20 = v19;
    operator delete(v19);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v39);
  return MIL::ValueInference::Tensor<float>::~Tensor(v38);
}

void sub_20F4136E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100]((void *)(v39 - 248));
  MIL::ValueInference::Tensor<float>::~Tensor(v38);
  MIL::ValueInference::Tensor<float>::~Tensor(&a38);
  _Unwind_Resume(a1);
}

void *MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor@<X0>(MIL::ParserContext *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void *a4@<X3>, void *a5@<X4>, void *a6@<X8>)
{
  void v51[4] = *MEMORY[0x263EF8340];
  v51[0] = &unk_26C259DE8;
  v51[3] = v51;
  MIL::ValueInference::Tensor<float>::ForEach(a2, (uint64_t)v51, (uint64_t)v45);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v51);
  v50[0] = &unk_26C259F58;
  v50[1] = MIL::MathOps::RealDivOp<float>;
  v50[3] = v50;
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(a1);
  long long v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v35, *(const void **)ProgramFirstSet, *(void *)(ProgramFirstSet + 8), (uint64_t)(*(void *)(ProgramFirstSet + 8) - *(void *)ProgramFirstSet) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a1, v45, (uint64_t)v50, &v35, (uint64_t)v38);
  v49[0] = &unk_26C25A008;
  v49[1] = MIL::MathOps::RoundOp<float>;
  v49[3] = v49;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v38, (uint64_t)v49, (uint64_t)&v39);
  v48[0] = &unk_26C259F58;
  v48[1] = MIL::MathOps::AddOp<float>;
  v48[3] = v48;
  uint64_t v12 = MIL::ParserContext::GetProgramFirstSet(a1);
  long long __p = 0;
  long long v33 = 0;
  uint64_t v34 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)v12, *(void *)(v12 + 8), (uint64_t)(*(void *)(v12 + 8) - *(void *)v12) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(&v39, a3, (uint64_t)v48, &__p, (uint64_t)a6);
  if (__p)
  {
    long long v33 = __p;
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v48);
  MIL::ValueInference::Tensor<float>::~Tensor(&v39);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v49);
  MIL::ValueInference::Tensor<float>::~Tensor(v38);
  if (v35)
  {
    uint64_t v36 = v35;
    operator delete(v35);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v50);
  v47[0] = &unk_26C259F58;
  v47[1] = MIL::MathOps::MaximumOp<float>;
  v47[3] = v47;
  uint64_t v13 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)a6);
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v29, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a6, a4, (uint64_t)v47, &v29, (uint64_t)&v39);
  uint64_t v15 = (void **)(a6 + 1);
  unint64_t v14 = (void *)a6[1];
  if (v14)
  {
    a6[2] = v14;
    operator delete(v14);
    *uint64_t v15 = 0;
    a6[2] = 0;
    a6[3] = 0;
  }
  uint64_t v17 = a6 + 4;
  uint64_t v16 = (void *)a6[4];
  *(_OWORD *)(a6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v40;
  a6[3] = v41;
  uint64_t v41 = 0;
  long long v40 = 0uLL;
  if (v16)
  {
    a6[5] = v16;
    operator delete(v16);
    *uint64_t v17 = 0;
    a6[5] = 0;
    a6[6] = 0;
  }
  *((_OWORD *)a6 + 2) = v42;
  uint64_t v18 = v43;
  uint64_t v19 = v44;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  a6[6] = v18;
  a6[7] = v19;
  MIL::ValueInference::Tensor<float>::~Tensor(&v39);
  if (v29)
  {
    uint64_t v30 = v29;
    operator delete(v29);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v47);
  v46[0] = &unk_26C259F58;
  v46[1] = MIL::MathOps::MinimumOp<float>;
  v46[3] = v46;
  uint64_t v20 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)a6);
  unint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v26, *(const void **)v20, *(void *)(v20 + 8), (uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(a6, a5, (uint64_t)v46, &v26, (uint64_t)&v39);
  uint64_t v21 = *v15;
  if (*v15)
  {
    a6[2] = v21;
    operator delete(v21);
    *uint64_t v15 = 0;
    a6[2] = 0;
    a6[3] = 0;
  }
  *(_OWORD *)(a6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v40;
  a6[3] = v41;
  uint64_t v41 = 0;
  long long v40 = 0uLL;
  long long v22 = (void *)a6[4];
  if (v22)
  {
    a6[5] = v22;
    operator delete(v22);
    *uint64_t v17 = 0;
    a6[5] = 0;
    a6[6] = 0;
  }
  *((_OWORD *)a6 + 2) = v42;
  uint64_t v23 = v43;
  uint64_t v24 = v44;
  uint64_t v43 = 0;
  long long v42 = 0uLL;
  a6[6] = v23;
  a6[7] = v24;
  MIL::ValueInference::Tensor<float>::~Tensor(&v39);
  if (v26)
  {
    uint64_t v27 = v26;
    operator delete(v26);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v46);
  return MIL::ValueInference::Tensor<float>::~Tensor(v45);
}

void sub_20F413C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46)
{
  if (__p) {
    operator delete(__p);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](&a46);
  MIL::ValueInference::Tensor<float>::~Tensor(v46);
  MIL::ValueInference::Tensor<float>::~Tensor(&a38);
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::ConvertScaleValue(MIL::IRConstantDimension *a1, void *a2, uint64_t *a3)
{
  MIL::ValueInference::Tensor<float>::Reshape(a2, a3, (uint64_t)v4);
  MIL::ValueInference::Tensor<float>::ToIRTensorValue((uint64_t)v4, a1);
}

void sub_20F413D98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor((uint64_t *)va);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MIL::ValueInference::Tensor<float>::~Tensor((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::ConvertZeroPointValue(MIL::IRConstantDimension *a1, void *a2, uint64_t *a3, int a4)
{
  MIL::ValueInference::Tensor<float>::Reshape(a2, a3, (uint64_t)v9);
  memset(v8, 0, sizeof(v8));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v8, (const void *)*a3, a3[1], (a3[1] - *a3) >> 3);
  if (a4 == 14)
  {
    MIL::ValueInference::Tensor<float>::Cast<unsigned char>(v9, (uint64_t)v7);
    MIL::IRTensorValueType::Make(a1, 14, (MIL::MILContext ***)v8);
  }
  MIL::ValueInference::Tensor<float>::Cast<signed char>(v9, (uint64_t)v7);
  MIL::IRTensorValueType::Make(a1, 9, (MIL::MILContext ***)v8);
}

void sub_20F413FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (a10) {
  if (__p)
  }
    operator delete(__p);
  MIL::ValueInference::Tensor<signed char>::~Tensor(&a14);
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  MIL::ValueInference::Tensor<float>::~Tensor((void *)(v23 - 96));
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::ConvertQuantizedDataValue(MIL::IRConstantDimension *a1, MIL::ParserContext *this, int a3)
{
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet(this);
  memset(v8, 0, sizeof(v8));
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(v8, *(const void **)ProgramFirstSet, *(void *)(ProgramFirstSet + 8), (uint64_t)(*(void *)(ProgramFirstSet + 8) - *(void *)ProgramFirstSet) >> 3);
  if (a3 == 14)
  {
    MIL::ValueInference::Tensor<float>::Cast<unsigned char>(this, (uint64_t)v7);
    MIL::IRTensorValueType::Make(a1, 14, v8);
  }
  MIL::ValueInference::Tensor<float>::Cast<signed char>(this, (uint64_t)v7);
  MIL::IRTensorValueType::Make(a1, 9, v8);
}

void sub_20F4142C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
  if (__p)
  }
    operator delete(__p);
  MIL::ValueInference::Tensor<signed char>::~Tensor(&a14);
  uint64_t v16 = *(void **)(v14 - 56);
  if (v16)
  {
    *(void *)(v14 - 48) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizeValueAsymmetricInt8(MIL::IRConstantDimension *a1, uint64_t *a2, uint64_t a3)
{
  v54[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v41[0] = v6;
  v41[1] = v5;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v42);
  v54[0] = &unk_26C259F58;
  v54[1] = MIL::MathOps::MinimumOp<float>;
  v54[3] = v54;
  MIL::ValueInference::Tensor<float>::Reduce(v42, (unint64_t **)&v40, 1, (uint64_t)v54, (uint64_t)&v34);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v54);
  v53[0] = &unk_26C259F58;
  v53[1] = MIL::MathOps::MaximumOp<float>;
  v53[3] = v53;
  MIL::ValueInference::Tensor<float>::Reduce(v42, (unint64_t **)&v40, 1, (uint64_t)v53, (uint64_t)v28);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v53);
  v52[0] = &unk_26C25A008;
  v52[1] = MIL::MathOps::NegateOp<float>;
  v52[3] = v52;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v34, (uint64_t)v52, (uint64_t)&v24);
  v51[0] = &unk_26C25A008;
  v51[1] = MIL::MathOps::ReluOp<float>;
  v51[3] = v51;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v24, (uint64_t)v51, (uint64_t)v27);
  v50[0] = &unk_26C25A008;
  v50[1] = MIL::MathOps::NegateOp<float>;
  v50[3] = v50;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v27, (uint64_t)v50, (uint64_t)&__src);
  if ((void)__p)
  {
    *((void *)&__p + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v44;
  uint64_t v36 = v45;
  uint64_t v45 = 0;
  long long v44 = 0uLL;
  if ((void)v37)
  {
    *((void *)&v37 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v37;
    operator delete((void *)v37);
  }
  long long v37 = v46;
  uint64_t v8 = v47;
  uint64_t v47 = 0;
  long long v46 = 0uLL;
  uint64_t v38 = v8;
  uint64_t v39 = v48;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v50);
  MIL::ValueInference::Tensor<float>::~Tensor(v27);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v51);
  MIL::ValueInference::Tensor<float>::~Tensor(&v24);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v52);
  v49[0] = &unk_26C25A008;
  v49[1] = MIL::MathOps::ReluOp<float>;
  v49[3] = v49;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v28, (uint64_t)v49, (uint64_t)&__src);
  if ((void)v29)
  {
    *((void *)&v29 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v29;
    operator delete((void *)v29);
  }
  long long v29 = v44;
  uint64_t v30 = v45;
  uint64_t v45 = 0;
  long long v44 = 0uLL;
  if ((void)v31)
  {
    *((void *)&v31 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v31;
    operator delete((void *)v31);
  }
  long long v31 = v46;
  uint64_t v9 = v47;
  uint64_t v47 = 0;
  long long v46 = 0uLL;
  uint64_t v32 = v9;
  uint64_t v33 = v48;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v49);
  long long v44 = 0uLL;
  __src = 0;
  uint64_t v10 = operator new(4uLL);
  uint64_t v24 = v10;
  *uint64_t v10 = 1132396544;
  uint64_t v25 = v10 + 1;
  unint64_t v26 = v10 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(v27, &__src, &v24);
  if (v24)
  {
    uint64_t v25 = v24;
    operator delete(v24);
  }
  if (__src)
  {
    *(void *)&long long v44 = __src;
    operator delete(__src);
  }
  long long v44 = 0uLL;
  __src = 0;
  uint64_t v11 = operator new(4uLL);
  uint64_t v21 = v11;
  *uint64_t v11 = -1023410176;
  long long v22 = v11 + 1;
  uint64_t v23 = v11 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v24, &__src, &v21);
  if (v21)
  {
    long long v22 = v21;
    operator delete(v21);
  }
  if (__src)
  {
    *(void *)&long long v44 = __src;
    operator delete(__src);
  }
  long long v44 = 0uLL;
  __src = 0;
  uint64_t v12 = operator new(4uLL);
  uint64_t v18 = v12;
  *uint64_t v12 = 1123942400;
  uint64_t v19 = v12 + 1;
  uint64_t v20 = v12 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v21, &__src, &v18);
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  if (__src)
  {
    *(void *)&long long v44 = __src;
    operator delete(__src);
  }
  memset(v15, 0, sizeof(v15));
  if ((a3 & 0xFF00000000) != 0)
  {
    uint64_t v13 = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v42);
    if ((int)a3 < 0) {
      a3 = (int)(((v13[1] - *v13) >> 3) + a3);
    }
    else {
      a3 = a3;
    }
    __src = *(void **)(*(void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v42) + 8 * a3);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v15, (char *)&__src, (uint64_t)&v44, 1uLL);
  }
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  (*(void (**)(uint64_t))(*(void *)v14 + 88))(v14);
}

void sub_20F414AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&a21);
  MIL::ValueInference::Tensor<float>::~Tensor(&a29);
  MIL::ValueInference::Tensor<float>::~Tensor(&a37);
  MIL::ValueInference::Tensor<float>::~Tensor(&a45);
  MIL::ValueInference::Tensor<float>::~Tensor(&a53);
  MIL::ValueInference::Tensor<float>::~Tensor(&a61);
  MIL::ValueInference::Tensor<float>::~Tensor(&a69);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x220]);
  unsigned int v71 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v71;
    operator delete(v71);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x288]);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizeValueNoZeroPointUInt8(MIL::IRConstantDimension *a1, uint64_t *a2, uint64_t a3)
{
  v57[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v42[0] = v6;
  v42[1] = v5;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v43);
  v57[0] = &unk_26C259F58;
  v57[1] = MIL::MathOps::MaximumOp<float>;
  v57[3] = v57;
  MIL::ValueInference::Tensor<float>::Reduce(&v43, (unint64_t **)&v41, 1, (uint64_t)v57, (uint64_t)v35);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v57);
  v56[0] = &unk_26C25A008;
  v56[1] = MIL::MathOps::ReluOp<float>;
  v56[3] = v56;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v35, (uint64_t)v56, (uint64_t)&__src);
  if ((void)__p)
  {
    *((void *)&__p + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v50;
  uint64_t v37 = v51;
  uint64_t v51 = 0;
  long long v50 = 0uLL;
  if ((void)v38)
  {
    *((void *)&v38 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v38;
    operator delete((void *)v38);
  }
  long long v38 = v52;
  uint64_t v8 = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v39 = v8;
  uint64_t v40 = v54;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v56);
  uint64_t v9 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v35);
  __n128 v32 = 0uLL;
  uint64_t v33 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v32, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&v32, (uint64_t)&v34);
  if (v32.n128_u64[0])
  {
    v32.n128_u64[1] = v32.n128_u64[0];
    operator delete((void *)v32.n128_u64[0]);
  }
  long long v50 = 0uLL;
  __src = 0;
  uint64_t v10 = operator new(4uLL);
  uint64_t v28 = v10;
  *uint64_t v10 = 1132396544;
  long long v29 = v10 + 1;
  uint64_t v30 = v10 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(v31, &__src, &v28);
  if (v28)
  {
    long long v29 = v28;
    operator delete(v28);
  }
  if (__src)
  {
    *(void *)&long long v50 = __src;
    operator delete(__src);
  }
  long long v50 = 0uLL;
  __src = 0;
  uint64_t v11 = operator new(4uLL);
  uint64_t v25 = v11;
  *uint64_t v11 = 0;
  unint64_t v26 = v11 + 1;
  uint64_t v27 = v11 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v28, &__src, &v25);
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (__src)
  {
    *(void *)&long long v50 = __src;
    operator delete(__src);
  }
  long long v50 = 0uLL;
  __src = 0;
  uint64_t v12 = operator new(4uLL);
  long long v22 = v12;
  *uint64_t v12 = 1132396544;
  uint64_t v23 = v12 + 1;
  uint64_t v24 = v12 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v25, &__src, &v22);
  if (v22)
  {
    uint64_t v23 = v22;
    operator delete(v22);
  }
  if (__src)
  {
    *(void *)&long long v50 = __src;
    operator delete(__src);
  }
  uint64_t v13 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v22);
  __n128 v19 = 0uLL;
  uint64_t v20 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v19, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&v19, (uint64_t)v21);
  if (v19.n128_u64[0])
  {
    v19.n128_u64[1] = v19.n128_u64[0];
    operator delete((void *)v19.n128_u64[0]);
  }
  v55[0] = &unk_26C25A008;
  v55[1] = MIL::MathOps::ReluOp<float>;
  v55[3] = v55;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v43, (uint64_t)v55, (uint64_t)&__src);
  if ((void)v44)
  {
    *((void *)&v44 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v44;
    operator delete((void *)v44);
  }
  long long v44 = v50;
  uint64_t v45 = v51;
  uint64_t v51 = 0;
  long long v50 = 0uLL;
  if ((void)v46)
  {
    *((void *)&v46 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v46;
    operator delete((void *)v46);
  }
  long long v46 = v52;
  uint64_t v14 = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v47 = v14;
  uint64_t v48 = v54;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v55);
  memset(v17, 0, sizeof(v17));
  if ((a3 & 0xFF00000000) != 0)
  {
    uint64_t v15 = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v43);
    if ((int)a3 < 0) {
      a3 = (int)(((v15[1] - *v15) >> 3) + a3);
    }
    else {
      a3 = a3;
    }
    __src = *(void **)(*(void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v43) + 8 * a3);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v17, (char *)&__src, (uint64_t)&v50, 1uLL);
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  (*(void (**)(uint64_t))(*(void *)v16 + 88))(v16);
}

void sub_20F415430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&a21);
  MIL::ValueInference::Tensor<float>::~Tensor(&a32);
  MIL::ValueInference::Tensor<float>::~Tensor(&a40);
  MIL::ValueInference::Tensor<float>::~Tensor(&a48);
  MIL::ValueInference::Tensor<float>::~Tensor(&a56);
  MIL::ValueInference::Tensor<float>::~Tensor(&a64);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x210]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x250]);
  v66 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v66;
    operator delete(v66);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x2B8]);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::QuantizeValueSymmetricInt8(MIL::IRConstantDimension *a1, uint64_t *a2, uint64_t a3)
{
  v75[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v58[0] = v6;
  v58[1] = v5;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v59);
  v75[0] = &unk_26C259F58;
  v75[1] = MIL::MathOps::MinimumOp<float>;
  v75[3] = v75;
  MIL::ValueInference::Tensor<float>::Reduce(v59, (unint64_t **)&v57, 1, (uint64_t)v75, (uint64_t)&v51);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v75);
  v74[0] = &unk_26C259F58;
  v74[1] = MIL::MathOps::MaximumOp<float>;
  v74[3] = v74;
  MIL::ValueInference::Tensor<float>::Reduce(v59, (unint64_t **)&v57, 1, (uint64_t)v74, (uint64_t)v45);
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v74);
  v73[0] = &unk_26C25A008;
  v73[1] = MIL::MathOps::NegateOp<float>;
  v73[3] = v73;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v51, (uint64_t)v73, (uint64_t)&v38);
  v72[0] = &unk_26C25A008;
  v72[1] = MIL::MathOps::ReluOp<float>;
  v72[3] = v72;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v38, (uint64_t)v72, (uint64_t)v44);
  v71[0] = &unk_26C25A008;
  v71[1] = MIL::MathOps::NegateOp<float>;
  v71[3] = v71;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v44, (uint64_t)v71, (uint64_t)&__src);
  if ((void)__p)
  {
    *((void *)&__p + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v61;
  uint64_t v53 = v62;
  uint64_t v62 = 0;
  long long v61 = 0uLL;
  if ((void)v54)
  {
    *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54;
    operator delete((void *)v54);
  }
  long long v54 = v63;
  uint64_t v8 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  uint64_t v55 = v8;
  uint64_t v56 = v65;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v71);
  MIL::ValueInference::Tensor<float>::~Tensor(v44);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v72);
  MIL::ValueInference::Tensor<float>::~Tensor(&v38);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v73);
  v70[0] = &unk_26C25A008;
  v70[1] = MIL::MathOps::ReluOp<float>;
  v70[3] = v70;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v45, (uint64_t)v70, (uint64_t)&__src);
  if ((void)v46)
  {
    *((void *)&v46 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v46;
    operator delete((void *)v46);
  }
  long long v46 = v61;
  uint64_t v47 = v62;
  uint64_t v62 = 0;
  long long v61 = 0uLL;
  if ((void)v48)
  {
    *((void *)&v48 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v48;
    operator delete((void *)v48);
  }
  long long v48 = v63;
  uint64_t v9 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  uint64_t v49 = v9;
  uint64_t v50 = v65;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v70);
  v69[0] = &unk_26C25A008;
  v69[1] = MIL::MathOps::AbsOp<float>;
  v69[3] = v69;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v51, (uint64_t)v69, (uint64_t)v44);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v69);
  v68[0] = &unk_26C25A008;
  v68[1] = MIL::MathOps::AbsOp<float>;
  v68[3] = v68;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v45, (uint64_t)v68, (uint64_t)&v38);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v68);
  v67[0] = &unk_26C259F58;
  v67[1] = MIL::MathOps::MaximumOp<float>;
  v67[3] = v67;
  uint64_t v10 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v44);
  long long v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v35, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
  MIL::ValueInference::BinaryOp<float,float>(v44, &v38, (uint64_t)v67, &v35, (uint64_t)&__src);
  if ((void)v39)
  {
    *((void *)&v39 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v39;
    operator delete((void *)v39);
  }
  long long v39 = v61;
  uint64_t v40 = v62;
  uint64_t v62 = 0;
  long long v61 = 0uLL;
  if ((void)v41)
  {
    *((void *)&v41 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v41;
    operator delete((void *)v41);
  }
  long long v41 = v63;
  uint64_t v11 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  uint64_t v42 = v11;
  uint64_t v43 = v65;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  if (v35)
  {
    uint64_t v36 = v35;
    operator delete(v35);
  }
  std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](v67);
  v66[0] = &unk_26C25A008;
  v66[1] = MIL::MathOps::NegateOp<float>;
  v66[3] = v66;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)&v38, (uint64_t)v66, (uint64_t)&__src);
  if ((void)__p)
  {
    *((void *)&__p + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = __p;
    operator delete((void *)__p);
  }
  long long __p = v61;
  uint64_t v53 = v62;
  uint64_t v62 = 0;
  long long v61 = 0uLL;
  if ((void)v54)
  {
    *((void *)&v54 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54;
    operator delete((void *)v54);
  }
  long long v54 = v63;
  uint64_t v12 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  uint64_t v55 = v12;
  uint64_t v56 = v65;
  MIL::ValueInference::Tensor<float>::~Tensor(&__src);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v66);
  if ((void)v46)
  {
    *((void *)&v46 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v46;
    operator delete((void *)v46);
  }
  long long v46 = v39;
  uint64_t v47 = v40;
  uint64_t v40 = 0;
  long long v39 = 0uLL;
  if ((void)v48)
  {
    *((void *)&v48 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v48;
    operator delete((void *)v48);
  }
  long long v48 = v41;
  uint64_t v13 = v42;
  uint64_t v42 = 0;
  long long v41 = 0uLL;
  uint64_t v49 = v13;
  uint64_t v50 = v43;
  long long v61 = 0uLL;
  __src = 0;
  uint64_t v14 = operator new(4uLL);
  long long v31 = v14;
  *uint64_t v14 = 1132331008;
  __n128 v32 = v14 + 1;
  uint64_t v33 = v14 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(v34, &__src, &v31);
  if (v31)
  {
    __n128 v32 = v31;
    operator delete(v31);
  }
  if (__src)
  {
    *(void *)&long long v61 = __src;
    operator delete(__src);
  }
  long long v61 = 0uLL;
  __src = 0;
  uint64_t v15 = operator new(4uLL);
  uint64_t v28 = v15;
  *uint64_t v15 = -1023541248;
  long long v29 = v15 + 1;
  uint64_t v30 = v15 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v31, &__src, &v28);
  if (v28)
  {
    long long v29 = v28;
    operator delete(v28);
  }
  if (__src)
  {
    *(void *)&long long v61 = __src;
    operator delete(__src);
  }
  long long v61 = 0uLL;
  __src = 0;
  uint64_t v16 = operator new(4uLL);
  uint64_t v25 = v16;
  *uint64_t v16 = 1123942400;
  unint64_t v26 = v16 + 1;
  uint64_t v27 = v16 + 1;
  MIL::ValueInference::Tensor<float>::Tensor(&v28, &__src, &v25);
  if (v25)
  {
    unint64_t v26 = v25;
    operator delete(v25);
  }
  if (__src)
  {
    *(void *)&long long v61 = __src;
    operator delete(__src);
  }
  uint64_t v17 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v25);
  __n128 v22 = 0uLL;
  uint64_t v23 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v22, *(const void **)v17, *(void *)(v17 + 8), (uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 3);
  MIL::ValueInference::Tensor<float>::Zeros(&v22, (uint64_t)v24);
  if (v22.n128_u64[0])
  {
    v22.n128_u64[1] = v22.n128_u64[0];
    operator delete((void *)v22.n128_u64[0]);
  }
  memset(v20, 0, sizeof(v20));
  if ((a3 & 0xFF00000000) != 0)
  {
    uint64_t v18 = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v59);
    if ((int)a3 < 0) {
      a3 = (int)(((v18[1] - *v18) >> 3) + a3);
    }
    else {
      a3 = a3;
    }
    __src = *(void **)(*(void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v59) + 8 * a3);
    std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)v20, (char *)&__src, (uint64_t)&v61, 1uLL);
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  (*(void (**)(uint64_t))(*(void *)v19 + 88))(v19);
}

void sub_20F416104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (__p) {
    operator delete(__p);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&a21);
  MIL::ValueInference::Tensor<float>::~Tensor(&a32);
  MIL::ValueInference::Tensor<float>::~Tensor(&a40);
  MIL::ValueInference::Tensor<float>::~Tensor(&a48);
  MIL::ValueInference::Tensor<float>::~Tensor(&a56);
  MIL::ValueInference::Tensor<float>::~Tensor(&a64);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x210]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x250]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x290]);
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x2D0]);
  v66 = (void *)STACK[0x310];
  if (STACK[0x310])
  {
    STACK[0x318] = (unint64_t)v66;
    operator delete(v66);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&STACK[0x338]);
  if (v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v64);
  }
  _Unwind_Resume(a1);
}

float MIL::MathOps::AbsOp<float>(float a1)
{
  return fabsf(a1);
}

void MIL::Passes::SparsifyWithThreshold(MIL::IRConstantDimension *a1, uint64_t *a2, float a3)
{
  v31[23] = *MEMORY[0x263EF8340];
  float v25 = a3;
  uint64_t v5 = *a2;
  double v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v23[0] = v5;
  v23[1] = v4;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  v31[0] = &unk_26C25A0A8;
  v31[1] = &v25;
  v31[3] = v31;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v24, (uint64_t)v31, (uint64_t)v22);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v31);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 32))(v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 88))(v6);
  MIL::ValueInference::Tensor<float>::NonZero((uint64_t)v22, &v29);
  long long __p = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::vector<float>::reserve(&__p, 0xAAAAAAAAAAAAAAABLL * ((v30 - v29) >> 3));
  uint64_t v8 = v29;
  if (v30 != v29)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = (_DWORD *)MIL::ValueInference::Tensor<float>::operator[]((uint64_t)v22, (uint64_t *)(v8 + 24 * v9));
      uint64_t v11 = v10;
      uint64_t v12 = v27;
      if (v27 >= v28)
      {
        uint64_t v14 = (char *)__p;
        uint64_t v15 = (v27 - (unsigned char *)__p) >> 2;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v28 - (unsigned char *)__p;
        if ((v28 - (unsigned char *)__p) >> 1 > v16) {
          unint64_t v16 = v17 >> 1;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        if (v18)
        {
          uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v28, v18);
          uint64_t v14 = (char *)__p;
          uint64_t v12 = v27;
        }
        else
        {
          uint64_t v19 = 0;
        }
        uint64_t v20 = &v19[4 * v15];
        *(_DWORD *)uint64_t v20 = *v11;
        uint64_t v13 = v20 + 4;
        while (v12 != v14)
        {
          int v21 = *((_DWORD *)v12 - 1);
          v12 -= 4;
          *((_DWORD *)v20 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v21;
          v20 -= 4;
        }
        long long __p = v20;
        uint64_t v27 = v13;
        uint64_t v28 = &v19[4 * v18];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v27 = *v10;
        uint64_t v13 = v12 + 4;
      }
      uint64_t v27 = v13;
      ++v9;
      uint64_t v8 = v29;
    }
    while (v9 < 0xAAAAAAAAAAAAAAABLL * ((v30 - v29) >> 3));
  }
}

void sub_20F416838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,std::__shared_weak_count *a48,void *a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55)
{
  for (uint64_t i = 80; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v55 + i);
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  if (__p)
  {
    a37 = (uint64_t)__p;
    operator delete(__p);
  }
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(&a39);
  if (a48) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a48);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  *(void *)(v56 - 256) = &a52;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v56 - 256));
  MIL::ValueInference::Tensor<float>::~Tensor(&a12);
  MIL::ValueInference::Tensor<float>::~Tensor(&a22);
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::SparsifyWithPercentile(MIL::IRConstantDimension *a1, uint64_t *a2, float a3)
{
  v28[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *a2;
  uint64_t v7 = (std::__shared_weak_count *)a2[1];
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v26[0] = v6;
  v26[1] = v7;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  v28[0] = &unk_26C25A008;
  v28[1] = MIL::MathOps::AbsOp<float>;
  v28[3] = v28;
  MIL::ValueInference::Tensor<float>::ForEach((uint64_t)v27, (uint64_t)v28, (uint64_t)v25);
  std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](v28);
  DataView = (const void *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v25);
  uint64_t v9 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v25);
  long long __p = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&__p, DataView, v9 + 4 * v10, (v9 + 4 * v10 - (uint64_t)DataView) >> 2);
  if (a3 == 0.0)
  {
    uint64_t v11 = *a2;
    uint64_t v12 = a2[1];
    v21[0] = v11;
    v21[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::Passes::SparsifyWithThreshold(a1, v21, 0.0);
  }
  uint64_t v13 = (float *)__p;
  float v14 = (float)((float)(unint64_t)(((char *)v23 - (unsigned char *)__p) >> 2) * a3) + -1.0;
  unint64_t v15 = vcvtps_s32_f32(v14);
  unint64_t v16 = (float *)((char *)__p + 4 * v15);
  if (v16 != v23)
  {
    std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>((float *)__p, v16, v23, v14);
    uint64_t v13 = (float *)__p;
  }
  float v17 = v13[v15];
  uint64_t v18 = *a2;
  uint64_t v19 = a2[1];
  v20[0] = v18;
  v20[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Passes::SparsifyWithThreshold(a1, v20, v17);
}

void sub_20F416B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (__p) {
    operator delete(__p);
  }
  MIL::ValueInference::Tensor<float>::~Tensor(&a17);
  MIL::ValueInference::Tensor<float>::~Tensor(&a27);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::PalettizeKmeans(MIL::IRConstantDimension *a1, uint64_t *a2, int a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v15[0] = v6;
  v15[1] = v5;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v10 = 1;
  char v11 = 0;
  char v12 = 0;
  MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v16);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
}

void sub_20F416DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (__p) {
    operator delete(__p);
  }
  a16 = &a22;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  MIL::ValueInference::Tensor<float>::~Tensor((void *)(v23 - 128));
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::TransformDataToPoints(MIL::ParserContext *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v5 = *(void *)a2;
  if (*(unsigned char *)(a2 + 16)) {
    unint64_t v6 = *(void *)(a2 + 8);
  }
  else {
    unint64_t v6 = 0;
  }
  long long v41 = 0;
  uint64_t v42 = 0;
  v43[0] = 0;
  uint64_t ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet(a1);
  std::vector<MIL::Passes::BlockInfo>::reserve((void **)&v41, (uint64_t)(ProgramFirstSet[1] - *ProgramFirstSet) >> 3);
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v9 = (void *)MIL::ParserContext::GetProgramFirstSet(a1);
    if (i >= (uint64_t)(v9[1] - *v9) >> 3) {
      break;
    }
    uint64_t v10 = v42;
    if (i == v6)
    {
      if ((unint64_t)v42 < v43[0])
      {
        *uint64_t v42 = v6;
        v10[1] = v5;
LABEL_11:
        char v11 = v10 + 2;
        goto LABEL_38;
      }
      char v12 = v41;
      uint64_t v13 = ((char *)v42 - (char *)v41) >> 4;
      unint64_t v14 = v13 + 1;
      if ((unint64_t)(v13 + 1) >> 60) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v15 = v43[0] - (void)v41;
      if ((uint64_t)(v43[0] - (void)v41) >> 3 > v14) {
        unint64_t v14 = v15 >> 3;
      }
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v14;
      }
      if (v16)
      {
        float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v43, v16);
        char v12 = v41;
        uint64_t v10 = v42;
      }
      else
      {
        float v17 = 0;
      }
      int v21 = (unint64_t *)&v17[16 * v13];
      *int v21 = v6;
      v21[1] = v5;
      __n128 v22 = v21;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v22 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)v10 - 1);
          v22 -= 2;
          v10 -= 2;
        }
        while (v10 != v12);
LABEL_35:
        char v12 = v41;
      }
    }
    else
    {
      if ((unint64_t)v42 < v43[0])
      {
        *uint64_t v42 = i;
        v10[1] = 1;
        goto LABEL_11;
      }
      char v12 = v41;
      uint64_t v18 = ((char *)v42 - (char *)v41) >> 4;
      unint64_t v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 60) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v20 = v43[0] - (void)v41;
      if ((uint64_t)(v43[0] - (void)v41) >> 3 > v19) {
        unint64_t v19 = v20 >> 3;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v19;
      }
      if (v16)
      {
        float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v43, v16);
        char v12 = v41;
        uint64_t v10 = v42;
      }
      else
      {
        float v17 = 0;
      }
      int v21 = (unint64_t *)&v17[16 * v18];
      *int v21 = i;
      v21[1] = 1;
      __n128 v22 = v21;
      if (v10 != v12)
      {
        do
        {
          *((_OWORD *)v22 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)v10 - 1);
          v22 -= 2;
          v10 -= 2;
        }
        while (v10 != v12);
        goto LABEL_35;
      }
    }
    char v11 = v21 + 2;
    long long v41 = v22;
    uint64_t v42 = v21 + 2;
    v43[0] = &v17[16 * v16];
    if (v12) {
      operator delete(v12);
    }
LABEL_38:
    uint64_t v42 = v11;
  }
  uint64_t v23 = MIL::ParserContext::GetProgramFirstSet(a1);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t NumElements = MIL::ValueInference::Tensor<float>::GetNumElements((uint64_t)a1);
  unint64_t v25 = NumElements / v5;
  std::vector<std::vector<float>>::reserve(a3, NumElements / v5);
  if (v5 <= NumElements)
  {
    unint64_t v26 = 0;
    if (v25 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v25;
    }
    do
    {
      MIL::ValueInference::Tensor<float>::SubTensor(a1, (uint64_t **)v35, v34);
      DataView = (const void *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v34);
      uint64_t v29 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v34);
      long long __p = 0;
      __n128 v32 = 0;
      uint64_t v33 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&__p, DataView, v29 + 4 * v30, (v29 + 4 * v30 - (uint64_t)DataView) >> 2);
      std::vector<std::vector<float>>::push_back[abi:ne180100](a3, (uint64_t)&__p);
      if (__p)
      {
        __n128 v32 = __p;
        operator delete(__p);
      }
      MIL::ValueInference::Tensor<float>::~Tensor(v34);
      if (v35[0])
      {
        v35[1] = v35[0];
        operator delete(v35[0]);
      }
      ++v26;
    }
    while (v27 != v26);
  }
  if (v39)
  {
    uint64_t v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    uint64_t v38 = v37;
    operator delete(v37);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  if (v41)
  {
    uint64_t v42 = v41;
    operator delete(v41);
  }
}

void sub_20F417168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  unint64_t v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(void *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::PalettizeToDataKmeans(uint64_t *a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  std::vector<float>::vector(&__p, (uint64_t)(*(void *)(*a1 + 8) - *(void *)*a1) >> 2);
  std::vector<std::vector<float>>::vector(v94, a2, (uint64_t)&__p);
  if (*(void *)__p.__x_)
  {
    *(void *)&__p.__x_[2] = *(void *)__p.__x_;
    operator delete(*(void **)__p.__x_);
  }
  std::vector<unsigned char>::vector(&v92, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
  if (v7 >= a2)
  {
    unint64_t v91 = 0;
    long long v90 = 0uLL;
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = 42;
    __p.__x_[0] = 42;
    for (uint64_t i = 1; i != 624; ++i)
    {
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v11 = i + 1812433253 * (v11 ^ (v11 >> 30));
      __p.__x_[i] = v11;
    }
    __p.__i_ = 0;
    std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>,std::back_insert_iterator<std::vector<std::vector<float>>>,long,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(v5, v6, (uint64_t *)&v90, 1, (uint64_t)&__p);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
    LODWORD(p_p) = 2139095039;
    std::vector<float>::vector(&v98, v13, &p_p);
    if (a2 != 1)
    {
      uint64_t v14 = 0;
      do
      {
        uint64_t v15 = *a1;
        uint64_t v16 = a1[1];
        float v17 = (float *)v98;
        uint64_t v18 = v16 - *a1;
        if (v16 != *a1)
        {
          uint64_t v19 = 0;
          unint64_t v20 = v18 / 24;
          int v21 = (float **)(*((void *)&v90 + 1) - 24);
          if (v20 <= 1) {
            unint64_t v20 = 1;
          }
          do
          {
            __n128 v22 = *(float **)(v15 + 24 * v19);
            uint64_t v23 = *(void *)(v15 + 24 * v19 + 8) - (void)v22;
            if (v23)
            {
              unint64_t v24 = v23 >> 2;
              unint64_t v25 = *v21;
              if (v24 <= 1) {
                unint64_t v24 = 1;
              }
              float v26 = 0.0;
              do
              {
                float v27 = *v22++;
                float v28 = v27;
                float v29 = *v25++;
                float v26 = v26 + (float)((float)(v28 - v29) * (float)(v28 - v29));
                --v24;
              }
              while (v24);
            }
            else
            {
              float v26 = 0.0;
            }
            float v30 = sqrtf(v26);
            if (v30 >= v17[v19]) {
              float v30 = v17[v19];
            }
            v17[v19++] = v30;
          }
          while (v19 != v20);
        }
        std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>((uint64_t)&p_p, v17, v99);
        int v31 = std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)&p_p, &__p, (double **)&p_p);
        uint64_t v32 = *a1;
        uint64_t v33 = (const void **)(*a1 + 24 * v31);
        uint64_t v34 = (void *)*((void *)&v90 + 1);
        if (*((void *)&v90 + 1) >= v91)
        {
          uint64_t v36 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>((uint64_t *)&v90, (uint64_t)v33);
        }
        else
        {
          **((void **)&v90 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
          v34[1] = 0;
          v34[2] = 0;
          uint64_t v35 = *(void *)(v32 + 24 * v31 + 8);
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v34, *v33, v35, (v35 - (uint64_t)*v33) >> 2);
          uint64_t v36 = (uint64_t)(v34 + 3);
        }
        *((void *)&v90 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v36;
        if (p_p)
        {
          v97 = p_p;
          operator delete(p_p);
        }
        ++v14;
      }
      while (v14 != a2 - 1);
    }
    if (v98)
    {
      v99 = (float *)v98;
      operator delete(v98);
    }
    unint64_t v37 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v90 + 1) - v90) >> 3));
    if (*((void *)&v90 + 1) == (void)v90) {
      uint64_t v38 = 0;
    }
    else {
      uint64_t v38 = v37;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,false>((uint64_t *)v90, *((std::vector<unsigned int> **)&v90 + 1), (uint64_t)&v98, v38, 1);
    uint64_t v39 = 0;
    while (1)
    {
      uint64_t v86 = v39;
      std::vector<std::vector<std::vector<float>>>::vector(&__p, a2);
      uint64_t v40 = *a1;
      if (a1[1] != *a1)
      {
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        do
        {
          v98 = 0;
          v99 = 0;
          uint64_t v100 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v98, *(const void **)(v40 + v41), *(void *)(v40 + v41 + 8), (uint64_t)(*(void *)(v40 + v41 + 8) - *(void *)(v40 + v41)) >> 2);
          if (v98)
          {
            v99 = (float *)v98;
            operator delete(v98);
          }
          uint64_t v45 = *a1 + v41;
          long long v44 = (uint64_t *)(*(void *)__p.__x_ + 24 * ClosestClusterId);
          long long v46 = v44 + 1;
          unint64_t v47 = v44[1];
          if (v47 >= v44[2])
          {
            uint64_t v48 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v44, v45);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v44, v45);
            uint64_t v48 = v47 + 24;
          }
          uint64_t *v46 = v48;
          ++v42;
          uint64_t v40 = *a1;
          v41 += 24;
        }
        while (v42 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
      }
      if (!a2) {
        break;
      }
      uint64_t v49 = 0;
      char v50 = 0;
      do
      {
        while (1)
        {
          uint64_t v51 = (void *)(*(void *)__p.__x_ + 24 * v49);
          long long v52 = v51 + 1;
          if (*v51 != v51[1]) {
            break;
          }
          ++v49;
          char v50 = 1;
          if (v49 == a2) {
            goto LABEL_80;
          }
        }
        std::vector<float>::vector(&p_p, (uint64_t)(*(void *)(*v51 + 8) - *(void *)*v51) >> 2);
        uint64_t v53 = *v51;
        long long v54 = (char *)p_p;
        uint64_t v55 = (uint64_t)v97;
        unint64_t v56 = (v97 - (unsigned char *)p_p) >> 2;
        unint64_t v57 = (*v52 - *v51) / 24;
        if (*v52 != *v51)
        {
          uint64_t v58 = 0;
          if (v56 <= 1) {
            uint64_t v59 = 1;
          }
          else {
            uint64_t v59 = (v97 - (unsigned char *)p_p) >> 2;
          }
          if (v57 <= 1) {
            uint64_t v60 = 1;
          }
          else {
            uint64_t v60 = (*v52 - *v51) / 24;
          }
          do
          {
            long long v61 = *(float **)(v53 + 24 * v58);
            if (v56 != (uint64_t)(*(void *)(v53 + 24 * v58 + 8) - (void)v61) >> 2)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Sanity check failed: points have different lengths.");
              __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            uint64_t v62 = (float *)v54;
            uint64_t v63 = v59;
            if ((char *)v55 != v54)
            {
              do
              {
                float v64 = *v61++;
                *uint64_t v62 = v64 + *v62;
                ++v62;
                --v63;
              }
              while (v63);
            }
            ++v58;
          }
          while (v58 != v60);
        }
        if ((char *)v55 != v54)
        {
          float v65 = (float)v57;
          if (v56 <= 1) {
            uint64_t v66 = 1;
          }
          else {
            uint64_t v66 = v56;
          }
          int v67 = (float *)v54;
          do
          {
            *int v67 = *v67 / v65;
            ++v67;
            --v66;
          }
          while (v66);
        }
        uint64_t v68 = v90 + 24 * v49;
        int v69 = *(float **)v68;
        uint64_t v70 = *(void *)(v68 + 8) - *(void *)v68;
        if (v70)
        {
          unint64_t v71 = v70 >> 2;
          if (v71 <= 1) {
            unint64_t v71 = 1;
          }
          float v72 = 0.0;
          int v73 = (float *)v54;
          do
          {
            float v74 = *v69++;
            float v75 = v74;
            float v76 = *v73++;
            float v72 = v72 + (float)((float)(v75 - v76) * (float)(v75 - v76));
            --v71;
          }
          while (v71);
        }
        else
        {
          float v72 = 0.0;
        }
        BOOL v77 = sqrtf(v72) > 0.01;
        if ((void **)v68 != &p_p) {
          std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v68, v54, v55, v56);
        }
        if (p_p)
        {
          v97 = p_p;
          operator delete(p_p);
        }
        v50 |= v77;
        ++v49;
      }
      while (v49 != a2);
      if ((v50 & 1) == 0) {
        break;
      }
LABEL_80:
      unint64_t v78 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v90 + 1) - v90) >> 3));
      if (*((void *)&v90 + 1) == (void)v90) {
        uint64_t v79 = 0;
      }
      else {
        uint64_t v79 = v78;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,false>((uint64_t *)v90, *((std::vector<unsigned int> **)&v90 + 1), (uint64_t)v102, v79, 1);
      p_p = &__p;
      std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
      uint64_t v39 = v86 + 1;
      if (v86 == 99) {
        goto LABEL_86;
      }
    }
    p_p = &__p;
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
LABEL_86:
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)v94);
    *(_OWORD *)v94 = v90;
    unint64_t v95 = v91;
    unint64_t v91 = 0;
    long long v90 = 0uLL;
    *(void *)__p.__x_ = &v90;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    uint64_t v80 = *a1;
    if (a1[1] != *a1)
    {
      uint64_t v81 = 0;
      unint64_t v82 = 0;
      do
      {
        char v87 = 0;
        std::string v88 = 0;
        uint64_t v89 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v87, *(const void **)(v80 + v81), *(void *)(v80 + v81 + 8), (uint64_t)(*(void *)(v80 + v81 + 8) - *(void *)(v80 + v81)) >> 2);
        *((unsigned char *)v92 + v82) = v83;
        if (v87)
        {
          std::string v88 = v87;
          operator delete(v87);
        }
        ++v82;
        uint64_t v80 = *a1;
        v81 += 24;
      }
      while (v82 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
  }
  else
  {
    memset(&__p, 0, 24);
    std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>>(&__p, v5, v6, v7);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&p_p, *(uint64_t *)__p.__x_, *(uint64_t *)&__p.__x_[2], *(char **)v94);
    uint64_t v8 = v92;
    uint64_t v9 = v93;
    if (v92 != v93)
    {
      uint64_t v10 = 0;
      do
      {
        v8[v10] = v10;
        ++v10;
      }
      while (&v8[v10] != v9);
    }
    v98 = &__p;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(a3, *(uint64_t *)v94, *(uint64_t *)&v94[2], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v94[2] - *(void *)v94) >> 3));
  a3[3] = 0;
  a3[4] = 0;
  a3[5] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a3 + 3, v92, (uint64_t)v93, v93 - (unsigned char *)v92);
  if (v92)
  {
    v93 = (char *)v92;
    operator delete(v92);
  }
  *(void *)__p.__x_ = v94;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_20F41793C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char *a30,uint64_t a31)
{
  a30 = &a15;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  a30 = &a21;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::UnpackIndicesToBinary(unsigned __int8 **a1@<X0>, int a2@<W1>, unint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = a2;
  std::vector<unsigned char>::reserve(a3, (a1[1] - *a1) * a2);
  uint64_t v6 = *a1;
  unint64_t v24 = a1[1];
  if (*a1 != v24)
  {
    if (v5 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v5;
    }
    do
    {
      if (a2)
      {
        uint64_t v8 = 0;
        unsigned int v9 = *v6;
        uint64_t v10 = (unsigned char *)a3[1];
        do
        {
          char v11 = v9 & 1;
          unint64_t v12 = a3[2];
          if ((unint64_t)v10 >= v12)
          {
            unint64_t v14 = *a3;
            uint64_t v15 = &v10[-*a3];
            unint64_t v16 = (unint64_t)(v15 + 1);
            if ((uint64_t)(v15 + 1) < 0) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v17 = v12 - v14;
            if (2 * v17 > v16) {
              unint64_t v16 = 2 * v17;
            }
            if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v18 = v16;
            }
            if (v18) {
              uint64_t v19 = (char *)operator new(v18);
            }
            else {
              uint64_t v19 = 0;
            }
            unint64_t v20 = &v15[(void)v19];
            int v21 = &v15[(void)v19];
            *int v21 = v11;
            unint64_t v13 = v21 + 1;
            if (v10 != (unsigned char *)v14)
            {
              __n128 v22 = &v10[~v14];
              do
              {
                char v23 = *--v10;
                (v22--)[(void)v19] = v23;
              }
              while (v10 != (unsigned char *)v14);
              uint64_t v10 = (unsigned char *)*a3;
              unint64_t v20 = v19;
            }
            *a3 = (unint64_t)v20;
            a3[1] = (unint64_t)v13;
            a3[2] = (unint64_t)&v19[v18];
            if (v10) {
              operator delete(v10);
            }
          }
          else
          {
            *uint64_t v10 = v11;
            unint64_t v13 = v10 + 1;
          }
          a3[1] = (unint64_t)v13;
          v9 >>= 1;
          ++v8;
          uint64_t v10 = v13;
        }
        while (v8 != v7);
      }
      ++v6;
    }
    while (v6 != v24);
  }
}

void sub_20F417C08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *MIL::Passes::anonymous namespace'::TransformPointsToData@<X0>(char *result@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)result;
  if (*((void *)result + 1) != *(void *)result)
  {
    double v4 = result;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    do
    {
      uint64_t result = std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)a2, a2[1], *(char **)(v3 + v5), *(char **)(v3 + v5 + 8), (uint64_t)(*(void *)(v3 + v5 + 8) - *(void *)(v3 + v5)) >> 2);
      ++v6;
      uint64_t v3 = *(void *)v4;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v4 + 1) - *(void *)v4) >> 3));
  }
  return result;
}

void sub_20F417CC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Passes::anonymous namespace'::PackPalettizedAttributes(MIL::IRConstantDimension *a1, uint64_t *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
}

void sub_20F417E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  for (uint64_t i = 80; i != -40; i -= 40)
    std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v14 + i);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::PalettizationData::~PalettizationData(MIL::Passes::_anonymous_namespace_::PalettizationData *this)
{
  uint64_t v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void MIL::Passes::PalettizeUniform(MIL::IRConstantDimension *a1, uint64_t *a2, int a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v16[0] = v6;
  v16[1] = v5;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  DataView = (const void *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v17);
  uint64_t v8 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v17);
  memset(v15, 0, sizeof(v15));
  std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(v15, DataView, v8 + 4 * v9, (v8 + 4 * v9 - (uint64_t)DataView) >> 2);
  MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v17);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  (*(void (**)(uint64_t))(*(void *)v10 + 88))(v10);
}

void sub_20F4180B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  MIL::ValueInference::Tensor<float>::~Tensor((void *)(v24 - 128));
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::PalettizeToDataUniform(float **a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  std::vector<unsigned char>::vector(v51, a1[1] - *a1);
  uint64_t v6 = *a1;
  uint64_t v7 = a1[1];
  uint64_t v8 = (uint64_t)(*a1 + 1);
  float v9 = **a1;
  if (*a1 == v7 || v8 == (void)v7)
  {
    char v11 = *a1;
  }
  else
  {
    float v12 = **a1;
    uint64_t v13 = (uint64_t)(*a1 + 1);
    uint64_t v14 = *a1;
    uint64_t v15 = (float *)v13;
    do
    {
      float v16 = *v15++;
      float v17 = v16;
      if (v16 < v12)
      {
        float v12 = v17;
        uint64_t v14 = (float *)v13;
      }
      uint64_t v13 = (uint64_t)v15;
    }
    while (v15 != v7);
    float v18 = *v14;
    char v11 = *a1;
    uint64_t v19 = *a1 + 1;
    do
    {
      float v20 = *v19++;
      float v21 = v20;
      if (v9 < v20)
      {
        float v9 = v21;
        char v11 = (float *)v8;
      }
      uint64_t v8 = (uint64_t)v19;
    }
    while (v19 != v7);
    float v9 = v18;
  }
  uint64_t v41 = a3;
  float v22 = *v11;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  char v50 = 0;
  std::vector<unsigned char>::reserve((unint64_t *)&v48, v7 - v6);
  float v23 = (float)(v22 - v9) / (float)(a2 - 1);
  uint64_t v24 = *a1;
  if (a1[1] != *a1)
  {
    unint64_t v25 = 0;
    float v26 = v49;
    do
    {
      char v27 = llroundf((float)(v24[v25] - v9) / v23);
      if (v26 >= v50)
      {
        unint64_t v29 = (unint64_t)v48;
        uint64_t v30 = v26 - (unsigned char *)v48;
        uint64_t v31 = v26 - (unsigned char *)v48 + 1;
        if (v31 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v32 = v50 - (unsigned char *)v48;
        if (2 * (v50 - (unsigned char *)v48) > (unint64_t)v31) {
          uint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v33 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v33 = v31;
        }
        if (v33) {
          uint64_t v34 = (char *)operator new(v33);
        }
        else {
          uint64_t v34 = 0;
        }
        uint64_t v35 = &v34[v30];
        uint64_t v36 = &v34[v30];
        *uint64_t v36 = v27;
        float v28 = v36 + 1;
        if (v26 != (char *)v29)
        {
          unint64_t v37 = &v26[~v29];
          do
          {
            char v38 = *--v26;
            (v37--)[(void)v34] = v38;
          }
          while (v26 != (char *)v29);
          float v26 = (char *)v48;
          uint64_t v35 = v34;
        }
        uint64_t v48 = v35;
        uint64_t v49 = v28;
        char v50 = &v34[v33];
        if (v26) {
          operator delete(v26);
        }
      }
      else
      {
        char *v26 = v27;
        float v28 = v26 + 1;
      }
      uint64_t v49 = v28;
      ++v25;
      uint64_t v24 = *a1;
      float v26 = v28;
    }
    while (v25 < a1[1] - *a1);
  }
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  std::vector<std::vector<float>>::reserve(&v45, a2);
  if (a2)
  {
    unint64_t v39 = 0;
    do
    {
      uint64_t v40 = (float *)operator new(4uLL);
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = v40;
      float *v40 = v9 + (float)((float)v39 * v23);
      uint64_t v43 = v40 + 1;
      long long v44 = v40 + 1;
      std::vector<std::vector<float>>::push_back[abi:ne180100](&v45, (uint64_t)&__p);
      if (__p)
      {
        uint64_t v43 = __p;
        operator delete(__p);
      }
      ++v39;
    }
    while (a2 != v39);
  }
  void *v41 = 0;
  v41[1] = 0;
  void v41[2] = 0;
  std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v41, v45, v46, 0xAAAAAAAAAAAAAAABLL * ((v46 - v45) >> 3));
  _OWORD v41[3] = 0;
  void v41[4] = 0;
  v41[5] = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v41 + 3, v48, (uint64_t)v49, v49 - (unsigned char *)v48);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = &v45;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v48)
  {
    uint64_t v49 = (char *)v48;
    operator delete(v48);
  }
  if (v51[0])
  {
    v51[1] = v51[0];
    operator delete(v51[0]);
  }
}

void sub_20F418424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  a11 = &a14;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    a21 = (uint64_t)a20;
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

void MIL::Passes::PalettizeUnique(MIL::IRConstantDimension *a1@<X0>, uint64_t *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v46[0] = v7;
  v46[1] = v6;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  DataView = (float *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v47);
  uint64_t v9 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v47);
  std::set<float>::set[abi:ne180100]<float const*>((uint64_t)&v43, DataView, (float *)(v9 + 4 * v10));
  uint64_t v34 = v7;
  char v11 = operator new(0x14uLL);
  uint64_t v12 = 0;
  v11[4] = 8;
  *(_OWORD *)char v11 = xmmword_20F913238;
  while (1)
  {
    int v13 = v11[v12];
    if (v45 <= 1 << v13) {
      break;
    }
    if (++v12 == 5)
    {
      operator delete(v11);
      *a3 = -1;
      goto LABEL_33;
    }
  }
  operator delete(v11);
  *a3 = v13;
  if (v13 != -1)
  {
    std::vector<float>::vector(&v42, 1 << v13);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<float,std::__tree_node<float,void *> *,long>,std::__tree_const_iterator<float,std::__tree_node<float,void *> *,long>,std::__wrap_iter<float *>,0>(v43, &v44, v42);
    memset(v40, 0, sizeof(v40));
    int v41 = 1065353216;
    if (v45)
    {
      uint64_t v14 = 0;
      for (unint64_t i = 0; i < v45; ++i)
      {
        unint64_t v37 = (char *)v42 + v14;
        *((unsigned char *)std::__hash_table<std::__hash_value_type<float,unsigned char>,std::__unordered_map_hasher<float,std::__hash_value_type<float,unsigned char>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,unsigned char>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,unsigned char>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>((uint64_t)v40, (float *)((char *)v42 + v14), (uint64_t)&std::piecewise_construct, (float **)&v37)+ 2std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = i;
        v14 += 4;
      }
    }
    unint64_t v37 = 0;
    char v38 = 0;
    unint64_t v39 = 0;
    MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v47);
    std::vector<unsigned char>::reserve((unint64_t *)&v37, v16);
    for (unint64_t j = (char *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v47); ; j += 4)
    {
      uint64_t v18 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)v47);
      if (j == (char *)(v18 + 4 * v19)) {
        break;
      }
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = j;
      float v20 = std::__hash_table<std::__hash_value_type<float,unsigned char>,std::__unordered_map_hasher<float,std::__hash_value_type<float,unsigned char>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,unsigned char>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,unsigned char>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>((uint64_t)v40, (float *)j, (uint64_t)&std::piecewise_construct, (float **)&__p);
      float v21 = v20;
      float v22 = v38;
      if (v38 >= v39)
      {
        unint64_t v24 = (unint64_t)v37;
        uint64_t v25 = v38 - (unsigned char *)v37;
        uint64_t v26 = v38 - (unsigned char *)v37 + 1;
        if (v26 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = v39 - (unsigned char *)v37;
        if (2 * (v39 - (unsigned char *)v37) > (unint64_t)v26) {
          uint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unint64_t v29 = (char *)operator new(v28);
        }
        else {
          unint64_t v29 = 0;
        }
        uint64_t v30 = &v29[v25];
        v29[v25] = *((unsigned char *)v21 + 20);
        uint64_t v23 = (uint64_t)&v29[v25 + 1];
        if (v22 != (char *)v24)
        {
          uint64_t v31 = &v22[~v24];
          do
          {
            char v32 = *--v22;
            (v31--)[(void)v29] = v32;
          }
          while (v22 != (char *)v24);
          float v22 = (char *)v37;
          uint64_t v30 = v29;
        }
        unint64_t v37 = v30;
        char v38 = &v29[v25 + 1];
        unint64_t v39 = &v29[v28];
        if (v22) {
          operator delete(v22);
        }
      }
      else
      {
        *char v38 = *((unsigned char *)v20 + 20);
        uint64_t v23 = (uint64_t)(v22 + 1);
      }
      char v38 = (char *)v23;
    }
    MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v47);
    uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 32))(v34);
    (*(void (**)(uint64_t))(*(void *)v33 + 88))(v33);
  }
LABEL_33:
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 32) = 1065353216;
  std::__tree<float>::destroy((uint64_t)&v43, v44);
  MIL::ValueInference::Tensor<float>::~Tensor(v47);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_20F418868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,void *a29)
{
  if (__p) {
    operator delete(__p);
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a19);
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  std::__tree<float>::destroy((uint64_t)&a28, a29);
  MIL::ValueInference::Tensor<float>::~Tensor((void *)(v30 - 160));
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    uint64_t v7 = &v5[(void)v6 - v2];
    uint64_t v8 = v7;
    if (v5 != (char *)v2)
    {
      uint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      uint64_t v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

void MIL::Passes::PalettizePerBlockKmeans(MIL::IRConstantDimension *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t **a5)
{
  if ((unint64_t)((char *)a5[1] - (char *)*a5) < 0x21)
  {
    uint64_t v10 = *a2;
    uint64_t v9 = (std::__shared_weak_count *)a2[1];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v37[0] = v10;
    v37[1] = v9;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    unint64_t v24 = a1;
    char v11 = *a5;
    uint64_t v12 = a5[1];
    unint64_t v13 = 1;
    while (v11 != v12)
    {
      uint64_t ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v38);
      uint64_t v15 = *v11;
      unint64_t v16 = v11[1];
      v11 += 2;
      v13 *= *(void *)(*ProgramFirstSet + 8 * v15) / v16;
    }
    memset(v36, 0, sizeof(v36));
    std::vector<std::vector<float>>::reserve(v36, v13);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    std::vector<std::vector<unsigned char>>::reserve(&v33, v13);
    uint64_t v17 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v38);
    if (v13)
    {
      unint64_t v18 = 0;
      unint64_t v19 = 1 << a3;
      do
      {
        MIL::ValueInference::Tensor<float>::SubTensor(v38, (uint64_t **)v31, v30);
        std::vector<std::vector<float>>::push_back[abi:ne180100](v36, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        float v20 = v34;
        if ((unint64_t)v34 >= v35)
        {
          uint64_t v21 = std::vector<std::vector<unsigned char>>::__push_back_slow_path<std::vector<unsigned char> const&>(&v33, (uint64_t)&v27);
        }
        else
        {
          *uint64_t v34 = 0;
          v20[1] = 0;
          uint64_t v20[2] = 0;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v20, v27, (uint64_t)v28, v28 - (unsigned char *)v27);
          uint64_t v21 = (uint64_t)(v20 + 3);
        }
        uint64_t v34 = (void *)v21;
        if (v27)
        {
          size_t v28 = v27;
          operator delete(v27);
        }
        __p[0] = v26;
        std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v26[0] = (void **)v29;
        std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v26);
        MIL::ValueInference::Tensor<float>::~Tensor(v30);
        if (v31[0])
        {
          v31[1] = v31[0];
          operator delete(v31[0]);
        }
        ++v18;
      }
      while (v13 != v18);
    }
    MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v38);
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 32))(v10);
    (*(void (**)(uint64_t))(*(void *)v22 + 88))(v22);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Per-block palettization only allows on at most 2 channels.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F418D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35)
{
  __cxa_free_exception(v35);
  _Unwind_Resume(a1);
}

void sub_20F418E14()
{
}

uint64_t std::vector<std::vector<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20F418EBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned char>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + 24 * v6;
    std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20F418F70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Passes::anonymous namespace'::BlockwiseIndexConverter::BlockwiseIndexConverter(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (*a3 != v7)
  {
    uint64_t v8 = *a1;
    do
    {
      uint64_t v10 = *v6;
      uint64_t v9 = v6[1];
      v6 += 2;
      *(void *)(v8 + 8 * v1std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = v9;
    }
    while (v6 != v7);
  }
  unint64_t v11 = (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3;
  uint64_t v29 = 1;
  std::vector<unsigned long long>::vector(a1 + 3, v11, &v29);
  uint64_t v12 = *a3;
  unint64_t v13 = a3[1];
  if (*a3 != v13)
  {
    uint64_t v14 = *(void **)a2;
    uint64_t v15 = a1[3];
    do
    {
      uint64_t v16 = *v12;
      unint64_t v17 = v12[1];
      v12 += 2;
      *(void *)(v15 + 8 * v16) = v14[v16] / v17;
    }
    while (v12 != v13);
  }
  unint64_t v18 = std::vector<unsigned long long>::vector(a1 + 6, (a1[4] - a1[3]) >> 3);
  uint64_t v19 = a1[3];
  uint64_t v20 = a1[4] - v19;
  if (v20)
  {
    uint64_t v21 = v20 >> 3;
    if ((unint64_t)(v20 >> 3) <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v20 >> 3;
    }
    uint64_t v23 = 8 * v21 - 8;
    unint64_t v24 = (uint64_t *)(v19 + v23);
    uint64_t v25 = (uint64_t *)(*v18 + v23);
    uint64_t v26 = 1;
    do
    {
      *v25-- = v26;
      uint64_t v27 = *v24--;
      v26 *= v27;
      --v22;
    }
    while (v22);
  }
  return a1;
}

void sub_20F4190A4(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  uint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Passes::anonymous namespace'::BlockwiseIndexConverter::GetBlockIndices(MIL::Passes::_anonymous_namespace_::BlockwiseIndexConverter *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::vector<unsigned long long>::vector(&v26, (uint64_t)(*((void *)this + 7) - *((void *)this + 6)) >> 3);
  uint64_t v6 = (unint64_t *)*((void *)this + 6);
  uint64_t v7 = *((void *)this + 7) - (void)v6;
  if (v7)
  {
    unint64_t v8 = v7 >> 3;
    uint64_t v9 = v26;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    do
    {
      *v9++ = a2 / *v6;
      unint64_t v10 = *v6++;
      a2 %= v10;
      --v8;
    }
    while (v8);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::vector<std::pair<unsigned long long,unsigned long long>>::reserve((void **)a3, v27 - v26);
  unint64_t v11 = v27;
  if (v27 != v26)
  {
    unint64_t v12 = 0;
    unint64_t v13 = (void *)(a3 + 16);
    uint64_t v14 = *(uint64_t **)(a3 + 8);
    unint64_t v11 = v26;
    do
    {
      uint64_t v15 = *(void *)(*(void *)this + 8 * v12);
      uint64_t v16 = v15 * v11[v12];
      uint64_t v17 = v15 + v16;
      if ((unint64_t)v14 >= *v13)
      {
        unint64_t v18 = *(uint64_t **)a3;
        uint64_t v19 = ((uint64_t)v14 - *(void *)a3) >> 4;
        unint64_t v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v21 = *v13 - (void)v18;
        if (v21 >> 3 > v20) {
          unint64_t v20 = v21 >> 3;
        }
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(a3 + 16, v22);
          unint64_t v18 = *(uint64_t **)a3;
          uint64_t v14 = *(uint64_t **)(a3 + 8);
        }
        else
        {
          uint64_t v23 = 0;
        }
        unint64_t v24 = &v23[16 * v19];
        *(void *)unint64_t v24 = v16;
        *((void *)v24 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v17;
        uint64_t v25 = v24;
        if (v14 != v18)
        {
          do
          {
            *((_OWORD *)v25 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)v14 - 1);
            v25 -= 16;
            v14 -= 2;
          }
          while (v14 != v18);
          unint64_t v18 = *(uint64_t **)a3;
        }
        uint64_t v14 = (uint64_t *)(v24 + 16);
        *(void *)a3 = v25;
        *(void *)(a3 + 8) = v24 + 16;
        *(void *)(a3 + 16) = &v23[16 * v22];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v14 = v16;
        v14[1] = v17;
        v14 += 2;
      }
      *(void *)(a3 + 8) = v14;
      ++v12;
      unint64_t v11 = v26;
    }
    while (v12 < v27 - v26);
  }
  if (v11)
  {
    uint64_t v27 = v11;
    operator delete(v11);
  }
}

void sub_20F4192A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  unint64_t v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    v16[4] = result;
    unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(result, v12);
    uint64_t v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    void v16[3] = &v13[24 * v15];
    *((void *)v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    *((void *)v14 + 2) = 0;
    *(void *)uint64_t v14 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    *((void *)v14 + 2) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    void v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    unint64_t v8 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    v7[2] = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    unint64_t v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20F419408(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Passes::anonymous namespace'::PackPerBlockPalettizedInputs(MIL::IRConstantDimension *a1, uint64_t *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a2) >> 3);
  if (v8 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3))
  {
    unint64_t v24 = v8;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    unint64_t v31 = 0;
    std::vector<MIL::ValueInference::Tensor<unsigned char>>::reserve(&v29, v8);
    if (v6 != v7)
    {
      uint64_t v12 = 0;
      if (v24 <= 1) {
        uint64_t v13 = 1;
      }
      else {
        uint64_t v13 = v24;
      }
      do
      {
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = 0;
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&__p, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
        if (*(unsigned char *)(a4 + 16)) {
          *((void *)__p + *(void *)(a4 + 8)) /= *(void *)a4;
        }
        MIL::ValueInference::Tensor<unsigned char>::Tensor(&v32, &__p, *a2 + v12);
        uint64_t v14 = v30;
        if ((unint64_t)v30 >= v31)
        {
          uint64_t v15 = std::vector<MIL::ValueInference::Tensor<unsigned char>>::__push_back_slow_path<MIL::ValueInference::Tensor<unsigned char>>(&v29, (uint64_t)&v32);
        }
        else
        {
          v30[3] = 0;
          v14[4] = 0;
          v14[1] = 0;
          void v14[2] = 0;
          *uint64_t v14 = &unk_26C259E78;
          *(_OWORD *)(v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v33;
          uint64_t v14[3] = v34;
          long long v33 = 0uLL;
          uint64_t v34 = 0;
          uint64_t v14[5] = 0;
          v14[6] = 0;
          *((_OWORD *)v14 + 2) = v35;
          v14[6] = v36;
          long long v35 = 0uLL;
          uint64_t v36 = 0;
          v14[7] = v37;
          uint64_t v15 = (uint64_t)(v14 + 8);
        }
        uint64_t v30 = (void *)v15;
        MIL::ValueInference::Tensor<unsigned char>::~Tensor(&v32);
        if (__p)
        {
          uint64_t v27 = __p;
          operator delete(__p);
        }
        v12 += 24;
        --v13;
      }
      while (v13);
    }
    char v32 = 0;
    long long v33 = 0uLL;
    std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v32, *(const void **)(a5 + 24), *(void *)(a5 + 32), (uint64_t)(*(void *)(a5 + 32) - *(void *)(a5 + 24)) >> 3);
    MIL::ValueInference::Tensor<unsigned char>::BlockwiseMerge(&v29, (uint64_t)&v32, (uint64_t)&__p);
    if (v32)
    {
      *(void *)&long long v33 = v32;
      operator delete(v32);
    }
    int64_t v16 = (unint64_t)((uint64_t)(*(void *)(*a3 + 8) - *(void *)*a3) >> 2) / *(void *)a4;
    if (v16 > 15)
    {
      switch(v16)
      {
        case 16:
          uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
          char v32 = 0;
          long long v33 = 0uLL;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v32, *(const void **)ProgramFirstSet, *(void *)(ProgramFirstSet + 8), (uint64_t)(*(void *)(ProgramFirstSet + 8) - *(void *)ProgramFirstSet) >> 3);
          MIL::IRTensorValueType::Make(a1, 20, (MIL::MILContext ***)&v32);
        case 64:
          uint64_t v19 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
          char v32 = 0;
          long long v33 = 0uLL;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v32, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 3);
          MIL::IRTensorValueType::Make(a1, 23, (MIL::MILContext ***)&v32);
        case 256:
          MIL::ValueInference::Tensor<unsigned char>::ToIRTensorValue((uint64_t)&__p, a1);
      }
    }
    else
    {
      switch(v16)
      {
        case 2:
          uint64_t v20 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
          char v32 = 0;
          long long v33 = 0uLL;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v32, *(const void **)v20, *(void *)(v20 + 8), (uint64_t)(*(void *)(v20 + 8) - *(void *)v20) >> 3);
          MIL::IRTensorValueType::Make(a1, 21, (MIL::MILContext ***)&v32);
        case 4:
          uint64_t v18 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
          char v32 = 0;
          long long v33 = 0uLL;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v32, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
          MIL::IRTensorValueType::Make(a1, 19, (MIL::MILContext ***)&v32);
        case 8:
          uint64_t v17 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&__p);
          char v32 = 0;
          long long v33 = 0uLL;
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(&v32, *(const void **)v17, *(void *)(v17 + 8), (uint64_t)(*(void *)(v17 + 8) - *(void *)v17) >> 3);
          MIL::IRTensorValueType::Make(a1, 22, (MIL::MILContext ***)&v32);
      }
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unsupported numPalettes");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  unint64_t v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v22, "Sanity check failed, indicesData.size() != lutData.size()");
  __cxa_throw(v22, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F41A518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,std::__shared_weak_count *a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a25 < 0)
  {
    operator delete(__p);
    if ((v61 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a55);
      MIL::ValueInference::Tensor<float>::~Tensor(&a27);
      a55 = &a35;
      std::vector<MIL::ValueInference::Tensor<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
      if (a38)
      {
        a39 = (uint64_t)a38;
        operator delete(a38);
      }
      if (a42) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a42);
      }
      MIL::ValueInference::Tensor<unsigned char>::~Tensor(&a43);
      a55 = (uint64_t *)&a51;
      std::vector<MIL::ValueInference::Tensor<unsigned char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
      _Unwind_Resume(a1);
    }
  }
  else if (!v61)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v60);
  goto LABEL_6;
}

void MIL::Passes::anonymous namespace'::BlockwiseIndexConverter::~BlockwiseIndexConverter(MIL::Passes::_anonymous_namespace_::BlockwiseIndexConverter *this)
{
  unint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 3);
  if (v3)
  {
    *((void *)this + 4) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v4;
    operator delete(v4);
  }
}

void MIL::Passes::PalettizePerBlockUniform(MIL::IRConstantDimension *a1, uint64_t *a2, char a3, uint64_t **a4)
{
  unint64_t v4 = (char *)a4[1] - (char *)*a4;
  if (v4 && v4 < 0x21)
  {
    uint64_t v9 = *a2;
    unint64_t v8 = (std::__shared_weak_count *)a2[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v42[0] = v9;
    v42[1] = v8;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    unint64_t v10 = *a4;
    unint64_t v11 = a4[1];
    unint64_t v12 = 1;
    while (v10 != v11)
    {
      uint64_t ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v43);
      uint64_t v14 = *v10;
      unint64_t v15 = v10[1];
      v10 += 2;
      v12 *= *(void *)(*ProgramFirstSet + 8 * v14) / v15;
    }
    memset(v41, 0, sizeof(v41));
    std::vector<std::vector<float>>::reserve(v41, v12);
    uint64_t v38 = 0;
    unint64_t v39 = 0;
    unint64_t v40 = 0;
    std::vector<std::vector<unsigned char>>::reserve(&v38, v12);
    uint64_t v16 = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v43);
    if (v12)
    {
      unint64_t v17 = 0;
      unint64_t v18 = 1 << a3;
      do
      {
        MIL::ValueInference::Tensor<float>::SubTensor(v43, (uint64_t **)v36, &v33);
        DataView = (const void *)MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)&v33);
        uint64_t v20 = MIL::ValueInference::Tensor<float>::GetDataView((uint64_t)&v33);
        uint64_t v30 = 0;
        unint64_t v31 = 0;
        uint64_t v32 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v30, DataView, v20 + 4 * v21, (v20 + 4 * v21 - (uint64_t)DataView) >> 2);
        std::vector<std::vector<float>>::push_back[abi:ne180100](v41, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        unint64_t v22 = v39;
        if ((unint64_t)v39 >= v40)
        {
          uint64_t v23 = std::vector<std::vector<unsigned char>>::__push_back_slow_path<std::vector<unsigned char> const&>(&v38, (uint64_t)&v28);
        }
        else
        {
          *unint64_t v39 = 0;
          v22[1] = 0;
          void v22[2] = 0;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v22, v28, (uint64_t)v29, v29 - (unsigned char *)v28);
          uint64_t v23 = (uint64_t)(v22 + 3);
        }
        unint64_t v39 = (void *)v23;
        if (v28)
        {
          uint64_t v29 = v28;
          operator delete(v28);
        }
        __p[0] = v27;
        std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v30)
        {
          unint64_t v31 = v30;
          operator delete(v30);
        }
        MIL::ValueInference::Tensor<float>::~Tensor(&v33);
        if (v36[0])
        {
          v36[1] = v36[0];
          operator delete(v36[0]);
        }
        ++v17;
      }
      while (v12 != v17);
    }
    uint64_t v33 = 1;
    char v34 = 0;
    char v35 = 0;
    MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v43);
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 32))(v9);
    (*(void (**)(uint64_t))(*(void *)v24 + 88))(v24);
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Per-block palettization only allows on 1 or 2 channels.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F41ACA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  __cxa_free_exception(v33);
  _Unwind_Resume(a1);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[13],std::unique_ptr<MIL::IRTensorValue const>,0>(void *a1, char *a2, uint64_t *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F41ADE0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(void *a1)
{
  *a1 = &unk_26C259D88;
  unint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(void *a1)
{
  MIL::ValueInference::Tensor<MIL::Fp16>::~Tensor(a1);

  JUMPOUT(0x21056C700);
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void *MIL::ValueInference::Tensor<float>::~Tensor(void *a1)
{
  *a1 = &unk_26C259DB8;
  unint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<float>::~Tensor(void *a1)
{
  MIL::ValueInference::Tensor<float>::~Tensor(a1);

  JUMPOUT(0x21056C700);
}

float MIL::MathOps::SubOp<float>(float a1, float a2)
{
  return a1 - a2;
}

float MIL::MathOps::RealDivOp<float>(float a1, float a2)
{
  return a1 / a2;
}

float MIL::MathOps::MulOp<float>(float a1, float a2)
{
  return a1 * a2;
}

float MIL::MathOps::RoundOp<float>(float a1)
{
  return roundf(a1);
}

float MIL::MathOps::AddOp<float>(float a1, float a2)
{
  return a1 + a2;
}

void std::__function::__func<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26C259DE8;
  return result;
}

void std::__function::__func<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C259DE8;
}

float std::__function::__func<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float result = *a2;
  if (*a2 == 0.0) {
    return 3.4028e38;
  }
  return result;
}

uint64_t std::__function::__func<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0,std::allocator<MIL::Passes::anonymous namespace'::CalculateQuantizedDataTensor(MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&,MIL::ValueInference::Tensor<float> const&)::$_0>,float ()(float)>::target_type()
{
}

void *MIL::ValueInference::Tensor<unsigned char>::~Tensor(void *a1)
{
  *a1 = &unk_26C259E78;
  unint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<unsigned char>::~Tensor(void *a1)
{
  MIL::ValueInference::Tensor<unsigned char>::~Tensor(a1);

  JUMPOUT(0x21056C700);
}

void *MIL::ValueInference::Tensor<signed char>::~Tensor(void *a1)
{
  *a1 = &unk_26C259EA8;
  unint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

void MIL::ValueInference::Tensor<signed char>::~Tensor(void *a1)
{
  MIL::ValueInference::Tensor<signed char>::~Tensor(a1);

  JUMPOUT(0x21056C700);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[5],std::unique_ptr<MIL::IRTensorValue const>,0>(void *a1, char *a2, uint64_t *a3)
{
  unint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F41B1F4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    uint64_t v9 = &v6[4 * v8];
    unint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v11 != *a1)
    {
      unint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void MIL::Passes::anonymous namespace'::MakeFlattenTensorValue(MIL::IRConstantDimension *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v7 = (MIL::MILContext **)operator new(8uLL);
  v8[0] = v7;
  *uint64_t v7 = (MIL::MILContext *)((v5 - v6) >> 2);
  v8[1] = v7 + 1;
  void v8[2] = v7 + 1;
  MIL::IRTensorValueType::Make(a1, a3, v8);
}

void sub_20F41B6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      uint64_t v21 = *(void **)(v19 - 104);
      if (v21)
      {
        *(void *)(v19 - 96) = v21;
        operator delete(v21);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

void MIL::Passes::anonymous namespace'::PackBitsToTensorValue(MIL::IRConstantDimension *a1, uint64_t *a2)
{
  unint64_t v2 = a1;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    uint64_t v6 = 0;
    for (unint64_t i = 0; i < v4; i += 8)
    {
      int v8 = 0;
      uint64_t v9 = v3 + i;
      for (uint64_t j = 7; j != -1; --j)
      {
        v8 *= 2;
        if (i + j < v4) {
          v8 += *(unsigned __int8 *)(v9 + j);
        }
      }
      if (v6 >= v28)
      {
        unint64_t v11 = (unint64_t)v26;
        uint64_t v12 = v6 - (unsigned char *)v26;
        uint64_t v13 = v6 - (unsigned char *)v26 + 1;
        if (v13 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v14 = v28 - (unsigned char *)v26;
        if (2 * (v28 - (unsigned char *)v26) > (unint64_t)v13) {
          uint64_t v13 = 2 * v14;
        }
        if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v15 = v13;
        }
        if (v15) {
          uint64_t v16 = (char *)operator new(v15);
        }
        else {
          uint64_t v16 = 0;
        }
        unint64_t v17 = &v16[v12];
        int v18 = &v16[v12];
        *int v18 = v8;
        uint64_t v19 = v18 + 1;
        if (v6 != (char *)v11)
        {
          uint64_t v20 = &v6[~v11];
          do
          {
            char v21 = *--v6;
            (v20--)[(void)v16] = v21;
          }
          while (v6 != (char *)v11);
          uint64_t v6 = (char *)v26;
          unint64_t v17 = v16;
        }
        uint64_t v26 = v17;
        uint64_t v28 = &v16[v15];
        if (v6) {
          operator delete(v6);
        }
        uint64_t v6 = v19;
      }
      else
      {
        *v6++ = v8;
      }
      uint64_t v27 = v6;
      uint64_t v3 = *a2;
      unint64_t v4 = a2[1] - *a2;
    }
    unint64_t v22 = v26;
    unint64_t v2 = a1;
  }
  else
  {
    unint64_t v22 = 0;
    uint64_t v6 = 0;
  }
  uint64_t v23 = operator new(8uLL);
  __p[0] = v23;
  void *v23 = v6 - v22;
  __p[1] = v23 + 1;
  __p[2] = v23 + 1;
  MIL::IRTensorValueType::Make(v2, 14, (MIL::MILContext ***)__p);
}

void sub_20F41BA04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (a10) {
  if (__p)
  }
    operator delete(__p);
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Passes::anonymous namespace'::ConstructShapeTensorValue(MIL::IRConstantDimension *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = operator new(8uLL);
  v6[0] = v5;
  void *v5 = (v3 - v4) >> 3;
  v6[1] = v5 + 1;
  void v6[2] = v5 + 1;
  MIL::IRTensorValueType::Make(a1, 16, (MIL::MILContext ***)v6);
}

void sub_20F41BB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (a10) {
  if (__p)
  }
    operator delete(__p);
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::Fp16>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    uint64_t v9 = &v6[2 * v8];
    unint64_t v10 = (char *)*a1;
    unint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        __int16 v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void *std::vector<float>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      float result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F41BCC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<signed char>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(char *result, float *a2, float *a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    float result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((void *)v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  }
  return result;
}

void sub_20F41BD3C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(char *result, float *a2, float *a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    float result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = (int)v8;
    }
    *((void *)v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  }
  return result;
}

void sub_20F41BDB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::__clone()
{
  float result = operator new(0x10uLL);
  *float result = &unk_26C259ED8;
  return result;
}

void std::__function::__func<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C259ED8;
}

float std::__function::__func<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float result = 0.0;
  if (*a2 != 0.0) {
    return 1.0;
  }
  return result;
}

uint64_t std::__function::__func<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0,std::allocator<MIL::Passes::anonymous namespace'::ProcessSparsifiedTensor(MIL::MILContext &,MIL::ValueInference::Tensor<float> const&,MIL::IRDataType)::$_0>,float ()(float)>::target_type()
{
}

char *std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    float result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  }
  return result;
}

void sub_20F41BF04(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      int64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void std::vector<MIL::Passes::BlockInfo>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3B0] + 16;
  __cxa_throw(exception, MEMORY[0x263F8C200], MEMORY[0x263F8C088]);
}

unint64_t MIL::Passes::anonymous namespace'::FindClosestClusterId(float **a1, float ***a2)
{
  uint64_t v4 = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>,std::vector<float>,std::__identity,std::__less<void,void>>(*a2, a2[1], a1);
  int64_t v5 = *a2;
  if (a2[1] == v4) {
    return 0xAAAAAAAAAAAAAAABLL * (v4 - v5) - 1;
  }
  if (v5 == v4) {
    return 0;
  }
  uint64_t v6 = *v4;
  float v7 = 0.0;
  float v8 = 0.0;
  uint64_t v9 = (char *)v4[1] - (char *)*v4;
  if (v9)
  {
    unint64_t v10 = v9 >> 2;
    unint64_t v11 = *a1;
    if (v10 <= 1) {
      unint64_t v10 = 1;
    }
    do
    {
      float v12 = *v6++;
      float v13 = v12;
      float v14 = *v11++;
      float v8 = v8 + (float)((float)(v13 - v14) * (float)(v13 - v14));
      --v10;
    }
    while (v10);
  }
  size_t v15 = *(v4 - 3);
  float v16 = sqrtf(v8);
  uint64_t v17 = (char *)*(v4 - 2) - (char *)v15;
  if (v17)
  {
    unint64_t v18 = v17 >> 2;
    uint64_t v19 = *a1;
    if (v18 <= 1) {
      unint64_t v18 = 1;
    }
    float v7 = 0.0;
    do
    {
      float v20 = *v15++;
      float v21 = v20;
      float v22 = *v19++;
      float v7 = v7 + (float)((float)(v21 - v22) * (float)(v21 - v22));
      --v18;
    }
    while (v18);
  }
  if (v16 >= sqrtf(v7)) {
    uint64_t v23 = (char *)(v4 - 3) - (char *)v5;
  }
  else {
    uint64_t v23 = (char *)v4 - (char *)v5;
  }
  return 0xAAAAAAAAAAAAAAABLL * (v23 >> 3);
}

void *std::vector<std::vector<float>>::vector(void *a1, unint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = 3 * a2;
    float v8 = &v6[3 * a2];
    uint64_t v9 = 8 * v7;
    do
    {
      *uint64_t v6 = 0;
      v6[1] = 0;
      void v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20F41C288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    float result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F41C310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float> const*,std::vector<float> const*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20F41C3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  if (v1 != v2)
  {
    uint64_t v3 = **(void **)(a1 + 16);
    do
    {
      int64_t v5 = *(void **)(v3 - 24);
      v3 -= 24;
      uint64_t v4 = v5;
      if (v5)
      {
        *(void *)(v1 - 16) = v4;
        operator delete(v4);
      }
      uint64_t v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 2);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  char v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    float result = std::vector<float>::__vallocate[abi:ne180100](v7, v11);
    float v13 = (char *)v7[1];
    float v12 = (void **)(v7 + 1);
    char v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  float v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    float result = (char *)memmove(*(void **)result, __src, v14 - v9);
    char v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    float result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *float v12 = &v9[v17];
  return result;
}

uint64_t *std::__sample[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>,std::back_insert_iterator<std::vector<std::vector<float>>>,long,std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = (a2 - a1) / 24;
  if (v6 >= a4) {
    uint64_t v7 = a4;
  }
  else {
    uint64_t v7 = (a2 - a1) / 24;
  }
  if (v7)
  {
    uint64_t v9 = a1;
    uint64_t v10 = (uint64_t *)(v6 - 1);
    do
    {
      v12[0] = 0;
      v12[1] = v10;
      if (std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v12, a5, v12) < v7)
      {
        v12[0] = a3;
        std::back_insert_iterator<std::vector<std::vector<float>>>::operator=[abi:ne180100](v12, v9);
        --v7;
      }
      v9 += 24;
      uint64_t v10 = (uint64_t *)((char *)v10 - 1);
    }
    while (v7);
  }
  return a3;
}

uint64_t **std::back_insert_iterator<std::vector<std::vector<float>>>::operator=[abi:ne180100](uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v4 = (*a1)[2];
  uint64_t v6 = *a1;
  if (v5 >= v4)
  {
    uint64_t v7 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v6, a2);
  }
  else
  {
    std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v6, a2);
    uint64_t v7 = v5 + 24;
  }
  v3[1] = v7;
  return a1;
}

uint64_t std::uniform_int_distribution<long>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = a3[1];
  uint64_t v4 = result - *a3;
  if (result != *a3)
  {
    unint64_t v5 = v4 + 1;
    if (v4 == -1)
    {
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, 0x40uLL);
      return std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
    }
    else
    {
      unint64_t v7 = __clz(v5);
      uint64_t v8 = 63;
      if (((v5 << v7) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        uint64_t v8 = 64;
      }
      std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine((uint64_t)v10, a2, v8 - v7);
      do
        unint64_t v9 = std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval((uint64_t)v10);
      while (v9 >= v5);
      return *a3 + v9;
    }
  }
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__independent_bits_engine(uint64_t result, uint64_t a2, unint64_t a3)
{
  *(void *)uint64_t result = a2;
  *(void *)(result + 8) = a3;
  if ((a3 & 0x1F) != 0) {
    unint64_t v3 = (a3 >> 5) + 1;
  }
  else {
    unint64_t v3 = a3 >> 5;
  }
  unint64_t v4 = a3 / v3;
  *(void *)(result + 16) = a3 / v3;
  *(void *)(result + 24) = v3;
  unint64_t v5 = (-1 << (a3 / v3)) & 0x100000000;
  if (a3 / v3 >= 0x40) {
    unint64_t v5 = 0;
  }
  *(void *)(result + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  if ((v5 ^ 0x100000000) > v5 / v3)
  {
    ++v3;
    unint64_t v4 = a3 / v3;
    *(void *)(result + 16) = a3 / v3;
    *(void *)(result + 24) = v3;
    if (a3 / v3 > 0x3F)
    {
      unint64_t v6 = 0;
      *(void *)(result + 32) = v3 + v4 * v3 - a3;
      *(void *)(result + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      goto LABEL_13;
    }
    *(void *)(result + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = (-1 << v4) & 0x100000000;
  }
  *(void *)(result + 32) = v3 + a3 / v3 * v3 - a3;
  if (v4 > 0x3E) {
    unint64_t v6 = 0;
  }
  else {
    unint64_t v6 = 0x80000000uLL >> v4 << (v4 + 1);
  }
LABEL_13:
  *(void *)(result + 48) = v6;
  unsigned int v7 = 0xFFFFFFFF >> -(char)v4;
  if (!v4) {
    unsigned int v7 = 0;
  }
  if (v4 >= 0x1F) {
    unsigned int v8 = -1;
  }
  else {
    unsigned int v8 = 0xFFFFFFFF >> ~(_BYTE)v4;
  }
  *(_DWORD *)(result + 56) = v7;
  *(_DWORD *)(result + 6std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = v8;
  return result;
}

uint64_t std::__independent_bits_engine<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>,unsigned long>::__eval(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      do
        std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v4 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
      while (*(void *)(a1 + 40) <= (unint64_t)v4);
      unint64_t v5 = *(void *)(a1 + 16);
      if (v5 >= 0x40) {
        uint64_t v6 = 0;
      }
      else {
        uint64_t v6 = v2 << v5;
      }
      uint64_t v2 = v6 + (*(_DWORD *)(a1 + 56) & v4);
      ++v3;
      unint64_t v7 = *(void *)(a1 + 32);
    }
    while (v3 < v7);
  }
  else
  {
    uint64_t v2 = 0;
    unint64_t v7 = 0;
  }
  for (; v7 < *(void *)(a1 + 24); ++v7)
  {
    do
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(*(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> **)a1);
    while (*(void *)(a1 + 48) <= (unint64_t)v8);
    unint64_t v9 = *(void *)(a1 + 16);
    if (v9 >= 0x3F) {
      uint64_t v10 = 0;
    }
    else {
      uint64_t v10 = v2 << (v9 + 1);
    }
    uint64_t v2 = v10 + (*(_DWORD *)(a1 + 60) & v8);
  }
  return v2;
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i = this->__i_;
  size_t v2 = (i + 1) % 0x270;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return (i << 15) & 0xEFC60000 ^ i ^ (((i << 15) & 0xEFC60000 ^ i) >> 18);
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F41CA30(_Unwind_Exception *exception_object)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::discrete_distribution<int>::param_type::param_type[abi:ne180100]<std::__wrap_iter<float *>>(uint64_t a1, float *a2, float *a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)a1, a2, a3, a3 - a2);
  std::discrete_distribution<int>::param_type::__init((double **)a1);
  return a1;
}

void sub_20F41CA8C(_Unwind_Exception *exception_object)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::discrete_distribution<int>::param_type::__init(double **a1)
{
  uint64_t v1 = *a1;
  size_t v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      std::vector<double>::shrink_to_fit((uint64_t)a1);
    }
    else
    {
      uint64_t v4 = v2 - v1;
      double v5 = 0.0;
      uint64_t v6 = *a1;
      do
      {
        double v7 = *v6++;
        double v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        double *v1 = *v1 / v5;
        ++v1;
      }
      std::vector<double>::vector(&v16, v4 - 1);
      uint64_t v8 = *a1;
      uint64_t v9 = (uint64_t)(a1[1] - 1);
      uint64_t v10 = v16;
      if (*a1 != (double *)v9)
      {
        unint64_t v11 = v8 + 1;
        double v12 = *v8;
        *float v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          float v13 = v10 + 1;
          do
          {
            double v14 = *v11++;
            double v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      unint64_t v15 = a1[2];
      *(_OWORD *)(a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v17;
      float v16 = v8;
      *((void *)&v17 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v15;
      if (v8)
      {
        *(void *)&long long v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *std::vector<double>::__init_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, float *a2, float *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    double v7 = (double *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      float v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  }
  return result;
}

void sub_20F41CC10(_Unwind_Exception *exception_object)
{
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<double>::shrink_to_fit(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  double v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    unint64_t v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  double v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v2, v6);
  uint64_t v4 = *(char **)a1;
  float v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  unint64_t v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

void *std::vector<double>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20F41CD50(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::discrete_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(int a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, double **a3)
{
  double v5 = *a3;
  unint64_t v6 = a3[1];
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v7 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v8 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
  if (v6 != v5)
  {
    unint64_t v9 = v6 - v5;
    do
    {
      unint64_t v10 = v9 >> 1;
      unint64_t v11 = &v5[v9 >> 1];
      double v13 = *v11;
      uint64_t v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13) {
        unint64_t v9 = v10;
      }
      else {
        double v5 = v12;
      }
    }
    while (v9);
    unint64_t v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,false>(uint64_t *a1, std::vector<unsigned int> *a2, uint64_t a3, uint64_t a4, char a5)
{
  while (2)
  {
    unint64_t v11 = (uint64_t *)&a2[-1];
    uint64_t v12 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v12;
        uint64_t v13 = (char *)a2 - (char *)v12;
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
        if (!(!v6 & v5))
        {
          switch(v14)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              uint64_t v30 = *v12;
              uint64_t v31 = v12[1];
              if (*v12 == v31) {
                return;
              }
              uint64_t v32 = 0;
              std::vector<unsigned int>::pointer begin = a2[-1].__begin_;
              break;
            case 3uLL:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(v12, v12 + 3, v11);
              return;
            case 4uLL:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(v12, v12 + 3, v12 + 6, v11);
              return;
            case 5uLL:
              std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(v12, v12 + 3, v12 + 6, v12 + 9, v11);
              return;
            default:
              JUMPOUT(0);
          }
          while (1)
          {
            char v34 = (float *)&begin[v32];
            if (&begin[v32] == a2[-1].__end_) {
              break;
            }
            float v35 = *(float *)(v30 + v32 * 4);
            if (*v34 < v35) {
              break;
            }
            ++v32;
            if (v35 < *v34 || v32 * 4 + v30 == v31) {
              return;
            }
          }
          *uint64_t v12 = (uint64_t)begin;
          a2[-1].__begin_ = (std::vector<unsigned int>::pointer)v30;
          uint64_t v37 = (unsigned int *)v12[1];
          v12[1] = (uint64_t)a2[-1].__end_;
          a2[-1].__end_ = v37;
          uint64_t v38 = (unsigned int *)v12[2];
          uint64_t v12[2] = (uint64_t)a2[-1].__end_cap_.__value_;
          a2[-1].__end_cap_.__value_ = v38;
          return;
        }
        if (v13 <= 575)
        {
          if (a5)
          {
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>((std::vector<unsigned int> *)v12, a2);
          }
          else
          {
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>((std::vector<unsigned int> *)v12, a2);
          }
          return;
        }
        if (!a4)
        {
          if (v12 != (uint64_t *)a2)
          {
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,std::vector<float> *>((std::vector<unsigned int> *)v12, a2, &a2->__begin_, a3);
          }
          return;
        }
        unint64_t v15 = v14 >> 1;
        float v16 = &a1[3 * (v14 >> 1)];
        if ((unint64_t)v13 >= 0xC01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, &a1[3 * (v14 >> 1)], v11);
          long long v17 = v11;
          unint64_t v18 = &a1[3 * v15];
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1 + 3, v18 - 3, (uint64_t *)&a2[-2]);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1 + 6, &a1[3 * v15 + 3], (uint64_t *)&a2[-3]);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(v18 - 3, v16, &a1[3 * v15 + 3]);
          long long v19 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v16;
          *(_OWORD *)float v16 = v19;
          uint64_t v20 = a1[2];
          a1[2] = v18[2];
          v18[2] = v20;
          unint64_t v11 = v17;
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(&a1[3 * (v14 >> 1)], a1, v11);
        }
        --a4;
        if (a5) {
          break;
        }
        uint64_t v24 = a1[1];
        if (*a1 != v24)
        {
          uint64_t v25 = (float *)*(a1 - 3);
          uint64_t v26 = *a1 + 4;
          while (v25 != (float *)*(a1 - 2))
          {
            float v27 = *v25;
            float v28 = *(float *)(v26 - 4);
            if (*v25 < v28) {
              break;
            }
            ++v25;
            BOOL v29 = v28 < v27 || v26 == v24;
            v26 += 4;
            if (v29) {
              goto LABEL_23;
            }
          }
          break;
        }
LABEL_23:
        uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<float> *,std::__less<void,void> &>((uint64_t)a1, (unint64_t)a2);
        a5 = 0;
      }
      float v21 = (uint64_t *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<float> *,std::__less<void,void> &>((uint64_t)a1, (float **)a2);
      if ((v22 & 1) == 0) {
        goto LABEL_13;
      }
      BOOL v23 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, v21);
      uint64_t v12 = v21 + 3;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(v21 + 3, (uint64_t *)a2))
      {
        break;
      }
      if (!v23)
      {
LABEL_13:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,false>(a1, v21, a3, a4, a5 & 1);
        a5 = 0;
        uint64_t v12 = v21 + 3;
      }
    }
    a2 = (std::vector<unsigned int> *)v21;
    if (!v23) {
      continue;
    }
    break;
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(std::vector<unsigned int> *__c, std::vector<unsigned int> *a2)
{
  if (__c != a2)
  {
    uint64_t v4 = __c + 1;
    if (&__c[1] != a2)
    {
      char v5 = __c;
      do
      {
        char v6 = (__n128 *)v5;
        char v5 = v4;
        unint64_t v7 = v6->n128_u64[0];
        unint64_t v8 = v6->n128_u64[1];
        if (v6->n128_u64[0] != v8)
        {
          uint64_t v9 = 0;
          unint64_t v10 = (float *)v6[2].n128_u64[0];
          std::vector<unsigned int>::pointer begin = (float *)v5->__begin_;
          while (1)
          {
            uint64_t v12 = &begin[v9];
            if (&begin[v9] == v10) {
              break;
            }
            float v13 = *(float *)(v7 + v9 * 4);
            if (*v12 < v13) {
              break;
            }
            ++v9;
            if (v13 < *v12 || v9 * 4 + v7 == v8) {
              goto LABEL_32;
            }
          }
          unint64_t v15 = (unsigned int *)v6[2].n128_u64[1];
          v5->__begin_ = 0;
          v5->__end_ = 0;
          v5->__end_cap_.__value_ = 0;
          std::vector<float>::__move_assign((uint64_t)v5, v6);
          float v16 = __c;
          if (v6 != (__n128 *)__c)
          {
            long long v17 = v6;
            while (1)
            {
              unint64_t v19 = v17[-2].n128_u64[1];
              unint64_t v18 = v17[-1].n128_u64[0];
              long long v17 = (__n128 *)((char *)v17 - 24);
              if (v19 == v18) {
                break;
              }
              unint64_t v20 = v19 + 4;
              float v21 = begin;
              while (v21 != v10)
              {
                float v22 = *v21;
                float v23 = *(float *)(v20 - 4);
                if (*v21 < v23) {
                  break;
                }
                ++v21;
                BOOL v24 = v23 < v22 || v20 == v18;
                v20 += 4;
                if (v24) {
                  goto LABEL_28;
                }
              }
              std::vector<float>::__move_assign((uint64_t)v6, v17);
              char v6 = v17;
              if (v17 == (__n128 *)__c)
              {
                float v16 = __c;
                goto LABEL_29;
              }
            }
LABEL_28:
            float v16 = (std::vector<unsigned int> *)v6;
          }
LABEL_29:
          uint64_t v25 = v16->__begin_;
          if (v16->__begin_)
          {
            v16->__end_ = v25;
            operator delete(v25);
          }
          v16->__begin_ = (std::vector<unsigned int>::pointer)begin;
          v16->__end_ = (std::vector<unsigned int>::pointer)v10;
          v16->__end_cap_.__value_ = v15;
        }
LABEL_32:
        uint64_t v4 = v5 + 1;
      }
      while (&v5[1] != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(std::vector<unsigned int> *__c, std::vector<unsigned int> *a2)
{
  if (__c != a2)
  {
    uint64_t v3 = __c;
LABEL_3:
    while (&v3[1] != a2)
    {
      uint64_t v4 = (__n128 *)v3++;
      unint64_t v5 = v4->n128_u64[0];
      unint64_t v6 = v4->n128_u64[1];
      if (v4->n128_u64[0] != v6)
      {
        uint64_t v7 = 0;
        unint64_t v8 = (float *)v4[2].n128_u64[0];
        std::vector<unsigned int>::pointer begin = (float *)v3->__begin_;
        while (1)
        {
          unint64_t v10 = &begin[v7];
          if (&begin[v7] == v8) {
            break;
          }
          float v11 = *(float *)(v5 + v7 * 4);
          if (*v10 < v11) {
            break;
          }
          ++v7;
          if (v11 < *v10 || v7 * 4 + v5 == v6) {
            goto LABEL_3;
          }
        }
        unint64_t v13 = v4[2].n128_u64[1];
        v3->__begin_ = 0;
        v3->__end_ = 0;
        v3->__end_cap_.__value_ = 0;
        uint64_t v14 = (uint64_t)v3;
        while (1)
        {
          std::vector<float>::__move_assign(v14, v4);
          unint64_t v16 = v4[-2].n128_u64[1];
          unint64_t v15 = v4[-1].n128_u64[0];
          if (v16 == v15) {
            break;
          }
          uint64_t v14 = (uint64_t)v4;
          uint64_t v4 = (__n128 *)((char *)v4 - 24);
          unint64_t v17 = v16 + 4;
          unint64_t v18 = begin;
          while (v18 != v8)
          {
            float v19 = *v18;
            float v20 = *(float *)(v17 - 4);
            if (*v18 < v20) {
              break;
            }
            ++v18;
            BOOL v21 = v20 < v19 || v17 == v15;
            v17 += 4;
            if (v21)
            {
              uint64_t v4 = (__n128 *)v14;
              goto LABEL_25;
            }
          }
        }
LABEL_25:
        float v22 = (void *)v4->n128_u64[0];
        if (v4->n128_u64[0])
        {
          v4->n128_u64[1] = (unint64_t)v22;
          operator delete(v22);
        }
        v4->n128_u64[0] = (unint64_t)begin;
        v4->n128_u64[1] = (unint64_t)v8;
        v4[1].n128_u64[0] = v13;
      }
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a1 != v4)
  {
    uint64_t v7 = 0;
    while (1)
    {
      unint64_t v8 = (float *)(v5 + v7);
      if (v5 + v7 == v6) {
        break;
      }
      float v9 = *(float *)(v3 + v7);
      if (*v8 < v9) {
        break;
      }
      v7 += 4;
      if (v9 < *v8 || v7 + v3 == v4) {
        goto LABEL_10;
      }
    }
    if (v5 != v6)
    {
      uint64_t v17 = 0;
      uint64_t v18 = *a3;
      while (1)
      {
        float v19 = (float *)(v18 + v17);
        if (v18 + v17 == a3[1]) {
          break;
        }
        float v20 = *(float *)(v5 + v17);
        if (*v19 < v20) {
          break;
        }
        v17 += 4;
        if (v20 < *v19 || v17 + v5 == v6) {
          goto LABEL_29;
        }
      }
      *a1 = v18;
      *a3 = v3;
      uint64_t v42 = a1[1];
      a1[1] = a3[1];
      a3[1] = v42;
      float v23 = a1 + 2;
      char v34 = a3 + 2;
      uint64_t result = 1;
      goto LABEL_53;
    }
LABEL_29:
    *a1 = v5;
    *a2 = v3;
    uint64_t v22 = a1[1];
    a1[1] = a2[1];
    a2[1] = v22;
    float v23 = a2 + 2;
    uint64_t v24 = a1[2];
    a1[2] = a2[2];
    a2[2] = v24;
    uint64_t v25 = *a2;
    uint64_t v26 = a2[1];
    if (*a2 != v26)
    {
      uint64_t v27 = 0;
      uint64_t v28 = *a3;
      while (1)
      {
        BOOL v29 = (float *)(v28 + v27);
        if (v28 + v27 == a3[1]) {
          break;
        }
        float v30 = *(float *)(v25 + v27);
        if (*v29 < v30) {
          break;
        }
        v27 += 4;
        if (v30 < *v29 || v27 + v25 == v26) {
          return 1;
        }
      }
      *a2 = v28;
      *a3 = v25;
      uint64_t v43 = a2[1];
      a2[1] = a3[1];
      a3[1] = v43;
      char v34 = a3 + 2;
      goto LABEL_52;
    }
    return 1;
  }
LABEL_10:
  if (v5 == v6) {
    return 0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = *a3;
  while (1)
  {
    unint64_t v13 = (float *)(v12 + v11);
    if (v12 + v11 == a3[1]) {
      break;
    }
    float v14 = *(float *)(v5 + v11);
    if (*v13 < v14) {
      break;
    }
    v11 += 4;
    if (v14 < *v13 || v11 + v5 == v6) {
      return 0;
    }
  }
  *a2 = v12;
  *a3 = v5;
  uint64_t v32 = a2[1];
  a2[1] = a3[1];
  a3[1] = v32;
  char v34 = a2 + 2;
  uint64_t v33 = a2[2];
  a2[2] = a3[2];
  a3[2] = v33;
  uint64_t v35 = *a1;
  uint64_t v36 = a1[1];
  if (*a1 == v36) {
    return 1;
  }
  uint64_t v37 = 0;
  uint64_t v38 = *a2;
  while (1)
  {
    unint64_t v39 = (float *)(v38 + v37);
    if (v38 + v37 == a2[1]) {
      break;
    }
    float v40 = *(float *)(v35 + v37);
    if (*v39 < v40) {
      break;
    }
    v37 += 4;
    if (v40 < *v39 || v37 + v35 == v36) {
      return 1;
    }
  }
  *a1 = v38;
  *a2 = v35;
  uint64_t v44 = a1[1];
  a1[1] = a2[1];
  a2[1] = v44;
  float v23 = a1 + 2;
LABEL_52:
  uint64_t result = 2;
LABEL_53:
  uint64_t v45 = *v23;
  uint64_t *v23 = *v34;
  *char v34 = v45;
  return result;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<float> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(float **)a1;
  long long v3 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v5 = *(void *)(a2 - 24);
  uint64_t v4 = *(void *)(a2 - 16);
  if (v5 == v4)
  {
LABEL_10:
    uint64_t v11 = (uint64_t *)(a1 + 24);
    if (a1 + 24 < a2)
    {
      uint64_t v12 = (void *)a1;
      while (1)
      {
        uint64_t v14 = v12[3];
        uint64_t v13 = v12[4];
        uint64_t v12 = v11;
        if (v14 != v13) {
          break;
        }
LABEL_21:
        v11 += 3;
        if ((unint64_t)(v12 + 3) >= a2) {
          goto LABEL_34;
        }
      }
      uint64_t v15 = v14 + 4;
      unint64_t v16 = v2;
      while (v16 != (float *)v3)
      {
        float v17 = *v16;
        float v18 = *(float *)(v15 - 4);
        if (*v16 < v18) {
          break;
        }
        ++v16;
        BOOL v19 = v18 < v17 || v15 == v13;
        v15 += 4;
        if (v19) {
          goto LABEL_21;
        }
      }
    }
  }
  else
  {
    uint64_t v6 = v5 + 4;
    uint64_t v7 = v2;
    while (v7 != (float *)v3)
    {
      float v8 = *v7;
      float v9 = *(float *)(v6 - 4);
      if (*v7 < v9) {
        break;
      }
      ++v7;
      BOOL v10 = v9 < v8 || v6 == v4;
      v6 += 4;
      if (v10) {
        goto LABEL_10;
      }
    }
    uint64_t v11 = (uint64_t *)a1;
    do
    {
LABEL_24:
      uint64_t v21 = v11[3];
      uint64_t v20 = v11[4];
      v11 += 3;
    }
    while (v21 == v20);
    uint64_t v22 = v21 + 4;
    float v23 = v2;
    while (v23 != (float *)v3)
    {
      float v24 = *v23;
      float v25 = *(float *)(v22 - 4);
      if (*v23 < v25) {
        break;
      }
      ++v23;
      BOOL v26 = v25 < v24 || v22 == v20;
      v22 += 4;
      if (v26) {
        goto LABEL_24;
      }
    }
  }
LABEL_34:
  if ((unint64_t)v11 < a2) {
    uint64_t v27 = (uint64_t *)(a2 - 24);
  }
  else {
    uint64_t v27 = (uint64_t *)a2;
  }
  if ((unint64_t)v11 < a2 && v5 != v4)
  {
    uint64_t v27 = (uint64_t *)(a2 - 24);
    do
    {
      uint64_t v28 = v5 + 4;
      BOOL v29 = v2;
      while (v29 != (float *)v3)
      {
        float v30 = *v29;
        float v31 = *(float *)(v28 - 4);
        if (*v29 < v31) {
          break;
        }
        ++v29;
        BOOL v32 = v31 < v30 || v28 == v4;
        v28 += 4;
        if (v32) {
          goto LABEL_50;
        }
      }
      uint64_t v5 = *(v27 - 3);
      uint64_t v4 = *(v27 - 2);
      v27 -= 3;
    }
    while (v5 != v4);
  }
LABEL_50:
  if (v11 < v27)
  {
    uint64_t v33 = *v11;
    uint64_t v34 = *v27;
    do
    {
      *uint64_t v11 = v34;
      uint64_t *v27 = v33;
      uint64_t v35 = v11[1];
      v11[1] = v27[1];
      v27[1] = v35;
      uint64_t v36 = v11[2];
      void v11[2] = v27[2];
      v27[2] = v36;
      do
      {
LABEL_53:
        uint64_t v33 = v11[3];
        uint64_t v37 = v11[4];
        v11 += 3;
      }
      while (v33 == v37);
      uint64_t v38 = 0;
      while (1)
      {
        unint64_t v39 = &v2[v38];
        if (&v2[v38] == (float *)v3) {
          break;
        }
        float v40 = *(float *)(v33 + v38 * 4);
        if (*v39 < v40) {
          break;
        }
        ++v38;
        if (v40 < *v39 || v38 * 4 + v33 == v37) {
          goto LABEL_53;
        }
      }
      while (1)
      {
        uint64_t v34 = *(v27 - 3);
        uint64_t v46 = *(v27 - 2);
        v27 -= 3;
        if (v34 == v46) {
          break;
        }
        uint64_t v42 = 0;
        while (1)
        {
          uint64_t v43 = &v2[v42];
          if (&v2[v42] == (float *)v3) {
            break;
          }
          float v44 = *(float *)(v34 + v42 * 4);
          if (*v43 < v44) {
            break;
          }
          ++v42;
          if (v44 < *v43 || v42 * 4 + v34 == v46) {
            goto LABEL_73;
          }
        }
      }
LABEL_73:
      ;
    }
    while (v11 < v27);
  }
  uint64_t v47 = (void **)(v11 - 3);
  long long v50 = v3;
  if (v11 - 3 != (uint64_t *)a1)
  {
    std::vector<float>::__move_assign(a1, (__n128 *)(v11 - 3));
    long long v3 = v50;
  }
  uint64_t v48 = *v47;
  if (*v47)
  {
    *(v11 - 2) = (uint64_t)v48;
    operator delete(v48);
    long long v3 = v50;
  }
  *(v11 - 3) = (uint64_t)v2;
  *((_OWORD *)v11 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
  return v11;
}

float **std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<float> *,std::__less<void,void> &>(uint64_t a1, float **a2)
{
  uint64_t v2 = a2;
  long long v3 = *(float **)a1;
  long long v4 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  long long v48 = v4;
  uint64_t v5 = (float *)v4;
  unint64_t v6 = a1 + 24;
  if (v3 == (float *)v4) {
    goto LABEL_24;
  }
  uint64_t v7 = a1;
LABEL_3:
  float v8 = (float **)v6;
  float v9 = *(float **)(v7 + 24);
  BOOL v10 = v3 + 1;
  do
  {
    if (v9 == *(float **)(v7 + 32) || (v11 = *v9, float v12 = *(v10 - 1), *v9 < v12))
    {
      v6 += 24;
      uint64_t v7 = (uint64_t)v8;
      goto LABEL_3;
    }
    ++v9;
  }
  while (v12 >= v11 && v10++ != v5);
  if (v7 == a1)
  {
LABEL_24:
    if (v6 >= (unint64_t)a2)
    {
      float v8 = (float **)v6;
    }
    else
    {
      while (1)
      {
        uint64_t v21 = v2 - 3;
        if (v3 != v5) {
          break;
        }
LABEL_34:
        v2 -= 3;
        if (v6 >= (unint64_t)v21) {
          goto LABEL_35;
        }
      }
      uint64_t v22 = *v21;
      float v23 = v3 + 1;
      while (v22 != *(v2 - 2))
      {
        float v24 = *v22;
        float v25 = *(v23 - 1);
        if (*v22 < v25) {
          break;
        }
        ++v22;
        if (v25 < v24 || v23++ == v5) {
          goto LABEL_34;
        }
      }
LABEL_35:
      float v8 = (float **)v6;
      uint64_t v2 = v21;
    }
  }
  else
  {
    do
    {
LABEL_14:
      uint64_t v14 = v2;
      v2 -= 3;
    }
    while (v3 == v5);
    uint64_t v15 = *(v14 - 2);
    unint64_t v16 = *v2;
    float v17 = v3 + 1;
    while (v16 != v15)
    {
      float v18 = *v16;
      float v19 = *(v17 - 1);
      if (*v16 < v19) {
        break;
      }
      ++v16;
      if (v19 < v18 || v17++ == v5) {
        goto LABEL_14;
      }
    }
  }
  uint64_t v27 = v8;
  if (v8 < v2)
  {
    uint64_t v28 = *v2;
    uint64_t v27 = v8;
    BOOL v29 = v2;
    do
    {
      float v30 = *v27;
      uint64_t *v27 = v28;
      float *v29 = v30;
      float v31 = v27[1];
      v27[1] = v29[1];
      v29[1] = v31;
      BOOL v32 = v27[2];
      v27[2] = v29[2];
      void v29[2] = v32;
      uint64_t v33 = v27 + 3;
      if (v3 != v5)
      {
        while (1)
        {
          uint64_t v34 = v27[3];
          uint64_t v35 = v3 + 1;
          while (v34 != v27[4])
          {
            float v36 = *v34;
            float v37 = *(v35 - 1);
            if (*v34 < v37) {
              break;
            }
            ++v34;
            if (v37 < v36 || v35++ == v5) {
              goto LABEL_50;
            }
          }
          uint64_t v27 = v33;
          v33 += 3;
        }
      }
LABEL_50:
      uint64_t v27 = v33;
      do
      {
LABEL_51:
        unint64_t v39 = v29;
        v29 -= 3;
      }
      while (v3 == v5);
      uint64_t v40 = 0;
      int v41 = *(v39 - 2);
      uint64_t v28 = *v29;
      while (1)
      {
        uint64_t v42 = &v28[v40];
        if (&v28[v40] == v41) {
          break;
        }
        float v43 = v3[v40];
        if (*v42 < v43) {
          break;
        }
        ++v40;
        if (v43 < *v42 || &v3[v40] == v5) {
          goto LABEL_51;
        }
      }
    }
    while (v27 < v29);
  }
  uint64_t v45 = (void **)(v27 - 3);
  if (v27 - 3 != (float **)a1) {
    std::vector<float>::__move_assign(a1, (__n128 *)(v27 - 3));
  }
  uint64_t v46 = (float *)*v45;
  if (*v45)
  {
    *(v27 - 2) = v46;
    operator delete(v46);
  }
  *(v27 - 3) = v3;
  *((_OWORD *)v27 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v48;
  return v27 - 3;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1];
      if (*a1 != v7)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(a2 - 3);
        do
        {
          BOOL v10 = (float *)(v9 + v8);
          if (v9 + v8 == *(a2 - 2) || (float v11 = *(float *)(v6 + v8), *v10 < v11))
          {
            *a1 = v9;
            *(a2 - 3) = v6;
            uint64_t v35 = a1[1];
            a1[1] = *(a2 - 2);
            *(a2 - 2) = v35;
            uint64_t v36 = a1[2];
            a1[2] = *(a2 - 1);
            *(a2 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v36;
            return 1;
          }
          v8 += 4;
        }
        while (v11 >= *v10 && v8 + v6 != v7);
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      uint64_t v13 = (__n128 *)(a1 + 6);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a1 + 3, a1 + 6);
      uint64_t v14 = (__n128 *)(a1 + 9);
      if (a1 + 9 == a2) {
        return 1;
      }
      int v15 = 0;
      break;
  }
  while (1)
  {
    unint64_t v16 = v13->n128_u64[0];
    unint64_t v17 = v13->n128_u64[1];
    if (v13->n128_u64[0] != v17)
    {
      uint64_t v18 = 0;
      uint64_t v20 = (float *)v14->n128_u64[0];
      float v19 = (float *)v14->n128_u64[1];
      while (1)
      {
        uint64_t v21 = &v20[v18];
        if (&v20[v18] == v19) {
          break;
        }
        float v22 = *(float *)(v16 + v18 * 4);
        if (*v21 < v22) {
          break;
        }
        ++v18;
        if (v22 < *v21 || v18 * 4 + v16 == v17) {
          goto LABEL_42;
        }
      }
      unint64_t v24 = v14[1].n128_u64[0];
      v14->n128_u64[0] = 0;
      v14->n128_u64[1] = 0;
      v14[1].n128_u64[0] = 0;
      std::vector<float>::__move_assign((uint64_t)v14, v13);
      float v25 = (__n128 *)a1;
      if (v13 != (__n128 *)a1)
      {
        BOOL v26 = v13;
        while (1)
        {
          unint64_t v28 = v26[-2].n128_u64[1];
          unint64_t v27 = v26[-1].n128_u64[0];
          BOOL v26 = (__n128 *)((char *)v26 - 24);
          if (v28 == v27) {
            break;
          }
          unint64_t v29 = v28 + 4;
          float v30 = v20;
          while (v30 != v19)
          {
            float v31 = *v30;
            float v32 = *(float *)(v29 - 4);
            if (*v30 < v32) {
              break;
            }
            ++v30;
            BOOL v33 = v32 < v31 || v29 == v27;
            v29 += 4;
            if (v33) {
              goto LABEL_38;
            }
          }
          std::vector<float>::__move_assign((uint64_t)v13, v26);
          uint64_t v13 = v26;
          if (v26 == (__n128 *)a1)
          {
            float v25 = (__n128 *)a1;
            goto LABEL_39;
          }
        }
LABEL_38:
        float v25 = v13;
      }
LABEL_39:
      uint64_t v34 = (void *)v25->n128_u64[0];
      if (v25->n128_u64[0])
      {
        v25->n128_u64[1] = (unint64_t)v34;
        operator delete(v34);
      }
      v25->n128_u64[0] = (unint64_t)v20;
      v25->n128_u64[1] = (unint64_t)v19;
      v25[1].n128_u64[0] = v24;
      if (++v15 == 8) {
        return &v14[1].n128_i8[8] == (__int8 *)a2;
      }
    }
LABEL_42:
    uint64_t v13 = v14;
    uint64_t v14 = (__n128 *)((char *)v14 + 24);
    if (v14 == (__n128 *)a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a2, a3);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = *a4;
    while (1)
    {
      uint64_t v13 = (float *)(v12 + v11);
      if (v12 + v11 == a4[1]) {
        break;
      }
      float v14 = *(float *)(v9 + v11);
      if (*v13 < v14) {
        break;
      }
      v11 += 4;
      if (v14 < *v13 || v11 + v9 == v10) {
        return result;
      }
    }
    *a3 = v12;
    *a4 = v9;
    uint64_t v16 = a3[1];
    a3[1] = a4[1];
    a4[1] = v16;
    uint64_t v17 = a3[2];
    a3[2] = a4[2];
    a4[2] = v17;
    uint64_t v18 = *a2;
    uint64_t v19 = a2[1];
    if (*a2 != v19)
    {
      uint64_t v20 = 0;
      uint64_t v21 = *a3;
      while (1)
      {
        float v22 = (float *)(v21 + v20);
        if (v21 + v20 == a3[1]) {
          break;
        }
        float v23 = *(float *)(v18 + v20);
        if (*v22 < v23) {
          break;
        }
        v20 += 4;
        if (v23 < *v22 || v20 + v18 == v19) {
          return result;
        }
      }
      *a2 = v21;
      *a3 = v18;
      uint64_t v25 = a2[1];
      a2[1] = a3[1];
      a3[1] = v25;
      uint64_t v26 = a2[2];
      a2[2] = a3[2];
      a3[2] = v26;
      uint64_t v27 = *a1;
      uint64_t v28 = a1[1];
      if (*a1 != v28)
      {
        uint64_t v29 = 0;
        uint64_t v30 = *a2;
        while (1)
        {
          float v31 = (float *)(v30 + v29);
          if (v30 + v29 == a2[1]) {
            break;
          }
          float v32 = *(float *)(v27 + v29);
          if (*v31 < v32) {
            break;
          }
          v29 += 4;
          if (v32 < *v31 || v29 + v27 == v28) {
            return result;
          }
        }
        *a1 = v30;
        *a2 = v27;
        uint64_t v34 = a1[1];
        a1[1] = a2[1];
        a2[1] = v34;
        uint64_t v35 = a1[2];
        a1[2] = a2[2];
        a2[2] = v35;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a2, a3, a4);
  uint64_t v11 = *a4;
  uint64_t v12 = a4[1];
  if (*a4 != v12)
  {
    uint64_t v13 = 0;
    uint64_t v14 = *a5;
    while (1)
    {
      int v15 = (float *)(v14 + v13);
      if (v14 + v13 == a5[1]) {
        break;
      }
      float v16 = *(float *)(v11 + v13);
      if (*v15 < v16) {
        break;
      }
      v13 += 4;
      if (v16 < *v15 || v13 + v11 == v12) {
        return result;
      }
    }
    *a4 = v14;
    *a5 = v11;
    uint64_t v18 = a4[1];
    a4[1] = a5[1];
    a5[1] = v18;
    uint64_t v19 = a4[2];
    a4[2] = a5[2];
    a5[2] = v19;
    uint64_t v20 = *a3;
    uint64_t v21 = a3[1];
    if (*a3 != v21)
    {
      uint64_t v22 = 0;
      uint64_t v23 = *a4;
      while (1)
      {
        unint64_t v24 = (float *)(v23 + v22);
        if (v23 + v22 == a4[1]) {
          break;
        }
        float v25 = *(float *)(v20 + v22);
        if (*v24 < v25) {
          break;
        }
        v22 += 4;
        if (v25 < *v24 || v22 + v20 == v21) {
          return result;
        }
      }
      *a3 = v23;
      *a4 = v20;
      uint64_t v27 = a3[1];
      a3[1] = a4[1];
      a4[1] = v27;
      uint64_t v28 = a3[2];
      a3[2] = a4[2];
      a4[2] = v28;
      uint64_t v29 = *a2;
      uint64_t v30 = a2[1];
      if (*a2 != v30)
      {
        uint64_t v31 = 0;
        uint64_t v32 = *a3;
        while (1)
        {
          BOOL v33 = (float *)(v32 + v31);
          if (v32 + v31 == a3[1]) {
            break;
          }
          float v34 = *(float *)(v29 + v31);
          if (*v33 < v34) {
            break;
          }
          v31 += 4;
          if (v34 < *v33 || v31 + v29 == v30) {
            return result;
          }
        }
        *a2 = v32;
        *a3 = v29;
        uint64_t v36 = a2[1];
        a2[1] = a3[1];
        a3[1] = v36;
        uint64_t v37 = a2[2];
        a2[2] = a3[2];
        a3[2] = v37;
        uint64_t v38 = *a1;
        uint64_t v39 = a1[1];
        if (*a1 != v39)
        {
          uint64_t v40 = 0;
          uint64_t v41 = *a2;
          while (1)
          {
            uint64_t v42 = (float *)(v41 + v40);
            if (v41 + v40 == a2[1]) {
              break;
            }
            float v43 = *(float *)(v38 + v40);
            if (*v42 < v43) {
              break;
            }
            v40 += 4;
            if (v43 < *v42 || v40 + v38 == v39) {
              return result;
            }
          }
          *a1 = v41;
          *a2 = v38;
          uint64_t v45 = a1[1];
          a1[1] = a2[1];
          a2[1] = v45;
          uint64_t v46 = a1[2];
          a1[2] = a2[2];
          a2[2] = v46;
        }
      }
    }
  }
  return result;
}

unsigned int **std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *,std::vector<float> *>(std::vector<unsigned int> *a1, std::vector<unsigned int> *a2, unsigned int **a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = (uint64_t)a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if ((unsigned int **)v6 != a3)
    {
      uint64_t v14 = (unsigned int **)v6;
      do
      {
        std::vector<unsigned int>::pointer begin = a1->__begin_;
        std::vector<std::string>::pointer end = a1->__end_;
        if (a1->__begin_ != end)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *v14;
          while (1)
          {
            uint64_t v19 = (float *)&v18[v17];
            if (&v18[v17] == v14[1]) {
              break;
            }
            float v20 = *(float *)&begin[v17];
            if (*v19 < v20) {
              break;
            }
            ++v17;
            if (v20 < *v19 || &begin[v17] == end) {
              goto LABEL_18;
            }
          }
          *uint64_t v14 = begin;
          a1->__begin_ = v18;
          uint64_t v22 = v14[1];
          v14[1] = a1->__end_;
          a1->__end_ = v22;
          uint64_t v23 = v14[2];
          void v14[2] = a1->__end_cap_.__value_;
          a1->__end_cap_.__value_ = v23;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>((uint64_t)a1, a4, v9, a1);
        }
LABEL_18:
        v14 += 3;
      }
      while (v14 != a3);
      uint64_t v13 = (uint64_t)a3;
    }
    if (v8 >= 25)
    {
      unint64_t v24 = v8 / 0x18uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::vector<float> *>(a1, v6, a4, v24);
        v6 -= 24;
      }
      while (v24-- > 2);
    }
    return (unsigned int **)v13;
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t a1, int a2, uint64_t a3, std::vector<unsigned int> *this)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v6 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)this - a1) >> 3)))
    {
      uint64_t v8 = (0x5555555555555556 * (((uint64_t)this - a1) >> 3)) | 1;
      uint64_t v9 = (__n128 *)(a1 + 24 * v8);
      if (0x5555555555555556 * (((uint64_t)this - a1) >> 3) + 2 < a3)
      {
        unint64_t v11 = v9[1].n128_u64[1];
        unint64_t v10 = v9[2].n128_u64[0];
        if (v11 != v10)
        {
          uint64_t v12 = (float *)v9->n128_u64[0];
          unint64_t v13 = v11 + 4;
          while (v12 != *(float **)(a1 + 24 * v8 + 8))
          {
            float v14 = *v12;
            float v15 = *(float *)(v13 - 4);
            if (*v12 < v15) {
              break;
            }
            ++v12;
            BOOL v16 = v15 < v14 || v13 == v10;
            v13 += 4;
            if (v16) {
              goto LABEL_15;
            }
          }
          uint64_t v9 = (__n128 *)((char *)v9 + 24);
          uint64_t v8 = 0x5555555555555556 * (((uint64_t)this - a1) >> 3) + 2;
        }
      }
LABEL_15:
      std::vector<unsigned int>::pointer begin = this->__begin_;
      std::vector<std::string>::pointer end = this->__end_;
      if (this->__begin_ == end)
      {
LABEL_24:
        value = this->__end_cap_.__value_;
        this->__begin_ = 0;
        this->__end_ = 0;
        this->__end_cap_.__value_ = 0;
        std::vector<float>::__move_assign((uint64_t)this, v9);
        if (v6 >= v8)
        {
          while (1)
          {
            uint64_t v27 = 2 * v8;
            uint64_t v8 = (2 * v8) | 1;
            float v25 = (__n128 *)(a1 + 24 * v8);
            if (v27 + 2 < a3)
            {
              unint64_t v29 = v25[1].n128_u64[1];
              unint64_t v28 = v25[2].n128_u64[0];
              if (v29 != v28)
              {
                uint64_t v30 = (float *)v25->n128_u64[0];
                unint64_t v31 = v29 + 4;
                while (v30 != *(float **)(a1 + 24 * v8 + 8))
                {
                  float v32 = *v30;
                  float v33 = *(float *)(v31 - 4);
                  if (*v30 < v33) {
                    break;
                  }
                  ++v30;
                  BOOL v34 = v33 < v32 || v31 == v28;
                  v31 += 4;
                  if (v34) {
                    goto LABEL_42;
                  }
                }
                float v25 = (__n128 *)((char *)v25 + 24);
                uint64_t v8 = v27 + 2;
              }
            }
LABEL_42:
            if (begin != end) {
              break;
            }
LABEL_51:
            std::vector<float>::__move_assign((uint64_t)v9, v25);
            uint64_t v9 = v25;
            if (v6 < v8) {
              goto LABEL_26;
            }
          }
          uint64_t v35 = (float *)v25->n128_u64[0];
          uint64_t v36 = begin + 1;
          while (v35 != (float *)v25->n128_u64[1])
          {
            float v37 = *v35;
            float v38 = *((float *)v36 - 1);
            if (*v35 < v38) {
              break;
            }
            ++v35;
            if (v38 < v37 || v36++ == end) {
              goto LABEL_51;
            }
          }
        }
        float v25 = v9;
LABEL_26:
        uint64_t v26 = (void *)v25->n128_u64[0];
        if (v25->n128_u64[0])
        {
          v25->n128_u64[1] = (unint64_t)v26;
          operator delete(v26);
        }
        v25->n128_u64[0] = (unint64_t)begin;
        v25->n128_u64[1] = (unint64_t)end;
        v25[1].n128_u64[0] = (unint64_t)value;
      }
      else
      {
        uint64_t v19 = (float *)v9->n128_u64[0];
        float v20 = begin + 1;
        while (v19 != (float *)v9->n128_u64[1])
        {
          float v21 = *v19;
          float v22 = *((float *)v20 - 1);
          if (*v19 < v22) {
            break;
          }
          ++v19;
          if (v22 < v21 || v20++ == end) {
            goto LABEL_24;
          }
        }
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,std::vector<float> *>(std::vector<unsigned int> *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    std::vector<unsigned int>::pointer begin = a1->__begin_;
    std::vector<unsigned int>::pointer end = a1->__end_;
    value = a1->__end_cap_.__value_;
    a1->__end_ = 0;
    a1->__end_cap_.__value_ = 0;
    a1->__begin_ = 0;
    unint64_t v10 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(a1, a3, a4);
    unint64_t v11 = v10;
    uint64_t v12 = (void **)(a2 - 24);
    if (v10 == (std::vector<unsigned int> *)(a2 - 24))
    {
      std::vector<unsigned int>::pointer v15 = v10->__begin_;
      if (v11->__begin_)
      {
        v11->__end_ = v15;
        operator delete(v15);
        v11->__begin_ = 0;
        v11->__end_ = 0;
        v11->__end_cap_.__value_ = 0;
      }
      v11->__begin_ = begin;
      v11->__end_ = end;
      v11->__end_cap_.__value_ = value;
    }
    else
    {
      std::vector<float>::__move_assign((uint64_t)v10, (__n128 *)(a2 - 24));
      uint64_t v13 = (uint64_t)&v11[1];
      float v14 = *v12;
      if (*v12)
      {
        *(void *)(a2 - 16) = v14;
        operator delete(v14);
        *uint64_t v12 = 0;
        *(void *)(a2 - 16) = 0;
        *(void *)(a2 - 8) = 0;
      }
      *(void *)(a2 - 24) = begin;
      *(void *)(a2 - 16) = end;
      *(void *)(a2 - 8) = value;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>((uint64_t)a1, v13, a3, 0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)a1) >> 3));
    }
  }
}

void sub_20F41E7C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int> *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(std::vector<unsigned int> *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = a3 - 2;
  if (a3 < 2) {
    uint64_t v6 = a3 - 1;
  }
  uint64_t v7 = v6 >> 1;
  do
  {
    uint64_t v8 = this;
    uint64_t v9 = v5 + 1;
    this += v5 + 1;
    uint64_t v10 = 2 * v5;
    uint64_t v5 = (2 * v5) | 1;
    uint64_t v11 = v10 + 2;
    if (v11 < a3)
    {
      std::vector<unsigned int>::pointer begin = this[1].__begin_;
      std::vector<unsigned int>::pointer end = this[1].__end_;
      if (begin != end)
      {
        float v14 = v8[v9].__end_;
        std::vector<unsigned int>::pointer v15 = this->__begin_;
        std::vector<unsigned int>::pointer v16 = begin + 1;
        while (v15 != v14)
        {
          float v17 = *(float *)v15;
          float v18 = *((float *)v16 - 1);
          if (*(float *)v15 < v18) {
            break;
          }
          ++v15;
          if (v18 < v17 || v16++ == end) {
            goto LABEL_16;
          }
        }
        ++this;
        uint64_t v5 = v11;
      }
    }
LABEL_16:
    std::vector<float>::__move_assign((uint64_t)v8, (__n128 *)this);
  }
  while (v5 <= v7);
  return this;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::vector<float> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    uint64_t v7 = *(float **)(a2 - 24);
    uint64_t v8 = *(float **)(a2 - 16);
    uint64_t v6 = (void *)(a2 - 24);
    if (v7 != v8)
    {
      uint64_t v9 = 0;
      unint64_t v10 = v4 >> 1;
      uint64_t v11 = (float **)(a1 + 24 * (v4 >> 1));
      uint64_t v12 = *v11;
      while (1)
      {
        uint64_t v13 = &v12[v9];
        if (&v12[v9] == v11[1]) {
          break;
        }
        float v14 = v7[v9];
        if (*v13 < v14) {
          break;
        }
        ++v9;
        if (v14 < *v13 || &v7[v9] == v8) {
          return;
        }
      }
      std::vector<unsigned int>::pointer v16 = *(float **)(a2 - 8);
      *uint64_t v6 = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      std::vector<float>::__move_assign((uint64_t)v6, (__n128 *)(a1 + 24 * (v4 >> 1)));
      if (v4 >= 2)
      {
        do
        {
          uint64_t v17 = (uint64_t)v11;
          unint64_t v18 = v10 - 1;
          unint64_t v10 = (v10 - 1) >> 1;
          uint64_t v11 = (float **)(a1 + 24 * v10);
          uint64_t v19 = *v11;
          float v20 = v7 + 1;
          while (v19 != v11[1])
          {
            float v21 = *v19;
            float v22 = *(v20 - 1);
            if (*v19 < v22) {
              break;
            }
            ++v19;
            if (v22 < v21 || v20++ == v8)
            {
              uint64_t v11 = (float **)v17;
              goto LABEL_23;
            }
          }
          std::vector<float>::__move_assign(v17, (__n128 *)(a1 + 24 * v10));
        }
        while (v18 > 1);
      }
LABEL_23:
      unint64_t v24 = *v11;
      if (*v11)
      {
        v11[1] = v24;
        operator delete(v24);
      }
      *uint64_t v11 = v7;
      v11[1] = v8;
      void v11[2] = v16;
    }
  }
}

void *std::vector<std::vector<std::vector<float>>>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20F41EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (void **)**a1;
  if (v2)
  {
    unint64_t v4 = (void **)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        uint64_t v6 = v4;
        std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_20F41EB5C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  std::vector<unsigned int>::pointer v15 = v11;
  std::vector<unsigned int>::pointer v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_20F41EC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<unsigned long long>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

float **std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<std::vector<float> const*>,std::__wrap_iter<std::vector<float> const*>,std::vector<float>,std::__identity,std::__less<void,void>>(float **result, float **a2, void *a3)
{
  if (a2 != result)
  {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (a2 - result);
    uint64_t v4 = a3[1];
    do
    {
      unint64_t v5 = v3 >> 1;
      if (*a3 != v4)
      {
        uint64_t v6 = &result[3 * v5];
        uint64_t v7 = *v6;
        uint64_t v8 = *a3 + 4;
        while (v7 != v6[1])
        {
          float v9 = *v7;
          float v10 = *(float *)(v8 - 4);
          if (*v7 < v10) {
            break;
          }
          ++v7;
          BOOL v11 = v10 < v9 || v8 == v4;
          v8 += 4;
          if (v11) {
            goto LABEL_14;
          }
        }
        uint64_t result = v6 + 3;
        unint64_t v5 = v3 + ~v5;
      }
LABEL_14:
      unint64_t v3 = v5;
    }
    while (v5);
  }
  return result;
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F41EFCC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F41F050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  BOOL v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20F41F110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F41F184(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    long long v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 2);
    if (v14 >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 2;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v14) {
      unint64_t v14 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    unint64_t v28 = &v18[4 * v15];
    std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = v18;
    BOOL v34 = v28;
    uint64_t v36 = &v18[4 * v17];
    uint64_t v29 = 4 * a5;
    uint64_t v30 = &v28[4 * a5];
    do
    {
      int v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)unint64_t v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    uint64_t v35 = v30;
    unint64_t v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    float v21 = &__src[4 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[4 * a5];
    float v25 = &v23[-4 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        int v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)uint64_t v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  float v21 = &__src[4 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_20F41F378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    size_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      int v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  long long v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void *std::vector<unsigned long long>::vector(void *a1, unint64_t a2, void *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (void *)a1[1];
    uint64_t v7 = &v6[a2];
    uint64_t v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F41F4E0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::pair<unsigned long long,unsigned long long>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    int v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    int64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t std::vector<MIL::ValueInference::Tensor<unsigned char>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 6)
  {
    if (a2 >> 58) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    void v7[3] = v7[0] + (v6 << 6);
    std::vector<MIL::ValueInference::Tensor<unsigned char>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20F41F630(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<MIL::ValueInference::Tensor<unsigned char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>,std::reverse_iterator<MIL::ValueInference::Tensor<unsigned char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 64) = &unk_26C259E78;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(a3 + v7 - 40);
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      uint64_t v11 = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v8 - 8) = v11;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 64);
    *(void *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<MIL::ValueInference::Tensor<unsigned char>>::__push_back_slow_path<MIL::ValueInference::Tensor<unsigned char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(v7, v9);
  uint64_t v11 = &v10[64 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[64 * v12];
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *(void *)uint64_t v11 = &unk_26C259E78;
  *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  void v15[2] = v11 + 64;
  std::vector<MIL::ValueInference::Tensor<unsigned char>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_20F41F90C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MIL::ValueInference::Tensor<unsigned char>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<MIL::ValueInference::Tensor<float>>::__push_back_slow_path<MIL::ValueInference::Tensor<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 6;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 5 > v5) {
    unint64_t v5 = v8 >> 5;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
    unint64_t v9 = 0x3FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  v15[4] = a1 + 2;
  uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<unsigned char>>>(v7, v9);
  uint64_t v11 = &v10[64 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[64 * v12];
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 3) = 0;
  *(void *)uint64_t v11 = &unk_26C259DB8;
  *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((void *)v11 + 3) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = *(void *)(a2 + 56);
  void v15[2] = v11 + 64;
  std::vector<MIL::ValueInference::Tensor<float>>::__swap_out_circular_buffer(a1, v15);
  uint64_t v13 = a1[1];
  std::__split_buffer<MIL::ValueInference::Tensor<float>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_20F41FA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<MIL::ValueInference::Tensor<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<MIL::ValueInference::Tensor<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<float>>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<MIL::ValueInference::Tensor<float>>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>,std::reverse_iterator<MIL::ValueInference::Tensor<float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 64) = &unk_26C259DB8;
      *(void *)(v8 - 56) = 0;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      *(_OWORD *)(v8 - 56) = *(_OWORD *)(a3 + v7 - 56);
      *(void *)(v8 - 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(a3 + v7 - 40);
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      *(void *)(v8 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 32);
      *(__n128 *)(v8 - 32) = result;
      uint64_t v11 = *(void *)(a3 + v7 - 8);
      *(void *)(v8 - 16) = *(void *)(a3 + v7 - 16);
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v8 - 8) = v11;
      v7 -= 64;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<MIL::ValueInference::Tensor<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    uint64_t v4 = *(void (***)(void))(i - 64);
    *(void *)(a1 + 16) = i - 64;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<MIL::ValueInference::Tensor<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 64;
      uint64_t v7 = v4 - 64;
      uint64_t v8 = v4 - 64;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 64;
        (*v9)(v7);
        v6 -= 64;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<MIL::ValueInference::Tensor<unsigned char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 64;
      uint64_t v7 = v4 - 64;
      uint64_t v8 = v4 - 64;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 64;
        (*v9)(v7);
        v6 -= 64;
        BOOL v10 = v7 == v2;
        uint64_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::~__func()
{
}

void *std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C259F58;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C259F58;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return (*(uint64_t (**)(float, float))(a1 + 8))(*a2, *a3);
}

uint64_t std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<float (*)(float,float),std::allocator<float (*)(float,float)>,float ()(float,float)>::target_type()
{
}

void *std::__function::__value_func<float ()(float,float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F41FF10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::~__func()
{
}

void *std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C25A008;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25A008;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  return (*(uint64_t (**)(float))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<float (*)(float),std::allocator<float (*)(float)>,float ()(float)>::target_type()
{
}

void *std::__function::__value_func<float ()(float)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::vector<float>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_20F4200F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<unsigned long long>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      unint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    unint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

void std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::~__func()
{
}

void *std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26C25A0A8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C25A0A8;
  a2[1] = v2;
  return result;
}

float std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::operator()(uint64_t a1, float *a2)
{
  float result = *a2;
  if (fabsf(*a2) <= **(float **)(a1 + 8)) {
    return 0.0;
  }
  return result;
}

uint64_t std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0,std::allocator<MIL::Passes::SparsifyWithThreshold(MIL::MILContext &,std::shared_ptr<MIL::IRValue const>,float)::$_0>,float ()(float)>::target_type()
{
}

float std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3, float result)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    do
    {
      unint64_t v7 = v4 - a1;
      if (v7 < 2) {
        break;
      }
      if (v7 == 3)
      {
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        float result = *(v4 - 1);
        float v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
      {
        return std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(a1, v4, result);
      }
      uint64_t v8 = &a1[v7 >> 1];
      uint64_t v9 = v4 - 1;
      int v10 = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(a1, v8, v4 - 1);
      float result = *a1;
      if (*a1 >= *v8)
      {
        unint64_t v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            *unint64_t v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        float v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            float v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *uint64_t v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9) {
          return result;
        }
        while (1)
        {
          float v25 = *a1;
          do
          {
            float v26 = *v21++;
            float result = v26;
          }
          while (v25 >= v26);
          int v27 = v21 - 1;
          do
          {
            float v28 = *--v9;
            float v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9) {
            break;
          }
          float *v27 = v29;
          *uint64_t v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2) {
          return result;
        }
      }
      else
      {
        unint64_t v11 = v4 - 1;
LABEL_13:
        uint64_t v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          uint64_t v16 = a1 + 1;
        }
        else
        {
          uint64_t v13 = a1 + 1;
          while (1)
          {
            float v14 = *v8;
            do
            {
              float v15 = *v13++;
              float result = v15;
            }
            while (v15 < v14);
            uint64_t v16 = v13 - 1;
            do
            {
              float v17 = *--v11;
              float v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11) {
              break;
            }
            *uint64_t v16 = v18;
            *unint64_t v11 = result;
            ++v10;
            if (v16 == v8) {
              uint64_t v8 = v11;
            }
          }
        }
        if (v16 != v8)
        {
          float result = *v8;
          float v19 = *v16;
          if (*v8 < *v16)
          {
            *uint64_t v16 = result;
            *uint64_t v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v16 <= a2)
          {
            uint64_t v23 = v16 + 1;
            while (v23 != v4)
            {
              float v24 = *(v23 - 1);
              float result = *v23++;
              if (result < v24) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v12 != v16)
            {
              float v20 = *(v12 - 1);
              float result = *v12++;
              if (result < v20) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          a1 = v16 + 1;
        }
        else {
          uint64_t v4 = v16;
        }
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a1;
  float v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4) {
      return 1;
    }
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    float v6 = *a1;
    if (*a2 >= *a1) {
      return 1;
    }
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float std::__selection_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::less<float> &,std::__wrap_iter<float *>>(float *a1, float *a2, float result)
{
  while (a1 != a2 - 1)
  {
    float v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      float result = *v3;
      float v4 = a1;
      float v5 = v3;
      float v6 = a1;
      do
      {
        float v7 = *v6++;
        float v8 = v7;
        if (v7 < result)
        {
          float result = v8;
          float v5 = v4;
        }
        float v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        float result = *v3;
        float *v3 = *v5;
        float *v5 = result;
      }
    }
  }
  return result;
}

uint64_t std::set<float>::set[abi:ne180100]<float const*>(uint64_t a1, float *a2, float *a3)
{
  *(void *)(a1 + 8) = 0;
  float v4 = (float *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    float v6 = a2;
    do
    {
      std::__tree<float>::__emplace_hint_unique_key_args<float,float const&>((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20F420724(_Unwind_Exception *a1)
{
  std::__tree<float>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<float>::__emplace_hint_unique_key_args<float,float const&>(uint64_t **a1, float *a2, float *a3, _DWORD *a4)
{
  float v6 = std::__tree<float>::__find_equal<float>(a1, a2, &v11, &v10, a3);
  float v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    float v8 = (uint64_t **)v6;
    float v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

float *std::__tree<float>::__find_equal<float>(void *a1, float *a2, float **a3, float *a4, float *a5)
{
  float v5 = (float *)(a1 + 1);
  if (a1 + 1 == (void *)a2 || (float v6 = *a5, v7 = a2[7], *a5 < v7))
  {
    float v8 = *(uint64_t **)a2;
    if ((float *)*a1 == a2)
    {
      float v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 2;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      uint64_t v9 = *(uint64_t **)a2;
      do
      {
        float v10 = (float *)v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        float v10 = (float *)*((void *)v13 + 2);
        BOOL v14 = *(void *)v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    float v15 = *a5;
    if (v10[7] < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *(float **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          float v17 = v16;
          float v18 = v16[7];
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *(float **)v16;
          float v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v18 >= v15) {
          break;
        }
        float v5 = v16 + 2;
        uint64_t v16 = (float *)*((void *)v16 + 1);
      }
      while (v16);
      goto LABEL_43;
    }
LABEL_42:
    float v17 = (float *)(a1 + 1);
LABEL_43:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *(void *)a4 = a2;
    return a4;
  }
  uint64_t v11 = *((void *)a2 + 1);
  if (v11)
  {
    uint64_t v12 = (float *)*((void *)a2 + 1);
    do
    {
      a4 = v12;
      uint64_t v12 = *(float **)v12;
    }
    while (v12);
  }
  else
  {
    float v19 = a2;
    do
    {
      a4 = (float *)*((void *)v19 + 2);
      BOOL v14 = *(void *)a4 == (void)v19;
      float v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[7])
  {
    float v20 = *(float **)v5;
    if (*(void *)v5)
    {
      do
      {
        while (1)
        {
          float v17 = v20;
          float v21 = v20[7];
          if (v6 >= v21) {
            break;
          }
          float v20 = *(float **)v20;
          float v5 = v17;
          if (!*(void *)v17) {
            goto LABEL_43;
          }
        }
        if (v21 >= v6) {
          break;
        }
        float v5 = v20 + 2;
        float v20 = (float *)*((void *)v20 + 1);
      }
      while (v20);
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 2;
  }
  return a4;
}

void std::__tree<float>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<float>::destroy(a1, *a2);
    std::__tree<float>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

void *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__tree_const_iterator<float,std::__tree_node<float,void *> *,long>,std::__tree_const_iterator<float,std::__tree_node<float,void *> *,long>,std::__wrap_iter<float *>,0>(void *a1, void *a2, _DWORD *a3)
{
  if (a1 == a2) {
    return a1;
  }
  do
  {
    *a3 = *((_DWORD *)a1 + 7);
    float v3 = (void *)a1[1];
    if (v3)
    {
      do
      {
        float v4 = v3;
        float v3 = (void *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        float v4 = (void *)a1[2];
        BOOL v5 = *v4 == (void)a1;
        a1 = v4;
      }
      while (!v5);
    }
    ++a3;
    a1 = v4;
  }
  while (v4 != a2);
  return a2;
}

float *std::__hash_table<std::__hash_value_type<float,unsigned char>,std::__unordered_map_hasher<float,std::__hash_value_type<float,unsigned char>,std::hash<float>,std::equal_to<float>,true>,std::__unordered_map_equal<float,std::__hash_value_type<float,unsigned char>,std::equal_to<float>,std::hash<float>,true>,std::allocator<std::__hash_value_type<float,unsigned char>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(uint64_t a1, float *a2, uint64_t a3, float **a4)
{
  if (*a2 == 0.0) {
    unint64_t v7 = 0;
  }
  else {
    unint64_t v7 = *(unsigned int *)a2;
  }
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = v7;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = v7 & (v8 + 0xFFFFFFFF);
    }
    float v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = (float *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (v11[4] == *a2) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = *(float **)v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = (float *)operator new(0x18uLL);
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  v11[4] = **a4;
  *((unsigned char *)v11 + 2std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  float v20 = *(float ***)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)uint64_t v11 = *v20;
LABEL_41:
    float *v20 = v11;
    goto LABEL_42;
  }
  *(void *)uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    float v20 = (float **)(*(void *)a1 + 8 * v21);
    goto LABEL_41;
  }
LABEL_42:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_20F420C38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>,std::reverse_iterator<std::vector<unsigned char>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned char>>,std::reverse_iterator<std::vector<unsigned char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::vector<unsigned char>>::__push_back_slow_path<std::vector<unsigned char> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  unint64_t v17 = a1 + 2;
  if (v9) {
    float v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    float v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  BOOL v15 = v11;
  unint64_t v16 = &v10[24 * v9];
  *(void *)uint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v11, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  v15 += 24;
  std::vector<std::vector<unsigned char>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_20F420EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::Passes::AddOperationIdAttributes(MIL::Passes *this, MIL::Transform::ProgramTransformer *a2)
{
  MIL::Transform::ProgramTransformer::GetProgramBuilder((uint64_t)this, &v28);
  float v25 = 0;
  float v26 = 0;
  unint64_t v27 = 0;
  uint64_t v2 = *(uint64_t **)(MIL::Builder::ProgramBuilder::GetFunctions(v28) + 16);
  if (v2)
  {
    uint64_t v3 = v26;
    do
    {
      unint64_t v4 = (long long *)(v2 + 2);
      if ((unint64_t)v3 >= v27)
      {
        uint64_t v3 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v25, v4);
      }
      else
      {
        if (*((char *)v2 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(v3, (const std::string::value_type *)v2[2], v2[3]);
        }
        else
        {
          long long v5 = *v4;
          v3->__r_.__value_.__r.__words[2] = v2[4];
          *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v5;
        }
        ++v3;
      }
      float v26 = v3;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = v26;
  }
  unint64_t v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v3 - (char *)v25) >> 3));
  if (v3 == v25) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v6;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v25, (long long *)v3, (uint64_t)&v23, v7, 1);
  unint64_t v8 = (unsigned __int8 *)v25;
  unint64_t v9 = v26;
  if (v25 != v26)
  {
    do
    {
      MIL::Builder::ProgramBuilder::GetFunction((uint64_t)v28, v8, &v23);
      float v20 = 0;
      unint64_t v21 = 0;
      unint64_t v22 = 0;
      float v10 = *(uint64_t **)(MIL::Builder::FunctionBuilder::GetSpecializations(v23) + 16);
      for (i = v21; v10; float v10 = (uint64_t *)*v10)
      {
        uint64_t v12 = (long long *)(v10 + 2);
        if ((unint64_t)i >= v22)
        {
          uint64_t i = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string const&>((uint64_t *)&v20, v12);
        }
        else
        {
          if (*((char *)v10 + 39) < 0)
          {
            std::string::__init_copy_ctor_external(i, (const std::string::value_type *)v10[2], v10[3]);
          }
          else
          {
            long long v13 = *v12;
            i->__r_.__value_.__r.__words[2] = v10[4];
            *(_OWORD *)&i->__r_.__value_.__l.__data_ = v13;
          }
          ++i;
        }
        unint64_t v21 = i;
      }
      unint64_t v14 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)i - (char *)v20) >> 3));
      if (i == v20) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v14;
      }
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v20, (long long *)i, (uint64_t)&v18, v15, 1);
      unint64_t v16 = (unsigned __int8 *)v20;
      if (v20 != v21)
      {
        MIL::Builder::FunctionBuilder::GetContext((uint64_t)v23, &v19);
        unint64_t v17 = (_anonymous_namespace_ *)v19;
        MIL::Builder::FunctionBuilder::GetBlock((uint64_t)v23, v16, &v18);
      }
      uint64_t v19 = &v20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
      v8 += 24;
    }
    while (v8 != (unsigned __int8 *)v9);
  }
  float v20 = (std::string *)&v25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_20F42112C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  a13 = (void **)&a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::AddAttributesToBlockOperations(_anonymous_namespace_ *this, MIL::MILContext *a2, MIL::Builder::BlockBuilder *a3)
{
}

void sub_20F421498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a16);
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = (void *)(v19 - 112);
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    float v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    float v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_20F4216A4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void MIL::Passes::TypeInferenceResult::~TypeInferenceResult(void **this)
{
  MIL::MILResult::~MILResult(this);

  JUMPOUT(0x21056C700);
}

MIL::MILResult *MIL::Passes::TypeInferenceResult::TypeInferenceResult(MIL::Passes::TypeInferenceResult *this)
{
  uint64_t result = MIL::MILResult::MILResult(this);
  *(void *)uint64_t result = &unk_26C25A128;
  *((_DWORD *)result + 12) = 2;
  return result;
}

{
  MIL::MILResult *result;

  uint64_t result = MIL::MILResult::MILResult(this);
  *(void *)uint64_t result = &unk_26C25A128;
  *((_DWORD *)result + 12) = 2;
  return result;
}

uint64_t MIL::Passes::TypeInferenceResult::TypeInferenceResult(uint64_t a1, long long *a2, int a3, uint64_t a4)
{
  long long v9 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p = *(_OWORD *)a4;
  uint64_t v8 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  MIL::MILResult::MILResult(a1, (uint64_t)&v9, (__n128 *)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  *(void *)a1 = &unk_26C25A128;
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

void sub_20F42183C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Passes::TypeInferenceResult::GetReason(MIL::Passes::TypeInferenceResult *this)
{
  return *((unsigned int *)this + 12);
}

BOOL MIL::Passes::TypeInferenceResult::IsGood(MIL::Passes::TypeInferenceResult *this)
{
  return *((_DWORD *)this + 12) == 2;
}

void MIL::Passes::PropagateValueTypes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void MIL::Passes::PropagateValueTypes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  float v33 = 0;
  if (*(_DWORD *)(a5 + 48) == 2)
  {
    MIL::MILResult::~MILResult((void **)a5);
    uint64_t v11 = (uint64_t *)(a3 + 16);
    long long v12 = v33;
    uint64_t v13 = (uint64_t **)v11;
    while (1)
    {
      uint64_t v13 = (uint64_t **)*v13;
      if (!v13) {
        break;
      }
      if (!MIL::Builder::FunctionBuilder::TryGetInput((uint64_t)v12, (uint64_t)(v13 + 2)))
      {
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v28);
        unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"No input named ", 15);
        int v15 = *((char *)v13 + 39);
        if (v15 >= 0) {
          uint64_t v16 = (uint64_t)(v13 + 2);
        }
        else {
          uint64_t v16 = (uint64_t)v13[2];
        }
        if (v15 >= 0) {
          uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v17 = (uint64_t)v13[3];
        }
        int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
        uint64_t v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" in function ", 13);
        int v20 = *(char *)(a2 + 23);
        if (v20 >= 0) {
          uint64_t v21 = a2;
        }
        else {
          uint64_t v21 = *(void *)a2;
        }
        if (v20 >= 0) {
          uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          uint64_t v22 = *(void *)(a2 + 8);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
        LocationPtr = (void *)MIL::Builder::FunctionBuilder::GetLocationPtr(v12);
        uint64_t v24 = LocationPtr[1];
        *(void *)&long long v27 = *LocationPtr;
        *((void *)&v27 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        std::stringbuf::str();
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v27, 3, (uint64_t)&__p);
        if (v26 < 0) {
          operator delete(__p);
        }
        if (*((void *)&v27 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
        }
        *(void *)&v28[0] = *MEMORY[0x263F8C2C8];
        *(void *)((char *)v28 + *(void *)(*(void *)&v28[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        *((void *)&v28[0] + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = MEMORY[0x263F8C318] + 16;
        if (v31 < 0) {
          operator delete(v30);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x21056C620](&v32);
        return;
      }
    }
    memset(v28, 0, sizeof(v28));
    int v29 = 1065353216;
    if (*v11) {
      MIL::IRTypedArgument::Make(*(MIL::IRTypedArgument **)(*v11 + 40), v10);
    }
    if (*(_DWORD *)(a5 + 48) == 2)
    {
      MIL::MILResult::~MILResult((void **)a5);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v28);
  }
}

void sub_20F421BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void anonymous namespace'::GetFuncBuilder(uint64_t a1@<X0>, uint64_t a2@<X1>, MIL::Builder::FunctionBuilder **a3@<X2>, uint64_t a4@<X8>)
{
  MIL::Transform::ProgramTransformer::GetProgramBuilder(a1, &v37);
  uint64_t Functions = MIL::Builder::ProgramBuilder::GetFunctions(v37);
  uint64_t v8 = (void *)std::unordered_map<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>::unordered_map((uint64_t)v36, Functions);
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v8, (unsigned __int8 *)a2))
  {
    MIL::Builder::ProgramBuilder::GetFunction((uint64_t)v37, (unsigned __int8 *)a2, &v31);
    long long v9 = v31;
    float v10 = (std::__shared_weak_count *)v32;
    *a3 = v31;
    if (v10)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      long long v9 = *a3;
    }
    if (*(void *)(MIL::Builder::FunctionBuilder::GetSpecializations(v9) + 24) == 1)
    {
      LocationPtr = (void *)MIL::Builder::ProgramBuilder::GetLocationPtr(v37);
      uint64_t v12 = LocationPtr[1];
      *(void *)&long long v24 = *LocationPtr;
      *((void *)&v24 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Success");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a4, &v24, 2, (uint64_t)__p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v13 = (std::__shared_weak_count *)*((void *)&v24 + 1);
      if (!*((void *)&v24 + 1)) {
        goto LABEL_32;
      }
LABEL_31:
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      goto LABEL_32;
    }
    int v20 = (void *)MIL::Builder::FunctionBuilder::GetLocationPtr(*a3);
    uint64_t v21 = v20[1];
    *(void *)&long long v27 = *v20;
    *((void *)&v27 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v21;
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v25, "Only support exactly 1 IRFunction specialization");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a4, &v27, 4, (uint64_t)v25);
    if (v26 < 0) {
      operator delete(v25[0]);
    }
    uint64_t v13 = (std::__shared_weak_count *)*((void *)&v27 + 1);
    if (*((void *)&v27 + 1)) {
      goto LABEL_31;
    }
  }
  else
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v31);
    unint64_t v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"No function named ", 18);
    int v15 = *(char *)(a2 + 23);
    if (v15 >= 0) {
      uint64_t v16 = a2;
    }
    else {
      uint64_t v16 = *(void *)a2;
    }
    if (v15 >= 0) {
      uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v17 = *(void *)(a2 + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    int v18 = (void *)MIL::Builder::ProgramBuilder::GetLocationPtr(v37);
    uint64_t v19 = v18[1];
    *(void *)&long long v30 = *v18;
    *((void *)&v30 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    std::stringbuf::str();
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a4, &v30, 3, (uint64_t)&v28);
    if (v29 < 0) {
      operator delete(v28);
    }
    if (*((void *)&v30 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v30 + 1));
    }
    char v31 = (MIL::Builder::FunctionBuilder *)*MEMORY[0x263F8C2C8];
    *(MIL::Builder::FunctionBuilder **)((char *)&v31 + *((void *)v31 - 3)) = *(MIL::Builder::FunctionBuilder **)(MEMORY[0x263F8C2C8] + 24);
    uint64_t v32 = MEMORY[0x263F8C318] + 16;
    if (v34 < 0) {
      operator delete(v33);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x21056C620](&v35);
  }
LABEL_32:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v36);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
}

void sub_20F421EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v34 - 88);
  uint64_t v36 = *(std::__shared_weak_count **)(v34 - 40);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::IRTypedArgument>::operator=[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRTypedArgument>::shared_ptr[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void anonymous namespace'::InferValueTypesFromFunction(MIL::Builder::FunctionBuilder *this@<X1>, uint64_t a2@<X0>, void *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  float v10 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization(this);
  MIL::Builder::FunctionBuilder::GetBlock((uint64_t)this, v10, &v11);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20F422088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ModifyFunctionWithTypes(MIL::Builder::FunctionBuilder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  long long v6 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization(a1);
  MIL::Builder::FunctionBuilder::GetBlock((uint64_t)a1, v6, &v19);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (*(_DWORD *)(a3 + 48) == 2)
  {
    MIL::MILResult::~MILResult((void **)a3);
    MIL::Builder::FunctionBuilder::GetInputs((MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)a1, (uint64_t)&v19);
    for (uint64_t i = v21; i; uint64_t i = (uint64_t **)*i)
    {
      uint64_t Name = MIL::Builder::Variable::GetName((MIL::Builder::Variable::VariableImpl **)i[2]);
      if (*((char *)Name + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)Name, *((void *)Name + 1));
      }
      else
      {
        long long v9 = *(_OWORD *)Name;
        v18.__r_.__value_.__r.__words[2] = *((void *)Name + 2);
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v9;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v18))
      {
        MIL::Builder::FunctionBuilder::RemoveInput((uint64_t)a1, (const void **)&v18.__r_.__value_.__l.__data_);
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
        }
        else {
          std::string v17 = v18;
        }
        float v10 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v18);
        if (!v10) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        Valueuint64_t Type = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v10 + 5));
        MIL::Builder::FunctionBuilder::AddInput((uint64_t)a1, (uint64_t)&v17, ValueType);
        if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v17.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
    }
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v19);
    LocationPtr = (void *)MIL::Builder::FunctionBuilder::GetLocationPtr(a1);
    uint64_t v13 = LocationPtr[1];
    *(void *)&long long v16 = *LocationPtr;
    *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Success");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a3, &v16, 2, (uint64_t)__p);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)&v16 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v16 + 1));
    }
  }
}

void sub_20F42226C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Passes::PropagateInputTensorShapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

void MIL::Passes::PropagateInputTensorShapes(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  v129 = 0;
  if (*(_DWORD *)(a5 + 48) == 2)
  {
    MIL::MILResult::~MILResult((void **)a5);
    memset(v127, 0, sizeof(v127));
    int v128 = 1065353216;
    float v10 = *(uint64_t ***)(a3 + 16);
    if (v10)
    {
      while (1)
      {
        Input = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::FunctionBuilder::TryGetInput((uint64_t)v129, (uint64_t)(v10 + 2));
        if (!Input)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v122);
          unint64_t v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"No input named ", 15);
          int v58 = *((char *)v10 + 39);
          if (v58 >= 0) {
            uint64_t v59 = (uint64_t)(v10 + 2);
          }
          else {
            uint64_t v59 = (uint64_t)v10[2];
          }
          if (v58 >= 0) {
            uint64_t v60 = *((unsigned __int8 *)v10 + 39);
          }
          else {
            uint64_t v60 = (uint64_t)v10[3];
          }
          int v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v59, v60);
          uint64_t v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" in function ", 13);
          int v63 = *(char *)(a2 + 23);
          if (v63 >= 0) {
            uint64_t v64 = a2;
          }
          else {
            uint64_t v64 = *(void *)a2;
          }
          if (v63 >= 0) {
            uint64_t v65 = *(unsigned __int8 *)(a2 + 23);
          }
          else {
            uint64_t v65 = *(void *)(a2 + 8);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, v64, v65);
          LocationPtr = (void *)MIL::Builder::FunctionBuilder::GetLocationPtr(v129);
          uint64_t v67 = LocationPtr[1];
          *(void *)&long long v121 = *LocationPtr;
          *((void *)&v121 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v67;
          if (v67) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v67 + 8), 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v121, 3, (uint64_t)&v119);
          if (v120 < 0) {
            operator delete(v119);
          }
          uint64_t v68 = (std::__shared_weak_count *)*((void *)&v121 + 1);
          if (*((void *)&v121 + 1)) {
            goto LABEL_58;
          }
          goto LABEL_59;
        }
        uint64_t Type = (MIL *)MIL::Builder::Variable::TryGetType(Input);
        unint64_t v14 = Type;
        if (!Type) {
          break;
        }
        if (MIL::IsTensor(Type, v13))
        {
          uint64_t v15 = MIL::IRValueType::AsTensorType(v14);
          (*(void (**)(uint64_t))(*(void *)v15 + 88))(v15);
          long long __p = 0uLL;
          v97 = 0;
          std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, v10[5], (uint64_t)v10[6], v10[6] - v10[5]);
          uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 80))(v15);
          std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v122, v16);
          MIL::Builder::FunctionBuilder::GetContext((uint64_t)v129, &v101);
          MIL::IRTensorValueType::MakeWithShape();
        }
        if (!MIL::IRValueType::TryCastAsStateType(v14))
        {
          if (MIL::IsTensorBuffer(v14, v17))
          {
            MIL::Builder::FunctionBuilder::GetContext((uint64_t)v129, &v105);
            v102 = 0;
            v103 = 0;
            uint64_t v104 = 0;
            std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v102, v10[5], (uint64_t)v10[6], v10[6] - v10[5]);
            if (v102)
            {
              v103 = v102;
              operator delete(v102);
            }
            if (v106) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v106);
            }
            MIL::IRTypedArgument::Make(TensorBufferArgumentHelper, v26);
          }
          if (MIL::IsPixelBuffer(v14, v25))
          {
            uint64_t v40 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v14);
            uint64_t v41 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v40);
            PixelFormatuint64_t Type = MIL::IRPixelBufferValueType::GetPixelFormatType(v41);
            long long __p = 0uLL;
            v97 = 0;
            std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, v10[5], (uint64_t)v10[6], v10[6] - v10[5]);
            uint64_t BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(v41);
            uint64_t Attributes = MIL::IRPixelBufferValueType::GetAttributes(v41);
            std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v122, Attributes);
            if (BytesPerRow)
            {
              uint64_t v45 = MIL::IRPixelBufferValueType::GetBytesPerRow((MIL::IRPixelBufferValueTypeImpl **)v41);
              memset(&v101, 0, sizeof(v101));
              std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v101, *(const void **)v45, *(void *)(v45 + 8), (uint64_t)(*(void *)(v45 + 8) - *(void *)v45) >> 3);
              MIL::Builder::FunctionBuilder::GetContext((uint64_t)v129, &v115);
              uint64_t v46 = (MIL::IRTypedArgument *)MIL::IRPixelBufferValueType::MakeWithShape(v115, PixelFormatType, (uint64_t)&__p, (uint64_t)&v101, (uint64_t *)&v122);
              MIL::IRTypedArgument::Make(v46, v47);
            }
            MIL::Builder::FunctionBuilder::GetContext((uint64_t)v129, &v101);
            long long v48 = (MIL::IRTypedArgument *)MIL::IRPixelBufferValueType::MakeWithShape(v101.__r_.__value_.__l.__data_, PixelFormatType, &__p, (uint64_t *)&v122);
            MIL::IRTypedArgument::Make(v48, v49);
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v122);
          char v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"PropagateInputTensorShapes: Unsupported input type for: ", 56);
          int v88 = *((char *)v10 + 39);
          if (v88 >= 0) {
            uint64_t v89 = (uint64_t)(v10 + 2);
          }
          else {
            uint64_t v89 = (uint64_t)v10[2];
          }
          if (v88 >= 0) {
            uint64_t v90 = *((unsigned __int8 *)v10 + 39);
          }
          else {
            uint64_t v90 = (uint64_t)v10[3];
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, v89, v90);
          unint64_t v91 = (void *)MIL::Builder::FunctionBuilder::GetLocationPtr(v129);
          uint64_t v92 = v91[1];
          *(void *)&long long v100 = *v91;
          *((void *)&v100 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v92;
          if (v92) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v92 + 8), 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v100, 3, (uint64_t)&v98);
          if (v99 < 0) {
            operator delete(v98);
          }
          uint64_t v68 = (std::__shared_weak_count *)*((void *)&v100 + 1);
          if (!*((void *)&v100 + 1)) {
            goto LABEL_59;
          }
LABEL_58:
          std::__shared_weak_count::__release_shared[abi:ne180100](v68);
          goto LABEL_59;
        }
        std::string v18 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
        Wrappeduint64_t Type = MIL::IRStateValueType::GetWrappedType(v18);
        if ((*(uint64_t (**)(uint64_t))(*(void *)WrappedType + 24))(WrappedType))
        {
          int v20 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
          uint64_t v21 = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v20);
          uint64_t v22 = MIL::IRValueType::AsTensorType(v21);
          (*(void (**)(uint64_t))(*(void *)v22 + 88))(v22);
          long long __p = 0uLL;
          v97 = 0;
          std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, v10[5], (uint64_t)v10[6], v10[6] - v10[5]);
          uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 80))(v22);
          std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v122, v23);
          long long v24 = v129;
          MIL::Builder::FunctionBuilder::GetContext((uint64_t)v129, &v101);
          MIL::Builder::FunctionBuilder::GetContext((uint64_t)v24, &v115);
          MIL::IRTensorValueType::MakeWithShape();
        }
        float v28 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
        char v29 = (void *)MIL::IRStateValueType::GetWrappedType(v28);
        if (!MIL::IRValueType::TryCastAsMemoryLayoutType(v29))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v122);
          uint64_t v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"PropagateInputTensorShapes: State input ", 40);
          int v81 = *((char *)v10 + 39);
          if (v81 >= 0) {
            uint64_t v82 = (uint64_t)(v10 + 2);
          }
          else {
            uint64_t v82 = (uint64_t)v10[2];
          }
          if (v81 >= 0) {
            uint64_t v83 = *((unsigned __int8 *)v10 + 39);
          }
          else {
            uint64_t v83 = (uint64_t)v10[3];
          }
          v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v82, v83);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)" wraps an invalid type.", 23);
          v85 = (void *)MIL::Builder::FunctionBuilder::GetLocationPtr(v129);
          uint64_t v86 = v85[1];
          *(void *)&long long v109 = *v85;
          *((void *)&v109 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v86;
          if (v86) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v86 + 8), 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v109, 3, (uint64_t)&v107);
          if (v108 < 0) {
            operator delete(v107);
          }
          uint64_t v68 = (std::__shared_weak_count *)*((void *)&v109 + 1);
          if (!*((void *)&v109 + 1)) {
            goto LABEL_59;
          }
          goto LABEL_58;
        }
        long long v30 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
        char v31 = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v30);
        uint64_t v32 = MIL::IRValueType::AsMemoryLayoutType(v31);
        if (MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v32))
        {
          float v33 = (MIL::IRStateValueType *)MIL::IRValueType::AsStateType(v14);
          uint64_t v34 = (MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(v33);
          uint64_t v35 = v129;
          MIL::Builder::FunctionBuilder::GetContext((uint64_t)v129, &v113);
          v110 = 0;
          v111 = 0;
          uint64_t v112 = 0;
          std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v110, v10[5], (uint64_t)v10[6], v10[6] - v10[5]);
          if (v110)
          {
            v111 = v110;
            operator delete(v110);
          }
          if (v114) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v114);
          }
          MIL::Builder::FunctionBuilder::GetContext((uint64_t)v35, &v122);
          float v38 = (MIL::IRTypedArgument *)MIL::IRStateValueType::Make(v122, v36, v37);
          MIL::IRTypedArgument::Make(v38, v39);
        }
        float v10 = (uint64_t **)*v10;
        if (!v10) {
          goto LABEL_29;
        }
      }
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v122);
      int v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"PropagateInputTensorShapes cannot detect the type of ", 53);
      int v70 = *((char *)v10 + 39);
      if (v70 >= 0) {
        uint64_t v71 = (uint64_t)(v10 + 2);
      }
      else {
        uint64_t v71 = (uint64_t)v10[2];
      }
      if (v70 >= 0) {
        uint64_t v72 = *((unsigned __int8 *)v10 + 39);
      }
      else {
        uint64_t v72 = (uint64_t)v10[3];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, v71, v72);
      int v73 = (void *)MIL::Builder::FunctionBuilder::GetLocationPtr(v129);
      uint64_t v74 = v73[1];
      *(void *)&long long v118 = *v73;
      *((void *)&v118 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v74;
      if (v74) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v74 + 8), 1uLL, memory_order_relaxed);
      }
      std::stringbuf::str();
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v118, 3, (uint64_t)&v116);
      if (v117 < 0) {
        operator delete(v116);
      }
      uint64_t v68 = (std::__shared_weak_count *)*((void *)&v118 + 1);
      if (*((void *)&v118 + 1)) {
        goto LABEL_58;
      }
LABEL_59:
      v122 = (MIL::IRStateValueType *)*MEMORY[0x263F8C2C8];
      *(MIL::IRStateValueType **)((char *)&v122 + *((void *)v122 - 3)) = *(MIL::IRStateValueType **)(MEMORY[0x263F8C2C8] + 24);
      uint64_t v123 = MEMORY[0x263F8C318] + 16;
      if (v125 < 0) {
        operator delete(v124);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x21056C620](v126);
    }
    else
    {
LABEL_29:
      long long v50 = v129;
      MIL::Builder::FunctionBuilder::GetInputs((MIL::Builder::FunctionBuilder::FunctionBuilderImpl **)v129, (uint64_t)&__p);
      uint64_t v51 = v97;
      if (v97)
      {
        while (1)
        {
          long long v52 = (MIL::Builder::Variable::VariableImpl **)v51[2];
          uint64_t Name = MIL::Builder::Variable::GetName(v52);
          if (*((char *)Name + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v101, *(const std::string::value_type **)Name, *((void *)Name + 1));
          }
          else
          {
            long long v54 = *(_OWORD *)Name;
            v101.__r_.__value_.__r.__words[2] = *((void *)Name + 2);
            *(_OWORD *)&v101.__r_.__value_.__l.__data_ = v54;
          }
          if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v127, (unsigned __int8 *)&v101))break; {
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
          }
            operator delete(v101.__r_.__value_.__l.__data_);
          uint64_t v51 = (void *)*v51;
          if (!v51) {
            goto LABEL_39;
          }
        }
        uint64_t v55 = (MIL::IRTypedArgument *)MIL::Builder::Variable::TryGetType(v52);
        if (v55) {
          MIL::IRTypedArgument::Make(v55, v56);
        }
        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v122);
        float v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v122, (uint64_t)"PropagateInputTensorShapes cannot detect the type of ", 53);
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          float v76 = &v101;
        }
        else {
          float v76 = (std::string *)v101.__r_.__value_.__r.__words[0];
        }
        if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v101.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v101.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, size);
        unint64_t v78 = (void *)MIL::Builder::FunctionBuilder::GetLocationPtr(v50);
        uint64_t v79 = v78[1];
        *(void *)&long long v95 = *v78;
        *((void *)&v95 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v79;
        if (v79) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v79 + 8), 1uLL, memory_order_relaxed);
        }
        std::stringbuf::str();
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a5, &v95, 3, (uint64_t)&v93);
        if (v94 < 0) {
          operator delete(v93);
        }
        if (*((void *)&v95 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v95 + 1));
        }
        v122 = (MIL::IRStateValueType *)*MEMORY[0x263F8C2C8];
        *(MIL::IRStateValueType **)((char *)&v122 + *((void *)v122 - 3)) = *(MIL::IRStateValueType **)(MEMORY[0x263F8C2C8] + 24);
        uint64_t v123 = MEMORY[0x263F8C318] + 16;
        if (v125 < 0) {
          operator delete(v124);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x21056C620](v126);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v101.__r_.__value_.__l.__data_);
        }
        std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&__p);
      }
      else
      {
LABEL_39:
        std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&__p);
        if (*(_DWORD *)(a5 + 48) == 2)
        {
          MIL::MILResult::~MILResult((void **)a5);
        }
      }
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v127);
  }
}

void sub_20F423034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,std::__shared_weak_count *a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  std::ostringstream::~ostringstream((uint64_t)&a59);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v59 - 160);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::GetTensorBufferArgumentHelper(uint64_t a1, MIL::IRValueType *a2, uint64_t a3)
{
  uint64_t v7 = *(MIL::IRUnknownProperty **)a1;
  long long v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v24 = 0;
  float v25 = 0;
  uint64_t v26 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v24, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
  uint64_t v8 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
  long long v9 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v8);
  Datauint64_t Type = MIL::IRTensorBufferValueType::GetDataType(v9);
  uint64_t InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v9);
  char v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v31, *(const void **)InterleaveFactors, *(void *)(InterleaveFactors + 8), (uint64_t)(*(void *)(InterleaveFactors + 8) - *(void *)InterleaveFactors) >> 3);
  uint64_t Attributes = MIL::IRTensorBufferValueType::GetAttributes(v9);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v30, Attributes);
  long long __p = 0;
  float v28 = 0;
  uint64_t v29 = 0;
  if (MIL::IRTensorBufferValueType::TryGetStrides(v9))
  {
    uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)v9);
    if (&__p != (void **)Strides) {
      std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)&__p, *(char **)Strides, *(void *)(Strides + 8), (uint64_t)(*(void *)(Strides + 8) - *(void *)Strides) >> 3);
    }
    uint64_t updated = MIL::IRTensorBufferValueType::MakeWithShape(v7, DataType, (uint64_t)&v24, (uint64_t)&__p, (uint64_t)&v31, v30);
    if (__p)
    {
      float v28 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t RowAlignmentInBytes = MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(v9);
    uint64_t updated = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(v7, DataType, (uint64_t)&v24, RowAlignmentInBytes, (uint64_t)&v31, v30);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v30);
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  if (v24)
  {
    float v25 = v24;
    operator delete(v24);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 8);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (HasFullyUnknownStrideProperty)
  {
    std::string v18 = *(atomic_ullong **)(a1 + 8);
    v23[0] = *(MIL::IRUnknownProperty **)a1;
    v23[1] = (MIL::IRUnknownProperty *)v18;
    if (v18) {
      atomic_fetch_add_explicit(v18 + 1, 1uLL, memory_order_relaxed);
    }
    int v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v20, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 3);
    if (v20)
    {
      uint64_t v21 = v20;
      operator delete(v20);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18);
    }
  }
  return updated;
}

void sub_20F4235A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(unsigned __int8 **)(a2 + 16); i; uint64_t i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Builder::FunctionBuilder>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_20F42368C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::Builder::FunctionBuilder>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Builder::FunctionBuilder>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F423910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Builder::FunctionBuilder>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::Builder::FunctionBuilder>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F423988(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::InferValueTypesFromBlock@<X0>(MIL::Builder::BlockBuilder *this@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, void *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  memset(v375, 0, sizeof(v375));
  int v376 = 1065353216;
  memset(v373, 0, sizeof(v373));
  int v374 = 1065353216;
  MIL::Builder::BlockBuilder::GetOperations(this, &v371);
  uint64_t v8 = v371;
  uint64_t v331 = v372;
  if (v371 == v372)
  {
LABEL_610:
    v403.__begin_ = (std::vector<int>::pointer)&v371;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v403);
    LocationPtr = (void *)MIL::Builder::BlockBuilder::GetLocationPtr(this);
    uint64_t v323 = LocationPtr[1];
    *(void *)&long long v338 = *LocationPtr;
    *((void *)&v338 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v323;
    if (v323) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v323 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v336, "Success");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v338, 2, (uint64_t)v336);
    if (v337 < 0) {
      operator delete(v336[0]);
    }
    if (*((void *)&v338 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v338 + 1));
    }
    goto LABEL_616;
  }
  v330 = (int *)*MEMORY[0x263F8C2C8];
  v329 = *(int **)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v334 = a6;
  while (2)
  {
    uint64_t v332 = v8;
    unint64_t v9 = *(MIL::Builder::OperationBuilder **)v8;
    unint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
    v369 = v9;
    v370 = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v9);
    if ((*(uint64_t (**)(uint64_t))(*(void *)Operator + 104))(Operator))
    {
      int v12 = 3;
      goto LABEL_558;
    }
    uint64_t v13 = MIL::Builder::OperationBuilder::GetOperator(v369);
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13);
    if (*(char *)(v14 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v365, *(const std::string::value_type **)v14, *(void *)(v14 + 8));
    }
    else
    {
      long long v15 = *(_OWORD *)v14;
      v365.__r_.__value_.__r.__words[2] = *(void *)(v14 + 16);
      *(_OWORD *)&v365.__r_.__value_.__l.__data_ = v15;
    }
    if (SHIBYTE(v365.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v365.__r_.__value_.__l.__data_);
    }
    int v17 = v368;
    if ((char)v368 < 0)
    {
      if (v367 == 14)
      {
        BOOL v18 = (uint64_t *)v366;
        goto LABEL_17;
      }
    }
    else if (v368 == 14)
    {
      BOOL v18 = (uint64_t *)&v366;
LABEL_17:
      uint64_t v19 = *v18;
      uint64_t v20 = *(uint64_t *)((char *)v18 + 6);
      BOOL v21 = v19 == 0x6172745F766E6F63 && v20 == 0x65736F70736E6172;
      if (v21)
      {
        MIL::Builder::OperationBuilder::GetParameterNames((unsigned __int8 **)v369, (uint64_t)&v403);
        std::string::basic_string[abi:ne180100]<0>(&v387, "output_shape");
        long long v52 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(&v403, (unsigned __int8 *)&v387);
        if (SBYTE7(v388) < 0) {
          operator delete((void *)v387);
        }
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v403);
        if (v52)
        {
          uint64_t v53 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v369);
          uint64_t v54 = v53[1];
          *(void *)&long long v364 = *v53;
          *((void *)&v364 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v54;
          if (v54) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v54 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(v362, "Could not infer a new output shape for conv_transpose when \"output_shape\" is given as an input. If you would like the op output shape to change according to the new input, try removing \"output_shape\" with caution.");
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v364, 3, (uint64_t)v362);
          if (v363 < 0) {
            operator delete(v362[0]);
          }
          if (*((void *)&v364 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v364 + 1));
          }
          int v12 = 1;
          goto LABEL_556;
        }
      }
    }
    int v327 = v17;
    long long v359 = 0u;
    long long v360 = 0u;
    int v361 = 1065353216;
    uint64_t v22 = v369;
    uint64_t Parameters = (void *)MIL::BuilderPrivate::OperationBuilderPrivate::GetParameters(v369, v16);
    long long v24 = Parameters + 1;
    float v25 = (void *)*Parameters;
    if ((void *)*Parameters == Parameters + 1)
    {
LABEL_76:
      uint64_t v49 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v22);
      uint64_t v50 = v49[1];
      *(void *)&long long v387 = *v49;
      *((void *)&v387 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v50;
      if (v50) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v403, "Success");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v387, 2, (uint64_t)&v403);
      if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
        operator delete(v403.__begin_);
      }
      if (*((void *)&v387 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v387 + 1));
      }
    }
    else
    {
      while (1)
      {
        long long v387 = 0uLL;
        *(void *)&long long v388 = 0;
        if (*((char *)v25 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v386, (const std::string::value_type *)v25[4], v25[5]);
        }
        else {
          std::string v386 = *(std::string *)(v25 + 4);
        }
        uint64_t v27 = v25[7];
        uint64_t v26 = v25[8];
        while (v27 != v26)
        {
          float v28 = *(MIL::IRArgument **)v27;
          uint64_t v29 = *(std::__shared_weak_count **)(v27 + 8);
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(unsigned int (**)(MIL::IRArgument *))(*(void *)v28 + 24))(v28))
          {
            (*(void (**)(std::vector<int>::value_type *__return_ptr, MIL::IRArgument *))(*(void *)v28 + 48))(__x, v28);
            MIL::IRTypedArgument::Make();
          }
          uint64_t Name = MIL::IRArgument::GetName(v28);
          uint64_t Variable = MIL::Builder::BlockBuilder::TryGetVariable((uint64_t)this, Name);
          uint64_t v32 = (MIL::Builder::Variable::VariableImpl **)Variable;
          if (!Variable) {
            goto LABEL_627;
          }
          MIL::Builder::Variable::TryGetValueSharedPtr((MIL::Builder::Variable::VariableImpl **)Variable, &v403);
          std::vector<int>::pointer begin = v403.__begin_;
          if (v403.__end_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v403.__end_);
          }
          if (begin)
          {
            MIL::Builder::Variable::TryGetValueSharedPtr(v32, v378);
            MIL::IRTypedArgument::Make();
          }
          a6 = v334;
          uint64_t Type = (MIL::IRTypedArgument *)MIL::Builder::Variable::TryGetType(v32);
          if (!Type)
          {
LABEL_627:
            Input = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::FunctionBuilder::TryGetInput(a3, Name);
            if (!Input || (uint64_t Type = (MIL::IRTypedArgument *)MIL::Builder::Variable::TryGetType(Input)) == 0)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
              uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"Could not deduce type of arg: ", 30);
              int v43 = *(char *)(Name + 23);
              if (v43 >= 0) {
                uint64_t v44 = Name;
              }
              else {
                uint64_t v44 = *(void *)Name;
              }
              if (v43 >= 0) {
                uint64_t v45 = *(unsigned __int8 *)(Name + 23);
              }
              else {
                uint64_t v45 = *(void *)(Name + 8);
              }
              uint64_t v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v44, v45);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)".", 1);
              uint64_t v47 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v22);
              uint64_t v48 = v47[1];
              *(void *)&long long v357 = *v47;
              *((void *)&v357 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v48;
              if (v48) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v48 + 8), 1uLL, memory_order_relaxed);
              }
              std::stringbuf::str();
              MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v357, 3, (uint64_t)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (*((void *)&v357 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v357 + 1));
              }
              v403.__begin_ = v330;
              *(std::vector<int>::pointer *)((char *)&v403.__begin_ + *((void *)v330 - 3)) = v329;
              v403.__end_ = (std::vector<int>::pointer)(MEMORY[0x263F8C318] + 16);
              if (v407 < 0) {
                operator delete(v406);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x21056C620](v408);
              if (v29) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v29);
              }
              int v39 = 0;
              goto LABEL_49;
            }
          }
          if (!std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, (unsigned __int8 *)Name))MIL::IRTypedArgument::Make(Type, v36); {
          uint64_t v37 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a4, (unsigned __int8 *)Name);
          }
          if (!v37) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          std::vector<std::shared_ptr<MIL::IRTypedArgument>>::emplace_back<std::shared_ptr<MIL::IRTypedArgument> const&>((uint64_t *)&v387, (long long *)(v37 + 40));
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          v27 += 16;
        }
        v403.__begin_ = (std::vector<int>::pointer)&v386;
        float v38 = (long long *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v359, (unsigned __int8 *)&v386, (uint64_t)&std::piecewise_construct, (long long **)&v403)+ 40);
        if (v38 != &v387) {
          std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((uint64_t)v38, (uint64_t *)v387, *((uint64_t **)&v387 + 1), (uint64_t)(*((void *)&v387 + 1) - v387) >> 4);
        }
        int v39 = 1;
LABEL_49:
        if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v386.__r_.__value_.__l.__data_);
        }
        v403.__begin_ = (std::vector<int>::pointer)&v387;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v403);
        if (!v39) {
          break;
        }
        uint64_t v40 = (void *)v25[1];
        if (v40)
        {
          do
          {
            uint64_t v41 = v40;
            uint64_t v40 = (void *)*v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            uint64_t v41 = (void *)v25[2];
            BOOL v21 = *v41 == (void)v25;
            float v25 = v41;
          }
          while (!v21);
        }
        float v25 = v41;
        if (v41 == v24) {
          goto LABEL_76;
        }
      }
    }
    if (*(_DWORD *)(a6 + 48) != 2)
    {
      int v12 = 1;
      goto LABEL_555;
    }
    MIL::MILResult::~MILResult((void **)a6);
    long long v357 = 0uLL;
    uint64_t v358 = 0;
    if ((v327 & 0x80) != 0)
    {
      if (v367 != 10) {
        goto LABEL_103;
      }
      uint64_t v51 = (unsigned __int16 *)v366;
    }
    else
    {
      if (v327 != 10) {
        goto LABEL_103;
      }
      uint64_t v51 = (unsigned __int16 *)&v366;
    }
    uint64_t v55 = *(void *)v51;
    int v56 = v51[4];
    if (v55 != 0x6F6C5F656C696877 || v56 != 28783)
    {
LABEL_103:
      goto LABEL_104;
    }
    uint64_t v65 = v369;
    long long v387 = 0uLL;
    *(void *)&long long v388 = 0;
    memset(&v386, 0, sizeof(v386));
    std::string::basic_string[abi:ne180100]<0>(&v403, "loop_vars");
    uint64_t NumArguments = MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v65, (const void **)&v403.__begin_);
    uint64_t v67 = NumArguments;
    if (SHIBYTE(v403.__end_cap_.__value_) < 0)
    {
      operator delete(v403.__begin_);
      if (!v67)
      {
LABEL_180:
        v96 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v65);
        std::string::size_type v97 = v96[1];
        __p.__r_.__value_.__r.__words[0] = *v96;
        __p.__r_.__value_.__l.__size_ = v97;
        if (v97) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v97 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v403, "Success");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)&__p, 2, (uint64_t)&v403);
        goto LABEL_204;
      }
    }
    else if (!NumArguments)
    {
      goto LABEL_180;
    }
    uint64_t v73 = 0;
    while (1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v403, "loop_vars");
      uint64_t ArgumentForParameter = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v65, (uint64_t)&v403, v73);
      if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
        operator delete(v403.__begin_);
      }
      float v75 = (unsigned __int8 *)MIL::Builder::Variable::TryGetName(ArgumentForParameter);
      if (v75
        && std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, v75))
      {
        float v76 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, v75);
        if (!v76) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        Valueuint64_t Type = MIL::IRTypedArgument::TryGetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v76 + 5));
        uint64_t v78 = ValueType;
        if (ValueType)
        {
          uint64_t v79 = *((void *)&v387 + 1);
          if (*((void *)&v387 + 1) >= (unint64_t)v388)
          {
            uint64_t v92 = (uint64_t)(*((void *)&v387 + 1) - v387) >> 3;
            if ((unint64_t)(v92 + 1) >> 61) {
LABEL_619:
            }
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            unint64_t v93 = (uint64_t)(v388 - v387) >> 2;
            if (v93 <= v92 + 1) {
              unint64_t v93 = v92 + 1;
            }
            if ((void)v388 - (void)v387 >= 0x7FFFFFFFFFFFFFF8uLL) {
              unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v86 = v93;
            }
            if (v86) {
              char v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v388, v86);
            }
            else {
              char v87 = 0;
            }
            int v88 = &v87[8 * v92];
            *(void *)int v88 = v78;
            uint64_t v80 = v88 + 8;
            uint64_t v89 = (char *)*((void *)&v387 + 1);
            char v94 = (char *)v387;
            if (*((void *)&v387 + 1) != (void)v387)
            {
              do
              {
                uint64_t v95 = *((void *)v89 - 1);
                v89 -= 8;
                *((void *)v88 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v95;
                v88 -= 8;
              }
              while (v89 != v94);
              goto LABEL_176;
            }
            goto LABEL_177;
          }
          **((void **)&v387 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = ValueType;
          uint64_t v80 = (void *)(v79 + 8);
          goto LABEL_179;
        }
      }
      uint64_t v81 = MIL::Builder::Variable::TryGetType(ArgumentForParameter);
      uint64_t v82 = v81;
      if (!v81) {
        break;
      }
      uint64_t v83 = *((void *)&v387 + 1);
      if (*((void *)&v387 + 1) >= (unint64_t)v388)
      {
        uint64_t v84 = (uint64_t)(*((void *)&v387 + 1) - v387) >> 3;
        if ((unint64_t)(v84 + 1) >> 61) {
          goto LABEL_619;
        }
        unint64_t v85 = (uint64_t)(v388 - v387) >> 2;
        if (v85 <= v84 + 1) {
          unint64_t v85 = v84 + 1;
        }
        if ((void)v388 - (void)v387 >= 0x7FFFFFFFFFFFFFF8uLL) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86) {
          char v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v388, v86);
        }
        else {
          char v87 = 0;
        }
        int v88 = &v87[8 * v84];
        *(void *)int v88 = v82;
        uint64_t v80 = v88 + 8;
        uint64_t v89 = (char *)*((void *)&v387 + 1);
        uint64_t v90 = (char *)v387;
        if (*((void *)&v387 + 1) != (void)v387)
        {
          do
          {
            uint64_t v91 = *((void *)v89 - 1);
            v89 -= 8;
            *((void *)v88 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v91;
            v88 -= 8;
          }
          while (v89 != v90);
LABEL_176:
          uint64_t v89 = (char *)v387;
        }
LABEL_177:
        *(void *)&long long v387 = v88;
        *((void *)&v387 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v80;
        *(void *)&long long v388 = &v87[8 * v86];
        if (v89) {
          operator delete(v89);
        }
        goto LABEL_179;
      }
      **((void **)&v387 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v81;
      uint64_t v80 = (void *)(v83 + 8);
LABEL_179:
      *((void *)&v387 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v80;
      if (++v73 == v67) {
        goto LABEL_180;
      }
    }
    v103 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v65);
    std::string::size_type v104 = v103[1];
    __p.__r_.__value_.__r.__words[0] = *v103;
    __p.__r_.__value_.__l.__size_ = v104;
    if (v104) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v104 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(&v403, "Could not get the type for a while_loop var");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)&__p, 5, (uint64_t)&v403);
LABEL_204:
    if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
      operator delete(v403.__begin_);
    }
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (*(_DWORD *)(a6 + 48) == 2)
    {
      MIL::MILResult::~MILResult((void **)a6);
      if (*(_DWORD *)(a6 + 48) == 2)
      {
        MIL::MILResult::~MILResult((void **)a6);
        uint64_t v105 = *((void *)&v387 + 1);
        uint64_t v106 = v387;
        unint64_t v107 = (uint64_t)(*((void *)&v387 + 1) - v387) >> 3;
        std::string::size_type v108 = v386.__r_.__value_.__r.__words[0];
        memset(&v403, 0, sizeof(v403));
        std::vector<std::string const*>::reserve((void **)&v403.__begin_, v107);
        if (v105 == v106)
        {
LABEL_455:
          std::vector<std::vector<MIL::IRValueType const*>>::__assign_with_size[abi:ne180100]<std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>((uint64_t)&v357, (uint64_t)v386.__r_.__value_.__l.__data_, v386.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v386.__r_.__value_.__l.__size_ - v386.__r_.__value_.__r.__words[0]) >> 3));
LABEL_456:
          v264 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v65);
          uint64_t v265 = v264[1];
          *(void *)__x = *v264;
          *(void *)&__x[2] = v265;
          if (v265) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v265 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "Success");
          a6 = v334;
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(v334, (long long *)__x, 2, (uint64_t)&__p);
LABEL_474:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (*(void *)&__x[2]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[2]);
          }
        }
        else
        {
          unint64_t v109 = 0;
          char v110 = 0;
          if (v107 <= 1) {
            uint64_t v111 = 1;
          }
          else {
            uint64_t v111 = v107;
          }
          do
          {
            uint64_t v112 = *(MIL::MILContext **)(v387 + 8 * v109);
            MIL::Builder::FunctionBuilder::GetContext(a3, &__p);
            uint64_t v114 = *(void *)(v108 + 24);
            if (v109 >= (*(void *)(v108 + 32) - v114) >> 3) {
              std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
            }
            a6 = v334;
            StrongestCompatibleuint64_t Type = MIL::GetStrongestCompatibleType((MIL *)__p.__r_.__value_.__l.__data_, v112, *(const MIL::IRValueType **)(v114 + 8 * v109), v113);
            if (__p.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
            }
            if (!StrongestCompatibleType)
            {
              v269 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v65);
              uint64_t v270 = v269[1];
              *(void *)__x = *v269;
              *(void *)&__x[2] = v270;
              if (v270) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v270 + 8), 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(&__p, "Could not reconcile loop_var types & body block output types");
              MIL::Passes::TypeInferenceResult::TypeInferenceResult(v334, (long long *)__x, 5, (uint64_t)&__p);
              goto LABEL_474;
            }
            BOOL v116 = StrongestCompatibleType != v112;
            std::vector<int>::pointer end = v403.__end_;
            if (v403.__end_ >= v403.__end_cap_.__value_)
            {
              int64_t v119 = ((char *)v403.__end_ - (char *)v403.__begin_) >> 3;
              if ((unint64_t)(v119 + 1) >> 61) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v120 = v403.__end_cap_.__value_ - v403.__begin_;
              if (v120 <= v119 + 1) {
                unint64_t v120 = v119 + 1;
              }
              if ((int *)((char *)v403.__end_cap_.__value_ - (char *)v403.__begin_) >= (int *)0x7FFFFFFFFFFFFFF8) {
                unint64_t v121 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v121 = v120;
              }
              if (v121) {
                v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v403.__end_cap_, v121);
              }
              else {
                v122 = 0;
              }
              uint64_t v123 = (int *)&v122[8 * v119];
              *(void *)uint64_t v123 = StrongestCompatibleType;
              long long v118 = v123 + 2;
              std::vector<int>::pointer v124 = v403.__end_;
              std::vector<int>::pointer v125 = v403.__begin_;
              if (v403.__end_ != v403.__begin_)
              {
                do
                {
                  uint64_t v126 = *((void *)v124 - 1);
                  v124 -= 2;
                  *((void *)v123 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v126;
                  v123 -= 2;
                }
                while (v124 != v125);
                std::vector<int>::pointer v124 = v403.__begin_;
              }
              v403.__begin_ = v123;
              v403.__end_ = v118;
              v403.__end_cap_.__value_ = (int *)&v122[8 * v121];
              if (v124) {
                operator delete(v124);
              }
            }
            else
            {
              *(void *)v403.__end_ = StrongestCompatibleType;
              long long v118 = end + 2;
            }
            v110 |= v116;
            v403.__end_ = v118;
            ++v109;
          }
          while (v109 != v111);
          if ((v110 & 1) == 0) {
            goto LABEL_455;
          }
          memset(&__p, 0, sizeof(__p));
          a6 = v334;
          if (*(_DWORD *)(v334 + 48) == 2)
          {
            MIL::MILResult::~MILResult((void **)v334);
            if (v108 != __p.__r_.__value_.__r.__words[0]) {
              std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>((char *)(v108 + 24), *(char **)(__p.__r_.__value_.__r.__words[0] + 24), *(void *)(__p.__r_.__value_.__r.__words[0] + 32), (uint64_t)(*(void *)(__p.__r_.__value_.__r.__words[0] + 32)- *(void *)(__p.__r_.__value_.__r.__words[0] + 24)) >> 3);
            }
            unint64_t v128 = 0;
            while (1)
            {
              if (v128 >= ((char *)v403.__end_ - (char *)v403.__begin_) >> 3
                || (uint64_t v129 = *(void *)(v108 + 24), v128 >= (*(void *)(v108 + 32) - v129) >> 3))
              {
                std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
              }
              if ((MIL::IsEqualOrStrongerType(*(MIL **)&v403.__begin_[2 * v128], *(const MIL::IRValueType **)(v129 + 8 * v128), v127) & 1) == 0)break; {
              if (v111 == ++v128)
              }
              {
                std::vector<std::vector<MIL::IRValueType const*>>::__assign_with_size[abi:ne180100]<std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>((uint64_t)&v357, (uint64_t)__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3));
                *(void *)__x = &__p;
                std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
                goto LABEL_456;
              }
            }
            uint64_t v305 = MIL::Builder::OperationBuilder::GetLocationPtr(v65);
            v306 = *(atomic_ullong **)(v305 + 8);
            v378[0] = *(void **)v305;
            v378[1] = v306;
            if (v306) {
              atomic_fetch_add_explicit(v306 + 1, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(__x, "Unable to find compatible nested block input types for while_loop");
            MIL::Passes::TypeInferenceResult::TypeInferenceResult(v334, (long long *)v378, 5, (uint64_t)__x);
            if (v384 < 0) {
              operator delete(*(void **)__x);
            }
            if (v378[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v378[1]);
            }
          }
          p_p = &__p;
          std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
        }
        if (v403.__begin_)
        {
          v403.__end_ = v403.__begin_;
          operator delete(v403.__begin_);
        }
      }
    }
    v403.__begin_ = (std::vector<int>::pointer)&v386;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v403);
    if ((void)v387)
    {
      *((void *)&v387 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v387;
      operator delete((void *)v387);
    }
LABEL_104:
    if (*(_DWORD *)(a6 + 48) != 2)
    {
      int v12 = 1;
      goto LABEL_554;
    }
    MIL::MILResult::~MILResult((void **)a6);
    *(void *)v328 = MIL::Builder::OperationBuilder::GetOperator(v369);
    MIL::Builder::OperationBuilder::GetOutputs((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v369, &p_p);
    if (!(*(unsigned int (**)(int *))(**(void **)v328 + 128))(*(int **)v328))
    {
      long long v387 = 0u;
      long long v388 = 0u;
      int v389 = 1065353216;
      uint64_t v62 = v369;
      uint64_t v63 = (*(uint64_t (**)(int *))(**(void **)v328 + 16))(*(int **)v328);
      if (*(char *)(v63 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v386, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
      }
      else
      {
        long long v64 = *(_OWORD *)v63;
        v386.__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
        *(_OWORD *)&v386.__r_.__value_.__l.__data_ = v64;
      }
      if (SHIBYTE(v403.__end_cap_.__value_) < 0)
      {
        BOOL v69 = v403.__end_ != (std::vector<int>::pointer)5
           || *v403.__begin_ != 1885431923
           || *((unsigned char *)v403.__begin_ + 4) != 101;
        operator delete(v403.__begin_);
      }
      else
      {
        BOOL v69 = SHIBYTE(v403.__end_cap_.__value_) != 5
           || LODWORD(v403.__begin_) != 1885431923
           || BYTE4(v403.__begin_) != 101;
      }
      if (SHIBYTE(v386.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v386.__r_.__value_.__l.__data_);
        if (v69)
        {
LABEL_249:
          v130 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v62);
          std::string::size_type v131 = v130[1];
          __p.__r_.__value_.__r.__words[0] = *v130;
          __p.__r_.__value_.__l.__size_ = v131;
          if (v131) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v131 + 8), 1uLL, memory_order_relaxed);
          }
          std::string::basic_string[abi:ne180100]<0>(&v403, "Success");
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)&__p, 2, (uint64_t)&v403);
          if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
            operator delete(v403.__begin_);
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
LABEL_300:
          char v155 = 1;
          goto LABEL_301;
        }
      }
      else if (v69)
      {
        goto LABEL_249;
      }
      v132 = (uint64_t *)v360;
      if ((void)v360)
      {
        while (2)
        {
          memset(&__p, 0, sizeof(__p));
          v133 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)v132[5];
          v134 = (MIL::IRTypedArgument::IRTypedArgumentImpl ***)v132[6];
          while (v133 != v134)
          {
            if (!MIL::IRTypedArgument::IsValue((MIL::IRTypedArgument *)*v133))
            {
              uint64_t v136 = MIL::IRTypedArgument::GetValueType(*v133);
              uint64_t v137 = (*(uint64_t (**)(uint64_t))(*(void *)v136 + 24))(v136);
              uint64_t v138 = v137;
              if (v137 && ((*(uint64_t (**)(uint64_t))(*(void *)v137 + 104))(v137) & 1) != 0)
              {
                v139 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v138 + 96))(v138);
                uint64_t v140 = *v139;
                uint64_t v141 = v139[1];
                while (v140 != v141)
                {
                  if ((*(uint64_t (**)(void))(**(void **)v140 + 24))())
                  {
                    v156 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v62);
                    uint64_t v157 = v156[1];
                    *(void *)__x = *v156;
                    *(void *)&__x[2] = v157;
                    if (v157) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v157 + 8), 1uLL, memory_order_relaxed);
                    }
                    goto LABEL_294;
                  }
                  v140 += 8;
                }
                uint64_t v142 = (*(uint64_t (**)(uint64_t))(*(void *)v138 + 16))(v138);
                v143 = (MIL::Fp16 *)(*(uint64_t (**)(uint64_t))(*(void *)v138 + 88))(v138);
                switch((int)v143)
                {
                  case 2:
                    LOBYTE(__x[0]) = 0;
                    std::vector<BOOL>::vector(&v403, v142, (unsigned __int8 *)__x);
                    MIL::IRTensorValueType::MakeBoolValue(v138, (uint64_t)&v403);
                  case 4:
                    LOWORD(__x[0]) = MIL::Fp16::FromFloat(v143, 0.0);
                    std::vector<MIL::Fp16>::vector(&v403, v142, __x);
                    MIL::IRTensorValueType::MakeFloat16Value();
                  case 5:
                    __x[0] = 0;
                    std::vector<float>::vector(&v403, v142, __x);
                    MIL::IRTensorValueType::MakeFloat32Value();
                  case 11:
                    __x[0] = 0;
                    std::vector<int>::vector(&v403, v142, __x);
                    MIL::IRTensorValueType::MakeInt32Value();
                  default:
                    v307 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v62);
                    uint64_t v308 = v307[1];
                    *(void *)__x = *v307;
                    *(void *)&__x[2] = v308;
                    if (v308) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v308 + 8), 1uLL, memory_order_relaxed);
                    }
                    std::string::basic_string[abi:ne180100]<0>(&v403, "Unhandled data type for shape");
                    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)__x, 4, (uint64_t)&v403);
                    break;
                }
              }
              else
              {
                v271 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v62);
                uint64_t v272 = v271[1];
                *(void *)__x = *v271;
                *(void *)&__x[2] = v272;
                if (v272) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v272 + 8), 1uLL, memory_order_relaxed);
                }
LABEL_294:
                std::string::basic_string[abi:ne180100]<0>(&v403, "Success");
                MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)__x, 2, (uint64_t)&v403);
              }
              if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
                operator delete(v403.__begin_);
              }
              if (*(void *)&__x[2]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[2]);
              }
              v378[0] = &__p;
              std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v378);
              goto LABEL_300;
            }
            MIL::IRTypedArgument::TryGetValueSharedPtr((uint64_t)*v133, __x);
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              uint64_t v144 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
              unint64_t v145 = v144 + 1;
              if ((unint64_t)(v144 + 1) >> 60) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              int64_t v146 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
              if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3 > v145) {
                unint64_t v145 = v146 >> 3;
              }
              if ((unint64_t)v146 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v147 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v147 = v145;
              }
              v405 = &__p.__r_.__value_.__s.__data_[16];
              v148 = (int *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v147);
              v149 = &v148[4 * v144];
              v403.__begin_ = v148;
              v403.__end_ = v149;
              v404 = &v148[4 * v150];
              *(_OWORD *)v149 = *(_OWORD *)__x;
              *(void *)&__x[2] = 0;
              *(void *)__x = 0;
              v403.__end_cap_.__value_ = v149 + 4;
              std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer((uint64_t *)&__p, &v403);
              std::string::size_type v151 = __p.__r_.__value_.__l.__size_;
              std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&v403.__begin_);
              __p.__r_.__value_.__l.__size_ = v151;
              if (*(void *)&__x[2]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[2]);
              }
            }
            else
            {
              *(_OWORD *)__p.__r_.__value_.__l.__size_ = *(_OWORD *)__x;
              __p.__r_.__value_.__l.__size_ = size + 16;
            }
            v133 += 2;
          }
          v403.__begin_ = (std::vector<int>::pointer)(v132 + 2);
          v152 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v387, (unsigned __int8 *)v132 + 16, (uint64_t)&std::piecewise_construct, (long long **)&v403)+ 40);
          if (v152 != &__p) {
            std::vector<std::shared_ptr<MIL::IRValue const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRValue const>*,std::shared_ptr<MIL::IRValue const>*>((uint64_t)v152, (uint64_t *)__p.__r_.__value_.__l.__data_, (uint64_t *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4);
          }
          v378[0] = &__p;
          std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v378);
          v132 = (uint64_t *)*v132;
          if (v132) {
            continue;
          }
          break;
        }
      }
      v153 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v62);
      std::string::size_type v154 = v153[1];
      __p.__r_.__value_.__r.__words[0] = *v153;
      __p.__r_.__value_.__l.__size_ = v154;
      if (v154) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v154 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v403, "Success");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)&__p, 2, (uint64_t)&v403);
      if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
        operator delete(v403.__begin_);
      }
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      char v155 = 0;
LABEL_301:
      if (*(_DWORD *)(a6 + 48) == 2)
      {
        MIL::MILResult::~MILResult((void **)a6);
        if (v155)
        {
          MIL::Builder::FunctionBuilder::GetContext(a3, &v403);
          v158 = (uint64_t *)MIL::Builder::OperationBuilder::GetLocationPtr(v369);
          v159 = (std::__shared_weak_count *)v158[1];
          uint64_t v344 = *v158;
          v345 = v159;
          if (v159) {
            atomic_fetch_add_explicit(&v159->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::OperationBuilder::GetAttributes(v369);
          (*(void (**)(std::vector<int>::value_type *__return_ptr))(**(void **)v328 + 192))(__x);
          if (v345) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v345);
          }
          if (v403.__end_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v403.__end_);
          }
          v160 = (MIL::Builder::OperationBuilder::OperationBuilderImpl **)v369;
          v161 = v370;
          if (v370) {
            atomic_fetch_add_explicit(&v370->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::OperationBuilder::GetOutputs(v160, (void **)&v409);
          v162 = v409;
          v163 = v410;
          if ((char *)v410 - (char *)v409 == *(void *)&__x[2] - *(void *)__x)
          {
            v164 = (void *)v360;
            if (!(void)v360)
            {
LABEL_333:
              if (v163 != v162)
              {
                for (unint64_t i = 0; i < v410 - v409; ++i)
                {
                  uint64_t v181 = MIL::Builder::Variable::TryGetType(v162[i]);
                  if ((*(uint64_t (**)(uint64_t))(*(void *)v181 + 24))(v181)
                    && (*(uint64_t (**)(void))(**(void **)(*(void *)__x + 8 * i) + 24))(*(void *)(*(void *)__x + 8 * i)))
                  {
                    uint64_t v182 = MIL::Builder::Variable::TryGetType(v409[i]);
                    uint64_t v183 = (*(uint64_t (**)(uint64_t))(*(void *)v182 + 24))(v182);
                    uint64_t v184 = (*(uint64_t (**)(uint64_t))(*(void *)v183 + 96))(v183);
                    memset(&v386, 0, sizeof(v386));
                    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v386, *(const void **)v184, *(void *)(v184 + 8), (uint64_t)(*(void *)(v184 + 8) - *(void *)v184) >> 3);
                    uint64_t v185 = (*(uint64_t (**)(void))(**(void **)(*(void *)__x + 8 * i) + 24))(*(void *)(*(void *)__x + 8 * i));
                    uint64_t v186 = (*(uint64_t (**)(uint64_t))(*(void *)v185 + 96))(v185);
                    memset(&__p, 0, sizeof(__p));
                    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v186, *(void *)(v186 + 8), (uint64_t)(*(void *)(v186 + 8) - *(void *)v186) >> 3);
                    if (MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)&v386))
                    {
                      v187 = (void *)__p.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      BOOL HasVariadicUnknownDims = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)&__p);
                      v187 = (void *)__p.__r_.__value_.__r.__words[0];
                      if (!HasVariadicUnknownDims
                        && v386.__r_.__value_.__l.__size_ - v386.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_
                                                                                               - __p.__r_.__value_.__r.__words[0])
                      {
                        std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"Invalid tensor rank ", 20);
                        v309 = (void *)std::ostream::operator<<();
                        v310 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v309, (uint64_t)" inferred from: ", 16);
                        uint64_t v311 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v160);
                        uint64_t v312 = (*(uint64_t (**)(uint64_t))(*(void *)v311 + 16))(v311);
                        int v313 = *(char *)(v312 + 23);
                        if (v313 >= 0) {
                          uint64_t v314 = v312;
                        }
                        else {
                          uint64_t v314 = *(void *)v312;
                        }
                        if (v313 >= 0) {
                          uint64_t v315 = *(unsigned __int8 *)(v312 + 23);
                        }
                        else {
                          uint64_t v315 = *(void *)(v312 + 8);
                        }
                        v316 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v310, v314, v315);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v316, (uint64_t)", expecting ", 12);
                        v317 = (void *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v317, (uint64_t)".", 1);
                        v318 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr((MIL::Builder::OperationBuilder *)v160);
                        uint64_t v319 = v318[1];
                        *(void *)&long long v398 = *v318;
                        *((void *)&v398 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v319;
                        if (v319) {
                          atomic_fetch_add_explicit((atomic_ullong *volatile)(v319 + 8), 1uLL, memory_order_relaxed);
                        }
                        std::stringbuf::str();
                        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v398, 3, (uint64_t)&v396);
                        if (v397 < 0) {
                          operator delete(v396);
                        }
                        if (*((void *)&v398 + 1)) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v398
                        }
                                                                                   + 1));
                        v403.__begin_ = v330;
                        *(std::vector<int>::pointer *)((char *)&v403.__begin_ + *((void *)v330 - 3)) = v329;
                        v403.__end_ = (std::vector<int>::pointer)(MEMORY[0x263F8C318] + 16);
                        if (v407 < 0) {
                          operator delete(v406);
                        }
                        std::streambuf::~streambuf();
                        std::ostream::~ostream();
                        MEMORY[0x21056C620](v408);
                        if (__p.__r_.__value_.__r.__words[0])
                        {
                          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                        if (v386.__r_.__value_.__r.__words[0])
                        {
                          v386.__r_.__value_.__l.__size_ = v386.__r_.__value_.__r.__words[0];
                          operator delete(v386.__r_.__value_.__l.__data_);
                        }
                        goto LABEL_376;
                      }
                    }
                    if (v187)
                    {
                      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v187;
                      operator delete(v187);
                    }
                    if (v386.__r_.__value_.__r.__words[0])
                    {
                      v386.__r_.__value_.__l.__size_ = v386.__r_.__value_.__r.__words[0];
                      operator delete(v386.__r_.__value_.__l.__data_);
                    }
                  }
                  v162 = v409;
                }
              }
LABEL_346:
              v189 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr((MIL::Builder::OperationBuilder *)v160);
              uint64_t v190 = v189[1];
              *(void *)&long long v395 = *v189;
              *((void *)&v395 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v190;
              if (v190) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v190 + 8), 1uLL, memory_order_relaxed);
              }
              std::string::basic_string[abi:ne180100]<0>(v393, "Success");
              MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v395, 2, (uint64_t)v393);
              if (v394 < 0) {
                operator delete(v393[0]);
              }
              if (*((void *)&v395 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v395 + 1));
              }
              goto LABEL_376;
            }
LABEL_313:
            if (v164[6] == v164[5]) {
              goto LABEL_331;
            }
            uint64_t v165 = 0;
            unint64_t v166 = 0;
            LOBYTE(v167) = 1;
            while (1)
            {
              v168 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v160, (uint64_t)(v164 + 2), v166);
              uint64_t v169 = MIL::Builder::Variable::TryGetType(v168);
              if (!(*(uint64_t (**)(uint64_t))(*(void *)v169 + 24))(v169)) {
                goto LABEL_346;
              }
              uint64_t v170 = MIL::IRTypedArgument::TryGetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v164[5] + v165));
              if (!(*(uint64_t (**)(uint64_t))(*(void *)v170 + 24))(v170)) {
                goto LABEL_346;
              }
              uint64_t v171 = MIL::Builder::Variable::TryGetType(v168);
              uint64_t v172 = (*(uint64_t (**)(uint64_t))(*(void *)v171 + 24))(v171);
              uint64_t v173 = (*(uint64_t (**)(uint64_t))(*(void *)v172 + 96))(v172);
              memset(&v403, 0, sizeof(v403));
              std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v403, *(const void **)v173, *(void *)(v173 + 8), (uint64_t)(*(void *)(v173 + 8) - *(void *)v173) >> 3);
              uint64_t v174 = MIL::IRTypedArgument::TryGetValueType(*(MIL::IRTypedArgument::IRTypedArgumentImpl ***)(v164[5] + v165));
              uint64_t v175 = (*(uint64_t (**)(uint64_t))(*(void *)v174 + 24))(v174);
              uint64_t v176 = (*(uint64_t (**)(uint64_t))(*(void *)v175 + 96))(v175);
              memset(&v386, 0, sizeof(v386));
              std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v386, *(const void **)v176, *(void *)(v176 + 8), (uint64_t)(*(void *)(v176 + 8) - *(void *)v176) >> 3);
              if (!MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)&v403)) {
                break;
              }
              int v167 = 0;
              int v177 = 4;
              v178 = (void *)v386.__r_.__value_.__r.__words[0];
              if (v386.__r_.__value_.__r.__words[0]) {
                goto LABEL_319;
              }
LABEL_320:
              if (v403.__begin_)
              {
                v403.__end_ = v403.__begin_;
                operator delete(v403.__begin_);
              }
              if (!v177)
              {
                ++v166;
                v165 += 16;
                if (v166 < (uint64_t)(v164[6] - v164[5]) >> 4) {
                  continue;
                }
              }
              if (!v167) {
                goto LABEL_346;
              }
LABEL_331:
              v164 = (void *)*v164;
              if (!v164)
              {
                v162 = v409;
                v163 = v410;
                goto LABEL_333;
              }
              goto LABEL_313;
            }
            BOOL v179 = MIL::ValueTypeInferenceUtils::ShapeHasVariadicUnknownDims((uint64_t *)&v386);
            v178 = (void *)v386.__r_.__value_.__r.__words[0];
            if (v179)
            {
              int v167 = 0;
              int v177 = 4;
              if (!v386.__r_.__value_.__r.__words[0]) {
                goto LABEL_320;
              }
            }
            else
            {
              int v167 = ((char *)v403.__end_ - (char *)v403.__begin_ == v386.__r_.__value_.__l.__size_
                                                                   - v386.__r_.__value_.__r.__words[0]) & v167;
              int v177 = 4
                   * ((char *)v403.__end_ - (char *)v403.__begin_ != v386.__r_.__value_.__l.__size_
                                                                   - v386.__r_.__value_.__r.__words[0]);
              if (!v386.__r_.__value_.__r.__words[0]) {
                goto LABEL_320;
              }
            }
LABEL_319:
            v386.__r_.__value_.__l.__size_ = (std::string::size_type)v178;
            operator delete(v178);
            goto LABEL_320;
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
          v193 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"Invalid number of outputs types inferred from: ", 47);
          uint64_t v194 = MIL::Builder::OperationBuilder::GetOperator((MIL::Builder::OperationBuilder *)v160);
          uint64_t v195 = (*(uint64_t (**)(uint64_t))(*(void *)v194 + 16))(v194);
          int v196 = *(char *)(v195 + 23);
          if (v196 >= 0) {
            uint64_t v197 = v195;
          }
          else {
            uint64_t v197 = *(void *)v195;
          }
          if (v196 >= 0) {
            uint64_t v198 = *(unsigned __int8 *)(v195 + 23);
          }
          else {
            uint64_t v198 = *(void *)(v195 + 8);
          }
          v199 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, v197, v198);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v199, (uint64_t)".", 1);
          v200 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr((MIL::Builder::OperationBuilder *)v160);
          uint64_t v201 = v200[1];
          *(void *)&long long v402 = *v200;
          *((void *)&v402 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v201;
          if (v201) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v201 + 8), 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v402, 3, (uint64_t)&v400);
          if (v401 < 0) {
            operator delete(v400);
          }
          if (*((void *)&v402 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v402 + 1));
          }
          v403.__begin_ = v330;
          *(std::vector<int>::pointer *)((char *)&v403.__begin_ + *((void *)v330 - 3)) = v329;
          v403.__end_ = (std::vector<int>::pointer)(MEMORY[0x263F8C318] + 16);
          if (v407 < 0) {
            operator delete(v406);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x21056C620](v408);
LABEL_376:
          if (v409)
          {
            v410 = v409;
            operator delete(v409);
          }
          if (v161) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v161);
          }
          if (*(_DWORD *)(a6 + 48) == 2)
          {
            MIL::MILResult::~MILResult((void **)a6);
            if (v356 != p_p)
            {
              Outputuint64_t Type = (MIL::IRValueType *)MIL::Builder::OperationBuilder::GetOutputType((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v369, 0);
              v203 = **(MIL::IRValueType ***)__x;
              MIL::Builder::Variable::GetName(*(MIL::Builder::Variable::VariableImpl ***)p_p);
              if (MIL::IsTensor(OutputType, v204) && MIL::IsTensor(v203, v205))
              {
                uint64_t v206 = MIL::IRValueType::AsTensorType(OutputType);
                uint64_t v207 = MIL::IRValueType::AsTensorType(v203);
                (*(void (**)(uint64_t))(*(void *)v207 + 88))(v207);
                uint64_t v208 = (*(uint64_t (**)(uint64_t))(*(void *)v207 + 96))(v207);
                memset(&v386, 0, sizeof(v386));
                std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v386, *(const void **)v208, *(void *)(v208 + 8), (uint64_t)(*(void *)(v208 + 8) - *(void *)v208) >> 3);
                uint64_t v209 = (*(uint64_t (**)(uint64_t))(*(void *)v206 + 80))(v206);
                std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v403, v209);
                MIL::Builder::FunctionBuilder::GetContext(a3, &v409);
                MIL::IRTensorValueType::MakeWithShape();
              }
              if (MIL::IsTensorBuffer(OutputType, v205) && MIL::IsTensorBuffer(v203, v210))
              {
                v211 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v203);
                v212 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v211);
                uint64_t Shape = MIL::IRTensorBufferValueType::GetShape(v212);
                memset(&v403, 0, sizeof(v403));
                std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v403, *(const void **)Shape, *(void *)(Shape + 8), (uint64_t)(*(void *)(Shape + 8) - *(void *)Shape) >> 3);
                MIL::Builder::FunctionBuilder::GetContext(a3, &v342);
                v339 = 0;
                v340 = 0;
                uint64_t v341 = 0;
                std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v339, v403.__begin_, (uint64_t)v403.__end_, ((char *)v403.__end_ - (char *)v403.__begin_) >> 3);
                if (v339)
                {
                  v340 = v339;
                  operator delete(v339);
                }
                if (v343) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v343);
                }
                MIL::IRTypedArgument::Make(TensorBufferArgumentHelper, v214);
              }
              if (MIL::IsPixelBuffer(OutputType, v210) && MIL::IsPixelBuffer(v203, v216))
              {
                v217 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(OutputType);
                v218 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v217);
                PixelFormatuint64_t Type = MIL::IRPixelBufferValueType::GetPixelFormatType(v218);
                v220 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(v203);
                v221 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v220);
                uint64_t v222 = MIL::IRPixelBufferValueType::GetShape(v221);
                memset(&v386, 0, sizeof(v386));
                std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v386, *(const void **)v222, *(void *)(v222 + 8), (uint64_t)(*(void *)(v222 + 8) - *(void *)v222) >> 3);
                uint64_t BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(v218);
                uint64_t Attributes = MIL::IRPixelBufferValueType::GetAttributes(v218);
                std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v403, Attributes);
                if (BytesPerRow)
                {
                  uint64_t v225 = MIL::IRPixelBufferValueType::GetBytesPerRow((MIL::IRPixelBufferValueTypeImpl **)v218);
                  v409 = 0;
                  v410 = 0;
                  uint64_t v411 = 0;
                  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v409, *(const void **)v225, *(void *)(v225 + 8), (uint64_t)(*(void *)(v225 + 8) - *(void *)v225) >> 3);
                  MIL::Builder::FunctionBuilder::GetContext(a3, &v400);
                  v226 = (MIL::IRTypedArgument *)MIL::IRPixelBufferValueType::MakeWithShape(v400, PixelFormatType, (uint64_t)&v386, (uint64_t)&v409, (uint64_t *)&v403);
                  MIL::IRTypedArgument::Make(v226, v227);
                }
                MIL::Builder::FunctionBuilder::GetContext(a3, &v409);
                v228 = (MIL::IRTypedArgument *)MIL::IRPixelBufferValueType::MakeWithShape(v409, PixelFormatType, (long long *)&v386, (uint64_t *)&v403);
                MIL::IRTypedArgument::Make(v228, v229);
              }
              MIL::IRTypedArgument::Make(v203, v216);
            }
            if (a5) {
            int v12 = 0;
            }
          }
          else
          {
            int v12 = 1;
          }
          if (*(void *)__x)
          {
            *(void *)&__x[2] = *(void *)__x;
            operator delete(*(void **)__x);
          }
LABEL_360:
          std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v387);
          goto LABEL_552;
        }
        if ((void)v357 == *((void *)&v357 + 1))
        {
          MIL::Builder::FunctionBuilder::GetContext(a3, &__p);
          v266 = (uint64_t *)MIL::Builder::OperationBuilder::GetLocationPtr(v369);
          v267 = (std::__shared_weak_count *)v266[1];
          uint64_t v350 = *v266;
          v351 = v267;
          if (v267) {
            atomic_fetch_add_explicit(&v267->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Builder::OperationBuilder::GetAttributes(v369);
          memset(&v403, 0, sizeof(v403));
          (*(void (**)(std::string *__return_ptr))(**(void **)v328 + 208))(&v386);
          *(void *)__x = &v403;
          std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
          if (v351) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v351);
          }
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
          if ((v356 - (unsigned char *)p_p) >> 3 == (uint64_t)(v386.__r_.__value_.__l.__size_ - v386.__r_.__value_.__r.__words[0]) >> 4)
          {
            if (v356 != p_p)
            {
              long long v268 = *(_OWORD *)v386.__r_.__value_.__l.__data_;
              long long v346 = v268;
              if (*((void *)&v268 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v268 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              MIL::IRTypedArgument::Make();
            }
            int v12 = 3;
          }
          else
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
            v273 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"Invalid number of outputs values inferred from: ", 48);
            uint64_t v274 = (*(uint64_t (**)(int *))(**(void **)v328 + 16))(*(int **)v328);
            int v275 = *(char *)(v274 + 23);
            if (v275 >= 0) {
              uint64_t v276 = v274;
            }
            else {
              uint64_t v276 = *(void *)v274;
            }
            if (v275 >= 0) {
              uint64_t v277 = *(unsigned __int8 *)(v274 + 23);
            }
            else {
              uint64_t v277 = *(void *)(v274 + 8);
            }
            v278 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, v276, v277);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v278, (uint64_t)".", 1);
            v279 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v369);
            uint64_t v280 = v279[1];
            *(void *)&long long v349 = *v279;
            *((void *)&v349 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v280;
            if (v280) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v280 + 8), 1uLL, memory_order_relaxed);
            }
            std::stringbuf::str();
            MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v349, 3, (uint64_t)&v347);
            if (v348 < 0) {
              operator delete(v347);
            }
            if (*((void *)&v349 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v349 + 1));
            }
            v403.__begin_ = v330;
            *(std::vector<int>::pointer *)((char *)&v403.__begin_ + *((void *)v330 - 3)) = v329;
            v403.__end_ = (std::vector<int>::pointer)(MEMORY[0x263F8C318] + 16);
            if (v407 < 0) {
              operator delete(v406);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x21056C620](v408);
            int v12 = 1;
          }
          v403.__begin_ = (std::vector<int>::pointer)&v386;
          std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v403);
          goto LABEL_360;
        }
        v191 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v369);
        uint64_t v192 = v191[1];
        *(void *)&long long v354 = *v191;
        *((void *)&v354 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v192;
        if (v192) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v192 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(v352, "Found nested blocks on shape op");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v354, 3, (uint64_t)v352);
        if (v353 < 0) {
          operator delete(v352[0]);
        }
        if (*((void *)&v354 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v354 + 1));
        }
      }
      int v12 = 1;
      goto LABEL_360;
    }
    int v58 = v369;
    std::string::basic_string[abi:ne180100]<0>(&v403, "function");
    MIL::Builder::OperationBuilder::TryGetAttribute((uint64_t)v58, (unsigned __int8 *)&v403, &v391);
    if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
      operator delete(v403.__begin_);
    }
    if (!v391)
    {
      int v70 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
      uint64_t v71 = v70[1];
      *(void *)&long long v387 = *v70;
      *((void *)&v387 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v71;
      if (v71) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v71 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(&v403, "Found call op with no function name");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v387, 3, (uint64_t)&v403);
      if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
        operator delete(v403.__begin_);
      }
      if (*((void *)&v387 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v387 + 1));
      }
      goto LABEL_547;
    }
    uint64_t v59 = (uint64_t *)MIL::IRValue::AsTensor(v391);
    uint64_t v60 = MIL::IRTensorValue::GetDataView<std::string>(v59);
    if (*(char *)(v60 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v60, *(void *)(v60 + 8));
    }
    else
    {
      long long v61 = *(_OWORD *)v60;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v60 + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v61;
    }
    v390 = 0;
    if (*(_DWORD *)(a6 + 48) != 2) {
      goto LABEL_545;
    }
    MIL::MILResult::~MILResult((void **)a6);
    if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v373, (unsigned __int8 *)&__p))
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v373, (unsigned __int8 *)&__p, (uint64_t)&__p);
      long long v387 = 0u;
      long long v388 = 0u;
      int v389 = 1065353216;
      MIL::Builder::OperationBuilder::GetParameterNames((unsigned __int8 **)v58, (uint64_t)&v386);
      v230 = (const void **)v386.__r_.__value_.__r.__words[2];
      if (v386.__r_.__value_.__r.__words[2])
      {
        while (1)
        {
          if (!MIL::Builder::FunctionBuilder::TryGetInput((uint64_t)v390, (uint64_t)(v230 + 2)))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
            v281 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"No input ", 9);
            int v282 = *((char *)v230 + 39);
            if (v282 >= 0) {
              uint64_t v283 = (uint64_t)(v230 + 2);
            }
            else {
              uint64_t v283 = (uint64_t)v230[2];
            }
            if (v282 >= 0) {
              uint64_t v284 = *((unsigned __int8 *)v230 + 39);
            }
            else {
              uint64_t v284 = (uint64_t)v230[3];
            }
            v285 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v281, v283, v284);
            v286 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v285, (uint64_t)" in called function ", 20);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v287 = &__p;
            }
            else {
              v287 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v288 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v288 = __p.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v286, (uint64_t)v287, v288);
            v289 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
            uint64_t v290 = v289[1];
            *(void *)&long long v385 = *v289;
            *((void *)&v385 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v290;
            if (v290) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v290 + 8), 1uLL, memory_order_relaxed);
            }
            goto LABEL_536;
          }
          if ((unint64_t)MIL::Builder::OperationBuilder::GetNumArguments((uint64_t)v58, v230 + 2) >= 2) {
            break;
          }
          v231 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v58, (uint64_t)(v230 + 2), 0);
          v232 = (unsigned __int8 *)MIL::Builder::Variable::TryGetName(v231);
          if (!v232)
          {
            v238 = (MIL::Builder::Variable::VariableImpl **)MIL::Builder::OperationBuilder::GetArgumentForParameter((uint64_t)v58, (uint64_t)(v230 + 2), 0);
            MIL::Builder::Variable::TryGetValueSharedPtr(v238, __x);
            if (*(void *)__x)
            {
              uint64_t v381 = *(void *)__x;
              uint64_t v382 = *(void *)&__x[2];
              if (*(void *)&__x[2]) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__x[2] + 8), 1uLL, memory_order_relaxed);
              }
              MIL::IRTypedArgument::Make();
            }
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
            v239 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"Could not build TypedArgument for ", 34);
            int v240 = *((char *)v230 + 39);
            if (v240 >= 0) {
              uint64_t v241 = (uint64_t)(v230 + 2);
            }
            else {
              uint64_t v241 = (uint64_t)v230[2];
            }
            if (v240 >= 0) {
              uint64_t v242 = *((unsigned __int8 *)v230 + 39);
            }
            else {
              uint64_t v242 = (uint64_t)v230[3];
            }
            v243 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v239, v241, v242);
            v244 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v243, (uint64_t)" in called function ", 20);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v245 = &__p;
            }
            else {
              v245 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v246 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v246 = __p.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v244, (uint64_t)v245, v246);
            v247 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
            uint64_t v248 = v247[1];
            *(void *)&long long v380 = *v247;
            *((void *)&v380 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v248;
            if (v248) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v248 + 8), 1uLL, memory_order_relaxed);
            }
            std::stringbuf::str();
            MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v380, 3, (uint64_t)v378);
            if (v379 < 0) {
              operator delete(v378[0]);
            }
            if (*((void *)&v380 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v380 + 1));
            }
            v403.__begin_ = v330;
            *(std::vector<int>::pointer *)((char *)&v403.__begin_ + *((void *)v330 - 3)) = v329;
            v403.__end_ = (std::vector<int>::pointer)(MEMORY[0x263F8C318] + 16);
            if (v407 < 0) {
              operator delete(v406);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x21056C620](v408);
            if (*(void *)&__x[2]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[2]);
            }
            goto LABEL_543;
          }
          if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, v232))
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
            v293 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"No inferred type for param ", 27);
            int v294 = *((char *)v230 + 39);
            if (v294 >= 0) {
              uint64_t v295 = (uint64_t)(v230 + 2);
            }
            else {
              uint64_t v295 = (uint64_t)v230[2];
            }
            if (v294 >= 0) {
              uint64_t v296 = *((unsigned __int8 *)v230 + 39);
            }
            else {
              uint64_t v296 = (uint64_t)v230[3];
            }
            v297 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v293, v295, v296);
            v298 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v297, (uint64_t)" in called function ", 20);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v299 = &__p;
            }
            else {
              v299 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v300 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v300 = __p.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v298, (uint64_t)v299, v300);
            v301 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
            uint64_t v302 = v301[1];
            *(void *)&long long v385 = *v301;
            *((void *)&v385 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v302;
            if (v302) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v302 + 8), 1uLL, memory_order_relaxed);
            }
LABEL_536:
            std::stringbuf::str();
            MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v385, 3, (uint64_t)__x);
            if (v384 < 0) {
              operator delete(*(void **)__x);
            }
            if (*((void *)&v385 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v385 + 1));
            }
            v403.__begin_ = v330;
            *(std::vector<int>::pointer *)((char *)&v403.__begin_ + *((void *)v330 - 3)) = v329;
            v403.__end_ = (std::vector<int>::pointer)(MEMORY[0x263F8C318] + 16);
            if (v407 < 0) {
              operator delete(v406);
            }
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x21056C620](v408);
            goto LABEL_543;
          }
          v403.__begin_ = (std::vector<int>::pointer)v232;
          v233 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, v232, (uint64_t)&std::piecewise_construct, (long long **)&v403);
          v403.__begin_ = (std::vector<int>::pointer)(v230 + 2);
          v234 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v387, (unsigned __int8 *)v230 + 16, (uint64_t)&std::piecewise_construct, (long long **)&v403);
          uint64_t v236 = *((void *)v233 + 5);
          uint64_t v235 = *((void *)v233 + 6);
          if (v235) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v235 + 8), 1uLL, memory_order_relaxed);
          }
          v237 = (std::__shared_weak_count *)*((void *)v234 + 6);
          *((void *)v234 + 5) = v236;
          *((void *)v234 + 6) = v235;
          if (v237) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v237);
          }
          v230 = (const void **)*v230;
          if (!v230) {
            goto LABEL_441;
          }
        }
        v291 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
        uint64_t v292 = v291[1];
        *(void *)__x = *v291;
        *(void *)&__x[2] = v292;
        if (v292) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v292 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v403, "Don't yet support >1 args for called function params");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)__x, 4, (uint64_t)&v403);
        if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
          operator delete(v403.__begin_);
        }
        if (*(void *)&__x[2]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[2]);
        }
LABEL_543:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v386);
        goto LABEL_544;
      }
LABEL_441:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v386);
      v249 = v390;
      if (*(_DWORD *)(a6 + 48) != 2
        || (MIL::MILResult::~MILResult((void **)a6),
            *(_DWORD *)(a6 + 48) != 2))
      {
LABEL_544:
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v387);
        goto LABEL_545;
      }
      MIL::MILResult::~MILResult((void **)a6);
      v250 = (unsigned __int8 *)MIL::Builder::FunctionBuilder::SelectedSpecialization(v249);
      MIL::Builder::FunctionBuilder::GetBlock((uint64_t)v249, v250, &v385);
      MIL::Builder::BlockBuilder::GetOutputNames((MIL::Builder::BlockBuilder *)v385, &v386);
      std::string::size_type v251 = v386.__r_.__value_.__l.__size_;
      std::string::size_type v252 = v386.__r_.__value_.__r.__words[0];
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v251 - v252) >> 3) == MIL::Builder::OperationBuilder::GetNumOutputs(v58))
      {
        std::string::size_type v253 = v386.__r_.__value_.__r.__words[0];
        if (v386.__r_.__value_.__l.__size_ != v386.__r_.__value_.__r.__words[0])
        {
          uint64_t v254 = 0;
          unint64_t v255 = 0;
          while (1)
          {
            v256 = (int *)(v253 + v254);
            if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(&v387, (unsigned __int8 *)(v253 + v254)))break; {
            v403.__begin_ = v256;
            }
            v257 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v387, (unsigned __int8 *)v256, (uint64_t)&std::piecewise_construct, (long long **)&v403);
            v403.__begin_ = (std::vector<int>::pointer)MIL::Builder::OperationBuilder::GetOutputName((MIL::Builder::OperationBuilder::OperationBuilderImpl **)v58, v255);
            v258 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a4, (unsigned __int8 *)v403.__begin_, (uint64_t)&std::piecewise_construct, (long long **)&v403);
            uint64_t v260 = *((void *)v257 + 5);
            uint64_t v259 = *((void *)v257 + 6);
            if (v259) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v259 + 8), 1uLL, memory_order_relaxed);
            }
            v261 = (std::__shared_weak_count *)*((void *)v258 + 6);
            *((void *)v258 + 5) = v260;
            *((void *)v258 + 6) = v259;
            if (v261) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v261);
            }
            ++v255;
            std::string::size_type v253 = v386.__r_.__value_.__r.__words[0];
            v254 += 24;
            if (v255 >= 0xAAAAAAAAAAAAAAABLL
                       * ((uint64_t)(v386.__r_.__value_.__l.__size_ - v386.__r_.__value_.__r.__words[0]) >> 3))
              goto LABEL_452;
          }
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"Could not infer type for output at index ", 41);
          std::ostream::operator<<();
          v320 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
          uint64_t v321 = v320[1];
          *(void *)&long long v377 = *v320;
          *((void *)&v377 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v321;
          if (v321) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v321 + 8), 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v377, 3, (uint64_t)__x);
          if (v384 < 0) {
            operator delete(*(void **)__x);
          }
          if (*((void *)&v377 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v377 + 1));
          }
          v403.__begin_ = v330;
          *(std::vector<int>::pointer *)((char *)&v403.__begin_ + *((void *)v330 - 3)) = v329;
          v403.__end_ = (std::vector<int>::pointer)(MEMORY[0x263F8C318] + 16);
          if (v407 < 0) {
            operator delete(v406);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x21056C620](v408);
          goto LABEL_608;
        }
LABEL_452:
        v262 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
        uint64_t v263 = v262[1];
        *(void *)__x = *v262;
        *(void *)&__x[2] = v263;
        if (v263) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v263 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v403, "Success");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)__x, 2, (uint64_t)&v403);
      }
      else
      {
        v303 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
        uint64_t v304 = v303[1];
        *(void *)__x = *v303;
        *(void *)&__x[2] = v304;
        if (v304) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v304 + 8), 1uLL, memory_order_relaxed);
        }
        std::string::basic_string[abi:ne180100]<0>(&v403, "Num outputs mismatch between call op & callee");
        MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)__x, 3, (uint64_t)&v403);
      }
      if (SHIBYTE(v403.__end_cap_.__value_) < 0) {
        operator delete(v403.__begin_);
      }
      if (*(void *)&__x[2]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__x[2]);
      }
LABEL_608:
      v412 = &v386;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v412);
      if (*((void *)&v385 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v385 + 1));
      }
      goto LABEL_544;
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v403);
    v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v403, (uint64_t)"Found multiple call ops calling ", 32);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v99 = &__p;
    }
    else {
      char v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v100 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v100 = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
    std::string v101 = (std::string::size_type *)MIL::Builder::OperationBuilder::GetLocationPtr(v58);
    std::string::size_type v102 = v101[1];
    v386.__r_.__value_.__r.__words[0] = *v101;
    v386.__r_.__value_.__l.__size_ = v102;
    if (v102) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v102 + 8), 1uLL, memory_order_relaxed);
    }
    std::stringbuf::str();
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, (long long *)&v386, 3, (uint64_t)&v387);
    if (SBYTE7(v388) < 0) {
      operator delete((void *)v387);
    }
    if (v386.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v386.__r_.__value_.__l.__size_);
    }
    v403.__begin_ = v330;
    *(std::vector<int>::pointer *)((char *)&v403.__begin_ + *((void *)v330 - 3)) = v329;
    v403.__end_ = (std::vector<int>::pointer)(MEMORY[0x263F8C318] + 16);
    if (v407 < 0) {
      operator delete(v406);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x21056C620](v408);
LABEL_545:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_547:
    if (v392) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v392);
    }
    if (*(_DWORD *)(a6 + 48) == 2)
    {
      MIL::MILResult::~MILResult((void **)a6);
      int v12 = 3;
    }
    else
    {
      int v12 = 1;
    }
LABEL_552:
    if (p_p)
    {
      v356 = p_p;
      operator delete(p_p);
    }
LABEL_554:
    v403.__begin_ = (std::vector<int>::pointer)&v357;
    std::vector<std::vector<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v403);
LABEL_555:
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v359);
LABEL_556:
    if ((char)v368 < 0) {
      operator delete(v366);
    }
LABEL_558:
    if (v370) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v370);
    }
    if (v12 == 3 || !v12)
    {
      uint64_t v8 = v332 + 16;
      if (v332 + 16 == v331) {
        goto LABEL_610;
      }
      continue;
    }
    break;
  }
  v403.__begin_ = (std::vector<int>::pointer)&v371;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v403);
LABEL_616:
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v373);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v375);
}

void sub_20F427C04()
{
  __cxa_end_catch();
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)&v1);
  if (v0) {
    JUMPOUT(0x20F4284B8);
  }
  JUMPOUT(0x20F4284BCLL);
}

void sub_20F427D24(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,std::__shared_weak_count *a43)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x4D8]);
  __cxa_end_catch();
  JUMPOUT(0x20F428408);
}

void sub_20F427D54()
{
  if (SLOBYTE(STACK[0x3B7]) < 0) {
    operator delete((void *)STACK[0x3A0]);
  }
  if (STACK[0x360]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x360]);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x4D8]);
  *(void *)(v0 - 104) = &STACK[0x3D0];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v0 - 104));
  if (STACK[0x3C8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x3C8]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&STACK[0x400]);
  if (SLOBYTE(STACK[0x4A7]) < 0) {
    operator delete((void *)STACK[0x490]);
  }
  if (STACK[0x438]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x438]);
  }
  if (v1) {
    JUMPOUT(0x20F4284B8);
  }
  JUMPOUT(0x20F4284BCLL);
}

void sub_20F428350()
{
  if (STACK[0x498]) {
    JUMPOUT(0x20F42835CLL);
  }
  JUMPOUT(0x20F428360);
}

void sub_20F428384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  unint64_t v64 = STACK[0x4D8];
  STACK[0x4D8] = 0;
  if (v64) {
    MIL::Passes::PropagateValueTypes();
  }
  if (a64) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a64);
  }
  STACK[0x4D8] = (unint64_t)&STACK[0x3D0];
  JUMPOUT(0x20F428404);
}

void sub_20F4283B4()
{
}

void sub_20F4283BC()
{
}

void sub_20F4283C4(_Unwind_Exception *a1)
{
  if (STACK[0x408]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x408]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v2);
  if (v3 < 0) {
    operator delete(v2[14]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  v2[0] = (void **)&v5;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v6);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v7);
  _Unwind_Resume(a1);
}

void sub_20F4283F4()
{
  STACK[0x368] = (unint64_t)&STACK[0x490];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x368]);
  JUMPOUT(0x20F428408);
}

void sub_20F428438()
{
  if (SLOBYTE(STACK[0x2B7]) < 0) {
    JUMPOUT(0x20F428608);
  }
  JUMPOUT(0x20F42860CLL);
}

void sub_20F42844C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(v2);
  if (v3 < 0) {
    operator delete((void *)v2[14]);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100]();
  }
  v2[0] = &v5;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(&v6);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(&v7);
  _Unwind_Resume(a1);
}

void sub_20F428454()
{
  if (STACK[0x240]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x240]);
  }
  std::ostringstream::~ostringstream((uint64_t)&STACK[0x4D8]);
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  STACK[0x3D0] = (unint64_t)&STACK[0x400];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  JUMPOUT(0x20F4285F4);
}

void sub_20F428484()
{
}

void sub_20F4284E0()
{
}

void sub_20F4284E8()
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&STACK[0x4D8]);
  unint64_t v1 = STACK[0x220];
  STACK[0x220] = 0;
  if (v1) {
    (*(void (**)(unint64_t))(*(void *)v1 + 8))(v1);
  }
  if (STACK[0x370]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x370]);
  }
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  STACK[0x3D0] = (unint64_t)&STACK[0x400];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x3D0]);
  JUMPOUT(0x20F4285F4);
}

void sub_20F4285C0()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  if (SLOBYTE(STACK[0x3E7]) < 0) {
    operator delete((void *)STACK[0x3D0]);
  }
  STACK[0x3D0] = (unint64_t)&STACK[0x400];
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x3D0]);
  JUMPOUT(0x20F4285F4);
}

void anonymous namespace'::GetOperatorType(std::string *a1@<X0>, uint64_t a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    uint64_t v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
    uint64_t size = a1->__r_.__value_.__l.__size_;
  }
  else
  {
    uint64_t size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    uint64_t v5 = a1;
  }
  unsigned __int8 v6 = v17;
  if ((v17 & 0x80u) == 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  if ((v17 & 0x80u) == 0) {
    int64_t v8 = v17;
  }
  else {
    int64_t v8 = (int64_t)__p[1];
  }
  if (v8)
  {
    if (size >= v8)
    {
      unint64_t v9 = (char *)v5 + size;
      int v10 = *(char *)v7;
      uint8x8_t v11 = v5;
      do
      {
        uint64_t v12 = size - v8;
        if (v12 == -1) {
          break;
        }
        uint64_t v13 = (char *)memchr(v11, v10, v12 + 1);
        if (!v13) {
          break;
        }
        uint64_t v14 = v13;
        if (!memcmp(v13, v7, v8))
        {
          if (v14 != v9)
          {
            int64_t v15 = v14 - (char *)v5;
            if (v14 - (char *)v5 != -1) {
              goto LABEL_19;
            }
          }
          break;
        }
        uint8x8_t v11 = (std::string *)(v14 + 1);
        uint64_t size = v9 - (v14 + 1);
      }
      while (size >= v8);
    }
  }
  else
  {
    int64_t v15 = 0;
LABEL_19:
    std::string::erase(a1, 0, v15 + v8);
    unsigned __int8 v6 = v17;
  }
  *(_OWORD *)a2 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
  *(void *)(a2 + 16) = *((void *)&a1->__r_.__value_.__l + 2);
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  if ((v6 & 0x80) != 0) {
    operator delete(__p[0]);
  }
}

void sub_20F4287A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::InferOutputsForNestedBlocks(MIL::Builder::OperationBuilder *this@<X2>, int a2@<W0>, uint64_t a3@<X1>, void *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  MIL::Builder::OperationBuilder::GetBlocks(this, &v78);
  uint64_t v9 = v78;
  uint64_t v58 = v79;
  if (v78 == v79)
  {
LABEL_81:
    v67[0] = (void **)&v78;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v67);
    LocationPtr = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(this);
    uint64_t v53 = LocationPtr[1];
    *(void *)&long long v63 = *LocationPtr;
    *((void *)&v63 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v53;
    if (v53) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v61, "Success");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v63, 2, (uint64_t)v61);
    if (v62 < 0) {
      operator delete(v61[0]);
    }
    if (*((void *)&v63 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v63 + 1));
    }
    return;
  }
  uint64_t v55 = (void **)*MEMORY[0x263F8C2C8];
  uint64_t v54 = *(void ***)(MEMORY[0x263F8C2C8] + 24);
  unint64_t v57 = a5;
  while (2)
  {
    uint8x8_t v11 = *(MIL::Builder::BlockBuilder **)v9;
    int v10 = *(std::__shared_weak_count **)(v9 + 8);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(_DWORD *)(a6 + 48) != 2)
    {
      int v38 = 1;
      goto LABEL_77;
    }
    uint64_t v12 = a3;
    MIL::MILResult::~MILResult((void **)a6);
    float v75 = 0;
    float v76 = 0;
    BOOL v77 = 0;
    MIL::Builder::BlockBuilder::GetOutputs((MIL::Builder::BlockBuilder::BlockBuilderImpl **)v11, (void **)&v73);
    uint64_t v13 = v73;
    uint64_t v14 = v74;
    if (v73 == v74)
    {
      int v38 = 4;
      int v39 = 1;
      a3 = v12;
      if (v73) {
        goto LABEL_69;
      }
      goto LABEL_70;
    }
    while (1)
    {
      int64_t v15 = *v13;
      if (!*v13) {
        break;
      }
      uint64_t Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(*v13);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, Name))
      {
        unsigned __int8 v17 = (unsigned __int8 *)MIL::Builder::Variable::GetName(v15);
        BOOL v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, v17);
        if (!v18) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        Valueuint64_t Type = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v18 + 5));
        uint64_t v20 = ValueType;
        BOOL v21 = v76;
        if (v76 >= v77)
        {
          uint64_t v26 = v76 - v75;
          if ((unint64_t)(v26 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v27 = ((char *)v77 - (char *)v75) >> 2;
          if (v27 <= v26 + 1) {
            unint64_t v27 = v26 + 1;
          }
          if ((unint64_t)((char *)v77 - (char *)v75) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28) {
            uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v77, v28);
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v32 = (uint64_t *)&v29[8 * v26];
          *uint64_t v32 = v20;
          uint64_t v22 = v32 + 1;
          uint64_t v34 = v75;
          uint64_t v33 = v76;
          if (v76 != v75)
          {
            do
            {
              uint64_t v35 = *--v33;
              *--uint64_t v32 = v35;
            }
            while (v33 != v34);
            goto LABEL_38;
          }
          goto LABEL_39;
        }
        uint64_t *v76 = ValueType;
        uint64_t v22 = v21 + 1;
      }
      else
      {
        uint64_t Type = MIL::Builder::Variable::TryGetType(v15);
        uint64_t v24 = Type;
        if (!Type)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v67);
          a3 = v12;
          uint64_t v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"Could not deduce type of nested block output: ", 46);
          int v43 = MIL::Builder::Variable::GetName(v15);
          int v44 = *((char *)v43 + 23);
          if (v44 >= 0) {
            uint64_t v45 = (uint64_t)v43;
          }
          else {
            uint64_t v45 = *(void *)v43;
          }
          if (v44 >= 0) {
            uint64_t v46 = *((unsigned __int8 *)v43 + 23);
          }
          else {
            uint64_t v46 = *((void *)v43 + 1);
          }
          uint64_t v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, v45, v46);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)".", 1);
          uint64_t v48 = (void *)MIL::Builder::BlockBuilder::GetLocationPtr(v11);
          uint64_t v49 = v48[1];
          *(void *)&long long v66 = *v48;
          *((void *)&v66 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v49;
          if (v49) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v49 + 8), 1uLL, memory_order_relaxed);
          }
          std::stringbuf::str();
          MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v66, 3, (uint64_t)&__p);
          if (v65 < 0) {
            operator delete(__p);
          }
          if (*((void *)&v66 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66 + 1));
          }
          v67[0] = v55;
          *(void ***)((char *)v67 + (void)*(v55 - 3)) = v54;
          v67[1] = (void **)(MEMORY[0x263F8C318] + 16);
          if (v68 < 0) {
            operator delete(v67[9]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x21056C620](&v69);
          goto LABEL_67;
        }
        float v25 = v76;
        if (v76 >= v77)
        {
          uint64_t v30 = v76 - v75;
          if ((unint64_t)(v30 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v31 = ((char *)v77 - (char *)v75) >> 2;
          if (v31 <= v30 + 1) {
            unint64_t v31 = v30 + 1;
          }
          if ((unint64_t)((char *)v77 - (char *)v75) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v28 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v31;
          }
          if (v28) {
            uint64_t v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v77, v28);
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v32 = (uint64_t *)&v29[8 * v30];
          *uint64_t v32 = v24;
          uint64_t v22 = v32 + 1;
          uint64_t v36 = v75;
          uint64_t v33 = v76;
          if (v76 != v75)
          {
            do
            {
              uint64_t v37 = *--v33;
              *--uint64_t v32 = v37;
            }
            while (v33 != v36);
LABEL_38:
            uint64_t v33 = v75;
          }
LABEL_39:
          float v75 = v32;
          float v76 = v22;
          BOOL v77 = (uint64_t *)&v29[8 * v28];
          if (v33) {
            operator delete(v33);
          }
          goto LABEL_41;
        }
        uint64_t *v76 = Type;
        uint64_t v22 = v25 + 1;
      }
LABEL_41:
      float v76 = v22;
      if (++v13 == v14)
      {
        int v38 = 4;
        int v39 = 1;
        a3 = v12;
        goto LABEL_68;
      }
    }
    uint64_t v40 = (void *)MIL::Builder::BlockBuilder::GetLocationPtr(v11);
    uint64_t v41 = v40[1];
    *(void *)&long long v72 = *v40;
    *((void *)&v72 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v41;
    a3 = v12;
    if (v41) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v70, "No Variable for Block output.");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a6, &v72, 3, (uint64_t)v70);
    if (v71 < 0) {
      operator delete(v70[0]);
    }
    if (*((void *)&v72 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v72 + 1));
    }
LABEL_67:
    int v39 = 0;
    int v38 = 1;
LABEL_68:
    uint64_t v13 = v73;
    if (v73)
    {
LABEL_69:
      uint64_t v74 = v13;
      operator delete(v13);
    }
LABEL_70:
    if (v39)
    {
      unint64_t v50 = v57[1];
      if (v50 >= v57[2])
      {
        uint64_t v51 = std::vector<std::vector<MIL::IRValueType const*>>::__push_back_slow_path<std::vector<MIL::IRValueType const*> const&>(v57, (uint64_t)&v75);
      }
      else
      {
        std::vector<std::vector<MIL::IRValueType const*>>::__construct_one_at_end[abi:ne180100]<std::vector<MIL::IRValueType const*> const&>((uint64_t)v57, (uint64_t)&v75);
        uint64_t v51 = v50 + 24;
      }
      int v38 = 0;
      v57[1] = v51;
    }
    if (v75)
    {
      float v76 = v75;
      operator delete(v75);
    }
LABEL_77:
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (!v38)
    {
      v9 += 16;
      if (v9 == v58) {
        goto LABEL_81;
      }
      continue;
    }
    break;
  }
  v67[0] = (void **)&v78;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](v67);
}

void sub_20F428DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  std::ostringstream::~ostringstream((uint64_t)&a37);
  uint64_t v40 = *(void **)(v38 - 160);
  if (v40)
  {
    *(void *)(v38 - 152) = v40;
    operator delete(v40);
  }
  uint64_t v41 = *(void **)(v38 - 136);
  if (v41)
  {
    *(void *)(v38 - 128) = v41;
    operator delete(v41);
  }
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  a37 = v38 - 112;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

void anonymous namespace'::AttemptTypeInferenceWithValues(uint64_t a1, uint64_t *a2, void *a3, void *a4)
{
  if ((MIL::Builder::OperationBuilder::IsVisited((MIL::Builder::OperationBuilder *)*a2) & 1) == 0)
  {
    MIL::Builder::OperationBuilder::SetVisited(*a2, 1);
    uint64_t OwningBlock = MIL::Builder::OperationBuilder::GetOwningBlock((MIL::Builder::OperationBuilder::OperationBuilderImpl **)*a2);
    MIL::Builder::OperationBuilder::GetInputArguments((MIL::Builder::OperationBuilder::OperationBuilderImpl **)*a2, (uint64_t)v25);
    uint64_t v9 = v26;
    if (v26)
    {
      while (1)
      {
        int v10 = (MIL::Builder::Variable::VariableImpl **)v9[2];
        if (MIL::Builder::Variable::TryGetName(v10)) {
          break;
        }
LABEL_41:
        uint64_t v9 = (void *)*v9;
        if (!v9) {
          goto LABEL_42;
        }
      }
      uint64_t Name = (unsigned __int8 *)MIL::Builder::Variable::GetName(v10);
      MIL::Builder::BlockBuilder::TryGetOperation(OwningBlock, Name, &v23);
      if (!v23)
      {
LABEL_39:
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
        goto LABEL_41;
      }
      uint64_t Operator = MIL::Builder::OperationBuilder::GetOperator(v23);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)Operator + 16))(Operator);
      MIL::ValueTypeInferenceUtils::GetOperatorType(v13, &v22);
      if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v22.__r_.__value_.__l.__size_ != 5) {
          goto LABEL_14;
        }
        uint64_t v14 = (std::string *)v22.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) != 5) {
          goto LABEL_14;
        }
        uint64_t v14 = &v22;
      }
      int data = (int)v14->__r_.__value_.__l.__data_;
      int v16 = v14->__r_.__value_.__s.__data_[4];
      if (data == 1885431923 && v16 == 101)
      {
        BOOL v19 = 1;
        if ((*((unsigned char *)&v22.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_35;
        }
        goto LABEL_37;
      }
LABEL_14:
      MIL::ValueTypeInferenceUtils::GetOperatorType(v13, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v19 = __p.__r_.__value_.__l.__size_ == 5
           && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1936617315
           && *(unsigned char *)(__p.__r_.__value_.__r.__words[0] + 4) == 116;
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        BOOL v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 5
           && LODWORD(__p.__r_.__value_.__l.__data_) == 1936617315
           && __p.__r_.__value_.__s.__data_[4] == 116;
      }
      if ((*((unsigned char *)&v22.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_35:
        if (v19)
        {
LABEL_36:
          MIL::ValueTypeInferenceUtils::MixedOpTypeinference(a1, (uint64_t)&v23, a3, a4);
          goto LABEL_39;
        }
        goto LABEL_38;
      }
LABEL_37:
      operator delete(v22.__r_.__value_.__l.__data_);
      if (v19) {
        goto LABEL_36;
      }
LABEL_38:
      goto LABEL_39;
    }
LABEL_42:
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v25);
    MIL::ValueTypeInferenceUtils::MixedOpTypeinference(a1, (uint64_t)a2, a3, a4);
  }
}

void sub_20F429110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20,char a21)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<MIL::IRTypedArgument>>::emplace_back<std::unique_ptr<MIL::IRTypedArgument>>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int64_t v15 = v13;
    int v16 = (uint64_t *)&v13[16 * v9];
    BOOL v18 = &v13[16 * v12];
    std::shared_ptr<MIL::IRTypedArgument>::shared_ptr[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(v16, a2);
    unsigned __int8 v17 = v16 + 2;
    std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&v15);
  }
  else
  {
    std::shared_ptr<MIL::IRTypedArgument>::shared_ptr[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_20F429250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<MIL::IRTypedArgument>>::emplace_back<std::shared_ptr<MIL::IRTypedArgument> const&>(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  unint64_t v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v4, v13);
    int64_t v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    void v19[2] = v15 + 16;
    std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v9 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v19);
  }
  else
  {
    *unint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_20F42937C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<MIL::IRTypedArgument>::shared_ptr[abi:ne180100]<MIL::IRTypedArgument,std::default_delete<MIL::IRTypedArgument>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void anonymous namespace'::PropagateNewTypesThroughWhileBlocks(MIL::Builder::OperationBuilder *this@<X2>, int a2@<W0>, uint64_t a3@<X1>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  MIL::Builder::OperationBuilder::GetBlocks(this, &v38);
  uint64_t v9 = v38;
  uint64_t v27 = v39;
  if (v38 == v39)
  {
LABEL_18:
    v37.__begin_ = (std::vector<std::string>::pointer)&v38;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    if (*(_DWORD *)(a7 + 48) != 2) {
      return;
    }
    MIL::MILResult::~MILResult((void **)a7);
    uint64_t v17 = a6[1] - *a6;
    LocationPtr = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(this);
    if (v17 == 48)
    {
      uint64_t v19 = LocationPtr[1];
      *(void *)&long long v30 = *LocationPtr;
      *((void *)&v30 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v19;
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v28, "Success");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a7, &v30, 2, (uint64_t)v28);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      uint64_t v20 = (std::__shared_weak_count *)*((void *)&v30 + 1);
      if (!*((void *)&v30 + 1)) {
        return;
      }
    }
    else
    {
      uint64_t v21 = LocationPtr[1];
      *(void *)&long long v33 = *LocationPtr;
      *((void *)&v33 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v21;
      if (v21) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v31, "Invalid number of nested blocks from while_loop");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a7, &v33, 3, (uint64_t)v31);
      if (v32 < 0) {
        operator delete(v31[0]);
      }
      uint64_t v20 = (std::__shared_weak_count *)*((void *)&v33 + 1);
      if (!*((void *)&v33 + 1)) {
        return;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    return;
  }
  while (1)
  {
    uint64_t v10 = *(MIL::Builder::BlockBuilder::BlockBuilderImpl ***)v9;
    unint64_t v11 = *(std::__shared_weak_count **)(v9 + 8);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    MIL::Builder::BlockBuilder::GetInputNames(v10, &v37);
    uint64_t v13 = (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3;
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_ - (char *)v37.__begin_) >> 3);
    if (v13 == v14)
    {
      if (v37.__end_ != v37.__begin_)
      {
        if ((uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 3) {
          MIL::IRTypedArgument::Make(**(MIL::IRTypedArgument ***)a4, v12);
        }
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
    }
    else
    {
      int64_t v15 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(this);
      uint64_t v16 = v15[1];
      *(void *)&long long v36 = *v15;
      *((void *)&v36 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v16;
      if (v16) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "Mismatch between while block input size and types to propagate");
      MIL::Passes::TypeInferenceResult::TypeInferenceResult(a7, &v36, 5, (uint64_t)__p);
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (*((void *)&v36 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
      }
    }
    uint64_t v40 = &v37;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v13 != v14) {
      break;
    }
    v9 += 16;
    if (v9 == v27) {
      goto LABEL_18;
    }
  }
  v37.__begin_ = (std::vector<std::string>::pointer)&v38;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
}

void sub_20F42974C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,std::__shared_weak_count *a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<MIL::IRValueType const*>>::__assign_with_size[abi:ne180100]<std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = a2 + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *>((int)&v20, a2, v13, v9);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>(v8, v13, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *>((int)&v21, a2, a3, v9);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(a1 + 8);
  if (v16 != v14)
  {
    uint64_t v17 = *(void *)(a1 + 8);
    do
    {
      uint64_t v19 = *(void **)(v17 - 24);
      v17 -= 24;
      BOOL v18 = v19;
      if (v19)
      {
        *(void *)(v16 - 16) = v18;
        operator delete(v18);
      }
      uint64_t v16 = v17;
    }
    while (v17 != v15);
  }
  *(void *)(a1 + 8) = v15;
}

void sub_20F4299A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F4299B0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*,std::vector<MIL::IRValueType const*>*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  unint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      void v4[2] = 0;
      std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_20F429A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F429ACC(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::vector<MIL::IRValueType const*>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *,std::vector<MIL::IRValueType const*> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<unsigned long long>::__assign_with_size[abi:ne180100]<unsigned long long const*,unsigned long long const*>(a4, *(char **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void *std::vector<std::vector<MIL::IRValueType const*>>::__construct_one_at_end[abi:ne180100]<std::vector<MIL::IRValueType const*> const&>(uint64_t a1, uint64_t a2)
{
  char v3 = *(void **)(a1 + 8);
  void *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(v3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_20F429BDC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MIL::IRValueType const*>>::__push_back_slow_path<std::vector<MIL::IRValueType const*> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<MIL::IRValueType const*>::__init_with_size[abi:ne180100]<MIL::IRValueType const**,MIL::IRValueType const**>(v11, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  v15 += 24;
  std::vector<std::vector<MIL::IRValueType const*>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_20F429CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MIL::IRValueType const*>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MIL::IRValueType const*>>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  void v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MIL::IRValueType const*>>,std::reverse_iterator<std::vector<MIL::IRValueType const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::vector<std::shared_ptr<MIL::IRValue const>>::emplace_back<std::unique_ptr<MIL::IRTensorValue const>>(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v9 = (uint64_t)(v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v19 = v4;
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(v4, v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v15 = v13;
    uint64_t v16 = (uint64_t *)&v13[16 * v9];
    BOOL v18 = &v13[16 * v12];
    std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v16, a2);
    uint64_t v17 = v16 + 2;
    std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v8 = a1[1];
    std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&v15);
  }
  else
  {
    std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(*(uint64_t **)(v4 - 8), a2);
    uint64_t v8 = v7 + 16;
    a1[1] = v7 + 16;
  }
  a1[1] = v8;
  return v8 - 16;
}

void sub_20F429F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::Fp16>::vector(void *a1, uint64_t a2, _WORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (_WORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 2 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 2;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F429FD0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<int> *__cdecl std::vector<int>::vector(std::vector<int> *this, std::vector<int>::size_type __n, const std::vector<int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<float>::__vallocate[abi:ne180100](this, __n);
    std::vector<int>::pointer end = this->__end_;
    unint64_t v7 = &end[__n];
    std::vector<int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_20F42A054(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:ne180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::__fill_n[abi:ne180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  uint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  unint64_t v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    void *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  unint64_t v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    unint64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    int v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F42A574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *unint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F42A618(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<MIL::IRValue const>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRValue const>*,std::shared_ptr<MIL::IRValue const>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100]((void *)a1, v12);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      BOOL v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_20F42A774(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F42A77C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void anonymous namespace'::ModifyBlockWithTypes(MIL::Builder::BlockBuilder *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  MIL::Builder::BlockBuilder::GetOperations(a1, v36);
  MIL::Builder::BlockBuilder::GetOutputNames(a1, &v35);
  MIL::Builder::BlockBuilder::GetContext((uint64_t)a1, &v33);
  MIL::Builder::BlockBuilder::GetInputNames((MIL::Builder::BlockBuilder::BlockBuilderImpl **)a1, &__s);
  std::vector<std::string>::pointer begin = __s.__begin_;
  std::vector<std::string>::pointer end = __s.__end_;
  while (begin != end)
  {
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)begin))
    {
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)begin);
      if (!v8) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      Valueuint64_t Type = MIL::IRTypedArgument::GetValueType(*((MIL::IRTypedArgument::IRTypedArgumentImpl ***)v8 + 5));
      MIL::Builder::BlockBuilder::ReplaceInput((uint64_t)a1, (uint64_t)begin, (uint64_t)begin, ValueType);
    }
    ++begin;
  }
  p_s = &__s;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_s);
  if (v36[1] == v36[0])
  {
    std::string::size_type size = v35.__r_.__value_.__l.__size_;
    uint64_t v14 = v35.__r_.__value_.__r.__words[0];
    if (v35.__r_.__value_.__r.__words[0] != v35.__r_.__value_.__l.__size_)
    {
      do
      {
        MIL::Builder::BlockBuilder::RemoveOutput((uint64_t)a1, v14);
        v14 += 24;
      }
      while (v14 != size);
      std::string::size_type v17 = v35.__r_.__value_.__l.__size_;
      for (unint64_t i = (const void **)v35.__r_.__value_.__r.__words[0]; i != (const void **)v17; i += 3)
        MIL::Builder::BlockBuilder::AddOutput((uint64_t)a1, i);
    }
    MIL::Builder::BlockBuilder::UpdateStateDependencyMap((MIL::Builder::BlockBuilder::BlockBuilderImpl **)a1);
    LocationPtr = (void *)MIL::Builder::BlockBuilder::GetLocationPtr(a1);
    uint64_t v19 = LocationPtr[1];
    *(void *)&long long v23 = *LocationPtr;
    *((void *)&v23 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v19;
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v21, "Success");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a3, &v23, 2, (uint64_t)v21);
    if (v22 < 0) {
      operator delete(v21[0]);
    }
    if (*((void *)&v23 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v23 + 1));
    }
  }
  else
  {
    uint64_t v11 = *(MIL::Builder::OperationBuilder **)v36[0];
    uint64_t v10 = *(std::__shared_weak_count **)(v36[0] + 8);
    char v20 = v10;
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      char v32 = v10;
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      char v32 = 0;
    }
    unint64_t v31 = v11;
    MIL::Builder::BlockBuilder::RemoveOperation((uint64_t)a1, (uint64_t)&v31);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    MIL::Builder::OperationBuilder::TryGetOperatorSharedPtr((uint64_t)v11, &v29);
    if (v29)
    {
      v25[0] = v29;
      v25[1] = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      MIL::Builder::OperationBuilder::Make((uint64_t)v25);
    }
    unint64_t v12 = (void *)MIL::Builder::OperationBuilder::GetLocationPtr(v11);
    uint64_t v13 = v12[1];
    *(void *)&long long v28 = *v12;
    *((void *)&v28 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "No operator associated with operation");
    MIL::Passes::TypeInferenceResult::TypeInferenceResult(a3, &v28, 3, (uint64_t)__p);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  __s.__begin_ = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
  __s.__begin_ = (std::vector<std::string>::pointer)v36;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s);
}

void sub_20F42BD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a33);
  }
  std::string v35 = *(std::__shared_weak_count **)(v33 - 200);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  *(void *)(v33 - 12std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = v33 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 120));
  *(void *)(v33 - 12std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = v33 - 168;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 120));
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::HasFullyUnknownStrideProperty(MIL::IRValueType *a1)
{
  uint64_t v1 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a1);
  uint64_t v2 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v1);
  if (!MIL::IRTensorBufferValueType::TryGetStrides(v2)) {
    return 0;
  }
  uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)v2);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v9 = 0;
  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v9, *(const void **)Strides, *(void *)(Strides + 8), (uint64_t)(*(void *)(Strides + 8) - *(void *)Strides) >> 3);
  unint64_t v4 = v10;
  if (v10 == v9)
  {
    BOOL v7 = 1;
    if (!v10) {
      return v7;
    }
LABEL_10:
    uint64_t v10 = v4;
    operator delete(v4);
    return v7;
  }
  unint64_t v5 = 0;
  unint64_t v4 = v9;
  do
  {
    unint64_t v6 = MIL::IRProperty::TryAsUnknown(*((void **)v4 + v5));
    BOOL v7 = v6 != 0;
    unint64_t v4 = v9;
    if (!v6) {
      break;
    }
    ++v5;
  }
  while (v5 < ((unsigned char *)v10 - (unsigned char *)v9) >> 3);
  if (v9) {
    goto LABEL_10;
  }
  return v7;
}

void sub_20F42C31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::UpdateTensorBufferStride(MIL::IRUnknownProperty **a1, MIL::IRValueType *this, uint64_t *a3)
{
  unint64_t v5 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
  unint64_t v6 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v5);
  Datauint64_t Type = MIL::IRTensorBufferValueType::GetDataType(v6);
  uint64_t InterleaveFactors = MIL::IRTensorBufferValueType::GetInterleaveFactors(v6);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v14 = 0;
  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v14, *(const void **)InterleaveFactors, *(void *)(InterleaveFactors + 8), (uint64_t)(*(void *)(InterleaveFactors + 8) - *(void *)InterleaveFactors) >> 3);
  MIL::Util::GetRowAlignedStrides(*a1, DataType, a3, (uint64_t *)&v14, 0x40uLL, (uint64_t *)__p);
  uint64_t Attributes = MIL::IRTensorBufferValueType::GetAttributes(v6);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v12, Attributes);
  uint64_t v10 = MIL::IRTensorBufferValueType::MakeWithShape(*a1, DataType, (uint64_t)a3, (uint64_t)__p, (uint64_t)&v14, v12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
  return v10;
}

void sub_20F42C424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(void *)(v16 - 48) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  long long v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F42C6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRTypedArgument>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *uint64_t v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F42C78C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void MIL::MILResult::~MILResult(void **this)
{
  *this = &unk_26C25A170;
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

MIL::MILResult *MIL::MILResult::MILResult(MIL::MILResult *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v3, "Not an error.");
  *((void *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26C25A170;
  *(_OWORD *)((char *)this + 24) = v3;
  *((void *)this + 5) = v4;
  return this;
}

__n128 MIL::MILResult::MILResult(uint64_t a1, uint64_t a2, __n128 *a3)
{
  *(void *)a1 = &unk_26C25A170;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  __n128 result = *a3;
  *(void *)(a1 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = a3[1].n128_u64[0];
  *(__n128 *)(a1 + 24) = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t MIL::MILResult::GetLocation(MIL::MILResult *this)
{
  return *(void *)MIL::MILResult::GetLocationSharedPtr(this);
}

uint64_t MIL::MILResult::GetLocationSharedPtr(MIL::MILResult *this)
{
  if (!*((void *)this + 1)) {
    MIL::UnknownLocation::Make(this);
  }
  return (uint64_t)this + 8;
}

void sub_20F42C94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImpl(a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<MIL::Location const>::operator=[abi:ne180100]<MIL::UnknownLocation,std::default_delete<MIL::UnknownLocation>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::Location const>::shared_ptr[abi:ne180100]<MIL::UnknownLocation,std::default_delete<MIL::UnknownLocation>,void>((uint64_t *)&v6, a2);
  long long v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t MIL::MILResult::GetMessage(MIL::MILResult *this)
{
  return (uint64_t)this + 24;
}

void MIL::MILResult::GetMessageWithLocation(const std::string::value_type **this@<X0>, std::string *a2@<X8>)
{
  uint64_t LocationSharedPtr = MIL::MILResult::GetLocationSharedPtr((MIL::MILResult *)this);
  (*(void (**)(std::string *__return_ptr))(**(void **)LocationSharedPtr + 24))(&v14);
  unint64_t v5 = std::string::append(&v14, ": ");
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unint64_t v9 = this[3];
  uint64_t v8 = (char *)(this + 3);
  uint64_t v7 = v9;
  int v10 = v8[23];
  if (v10 >= 0) {
    long long v11 = v8;
  }
  else {
    long long v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = v8[23];
  }
  else {
    std::string::size_type v12 = *((void *)v8 + 1);
  }
  unint64_t v13 = std::string::append(&v15, v11, v12);
  *a2 = *v13;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_20F42CA9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<MIL::Location const>::shared_ptr[abi:ne180100]<MIL::UnknownLocation,std::default_delete<MIL::UnknownLocation>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *__n128 result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

MIL::ParserContext *MIL::ParserContext::ParserContext(MIL::ParserContext *this, const MIL::ParserOptions *a2)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 1std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 2std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 3std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 5std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_DWORD *)this + 6std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 7std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 18) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 8std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_DWORD *)this + 9std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 10std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 11std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_DWORD *)this + 12std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 488) = 0u;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_DWORD *)this + 13std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_DWORD *)this + 14std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 568) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 15std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_DWORD *)this + 16std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *((_DWORD *)this + 17std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 43) = 0u;
  *((_OWORD *)this + 44) = 0u;
  *((_DWORD *)this + 18std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_DWORD *)this + 19std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_DWORD *)this + 20std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *((_DWORD *)this + 21std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_DWORD *)this + 22std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *((_DWORD *)this + 23std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_DWORD *)this + 24std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 968) = 0u;
  *(_OWORD *)((char *)this + 984) = 0u;
  *((_DWORD *)this + 25std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_DWORD *)this + 26std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *((_DWORD *)this + 27std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_DWORD *)this + 28std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1128) = 0u;
  *(_OWORD *)((char *)this + 1144) = 0u;
  *((_DWORD *)this + 29std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_DWORD *)this + 30std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1208) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *((_DWORD *)this + 31std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 79) = 0u;
  *((_OWORD *)this + 78) = 0u;
  *((_DWORD *)this + 32std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *((_DWORD *)this + 33std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 84) = 0u;
  *((_OWORD *)this + 83) = 0u;
  *((_DWORD *)this + 34std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *((_DWORD *)this + 35std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 89) = 0u;
  *((_OWORD *)this + 88) = 0u;
  *((_DWORD *)this + 36std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1448) = 0u;
  *(_OWORD *)((char *)this + 1464) = 0u;
  *((_DWORD *)this + 37std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 93) = 0u;
  *((_DWORD *)this + 38std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1528) = 0u;
  *(_OWORD *)((char *)this + 1544) = 0u;
  *((_DWORD *)this + 39std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_DWORD *)this + 40std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1608) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *((_DWORD *)this + 41std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 104) = 0u;
  *((_OWORD *)this + 103) = 0u;
  *((_DWORD *)this + 42std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *((_DWORD *)this + 43std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 109) = 0u;
  *((_OWORD *)this + 108) = 0u;
  *((_DWORD *)this + 44std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *((_DWORD *)this + 45std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 114) = 0u;
  *((_OWORD *)this + 113) = 0u;
  *((_DWORD *)this + 46std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *(_OWORD *)((char *)this + 1864) = 0u;
  *((_DWORD *)this + 47std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 119) = 0u;
  *((_OWORD *)this + 118) = 0u;
  *((_DWORD *)this + 48std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 1928) = 0u;
  *(_OWORD *)((char *)this + 1944) = 0u;
  *((_DWORD *)this + 49std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 123) = 0u;
  *((_DWORD *)this + 50std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 2008) = 0u;
  *(_OWORD *)((char *)this + 2024) = 0u;
  *((_DWORD *)this + 51std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 128) = 0u;
  *((_DWORD *)this + 52std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(_OWORD *)((char *)this + 2088) = 0u;
  *(_OWORD *)((char *)this + 2104) = 0u;
  *((_DWORD *)this + 53std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_OWORD *)this + 134) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_DWORD *)this + 54std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 55std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 56std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 57std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 58std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 59std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 60std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 61std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 62std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 63std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 64std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 65std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 66std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 67std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 68std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 69std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 70std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 71std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 72std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 73std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 74std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 75std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 76std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 77std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 78std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 79std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 80std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 81std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 82std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 83std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 84std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 85std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 86std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 87std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((_DWORD *)this + 884) = 1065353216;
  *((_DWORD *)this + 894) = 1065353216;
  *(_OWORD *)((char *)this + 2168) = 0u;
  *(_OWORD *)((char *)this + 2184) = 0u;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *((_OWORD *)this + 144) = 0u;
  *((_OWORD *)this + 143) = 0u;
  *(_OWORD *)((char *)this + 2328) = 0u;
  *(_OWORD *)((char *)this + 2344) = 0u;
  *((_OWORD *)this + 149) = 0u;
  *((_OWORD *)this + 148) = 0u;
  *(_OWORD *)((char *)this + 2408) = 0u;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *((_OWORD *)this + 154) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *(_OWORD *)((char *)this + 2488) = 0u;
  *(_OWORD *)((char *)this + 2504) = 0u;
  *((_OWORD *)this + 159) = 0u;
  *((_OWORD *)this + 158) = 0u;
  *(_OWORD *)((char *)this + 2568) = 0u;
  *(_OWORD *)((char *)this + 2584) = 0u;
  *((_OWORD *)this + 164) = 0u;
  *((_OWORD *)this + 163) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *((_OWORD *)this + 169) = 0u;
  *((_OWORD *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2744) = 0u;
  *((_OWORD *)this + 174) = 0u;
  *((_OWORD *)this + 173) = 0u;
  *(_OWORD *)((char *)this + 2808) = 0u;
  *(_OWORD *)((char *)this + 2824) = 0u;
  *((_OWORD *)this + 179) = 0u;
  *((_OWORD *)this + 178) = 0u;
  *(_OWORD *)((char *)this + 2888) = 0u;
  *(_OWORD *)((char *)this + 2904) = 0u;
  *((_OWORD *)this + 184) = 0u;
  *((_OWORD *)this + 183) = 0u;
  *(_OWORD *)((char *)this + 2968) = 0u;
  *(_OWORD *)((char *)this + 2984) = 0u;
  *((_OWORD *)this + 189) = 0u;
  *((_OWORD *)this + 188) = 0u;
  *(_OWORD *)((char *)this + 3048) = 0u;
  *(_OWORD *)((char *)this + 3064) = 0u;
  *((_OWORD *)this + 194) = 0u;
  *((_OWORD *)this + 193) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *(_OWORD *)((char *)this + 3144) = 0u;
  *((_OWORD *)this + 199) = 0u;
  *((_OWORD *)this + 198) = 0u;
  *(_OWORD *)((char *)this + 3208) = 0u;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *((_OWORD *)this + 204) = 0u;
  *((_OWORD *)this + 203) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *(_OWORD *)((char *)this + 3304) = 0u;
  *((_OWORD *)this + 209) = 0u;
  *((_OWORD *)this + 208) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *((_OWORD *)this + 214) = 0u;
  *((_OWORD *)this + 213) = 0u;
  *(_OWORD *)((char *)this + 3448) = 0u;
  *(_OWORD *)((char *)this + 3464) = 0u;
  *((_OWORD *)this + 22std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *((_OWORD *)this + 219) = 0u;
  *((_OWORD *)this + 218) = 0u;
  *(_OWORD *)((char *)this + 3544) = 0u;
  *(_OWORD *)((char *)this + 356std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  MIL::ParserContext::InitializeFirstSets(this, a2);
  MIL::ParserContext::InitializeMILKeywords(this);
  return this;
}

void sub_20F42D1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  *(void *)(v78 - 96) = a1;
  std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::~__hash_table(v73);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v76);
  uint64_t v79 = (std::__shared_weak_count *)v68[437];
  if (v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v79);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v74);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v72);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a10);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v71);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a11);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v70);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a12);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v75);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a13);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v69);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a14);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v77);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a15);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a22);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a16);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a24);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a17);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a26);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a18);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a28);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a19);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a29);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a20);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a32);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a21);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a34);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a23);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a36);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a25);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a38);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a27);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a41);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a30);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a59);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a31);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a60);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a33);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a61);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a35);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a62);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a37);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a63);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a39);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a64);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a40);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a65);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a42);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a66);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a43);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a67);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a44);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a68);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a45);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 256));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a46);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 248));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a47);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 240));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a48);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 232));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a49);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 224));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a50);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 216));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a51);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 208));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a52);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 200));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a53);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 192));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a54);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 184));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a55);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 176));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a56);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 168));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a57);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 160));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a58);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 152));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 144));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 136));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 128));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 120));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 112));
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(*(void *)(v78 - 104));
  uint64_t v80 = *v68;
  *char v68 = 0;
  if (v80) {
    (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
  }
  _Unwind_Resume(*(_Unwind_Exception **)(v78 - 96));
}

uint64_t MIL::ParserContext::InitializeFirstSets(MIL::ParserContext *this, const MIL::ParserOptions *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  LODWORD(v9) = 16;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 8, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 17;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 48, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 17;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 88, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 1;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 128, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 1;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 168, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 5;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 208, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 248, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 288, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  v7[2] = xmmword_20F913790;
  void v7[3] = unk_20F9137A0;
  v8[0] = xmmword_20F9137B0;
  *(_OWORD *)((char *)v8 + 12) = *(long long *)((char *)&xmmword_20F9137B0 + 12);
  v7[0] = xmmword_20F913770;
  v7[1] = unk_20F913780;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)&v9, (unsigned int *)v7, 23);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 328, &v9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 368, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 408, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 448, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 488, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 528, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 568, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 0;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 608, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 648, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 688, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 1;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 728, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 5;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 768, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 808, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 848, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 888, v5);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v5);
  LODWORD(v9) = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 928, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 968, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1008, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  uint64_t v9 = 0xD00000012;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 2);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1048, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  uint64_t v9 = 0xD00000012;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 2);
  unsigned int v6 = 15;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)&v9, &v6, 1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1088, v5);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v5);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1128, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  uint64_t v9 = 0x1200000036;
  int v10 = 13;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 3);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1168, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1208, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1248, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1288, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1328, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1368, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1408, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1448, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1488, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1528, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1568, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1608, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1648, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1688, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1728, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1768, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1808, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1848, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1888, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1928, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 1968, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 3;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2008, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2048, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2088, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 31;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2128, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 32;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2168, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 33;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2208, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 36;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2248, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 35;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2288, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 34;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2328, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 37;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2368, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 38;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2408, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 39;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2448, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 40;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2488, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 41;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2528, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 42;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2568, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 43;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2608, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 44;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2648, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 45;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2688, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 46;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2728, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 47;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2768, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 48;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2808, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 49;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2848, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 50;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2888, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 51;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2928, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 52;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 2968, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 53;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3008, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 19;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3048, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 19;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3088, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3128, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3168, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3208, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 18;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3248, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  uint64_t v9 = 0x1600000015;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 2);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3288, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 20;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3328, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  LODWORD(v9) = 19;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, (unsigned int *)&v9, 1);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3368, (uint64_t *)v7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign((uint64_t)this + 3408, (uint64_t *)v7);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
}

void sub_20F42E340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v7 - 96);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void MIL::ParserContext::InitializeMILKeywords(MIL::ParserContext *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v5, "tensor_buffer");
  MIL::ParserContext::AddKeyword((uint64_t)this, 0x1Bu, 3, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "circular_buffer");
  MIL::ParserContext::AddKeyword((uint64_t)this, 0x1Du, 3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v3, "pixel_buffer");
  MIL::ParserContext::AddKeyword((uint64_t)this, 0x1Cu, 3, &v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v3.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v2, "state");
  MIL::ParserContext::AddKeyword((uint64_t)this, 0x1Eu, 4, &v2);
  if (SHIBYTE(v2.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v2.__r_.__value_.__l.__data_);
  }
}

void sub_20F42E46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::anonymous namespace'::InitializeBlockFirstSet@<X0>(uint64_t a1@<X8>)
{
  v6[0] = 5;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, v6, 1);
  unsigned int v5 = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, &v5, 1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
}

void sub_20F42E544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MIL::anonymous namespace'::InitializeTypeFirstSet@<X0>(MIL::_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  v9[0] = xmmword_20F913760;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set(a2, (unsigned int *)v9, 4);
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(void *)this + 88))(this) >= 2)
  {
    void v9[2] = xmmword_20F913790;
    v9[3] = unk_20F9137A0;
    v10[0] = xmmword_20F9137B0;
    *(_OWORD *)((char *)v10 + 12) = *(long long *)((char *)&xmmword_20F9137B0 + 12);
    v9[0] = xmmword_20F913770;
    v9[1] = unk_20F913780;
    std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)&v7, (unsigned int *)v9, 23);
    std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(a2, v6);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&v7);
  }
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(void *)this + 88))(this) >= 3)
  {
    uint64_t v7 = 0x1C0000001BLL;
    int v8 = 29;
    std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, (unsigned int *)&v7, 3);
    std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(a2, (uint64_t *)v9);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v9);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  }
  uint64_t result = (*(uint64_t (**)(MIL::_anonymous_namespace_ *))(*(void *)this + 88))(this);
  if ((int)result >= 4)
  {
    LODWORD(v7) = 30;
    std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, (unsigned int *)&v7, 1);
    std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::__move_assign(a2, (uint64_t *)v9);
    std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v9);
    return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  }
  return result;
}

void sub_20F42E764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v9);
  _Unwind_Resume(a1);
}

uint64_t MIL::anonymous namespace'::InitializeOpFirstSet@<X0>(MIL::_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v5 = 54;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, &v5, 1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
}

void sub_20F42E814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t MIL::anonymous namespace'::InitializeTensorValFirstSet@<X0>(uint64_t a1@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  _OWORD v8[2] = xmmword_20F913790;
  void v8[3] = unk_20F9137A0;
  v9[0] = xmmword_20F9137B0;
  *(_OWORD *)((char *)v9 + 12) = *(long long *)((char *)&xmmword_20F9137B0 + 12);
  v8[0] = xmmword_20F913770;
  v8[1] = unk_20F913780;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v5, (unsigned int *)v8, 23);
  long long v6 = xmmword_20F9137CC;
  uint64_t v7 = 0x1600000015;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v8, (unsigned int *)&v6, 6);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v8);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v5);
}

void sub_20F42E914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::anonymous namespace'::InitializeIValueFirstSet@<X0>(uint64_t a1@<X8>)
{
  v6[0] = 7;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v7, v6, 1);
  v5[0] = 1;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v6, v5, 1);
  unsigned int v11 = 5;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set((uint64_t)v5, &v11, 1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v5);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v10);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v9);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v8);
}

void sub_20F42EA18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v2 - 64);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va1);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v2 - 104);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va2);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)va3);
  _Unwind_Resume(a1);
}

void sub_20F42EA74()
{
}

uint64_t MIL::anonymous namespace'::InitializeArgumentFirstSet@<X0>(MIL::_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v6);
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)v7);
}

void sub_20F42EADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void *MIL::anonymous namespace'::InitializeIDFirstSet@<X0>(MIL::_anonymous_namespace_ *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v6 = 54;
  std::unordered_set<MIL::Scanner::TokenType>::unordered_set(a2, &v6, 1);
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(void *)this + 88))(this) <= 2)
  {
    unsigned int v6 = 27;
    std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(a2, &v6, &v6);
  }
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(void *)this + 88))(this) <= 2)
  {
    unsigned int v6 = 29;
    std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(a2, &v6, &v6);
  }
  if ((*(int (**)(MIL::_anonymous_namespace_ *))(*(void *)this + 88))(this) <= 2)
  {
    unsigned int v6 = 28;
    std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(a2, &v6, &v6);
  }
  uint64_t result = (void *)(*(uint64_t (**)(MIL::_anonymous_namespace_ *))(*(void *)this + 88))(this);
  if ((int)result <= 3)
  {
    unsigned int v6 = 30;
    return std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(a2, &v6, &v6);
  }
  return result;
}

void sub_20F42EC64(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::ParserContext::GetOptions(MIL::ParserContext *this)
{
  return *(void *)this;
}

uint64_t MIL::ParserContext::GetProgramFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 8;
}

uint64_t MIL::ParserContext::GetFunctionFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 48;
}

uint64_t MIL::ParserContext::GetFunctionMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 88;
}

uint64_t MIL::ParserContext::GetOpsetBlockFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 128;
}

uint64_t MIL::ParserContext::GetOpsetBlockMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 168;
}

uint64_t MIL::ParserContext::GetBlockInputDeclsFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 208;
}

uint64_t MIL::ParserContext::GetBlockFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 248;
}

uint64_t MIL::ParserContext::GetBlockListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 288;
}

uint64_t MIL::ParserContext::GetDTypeFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 328;
}

uint64_t MIL::ParserContext::GetTypeFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 368;
}

uint64_t MIL::ParserContext::GetIDTypeBindingFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 408;
}

uint64_t MIL::ParserContext::GetIDTypeBindingMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 448;
}

uint64_t MIL::ParserContext::GetOpFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 488;
}

uint64_t MIL::ParserContext::GetOpListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 528;
}

uint64_t MIL::ParserContext::GetValueFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 568;
}

uint64_t MIL::ParserContext::GetValueAssignFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 608;
}

uint64_t MIL::ParserContext::GetTensorValFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 648;
}

uint64_t MIL::ParserContext::GetDictValFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 688;
}

uint64_t MIL::ParserContext::GetListValFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 728;
}

uint64_t MIL::ParserContext::GetTupleValFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 768;
}

uint64_t MIL::ParserContext::GetIValueFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 808;
}

uint64_t MIL::ParserContext::GetRefValueFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 848;
}

uint64_t MIL::ParserContext::GetValueLiteralFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 888;
}

uint64_t MIL::ParserContext::GetDictItemFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 928;
}

uint64_t MIL::ParserContext::GetDictItemListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 968;
}

uint64_t MIL::ParserContext::GetTypeListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1008;
}

uint64_t MIL::ParserContext::GetTypeLengthFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1048;
}

uint64_t MIL::ParserContext::GetDimLengthFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1088;
}

uint64_t MIL::ParserContext::GetTensorShapeFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1128;
}

uint64_t MIL::ParserContext::GetTensorBufferStrideFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1168;
}

uint64_t MIL::ParserContext::GetTensorBufferStridesFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1208;
}

uint64_t MIL::ParserContext::GetTensorBufferRowAlignmentFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1248;
}

uint64_t MIL::ParserContext::GetTensorBufferInterleaveFactorFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1288;
}

uint64_t MIL::ParserContext::GetTensorBufferInterleaveFactorsFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1328;
}

uint64_t MIL::ParserContext::GetCircularBufferStrideFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1368;
}

uint64_t MIL::ParserContext::GetCircularBufferStridesFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1408;
}

uint64_t MIL::ParserContext::GetCircularBufferInterleaveFactorFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1448;
}

uint64_t MIL::ParserContext::GetCircularBufferInterleaveFactorsFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1488;
}

uint64_t MIL::ParserContext::GetCircularBufferWrapDimFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1528;
}

uint64_t MIL::ParserContext::GetCircularBufferSliceWrapDimSizeFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1568;
}

uint64_t MIL::ParserContext::GetPixelBufferBytesPerRowFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1608;
}

uint64_t MIL::ParserContext::GetPixelBufferBytesPerRowVecFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1648;
}

uint64_t MIL::ParserContext::GetPixelBufferNumSlicesFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1688;
}

uint64_t MIL::ParserContext::GetPixelBufferNumSlicesVecFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1728;
}

uint64_t MIL::ParserContext::GetArgumentFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1768;
}

uint64_t MIL::ParserContext::GetArgumentListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1808;
}

uint64_t MIL::ParserContext::GetIDArgumentBindingFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1848;
}

uint64_t MIL::ParserContext::GetIDArgumentBindingMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1888;
}

uint64_t MIL::ParserContext::GetIDValueBindingFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1928;
}

uint64_t MIL::ParserContext::GetIDValueBindingMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 1968;
}

uint64_t MIL::ParserContext::GetAttributesMapFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2008;
}

uint64_t MIL::ParserContext::GetIDTypeBindingListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2048;
}

uint64_t MIL::ParserContext::GetIDListFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2088;
}

uint64_t MIL::ParserContext::GetDTYPE_BOOLFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2128;
}

uint64_t MIL::ParserContext::GetDTYPE_STRINGFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2168;
}

uint64_t MIL::ParserContext::GetDTYPE_BF16FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2208;
}

uint64_t MIL::ParserContext::GetDTYPE_FP8E4M3FNFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2248;
}

uint64_t MIL::ParserContext::GetDTYPE_FP8E5M2FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2288;
}

uint64_t MIL::ParserContext::GetDTYPE_FP16FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2328;
}

uint64_t MIL::ParserContext::GetDTYPE_FP32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2368;
}

uint64_t MIL::ParserContext::GetDTYPE_FP64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2408;
}

uint64_t MIL::ParserContext::GetDTYPE_INT4FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2448;
}

uint64_t MIL::ParserContext::GetDTYPE_INT8FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2488;
}

uint64_t MIL::ParserContext::GetDTYPE_INT16FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2528;
}

uint64_t MIL::ParserContext::GetDTYPE_INT32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2568;
}

uint64_t MIL::ParserContext::GetDTYPE_INT64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2608;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT1FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2648;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT2FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2688;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT3FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2728;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT4FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2768;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT6FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2808;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT8FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2848;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT16FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2888;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2928;
}

uint64_t MIL::ParserContext::GetDTYPE_UINT64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 2968;
}

uint64_t MIL::ParserContext::GetDTYPE_ANYFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3008;
}

uint64_t MIL::ParserContext::GetFP32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3048;
}

uint64_t MIL::ParserContext::GetFP64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3088;
}

uint64_t MIL::ParserContext::GetUINT8FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3128;
}

uint64_t MIL::ParserContext::GetINT32FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3168;
}

uint64_t MIL::ParserContext::GetINT64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3208;
}

uint64_t MIL::ParserContext::GetUINT64FirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3248;
}

uint64_t MIL::ParserContext::GetBOOLFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3288;
}

uint64_t MIL::ParserContext::GetSTRINGFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3328;
}

uint64_t MIL::ParserContext::GetSYNTAX_VERSIONFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3368;
}

uint64_t MIL::ParserContext::GetIDFirstSet(MIL::ParserContext *this)
{
  return (uint64_t)this + 3408;
}

void MIL::ParserContext::SetConstexprVariableValue(uint64_t a1, long long *a2, uint64_t *a3)
{
  uint64_t v8 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3448, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v8);
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 + 6);
  *((void *)v4 + 5) = v6;
  *((void *)v4 + 6) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

unsigned __int8 *MIL::ParserContext::GetConstexprVariableValue@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 3448), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

std::string *MIL::ParserContext::AddKeyword(uint64_t a1, unsigned int a2, int a3, const std::string *a4)
{
  unsigned int v8 = a2;
  uint64_t v9 = &v8;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(a1 + 3504, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 5) = a3;
  uint64_t v9 = &v8;
  uint64_t v6 = (std::string *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(a1 + 3544, &v8, (uint64_t)&std::piecewise_construct, &v9);
  return std::string::operator=(v6 + 1, a4);
}

std::string *MIL::ParserContext::GetFallbackIDForKeyword@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, std::string *a4@<X8>)
{
  unsigned int v10 = a2;
  a4->__r_.__value_.__s.__data_[0] = 0;
  a4[1].__r_.__value_.__s.__data_[0] = 0;
  uint64_t v7 = a1 + 3504;
  uint64_t result = (std::string *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>((void *)(a1 + 3504), &v10);
  if (result)
  {
    unsigned int v11 = &v10;
    uint64_t result = (std::string *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(v7, &v10, (uint64_t)&std::piecewise_construct, &v11);
    if (SHIDWORD(result->__r_.__value_.__r.__words[2]) > a3)
    {
      unsigned int v11 = &v10;
      uint64_t v9 = (const std::string *)std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(a1 + 3544, &v10, (uint64_t)&std::piecewise_construct, &v11);
      return std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(a4, v9 + 1);
    }
  }
  return result;
}

void sub_20F42F150(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string&,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

uint64_t MIL::ParserContext::GetKeywordToMinSyntaxVersionMap(MIL::ParserContext *this)
{
  return (uint64_t)this + 3504;
}

void MIL::ParserContext::SetCurrentOperator(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 3488) = v2;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 3496);
  *(void *)(a1 + 3496) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t MIL::ParserContext::GetCurrentOperator@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 3496);
  *a2 = *(void *)(this + 3488);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t std::unordered_set<MIL::Scanner::TokenType>::unordered_set(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 4 * a3;
    do
    {
      std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a1, a2, a2);
      ++a2;
      v5 -= 4;
    }
    while (v5);
  }
  return a1;
}

void sub_20F42F29C(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unsigned int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unsigned int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unsigned int v10 = operator new(0x18uLL);
  *unsigned int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unsigned int v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *unsigned int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_20F42F4BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *MIL::anonymous namespace'::Combine@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  return std::__set_union[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::insert_iterator<std::unordered_set<MIL::Scanner::TokenType>>>(*(void **)(a1 + 16), 0, *(unsigned int **)(a2 + 16), 0, a3, 0, v4);
}

void sub_20F42F52C(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__set_union[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::__hash_const_iterator<std::__hash_node<MIL::Scanner::TokenType,void *> *>,std::insert_iterator<std::unordered_set<MIL::Scanner::TokenType>>>@<X0>(void *result@<X0>, void *a2@<X1>, unsigned int *a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  unsigned int v10 = result;
  if (result == a2)
  {
LABEL_10:
    if (a3 == a4)
    {
      a4 = a3;
      goto LABEL_17;
    }
    do
    {
      uint64_t result = std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a5, a3 + 4, a3 + 4);
      a3 = *(unsigned int **)a3;
    }
    while (a3 != a4);
  }
  else
  {
    while (a3 != a4)
    {
      int v13 = a3[4];
      int v14 = *((_DWORD *)v10 + 4);
      if (v13 >= v14)
      {
        if (v14 >= v13) {
          a3 = *(unsigned int **)a3;
        }
        uint64_t result = std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a5, (unsigned int *)v10 + 4, (_DWORD *)v10 + 4);
        unsigned int v10 = (void *)*v10;
      }
      else
      {
        uint64_t result = std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a5, a3 + 4, a3 + 4);
        a3 = *(unsigned int **)a3;
      }
      if (v10 == a2)
      {
        a6 = *result;
        unsigned int v10 = a2;
        goto LABEL_10;
      }
    }
    do
    {
      uint64_t result = std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType const&>(a5, (unsigned int *)v10 + 4, (_DWORD *)v10 + 4);
      unsigned int v10 = (void *)*v10;
    }
    while (v10 != a2);
    unsigned int v10 = a2;
  }
  a6 = *result;
LABEL_17:
  *a7 = v10;
  a7[1] = a4;
  a7[2] = a5;
  a7[3] = a6;
  return result;
}

void *std::__hash_table<MIL::Scanner::TokenType,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,std::allocator<MIL::Scanner::TokenType>>::__emplace_unique_key_args<MIL::Scanner::TokenType,MIL::Scanner::TokenType>(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      unsigned int v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          unsigned int v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  unsigned int v10 = operator new(0x18uLL);
  *unsigned int v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  uint64_t v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unsigned int v10 = *v19;
LABEL_38:
    *uint64_t v19 = v10;
    goto LABEL_39;
  }
  *unsigned int v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v20 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    uint64_t v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_20F42F854(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 47) < 0) {
        operator delete(v2[3]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unint64_t v11 = operator new(0x18uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unint64_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_20F42FB00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::__emplace_unique_key_args<MIL::Scanner::TokenType,std::piecewise_construct_t const&,std::tuple<MIL::Scanner::TokenType const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  float v13 = (void *)(a1 + 16);
  unint64_t v11 = operator new(0x30uLL);
  *unint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  v11[4] = 0;
  void v11[5] = 0;
  void v11[3] = 0;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    BOOL v16 = 1;
    if (v8 >= 3) {
      BOOL v16 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v8);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v19);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v20 = *(void *)a1;
  unint64_t v21 = *(void **)(*(void *)a1 + 8 * v4);
  if (v21)
  {
    *unint64_t v11 = *v21;
LABEL_38:
    *unint64_t v21 = v11;
    goto LABEL_39;
  }
  *unint64_t v11 = *v13;
  *float v13 = v11;
  *(void *)(v20 + 8 * v4) = v13;
  if (*v11)
  {
    unint64_t v22 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8) {
        v22 %= v8;
      }
    }
    else
    {
      v22 &= v8 - 1;
    }
    unint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_20F42FD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 47) < 0) {
      operator delete(__p[3]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t MIL::ParseError::ParseError(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v8 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  MIL::ParseResult::ParseResult(v9, &v8, a4, __p);
  MIL::ParseError::ParseError(a1, (uint64_t)v9);
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)v9);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  return a1;
}

{
  void *__p[2];
  uint64_t v7;
  long long v8;
  unsigned char v9[56];

  long long v8 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  MIL::ParseResult::ParseResult(v9, &v8, a4, __p);
  MIL::ParseError::ParseError(a1, (uint64_t)v9);
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)v9);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v8 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v8 + 1));
  }
  return a1;
}

void sub_20F42FF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::ParseError::ParseError(uint64_t a1, uint64_t a2)
{
  MIL::MILResult::GetMessageWithLocation((const std::string::value_type **)a2, &__p);
  MIL::MILErrorWithResult::MILErrorWithResult((std::runtime_error *)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = &unk_26C25A1B0;
  *(void *)(a1 + 16) = &unk_26C25A170;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v4 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = v4;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a1 + 16) = &unk_26C25A218;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 48);
  return a1;
}

void sub_20F43002C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F4300E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::ParseError::GetReason(MIL::ParseError *this)
{
  return MIL::ParseResult::GetReason((MIL::ParseError *)((char *)this + 16));
}

uint64_t MIL::ParseError::GetResult(MIL::ParseError *this)
{
  return (uint64_t)this + 16;
}

uint64_t MIL::ParseError::GetParseResult(MIL::ParseError *this)
{
  return (uint64_t)this + 16;
}

void MIL::ParseError::~ParseError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26C25A1B0;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);

  std::runtime_error::~runtime_error(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26C25A1B0;
  MIL::ParseResult::~ParseResult((MIL::ParseResult *)&this[1]);
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x21056C700);
}

void MIL::ParseResult::~ParseResult(void **this)
{
  MIL::MILResult::~MILResult(this);

  JUMPOUT(0x21056C700);
}

MIL::MILResult *MIL::ParseResult::ParseResult(MIL::ParseResult *this)
{
  uint64_t result = MIL::MILResult::MILResult(this);
  *(void *)uint64_t result = &unk_26C25A218;
  *((_DWORD *)result + 12) = 2;
  return result;
}

{
  MIL::MILResult *result;

  uint64_t result = MIL::MILResult::MILResult(this);
  *(void *)uint64_t result = &unk_26C25A218;
  *((_DWORD *)result + 12) = 2;
  return result;
}

uint64_t MIL::ParseResult::ParseResult(uint64_t a1, long long *a2, int a3, uint64_t a4)
{
  long long v9 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a4;
  uint64_t v8 = *(void *)(a4 + 16);
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  MIL::MILResult::MILResult(a1, (uint64_t)&v9, (__n128 *)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  *(void *)a1 = &unk_26C25A218;
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

void sub_20F430344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::ParseResult::GetReason(MIL::ParseResult *this)
{
  return *((unsigned int *)this + 12);
}

BOOL MIL::ParseResult::IsGood(MIL::ParseResult *this)
{
  return *((_DWORD *)this + 12) == 2;
}

void *MIL::ParserOptions::ParserOptions(void *this)
{
  *this = &unk_26C25A260;
  return this;
}

void MIL::ParserOptions::Make(MIL::ParserOptions *this)
{
}

void ***std::unique_ptr<anonymous namespace'::ParserOptionsImpl>::~unique_ptr[abi:ne180100](void ***a1)
{
  int8x8_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MEMORY[0x21056C700]();
  }
  return a1;
}

void anonymous namespace'::ParserOptionsImpl::~ParserOptionsImpl(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

void anonymous namespace'::ParserOptionsImpl::Clone(_anonymous_namespace_::ParserOptionsImpl *this)
{
}

void sub_20F4305EC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  MEMORY[0x21056C700](v1, 0x1093C400CF8972DLL);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::ParserOptionsImpl::GetModelFilePath(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return (uint64_t)this + 32;
}

__n128 anonymous namespace'::ParserOptionsImpl::SetModelFilePath(uint64_t a1, std::string *this, int a3)
{
  v17[2] = *MEMORY[0x263EF8340];
  if (!a3) {
    goto LABEL_14;
  }
  memset(&__p, 0, sizeof(__p));
  std::string::size_type v5 = std::string::rfind(this, 47, 0xFFFFFFFFFFFFFFFFLL);
  if (v5 == -1)
  {
    unint64_t v6 = "./";
  }
  else
  {
    if (v5)
    {
      std::string::basic_string(&v14, this, 0, v5, (std::allocator<char> *)&v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v14;
      goto LABEL_10;
    }
    unint64_t v6 = "/";
  }
  MEMORY[0x21056C240](&__p, v6);
LABEL_10:
  v17[0] = __p.__r_.__value_.__l.__size_;
  std::string::size_type v7 = __p.__r_.__value_.__r.__words[0];
  *(void *)((char *)v17 + 7) = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
  char v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a1 + 31) < 0)
  {
    operator delete(*(void **)(a1 + 8));
    int v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    uint64_t v11 = v17[0];
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v11;
    *(void *)(a1 + 23) = *(void *)((char *)v17 + 7);
    *(unsigned char *)(a1 + 3std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
    if (v10 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v9 = v17[0];
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 23) = *(void *)((char *)v17 + 7);
    *(unsigned char *)(a1 + 3std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
  }
LABEL_14:
  unint64_t v12 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v12);
  }
  __n128 result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(void *)(a1 + 48) = *((void *)&this->__r_.__value_.__l + 2);
  *(__n128 *)unint64_t v12 = result;
  *((unsigned char *)&this->__r_.__value_.__s + 23) = 0;
  this->__r_.__value_.__s.__data_[0] = 0;
  return result;
}

void sub_20F4307A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::ParserOptionsImpl::GetModelPath(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return (uint64_t)this + 8;
}

__n128 anonymous namespace'::ParserOptionsImpl::SetModelPath(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t anonymous namespace'::ParserOptionsImpl::GetValidateProgram(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t anonymous namespace'::ParserOptionsImpl::SetValidateProgram(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 64)) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(unsigned char *)(this + 56) = a2;
  return this;
}

void sub_20F430888(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::ParserOptionsImpl::GetIgnoreUnregisteredSpecializations(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return *((unsigned __int8 *)this + 57);
}

uint64_t anonymous namespace'::ParserOptionsImpl::SetIgnoreUnregisteredSpecializations(uint64_t this, char a2)
{
  *(unsigned char *)(this + 57) = a2;
  return this;
}

uint64_t anonymous namespace'::ParserOptionsImpl::GetDefaultSyntaxVersion(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t anonymous namespace'::ParserOptionsImpl::SetDefaultSyntaxVersion(uint64_t result, int a2)
{
  *(_DWORD *)(result + 6std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = a2;
  return result;
}

uint64_t anonymous namespace'::ParserOptionsImpl::GetIgnoreWeightFile(_anonymous_namespace_::ParserOptionsImpl *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t anonymous namespace'::ParserOptionsImpl::SetIgnoreWeightFile(uint64_t this, int a2)
{
  if (*(unsigned char *)(this + 56)) {
    BOOL v2 = a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(unsigned char *)(this + 64) = a2;
  return this;
}

void sub_20F43092C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Proto::ParseBlock(MIL::Proto *this)
{
}

void sub_20F430FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18) {
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Proto::ParseFunction(MIL::Proto *this, MIL::MILContext *a2, const CoreML::Specification::MILSpec::Function *a3, MIL::ParserContext *a4)
{
}

void sub_20F43180C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,char *a44)
{
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a43, a44);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v45 - 152, *(void **)(v45 - 144));
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::begin@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  BOOL v2 = *(void **)(result + 16);
  unint64_t v3 = v2[3];
  unint64_t v4 = v2[1];
  if (v4 <= v3)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v5 = v2[4];
    while (1)
    {
      uint64_t v6 = *(void *)(v5 + 8 * v3);
      if (v6) {
        break;
      }
      if (v4 == ++v3)
      {
        uint64_t v6 = 0;
        unint64_t v3 = v2[1];
        goto LABEL_9;
      }
    }
    if (v6 == *(void *)(v5 + 8 * (v3 ^ 1))) {
      uint64_t v6 = *(void *)(*(void *)v6 + 32);
    }
  }
LABEL_9:
  *a2 = v6;
  a2[1] = v2;
  a2[2] = v3;
  return result;
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::operator++(void *a1)
{
  uint64_t v2 = *(void *)(*a1 + 32);
  if (v2) {
    goto LABEL_2;
  }
  uint64_t v11 = 0;
  if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::revalidate_if_necessary((uint64_t)a1, (uint64_t *)&v11))
  {
    unint64_t v3 = a1[2] + 1;
LABEL_13:
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::SearchFrom(a1, v3);
    return a1;
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = *(void *)(*(void *)(a1[1] + 32) + 8 * v4);
  uint64_t v6 = (uint64_t)v11;
  std::string::size_type v7 = (void *)v11[1];
  if (v7)
  {
    do
    {
      char v8 = v7;
      std::string::size_type v7 = (void *)*v7;
    }
    while (v7);
  }
  else
  {
    do
    {
      char v8 = *(void **)(v6 + 16);
      BOOL v9 = *v8 == v6;
      uint64_t v6 = (uint64_t)v8;
    }
    while (!v9);
  }
  uint64_t v11 = v8;
  if (v8 == (void *)(v5 + 8))
  {
    unint64_t v3 = v4 + 2;
    goto LABEL_13;
  }
  uint64_t v2 = v8[4];
LABEL_2:
  *a1 = v2;
  return a1;
}

BOOL google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::revalidate_if_necessary(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(unsigned __int8 **)a1;
  uint64_t v6 = *(void *)(a1 + 16) & (*(void *)(v4 + 8) - 1);
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(v4 + 32);
  uint64_t v8 = *(void *)(v7 + 8 * v6);
  if ((unsigned __int8 *)v8 == v5) {
    return 1;
  }
  if (v8 && v8 != *(void *)(v7 + 8 * (v6 ^ 1)))
  {
    while (1)
    {
      uint64_t v8 = *(void *)(v8 + 32);
      if (!v8) {
        break;
      }
      if ((unsigned __int8 *)v8 == v5) {
        return 1;
      }
    }
  }
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper(v4, v5, a2, &v13);
  uint64_t v9 = v14;
  *(void *)(a1 + 16) = v14;
  uint64_t v10 = *(void *)(*(void *)(a1 + 8) + 32);
  uint64_t v11 = *(void *)(v10 + 8 * v9);
  return !v11 || v11 != *(void *)(v10 + 8 * (v9 ^ 1));
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::iterator_base<google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::KeyValuePair const>::SearchFrom(void *result, unint64_t a2)
{
  *__n128 result = 0;
  uint64_t v2 = result[1];
  unint64_t v3 = *(void *)(v2 + 8);
  if (v3 <= a2)
  {
LABEL_6:
    result[2] = a2;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 + 32);
    while (1)
    {
      uint64_t v5 = *(void *)(v4 + 8 * a2);
      if (v5) {
        break;
      }
      if (v3 == ++a2)
      {
        a2 = v3;
        goto LABEL_6;
      }
    }
    uint64_t v6 = *(void *)(v4 + 8 * (a2 ^ 1));
    result[2] = a2;
    if (v5 == v6) {
      *__n128 result = *(void *)(*(void *)v5 + 32);
    }
    else {
      *__n128 result = v5;
    }
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber(a1, a2);
  unint64_t v9 = result;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(void *)(v10 + 8 * result);
  if (v11)
  {
    if (v11 != *(void *)(v10 + 8 * (result ^ 1)))
    {
      while (1)
      {
        uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v14, (unsigned __int8 *)v11, a2);
        if (result) {
          break;
        }
        uint64_t v11 = *(void *)(v11 + 32);
        if (!v11) {
          goto LABEL_10;
        }
      }
      *a4 = v11;
      goto LABEL_12;
    }
    unint64_t v9 = result & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v12 = *(void *)(v10 + 8 * (result & 0xFFFFFFFFFFFFFFFELL));
    uint64_t v13 = (const void **)a2;
    uint64_t result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::MapAllocator<std::string *>>::find<std::string *>(v12, &v13);
    if (v12 + 8 != result)
    {
      if (a3) {
        *a3 = result;
      }
      *a4 = *(void *)(result + 32);
LABEL_12:
      a4[1] = a1;
      a4[2] = v9;
      goto LABEL_13;
    }
  }
LABEL_10:
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
LABEL_13:
  a4[3] = v9;
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber(uint64_t a1, unsigned char *a2)
{
  if ((char)a2[23] >= 0) {
    uint64_t v2 = a2;
  }
  else {
    uint64_t v2 = *(unsigned char **)a2;
  }
  char v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = 0;
    uint64_t v5 = v2 + 1;
    do
    {
      uint64_t v4 = 5 * v4 + v3;
      int v6 = *v5++;
      char v3 = v6;
    }
    while (v6);
  }
  else
  {
    uint64_t v4 = 0;
  }
  return (*(void *)(a1 + 8) - 1) & (*(void *)(a1 + 16) + v4);
}

uint64_t std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::MapAllocator<std::string *>>::find<std::string *>(uint64_t a1, const void ***a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 24;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, *(const void ***)(v3 + 32), *a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, *a2, *(const void ***)(v6 + 32))) {
    return v2;
  }
  return v6;
}

uint64_t MIL::Proto::ParseAttributes@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::begin(a1, v4);
  if (v4[0])
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid attribute name");
    MIL::Util::ValidateIsIdentifier();
  }
  return result;
}

void sub_20F431F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v16);
  _Unwind_Resume(a1);
}

void MIL::Proto::ParseOperation(MIL::Proto *this, MIL::MILContext *a2, const MIL::IROpset *a3, const CoreML::Specification::MILSpec::Operation *a4, MIL::ParserContext *a5)
{
  uint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  std::vector<std::shared_ptr<MIL::IRBlock>>::reserve(&v30, *((int *)a3 + 20));
  uint64_t v9 = *((void *)a3 + 11);
  if (v9) {
    uint64_t v10 = (const MIL::IROpset **)(v9 + 8);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *((int *)a3 + 20);
  if (v11)
  {
    uint64_t v12 = 8 * v11;
    do
    {
      MIL::Proto::ParseBlock((uint64_t *)&__p, this, a2, *v10, a4, v8);
      if (__p) {
        operator new();
      }
      std::string __p = 0;
      uint64_t v13 = v31;
      if ((unint64_t)v31 >= v32)
      {
        uint64_t v15 = ((uint64_t)v31 - v30) >> 4;
        unint64_t v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v17 = v32 - v30;
        if ((uint64_t)(v32 - v30) >> 3 > v16) {
          unint64_t v16 = v17 >> 3;
        }
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v18 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v16;
        }
        std::string v35 = &v32;
        size_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v32, v18);
        uint64_t v20 = &v19[16 * v15];
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
        v33.__r_.__value_.__l.__size_ = (std::string::size_type)v20;
        uint64_t v34 = &v19[16 * v21];
        *(void *)uint64_t v20 = 0;
        *((void *)v20 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)(v20 + 16);
        std::vector<std::shared_ptr<MIL::IRBlock>>::__swap_out_circular_buffer(&v30, &v33);
        char v14 = v31;
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&v33.__r_.__value_.__l.__data_);
      }
      else
      {
        *unint64_t v31 = 0;
        v13[1] = 0;
        char v14 = v13 + 2;
      }
      unint64_t v31 = v14;
      unint64_t v22 = __p;
      std::string __p = 0;
      if (v22) {
        (*(void (**)(void *))(*(void *)v22 + 8))(v22);
      }
      ++v10;
      v12 -= 8;
    }
    while (v12);
  }
  std::operator+<char>();
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper(*((void *)a3 + 15), (unsigned __int8 *)&__p, 0, &v33);
  std::string::size_type v23 = v33.__r_.__value_.__r.__words[0];
  if (v26 < 0)
  {
    operator delete(__p);
    if (v23)
    {
LABEL_22:
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v28, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
      }
      else {
        std::string v28 = v29;
      }
      MIL::OperationNameLocation::Make();
    }
  }
  else if (v33.__r_.__value_.__r.__words[0])
  {
    goto LABEL_22;
  }
  std::operator+<char>();
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  std::string v29 = v33;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v27, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  }
  else {
    std::string v27 = v29;
  }
  MIL::OperationNameLocation::Make();
}

void sub_20F433298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,char a58)
{
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a39);
  }
  if (a56 < 0) {
    operator delete(__p);
  }
  a38 = (uint64_t)&a58;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      size_t v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + 8) = v17;
}

void sub_20F433A50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F433A58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<MIL::OperationNameLocation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::OperationNameLocation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::OperationNameLocation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Proto::ParseProgram(long long *a1)
{
  long long v1 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
}

void sub_20F433B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::ParseProgramImpl(MIL::UnknownLocation *a1)
{
}

void sub_20F433F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  __cxa_free_exception(v47);
  MIL::ParserContext::~ParserContext((MIL::ParserContext *)&a46);
  uint64_t v49 = *a9;
  *a9 = 0;
  if (v49) {
    (*(void (**)(uint64_t))(*(void *)v49 + 8))(v49);
  }
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  _Unwind_Resume(a1);
}

void sub_20F434068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (a43) {
    MIL::Builder::BlockBuilder::BlockBuilderImpl::BlockBuilderImpl(a43);
  }
  JUMPOUT(0x20F43428CLL);
}

void sub_20F434088(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,long long a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a17);
  if (a2 == 2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  if (a2 == 1)
  {
    uint64_t v45 = __cxa_begin_catch(a1);
    exception = __cxa_allocate_exception(0x48uLL);
    *((void *)&a27 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v47 = (char *)(*(uint64_t (**)(void *))(*(void *)v45 + 16))(v45);
    std::string::basic_string[abi:ne180100]<0>(&a24, v47);
    MIL::ParseError::ParseError((uint64_t)exception, &a27, (uint64_t)&a24, 300);
  }
  MIL::ParserContext::~ParserContext((MIL::ParserContext *)&a42);
  uint64_t v48 = *a9;
  *a9 = 0;
  if (v48) {
    (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
  }
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(a1);
}

void sub_20F4341FC(_Unwind_Exception *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,...)
{
  va_start(va, a38);
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (v39) {
    __cxa_free_exception(v40);
  }
  __cxa_end_catch();
  MIL::ParserContext::~ParserContext((MIL::ParserContext *)va);
  uint64_t v42 = *a2;
  *a2 = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  _Unwind_Resume(a1);
}

void sub_20F43423C()
{
}

void MIL::Proto::ParseProgram(long long *a1, void *a2)
{
  if (!*(_DWORD *)((char *)a2 + *(void *)(*a2 - 24) + 32))
  {
    google::protobuf::io::IstreamInputStream::IstreamInputStream(v15);
    v7[0] = 0;
    v7[1] = 0;
    v7[2] = v15;
    v8[0] = 0;
    *(void *)((char *)v8 + 6) = 0;
    _OWORD v8[2] = 0x7FFFFFFFLL;
    int v9 = 0x7FFFFFFF;
    int v10 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
    int v11 = google::protobuf::io::CodedInputStream::default_recursion_limit_;
    char v12 = 1;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    google::protobuf::io::CodedInputStream::Refresh((google::protobuf::io::CodedInputStream *)v7);
    CoreML::Specification::MILSpec::Program::Program((CoreML::Specification::MILSpec::Program *)v6);
    if (google::protobuf::MessageLite::ParseFromCodedStream((google::protobuf::MessageLite *)v6, (google::protobuf::io::CodedInputStream *)v7))
    {
      long long v5 = *a1;
      *(void *)a1 = 0;
      *((void *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    }
    exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x48uLL);
    MIL::UnknownLocation::Make(exception);
  }
  uint64_t v3 = (MIL::UnknownLocation *)__cxa_allocate_exception(0x48uLL);
  MIL::UnknownLocation::Make(v3);
}

void sub_20F434520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a17) {
    (*(void (**)(uint64_t))(*(void *)a17 + 8))(a17);
  }
  __cxa_free_exception(v33);
  CoreML::Specification::MILSpec::Program::~Program((CoreML::Specification::MILSpec::Program *)&a20);
  google::protobuf::io::CodedInputStream::~CodedInputStream((google::protobuf::io::CodedInputStream *)&a33);
  google::protobuf::io::IstreamInputStream::~IstreamInputStream((google::protobuf::io::IstreamInputStream *)(v34 - 168));
  _Unwind_Resume(a1);
}

void MIL::Proto::ParseProgram(uint64_t a1)
{
  v3[72] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v3);
  long long v2 = *(_OWORD *)a1;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  MIL::Proto::ParseProgram(&v2, v3);
}

void sub_20F4347D8(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  uint64_t v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x21056C320](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_20F434998(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x21056C620](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x21056C330](a1 + 2);
  std::istream::~istream();
  MEMORY[0x21056C620](a1 + 53);
  return a1;
}

void MIL::ParserContext::~ParserContext(MIL::ParserContext *this)
{
  std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,std::string>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,std::string>>>::~__hash_table((uint64_t)this + 3544);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3504);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 437);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 3448);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3408);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3368);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3328);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3288);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3248);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3208);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3168);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3128);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3088);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3048);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 3008);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2968);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2928);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2888);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2848);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2808);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2768);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2728);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2688);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2648);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2608);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2568);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2528);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2488);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2448);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2408);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2368);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2328);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2288);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2248);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2208);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2168);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2128);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2088);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2048);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 2008);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1968);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1928);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1888);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1848);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1808);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1768);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1728);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1688);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1648);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1608);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1568);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1528);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1488);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1448);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1408);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1368);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1328);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1288);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1248);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1208);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1168);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1128);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1088);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1048);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 1008);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 968);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 928);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 888);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 848);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 808);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 768);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 728);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 688);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 648);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 608);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 568);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 528);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 488);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 448);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 408);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 368);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 328);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 288);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table((uint64_t)this + 8);
  uint64_t v3 = *(void *)this;
  *(void *)this = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

uint64_t MIL::Proto::ParseValue@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, MIL::ParserContext *a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  if (*(void *)(a2 + 24)) {
    int v10 = *(uint64_t **)(a2 + 24);
  }
  else {
    int v10 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
  }
  int v11 = (MIL::IRValueType *)MIL::Proto::ParseValueType(a1, (uint64_t)v10, (uint64_t)a3, a4);
  char v12 = v11;
  int v13 = *(_DWORD *)(a2 + 44);
  if (v13 != 3)
  {
    if (v13 == 5)
    {
      uint64_t v14 = *(void *)(a2 + 32);
      if ((*(uint64_t (**)(MIL::IRValueType *))(*(void *)v11 + 24))(v11))
      {
        uint64_t v15 = *(long long **)(v14 + 16);
        if (*((char *)v15 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v74, *(const std::string::value_type **)v15, *((void *)v15 + 1));
        }
        else
        {
          long long v16 = *v15;
          *(void *)&v74[16] = *((void *)v15 + 2);
          *(_OWORD *)uint64_t v74 = v16;
        }
        uint64_t Options = MIL::ParserContext::GetOptions(a3);
        uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 40))(Options);
        MIL::Util::ApplyModelPath((uint64_t)v74, v22, a4);
        MIL::IRValueType::AsTensorType(v12);
        uint64_t v23 = MIL::ParserContext::GetOptions(a3);
        (*(void (**)(uint64_t))(*(void *)v23 + 104))(v23);
        MIL::IRTensorValueType::MakeValueFromBlobFile();
      }
      exception = __cxa_allocate_exception(0x48uLL);
      uint64_t v62 = a4[1];
      *(void *)&long long v72 = *a4;
      *((void *)&v72 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v62;
      if (v62) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v74, "Only tensor values can be read from a file.");
      MIL::ParseError::ParseError((uint64_t)exception, &v72, (uint64_t)v74, 114);
    }
    uint64_t v59 = __cxa_allocate_exception(0x48uLL);
    uint64_t v60 = a4[1];
    *(void *)&long long v67 = *a4;
    *((void *)&v67 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v60;
    if (v60) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "Cannot parse null value");
    MIL::ParseError::ParseError((uint64_t)v59, &v67, (uint64_t)v66, 301);
  }
  uint64_t v17 = *(void *)(a2 + 32);
  switch(*(_DWORD *)(v17 + 28))
  {
    case 1:
      uint64_t v18 = *(void *)(v17 + 16);
      uint64_t v19 = MIL::IRValueType::AsTensorType(v11);
      uint64_t v20 = *(void *)v74;
      *a5 = *(void *)v74;
      if (v20) {
        operator new();
      }
      uint64_t result = 0;
      a5[1] = 0;
      return result;
    case 2:
      uint64_t v24 = *(void *)(v17 + 16);
      uint64_t v65 = MIL::IRValueType::AsTupleType(v11);
      float v25 = (void *)(*(uint64_t (**)(void))(*(void *)v65 + 64))();
      v73[0] = 0;
      long long v72 = 0uLL;
      std::vector<std::shared_ptr<MIL::IRValue const>>::reserve((uint64_t *)&v72, (uint64_t)(v25[1] - *v25) >> 3);
      if (*(int *)(v24 + 24) >= 1)
      {
        uint64_t v26 = 0;
        do
        {
          MIL::Proto::ParseValue(&v71, a1, *(void *)(*(void *)(v24 + 32) + 8 * v26 + 8), a3, a4);
          uint64_t v27 = *((void *)&v72 + 1);
          if (*((void *)&v72 + 1) >= v73[0])
          {
            uint64_t v29 = (uint64_t)(*((void *)&v72 + 1) - v72) >> 4;
            if ((unint64_t)(v29 + 1) >> 60) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v30 = (uint64_t)(v73[0] - v72) >> 3;
            if (v30 <= v29 + 1) {
              unint64_t v30 = v29 + 1;
            }
            if (v73[0] - (void)v72 >= 0x7FFFFFFFFFFFFFF0uLL) {
              unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v31 = v30;
            }
            uint64_t v75 = v73;
            unint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v73, v31);
            std::string v33 = &v32[16 * v29];
            *(void *)uint64_t v74 = v32;
            *(void *)&v74[8] = v33;
            *(void *)&v74[24] = &v32[16 * v34];
            *(_OWORD *)std::string v33 = v71;
            long long v71 = 0uLL;
            *(void *)&v74[16] = v33 + 16;
            std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer((uint64_t *)&v72, v74);
            uint64_t v28 = *((void *)&v72 + 1);
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)v74);
          }
          else
          {
            **((_OWORD **)&v72 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v71;
            uint64_t v28 = v27 + 16;
          }
          *((void *)&v72 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v28;
          ++v26;
        }
        while (v26 < *(int *)(v24 + 24));
      }
      MIL::IRTupleValueType::MakeValue();
    case 3:
      uint64_t v45 = *(void *)(v17 + 16);
      MIL::IRValueType::AsListType(v11);
      long long v72 = 0uLL;
      v73[0] = 0;
      std::vector<std::shared_ptr<MIL::IRValue const>>::reserve((uint64_t *)&v72, *(int *)(v45 + 24));
      uint64_t v46 = *(void *)(v45 + 32);
      if (v46) {
        uint64_t v47 = (void *)(v46 + 8);
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v48 = *(int *)(v45 + 24);
      if (v48)
      {
        uint64_t v49 = 8 * v48;
        do
        {
          MIL::Proto::ParseValue(&v71, a1, *v47, a3, a4);
          uint64_t v50 = *((void *)&v72 + 1);
          if (*((void *)&v72 + 1) >= v73[0])
          {
            uint64_t v52 = (uint64_t)(*((void *)&v72 + 1) - v72) >> 4;
            if ((unint64_t)(v52 + 1) >> 60) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v53 = (uint64_t)(v73[0] - v72) >> 3;
            if (v53 <= v52 + 1) {
              unint64_t v53 = v52 + 1;
            }
            if (v73[0] - (void)v72 >= 0x7FFFFFFFFFFFFFF0uLL) {
              unint64_t v54 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v54 = v53;
            }
            uint64_t v75 = v73;
            uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)v73, v54);
            int v56 = &v55[16 * v52];
            *(void *)uint64_t v74 = v55;
            *(void *)&v74[8] = v56;
            *(void *)&v74[24] = &v55[16 * v57];
            *(_OWORD *)int v56 = v71;
            long long v71 = 0uLL;
            *(void *)&v74[16] = v56 + 16;
            std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer((uint64_t *)&v72, v74);
            uint64_t v51 = *((void *)&v72 + 1);
            std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)v74);
          }
          else
          {
            **((_OWORD **)&v72 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v71;
            uint64_t v51 = v50 + 16;
          }
          *((void *)&v72 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v51;
          ++v47;
          v49 -= 8;
        }
        while (v49);
      }
      MIL::IRListValueType::MakeValue();
    case 4:
      uint64_t v35 = *(void *)(v17 + 16);
      MIL::IRValueType::AsDictionaryType(v11);
      memset(v74, 0, sizeof(v74));
      LODWORD(v75) = 1065353216;
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>((uint64_t)v74, (unint64_t)(float)(unint64_t)*(int *)(v35 + 24));
      uint64_t v36 = *(void *)(v35 + 32);
      if (v36) {
        std::vector<std::string> v37 = (uint64_t *)(v36 + 8);
      }
      else {
        std::vector<std::string> v37 = 0;
      }
      uint64_t v38 = *(int *)(v35 + 24);
      if (v38)
      {
        uint64_t v39 = 8 * v38;
        do
        {
          uint64_t v40 = *v37;
          if (*(void *)(*v37 + 24)) {
            uint64_t v41 = *(uint64_t **)(*v37 + 24);
          }
          else {
            uint64_t v41 = &CoreML::Specification::MILSpec::_Value_default_instance_;
          }
          MIL::Proto::ParseValue(&v72, a1, v41, a3, a4);
          if (*(void *)(v40 + 16)) {
            uint64_t v42 = *(uint64_t **)(v40 + 16);
          }
          else {
            uint64_t v42 = &CoreML::Specification::MILSpec::_Value_default_instance_;
          }
          MIL::Proto::ParseValue(&v71, a1, v42, a3, a4);
          uint64_t v70 = &v71;
          int v43 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v74, &v71, (uint64_t)&std::piecewise_construct, &v70);
          int v44 = (std::__shared_weak_count *)v43[5];
          *((_OWORD *)v43 + 2) = v72;
          if (v44) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v44);
          }
          if (*((void *)&v71 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
          }
          ++v37;
          v39 -= 8;
        }
        while (v39);
      }
      MIL::IRDictionaryValueType::MakeValue();
    default:
      long long v63 = __cxa_allocate_exception(0x48uLL);
      uint64_t v64 = a4[1];
      *(void *)&long long v69 = *a4;
      *((void *)&v69 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v64;
      if (v64) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v64 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v68, "Cannot parse null immediate value");
      MIL::ParseError::ParseError((uint64_t)v63, &v69, (uint64_t)v68, 301);
  }
}

void sub_20F435614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (v33) {
    __cxa_free_exception(v32);
  }
  _Unwind_Resume(exception_object);
}

CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *anonymous namespace'::ParseTensorValue(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a3[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 88))(a2);
  switch((int)result)
  {
    case 3:
      if (*(_DWORD *)(a1 + 28) == 4)
      {
        uint64_t v18 = *(void *)(*(void *)(a1 + 16) + 32);
        if (v18) {
          uint64_t v19 = (long long **)(v18 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
      }
      else
      {
        uint64_t v76 = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::default_instance(result, v7, v8);
        uint64_t v79 = v76[4];
        if (v79) {
          uint64_t v19 = (long long **)(v79 + 8);
        }
        else {
          uint64_t v19 = 0;
        }
        if (*(_DWORD *)(a1 + 28) != 4)
        {
          uint64_t v80 = CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedStrings *)v76, v77, v78);
LABEL_226:
          uint64_t v124 = v80[4];
          if (v124) {
            uint64_t v125 = v124 + 8;
          }
          else {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (long long **)(v125 + 8 * *((int *)v80 + 6));
          memset(&v169, 0, sizeof(v169));
          std::vector<std::string>::__init_with_size[abi:ne180100]<google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>>(&v169, v19, v126, v126 - v19);
          MIL::IRTensorValueType::MakeStringValue();
        }
      }
      uint64_t v80 = *(uint64_t **)(a1 + 16);
      goto LABEL_226;
    case 4:
      if (*(_DWORD *)(a1 + 28) == 7) {
        uint64_t v20 = *(uint64_t **)(a1 + 16);
      }
      else {
        uint64_t v20 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance(result, v7, v8);
      }
      uint64_t v81 = v20[2];
      if (*(char *)(v81 + 23) < 0) {
        uint64_t v82 = *(void *)(v81 + 8);
      }
      else {
        uint64_t v82 = *(unsigned __int8 *)(v81 + 23);
      }
      if (*(_DWORD *)(a1 + 28) == 7) {
        std::string::size_type v108 = *(uint64_t **)(a1 + 16);
      }
      else {
        std::string::size_type v108 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v20, v7, v8);
      }
      unint64_t v109 = (const void **)v108[2];
      if (*((char *)v109 + 23) < 0) {
        unint64_t v109 = (const void **)*v109;
      }
      memset(&v169, 0, sizeof(v169));
      std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16 const*,MIL::Fp16 const*>(&v169, v109, (uint64_t)v109 + (v82 & 0xFFFFFFFFFFFFFFFELL), v82 >> 1);
      MIL::IRTensorValueType::MakeFloat16Value();
    case 5:
      if (*(_DWORD *)(a1 + 28) == 1)
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 16) + 24);
        if (v21) {
          uint64_t v22 = (const void *)(v21 + 8);
        }
        else {
          uint64_t v22 = 0;
        }
      }
      else
      {
        uint64_t v83 = CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::default_instance(result, v7, v8);
        uint64_t v86 = v83[3];
        if (v86) {
          uint64_t v22 = (const void *)(v86 + 8);
        }
        else {
          uint64_t v22 = 0;
        }
        if (*(_DWORD *)(a1 + 28) != 1)
        {
          char v87 = CoreML::Specification::MILSpec::TensorValue_RepeatedFloats::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedFloats *)v83, v84, v85);
LABEL_231:
          uint64_t v127 = v87[3];
          if (v127) {
            uint64_t v128 = v127 + 4 * *((int *)v87 + 4) + 8;
          }
          else {
            uint64_t v128 = 0;
          }
          memset(&v169, 0, sizeof(v169));
          std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v169, v22, v128, (v128 - (uint64_t)v22) >> 2);
          MIL::IRTensorValueType::MakeFloat32Value();
        }
      }
      char v87 = *(uint64_t **)(a1 + 16);
      goto LABEL_231;
    case 6:
      if (*(_DWORD *)(a1 + 28) == 6)
      {
        uint64_t v14 = *(void *)(*(void *)(a1 + 16) + 24);
        if (v14) {
          uint64_t v15 = (const void *)(v14 + 8);
        }
        else {
          uint64_t v15 = 0;
        }
      }
      else
      {
        uint64_t v55 = CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::default_instance(result, v7, v8);
        uint64_t v58 = v55[3];
        if (v58) {
          uint64_t v15 = (const void *)(v58 + 8);
        }
        else {
          uint64_t v15 = 0;
        }
        if (*(_DWORD *)(a1 + 28) != 6)
        {
          uint64_t v59 = CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedDoubles *)v55, v56, v57);
LABEL_221:
          uint64_t v122 = v59[3];
          if (v122) {
            uint64_t v123 = v122 + 8 * *((int *)v59 + 4) + 8;
          }
          else {
            uint64_t v123 = 0;
          }
          memset(&v169, 0, sizeof(v169));
          std::vector<double>::__init_with_size[abi:ne180100]<double const*,double const*>(&v169, v15, v123, (v123 - (uint64_t)v15) >> 3);
          MIL::IRTensorValueType::MakeFloat64Value();
        }
      }
      uint64_t v59 = *(uint64_t **)(a1 + 16);
      goto LABEL_221;
    case 7:
      if (*(_DWORD *)(a1 + 28) == 7) {
        uint64_t v27 = *(uint64_t **)(a1 + 16);
      }
      else {
        uint64_t v27 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance(result, v7, v8);
      }
      uint64_t v97 = v27[2];
      if (*(char *)(v97 + 23) < 0) {
        uint64_t v98 = *(void *)(v97 + 8);
      }
      else {
        uint64_t v98 = *(unsigned __int8 *)(v97 + 23);
      }
      if (*(_DWORD *)(a1 + 28) == 7) {
        uint64_t v114 = *(uint64_t **)(a1 + 16);
      }
      else {
        uint64_t v114 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v27, v7, v8);
      }
      v115 = (const void **)v114[2];
      if (*((char *)v115 + 23) < 0) {
        v115 = (const void **)*v115;
      }
      memset(&v169, 0, sizeof(v169));
      std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<MIL::Bf16 const*,MIL::Bf16 const*>(&v169, v115, (uint64_t)v115 + (v98 & 0xFFFFFFFFFFFFFFFELL), v98 >> 1);
      MIL::IRTensorValueType::MakeBFloat16Value();
    case 8:
      __break(1u);
      return result;
    case 9:
      if (*(_DWORD *)(a1 + 28) == 7) {
        uint64_t v23 = *(uint64_t **)(a1 + 16);
      }
      else {
        uint64_t v23 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance(result, v7, v8);
      }
      uint64_t v88 = v23[2];
      if (*(char *)(v88 + 23) < 0) {
        size_t v89 = *(void *)(v88 + 8);
      }
      else {
        size_t v89 = *(unsigned __int8 *)(v88 + 23);
      }
      if (*(_DWORD *)(a1 + 28) == 7) {
        char v110 = *(uint64_t **)(a1 + 16);
      }
      else {
        char v110 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v23, v7, v8);
      }
      uint64_t v111 = (const void **)v110[2];
      if (*((char *)v111 + 23) < 0) {
        uint64_t v111 = (const void **)*v111;
      }
      memset(&v169, 0, sizeof(v169));
      std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(&v169, v111, (uint64_t)v111 + v89, v89);
      MIL::IRTensorValueType::MakeInt8Value();
    case 10:
      if (*(_DWORD *)(a1 + 28) == 2) {
        long long v16 = *(uint64_t **)(a1 + 16);
      }
      else {
        long long v16 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::default_instance(result, v7, v8);
      }
      CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v157, (const CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v16);
      uint64_t v60 = a3[1];
      *(void *)&long long v153 = *a3;
      if (v60) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v60 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)&v153 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v60;
      v161 = 0;
      v162 = 0;
      std::string __p = 0;
      std::vector<MIL::Fp16>::reserve(&__p, v158);
      if (v159) {
        long long v61 = (int *)(v159 + 8);
      }
      else {
        long long v61 = 0;
      }
      if (v159) {
        uint64_t v62 = v159 + 8 + 4 * v158;
      }
      else {
        uint64_t v62 = 0;
      }
      for (; v61 != (int *)v62; ++v61)
      {
        int v63 = *v61;
        if (v63 != (__int16)v63)
        {
          exception = __cxa_allocate_exception(0x48uLL);
          long long v170 = v153;
          std::to_string(&v166, v63);
          v143 = std::string::insert(&v166, 0, "Value ");
          long long v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
          v167.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v144;
          v143->__r_.__value_.__l.__size_ = 0;
          v143->__r_.__value_.__r.__words[2] = 0;
          v143->__r_.__value_.__r.__words[0] = 0;
          unint64_t v145 = std::string::append(&v167, " cannot be casted to ");
          long long v146 = *(_OWORD *)&v145->__r_.__value_.__l.__data_;
          v168.__r_.__value_.__r.__words[2] = v145->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v146;
          v145->__r_.__value_.__l.__size_ = 0;
          v145->__r_.__value_.__r.__words[2] = 0;
          v145->__r_.__value_.__r.__words[0] = 0;
          MIL::IRDataTypeToString(10, &v163);
          if ((v165 & 0x80u) == 0) {
            unint64_t v147 = (const std::string::value_type *)&v163;
          }
          else {
            unint64_t v147 = v163;
          }
          if ((v165 & 0x80u) == 0) {
            std::string::size_type v148 = v165;
          }
          else {
            std::string::size_type v148 = v164;
          }
          v149 = std::string::append(&v168, v147, v148);
          long long v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
          v169.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v150;
          v149->__r_.__value_.__l.__size_ = 0;
          v149->__r_.__value_.__r.__words[2] = 0;
          v149->__r_.__value_.__r.__words[0] = 0;
          MIL::ParseError::ParseError((uint64_t)exception, &v170, (uint64_t)&v169, 112);
        }
        uint64_t v64 = v161;
        if (v161 >= v162)
        {
          long long v66 = (char *)__p;
          uint64_t v67 = v161 - (unsigned char *)__p;
          if (v161 - (unsigned char *)__p <= -3) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v68 = v67 >> 1;
          if (v162 - (unsigned char *)__p <= (unint64_t)((v67 >> 1) + 1)) {
            uint64_t v69 = v68 + 1;
          }
          else {
            uint64_t v69 = v162 - (unsigned char *)__p;
          }
          if ((unint64_t)(v162 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v70 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v70 = v69;
          }
          if (v70)
          {
            long long v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v162, v70);
            long long v66 = (char *)__p;
            uint64_t v64 = v161;
          }
          else
          {
            long long v71 = 0;
          }
          long long v72 = &v71[2 * v68];
          *(_WORD *)long long v72 = v63;
          uint64_t v65 = v72 + 2;
          while (v64 != v66)
          {
            __int16 v73 = *((_WORD *)v64 - 1);
            v64 -= 2;
            *((_WORD *)v72 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v73;
            v72 -= 2;
          }
          std::string __p = v72;
          v161 = v65;
          v162 = &v71[2 * v70];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *(_WORD *)v161 = v63;
          uint64_t v65 = v64 + 2;
        }
        v161 = v65;
      }
      MIL::IRTensorValueType::MakeInt16Value();
    case 11:
      if (*(_DWORD *)(a1 + 28) == 2)
      {
        uint64_t v24 = *(void *)(*(void *)(a1 + 16) + 24);
        if (v24) {
          float v25 = (const void *)(v24 + 8);
        }
        else {
          float v25 = 0;
        }
      }
      else
      {
        uint64_t v90 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::default_instance(result, v7, v8);
        uint64_t v93 = v90[3];
        if (v93) {
          float v25 = (const void *)(v93 + 8);
        }
        else {
          float v25 = 0;
        }
        if (*(_DWORD *)(a1 + 28) != 2)
        {
          char v94 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v90, v91, v92);
LABEL_236:
          uint64_t v129 = v94[3];
          if (v129) {
            uint64_t v130 = v129 + 4 * *((int *)v94 + 4) + 8;
          }
          else {
            uint64_t v130 = 0;
          }
          memset(&v169, 0, sizeof(v169));
          std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(&v169, v25, v130, (v130 - (uint64_t)v25) >> 2);
          MIL::IRTensorValueType::MakeInt32Value();
        }
      }
      char v94 = *(uint64_t **)(a1 + 16);
      goto LABEL_236;
    case 12:
      if (*(_DWORD *)(a1 + 28) == 5)
      {
        uint64_t v11 = *(void *)(*(void *)(a1 + 16) + 24);
        if (v11) {
          char v12 = (const void *)(v11 + 8);
        }
        else {
          char v12 = 0;
        }
      }
      else
      {
        unint64_t v31 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::default_instance(result, v7, v8);
        uint64_t v34 = v31[3];
        if (v34) {
          char v12 = (const void *)(v34 + 8);
        }
        else {
          char v12 = 0;
        }
        if (*(_DWORD *)(a1 + 28) != 5)
        {
          uint64_t v35 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v31, v32, v33);
LABEL_211:
          uint64_t v118 = v35[3];
          if (v118) {
            uint64_t v119 = v118 + 8 * *((int *)v35 + 4) + 8;
          }
          else {
            uint64_t v119 = 0;
          }
          memset(&v169, 0, sizeof(v169));
          std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(&v169, v12, v119, (v119 - (uint64_t)v12) >> 3);
          MIL::IRTensorValueType::MakeInt64Value();
        }
      }
      uint64_t v35 = *(uint64_t **)(a1 + 16);
      goto LABEL_211;
    case 13:
      MIL::IRTensorValueType::MakeInt4Value();
    case 14:
      MIL::IRTensorValueType::MakeUInt8Value();
    case 15:
      if (*(_DWORD *)(a1 + 28) == 2) {
        int v13 = *(uint64_t **)(a1 + 16);
      }
      else {
        int v13 = CoreML::Specification::MILSpec::TensorValue_RepeatedInts::default_instance(result, v7, v8);
      }
      CoreML::Specification::MILSpec::TensorValue_RepeatedInts::TensorValue_RepeatedInts((CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v154, (const CoreML::Specification::MILSpec::TensorValue_RepeatedInts *)v13);
      uint64_t v36 = a3[1];
      *(void *)&long long v152 = *a3;
      if (v36) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
      }
      *((void *)&v152 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v36;
      v161 = 0;
      v162 = 0;
      std::string __p = 0;
      std::vector<MIL::Fp16>::reserve(&__p, v155);
      if (v156) {
        std::vector<std::string> v37 = (int *)(v156 + 8);
      }
      else {
        std::vector<std::string> v37 = 0;
      }
      if (v156) {
        uint64_t v38 = v156 + 8 + 4 * v155;
      }
      else {
        uint64_t v38 = 0;
      }
      for (; v37 != (int *)v38; ++v37)
      {
        int v39 = *v37;
        if (*v37 >= 0x10000)
        {
          v133 = __cxa_allocate_exception(0x48uLL);
          long long v170 = v152;
          std::to_string(&v166, v39);
          v134 = std::string::insert(&v166, 0, "Value ");
          long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
          v167.__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v167.__r_.__value_.__l.__data_ = v135;
          v134->__r_.__value_.__l.__size_ = 0;
          v134->__r_.__value_.__r.__words[2] = 0;
          v134->__r_.__value_.__r.__words[0] = 0;
          uint64_t v136 = std::string::append(&v167, " cannot be casted to ");
          long long v137 = *(_OWORD *)&v136->__r_.__value_.__l.__data_;
          v168.__r_.__value_.__r.__words[2] = v136->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v168.__r_.__value_.__l.__data_ = v137;
          v136->__r_.__value_.__l.__size_ = 0;
          v136->__r_.__value_.__r.__words[2] = 0;
          v136->__r_.__value_.__r.__words[0] = 0;
          MIL::IRDataTypeToString(15, &v163);
          if ((v165 & 0x80u) == 0) {
            uint64_t v138 = (const std::string::value_type *)&v163;
          }
          else {
            uint64_t v138 = v163;
          }
          if ((v165 & 0x80u) == 0) {
            std::string::size_type v139 = v165;
          }
          else {
            std::string::size_type v139 = v164;
          }
          uint64_t v140 = std::string::append(&v168, v138, v139);
          long long v141 = *(_OWORD *)&v140->__r_.__value_.__l.__data_;
          v169.__r_.__value_.__r.__words[2] = v140->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v169.__r_.__value_.__l.__data_ = v141;
          v140->__r_.__value_.__l.__size_ = 0;
          v140->__r_.__value_.__r.__words[2] = 0;
          v140->__r_.__value_.__r.__words[0] = 0;
          MIL::ParseError::ParseError((uint64_t)v133, &v170, (uint64_t)&v169, 112);
        }
        uint64_t v40 = v161;
        if (v161 >= v162)
        {
          uint64_t v42 = (char *)__p;
          uint64_t v43 = v161 - (unsigned char *)__p;
          if (v161 - (unsigned char *)__p <= -3) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v44 = v43 >> 1;
          if (v162 - (unsigned char *)__p <= (unint64_t)((v43 >> 1) + 1)) {
            uint64_t v45 = v44 + 1;
          }
          else {
            uint64_t v45 = v162 - (unsigned char *)__p;
          }
          if ((unint64_t)(v162 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v46 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v46 = v45;
          }
          if (v46)
          {
            uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)&v162, v46);
            uint64_t v42 = (char *)__p;
            uint64_t v40 = v161;
          }
          else
          {
            uint64_t v47 = 0;
          }
          uint64_t v48 = &v47[2 * v44];
          *(_WORD *)uint64_t v48 = v39;
          uint64_t v41 = v48 + 2;
          while (v40 != v42)
          {
            __int16 v49 = *((_WORD *)v40 - 1);
            v40 -= 2;
            *((_WORD *)v48 - std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v49;
            v48 -= 2;
          }
          std::string __p = v48;
          v161 = v41;
          v162 = &v47[2 * v46];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *(_WORD *)v161 = v39;
          uint64_t v41 = v40 + 2;
        }
        v161 = v41;
      }
      MIL::IRTensorValueType::MakeUInt16Value();
    case 16:
      if (*(_DWORD *)(a1 + 28) == 7) {
        uint64_t v26 = *(uint64_t **)(a1 + 16);
      }
      else {
        uint64_t v26 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance(result, v7, v8);
      }
      uint64_t v95 = v26[2];
      if (*(char *)(v95 + 23) < 0) {
        uint64_t v96 = *(void *)(v95 + 8);
      }
      else {
        uint64_t v96 = *(unsigned __int8 *)(v95 + 23);
      }
      if (*(_DWORD *)(a1 + 28) == 7) {
        uint64_t v112 = *(uint64_t **)(a1 + 16);
      }
      else {
        uint64_t v112 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v26, v7, v8);
      }
      uint64_t v113 = (const void **)v112[2];
      if (*((char *)v113 + 23) < 0) {
        uint64_t v113 = (const void **)*v113;
      }
      memset(&v169, 0, sizeof(v169));
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(&v169, v113, (uint64_t)v113 + (v96 & 0xFFFFFFFFFFFFFFFCLL), v96 >> 2);
      MIL::IRTensorValueType::MakeUInt32Value();
    case 17:
      if (*(_DWORD *)(a1 + 28) == 5)
      {
        uint64_t v28 = *(void *)(*(void *)(a1 + 16) + 24);
        if (v28) {
          uint64_t v29 = (uint64_t *)(v28 + 8);
        }
        else {
          uint64_t v29 = 0;
        }
      }
      else
      {
        char v99 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::default_instance(result, v7, v8);
        uint64_t v102 = v99[3];
        if (v102) {
          uint64_t v29 = (uint64_t *)(v102 + 8);
        }
        else {
          uint64_t v29 = 0;
        }
        if (*(_DWORD *)(a1 + 28) != 5)
        {
          v103 = CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedLongInts *)v99, v100, v101);
LABEL_241:
          uint64_t v131 = v103[3];
          if (v131) {
            v132 = (uint64_t *)(v131 + 8 * *((int *)v103 + 4) + 8);
          }
          else {
            v132 = 0;
          }
          memset(&v169, 0, sizeof(v169));
          std::vector<unsigned long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>((char *)&v169, v29, v132, v132 - v29);
          MIL::IRTensorValueType::MakeUInt64Value();
        }
      }
      v103 = *(uint64_t **)(a1 + 16);
      goto LABEL_241;
    case 18:
      std::string::size_type v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v151, "Attempted to parse unknown tensor dtype.");
      __cxa_throw(v151, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 19:
      MIL::IRTensorValueType::MakeUInt2Value();
    case 20:
      MIL::IRTensorValueType::MakeUInt4Value();
    case 21:
      MIL::IRTensorValueType::MakeUInt1Value();
    case 22:
      MIL::IRTensorValueType::MakeUInt3Value();
    case 23:
      MIL::IRTensorValueType::MakeUInt6Value();
    case 24:
      if (*(_DWORD *)(a1 + 28) == 7) {
        unint64_t v30 = *(uint64_t **)(a1 + 16);
      }
      else {
        unint64_t v30 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance(result, v7, v8);
      }
      uint64_t v104 = v30[2];
      if (*(char *)(v104 + 23) < 0) {
        size_t v105 = *(void *)(v104 + 8);
      }
      else {
        size_t v105 = *(unsigned __int8 *)(v104 + 23);
      }
      if (*(_DWORD *)(a1 + 28) == 7) {
        BOOL v116 = *(uint64_t **)(a1 + 16);
      }
      else {
        BOOL v116 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v30, v7, v8);
      }
      char v117 = (const void **)v116[2];
      if (*((char *)v117 + 23) < 0) {
        char v117 = (const void **)*v117;
      }
      memset(&v169, 0, sizeof(v169));
      std::vector<MIL::Fp8E4M3FN>::__init_with_size[abi:ne180100]<MIL::Fp8E4M3FN const*,MIL::Fp8E4M3FN const*>(&v169, v117, (uint64_t)v117 + v105, v105);
      MIL::IRTensorValueType::MakeFloat8E4M3FNValue();
    case 25:
      if (*(_DWORD *)(a1 + 28) == 7) {
        uint64_t v17 = *(uint64_t **)(a1 + 16);
      }
      else {
        uint64_t v17 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance(result, v7, v8);
      }
      uint64_t v74 = v17[2];
      if (*(char *)(v74 + 23) < 0) {
        size_t v75 = *(void *)(v74 + 8);
      }
      else {
        size_t v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*(_DWORD *)(a1 + 28) == 7) {
        uint64_t v106 = *(uint64_t **)(a1 + 16);
      }
      else {
        uint64_t v106 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v17, v7, v8);
      }
      unint64_t v107 = (const void **)v106[2];
      if (*((char *)v107 + 23) < 0) {
        unint64_t v107 = (const void **)*v107;
      }
      memset(&v169, 0, sizeof(v169));
      std::vector<MIL::Fp8E5M2>::__init_with_size[abi:ne180100]<MIL::Fp8E5M2 const*,MIL::Fp8E5M2 const*>(&v169, v107, (uint64_t)v107 + v75, v75);
      MIL::IRTensorValueType::MakeFloat8E5M2Value();
    default:
      if (*(_DWORD *)(a1 + 28) == 3)
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 16) + 24);
        if (v9) {
          int v10 = (char *)(v9 + 8);
        }
        else {
          int v10 = 0;
        }
      }
      else
      {
        uint64_t v50 = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::default_instance(result, v7, v8);
        uint64_t v53 = v50[3];
        if (v53) {
          int v10 = (char *)(v53 + 8);
        }
        else {
          int v10 = 0;
        }
        if (*(_DWORD *)(a1 + 28) != 3)
        {
          unint64_t v54 = CoreML::Specification::MILSpec::TensorValue_RepeatedBools::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBools *)v50, v51, v52);
LABEL_216:
          uint64_t v120 = v54[3];
          if (v120) {
            unint64_t v121 = (char *)(v120 + *((int *)v54 + 4) + 8);
          }
          else {
            unint64_t v121 = 0;
          }
          memset(&v169, 0, sizeof(v169));
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>((char *)&v169, v10, v121, v121 - v10);
          MIL::IRTensorValueType::MakeBoolValue();
        }
      }
      unint64_t v54 = *(uint64_t **)(a1 + 16);
      goto LABEL_216;
  }
}

void sub_20F436680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  __cxa_free_exception(v43);
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  _Unwind_Resume(a1);
}

void *anonymous namespace'::BytesToTypedVector<unsigned char>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, google::protobuf::Closure *a3@<X2>, void *a4@<X8>)
{
  if (*(_DWORD *)(a1 + 28) == 7) {
    uint64_t v6 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v6 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)a1, a2, a3);
  }
  uint64_t v7 = v6[2];
  if (*(char *)(v7 + 23) < 0) {
    size_t v8 = *(void *)(v7 + 8);
  }
  else {
    size_t v8 = *(unsigned __int8 *)(v7 + 23);
  }
  if (*(_DWORD *)(a1 + 28) == 7) {
    uint64_t v9 = *(uint64_t **)(a1 + 16);
  }
  else {
    uint64_t v9 = CoreML::Specification::MILSpec::TensorValue_RepeatedBytes::default_instance((CoreML::Specification::MILSpec::TensorValue_RepeatedBytes *)v6, a2, a3);
  }
  int v10 = (const void **)v9[2];
  if (*((char *)v10 + 23) < 0) {
    int v10 = (const void **)*v10;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;

  return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a4, v10, (uint64_t)v10 + v8, v8);
}

char *std::vector<unsigned char>::__init_with_size[abi:ne180100]<BOOL const*,BOOL const*>(char *result, char *a2, char *a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = (unsigned char *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      char v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  }
  return result;
}

void sub_20F436AA8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>>(std::string *result, long long **a2, long long **a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_20F436B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,google::protobuf::internal::RepeatedPtrIterator<std::string const>,google::protobuf::internal::RepeatedPtrIterator<std::string const>,std::string*>(uint64_t a1, long long **a2, long long **a3, std::string *this)
{
  uint64_t v4 = this;
  char v12 = this;
  int v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  _OWORD v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      uint64_t v7 = *v6;
      if (*((char *)*v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v7, *((void *)v7 + 1));
        uint64_t v4 = v13;
      }
      else
      {
        long long v8 = *v7;
        v4->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      ++v6;
      int v13 = ++v4;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_20F436BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::vector<MIL::Bf16>::__init_with_size[abi:ne180100]<MIL::Bf16 const*,MIL::Bf16 const*>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F436C70(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::Fp8E4M3FN>::__init_with_size[abi:ne180100]<MIL::Fp8E4M3FN const*,MIL::Fp8E4M3FN const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F436CEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::Fp8E5M2>::__init_with_size[abi:ne180100]<MIL::Fp8E5M2 const*,MIL::Fp8E5M2 const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F436D68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double const*,double const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F436DE4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int const*,int const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F436E60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F436EDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F436F58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<long long const*,long long const*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v7;
  }
  return result;
}

void sub_20F436FCC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void **std::vector<std::shared_ptr<MIL::IRValue const>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    _OWORD v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    void v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v7);
  }
  return result;
}

void sub_20F437068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::ParseValueType(uint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = (MIL::IRConstantDimension *)result;
  switch(*(_DWORD *)(a2 + 28))
  {
    case 0:
      exception = __cxa_allocate_exception(0x48uLL);
      uint64_t v53 = a4[1];
      *(void *)&long long v57 = *a4;
      *((void *)&v57 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v53;
      if (v53) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v53 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v56, "Cannot parse a null value type");
      MIL::ParseError::ParseError((uint64_t)exception, &v57, (uint64_t)v56, 114);
    case 1:
      uint64_t v7 = *(void *)(a2 + 16);
      if (*(void *)(v7 + 72) == *(_DWORD *)(v7 + 24))
      {
        int v8 = *(_DWORD *)(v7 + 80);
        switch(v8)
        {
          case 0:
            goto LABEL_69;
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 14:
          case 15:
          case 16:
          case 17:
          case 18:
          case 19:
          case 20:
          case 21:
          case 22:
          case 23:
          case 24:
          case 25:
          case 26:
          case 27:
          case 28:
          case 29:
          case 30:
          case 31:
          case 32:
          case 33:
          case 34:
          case 35:
          case 36:
          case 37:
          case 38:
          case 39:
          case 40:
          case 41:
            goto LABEL_55;
          default:
            if (v8 != 0x80000000 && v8 != 0x7FFFFFFF) {
LABEL_55:
            }
              operator new();
LABEL_69:
            unint64_t v54 = __cxa_allocate_exception(0x48uLL);
            std::string::size_type v55 = a4[1];
            v63.__r_.__value_.__r.__words[0] = *a4;
            v63.__r_.__value_.__l.__size_ = v55;
            if (v55) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "Cannot parse an unsupported data type");
            MIL::ParseError::ParseError((uint64_t)v54, (long long *)&v63, (uint64_t)__p, 114);
        }
      }
      uint64_t v42 = __cxa_allocate_exception(0x48uLL);
      uint64_t v43 = a4[1];
      *(void *)&long long v64 = *a4;
      *((void *)&v64 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v43;
      if (v43) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v43 + 8), 1uLL, memory_order_relaxed);
      }
      std::to_string(&v61, *(void *)(v7 + 72));
      uint64_t v44 = std::string::insert(&v61, 0, "Mismatch between specified rank ");
      long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
      v62.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v45;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      uint64_t v46 = std::string::append(&v62, " and given number of dimensions ");
      long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
      v63.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v47;
      v46->__r_.__value_.__l.__size_ = 0;
      v46->__r_.__value_.__r.__words[2] = 0;
      v46->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v60, *(_DWORD *)(v7 + 24));
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v48 = &v60;
      }
      else {
        uint64_t v48 = (std::string *)v60.__r_.__value_.__r.__words[0];
      }
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v60.__r_.__value_.__l.__size_;
      }
      uint64_t v50 = std::string::append(&v63, (const std::string::value_type *)v48, size);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      uint64_t v59 = (char *)v50->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      MIL::ParseError::ParseError((uint64_t)v42, &v64, (uint64_t)__p, 104);
    case 2:
      uint64_t v9 = *(void *)(a2 + 16);
      if (*(void *)(v9 + 16)) {
        uint64_t v10 = *(uint64_t **)(v9 + 16);
      }
      else {
        uint64_t v10 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      }
      char v11 = (MIL::MILContext *)MIL::Proto::ParseValueType(result, v10, a3, a4);
      if (*(void *)(v9 + 24)) {
        char v12 = *(uint64_t **)(v9 + 24);
      }
      else {
        char v12 = &CoreML::Specification::MILSpec::_Dimension_default_instance_;
      }
      uint64_t result = MIL::IRListValueType::MakeWithDimension(v6, v11, v13, v14);
      break;
    case 3:
      uint64_t v24 = *(void *)(a2 + 16);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v59 = 0;
      std::vector<std::string const*>::reserve(__p, *(int *)(v24 + 24));
      uint64_t v25 = *(void *)(v24 + 32);
      if (v25) {
        uint64_t v26 = (void *)(v25 + 8);
      }
      else {
        uint64_t v26 = 0;
      }
      uint64_t v27 = *(int *)(v24 + 24);
      if (v27)
      {
        uint64_t v28 = &v26[v27];
        do
        {
          uint64_t v29 = MIL::Proto::ParseValueType(v6, *v26, a3, a4);
          uint64_t v30 = v29;
          unint64_t v31 = (char *)__p[1];
          if (__p[1] >= v59)
          {
            int64_t v33 = ((char *)__p[1] - (char *)__p[0]) >> 3;
            if ((unint64_t)(v33 + 1) >> 61) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v34 = (v59 - (char *)__p[0]) >> 2;
            if (v34 <= v33 + 1) {
              unint64_t v34 = v33 + 1;
            }
            if ((unint64_t)(v59 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v35 = v34;
            }
            if (v35) {
              uint64_t v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v59, v35);
            }
            else {
              uint64_t v36 = 0;
            }
            std::vector<std::string> v37 = (uint64_t *)&v36[8 * v33];
            uint64_t *v37 = v30;
            uint64_t v32 = v37 + 1;
            int v39 = (char *)__p[0];
            uint64_t v38 = (char *)__p[1];
            if (__p[1] != __p[0])
            {
              do
              {
                uint64_t v40 = *((void *)v38 - 1);
                v38 -= 8;
                *--std::vector<std::string> v37 = v40;
              }
              while (v38 != v39);
              uint64_t v38 = (char *)__p[0];
            }
            __p[0] = v37;
            __p[1] = v32;
            uint64_t v59 = &v36[8 * v35];
            if (v38) {
              operator delete(v38);
            }
          }
          else
          {
            *(void *)__p[1] = v29;
            uint64_t v32 = v31 + 8;
          }
          __p[1] = v32;
          ++v26;
        }
        while (v26 != v28);
      }
      MIL::IRTupleValueType::Make(v6);
    case 4:
      uint64_t v18 = *(void *)(a2 + 16);
      if (*(void *)(v18 + 16)) {
        uint64_t v19 = *(uint64_t **)(v18 + 16);
      }
      else {
        uint64_t v19 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      }
      uint64_t v20 = (MIL::MILContext *)MIL::Proto::ParseValueType(result, v19, a3, a4);
      if (*(void *)(v18 + 24)) {
        uint64_t v21 = *(uint64_t **)(v18 + 24);
      }
      else {
        uint64_t v21 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      }
      uint64_t v22 = (const MIL::IRValueType *)MIL::Proto::ParseValueType(v6, v21, a3, a4);
      uint64_t result = MIL::IRDictionaryValueType::Make(v6, v20, v22, v23);
      break;
    case 5:
      if (*(void *)(*(void *)(a2 + 16) + 16)) {
        uint64_t v15 = *(uint64_t **)(*(void *)(a2 + 16) + 16);
      }
      else {
        uint64_t v15 = &CoreML::Specification::MILSpec::_ValueType_default_instance_;
      }
      long long v16 = (MIL::MILContext *)MIL::Proto::ParseValueType(result, v15, a3, a4);
      uint64_t result = MIL::IRStateValueType::Make(v6, v16, v17);
      break;
    default:
      return result;
  }
  return result;
}

void sub_20F43787C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v48 - 121) < 0) {
    operator delete(*(void **)(v48 - 144));
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  uint64_t v50 = *(std::__shared_weak_count **)(v48 - 104);
  if (v50) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  }
  if (v46) {
    __cxa_free_exception(v47);
  }
  _Unwind_Resume(exception_object);
}

MIL::IRConstantDimension *anonymous namespace'::ParseDimension(MIL::IRConstantDimension *result, uint64_t a2, void *a3)
{
  int v3 = *(_DWORD *)(a2 + 28);
  switch(v3)
  {
    case 1:
      uint64_t v5 = *(MIL::MILContext **)(*(void *)(a2 + 16) + 16);
      return (MIL::IRConstantDimension *)MIL::IRConstantDimension::Make(result, v5);
    case 2:
      BOOL v4 = *(unsigned char *)(*(void *)(a2 + 16) + 16) != 0;
      return (MIL::IRConstantDimension *)MIL::IRUnknownDimension::Make(result, (MIL::MILContext *)v4);
    case 0:
      exception = __cxa_allocate_exception(0x48uLL);
      uint64_t v8 = a3[1];
      *(void *)&long long v10 = *a3;
      *((void *)&v10 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v9, "Cannot parse a null dimension");
      MIL::ParseError::ParseError((uint64_t)exception, &v10, (uint64_t)v9, 105);
  }
  return result;
}

void sub_20F437BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Proto::SerializeProgram(uint64_t a1, uint64_t a2, uint64_t a3)
{
  google::protobuf::io::OstreamOutputStream::OstreamOutputStream(v6, a3, 0xFFFFFFFFLL);
  google::protobuf::io::CodedOutputStream::CodedOutputStream((google::protobuf::io::CodedOutputStream *)v5, (google::protobuf::io::ZeroCopyOutputStream *)v6);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  MIL::Proto::SerializeProgram();
}

void sub_20F437D5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  if (v2) {
    MIL::Proto::SerializeProgram(v2);
  }
  google::protobuf::io::CodedOutputStream::~CodedOutputStream((google::protobuf::io::CodedOutputStream *)va);
  google::protobuf::io::OstreamOutputStream::~OstreamOutputStream((google::protobuf::io::OstreamOutputStream *)va1);
  _Unwind_Resume(a1);
}

void MIL::Proto::SerializeProgram()
{
}

void sub_20F437EB8(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C40FAC9F822);
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::SerializeFunction(MIL::Proto *this, const MIL::IRFunction *a2, CoreML::Specification::MILSpec::Function *a3)
{
  uint64_t v5 = (const std::string *)(*(uint64_t (**)(MIL::Proto *, const MIL::IRFunction *, CoreML::Specification::MILSpec::Function *))(*(void *)this + 32))(this, a2, a3);
  if (*((long long **)a2 + 13) == &google::protobuf::internal::fixed_address_empty_string) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
  }
  std::string::operator=(*((std::string **)a2 + 13), v5);
  uint64_t v6 = (void *)(*(uint64_t (**)(MIL::Proto *))(*(void *)this + 128))(this);
  uint64_t v7 = v6 + 1;
  uint64_t v8 = (void *)*v6;
  if ((void *)*v6 != v6 + 1)
  {
    do
    {
      uint64_t v9 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)a2 + 16);
      long long v10 = (long long *)*((void *)v9 + 2);
      if (v10 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      std::string::operator=((std::string *)v10, (const std::string *)(v8 + 4));
      char v12 = (const MIL::IRValueType *)*((void *)v9 + 3);
      if (!v12) {
        operator new();
      }
      MIL::Proto::SerializeValueType((MIL::Proto *)v8[7], v12, v11);
      int v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          int v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v8[2];
          BOOL v15 = *v14 == (void)v8;
          uint64_t v8 = v14;
        }
        while (!v15);
      }
      uint64_t v8 = v14;
    }
    while (v14 != v7);
  }
  long long v16 = (void *)(*(uint64_t (**)(MIL::Proto *))(*(void *)this + 112))(this);
  if ((void *)*v16 != v16 + 1) {
    operator new();
  }
  uint64_t Attributes = MIL::IRObject::GetAttributes(this);

  return MIL::Proto::SerializeAttributes(Attributes);
}

void sub_20F4381DC(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::operator[](uint64_t a1, const std::string *a2)
{
  uint64_t v4 = (std::string **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *uint64_t v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

uint64_t MIL::Proto::SerializeAttributes(uint64_t result)
{
  if (*(void *)(result + 16)) {
    operator new();
  }
  return result;
}

void sub_20F438338(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Proto::SerializeValueType(MIL::Proto *this, const MIL::IRValueType *a2, CoreML::Specification::MILSpec::ValueType *a3)
{
  int v3 = a2;
  Wrappeduint64_t Type = this;
  uint64_t v5 = (*(uint64_t (**)(MIL::Proto *, const MIL::IRValueType *, CoreML::Specification::MILSpec::ValueType *))(*(void *)this + 24))(this, a2, a3);
  if (v5)
  {
LABEL_2:
    uint64_t v6 = (MIL::IRTensorValueType *)v5;
    if (*((_DWORD *)v3 + 7) != 1)
    {
      CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)v3);
      *((_DWORD *)v3 + 7) = 1;
      operator new();
    }
    uint64_t v7 = *((void *)v3 + 2);
    int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 88))(v5);
    int v20 = v19 - 2;
    if ((v19 - 2) >= 0x18 || ((0xFEFFBFu >> v20) & 1) == 0)
    {
LABEL_42:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Provided type is not supported by the serializer.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    *(_DWORD *)(v7 + 8std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = dword_20F913974[v20];
    *(void *)(v7 + 72) = MIL::IRTensorValueType::Rank(v6);
    uint64_t result = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
    if (result[1] != *result)
    {
      unint64_t v22 = 0;
      do
      {
        uint64_t v23 = *(MIL::Proto **)(*(void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6)
                             + 8 * v22);
        uint64_t v24 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Dimension>::TypeHandler>(v7 + 16);
        MIL::Proto::SerializeDimension(v23, v24, v25);
        ++v22;
        uint64_t result = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v6 + 96))(v6);
      }
      while (v22 < (result[1] - *result) >> 3);
    }
  }
  else
  {
    while (1)
    {
      uint64_t v8 = (*(uint64_t (**)(MIL::Proto *))(*(void *)WrappedType + 32))(WrappedType);
      if (v8) {
        break;
      }
      uint64_t v9 = (*(uint64_t (**)(MIL::Proto *))(*(void *)WrappedType + 40))(WrappedType);
      if (v9)
      {
        if (*((_DWORD *)v3 + 7) != 3)
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)v3);
          *((_DWORD *)v3 + 7) = 3;
          operator new();
        }
        uint64_t v28 = *((void *)v3 + 2);
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9);
        uint64_t v35 = *result;
        if (result[1] != *result)
        {
          uint64_t v36 = result;
          unint64_t v37 = 0;
          do
          {
            uint64_t v38 = *(MIL::Proto **)(v35 + 8 * v37);
            int v39 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::ValueType>::TypeHandler>(v28 + 16);
            uint64_t result = (uint64_t *)MIL::Proto::SerializeValueType(v38, v39, v40);
            ++v37;
            uint64_t v35 = *v36;
          }
          while (v37 < (v36[1] - *v36) >> 3);
        }
        return result;
      }
      uint64_t v10 = (*(uint64_t (**)(MIL::Proto *))(*(void *)WrappedType + 48))(WrappedType);
      if (v10)
      {
        uint64_t v11 = v10;
        if (*((_DWORD *)v3 + 7) != 4)
        {
          CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)v3);
          *((_DWORD *)v3 + 7) = 4;
          operator new();
        }
        uint64_t v12 = *((void *)v3 + 2);
        long long v16 = (MIL::Proto *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 64))(v10);
        int v18 = *(const MIL::IRValueType **)(v12 + 16);
        if (!v18) {
          operator new();
        }
        MIL::Proto::SerializeValueType(v16, v18, v17);
        Wrappeduint64_t Type = (MIL::Proto *)(*(uint64_t (**)(uint64_t))(*(void *)v11 + 72))(v11);
        int v3 = *(const MIL::IRValueType **)(v12 + 24);
        if (!v3) {
          operator new();
        }
      }
      else
      {
        int v13 = (MIL::IRStateValueType *)MIL::IRValueType::TryCastAsStateType(WrappedType);
        if (!v13) {
          goto LABEL_42;
        }
        uint64_t v14 = v13;
        BOOL v15 = (CoreML::Specification::MILSpec::StateType *)CoreML::Specification::MILSpec::ValueType::mutable_statetype(v3);
        Wrappeduint64_t Type = (MIL::Proto *)MIL::IRStateValueType::GetWrappedType(v14);
        int v3 = (const MIL::IRValueType *)CoreML::Specification::MILSpec::StateType::mutable_wrappedtype(v15);
      }
      uint64_t v5 = (*(uint64_t (**)(MIL::Proto *))(*(void *)WrappedType + 24))(WrappedType);
      if (v5) {
        goto LABEL_2;
      }
    }
    uint64_t v26 = v8;
    if (*((_DWORD *)v3 + 7) != 2)
    {
      CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)v3);
      *((_DWORD *)v3 + 7) = 2;
      operator new();
    }
    uint64_t v27 = *((void *)v3 + 2);
    uint64_t v29 = (MIL::Proto *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 64))(v8);
    unint64_t v31 = *(const MIL::IRValueType **)(v27 + 16);
    if (!v31) {
      operator new();
    }
    MIL::Proto::SerializeValueType(v29, v31, v30);
    int64_t v33 = (MIL::Proto *)(*(uint64_t (**)(uint64_t))(*(void *)v26 + 72))(v26);
    unint64_t v34 = *(const MIL::IRDimension **)(v27 + 24);
    if (!v34) {
      operator new();
    }
    return (uint64_t *)MIL::Proto::SerializeDimension(v33, v34, v32);
  }
  return result;
}

void sub_20F438988(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::SerializeBlock(MIL::Proto *this, const MIL::IRBlock *a2, CoreML::Specification::MILSpec::Block *a3)
{
  uint64_t v5 = (*(uint64_t (**)(MIL::Proto *, const MIL::IRBlock *, CoreML::Specification::MILSpec::Block *))(*(void *)this + 40))(this, a2, a3);
  uint64_t v6 = *(MIL::IRNamedValueType ***)v5;
  uint64_t v7 = *(MIL::IRNamedValueType ***)(v5 + 8);
  if (*(MIL::IRNamedValueType ***)v5 != v7)
  {
    do
    {
      uint64_t v8 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)a2 + 16);
      uint64_t Name = (const std::string *)MIL::IRNamedValueType::GetName(*v6);
      if (*((long long **)v8 + 2) == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      std::string::operator=(*((std::string **)v8 + 2), Name);
      uint64_t Type = (MIL::Proto *)MIL::IRNamedValueType::GetType(*v6);
      uint64_t v12 = (const MIL::IRValueType *)*((void *)v8 + 3);
      if (!v12) {
        operator new();
      }
      MIL::Proto::SerializeValueType(Type, v12, v11);
      v6 += 2;
    }
    while (v6 != v7);
  }
  uint64_t v13 = (*(uint64_t (**)(MIL::Proto *))(*(void *)this + 88))(this);
  uint64_t v14 = *(std::string **)v13;
  BOOL v15 = *(std::string **)(v13 + 8);
  while (v14 != v15)
    CoreML::Specification::MILSpec::Block::add_outputs((uint64_t)a2, v14++);
  long long v16 = (MIL::Proto ****)(*(uint64_t (**)(MIL::Proto *))(*(void *)this + 56))(this);
  uint64_t v17 = **v16;
  int v18 = (*v16)[1];
  while (v17 != v18)
  {
    int v19 = *v17;
    v17 += 2;
    int v20 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Operation>::TypeHandler>((uint64_t)a2 + 64);
    MIL::Proto::SerializeOperation(v19, v20, v21);
  }
  uint64_t Attributes = MIL::IRObject::GetAttributes(this);

  return MIL::Proto::SerializeAttributes(Attributes);
}

void sub_20F438BF0(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::operator[](uint64_t a1, const std::string *a2)
{
  uint64_t v4 = (std::string **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *uint64_t v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

std::string *CoreML::Specification::MILSpec::Block::add_outputs(uint64_t a1, std::string *__str)
{
  uint64_t v4 = (google::protobuf::Arena **)(a1 + 40);
  uint64_t v5 = *(int **)(a1 + 56);
  if (!v5)
  {
    int v7 = *(_DWORD *)(a1 + 52);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 40), v7 + 1);
    uint64_t v5 = *(int **)(a1 + 56);
    int v7 = *v5;
    goto LABEL_7;
  }
  uint64_t v6 = *(int *)(a1 + 48);
  int v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 48) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    goto LABEL_10;
  }
  if (v7 == *(_DWORD *)(a1 + 52)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v5 = v7 + 1;
  uint64_t v9 = *v4;
  if (!*v4) {
    operator new();
  }
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(int *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v11 + 1;
  *(void *)(v10 + 8 * v11 + 8) = Aligned;
LABEL_10:

  return std::string::operator=(Aligned, __str);
}

uint64_t MIL::Proto::SerializeOperation(MIL::Proto *this, const MIL::IROperation *a2, CoreML::Specification::MILSpec::Operation *a3)
{
  uint64_t v5 = (*(uint64_t (**)(MIL::Proto *, const MIL::IROperation *, CoreML::Specification::MILSpec::Operation *))(*(void *)this + 72))(this, a2, a3);
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
    if (std::string::find((const std::string *)v6, 46, 0) == -1)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      }
      else
      {
        long long v8 = *(_OWORD *)v6;
        __str.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
      }
    }
    else
    {
      std::string::size_type v7 = std::string::find((const std::string *)v6, 46, 0);
      std::string::basic_string(&__str, (const std::string *)v6, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v43);
    }
    google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)a2 + 16, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v9 = (*(uint64_t (**)(MIL::Proto *))(*(void *)this + 176))(this);
  uint64_t v10 = *(MIL::IRNamedValueType ***)v9;
  uint64_t v11 = *(MIL::IRNamedValueType ***)(v9 + 8);
  if (*(MIL::IRNamedValueType ***)v9 != v11)
  {
    do
    {
      uint64_t v12 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>((uint64_t)a2 + 48);
      uint64_t Name = (const std::string *)MIL::IRNamedValueType::GetName(*v10);
      if (*((long long **)v12 + 2) == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      std::string::operator=(*((std::string **)v12 + 2), Name);
      uint64_t Type = (MIL::Proto *)MIL::IRNamedValueType::GetType(*v10);
      long long v16 = (const MIL::IRValueType *)*((void *)v12 + 3);
      if (!v16) {
        operator new();
      }
      MIL::Proto::SerializeValueType(Type, v16, v15);
      v10 += 2;
    }
    while (v10 != v11);
  }
  uint64_t v40 = this;
  uint64_t v17 = (void *)(*(uint64_t (**)(MIL::Proto *))(*(void *)this + 160))(this);
  int v18 = (void *)*v17;
  uint64_t v41 = v17 + 1;
  if ((void *)*v17 != v17 + 1)
  {
    int v19 = (char *)a2 + 24;
    while (1)
    {
      uint64_t v21 = (MIL::IRArgument **)v18[7];
      int v20 = (MIL::IRArgument **)v18[8];
      if (v21 != v20) {
        break;
      }
LABEL_45:
      uint64_t v35 = (void *)v18[1];
      if (v35)
      {
        do
        {
          uint64_t v36 = v35;
          uint64_t v35 = (void *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint64_t v36 = (void *)v18[2];
          BOOL v37 = *v36 == (void)v18;
          int v18 = v36;
        }
        while (!v37);
      }
      int v18 = v36;
      if (v36 == v41) {
        goto LABEL_51;
      }
    }
    while (1)
    {
      unint64_t v22 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[]((uint64_t)v19, (const std::string *)(v18 + 4));
      uint64_t v23 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Argument_Binding>::TypeHandler>((uint64_t)&v22->__r_.__value_.__r.__words[2]);
      int v24 = (*(uint64_t (**)(void))(*(void *)*v21 + 16))();
      uint64_t v25 = *v21;
      if (v24)
      {
        uint64_t v26 = (const std::string *)MIL::IRArgument::GetName(v25);
        if (*((_DWORD *)v23 + 7) != 1)
        {
          CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)v23);
          *((_DWORD *)v23 + 7) = 1;
          *((void *)v23 + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_34:
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
        }
        uint64_t v27 = (long long *)*((void *)v23 + 2);
        if (v27 == &google::protobuf::internal::fixed_address_empty_string) {
          goto LABEL_34;
        }
        std::string::operator=((std::string *)v27, v26);
        goto LABEL_44;
      }
      uint64_t v28 = (*(uint64_t (**)(MIL::IRArgument *))(*(void *)v25 + 40))(v25);
      if (v28)
      {
        uint64_t v29 = (MIL::Proto *)v28;
        uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 40))(v28);
        if (!v30 || (uint64_t v32 = v30, !(*(unsigned int (**)(uint64_t))(*(void *)v30 + 120))(v30)))
        {
LABEL_41:
          if (*((_DWORD *)v23 + 7) != 2)
          {
            CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)v23);
            *((_DWORD *)v23 + 7) = 2;
            operator new();
          }
          MIL::Proto::SerializeValue(v29, *((const MIL::IRValue **)v23 + 2), v31);
          goto LABEL_44;
        }
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v32 + 128))(&__str, v32);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __str.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          if (*((_DWORD *)v23 + 7) != 1)
          {
            CoreML::Specification::MILSpec::Argument_Binding::clear_binding((uint64_t)v23);
            *((_DWORD *)v23 + 7) = 1;
            *((void *)v23 + 2) = &google::protobuf::internal::fixed_address_empty_string;
LABEL_36:
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          unint64_t v34 = (long long *)*((void *)v23 + 2);
          if (v34 == &google::protobuf::internal::fixed_address_empty_string) {
            goto LABEL_36;
          }
          std::string::operator=((std::string *)v34, &__str);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if (!size) {
            goto LABEL_41;
          }
        }
        else if (!size)
        {
          goto LABEL_41;
        }
      }
LABEL_44:
      v21 += 2;
      if (v21 == v20) {
        goto LABEL_45;
      }
    }
  }
LABEL_51:
  uint64_t Attributes = MIL::IRObject::GetAttributes(v40);
  return MIL::Proto::SerializeAttributes(Attributes);
}

void sub_20F43924C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::operator[](uint64_t a1, const std::string *a2)
{
  uint64_t v4 = (std::string **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *uint64_t v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

void MIL::Proto::SerializeValue(MIL::Proto *this, const MIL::IRValue *a2, CoreML::Specification::MILSpec::Value *a3)
{
  uint64_t v6 = (MIL::Proto *)(*(uint64_t (**)(MIL::Proto *, const MIL::IRValue *, CoreML::Specification::MILSpec::Value *))(*(void *)this + 32))(this, a2, a3);
  std::string::size_type v7 = (const MIL::IRValueType *)*((void *)a2 + 3);
  if (!v7) {
    operator new();
  }
  MIL::Proto::SerializeValueType(v6, v7, v5);
  uint64_t v8 = (*(uint64_t (**)(MIL::Proto *))(*(void *)this + 40))(this);
  if (v8)
  {
    uint64_t v9 = (MIL::Proto *)v8;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 80))(v8))
    {
      uint64_t v11 = (void *)(*(uint64_t (**)(MIL::Proto *))(*(void *)v9 + 88))(v9);
      std::string::basic_string[abi:ne180100]<0>(__p, "path");
      uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v11, (unsigned __int8 *)__p);
      if (!v12) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &v55);
      if (v54 < 0) {
        operator delete(__p[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "offset");
      uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v11, (unsigned __int8 *)__p);
      if (!v13) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = MIL::IRValue::GetScalar<unsigned long long>(*((const void **)v13 + 5));
      if (v54 < 0) {
        operator delete(__p[0]);
      }
      if (*((_DWORD *)a2 + 11) != 5)
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 5;
        operator new();
      }
      google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(*((void *)a2 + 4) + 16), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v55);
      if (*((_DWORD *)a2 + 11) != 5)
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 5;
        operator new();
      }
      *(void *)(*((void *)a2 + 4) + 24) = v14;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*((_DWORD *)a2 + 11) != 3)
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 3;
        operator new();
      }
      uint64_t v17 = *((void *)a2 + 4);
      if (*(_DWORD *)(v17 + 28) != 1)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v17);
        *(_DWORD *)(v17 + 28) = 1;
        operator new();
      }
      int v18 = *(const MIL::IRTensorValue **)(v17 + 16);
      MIL::Proto::SerializeTensorValue(v9, v18, v10);
    }
  }
  else
  {
    BOOL v15 = (MIL::IRListValue *)(*(uint64_t (**)(MIL::Proto *))(*(void *)this + 48))(this);
    if (v15)
    {
      if (*((_DWORD *)a2 + 11) != 3)
      {
        CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 3;
        operator new();
      }
      uint64_t v16 = *((void *)a2 + 4);
      if (*(_DWORD *)(v16 + 28) != 3)
      {
        CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v16);
        *(_DWORD *)(v16 + 28) = 3;
        operator new();
      }
      uint64_t v21 = *(void *)(v16 + 16);
      uint64_t Values = MIL::IRListValue::GetValues(v15);
      if (v23)
      {
        int v24 = (MIL::Proto **)Values;
        uint64_t v25 = v21 + 16;
        uint64_t v26 = 16 * v23;
        do
        {
          uint64_t v27 = *v24;
          v24 += 2;
          uint64_t v28 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v25);
          MIL::Proto::SerializeValue(v27, v28, v29);
          v26 -= 16;
        }
        while (v26);
      }
    }
    else
    {
      int v19 = (MIL::IRTupleValue *)(*(uint64_t (**)(MIL::Proto *))(*(void *)this + 56))(this);
      if (v19)
      {
        if (*((_DWORD *)a2 + 11) != 3)
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
          *((_DWORD *)a2 + 1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 3;
          operator new();
        }
        uint64_t v20 = *((void *)a2 + 4);
        if (*(_DWORD *)(v20 + 28) != 2)
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v20);
          *(_DWORD *)(v20 + 28) = 2;
          operator new();
        }
        uint64_t v33 = *(void *)(v20 + 16);
        uint64_t v34 = MIL::IRTupleValue::GetValues(v19);
        if (v35)
        {
          uint64_t v36 = (MIL::Proto **)v34;
          uint64_t v37 = v33 + 16;
          uint64_t v38 = 16 * v35;
          do
          {
            int v39 = *v36;
            v36 += 2;
            uint64_t v40 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(v37);
            MIL::Proto::SerializeValue(v39, v40, v41);
            v38 -= 16;
          }
          while (v38);
        }
      }
      else
      {
        uint64_t v30 = (MIL::IRDictionaryValue *)(*(uint64_t (**)(MIL::Proto *))(*(void *)this + 64))(this);
        if (!v30)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Provided type is not supported by the serializer.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        unint64_t v31 = v30;
        if (*((_DWORD *)a2 + 11) != 3)
        {
          CoreML::Specification::MILSpec::Value::clear_value((uint64_t)a2);
          *((_DWORD *)a2 + 1std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 3;
          operator new();
        }
        uint64_t v32 = *((void *)a2 + 4);
        if (*(_DWORD *)(v32 + 28) != 4)
        {
          CoreML::Specification::MILSpec::Value_ImmediateValue::clear_value(v32);
          *(_DWORD *)(v32 + 28) = 4;
          operator new();
        }
        uint64_t v42 = *(void *)(v32 + 16);
        uint64_t v43 = MIL::IRDictionaryValue::begin(v30);
        uint64_t v44 = MIL::IRDictionaryValue::end(v31);
        if (v43 != v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = v42 + 16;
          do
          {
            uint64_t v48 = google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::TypeHandler>(v46);
            __int16 v49 = (const MIL::IRValue *)*((void *)v48 + 2);
            if (!v49) {
              operator new();
            }
            MIL::Proto::SerializeValue(*(MIL::Proto **)(v43 + 16), v49, v47);
            long long v51 = (const MIL::IRValue *)*((void *)v48 + 3);
            if (!v51) {
              operator new();
            }
            MIL::Proto::SerializeValue(*(MIL::Proto **)(v43 + 32), v51, v50);
            uint64_t v43 = *(void *)v43;
          }
          while (v43 != v45);
        }
      }
    }
  }
}

void sub_20F4399D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  MEMORY[0x21056C700](v20, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t MIL::Proto::SerializeDimension(MIL::Proto *this, const MIL::IRDimension *a2, CoreML::Specification::MILSpec::Dimension *a3)
{
  if ((*(uint64_t (**)(MIL::Proto *, const MIL::IRDimension *, CoreML::Specification::MILSpec::Dimension *))(*(void *)this + 16))(this, a2, a3))
  {
    uint64_t v5 = MIL::IRDimension::AsConstant(this);
    if (*((_DWORD *)a2 + 7) != 1)
    {
      CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)a2);
      *((_DWORD *)a2 + 7) = 1;
      operator new();
    }
    uint64_t v6 = *((void *)a2 + 2);
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    *(void *)(v6 + 16) = result;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(MIL::Proto *))(*(void *)this + 24))(this);
    if (result)
    {
      if (*((_DWORD *)a2 + 7) != 2)
      {
        CoreML::Specification::MILSpec::Dimension::clear_dimension((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 2;
        operator new();
      }
      uint64_t v7 = *((void *)a2 + 2);
      uint64_t result = (*(uint64_t (**)(MIL::Proto *))(*(void *)this + 32))(this);
      *(unsigned char *)(v7 + 16) = result;
    }
  }
  return result;
}

void sub_20F439C40(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x1081C40B60F2DE8);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::ValueType::mutable_statetype(CoreML::Specification::MILSpec::ValueType *this)
{
  if (*((_DWORD *)this + 7) != 5)
  {
    CoreML::Specification::MILSpec::ValueType::clear_type((uint64_t)this);
    *((_DWORD *)this + 7) = 5;
    operator new();
  }
  return *((void *)this + 2);
}

void sub_20F439CE4(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C4084265165);
  _Unwind_Resume(a1);
}

uint64_t CoreML::Specification::MILSpec::StateType::mutable_wrappedtype(CoreML::Specification::MILSpec::StateType *this)
{
  if (!*((void *)this + 2)) {
    operator new();
  }
  return *((void *)this + 2);
}

void sub_20F439D58(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::operator[](uint64_t a1, const std::string *a2)
{
  uint64_t v4 = (std::string **)google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::operator[](*(uint64_t **)(a1 + 16), (uint64_t)a2);
  ValueTypeInternal = *v4;
  if (!*v4)
  {
    ValueTypeInternal = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::CreateValueTypeInternal((google::protobuf::Arena **)a1, a2);
    *uint64_t v4 = ValueTypeInternal;
  }
  return ValueTypeInternal + 1;
}

void MIL::Proto::SerializeTensorValue(MIL::Proto *this, const MIL::IRTensorValue *a2, CoreML::Specification::MILSpec::TensorValue *a3)
{
  uint64_t v5 = (*(uint64_t (**)(MIL::Proto *, const MIL::IRTensorValue *, CoreML::Specification::MILSpec::TensorValue *))(*(void *)this + 32))(this, a2, a3);
  switch((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5))
  {
    case 2u:
      uint64_t Data = MIL::IRTensorValue::GetDataView<BOOL>((uint64_t *)this);
      if (v7)
      {
        uint64_t v8 = (char *)Data;
        uint64_t v9 = v7;
        do
        {
          if (*((_DWORD *)a2 + 7) != 3)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 3;
            operator new();
          }
          uint64_t v10 = *((void *)a2 + 2);
          char v11 = *v8;
          int v12 = *(_DWORD *)(v10 + 16);
          if (v12 == *(_DWORD *)(v10 + 20))
          {
            google::protobuf::RepeatedField<BOOL>::Reserve((unsigned int *)(v10 + 16), v12 + 1);
            int v12 = *(_DWORD *)(v10 + 16);
          }
          uint64_t v13 = *(void *)(v10 + 24);
          *(_DWORD *)(v10 + 16) = v12 + 1;
          *(unsigned char *)(v13 + v12 + 8) = v11;
          ++v8;
          --v9;
        }
        while (v9);
      }
      return;
    case 3u:
      uint64_t v14 = MIL::IRTensorValue::GetDataView<std::string>((uint64_t *)this);
      if (v15)
      {
        uint64_t v16 = (std::string *)v14;
        uint64_t v17 = 24 * v15;
        do
        {
          if (*((_DWORD *)a2 + 7) != 4)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 4;
            operator new();
          }
          CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::add_values(*((void *)a2 + 2), v16++);
          v17 -= 24;
        }
        while (v17);
      }
      return;
    case 4u:
      uint64_t v18 = MIL::IRTensorValue::GetDataView<MIL::Fp16>((uint64_t *)this);
      uint64_t v20 = v19;
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      goto LABEL_144;
    case 5u:
      uint64_t v21 = MIL::IRTensorValue::GetDataView<float>((uint64_t *)this);
      if (v22)
      {
        uint64_t v23 = (int *)v21;
        uint64_t v24 = 4 * v22;
        do
        {
          if (*((_DWORD *)a2 + 7) != 1)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 1;
            operator new();
          }
          uint64_t v25 = *((void *)a2 + 2);
          int v26 = *v23;
          int v27 = *(_DWORD *)(v25 + 16);
          if (v27 == *(_DWORD *)(v25 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v25 + 16), v27 + 1);
            int v27 = *(_DWORD *)(v25 + 16);
          }
          uint64_t v28 = *(void *)(v25 + 24);
          *(_DWORD *)(v25 + 16) = v27 + 1;
          *(_DWORD *)(v28 + 4 * v27 + 8) = v26;
          ++v23;
          v24 -= 4;
        }
        while (v24);
      }
      return;
    case 6u:
      uint64_t v29 = MIL::IRTensorValue::GetDataView<double>((uint64_t *)this);
      if (v30)
      {
        unint64_t v31 = (uint64_t *)v29;
        uint64_t v32 = 8 * v30;
        do
        {
          if (*((_DWORD *)a2 + 7) != 6)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 6;
            operator new();
          }
          uint64_t v33 = *((void *)a2 + 2);
          uint64_t v34 = *v31;
          int v35 = *(_DWORD *)(v33 + 16);
          if (v35 == *(_DWORD *)(v33 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v33 + 16), v35 + 1);
            int v35 = *(_DWORD *)(v33 + 16);
          }
          uint64_t v36 = *(void *)(v33 + 24);
          *(_DWORD *)(v33 + 16) = v35 + 1;
          *(void *)(v36 + 8 * v35 + 8) = v34;
          ++v31;
          v32 -= 8;
        }
        while (v32);
      }
      return;
    case 7u:
      uint64_t v18 = MIL::IRTensorValue::GetDataView<MIL::Bf16>((uint64_t *)this);
      uint64_t v20 = v37;
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
LABEL_144:
      uint64_t v104 = *(long long **)(*((void *)a2 + 2) + 16);
      if (v104 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      std::string::size_type v105 = 2 * v20;
      goto LABEL_151;
    case 9u:
      uint64_t v38 = MIL::IRTensorValue::GetDataView<signed char>((uint64_t *)this);
      if (v39)
      {
        uint64_t v40 = (std::string::value_type *)v38;
        uint64_t v41 = v39;
        do
        {
          if (*((_DWORD *)a2 + 7) != 7)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 7;
            operator new();
          }
          uint64_t v42 = *(long long **)(*((void *)a2 + 2) + 16);
          if (v42 == &google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
          }
          std::string::value_type v43 = *v40++;
          std::string::push_back((std::string *)v42, v43);
          --v41;
        }
        while (v41);
      }
      return;
    case 0xAu:
      uint64_t v44 = MIL::IRTensorValue::GetDataView<short>((uint64_t *)this);
      if (v45)
      {
        uint64_t v46 = (__int16 *)v44;
        uint64_t v47 = 2 * v45;
        do
        {
          if (*((_DWORD *)a2 + 7) != 2)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 2;
            operator new();
          }
          uint64_t v48 = *((void *)a2 + 2);
          int v49 = *v46;
          int v50 = *(_DWORD *)(v48 + 16);
          if (v50 == *(_DWORD *)(v48 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v48 + 16), v50 + 1);
            int v50 = *(_DWORD *)(v48 + 16);
          }
          uint64_t v51 = *(void *)(v48 + 24);
          *(_DWORD *)(v48 + 16) = v50 + 1;
          *(_DWORD *)(v51 + 4 * v50 + 8) = v49;
          ++v46;
          v47 -= 2;
        }
        while (v47);
      }
      return;
    case 0xBu:
      uint64_t v52 = MIL::IRTensorValue::GetDataView<int>((uint64_t *)this);
      if (v53)
      {
        char v54 = (int *)v52;
        uint64_t v55 = 4 * v53;
        do
        {
          if (*((_DWORD *)a2 + 7) != 2)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 2;
            operator new();
          }
          uint64_t v56 = *((void *)a2 + 2);
          int v57 = *v54;
          int v58 = *(_DWORD *)(v56 + 16);
          if (v58 == *(_DWORD *)(v56 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v56 + 16), v58 + 1);
            int v58 = *(_DWORD *)(v56 + 16);
          }
          uint64_t v59 = *(void *)(v56 + 24);
          *(_DWORD *)(v56 + 16) = v58 + 1;
          *(_DWORD *)(v59 + 4 * v58 + 8) = v57;
          ++v54;
          v55 -= 4;
        }
        while (v55);
      }
      return;
    case 0xCu:
      uint64_t v60 = MIL::IRTensorValue::GetDataView<long long>((uint64_t *)this);
      if (v61)
      {
        std::string v62 = (uint64_t *)v60;
        uint64_t v63 = 8 * v61;
        do
        {
          if (*((_DWORD *)a2 + 7) != 5)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 5;
            operator new();
          }
          uint64_t v64 = *((void *)a2 + 2);
          uint64_t v65 = *v62;
          int v66 = *(_DWORD *)(v64 + 16);
          if (v66 == *(_DWORD *)(v64 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v64 + 16), v66 + 1);
            int v66 = *(_DWORD *)(v64 + 16);
          }
          uint64_t v67 = *(void *)(v64 + 24);
          *(_DWORD *)(v64 + 16) = v66 + 1;
          *(void *)(v67 + 8 * v66 + 8) = v65;
          ++v62;
          v63 -= 8;
        }
        while (v63);
      }
      return;
    case 0xDu:
      uint64_t v68 = MIL::IRTensorValue::GetDataView<MIL::Int4>(this);
      uint64_t v70 = ((v69 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v69 & 1);
      if (v70) {
        long long v71 = (const std::string::value_type *)v68;
      }
      else {
        long long v71 = 0;
      }
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      goto LABEL_153;
    case 0xEu:
      uint64_t v72 = MIL::IRTensorValue::GetDataView<unsigned char>(this);
      std::string::size_type v74 = v73;
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      goto LABEL_157;
    case 0xFu:
      uint64_t v75 = MIL::IRTensorValue::GetDataView<unsigned short>((uint64_t *)this);
      if (v76)
      {
        uint64_t v77 = (unsigned __int16 *)v75;
        uint64_t v78 = 2 * v76;
        do
        {
          if (*((_DWORD *)a2 + 7) != 2)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 2;
            operator new();
          }
          uint64_t v79 = *((void *)a2 + 2);
          int v80 = *v77;
          int v81 = *(_DWORD *)(v79 + 16);
          if (v81 == *(_DWORD *)(v79 + 20))
          {
            google::protobuf::RepeatedField<float>::Reserve((unsigned int *)(v79 + 16), v81 + 1);
            int v81 = *(_DWORD *)(v79 + 16);
          }
          uint64_t v82 = *(void *)(v79 + 24);
          *(_DWORD *)(v79 + 16) = v81 + 1;
          *(_DWORD *)(v82 + 4 * v81 + 8) = v80;
          ++v77;
          v78 -= 2;
        }
        while (v78);
      }
      return;
    case 0x10u:
      uint64_t v18 = MIL::IRTensorValue::GetDataView<unsigned int>((uint64_t *)this);
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      uint64_t v104 = *(long long **)(*((void *)a2 + 2) + 16);
      if (v104 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      std::string::size_type v105 = 4 * v83;
LABEL_151:
      uint64_t v106 = (const std::string::value_type *)v18;
      goto LABEL_160;
    case 0x11u:
      uint64_t v84 = MIL::IRTensorValue::GetDataView<unsigned long long>((uint64_t *)this);
      if (v85)
      {
        uint64_t v86 = (uint64_t *)v84;
        uint64_t v87 = 8 * v85;
        do
        {
          if (*((_DWORD *)a2 + 7) != 5)
          {
            CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
            *((_DWORD *)a2 + 7) = 5;
            operator new();
          }
          uint64_t v88 = *((void *)a2 + 2);
          uint64_t v89 = *v86;
          int v90 = *(_DWORD *)(v88 + 16);
          if (v90 == *(_DWORD *)(v88 + 20))
          {
            google::protobuf::RepeatedField<double>::Reserve((unsigned int *)(v88 + 16), v90 + 1);
            int v90 = *(_DWORD *)(v88 + 16);
          }
          uint64_t v91 = *(void *)(v88 + 24);
          *(_DWORD *)(v88 + 16) = v90 + 1;
          *(void *)(v91 + 8 * v90 + 8) = v89;
          ++v86;
          v87 -= 8;
        }
        while (v87);
      }
      return;
    case 0x13u:
      uint64_t v92 = MIL::IRTensorValue::GetDataView<MIL::UInt2>(this);
      if ((v93 & 3) != 0) {
        uint64_t v70 = ((v93 >> 2) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      }
      else {
        uint64_t v70 = (v93 >> 2) & 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v70) {
        long long v71 = (const std::string::value_type *)v92;
      }
      else {
        long long v71 = 0;
      }
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      goto LABEL_153;
    case 0x14u:
      uint64_t v94 = MIL::IRTensorValue::GetDataView<MIL::UInt4>(this);
      uint64_t v70 = ((v95 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v95 & 1);
      if (v70) {
        long long v71 = (const std::string::value_type *)v94;
      }
      else {
        long long v71 = 0;
      }
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      goto LABEL_153;
    case 0x15u:
      uint64_t v96 = MIL::IRTensorValue::GetDataView<MIL::UInt1>(this);
      if ((v97 & 7) != 0) {
        uint64_t v70 = (v97 >> 3) + 1;
      }
      else {
        uint64_t v70 = v97 >> 3;
      }
      if (v70) {
        long long v71 = (const std::string::value_type *)v96;
      }
      else {
        long long v71 = 0;
      }
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      goto LABEL_153;
    case 0x16u:
      uint64_t v98 = MIL::IRTensorValue::GetDataView<MIL::UInt3>(this);
      if (((3 * v99) & 7) != 0) {
        uint64_t v70 = ((unint64_t)(3 * v99) >> 3) + 1;
      }
      else {
        uint64_t v70 = (unint64_t)(3 * v99) >> 3;
      }
      if (v70) {
        long long v71 = (const std::string::value_type *)v98;
      }
      else {
        long long v71 = 0;
      }
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      goto LABEL_153;
    case 0x17u:
      uint64_t v100 = MIL::IRTensorValue::GetDataView<MIL::UInt6>(this);
      if (((6 * v101) & 6) != 0) {
        uint64_t v70 = (((unint64_t)(3 * v101) >> 2) & 0x1FFFFFFFFFFFFFFFLL) + 1;
      }
      else {
        uint64_t v70 = ((unint64_t)(3 * v101) >> 2) & 0x1FFFFFFFFFFFFFFFLL;
      }
      if (v70) {
        long long v71 = (const std::string::value_type *)v100;
      }
      else {
        long long v71 = 0;
      }
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
LABEL_153:
      uint64_t v104 = *(long long **)(*((void *)a2 + 2) + 16);
      if (v104 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t v106 = v71;
      std::string::size_type v105 = v70;
      goto LABEL_160;
    case 0x18u:
      uint64_t v72 = MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>((uint64_t *)this);
      std::string::size_type v74 = v102;
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
      goto LABEL_157;
    case 0x19u:
      uint64_t v72 = MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>((uint64_t *)this);
      std::string::size_type v74 = v103;
      if (*((_DWORD *)a2 + 7) != 7)
      {
        CoreML::Specification::MILSpec::TensorValue::clear_value((uint64_t)a2);
        *((_DWORD *)a2 + 7) = 7;
        operator new();
      }
LABEL_157:
      uint64_t v104 = *(long long **)(*((void *)a2 + 2) + 16);
      if (v104 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena();
      }
      uint64_t v106 = (const std::string::value_type *)v72;
      std::string::size_type v105 = v74;
LABEL_160:
      std::string::append((std::string *)v104, v106, v105);
      return;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Provided type is not supported by the serializer.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_20F43AA0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20F43AAA4()
{
}

void sub_20F43AAB8()
{
}

std::string *CoreML::Specification::MILSpec::TensorValue_RepeatedStrings::add_values(uint64_t a1, std::string *__str)
{
  uint64_t v4 = (google::protobuf::Arena **)(a1 + 16);
  uint64_t v5 = *(int **)(a1 + 32);
  if (!v5)
  {
    int v7 = *(_DWORD *)(a1 + 28);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 16), v7 + 1);
    uint64_t v5 = *(int **)(a1 + 32);
    int v7 = *v5;
    goto LABEL_7;
  }
  uint64_t v6 = *(int *)(a1 + 24);
  int v7 = *v5;
  if ((int)v6 < *v5)
  {
    *(_DWORD *)(a1 + 24) = v6 + 1;
    Aligned = *(std::string **)&v5[2 * v6 + 2];
    goto LABEL_10;
  }
  if (v7 == *(_DWORD *)(a1 + 28)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v5 = v7 + 1;
  uint64_t v9 = *v4;
  if (!*v4) {
    operator new();
  }
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::Arena::AddListNode(v9, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(int *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v11 + 1;
  *(void *)(v10 + 8 * v11 + 8) = Aligned;
LABEL_10:

  return std::string::operator=(Aligned, __str);
}

void google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena()
{
}

void sub_20F43ACC0(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

CoreML::Specification::MILSpec::NamedValueType *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::NamedValueType>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::NamedValueType **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::MILSpec::NamedValueType::NamedValueType(Aligned);
  google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_20F43ADE8(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::NamedValueType>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void google::protobuf::internal::arena_destruct_object<std::string>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

CoreML::Specification::MILSpec::Operation *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Operation>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Operation **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::MILSpec::Operation::Operation(Aligned);
  google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_20F43AF48(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C40B3FB24A3);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Operation>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

__n128 google::protobuf::internal::ArenaStringPtr::SetNoArena(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v4 = *a1;
  if (*a1 == a2) {
    operator new();
  }
  if (*(char *)(v4 + 23) < 0) {
    operator delete(*(void **)v4);
  }
  __n128 result = *a3;
  *(void *)(v4 + 16) = a3[1].n128_u64[0];
  *(__n128 *)uint64_t v4 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

CoreML::Specification::MILSpec::Argument_Binding *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Argument_Binding>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Argument_Binding **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::MILSpec::Argument_Binding::Argument_Binding(Aligned);
  google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_20F43B12C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument_Binding>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::Value *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Value>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Value **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::MILSpec::Value::Value(Aligned);
  google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_20F43B278(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C40000F1E19);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>::TypeHandler>(uint64_t a1)
{
  uint64_t v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    uint64_t v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *uint64_t v2 = v4 + 1;
  uint64_t v6 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair::DictionaryValue_KeyValuePair(Aligned);
  google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_20F43B3C4(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C40C9A46F13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::DictionaryValue_KeyValuePair>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void google::protobuf::RepeatedField<BOOL>::Reserve(unsigned int *a1, int a2)
{
  signed int v2 = a1[1];
  if (v2 < a2)
  {
    int v4 = (google::protobuf::Arena **)*((void *)a1 + 1);
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = 2 * v2;
    if (v6 <= a2) {
      int v6 = a2;
    }
    if (v6 <= 4) {
      int v7 = 4;
    }
    else {
      int v7 = v6;
    }
    if (v5) {
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x263F8C238], (v7 + 8));
    }
    else {
      Aligned = operator new((v7 + 8));
    }
    *((void *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = Aligned;
    void *Aligned = v5;
    a1[1] = v7;
    size_t v9 = *a1;
    if ((int)v9 >= 1) {
      memcpy(Aligned + 1, v4 + 1, v9);
    }
    if (v4 && !*v4)
    {
      operator delete(v4);
    }
  }
}

void google::protobuf::RepeatedField<float>::Reserve(unsigned int *a1, int a2)
{
  signed int v2 = a1[1];
  if (v2 < a2)
  {
    int v4 = (google::protobuf::Arena **)*((void *)a1 + 1);
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = 2 * v2;
    if (v6 <= a2) {
      int v6 = a2;
    }
    if (v6 <= 4) {
      unsigned int v7 = 4;
    }
    else {
      unsigned int v7 = v6;
    }
    uint64_t v8 = 4 * v7;
    if (v5) {
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x263F8C238], v8 + 8);
    }
    else {
      Aligned = operator new(v8 + 8);
    }
    *((void *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = Aligned;
    void *Aligned = v5;
    a1[1] = v7;
    uint64_t v10 = *a1;
    if ((int)v10 >= 1) {
      memcpy(Aligned + 1, v4 + 1, 4 * v10);
    }
    if (v4 && !*v4)
    {
      operator delete(v4);
    }
  }
}

void google::protobuf::RepeatedField<double>::Reserve(unsigned int *a1, int a2)
{
  signed int v2 = a1[1];
  if (v2 < a2)
  {
    int v4 = (google::protobuf::Arena **)*((void *)a1 + 1);
    if (v4) {
      uint64_t v5 = *v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = 2 * v2;
    if (v6 <= a2) {
      int v6 = a2;
    }
    if (v6 <= 4) {
      unsigned int v7 = 4;
    }
    else {
      unsigned int v7 = v6;
    }
    uint64_t v8 = 8 * v7;
    if (v5) {
      Aligned = google::protobuf::Arena::AllocateAligned(v5, MEMORY[0x263F8C238], v8 + 8);
    }
    else {
      Aligned = operator new(v8 + 8);
    }
    *((void *)a1 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = Aligned;
    void *Aligned = v5;
    a1[1] = v7;
    uint64_t v10 = *a1;
    if ((int)v10 >= 1) {
      memcpy(Aligned + 1, v4 + 1, 8 * v10);
    }
    if (v4 && !*v4)
    {
      operator delete(v4);
    }
  }
}

CoreML::Specification::MILSpec::Dimension *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::Dimension>::TypeHandler>(uint64_t a1)
{
  signed int v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    signed int v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::Dimension **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *signed int v2 = v4 + 1;
  int v6 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::MILSpec::Dimension::Dimension(Aligned);
  google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_20F43B7A8(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Dimension>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

CoreML::Specification::MILSpec::ValueType *google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<CoreML::Specification::MILSpec::ValueType>::TypeHandler>(uint64_t a1)
{
  signed int v2 = *(int **)(a1 + 16);
  if (!v2)
  {
    int v4 = *(_DWORD *)(a1 + 12);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a1, v4 + 1);
    signed int v2 = *(int **)(a1 + 16);
    int v4 = *v2;
    goto LABEL_7;
  }
  uint64_t v3 = *(int *)(a1 + 8);
  int v4 = *v2;
  if ((int)v3 < *v2)
  {
    *(_DWORD *)(a1 + 8) = v3 + 1;
    return *(CoreML::Specification::MILSpec::ValueType **)&v2[2 * v3 + 2];
  }
  if (v4 == *(_DWORD *)(a1 + 12)) {
    goto LABEL_6;
  }
LABEL_7:
  *signed int v2 = v4 + 1;
  int v6 = *(google::protobuf::Arena **)a1;
  if (!*(void *)a1) {
    operator new();
  }
  CoreML::Specification::MILSpec::ValueType::ValueType(Aligned);
  google::protobuf::Arena::AddListNode(v6, Aligned, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v8 + 1;
  *(void *)(v7 + 8 * v8 + 8) = Aligned;
  return Aligned;
}

void sub_20F43B8F4(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10A1C406A65A86DLL);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::ValueType>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v7 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::insert(a1, (long long *)&v6, (uint64_t)v5);
  uint64_t v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 + 24;
}

void sub_20F43B9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::CreateValueTypeInternal(google::protobuf::Arena **a1, const std::string *a2)
{
  int v4 = *a1;
  if (!v4) {
    operator new();
  }
  Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 144);
  std::string v6 = *a1;
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
  uint64_t v7 = *a1;
  CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)&Aligned[1]);
  google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>(v7, &Aligned[1]);
  std::string::operator=(Aligned, a2);
  return Aligned;
}

void sub_20F43BA88(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10B2C40A53FFCBDLL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((void)v17)
  {
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      long long v17 = v14;
      uint64_t v9 = v16;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
    }
    else
    {
      uint64_t v9 = v19;
    }
    uint64_t v10 = (google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 40);
    }
    else {
      Aligned = (std::string *)operator new(0x28uLL);
    }
    uint64_t v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(void *)(v12 + 24) = *((void *)a2 + 3);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(void *)(a3 + 32) = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(void *)(v4 + 32) = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    uint64_t v15 = (const void **)v4;
    double result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    void v6[3] = v12;
    goto LABEL_11;
  }
  *(void *)(a3 + 32) = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  uint64_t v15 = (const void **)a3;
  double result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (google::protobuf::Arena *)a1[5];
  uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8 * a3);
  do
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, (unsigned char *)v4);
    double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InsertUnique(a1, v6, v4, v8);
    uint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void ***)(a2 + 8 * a3);
  uint64_t v5 = *v4;
  do
  {
    uint64_t v6 = (unsigned char *)v5[4];
    uint64_t v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(google::protobuf::Arena **a1, uint64_t a2, size_t __sz)
{
  unint64_t v3 = *a1;
  if (v3) {
    return google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x263F8C250], 8 * a2);
  }
  else {
    return operator new(8 * a2);
  }
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree(uint64_t a1, void **a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)a2, a2[1]);
  if (!v3)
  {
    operator delete(a2);
  }
}

void std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(a1, *a2);
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(a1, a2[1]);
    if (!*(void *)(a1 + 16))
    {
      operator delete(a2);
    }
  }
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  _OWORD v9[2] = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_20F43C0EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8 * a2);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = 0;
  do
  {
    uint64_t v8 = (const void **)v3;
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(a3, &v8, (uint64_t *)&v8);
    ++v5;
    uint64_t v6 = *(void *)(v3 + 32);
    *(void *)(v3 + 32) = 0;
    uint64_t v3 = v6;
  }
  while (v6);
  return v5;
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_20F43C1C0(_Unwind_Exception *a1)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(uint64_t *result, const void ***a2, const void ****a3)
{
  if (a2 != (const void ***)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_hint_unique_key_args<std::string *,std::string * const&>(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      uint64_t v7 = v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ****)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ****)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void ***)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void ***)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_hint_unique_key_args<std::string *,std::string * const&>(uint64_t a1, uint64_t *a2, const void ***a3, uint64_t *a4)
{
  uint64_t v6 = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>((void *)a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((google::protobuf::Arena **)(a1 + 16), 1, 0);
    _OWORD v7[4] = *a4;
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, const void ***a5)
{
  BOOL v9 = a1 + 1;
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *a5, (const void **)a2[4]))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (const void **)a2[4], *a5))
    {
      *a3 = a2;
      *a4 = (uint64_t)a2;
      return a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (uint64_t *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = (uint64_t *)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = a2;
      do
      {
        uint64_t v15 = (uint64_t *)v18[2];
        BOOL v17 = *v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), *a5, (const void **)v15[4])) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  uint64_t v11 = (uint64_t *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      uint64_t v11 = (uint64_t *)v11[1];
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      unint64_t v12 = (uint64_t *)v16[2];
      BOOL v17 = *v12 == (void)v16;
      uint64_t v16 = v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (const void **)v12[4], *a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>((uint64_t)a1, a3, a5);
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[3] = (uint64_t *)((char *)a1[3] + 1);
  return result;
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(uint64_t a1, void *a2, const void ***a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 24;
    do
    {
      while (1)
      {
        uint64_t v8 = v4;
        if (!std::less<std::string>::operator()[abi:ne180100](v7, *a3, (const void **)v4[4])) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, (const void **)v8[4], *a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (uint64_t *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate(google::protobuf::Arena **a1, uint64_t a2, size_t __sz)
{
  uint64_t v3 = *a1;
  if (v3) {
    return google::protobuf::Arena::AllocateAligned(v3, MEMORY[0x263F8C250], 40 * a2);
  }
  else {
    return operator new(40 * a2);
  }
}

uint64_t *std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t v5 = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__find_equal<std::string *>(a1, &v9, a2);
  uint64_t v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::__tree_node<std::string*,void *>>::allocate((google::protobuf::Arena **)(a1 + 16), 1, 0);
    void v6[4] = *a3;
    std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__insert_node_at((uint64_t **)a1, v9, v7, v6);
  }
  return v6;
}

std::string *google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Function>::MapPair(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::MILSpec::Function::Function((CoreML::Specification::MILSpec::Function *)&this[1]);
  return this;
}

void sub_20F43C6B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<std::string>(google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
  }
  return result;
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Function>(google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>);
  }
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Function>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v7 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::insert(a1, (long long *)&v6, (uint64_t)v5);
  uint64_t v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 + 24;
}

void sub_20F43C7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::CreateValueTypeInternal(google::protobuf::Arena **a1, const std::string *a2)
{
  uint64_t v4 = *a1;
  if (!v4) {
    operator new();
  }
  Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 152);
  std::string v6 = *a1;
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
  uint64_t v7 = *a1;
  CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)&Aligned[1]);
  google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>(v7, &Aligned[1]);
  std::string::operator=(Aligned, a2);
  return Aligned;
}

void sub_20F43C874(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10B2C4008C62E43);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((void)v17)
  {
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      long long v17 = v14;
      uint64_t v9 = v16;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
    }
    else
    {
      uint64_t v9 = v19;
    }
    uint64_t v10 = (google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 40);
    }
    else {
      Aligned = (std::string *)operator new(0x28uLL);
    }
    uint64_t v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(void *)(v12 + 24) = *((void *)a2 + 3);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(void *)(a3 + 32) = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(void *)(v4 + 32) = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    uint64_t v15 = (const void **)v4;
    double result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    void v6[3] = v12;
    goto LABEL_11;
  }
  *(void *)(a3 + 32) = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  uint64_t v15 = (const void **)a3;
  double result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (google::protobuf::Arena *)a1[5];
  uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8 * a3);
  do
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, (unsigned char *)v4);
    double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InsertUnique(a1, v6, v4, v8);
    uint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void ***)(a2 + 8 * a3);
  uint64_t v5 = *v4;
  do
  {
    uint64_t v6 = (unsigned char *)v5[4];
    uint64_t v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  _OWORD v9[2] = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_20F43CE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_20F43CE60(_Unwind_Exception *a1)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Block>::MapPair(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::MILSpec::Block::Block((CoreML::Specification::MILSpec::Block *)&this[1]);
  return this;
}

void sub_20F43CED0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Block>(google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>);
  }
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Block>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v7 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::insert(a1, (long long *)&v6, (uint64_t)v5);
  uint64_t v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 + 24;
}

void sub_20F43CFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::CreateValueTypeInternal(google::protobuf::Arena **a1, const std::string *a2)
{
  uint64_t v4 = *a1;
  if (!v4) {
    operator new();
  }
  Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 72);
  std::string v6 = *a1;
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
  uint64_t v7 = *a1;
  CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)&Aligned[1]);
  google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>(v7, &Aligned[1]);
  std::string::operator=(Aligned, a2);
  return Aligned;
}

void sub_20F43D078(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10B2C40C743746ALL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((void)v17)
  {
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      long long v17 = v14;
      uint64_t v9 = v16;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
    }
    else
    {
      uint64_t v9 = v19;
    }
    BOOL v10 = (google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 40);
    }
    else {
      Aligned = (std::string *)operator new(0x28uLL);
    }
    uint64_t v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(void *)(v12 + 24) = *((void *)a2 + 3);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(void *)(a3 + 32) = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(void *)(v4 + 32) = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    uint64_t v15 = (const void **)v4;
    double result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    void v6[3] = v12;
    goto LABEL_11;
  }
  *(void *)(a3 + 32) = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  uint64_t v15 = (const void **)a3;
  double result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (google::protobuf::Arena *)a1[5];
  uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8 * a3);
  do
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, (unsigned char *)v4);
    double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InsertUnique(a1, v6, v4, v8);
    uint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void ***)(a2 + 8 * a3);
  uint64_t v5 = *v4;
  do
  {
    uint64_t v6 = (unsigned char *)v5[4];
    uint64_t v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  _OWORD v9[2] = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_20F43D604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Argument>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_20F43D664(_Unwind_Exception *a1)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Argument>::MapPair(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::MILSpec::Argument::Argument((CoreML::Specification::MILSpec::Argument *)&this[1]);
  return this;
}

void sub_20F43D6D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Argument>(google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>);
  }
  return result;
}

uint64_t google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Argument>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::operator[](uint64_t *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v6 = *(std::string *)a2;
  }
  uint64_t v7 = 0;
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::insert(a1, (long long *)&v6, (uint64_t)v5);
  uint64_t v3 = v5[0];
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v6.__r_.__value_.__l.__data_);
  }
  return v3 + 24;
}

void sub_20F43D7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::CreateValueTypeInternal(google::protobuf::Arena **a1, const std::string *a2)
{
  uint64_t v4 = *a1;
  if (!v4) {
    operator new();
  }
  Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 72);
  std::string v6 = *a1;
  Aligned->__r_.__value_.__l.__size_ = 0;
  Aligned->__r_.__value_.__r.__words[2] = 0;
  Aligned->__r_.__value_.__r.__words[0] = 0;
  google::protobuf::Arena::OwnDestructor<std::string>(v6, Aligned);
  uint64_t v7 = *a1;
  CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)&Aligned[1]);
  google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>(v7, &Aligned[1]);
  std::string::operator=(Aligned, a2);
  return Aligned;
}

void sub_20F43D87C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10B2C40CC7398DALL);
  _Unwind_Resume(a1);
}

double google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::insert@<D0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v17);
  if ((void)v17)
  {
    uint64_t v7 = *((void *)&v17 + 1);
    uint64_t v8 = v18;
    *(void *)a3 = v17;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v8;
    *(unsigned char *)(a3 + 24) = 0;
  }
  else
  {
    if (google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::ResizeIfLoadIsOutOfRange(a1, *a1 + 1))
    {
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::FindHelper((uint64_t)a1, (unsigned __int8 *)a2, 0, &v14);
      long long v17 = v14;
      uint64_t v9 = v16;
      uint64_t v18 = v15;
      uint64_t v19 = v16;
    }
    else
    {
      uint64_t v9 = v19;
    }
    BOOL v10 = (google::protobuf::Arena *)a1[5];
    if (v10) {
      Aligned = (std::string *)google::protobuf::Arena::AllocateAligned(v10, MEMORY[0x263F8C250], 40);
    }
    else {
      Aligned = (std::string *)operator new(0x28uLL);
    }
    uint64_t v12 = (uint64_t)Aligned;
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(Aligned, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v13 = *a2;
      Aligned->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&Aligned->__r_.__value_.__l.__data_ = v13;
    }
    *(void *)(v12 + 24) = *((void *)a2 + 3);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(a1, v9, v12, (uint64_t *)&v14);
    ++*a1;
    double result = *(double *)&v14;
    *(_OWORD *)a3 = v14;
    *(void *)(a3 + 16) = v15;
    *(unsigned char *)(a3 + 24) = 1;
  }
  return result;
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::ResizeIfLoadIsOutOfRange(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = ((3 * v2) >> 2) & 0xFFFFFFFFFFFFFFFLL;
  if (v3 <= a2)
  {
    if (v2 <= 0x800000000000000)
    {
      uint64_t v6 = 2 * v2;
LABEL_16:
      google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize(a1, v6);
      return 1;
    }
  }
  else if (v2 >= 9 && (12 * v2) >> 6 >= a2)
  {
    char v7 = 0;
    do
      ++v7;
    while ((((5 * a2) >> 2) + 1) << v7 < v3);
    uint64_t v6 = v2 >> v7 <= 8 ? 8 : v2 >> v7;
    if (v6 != v2) {
      goto LABEL_16;
    }
  }
  return 0;
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4 = a3;
  unint64_t v5 = a2;
  uint64_t v6 = result;
  uint64_t v8 = result[4];
  uint64_t v9 = *(void *)(v8 + 8 * a2);
  if (!v9)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(v8 + 8 * a2) = a3;
    goto LABEL_8;
  }
  if (v9 != *(void *)(v8 + 8 * (a2 ^ 1)))
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(v8 + 8 * a2);
    do
    {
      ++v10;
      uint64_t v11 = *(void *)(v11 + 32);
    }
    while (v11);
    if (v10 < 8)
    {
      *(void *)(a3 + 32) = v9;
      *(void *)(v8 + 8 * a2) = a3;
LABEL_11:
      *a4 = v4;
      a4[1] = (uint64_t)v6;
      a4[2] = v5;
      return result;
    }
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TreeConvert((uint64_t)result, a2);
    *(void *)(v4 + 32) = 0;
    uint64_t v14 = *(void *)(v6[4] + 8 * v5);
    uint64_t v15 = (const void **)v4;
    double result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v14, &v15, (uint64_t *)&v15);
    v5 &= ~1uLL;
    uint64_t v4 = result[4];
LABEL_8:
    unint64_t v12 = v6[3];
    if (v5 < v12) {
      unint64_t v12 = v5;
    }
    void v6[3] = v12;
    goto LABEL_11;
  }
  *(void *)(a3 + 32) = 0;
  uint64_t v13 = *(void *)(v8 + 8 * a2);
  uint64_t v15 = (const void **)a3;
  double result = std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::__emplace_unique_key_args<std::string *,std::string *>(v13, &v15, (uint64_t *)&v15);
  *a4 = result[4];
  a4[1] = (uint64_t)v6;
  a4[2] = v5 & 0xFFFFFFFFFFFFFFFELL;
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::Resize(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  a1[1] = a2;
  unint64_t v5 = (void *)a1[4];
  uint64_t v9 = (google::protobuf::Arena *)a1[5];
  uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<void *>::allocate(&v9, a2, 0);
  bzero(v6, 8 * a2);
  unint64_t v7 = a1[3];
  a1[3] = a1[1];
  a1[4] = (uint64_t)v6;
  while (v7 < v4)
  {
    uint64_t v8 = v5[v7];
    if (v8)
    {
      if (v8 == v5[v7 ^ 1]) {
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TransferTree(a1, (uint64_t)v5, v7++);
      }
      else {
        google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TransferList(a1, (uint64_t)v5, v7);
      }
    }
    ++v7;
  }
  if (!a1[5]) {
    operator delete(v5);
  }
}

uint64_t *google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TransferList(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8 * a3);
  do
  {
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, (unsigned char *)v4);
    double result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(a1, v6, v4, v8);
    uint64_t v4 = v5;
  }
  while (v5);
  return result;
}

void google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TransferTree(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void ***)(a2 + 8 * a3);
  uint64_t v5 = *v4;
  do
  {
    uint64_t v6 = (unsigned char *)v5[4];
    uint64_t v7 = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Block>::InnerMap::BucketNumber((uint64_t)a1, v6);
    google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::InsertUnique(a1, v7, (uint64_t)v6, v11);
    uint64_t v8 = (void *)v5[1];
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        uint64_t v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v5[2];
        BOOL v10 = *v9 == (void)v5;
        uint64_t v5 = v9;
      }
      while (!v10);
    }
    uint64_t v5 = v9;
  }
  while (v9 != v4 + 1);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::DestroyTree((uint64_t)a1, v4);
}

uint64_t google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::TreeConvert(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(google::protobuf::Arena **)(a1 + 40);
  if (v4) {
    Aligned = google::protobuf::Arena::AllocateAligned(v4, MEMORY[0x263F8C250], 32);
  }
  else {
    Aligned = (uint64_t *)operator new(0x20uLL);
  }
  uint64_t v6 = (uint64_t)Aligned;
  v9[1] = *(void **)(a1 + 40);
  _OWORD v9[2] = 0;
  uint64_t v8 = v9;
  v9[0] = 0;
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::set[abi:ne180100](Aligned, (uint64_t)&v8);
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy((uint64_t)&v8, v9[0]);
  google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2, v6);
  uint64_t result = google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::CopyListToTree(a1, a2 ^ 1, v6);
  *(void *)(*(void *)(a1 + 32) + 8 * (a2 ^ 1)) = v6;
  *(void *)(*(void *)(a1 + 32) + 8 * a2) = v6;
  return result;
}

void sub_20F43DE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t *std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Value>::MapAllocator<std::string *>>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  uint64_t v3 = *(void *)(a2 + 16);
  a1[1] = 0;
  a1[2] = v3;
  a1[3] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::insert[abi:ne180100]<std::__tree_const_iterator<std::string *,std::__tree_node<std::string *,void *> *,long>>(a1, *(const void ****)a2, (const void ****)(a2 + 8));
  return a1;
}

void sub_20F43DE68(_Unwind_Exception *a1)
{
  std::__tree<std::string *,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::InnerMap::KeyCompare,google::protobuf::Map<std::string,CoreML::Specification::MILSpec::Function>::MapAllocator<std::string *>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

std::string *google::protobuf::MapPair<std::string,CoreML::Specification::MILSpec::Value>::MapPair(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  CoreML::Specification::MILSpec::Value::Value((CoreML::Specification::MILSpec::Value *)&this[1]);
  return this;
}

void sub_20F43DED8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

google::protobuf::Arena *google::protobuf::Arena::OwnDestructor<CoreML::Specification::MILSpec::Value>(google::protobuf::Arena *result, void *a2)
{
  if (a2) {
    return (google::protobuf::Arena *)google::protobuf::Arena::AddListNode(result, a2, (void (*)(void *))google::protobuf::internal::arena_destruct_object<CoreML::Specification::MILSpec::Value>);
  }
  return result;
}

uint64_t MIL::Text::Parser::Program::Program(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  *(void *)a1 = &unk_26C25C090;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = a4;
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(void *)a3 + 24))(a3);
  *(void *)(a1 + 32) = *(void *)MIL::Scanner::Token::GetLocation(v7);
  *(void *)a1 = &unk_26C25A458;
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  return a1;
}

void MIL::Text::Parser::Program::Parse(MIL::Text::Parser::Program *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 16);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v16);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v15);
  uint64_t v2 = MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Parse<MIL::Text::Parser::SYNTAX_VERSION>((__n128 *)this);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  (*(void (**)(const MIL::ParserOptions **__return_ptr))(*(void *)Options + 16))(&v14);
  (*(void (**)(const MIL::ParserOptions *, uint64_t))(*(void *)v14 + 96))(v14, v2);
  std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions &,void>(v14, &v13);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v12);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOptWithParserContext<MIL::Text::Parser::AttributesMap>((uint64_t)this, v13, (uint64_t)v11);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v10);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOptWithParserContext<MIL::Text::Parser::FunctionMap>((uint64_t)this, v13, (uint64_t)v9);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 8);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v8);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 56);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v7);
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
  MIL::TextLocationFromScannerLocation(v4, v6);
}

void sub_20F43E3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&a9);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&__p);
  uint64_t v44 = *v41;
  uint64_t *v41 = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a41);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v42 - 192);
  uint64_t v45 = *(std::__shared_weak_count **)(v42 - 112);
  if (v45) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v45);
  }
  uint64_t v46 = *(void *)(v42 - 104);
  *(void *)(v42 - 104) = 0;
  if (v46) {
    (*(void (**)(uint64_t))(*(void *)v46 + 8))(v46);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect(uint64_t a1, int a2)
{
  uint64_t Options = MIL::ParserContext::GetOptions(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  uint64_t v6 = *(void *)(a1 + 16);

  return MIL::Scanner::Expect(v6, a2, v5);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Parse<MIL::Text::Parser::SYNTAX_VERSION>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C0C0;
  v4[1] = v1;
  __n128 v5 = a1[1];
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25BF80;
  return MIL::Text::Parser::SYNTAX_VERSION::Parse((MIL::Text::Parser::SYNTAX_VERSION *)v4);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOptWithParserContext<MIL::Text::Parser::AttributesMap>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  v8[0] = &unk_26C25C140;
  v8[1] = v5;
  _OWORD v8[2] = v4;
  uint64_t v8[3] = a2;
  uint64_t v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  _OWORD v8[4] = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25B320;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::AttributesMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt((uint64_t)v8, a3);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOptWithParserContext<MIL::Text::Parser::FunctionMap>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  v8[0] = &unk_26C25C170;
  v8[1] = v5;
  _OWORD v8[2] = v4;
  uint64_t v8[3] = a2;
  uint64_t v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
  _OWORD v8[4] = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A508;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::ParseOpt((uint64_t)v8, a3);
}

void MIL::TextLocationFromScannerLocation(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  MIL::TextFileLocation::Make();
}

void sub_20F43E878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a15) {
    MIL::Builder::FunctionBuilder::FunctionBuilderImpl::FunctionBuilderImpl();
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::Function::Parse(MIL::Text::Parser::Function *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 17);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v28);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v27);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v26);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v25);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v24);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v23);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::IDTypeBindingMap>((__n128 *)this, &v22);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v21);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v20);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 72))(Options);
  uint64_t Opset = 0;
  uint64_t v4 = (MIL::Opsets::Train::ios16Train::ios16_trainOpset *)*((void *)this + 1);
  if (v3)
  {
    uint64_t Opset = (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *, std::string *))(*(void *)v4 + 16))(v4, &v25);
  }
  else
  {
    if (!Opset)
    {
      uint64_t v12 = *((void *)this + 4);
      uint64_t v13 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 24))(v13);
      MIL::TextLocationFromScannerLocation(v12, v14);
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::Block,MIL::IROpset const*&>((__n128 *)this, &Opset, &v18);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::OpsetBlockMap>((__n128 *)this, &v16);
  if (v18) {
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::string&,std::unique_ptr<MIL::IRBlock>>(&v16, (const void **)&v25.__r_.__value_.__l.__data_, (uint64_t)&v25, &v18);
  }
  if (v3)
  {
    uint64_t v5 = v16;
    if (v16 != v17)
    {
      do
      {
        if ((*(uint64_t (**)(void, uint64_t *))(**((void **)this + 1) + 16))(*((void *)this + 1), v5 + 4))
        {
          uint64_t v6 = (uint64_t *)v5[1];
          if (v6)
          {
            do
            {
              uint64_t v7 = v6;
              uint64_t v6 = (uint64_t *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              uint64_t v7 = (uint64_t *)v5[2];
              BOOL v8 = *v7 == (void)v5;
              uint64_t v5 = v7;
            }
            while (!v8);
          }
        }
        else
        {
          uint64_t v7 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer(&v16, v5);
          std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)(v5 + 4));
          operator delete(v5);
        }
        uint64_t v5 = v7;
      }
      while (v7 != v17);
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 11);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v15);
  uint64_t v9 = *((void *)this + 4);
  uint64_t v10 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 24))(v10);
  MIL::TextLocationFromScannerLocation(v9, v11);
}

void sub_20F43EDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,std::__shared_weak_count *a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,char *a54)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a42);
  }
  if (v55) {
    __cxa_free_exception(v54);
  }
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a44);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a53, a54);
  if (*(char *)(v56 - 153) < 0) {
    operator delete(*(void **)(v56 - 176));
  }
  if (*(char *)(v56 - 97) < 0) {
    operator delete(*(void **)(v56 - 120));
  }
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(__n128 *a1@<X0>, std::string *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5[0] = &unk_26C25C1A0;
  v5[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5[0] = &unk_26C25BFD8;
  MIL::Text::Parser::ID::Parse((MIL::Text::Parser::ID *)v5, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::IDTypeBindingMap>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C1D0;
  v6[1] = v3;
  __n128 v7 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25B3D0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::ParseOpt((uint64_t)v6, a2);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::AttributesMap>@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C140;
  v6[1] = v3;
  __n128 v7 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25B320;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::AttributesMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt((uint64_t)v6, a2);
}

uint64_t anonymous namespace'::RegisterOrTryGetOpset(MIL::Opsets::Train::ios16Train::ios16_trainOpset *a1, uint64_t *a2)
{
  uint64_t result = (*(uint64_t (**)(MIL::Opsets::Train::ios16Train::ios16_trainOpset *))(*(void *)a1 + 16))(a1);
  if (!result)
  {
    if (*((char *)a2 + 23) < 0)
    {
      uint64_t v9 = a2[1];
      if (v9 != 5)
      {
        if (v9 == 11)
        {
          if (*(void *)*a2 != 0x72745F3731736F69 || *(void *)(*a2 + 3) != 0x6E696172745F3731)
          {
            uint64_t v8 = (uint64_t *)*a2;
LABEL_18:
            uint64_t v11 = *v8;
            uint64_t v12 = *(uint64_t *)((char *)v8 + 3);
            if (v11 == 0x72745F3631736F69 && v12 == 0x6E696172745F3631) {
              MIL::Opsets::Train::ios16Train::ios16_trainOpset::Register(a1, v5);
            }
            return 0;
          }
LABEL_60:
          MIL::Opsets::Train::ios17Train::ios17_trainOpset::Register(a1, v5);
        }
        return 0;
      }
      uint64_t v18 = (uint64_t *)*a2;
      if (*(_DWORD *)*a2 != 829648745 || *(unsigned char *)(*a2 + 4) != 56)
      {
        if (*(_DWORD *)v18 != 829648745 || *((unsigned char *)v18 + 4) != 55)
        {
          if (*(_DWORD *)v18 != 829648745 || *((unsigned char *)v18 + 4) != 54)
          {
            int v22 = *(_DWORD *)v18;
            int v23 = *((unsigned __int8 *)v18 + 4);
            if (v22 != 829648745 || v23 != 53) {
              return 0;
            }
            goto LABEL_59;
          }
LABEL_63:
          MIL::Opsets::Common::ios16::ios16Opset::Register(a1, v5);
        }
LABEL_62:
        MIL::Opsets::Common::ios17::ios17Opset::Register(a1, v5);
      }
    }
    else
    {
      int v6 = *((unsigned __int8 *)a2 + 23);
      if (v6 != 5)
      {
        if (v6 == 11)
        {
          BOOL v7 = *a2 == 0x72745F3731736F69 && *(uint64_t *)((char *)a2 + 3) == 0x6E696172745F3731;
          uint64_t v8 = a2;
          if (!v7) {
            goto LABEL_18;
          }
          goto LABEL_60;
        }
        return 0;
      }
      if (*(_DWORD *)a2 != 829648745 || *((unsigned char *)a2 + 4) != 56)
      {
        if (*(_DWORD *)a2 != 829648745 || *((unsigned char *)a2 + 4) != 55)
        {
          if (*(_DWORD *)a2 != 829648745 || *((unsigned char *)a2 + 4) != 54)
          {
            if (*(_DWORD *)a2 != 829648745 || *((unsigned char *)a2 + 4) != 53) {
              return 0;
            }
LABEL_59:
            MIL::Opsets::Common::ios15::ios15Opset::Register(a1, v5);
          }
          goto LABEL_63;
        }
        goto LABEL_62;
      }
    }
    MIL::Opsets::Common::ios18::ios18Opset::Register(a1, v5);
  }
  return result;
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::Block,MIL::IROpset const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = a1->n128_u64[1];
  v8[0] = &unk_26C25C200;
  v8[1] = v5;
  __n128 v9 = a1[1];
  int v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  uint64_t v10 = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A610;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt((uint64_t)v8, *a2, a3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::OpsetBlockMap>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C230;
  v6[1] = v3;
  __n128 v7 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25A5B8;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt((uint64_t)v6, a2);
}

void MIL::Text::Parser::FunctionMap::Parse(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::Function>(this);
}

void sub_20F43F720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v26 - 72);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v25);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::Function>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v3[0] = &unk_26C25C260;
  v3[1] = v1;
  __n128 v4 = a1[1];
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  uint64_t v5 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v3[0] = &unk_26C25A4B0;
  MIL::Text::Parser::Function::Parse((MIL::Text::Parser::Function *)v3);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::Function>@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C260;
  v6[1] = v3;
  __n128 v7 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25A4B0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt((uint64_t)v6, a2);
}

void MIL::Text::Parser::OpsetBlock::Parse(MIL::Text::Parser::OpsetBlock *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v9);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v8);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v7);
  if (!Opset)
  {
    uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if (((*(uint64_t (**)(uint64_t))(*(void *)Options + 72))(Options) & 1) == 0)
    {
      uint64_t v3 = *((void *)this + 4);
      uint64_t v4 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4);
      MIL::TextLocationFromScannerLocation(v3, v5);
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::Block,MIL::IROpset const*&>((__n128 *)this, &Opset);
}

void sub_20F43FAF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (v27) {
    __cxa_free_exception(v26);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (*(char *)(v28 - 65) < 0) {
    operator delete(*(void **)(v28 - 88));
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::Block,MIL::IROpset const*&>(__n128 *a1, const MIL::IROpset **a2)
{
  unint64_t v3 = a1->n128_u64[1];
  v5[0] = &unk_26C25C200;
  v5[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5[0] = &unk_26C25A610;
  MIL::Text::Parser::Block::Parse((MIL::Text::Parser::Block *)v5, *a2);
}

void MIL::Text::Parser::OpsetBlockMap::Parse(__n128 *this@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::OpsetBlock>(this);
}

void sub_20F43FE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>::~pair(v26 - 64);
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v25, *(void **)(v25 + 8));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::OpsetBlock>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v3[0] = &unk_26C25C290;
  v3[1] = v1;
  __n128 v4 = a1[1];
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  uint64_t v5 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v3[0] = &unk_26C25A560;
  MIL::Text::Parser::OpsetBlock::Parse((MIL::Text::Parser::OpsetBlock *)v3);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt<MIL::Text::Parser::OpsetBlock>@<D0>(__n128 *a1@<X0>, _OWORD *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C290;
  v6[1] = v3;
  __n128 v7 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25A560;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt((uint64_t)v6, a2);
}

void MIL::Text::Parser::Block::Parse(MIL::Text::Parser::Block *this, const MIL::IROpset *a2)
{
  uint64_t v15 = a2;
  MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::BlockInputDecls>((__n128 *)this, v14);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v13);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v12);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::OpList,MIL::IROpset const*&>((__n128 *)this, (uint64_t *)&v15, v11);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 8);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v10);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 12);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v9);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v8);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::IDList>((__n128 *)this, v7);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
  uint64_t v3 = *((void *)this + 4);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  MIL::TextLocationFromScannerLocation(v3, v5);
}

void sub_20F4401E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void ***a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a18 = (void **)(v18 - 160);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a18);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v18 - 104);
  *(void *)(v18 - 104) = v18 - 64;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 104));
  _Unwind_Resume(a1);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::BlockInputDecls>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C2C0;
  v6[1] = v3;
  __n128 v7 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25A6C0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::BlockInputDecls,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt((uint64_t)v6, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::OpList,MIL::IROpset const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = a1->n128_u64[1];
  v8[0] = &unk_26C25C2F0;
  v8[1] = v5;
  __n128 v9 = a1[1];
  __n128 v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  uint64_t v10 = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A770;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::ParseOpt((uint64_t)v8, *a2, a3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::IDList>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C320;
  v6[1] = v3;
  __n128 v7 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25B480;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDList,std::vector<std::string>>::ParseOpt((uint64_t)v6, a2);
}

void MIL::Text::Parser::BlockList::Parse(__n128 *this@<X0>, const MIL::IROpset *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::Parse<MIL::Text::Parser::Block,MIL::IROpset const*&>(this, &v3);
}

void sub_20F440748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a11);
  long long v17 = a16;
  a16 = 0;
  if (v17) {
    (*((void (**)(void **))*v17 + 1))(v17);
  }
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::BlockInputDecls::Parse(__n128 *this@<X0>, void *a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v5);
  MIL::Text::Parser::Rule<MIL::Text::Parser::BlockInputDecls,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt<MIL::Text::Parser::IDTypeBindingList>(this, a2);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v4);
}

void sub_20F440838(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::BlockInputDecls,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt<MIL::Text::Parser::IDTypeBindingList>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C350;
  v6[1] = v3;
  __n128 v7 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25B428;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingList,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt((uint64_t)v6, a2);
}

void MIL::Text::Parser::Op::Parse(MIL::Text::Parser::Op *this, const MIL::IROpset *a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = a2;
  long long v18 = 0uLL;
  unint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  if (MIL::Scanner::Token::GetType(v3) != 54) {
    MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::Parse<MIL::Text::Parser::IDTypeBindingList>((__n128 *)this, &v16);
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &__p);
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  if (MIL::Scanner::Token::GetType(v4) == 1)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 16))(&v16);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v16);
    uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if ((*(int (**)(uint64_t))(*(void *)Options + 88))(Options) <= 2)
    {
      uint64_t v10 = *((void *)this + 4);
      uint64_t v11 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 24))(v11);
      MIL::TextLocationFromScannerLocation(v10, v12);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v22);
    if (!Opset)
    {
      uint64_t v13 = *((void *)this + 4);
      uint64_t v14 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 24))(v14);
      MIL::TextLocationFromScannerLocation(v13, v15);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v21);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    (*(void (**)(uint64_t))(*(void *)Opset + 16))(Opset);
  }
  uint64_t v7 = *((void *)this + 4);
  uint64_t v8 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 24))(v8);
  MIL::TextLocationFromScannerLocation(v7, v9);
}

void sub_20F4412D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,std::__shared_weak_count *a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a57 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v73 - 233) < 0) {
    operator delete(*(void **)(v73 - 256));
  }
  if (*(char *)(v73 - 89) < 0) {
    operator delete(*(void **)(v73 - 112));
  }
  if (*(char *)(v73 - 113) < 0) {
    operator delete(*(void **)(v73 - 136));
  }
  if (a59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a59);
  }
  if (v72) {
    __cxa_free_exception(v71);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  uint64_t v75 = *(std::__shared_weak_count **)(v73 - 208);
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  if (a65 < 0) {
    operator delete(a60);
  }
  *(void *)(v73 - 216) = &a70;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v73 - 216));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::Parse<MIL::Text::Parser::IDTypeBindingList>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C350;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25B428;
  MIL::Text::Parser::IDTypeBindingList::Parse(&v5, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::IDArgumentBindingMap>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C380;
  v6[1] = v3;
  __n128 v7 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25B218;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::ParseOpt((uint64_t)v6, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::BlockList,MIL::IROpset const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = a1->n128_u64[1];
  v8[0] = &unk_26C25C3B0;
  v8[1] = v5;
  __n128 v9 = a1[1];
  __n128 v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  uint64_t v10 = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A668;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::BlockList,std::vector<std::shared_ptr<MIL::IRBlock>>,MIL::IROpset const*>::ParseOpt((uint64_t)v8, *a2, a3);
}

void MIL::Text::Parser::OpList::Parse(__n128 *this@<X0>, const MIL::IROpset *a2@<X1>, void *a3@<X8>)
{
  unint64_t v3 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::Parse<MIL::Text::Parser::Op,MIL::IROpset const*&>(this, &v3);
}

void sub_20F441A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, std::__shared_weak_count *a10, uint64_t a11, void *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::Parse<MIL::Text::Parser::Op,MIL::IROpset const*&>(__n128 *a1, const MIL::IROpset **a2)
{
  unint64_t v3 = a1->n128_u64[1];
  v5[0] = &unk_26C25C3E0;
  v5[1] = v3;
  __n128 v6 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5[0] = &unk_26C25A718;
  MIL::Text::Parser::Op::Parse((MIL::Text::Parser::Op *)v5, *a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::ParseOpt<MIL::Text::Parser::Op,MIL::IROpset const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = a1->n128_u64[1];
  v8[0] = &unk_26C25C3E0;
  v8[1] = v5;
  __n128 v9 = a1[1];
  __n128 v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  uint64_t v10 = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A718;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt((uint64_t)v8, *a2, a3);
}

uint64_t MIL::Text::Parser::Value::Parse@<X0>(__n128 *this@<X0>, void *a2@<X8>)
{
  __n128 v9 = (const MIL::IRValueType *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v8);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>(this, &v9, &v7);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v6);
  __n128 v4 = v7;
  *a2 = v7;
  if (v4) {
    operator new();
  }
  uint64_t result = 0;
  a2[1] = 0;
  return result;
}

void sub_20F441CE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a13) {
  _Unwind_Resume(exception_object);
  }
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C410;
  v4[1] = v1;
  __n128 v5 = a1[1];
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25AB90;
  return MIL::Text::Parser::Type::Parse((MIL::Text::Parser::Type *)v4);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>@<X0>(__n128 *a1@<X0>, const MIL::IRValueType **a2@<X1>, uint64_t **a3@<X8>)
{
  unint64_t v5 = a1->n128_u64[1];
  v8[0] = &unk_26C25C440;
  v8[1] = v5;
  __n128 v9 = a1[1];
  uint64_t v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  uint64_t v10 = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A878;
  return MIL::Text::Parser::ValueLiteral::Parse((MIL::Text::Parser::ValueLiteral *)v8, *a2, a3);
}

uint64_t MIL::Text::Parser::ValueAssign::Parse@<X0>(__n128 *this@<X0>, void *a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v5);
  return MIL::Text::Parser::Rule<MIL::Text::Parser::ValueAssign,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Value>(this, a2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::ValueAssign,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Value>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6.n128_u64[0] = (unint64_t)&unk_26C25C470;
  v6.n128_u64[1] = v3;
  __n128 v7 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6.n128_u64[0] = (unint64_t)&unk_26C25A7C8;
  return MIL::Text::Parser::Value::Parse(&v6, a2);
}

uint64_t *MIL::Text::Parser::ValueLiteral::Parse@<X0>(MIL::Text::Parser::ValueLiteral *this@<X0>, const MIL::IRValueType *a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v11 = a2;
  uint64_t result = MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IValue,MIL::IRValueType const*&>((__n128 *)this, (uint64_t *)&v11, a3);
  if (!*a3)
  {
    MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::RefValue,MIL::IRValueType const*&>((__n128 *)this, (uint64_t *)&v11, &v10);
    __n128 v6 = v10;
    uint64_t v10 = 0;
    uint64_t result = *a3;
    *a3 = v6;
    if (result)
    {
      (*(void (**)(uint64_t *))(*result + 8))(result);
      uint64_t result = v10;
      uint64_t v10 = 0;
      if (result) {
        uint64_t result = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*result + 8))(result);
      }
      __n128 v6 = *a3;
    }
    if (!v6)
    {
      uint64_t v7 = *((void *)this + 4);
      uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v7, v9);
    }
  }
  return result;
}

void sub_20F4420DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v20) {
    __cxa_free_exception(v19);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  uint64_t v22 = *v18;
  *long long v18 = 0;
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IValue,MIL::IRValueType const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = a1->n128_u64[1];
  v8[0] = &unk_26C25C4A0;
  v8[1] = v5;
  __n128 v9 = a1[1];
  __n128 v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  uint64_t v10 = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A8D0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt((uint64_t)v8, *a2, a3);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::RefValue,MIL::IRValueType const*&>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = a1->n128_u64[1];
  v8[0] = &unk_26C25C4D0;
  v8[1] = v5;
  __n128 v9 = a1[1];
  __n128 v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  uint64_t v10 = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A928;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt((uint64_t)v8, *a2, a3);
}

void MIL::Text::Parser::IValue::Parse(MIL::Text::Parser::IValue *this, const MIL::IRValueType *a2)
{
  uint64_t v10 = (const MIL::IRTensorValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 24))(a2);
  if (v10) {
    MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorVal,MIL::IRTensorValueType const*&>((__n128 *)this, &v10);
  }
  __n128 v9 = (const MIL::IRListValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 32))(a2);
  if (v9) {
    MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::ListVal,MIL::IRListValueType const*&>((__n128 *)this, &v9);
  }
  uint64_t v8 = (const MIL::IRDictionaryValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 48))(a2);
  if (v8) {
    MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictVal,MIL::IRDictionaryValueType const*&>((__n128 *)this, &v8);
  }
  uint64_t v7 = (const MIL::IRTupleValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 40))(a2);
  if (v7) {
    MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TupleVal,MIL::IRTupleValueType const*&>((__n128 *)this, &v7);
  }
  uint64_t v4 = *((void *)this + 4);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  MIL::TextLocationFromScannerLocation(v4, v6);
}

void sub_20F4424E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v20) {
    __cxa_free_exception(v19);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorVal,MIL::IRTensorValueType const*&>(__n128 *a1, const MIL::IRTensorValueType **a2)
{
  unint64_t v3 = a1->n128_u64[1];
  v5[0] = &unk_26C25C500;
  v5[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5[0] = &unk_26C25AB38;
  MIL::Text::Parser::TensorVal::Parse((MIL::Text::Parser::TensorVal *)v5, *a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::ListVal,MIL::IRListValueType const*&>(__n128 *a1, const MIL::IRListValueType **a2)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C530;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25A9D8;
  MIL::Text::Parser::ListVal::Parse(&v5, *a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictVal,MIL::IRDictionaryValueType const*&>(__n128 *a1, const MIL::IRDictionaryValueType **a2)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C560;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25AAE0;
  MIL::Text::Parser::DictVal::Parse(&v5, *a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TupleVal,MIL::IRTupleValueType const*&>(__n128 *a1, const MIL::IRTupleValueType **a2)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C590;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25A980;
  MIL::Text::Parser::TupleVal::Parse(&v5, *a2);
}

void MIL::Text::Parser::RefValue::Parse(MIL::Text::Parser::RefValue *this, const MIL::IRValueType *a2)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v10);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v9);
  MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IDValueBindingMap>((__n128 *)this, (uint64_t)v8);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v7);
  if ((*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 24))(a2)) {
    MIL::IRTensorValueType::MakeScalar();
  }
  __cxa_allocate_exception(0x48uLL);
  uint64_t v4 = *((void *)this + 4);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  MIL::TextLocationFromScannerLocation(v4, v6);
}

void sub_20F442CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  if (a31)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
    if ((v42 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (!v42)
  {
LABEL_10:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v44 - 160);
    if (*(char *)(v44 - 65) < 0) {
      operator delete(*(void **)(v44 - 88));
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v43);
  goto LABEL_10;
}

void sub_20F442D38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a27) {
    (*(void (**)(uint64_t))(*(void *)a27 + 8))(a27);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v45 - 160);
  if (*(char *)(v45 - 65) < 0) {
    operator delete(*(void **)(v45 - 88));
  }
  _Unwind_Resume(a1);
}

void sub_20F442DD8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  uint64_t v40 = *(void *)(v39 - 56);
  *(void *)(v39 - 56) = 0;
  if (v40) {
    (*(void (**)(uint64_t))(*(void *)v40 + 8))(v40);
  }
  if (a39 < 0) {
    JUMPOUT(0x20F442F80);
  }
  JUMPOUT(0x20F442F84);
}

void sub_20F442F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v32) {
    __cxa_free_exception(v31);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  __cxa_end_catch();
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v33 - 160);
  if (*(char *)(v33 - 65) < 0) {
    operator delete(*(void **)(v33 - 88));
  }
  _Unwind_Resume(a1);
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IDValueBindingMap>@<D0>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C5C0;
  v6[1] = v3;
  __n128 v7 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25B2C8;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt((uint64_t)v6, a2);
}

void MIL::Text::Parser::TupleVal::Parse(__n128 *this, const MIL::IRTupleValueType *a2)
{
  uint64_t v22 = 0;
  int v23 = 0;
  unint64_t v24 = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 5);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v21);
  uint64_t v4 = (const MIL::IRValueType ***)(*(uint64_t (**)(const MIL::IRTupleValueType *))(*(void *)a2 + 64))(a2);
  __n128 v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      uint64_t v26 = *v5;
      MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>(this, &v26, &v20);
      if (v20) {
        operator new();
      }
      int v20 = 0;
      __n128 v7 = v23;
      if ((unint64_t)v23 >= v24)
      {
        uint64_t v9 = ((uint64_t)v23 - v22) >> 4;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = v24 - v22;
        if ((uint64_t)(v24 - v22) >> 3 > v10) {
          unint64_t v10 = v11 >> 3;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        v25[4] = &v24;
        uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v24, v12);
        uint64_t v14 = &v13[16 * v9];
        v25[0] = v13;
        v25[1] = v14;
        void v25[3] = &v13[16 * v15];
        *(void *)uint64_t v14 = 0;
        *((void *)v14 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
        void v25[2] = v14 + 16;
        std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(&v22, v25);
        uint64_t v8 = v23;
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v25);
      }
      else
      {
        void *v23 = 0;
        v7[1] = 0;
        uint64_t v8 = v7 + 2;
      }
      int v23 = v8;
      std::string v16 = v20;
      int v20 = 0;
      if (v16) {
        (*(void (**)(uint64_t *))(*v16 + 8))(v16);
      }
      long long v17 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
      if (MIL::Scanner::Token::GetType(v17) != 9) {
        break;
      }
      (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v19);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v19);
      ++v5;
    }
    while (v5 != v6);
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 6);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v18);
  MIL::IRTupleValueType::MakeValue();
}

void sub_20F4432E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  *(void *)(v23 - 96) = &a23;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v23 - 96));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::ListVal::Parse(__n128 *this, const MIL::IRListValueType *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v8);
  uint64_t v12 = (*(uint64_t (**)(const MIL::IRListValueType *))(*(void *)a2 + 64))(a2);
  MIL::Text::Parser::Rule<MIL::Text::Parser::ListVal,std::unique_ptr<MIL::IRListValue const>,MIL::IRListValueType const*>::ParseOpt<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*>(this, &v12, &v13);
  if (v13) {
    operator new();
  }
  uint64_t v4 = (*(uint64_t (**)(const MIL::IRListValueType *))(*(void *)a2 + 72))(a2);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 24))(v4))
  {
    __n128 v5 = (MIL::IRListValueType *)this->n128_u64[1];
    uint64_t v6 = (MIL::MILContext *)(*(uint64_t (**)(const MIL::IRListValueType *))(*(void *)a2 + 64))(a2);
    MIL::IRListValueType::Make(v5, v6, (const MIL::IRValueType *)((v10 - v9) >> 4));
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 4);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v7);
  MIL::IRListValueType::MakeValue();
}

void sub_20F4437CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v24 - 128));
  uint64_t v26 = *(void *)(v24 - 88);
  *(void *)(v24 - 88) = 0;
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
  }
  *(void *)(v24 - 88) = &a24;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 88));
  _Unwind_Resume(a1);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ListVal,std::unique_ptr<MIL::IRListValue const>,MIL::IRListValueType const*>::ParseOpt<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v5 = a1->n128_u64[1];
  v8[0] = &unk_26C25C440;
  v8[1] = v5;
  __n128 v9 = a1[1];
  uint64_t v6 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v9.n128_u64[0] + 24))(v9.n128_u64[0], v9);
  uint64_t v10 = *(void *)MIL::Scanner::Token::GetLocation(v6);
  v8[0] = &unk_26C25A878;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt((uint64_t)v8, *a2, a3);
}

void MIL::Text::Parser::DictItem::Parse(__n128 *this@<X0>, const MIL::IRValueType *a2@<X1>, const MIL::IRValueType *a3@<X2>, void *a4@<X8>)
{
  uint64_t v12 = a3;
  uint64_t v13 = a2;
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v11);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>(this, &v13, &v10);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v9);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::ValueLiteral,MIL::IRValueType const*&>(this, &v12, &v8);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 8);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v7);
  uint64_t v6 = v8;
  *a4 = v10;
  a4[1] = v6;
}

void sub_20F443A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a13) {
  if (a18)
  }
    (*(void (**)(uint64_t))(*(void *)a18 + 8))(a18);
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::DictItemList::Parse@<X0>(__n128 *this@<X0>, const MIL::IRValueType *a2@<X1>, const MIL::IRValueType *a3@<X2>, uint64_t *a4@<X8>)
{
  std::string::value_type v43 = a3;
  uint64_t v44 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictItem,MIL::IRValueType const*&,MIL::IRValueType const*&>(this, &v44, &v43, &v41);
  unint64_t v6 = a4[2];
  uint64_t v7 = (void *)a4[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v11 = ((uint64_t)v7 - *a4) >> 4;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v6 - *a4;
    if (v13 >> 3 > v12) {
      unint64_t v12 = v13 >> 3;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    int v49 = a4 + 2;
    uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a4 + 2), v14);
    std::string v16 = &v15[16 * v11];
    uint64_t v45 = v15;
    uint64_t v46 = v16;
    uint64_t v48 = &v15[16 * v17];
    uint64_t v18 = v41;
    uint64_t v41 = 0;
    *(void *)std::string v16 = v18;
    uint64_t v19 = v42;
    uint64_t v42 = 0;
    *((void *)v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v19;
    uint64_t v47 = v16 + 16;
    std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__swap_out_circular_buffer(a4, &v45);
    uint64_t v10 = (void *)a4[1];
    std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::~__split_buffer(&v45);
  }
  else
  {
    uint64_t v8 = v41;
    uint64_t v41 = 0;
    *uint64_t v7 = v8;
    uint64_t v9 = v42;
    uint64_t v42 = 0;
    v7[1] = v9;
    uint64_t v10 = v7 + 2;
    a4[1] = (uint64_t)(v7 + 2);
  }
  a4[1] = (uint64_t)v10;
  uint64_t v20 = v42;
  uint64_t v42 = 0;
  if (v20) {
    (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  }
  uint64_t v21 = v41;
  uint64_t v41 = 0;
  if (v21) {
    (*(void (**)(uint64_t))(*(void *)v21 + 8))(v21);
  }
  while (1)
  {
    uint64_t v22 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
    uint64_t result = MIL::Scanner::Token::GetType(v22);
    if (result != 9) {
      break;
    }
    (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v40);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v40);
    MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictItem,MIL::IRValueType const*&,MIL::IRValueType const*&>(this, &v44, &v43, &v41);
    uint64_t v24 = (void *)a4[1];
    unint64_t v25 = a4[2];
    if ((unint64_t)v24 >= v25)
    {
      uint64_t v29 = ((uint64_t)v24 - *a4) >> 4;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 60) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v31 = v25 - *a4;
      if (v31 >> 3 > v30) {
        unint64_t v30 = v31 >> 3;
      }
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v30;
      }
      int v49 = a4 + 2;
      uint64_t v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a4 + 2), v32);
      uint64_t v34 = &v33[16 * v29];
      uint64_t v45 = v33;
      uint64_t v46 = v34;
      uint64_t v48 = &v33[16 * v35];
      uint64_t v36 = v41;
      uint64_t v41 = 0;
      *(void *)uint64_t v34 = v36;
      uint64_t v37 = v42;
      uint64_t v42 = 0;
      *((void *)v34 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v37;
      uint64_t v47 = v34 + 16;
      std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__swap_out_circular_buffer(a4, &v45);
      uint64_t v28 = (void *)a4[1];
      std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::~__split_buffer(&v45);
    }
    else
    {
      uint64_t v26 = v41;
      uint64_t v41 = 0;
      *uint64_t v24 = v26;
      uint64_t v27 = v42;
      uint64_t v42 = 0;
      v24[1] = v27;
      uint64_t v28 = v24 + 2;
      a4[1] = (uint64_t)(v24 + 2);
    }
    a4[1] = (uint64_t)v28;
    uint64_t v38 = v42;
    uint64_t v42 = 0;
    if (v38) {
      (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
    }
    uint64_t v39 = v41;
    uint64_t v41 = 0;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
  }
  return result;
}

void sub_20F443DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void **);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::~__split_buffer((void **)va1);
  std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>::~pair((uint64_t *)va);
  std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DictItem,MIL::IRValueType const*&,MIL::IRValueType const*&>(__n128 *a1@<X0>, const MIL::IRValueType **a2@<X1>, const MIL::IRValueType **a3@<X2>, void *a4@<X8>)
{
  unint64_t v7 = a1->n128_u64[1];
  v9.n128_u64[0] = (unint64_t)&unk_26C25C5F0;
  v9.n128_u64[1] = v7;
  __n128 v10 = a1[1];
  uint64_t v8 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v10.n128_u64[0] + 24))(v10.n128_u64[0], v10);
  uint64_t v11 = *(void *)MIL::Scanner::Token::GetLocation(v8);
  v9.n128_u64[0] = (unint64_t)&unk_26C25AA30;
  MIL::Text::Parser::DictItem::Parse(&v9, *a2, *a3, a4);
}

uint64_t *std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>::~pair(uint64_t *a1)
{
  uint64_t v2 = a1[1];
  a1[1] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *a1;
  *a1 = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return a1;
}

void MIL::Text::Parser::DictVal::Parse(__n128 *this, const MIL::IRDictionaryValueType *a2)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 7);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v15);
  *(void *)&v10[0] = (*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(void *)a2 + 64))(a2);
  uint64_t v8 = (*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(void *)a2 + 72))(a2);
  MIL::Text::Parser::Rule<MIL::Text::Parser::DictVal,std::unique_ptr<MIL::IRDictionaryValue const>,MIL::IRDictionaryValueType const*>::ParseOpt<MIL::Text::Parser::DictItemList,MIL::IRValueType const*,MIL::IRValueType const*>(this, (uint64_t *)v10, &v8, &v13);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 8);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v12);
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>((uint64_t)v10, (unint64_t)(float)(unint64_t)(((char *)v14 - (char *)v13) >> 4));
  uint64_t v4 = v13;
  for (i = v14; v4 != i; uint64_t v4 = v7 + 1)
  {
    std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRValue const,std::default_delete<MIL::IRValue const>,void>(&v8, v4);
    std::string v16 = &v8;
    unint64_t v6 = std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>((uint64_t)v10, &v8, (uint64_t)&std::piecewise_construct, (_OWORD **)&v16);
    unint64_t v7 = v4 + 1;
    std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRValue const,std::default_delete<MIL::IRValue const>,void>(v6 + 4, v7);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  MIL::IRDictionaryValueType::MakeValue();
}

void sub_20F4440CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  a11 = (void **)&a20;
  std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DictVal,std::unique_ptr<MIL::IRDictionaryValue const>,MIL::IRDictionaryValueType const*>::ParseOpt<MIL::Text::Parser::DictItemList,MIL::IRValueType const*,MIL::IRValueType const*>@<X0>(__n128 *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  unint64_t v7 = a1->n128_u64[1];
  v10[0] = &unk_26C25C620;
  v10[1] = v7;
  __n128 v11 = a1[1];
  uint64_t v8 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v11.n128_u64[0] + 24))(v11.n128_u64[0], v11);
  uint64_t v12 = *(void *)MIL::Scanner::Token::GetLocation(v8);
  v10[0] = &unk_26C25AA88;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::ParseOpt((uint64_t)v10, *a2, *a3, a4);
}

void *std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRValue const,std::default_delete<MIL::IRValue const>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRValue const,std::default_delete<MIL::IRValue const>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void MIL::Text::Parser::TensorVal::Parse(MIL::Text::Parser::TensorVal *this, const MIL::IRTensorValueType *a2)
{
  if (MIL::IRTensorValueType::IsScalar(a2))
  {
    MIL::Text::Parser::TensorVal::ParseScalar(this, a2);
  }

  MIL::Text::Parser::TensorVal::ParseTensor((MIL::IRConstantDimension **)this, a2);
}

uint64_t MIL::Text::Parser::Type::Parse(MIL::Text::Parser::Type *this)
{
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  int Type = MIL::Scanner::Token::GetType(v2);
  uint64_t v4 = **((void **)this + 2);
  if (Type == 23)
  {
    (*(void (**)(void *__return_ptr))(v4 + 16))(v247);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v247);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v246);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>((__n128 *)this);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v245);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>((__n128 *)this, (void **)&v242);
    operator new();
  }
  unint64_t v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(v4 + 24))();
  if (MIL::Scanner::Token::GetType(v5) == 27)
  {
    uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if ((*(int (**)(uint64_t))(*(void *)Options + 88))(Options) <= 2)
    {
      uint64_t v137 = *((void *)this + 4);
      uint64_t v138 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v139 = (*(uint64_t (**)(uint64_t))(*(void *)v138 + 24))(v138);
      MIL::TextLocationFromScannerLocation(v137, v139);
    }
    (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v240);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v240);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v239);
    int v7 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>((__n128 *)this);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v238);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 5) {
        goto LABEL_284;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 5) {
        goto LABEL_284;
      }
      p_p = &__p;
    }
    int data = (int)p_p->__r_.__value_.__l.__data_;
    int v17 = p_p->__r_.__value_.__s.__data_[4];
    if (data != 1885431923 || v17 != 101)
    {
LABEL_284:
      __cxa_allocate_exception(0x48uLL);
      uint64_t v134 = *((void *)this + 4);
      uint64_t v135 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v136 = (*(uint64_t (**)(uint64_t))(*(void *)v135 + 24))(v135);
      MIL::TextLocationFromScannerLocation(v134, v136);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v236);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>((__n128 *)this, (void **)&v235.__r_.__value_.__l.__data_);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v234);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v233);
    if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v233.__r_.__value_.__l.__size_ == 7
        && *(_DWORD *)v233.__r_.__value_.__l.__data_ == 1769108595
        && *(_DWORD *)(v233.__r_.__value_.__r.__words[0] + 3) == 1936024681)
      {
        goto LABEL_45;
      }
      if (v233.__r_.__value_.__l.__size_ != 22) {
        goto LABEL_116;
      }
      uint64_t v19 = (std::string *)v233.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(v233.__r_.__value_.__r.__words[2]) == 7)
      {
        if (LODWORD(v233.__r_.__value_.__l.__data_) != 1769108595
          || *(_DWORD *)((char *)v233.__r_.__value_.__r.__words + 3) != 1936024681)
        {
LABEL_116:
          __cxa_allocate_exception(0x48uLL);
          uint64_t v52 = *((void *)this + 4);
          uint64_t v53 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
          uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)v53 + 24))(v53);
          MIL::TextLocationFromScannerLocation(v52, v54);
        }
LABEL_45:
        MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v232);
        memset(&v231, 0, sizeof(v231));
        if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v233.__r_.__value_.__l.__size_ != 7) {
            goto LABEL_54;
          }
          uint64_t v26 = (std::string *)v233.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) != 7) {
            goto LABEL_54;
          }
          uint64_t v26 = &v233;
        }
        int v27 = (int)v26->__r_.__value_.__l.__data_;
        int v28 = *(_DWORD *)((char *)v26->__r_.__value_.__r.__words + 3);
        if (v27 == 1769108595 && v28 == 1936024681)
        {
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferStrides>((__n128 *)this, (void **)&v242);
          uint64_t v30 = 0;
          *(_OWORD *)&v231.__r_.__value_.__l.__data_ = v242;
          v231.__r_.__value_.__r.__words[2] = v243;
LABEL_55:
          MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v230);
          MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v242);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          __p.__r_.__value_.__r.__words[2] = v243;
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v242;
          if (SBYTE7(v243) < 0)
          {
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ == 7
              && *(_DWORD *)__p.__r_.__value_.__l.__data_ == 1769108595
              && *(_DWORD *)(__p.__r_.__value_.__r.__words[0] + 3) == 1936024681)
            {
              goto LABEL_295;
            }
            if (__p.__r_.__value_.__l.__size_ == 22)
            {
              if (*(void *)__p.__r_.__value_.__l.__data_ == 0x67696C615F776F72
                && *(void *)(__p.__r_.__value_.__r.__words[0] + 8) == 0x6E695F746E656D6ELL
                && *(void *)(__p.__r_.__value_.__r.__words[0] + 14) == 0x73657479625F6E69)
              {
                goto LABEL_295;
              }
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
            }
            if (size != 18) {
              goto LABEL_296;
            }
            uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (BYTE7(v243) != 18)
            {
              if (BYTE7(v243) == 22)
              {
                if (__p.__r_.__value_.__r.__words[0] != 0x67696C615F776F72
                  || __p.__r_.__value_.__l.__size_ != 0x6E695F746E656D6ELL
                  || *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) != 0x73657479625F6E69)
                {
                  goto LABEL_296;
                }
LABEL_295:
                __cxa_allocate_exception(0x48uLL);
                uint64_t v148 = *((void *)this + 4);
                uint64_t v149 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
                uint64_t v150 = (*(uint64_t (**)(uint64_t))(*(void *)v149 + 24))(v149);
                MIL::TextLocationFromScannerLocation(v148, v150);
              }
              if (BYTE7(v243) == 7
                && LODWORD(__p.__r_.__value_.__l.__data_) == 1769108595
                && *(_DWORD *)((char *)__p.__r_.__value_.__r.__words + 3) == 1936024681)
              {
                goto LABEL_295;
              }
LABEL_296:
              __cxa_allocate_exception(0x48uLL);
              uint64_t v151 = *((void *)this + 4);
              uint64_t v152 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
              uint64_t v153 = (*(uint64_t (**)(uint64_t))(*(void *)v152 + 24))(v152);
              MIL::TextLocationFromScannerLocation(v151, v153);
            }
            uint64_t v33 = &__p;
          }
          std::string::size_type v38 = v33->__r_.__value_.__r.__words[0];
          std::string::size_type v39 = v33->__r_.__value_.__l.__size_;
          int v40 = LOWORD(v33->__r_.__value_.__r.__words[2]);
          if (v38 != 0x61656C7265746E69 || v39 != 0x6F746361665F6576 || v40 != 29554) {
            goto LABEL_296;
          }
          MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v229);
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactors>((__n128 *)this, (void **)&v228.__r_.__value_.__l.__data_);
          long long v242 = 0u;
          long long v243 = 0u;
          int v244 = 1065353216;
          std::string::value_type v43 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
          if (MIL::Scanner::Token::GetType(v43) == 9)
          {
            (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v227);
            UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v227);
            MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v241);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v242, (uint64_t *)v241);
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v241);
          }
          MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v226);
          if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v233.__r_.__value_.__l.__size_ != 7) {
              goto LABEL_104;
            }
            uint64_t v44 = (std::string *)v233.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (SHIBYTE(v233.__r_.__value_.__r.__words[2]) != 7) {
              goto LABEL_104;
            }
            uint64_t v44 = &v233;
          }
          int v45 = (int)v44->__r_.__value_.__l.__data_;
          int v46 = *(_DWORD *)((char *)v44->__r_.__value_.__r.__words + 3);
          if (v45 == 1769108595 && v46 == 1936024681)
          {
            if ((v7 - 31) <= 0x15)
            {
              uint64_t v48 = MIL::IRTensorBufferValueType::MakeWithShape(*((const void **)this + 1), dword_20F916654[v7 - 31], (uint64_t)&v235, (uint64_t)&v231, (uint64_t)&v228, (uint64_t *)&v242);
              goto LABEL_106;
            }
LABEL_287:
            exception = __cxa_allocate_exception(8uLL);
            void *exception = MEMORY[0x263F8C3C0] + 16;
            __cxa_throw(exception, MEMORY[0x263F8C220], MEMORY[0x263F8C178]);
          }
LABEL_104:
          if ((v7 - 31) < 0x16)
          {
            uint64_t v48 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(*((const void **)this + 1), dword_20F916654[v7 - 31], (uint64_t)&v235, v30, (uint64_t)&v228, (uint64_t *)&v242);
LABEL_106:
            uint64_t v49 = v48;
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v242);
            if (v228.__r_.__value_.__r.__words[0])
            {
              v228.__r_.__value_.__l.__size_ = v228.__r_.__value_.__r.__words[0];
              operator delete(v228.__r_.__value_.__l.__data_);
            }
            if (v231.__r_.__value_.__r.__words[0])
            {
              v231.__r_.__value_.__l.__size_ = v231.__r_.__value_.__r.__words[0];
              operator delete(v231.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v233.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_261;
            }
            int v50 = (void *)v233.__r_.__value_.__r.__words[0];
LABEL_260:
            operator delete(v50);
LABEL_261:
            uint64_t v120 = (void *)v235.__r_.__value_.__r.__words[0];
            if (!v235.__r_.__value_.__r.__words[0]) {
              goto LABEL_274;
            }
            v235.__r_.__value_.__l.__size_ = v235.__r_.__value_.__r.__words[0];
            goto LABEL_263;
          }
          goto LABEL_287;
        }
LABEL_54:
        uint64_t v30 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferRowAlignment>((__n128 *)this);
        goto LABEL_55;
      }
      if (HIBYTE(v233.__r_.__value_.__r.__words[2]) != 22) {
        goto LABEL_116;
      }
      uint64_t v19 = &v233;
    }
    std::string::size_type v21 = v19->__r_.__value_.__r.__words[0];
    std::string::size_type v22 = v19->__r_.__value_.__l.__size_;
    uint64_t v23 = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 6);
    if (v21 != 0x67696C615F776F72 || v22 != 0x6E695F746E656D6ELL || v23 != 0x73657479625F6E69) {
      goto LABEL_116;
    }
    goto LABEL_45;
  }
  __n128 v9 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  if (MIL::Scanner::Token::GetType(v9) == 28)
  {
    uint64_t v10 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if ((*(int (**)(uint64_t))(*(void *)v10 + 88))(v10) <= 2)
    {
      uint64_t v154 = *((void *)this + 4);
      uint64_t v155 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v156 = (*(uint64_t (**)(uint64_t))(*(void *)v155 + 24))(v155);
      MIL::TextLocationFromScannerLocation(v154, v156);
    }
    (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v225);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v225);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v224);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &__p);
    if ((MIL::IsValidIRPixelFormatTypeString((unsigned __int8 *)&__p) & 1) == 0)
    {
      __cxa_allocate_exception(0x48uLL);
      uint64_t v160 = *((void *)this + 4);
      uint64_t v161 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v162 = (*(uint64_t (**)(uint64_t))(*(void *)v161 + 24))(v161);
      MIL::TextLocationFromScannerLocation(v160, v162);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v223);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &v235);
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v235.__r_.__value_.__l.__size_ != 5) {
        goto LABEL_286;
      }
      __n128 v11 = (std::string *)v235.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) != 5) {
        goto LABEL_286;
      }
      __n128 v11 = &v235;
    }
    int v62 = (int)v11->__r_.__value_.__l.__data_;
    int v63 = v11->__r_.__value_.__s.__data_[4];
    if (v62 != 1885431923 || v63 != 101)
    {
LABEL_286:
      __cxa_allocate_exception(0x48uLL);
      uint64_t v140 = *((void *)this + 4);
      uint64_t v141 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v142 = (*(uint64_t (**)(uint64_t))(*(void *)v141 + 24))(v141);
      MIL::TextLocationFromScannerLocation(v140, v142);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v222);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>((__n128 *)this, (void **)&v233.__r_.__value_.__l.__data_);
    int v65 = 0;
    int v66 = 0;
    memset(&v231, 0, sizeof(v231));
    memset(&v228, 0, sizeof(v228));
    int v244 = 1065353216;
    long long v242 = 0u;
    long long v243 = 0u;
    while (1)
    {
      while (1)
      {
        uint64_t v67 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
        if (MIL::Scanner::Token::GetType(v67) != 9)
        {
          MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v219);
          uint64_t v86 = (const void *)*((void *)this + 1);
          if (v66 & v65)
          {
            int v87 = MIL::StringToIRPixelFormatType((unsigned __int8 *)&__p);
            uint64_t v88 = MIL::IRPixelBufferValueType::MakeWithShapeBytesPerRowNumSlices(v86, v87, (long long *)&v233, (std::__shared_weak_count_vtbl **)&v231, (std::__shared_weak_count_vtbl **)&v228, (uint64_t *)&v242);
          }
          else if (v66)
          {
            int v89 = MIL::StringToIRPixelFormatType((unsigned __int8 *)&__p);
            uint64_t v88 = MIL::IRPixelBufferValueType::MakeWithShape(v86, v89, (uint64_t)&v233, (uint64_t)&v231, (uint64_t *)&v242);
          }
          else
          {
            int v96 = MIL::StringToIRPixelFormatType((unsigned __int8 *)&__p);
            if (v65) {
              uint64_t v88 = MIL::IRPixelBufferValueType::MakeWithShapeNumSlices(v86, v96, (long long *)&v233, (uint64_t)&v228, (uint64_t *)&v242);
            }
            else {
              uint64_t v88 = MIL::IRPixelBufferValueType::MakeWithShape(v86, v96, (long long *)&v233, (uint64_t *)&v242);
            }
          }
          uint64_t v49 = v88;
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v242);
          if (v228.__r_.__value_.__r.__words[0])
          {
            v228.__r_.__value_.__l.__size_ = v228.__r_.__value_.__r.__words[0];
            operator delete(v228.__r_.__value_.__l.__data_);
          }
          if (v231.__r_.__value_.__r.__words[0])
          {
            v231.__r_.__value_.__l.__size_ = v231.__r_.__value_.__r.__words[0];
            operator delete(v231.__r_.__value_.__l.__data_);
          }
          if (v233.__r_.__value_.__r.__words[0])
          {
            v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
            operator delete(v233.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v235.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_274:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            return v49;
          }
          uint64_t v120 = (void *)v235.__r_.__value_.__r.__words[0];
LABEL_263:
          operator delete(v120);
          goto LABEL_274;
        }
        (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v221);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v221);
        uint64_t v68 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
        if (MIL::Scanner::Token::GetType(v68) == 54) {
          break;
        }
        unint64_t v69 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
        if (MIL::Scanner::Token::GetType(v69) == 3)
        {
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v241);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v242, (uint64_t *)v241);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v241);
        }
      }
      MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, v241);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v235.__r_.__value_.__l.__data_);
      }
      std::string v235 = v241[0];
      if (SHIBYTE(v241[0].__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if (HIBYTE(v241[0].__r_.__value_.__r.__words[2]) == 10)
      {
        int v72 = &v235;
LABEL_150:
        std::string::size_type v73 = v72->__r_.__value_.__r.__words[0];
        int v74 = LOWORD(v72->__r_.__value_.__r.__words[1]);
        if (v73 != 0x63696C735F6D756ELL || v74 != 29541) {
          goto LABEL_288;
        }
        goto LABEL_155;
      }
      if (HIBYTE(v241[0].__r_.__value_.__r.__words[2]) != 13) {
        goto LABEL_288;
      }
      if (v235.__r_.__value_.__r.__words[0] != 0x65705F7365747962
        || *(std::string::size_type *)((char *)v235.__r_.__value_.__r.__words + 5) != 0x776F725F7265705FLL)
      {
        goto LABEL_288;
      }
LABEL_155:
      MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v220);
      int v76 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v78 = v235.__r_.__value_.__l.__size_;
        if (v235.__r_.__value_.__l.__size_ != 13) {
          goto LABEL_173;
        }
        uint64_t v77 = (std::string *)v235.__r_.__value_.__r.__words[0];
LABEL_160:
        std::string::size_type v79 = v77->__r_.__value_.__r.__words[0];
        uint64_t v80 = *(std::string::size_type *)((char *)v77->__r_.__value_.__r.__words + 5);
        if (v79 == 0x65705F7365747962 && v80 == 0x776F725F7265705FLL)
        {
          if (v66)
          {
            __cxa_allocate_exception(0x48uLL);
            uint64_t v179 = *((void *)this + 4);
            uint64_t v180 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
            uint64_t v181 = (*(uint64_t (**)(uint64_t))(*(void *)v180 + 24))(v180);
            MIL::TextLocationFromScannerLocation(v179, v181);
          }
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::PixelBufferBytesPerRowVec>((__n128 *)this, (void **)&v241[0].__r_.__value_.__l.__data_);
          if (v231.__r_.__value_.__r.__words[0])
          {
            v231.__r_.__value_.__l.__size_ = v231.__r_.__value_.__r.__words[0];
            operator delete(v231.__r_.__value_.__l.__data_);
          }
          std::string v231 = v241[0];
          int v76 = HIBYTE(v235.__r_.__value_.__r.__words[2]);
          int v66 = 1;
        }
        if ((v76 & 0x80) == 0) {
          goto LABEL_170;
        }
        std::string::size_type v78 = v235.__r_.__value_.__l.__size_;
LABEL_173:
        if (v78 == 10)
        {
          uint64_t v82 = (std::string *)v235.__r_.__value_.__r.__words[0];
          goto LABEL_175;
        }
      }
      else
      {
        if (HIBYTE(v235.__r_.__value_.__r.__words[2]) == 13)
        {
          uint64_t v77 = &v235;
          goto LABEL_160;
        }
LABEL_170:
        if (v76 == 10)
        {
          uint64_t v82 = &v235;
LABEL_175:
          std::string::size_type v83 = v82->__r_.__value_.__r.__words[0];
          int v84 = LOWORD(v82->__r_.__value_.__r.__words[1]);
          if (v83 == 0x63696C735F6D756ELL && v84 == 29541)
          {
            if (v65)
            {
              __cxa_allocate_exception(0x48uLL);
              uint64_t v188 = *((void *)this + 4);
              uint64_t v189 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
              uint64_t v190 = (*(uint64_t (**)(uint64_t))(*(void *)v189 + 24))(v189);
              MIL::TextLocationFromScannerLocation(v188, v190);
            }
            MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::PixelBufferNumSlicesVec>((__n128 *)this, (void **)&v241[0].__r_.__value_.__l.__data_);
            if (v228.__r_.__value_.__r.__words[0])
            {
              v228.__r_.__value_.__l.__size_ = v228.__r_.__value_.__r.__words[0];
              operator delete(v228.__r_.__value_.__l.__data_);
            }
            std::string v228 = v241[0];
            int v65 = 1;
          }
        }
      }
    }
    if (v235.__r_.__value_.__l.__size_ != 10)
    {
      if (v235.__r_.__value_.__l.__size_ != 13
        || (*(void *)v235.__r_.__value_.__l.__data_ == 0x65705F7365747962
          ? (BOOL v71 = *(void *)(v235.__r_.__value_.__r.__words[0] + 5) == 0x776F725F7265705FLL)
          : (BOOL v71 = 0),
            !v71))
      {
LABEL_288:
        uint64_t v144 = *((void *)this + 4);
        uint64_t v145 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        uint64_t v146 = (*(uint64_t (**)(uint64_t))(*(void *)v145 + 24))(v145);
        MIL::TextLocationFromScannerLocation(v144, v146);
      }
      goto LABEL_155;
    }
    int v72 = (std::string *)v235.__r_.__value_.__r.__words[0];
    goto LABEL_150;
  }
  uint64_t v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  if (MIL::Scanner::Token::GetType(v12) == 29)
  {
    uint64_t v13 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    if ((*(int (**)(uint64_t))(*(void *)v13 + 88))(v13) <= 2)
    {
      uint64_t v175 = *((void *)this + 4);
      uint64_t v176 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v177 = (*(uint64_t (**)(uint64_t))(*(void *)v176 + 24))(v176);
      MIL::TextLocationFromScannerLocation(v175, v177);
    }
    (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v218);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v218);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v217);
    int v14 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>((__n128 *)this);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v216);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 5) {
        goto LABEL_298;
      }
      uint64_t v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 5) {
        goto LABEL_298;
      }
      uint64_t v15 = &__p;
    }
    int v97 = (int)v15->__r_.__value_.__l.__data_;
    int v98 = v15->__r_.__value_.__s.__data_[4];
    if (v97 != 1885431923 || v98 != 101)
    {
LABEL_298:
      __cxa_allocate_exception(0x48uLL);
      uint64_t v157 = *((void *)this + 4);
      uint64_t v158 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v159 = (*(uint64_t (**)(uint64_t))(*(void *)v158 + 24))(v158);
      MIL::TextLocationFromScannerLocation(v157, v159);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v215);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>((__n128 *)this, (void **)&v235.__r_.__value_.__l.__data_);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v214);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v242);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[2] = v243;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v242;
    if (SBYTE7(v243) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 7) {
        goto LABEL_300;
      }
      uint64_t v100 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SBYTE7(v243) != 7) {
        goto LABEL_300;
      }
      uint64_t v100 = &__p;
    }
    int v101 = (int)v100->__r_.__value_.__l.__data_;
    int v102 = *(_DWORD *)((char *)v100->__r_.__value_.__r.__words + 3);
    if (v101 != 1769108595 || v102 != 1936024681)
    {
LABEL_300:
      __cxa_allocate_exception(0x48uLL);
      uint64_t v163 = *((void *)this + 4);
      uint64_t v164 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v165 = (*(uint64_t (**)(uint64_t))(*(void *)v164 + 24))(v164);
      MIL::TextLocationFromScannerLocation(v163, v165);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v213);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferStrides>((__n128 *)this, (void **)&v233.__r_.__value_.__l.__data_);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v212);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v242);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[2] = v243;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v242;
    if (SBYTE7(v243) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 18) {
        goto LABEL_301;
      }
      uint64_t v104 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SBYTE7(v243) != 18) {
        goto LABEL_301;
      }
      uint64_t v104 = &__p;
    }
    std::string::size_type v105 = v104->__r_.__value_.__r.__words[0];
    std::string::size_type v106 = v104->__r_.__value_.__l.__size_;
    int v107 = LOWORD(v104->__r_.__value_.__r.__words[2]);
    if (v105 != 0x61656C7265746E69 || v106 != 0x6F746361665F6576 || v107 != 29554)
    {
LABEL_301:
      __cxa_allocate_exception(0x48uLL);
      uint64_t v166 = *((void *)this + 4);
      uint64_t v167 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v168 = (*(uint64_t (**)(uint64_t))(*(void *)v167 + 24))(v167);
      MIL::TextLocationFromScannerLocation(v166, v168);
    }
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v211);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactors>((__n128 *)this, (void **)&v231.__r_.__value_.__l.__data_);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v210);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v242);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    __p.__r_.__value_.__r.__words[2] = v243;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v242;
    if (SBYTE7(v243) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 8) {
        goto LABEL_302;
      }
      char v110 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SBYTE7(v243) != 8) {
        goto LABEL_302;
      }
      char v110 = &__p;
    }
    if (v110->__r_.__value_.__r.__words[0] == 0x6D69645F70617277)
    {
      MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v209);
      uint64_t v111 = (void *)MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::CircularBufferWrapDim>((__n128 *)this);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v208);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>((__n128 *)this, (std::string *)&v242);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      __p.__r_.__value_.__r.__words[2] = v243;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v242;
      if (SBYTE7(v243) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 19) {
          goto LABEL_303;
        }
        uint64_t v112 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SBYTE7(v243) != 19) {
          goto LABEL_303;
        }
        uint64_t v112 = &__p;
      }
      std::string::size_type v113 = v112->__r_.__value_.__r.__words[0];
      std::string::size_type v114 = v112->__r_.__value_.__l.__size_;
      uint64_t v115 = *(std::string::size_type *)((char *)&v112->__r_.__value_.__r.__words[1] + 3);
      if (v113 == 0x72775F6563696C73 && v114 == 0x735F6D69645F7061 && v115 == 0x657A69735F6D6964)
      {
        MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v207);
        uint64_t v118 = (void (__cdecl *)(std::__shared_weak_count *__hidden))MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::CircularBufferSliceWrapDimSize>((__n128 *)this);
        long long v242 = 0u;
        long long v243 = 0u;
        int v244 = 1065353216;
        uint64_t v119 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
        if (MIL::Scanner::Token::GetType(v119) == 9)
        {
          (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v206);
          UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v206);
          MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>((__n128 *)this, (uint64_t)v241);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign((uint64_t)&v242, (uint64_t *)v241);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v241);
        }
        MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v205);
        if ((v14 - 31) >= 0x16)
        {
          v178 = __cxa_allocate_exception(8uLL);
          void *v178 = MEMORY[0x263F8C3C0] + 16;
          __cxa_throw(v178, MEMORY[0x263F8C220], MEMORY[0x263F8C178]);
        }
        uint64_t v49 = MIL::IRCircularBufferValueType::MakeWithShape(*((const void **)this + 1), dword_20F916654[v14 - 31], (uint64_t)&v235, (uint64_t)&v233, (uint64_t)&v231, v111, v118, (uint64_t *)&v242);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v242);
        if (v231.__r_.__value_.__r.__words[0])
        {
          v231.__r_.__value_.__l.__size_ = v231.__r_.__value_.__r.__words[0];
          operator delete(v231.__r_.__value_.__l.__data_);
        }
        int v50 = (void *)v233.__r_.__value_.__r.__words[0];
        if (!v233.__r_.__value_.__r.__words[0]) {
          goto LABEL_261;
        }
        v233.__r_.__value_.__l.__size_ = v233.__r_.__value_.__r.__words[0];
        goto LABEL_260;
      }
LABEL_303:
      __cxa_allocate_exception(0x48uLL);
      uint64_t v172 = *((void *)this + 4);
      uint64_t v173 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v174 = (*(uint64_t (**)(uint64_t))(*(void *)v173 + 24))(v173);
      MIL::TextLocationFromScannerLocation(v172, v174);
    }
LABEL_302:
    __cxa_allocate_exception(0x48uLL);
    uint64_t v169 = *((void *)this + 4);
    uint64_t v170 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    uint64_t v171 = (*(uint64_t (**)(uint64_t))(*(void *)v170 + 24))(v170);
    MIL::TextLocationFromScannerLocation(v169, v171);
  }
  int v55 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  int v56 = MIL::Scanner::Token::GetType(v55);
  uint64_t v57 = **((void **)this + 2);
  if (v56 == 24)
  {
    (*(void (**)(void *__return_ptr))(v57 + 16))(v204);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v204);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v203);
    int v58 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v202);
    uint64_t v59 = (const MIL::IRValueType *)MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TypeLength>((__n128 *)this);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v201);
    return MIL::IRListValueType::MakeWithDimension(*((MIL::IRListValueType **)this + 1), v58, v59, v60);
  }
  else
  {
    int v90 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(v57 + 24))();
    int v91 = MIL::Scanner::Token::GetType(v90);
    uint64_t v92 = **((void **)this + 2);
    if (v91 == 25)
    {
      (*(void (**)(void *__return_ptr))(v92 + 16))(v200);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v200);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v199);
      unint64_t v93 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 9);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v198);
      uint64_t v94 = (const MIL::IRValueType *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v197);
      return MIL::IRDictionaryValueType::Make(*((MIL::IRDictionaryValueType **)this + 1), v93, v94, v95);
    }
    else
    {
      unint64_t v121 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(v92 + 24))();
      int v122 = MIL::Scanner::Token::GetType(v121);
      uint64_t v123 = **((void **)this + 2);
      if (v122 == 26)
      {
        (*(void (**)(void *__return_ptr))(v123 + 16))(v196);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v196);
        MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v195);
        MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TypeList>((__n128 *)this, (void **)&v242);
        MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
        UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v194);
        MIL::IRTupleValueType::Make(*((const void **)this + 1));
      }
      uint64_t v125 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(v123 + 24))();
      int v126 = MIL::Scanner::Token::GetType(v125);
      uint64_t v127 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      int v128 = (*(uint64_t (**)(uint64_t))(*(void *)v127 + 88))(v127);
      if (v126 != 30)
      {
        if (v128 >= 2)
        {
          uint64_t v131 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
          DTypeFirstSet = (void *)MIL::ParserContext::GetDTypeFirstSet(*((MIL::ParserContext **)this + 3));
          LODWORD(v242) = MIL::Scanner::Token::GetType(v131);
          if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTypeFirstSet, (unsigned int *)&v242))
          {
            int v133 = MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>((__n128 *)this);
            MIL::TokenToIRDataType(v133);
            MIL::IRTensorValueType::MakeScalar();
          }
        }
        uint64_t v182 = *((void *)this + 4);
        uint64_t v183 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        uint64_t v184 = (*(uint64_t (**)(uint64_t))(*(void *)v183 + 24))(v183);
        MIL::TextLocationFromScannerLocation(v182, v184);
      }
      if (v128 <= 3)
      {
        uint64_t v185 = *((void *)this + 4);
        uint64_t v186 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
        uint64_t v187 = (*(uint64_t (**)(uint64_t))(*(void *)v186 + 24))(v186);
        MIL::TextLocationFromScannerLocation(v185, v187);
      }
      (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v193);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v193);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 1);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v192);
      uint64_t v129 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
      MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 2);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v191);
      return MIL::IRStateValueType::Make(*((MIL::IRStateValueType **)this + 1), v129, v130);
    }
  }
}

void sub_20F446774(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x51F]) < 0) {
    operator delete((void *)STACK[0x508]);
  }
  if (STACK[0x528]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x528]);
  }
  if (STACK[0x988])
  {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x988]);
    if ((v2 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (!v2)
  {
LABEL_10:
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v3 - 240);
    unint64_t v5 = (void *)STACK[0x710];
    if (STACK[0x710])
    {
      STACK[0x718] = (unint64_t)v5;
      operator delete(v5);
    }
    long long v6 = (void *)STACK[0x7C0];
    if (STACK[0x7C0])
    {
      STACK[0x7C8] = (unint64_t)v6;
      operator delete(v6);
    }
    int v7 = (void *)STACK[0x828];
    if (STACK[0x828])
    {
      STACK[0x830] = (unint64_t)v7;
      operator delete(v7);
    }
    if (SLOBYTE(STACK[0x877]) < 0) {
      operator delete((void *)STACK[0x860]);
    }
    if (SLOBYTE(STACK[0x8D7]) < 0) {
      operator delete((void *)STACK[0x8C0]);
    }
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v1);
  goto LABEL_10;
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::DType>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C650;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25B4D8;
  return MIL::Text::Parser::DType::Parse((MIL::Text::Parser::DType *)v4);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorShape>(__n128 *a1@<X0>, void **a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C680;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25ACF0;
  MIL::Text::Parser::TensorShape::Parse(&v5, a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::AttributesMap>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C140;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25B320;
  MIL::Text::Parser::AttributesMap::Parse(&v5, a2);
}

uint64_t MIL::TokenToIRDataType(int a1)
{
  if ((a1 - 31) >= 0x16)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = MEMORY[0x263F8C3C0] + 16;
    __cxa_throw(exception, MEMORY[0x263F8C220], MEMORY[0x263F8C178]);
  }
  return dword_20F916654[a1 - 31];
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferStrides>(__n128 *a1@<X0>, void **a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C6B0;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25ADF8;
  MIL::Text::Parser::TensorBufferStrides::Parse(&v5, a2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferRowAlignment>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C6E0;
  v5.n128_u64[1] = v1;
  __n128 v6 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v5.n128_u64[0] = (unint64_t)&unk_26C25AE50;
  unint64_t v3 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>(&v5);
  return MIL::IRConstantProperty::MakeUInt64Scalar((MIL::IRConstantProperty *)v5.n128_u64[1], v3);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactors>(__n128 *a1@<X0>, void **a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C710;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25AF58;
  MIL::Text::Parser::TensorBufferInterleaveFactors::Parse(&v5, a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::PixelBufferBytesPerRowVec>(__n128 *a1@<X0>, void **a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C740;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25B008;
  MIL::Text::Parser::PixelBufferBytesPerRowVec::Parse(&v5, a2);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::PixelBufferNumSlicesVec>(__n128 *a1@<X0>, void **a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C770;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25B0B8;
  MIL::Text::Parser::PixelBufferNumSlicesVec::Parse(&v5, a2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::CircularBufferWrapDim>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C7A0;
  v5.n128_u64[1] = v1;
  __n128 v6 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v5.n128_u64[0] = (unint64_t)&unk_26C25AEA8;
  unint64_t v3 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(&v5);
  return MIL::IRConstantProperty::MakeInt64Scalar((MIL::IRConstantProperty *)v5.n128_u64[1], v3);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::CircularBufferSliceWrapDimSize>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C7D0;
  v5.n128_u64[1] = v1;
  __n128 v6 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v5.n128_u64[0] = (unint64_t)&unk_26C25AF00;
  unint64_t v3 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>(&v5);
  return MIL::IRConstantDimension::Make((MIL::IRConstantDimension *)v5.n128_u64[1], v3);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TypeLength>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C800;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25AC40;
  return MIL::Text::Parser::TypeLength::Parse((MIL::Text::Parser::TypeLength *)v4);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::Parse<MIL::Text::Parser::TypeList>@<X0>(__n128 *a1@<X0>, void **a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C830;
  v6[1] = v3;
  __n128 v7 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25ABE8;
  return MIL::Text::Parser::TypeList::Parse((MIL::Text::Parser::TypeList *)v6, a2);
}

uint64_t MIL::Text::Parser::TypeList::Parse@<X0>(MIL::Text::Parser::TypeList *this@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = ((uint64_t (*)(void))MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>)();
  __n128 v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
  __n128 v7 = &v5[v6];
  void *v5 = v4;
  uint64_t v8 = v5 + 1;
  uint64_t v10 = (char *)*a2;
  __n128 v9 = (char *)a2[1];
  if (v9 != *a2)
  {
    do
    {
      uint64_t v11 = *((void *)v9 - 1);
      v9 -= 8;
      *--__n128 v5 = v11;
    }
    while (v9 != v10);
    __n128 v9 = (char *)*a2;
  }
  *a2 = v5;
  a2[1] = v8;
  a2[2] = v7;
  if (v9) {
    operator delete(v9);
  }
  while (1)
  {
    a2[1] = v8;
    uint64_t v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
    uint64_t result = MIL::Scanner::Token::GetType(v12);
    if (result != 9) {
      break;
    }
    (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v27);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v27);
    uint64_t v14 = MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
    uint64_t v15 = v14;
    int v17 = (uint64_t *)a2[1];
    unint64_t v16 = (unint64_t)a2[2];
    if ((unint64_t)v17 >= v16)
    {
      uint64_t v18 = ((char *)v17 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v18 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v19 = v16 - (void)*a2;
      uint64_t v20 = v19 >> 2;
      if (v19 >> 2 <= (unint64_t)(v18 + 1)) {
        uint64_t v20 = v18 + 1;
      }
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21) {
        std::string::size_type v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v21);
      }
      else {
        std::string::size_type v22 = 0;
      }
      uint64_t v23 = (uint64_t *)&v22[8 * v18];
      uint64_t *v23 = v15;
      uint64_t v8 = v23 + 1;
      unint64_t v25 = (char *)*a2;
      uint64_t v24 = (char *)a2[1];
      if (v24 != *a2)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *--uint64_t v23 = v26;
        }
        while (v24 != v25);
        uint64_t v24 = (char *)*a2;
      }
      *a2 = v23;
      a2[1] = v8;
      a2[2] = &v22[8 * v21];
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *int v17 = v14;
      uint64_t v8 = v17 + 1;
    }
  }
  return result;
}

void sub_20F4478CC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::TypeLength::Parse(MIL::Text::Parser::TypeLength *this)
{
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  if (MIL::Scanner::Token::GetType(v2) == 13)
  {
    (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v6);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
    return MIL::IRUnknownDimension::Make(*((MIL::IRUnknownDimension **)this + 1), 0);
  }
  else
  {
    uint64_t v4 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>((__n128 *)this);
    __n128 v5 = (MIL::IRConstantDimension *)*((void *)this + 1);
    return MIL::IRConstantDimension::Make(v5, v4);
  }
}

unint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C860;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25BE78;
  return MIL::Text::Parser::UINT64::Parse((MIL::Text::Parser::UINT64 *)v4);
}

uint64_t *MIL::Text::Parser::DimLength::Parse(MIL::Text::Parser::DimLength *this)
{
  uint64_t result = MIL::Text::Parser::Rule<MIL::Text::Parser::DimLength,MIL::IRDimension const*>::ParseOpt<MIL::Text::Parser::TypeLength>((__n128 *)this);
  if (!result)
  {
    unint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
    if (MIL::Scanner::Token::GetType(v3) != 15)
    {
      uint64_t v4 = *((void *)this + 4);
      uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v4, v6);
    }
    (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v7);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v7);
    return (uint64_t *)MIL::IRUnknownDimension::Make(*((MIL::IRUnknownDimension **)this + 1), (MIL::MILContext *)1);
  }
  return result;
}

void sub_20F447BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v20) {
    __cxa_free_exception(v19);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DimLength,MIL::IRDimension const*>::ParseOpt<MIL::Text::Parser::TypeLength>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C800;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25AC40;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::ParseOpt((uint64_t)v4);
}

void MIL::Text::Parser::TensorShape::Parse(__n128 *this@<X0>, void **a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v28);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::ParseOpt<MIL::Text::Parser::DimLength>(this);
  if (v4)
  {
    __n128 v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
    __n128 v7 = &v5[v6];
    void *v5 = v4;
    uint64_t v8 = v5 + 1;
    uint64_t v10 = (char *)*a2;
    __n128 v9 = (char *)a2[1];
    if (v9 != *a2)
    {
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *--__n128 v5 = v11;
      }
      while (v9 != v10);
      __n128 v9 = (char *)*a2;
    }
    *a2 = v5;
    a2[1] = v8;
    a2[2] = v7;
    if (v9) {
      operator delete(v9);
    }
    while (1)
    {
      a2[1] = v8;
      uint64_t v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
      if (MIL::Scanner::Token::GetType(v12) != 9) {
        break;
      }
      (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v27);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v27);
      uint64_t v13 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::Parse<MIL::Text::Parser::DimLength>(this);
      uint64_t v14 = v13;
      unint64_t v16 = (uint64_t **)a2[1];
      unint64_t v15 = (unint64_t)a2[2];
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v17 = ((char *)v16 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v15 - (void)*a2;
        uint64_t v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
          uint64_t v19 = v17 + 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v20);
        }
        else {
          unint64_t v21 = 0;
        }
        std::string::size_type v22 = (uint64_t **)&v21[8 * v17];
        char *v22 = v14;
        uint64_t v8 = v22 + 1;
        uint64_t v24 = (char *)*a2;
        uint64_t v23 = (char *)a2[1];
        if (v23 != *a2)
        {
          do
          {
            unint64_t v25 = (uint64_t *)*((void *)v23 - 1);
            v23 -= 8;
            *--std::string::size_type v22 = v25;
          }
          while (v23 != v24);
          uint64_t v23 = (char *)*a2;
        }
        *a2 = v22;
        a2[1] = v8;
        a2[2] = &v21[8 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *unint64_t v16 = v13;
        uint64_t v8 = v16 + 1;
      }
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 4);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v26);
}

void sub_20F447EBC(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::ParseOpt<MIL::Text::Parser::DimLength>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C890;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25AC98;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::DimLength,MIL::IRDimension const*>::ParseOpt((uint64_t)v4);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::Parse<MIL::Text::Parser::DimLength>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C890;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25AC98;
  return MIL::Text::Parser::DimLength::Parse((MIL::Text::Parser::DimLength *)v4);
}

uint64_t MIL::Text::Parser::TensorBufferInterleaveFactor::Parse(__n128 *this)
{
  int v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::Parse<MIL::Text::Parser::UINT8>(this);
  unint64_t v3 = (MIL::IRConstantProperty *)this->n128_u64[1];

  return MIL::IRConstantProperty::MakeUInt8Scalar(v3, v2);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::Parse<MIL::Text::Parser::UINT8>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C8C0;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25BD70;
  return MIL::Text::Parser::UINT8::Parse((MIL::Text::Parser::UINT8 *)v4);
}

uint64_t MIL::Text::Parser::TensorBufferStride::Parse(MIL::Text::Parser::TensorBufferStride *this)
{
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  if (MIL::Scanner::Token::GetType(v2) == 13)
  {
    (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v6);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v6);
    return MIL::IRUnknownProperty::Make(*((MIL::IRUnknownProperty **)this + 1), 0);
  }
  else
  {
    uint64_t v4 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>((__n128 *)this);
    __n128 v5 = (MIL::IRConstantProperty *)*((void *)this + 1);
    return MIL::IRConstantProperty::MakeInt64Scalar(v5, v4);
  }
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(__n128 *a1)
{
  unint64_t v1 = (MIL::ParserContext *)a1->n128_u64[1];
  v4[0] = (MIL::ParserContext *)&unk_26C25C8F0;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = (MIL::ParserContext *)&unk_26C25BE20;
  return MIL::Text::Parser::INT64::Parse(v4);
}

void MIL::Text::Parser::TensorBufferStrides::Parse(__n128 *this@<X0>, void **a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v28);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::ParseOpt<MIL::Text::Parser::TensorBufferStride>(this);
  if (v4)
  {
    __n128 v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
    __n128 v7 = &v5[v6];
    void *v5 = v4;
    uint64_t v8 = v5 + 1;
    uint64_t v10 = (char *)*a2;
    __n128 v9 = (char *)a2[1];
    if (v9 != *a2)
    {
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *--__n128 v5 = v11;
      }
      while (v9 != v10);
      __n128 v9 = (char *)*a2;
    }
    *a2 = v5;
    a2[1] = v8;
    a2[2] = v7;
    if (v9) {
      operator delete(v9);
    }
    while (1)
    {
      a2[1] = v8;
      uint64_t v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
      if (MIL::Scanner::Token::GetType(v12) != 9) {
        break;
      }
      (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v27);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v27);
      uint64_t v13 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::TensorBufferStride>(this);
      uint64_t v14 = v13;
      unint64_t v16 = (uint64_t *)a2[1];
      unint64_t v15 = (unint64_t)a2[2];
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v17 = ((char *)v16 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v15 - (void)*a2;
        uint64_t v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
          uint64_t v19 = v17 + 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v20);
        }
        else {
          unint64_t v21 = 0;
        }
        std::string::size_type v22 = (uint64_t *)&v21[8 * v17];
        uint64_t *v22 = v14;
        uint64_t v8 = v22 + 1;
        uint64_t v24 = (char *)*a2;
        uint64_t v23 = (char *)a2[1];
        if (v23 != *a2)
        {
          do
          {
            uint64_t v25 = *((void *)v23 - 1);
            v23 -= 8;
            *--std::string::size_type v22 = v25;
          }
          while (v23 != v24);
          uint64_t v23 = (char *)*a2;
        }
        *a2 = v22;
        a2[1] = v8;
        a2[2] = &v21[8 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *unint64_t v16 = v13;
        uint64_t v8 = v16 + 1;
      }
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 4);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v26);
}

void sub_20F448490(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::ParseOpt<MIL::Text::Parser::TensorBufferStride>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C920;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25ADA0;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::ParseOpt((uint64_t)v4);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::TensorBufferStride>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C920;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25ADA0;
  return MIL::Text::Parser::TensorBufferStride::Parse((MIL::Text::Parser::TensorBufferStride *)v4);
}

uint64_t MIL::Text::Parser::TensorBufferRowAlignment::Parse(__n128 *this)
{
  int v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>(this);
  unint64_t v3 = (MIL::IRConstantProperty *)this->n128_u64[1];

  return MIL::IRConstantProperty::MakeUInt64Scalar(v3, v2);
}

uint64_t MIL::Text::Parser::CircularBufferWrapDim::Parse(__n128 *this)
{
  int v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(this);
  unint64_t v3 = (MIL::IRConstantProperty *)this->n128_u64[1];

  return MIL::IRConstantProperty::MakeInt64Scalar(v3, v2);
}

uint64_t MIL::Text::Parser::CircularBufferSliceWrapDimSize::Parse(__n128 *this)
{
  int v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::Parse<MIL::Text::Parser::UINT64>(this);
  unint64_t v3 = (MIL::IRConstantDimension *)this->n128_u64[1];

  return MIL::IRConstantDimension::Make(v3, v2);
}

void MIL::Text::Parser::TensorBufferInterleaveFactors::Parse(__n128 *this@<X0>, void **a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v28);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::ParseOpt<MIL::Text::Parser::TensorBufferInterleaveFactor>(this);
  if (v4)
  {
    __n128 v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
    __n128 v7 = &v5[v6];
    void *v5 = v4;
    uint64_t v8 = v5 + 1;
    uint64_t v10 = (char *)*a2;
    __n128 v9 = (char *)a2[1];
    if (v9 != *a2)
    {
      do
      {
        uint64_t v11 = *((void *)v9 - 1);
        v9 -= 8;
        *--__n128 v5 = v11;
      }
      while (v9 != v10);
      __n128 v9 = (char *)*a2;
    }
    *a2 = v5;
    a2[1] = v8;
    a2[2] = v7;
    if (v9) {
      operator delete(v9);
    }
    while (1)
    {
      a2[1] = v8;
      uint64_t v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
      if (MIL::Scanner::Token::GetType(v12) != 9) {
        break;
      }
      (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v27);
      UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v27);
      uint64_t v13 = MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactor>(this);
      uint64_t v14 = v13;
      unint64_t v16 = (uint64_t *)a2[1];
      unint64_t v15 = (unint64_t)a2[2];
      if ((unint64_t)v16 >= v15)
      {
        uint64_t v17 = ((char *)v16 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v17 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v18 = v15 - (void)*a2;
        uint64_t v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
          uint64_t v19 = v17 + 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v20);
        }
        else {
          unint64_t v21 = 0;
        }
        std::string::size_type v22 = (uint64_t *)&v21[8 * v17];
        uint64_t *v22 = v14;
        uint64_t v8 = v22 + 1;
        uint64_t v24 = (char *)*a2;
        uint64_t v23 = (char *)a2[1];
        if (v23 != *a2)
        {
          do
          {
            uint64_t v25 = *((void *)v23 - 1);
            v23 -= 8;
            *--std::string::size_type v22 = v25;
          }
          while (v23 != v24);
          uint64_t v23 = (char *)*a2;
        }
        *a2 = v22;
        a2[1] = v8;
        a2[2] = &v21[8 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *unint64_t v16 = v13;
        uint64_t v8 = v16 + 1;
      }
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 4);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v26);
}

void sub_20F4488C0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::ParseOpt<MIL::Text::Parser::TensorBufferInterleaveFactor>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25C950;
  v4[1] = v1;
  __n128 v5 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25AD48;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::ParseOpt((uint64_t)v4);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::TensorBufferInterleaveFactor>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C950;
  v5.n128_u64[1] = v1;
  __n128 v6 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v5.n128_u64[0] = (unint64_t)&unk_26C25AD48;
  unint64_t v3 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::Parse<MIL::Text::Parser::UINT8>(&v5);
  return MIL::IRConstantProperty::MakeUInt8Scalar((MIL::IRConstantProperty *)v5.n128_u64[1], v3);
}

uint64_t MIL::Text::Parser::PixelBufferBytesPerRow::Parse(__n128 *this)
{
  int v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(this);
  unint64_t v3 = (MIL::IRConstantProperty *)this->n128_u64[1];

  return MIL::IRConstantProperty::MakeInt64Scalar(v3, v2);
}

void MIL::Text::Parser::PixelBufferBytesPerRowVec::Parse(__n128 *this@<X0>, void **a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v28);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRowVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferBytesPerRow>(this);
  __n128 v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
  uint64_t v7 = &v5[v6];
  void *v5 = v4;
  uint64_t v8 = v5 + 1;
  uint64_t v10 = (char *)*a2;
  __n128 v9 = (char *)a2[1];
  if (v9 != *a2)
  {
    do
    {
      uint64_t v11 = *((void *)v9 - 1);
      v9 -= 8;
      *--__n128 v5 = v11;
    }
    while (v9 != v10);
    __n128 v9 = (char *)*a2;
  }
  *a2 = v5;
  a2[1] = v8;
  a2[2] = v7;
  if (v9) {
    operator delete(v9);
  }
  while (1)
  {
    a2[1] = v8;
    uint64_t v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
    if (MIL::Scanner::Token::GetType(v12) != 9) {
      break;
    }
    (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v27);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v27);
    uint64_t v13 = MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRowVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferBytesPerRow>(this);
    uint64_t v14 = v13;
    unint64_t v16 = (uint64_t *)a2[1];
    unint64_t v15 = (unint64_t)a2[2];
    if ((unint64_t)v16 >= v15)
    {
      uint64_t v17 = ((char *)v16 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v17 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v15 - (void)*a2;
      uint64_t v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
        uint64_t v19 = v17 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v20);
      }
      else {
        unint64_t v21 = 0;
      }
      std::string::size_type v22 = (uint64_t *)&v21[8 * v17];
      uint64_t *v22 = v14;
      uint64_t v8 = v22 + 1;
      uint64_t v24 = (char *)*a2;
      uint64_t v23 = (char *)a2[1];
      if (v23 != *a2)
      {
        do
        {
          uint64_t v25 = *((void *)v23 - 1);
          v23 -= 8;
          *--std::string::size_type v22 = v25;
        }
        while (v23 != v24);
        uint64_t v23 = (char *)*a2;
      }
      *a2 = v22;
      a2[1] = v8;
      a2[2] = &v21[8 * v20];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *unint64_t v16 = v13;
      uint64_t v8 = v16 + 1;
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 4);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v26);
}

void sub_20F448C80(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRowVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferBytesPerRow>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C980;
  v5.n128_u64[1] = v1;
  __n128 v6 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v5.n128_u64[0] = (unint64_t)&unk_26C25AFB0;
  unint64_t v3 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(&v5);
  return MIL::IRConstantProperty::MakeInt64Scalar((MIL::IRConstantProperty *)v5.n128_u64[1], v3);
}

uint64_t MIL::Text::Parser::PixelBufferNumSlices::Parse(__n128 *this)
{
  int v2 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(this);
  unint64_t v3 = (MIL::IRConstantProperty *)this->n128_u64[1];

  return MIL::IRConstantProperty::MakeInt64Scalar(v3, v2);
}

void MIL::Text::Parser::PixelBufferNumSlicesVec::Parse(__n128 *this@<X0>, void **a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v28);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v4 = MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlicesVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferNumSlices>(this);
  __n128 v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), 1uLL);
  uint64_t v7 = &v5[v6];
  void *v5 = v4;
  uint64_t v8 = v5 + 1;
  uint64_t v10 = (char *)*a2;
  __n128 v9 = (char *)a2[1];
  if (v9 != *a2)
  {
    do
    {
      uint64_t v11 = *((void *)v9 - 1);
      v9 -= 8;
      *--__n128 v5 = v11;
    }
    while (v9 != v10);
    __n128 v9 = (char *)*a2;
  }
  *a2 = v5;
  a2[1] = v8;
  a2[2] = v7;
  if (v9) {
    operator delete(v9);
  }
  while (1)
  {
    a2[1] = v8;
    uint64_t v12 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
    if (MIL::Scanner::Token::GetType(v12) != 9) {
      break;
    }
    (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v27);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v27);
    uint64_t v13 = MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlicesVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferNumSlices>(this);
    uint64_t v14 = v13;
    unint64_t v16 = (uint64_t *)a2[1];
    unint64_t v15 = (unint64_t)a2[2];
    if ((unint64_t)v16 >= v15)
    {
      uint64_t v17 = ((char *)v16 - (unsigned char *)*a2) >> 3;
      if ((unint64_t)(v17 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v18 = v15 - (void)*a2;
      uint64_t v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
        uint64_t v19 = v17 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        unint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v20);
      }
      else {
        unint64_t v21 = 0;
      }
      std::string::size_type v22 = (uint64_t *)&v21[8 * v17];
      uint64_t *v22 = v14;
      uint64_t v8 = v22 + 1;
      uint64_t v24 = (char *)*a2;
      uint64_t v23 = (char *)a2[1];
      if (v23 != *a2)
      {
        do
        {
          uint64_t v25 = *((void *)v23 - 1);
          v23 -= 8;
          *--std::string::size_type v22 = v25;
        }
        while (v23 != v24);
        uint64_t v23 = (char *)*a2;
      }
      *a2 = v22;
      a2[1] = v8;
      a2[2] = &v21[8 * v20];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *unint64_t v16 = v13;
      uint64_t v8 = v16 + 1;
    }
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 4);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v26);
}

void sub_20F448F98(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlicesVec,std::vector<MIL::IRProperty const*>>::Parse<MIL::Text::Parser::PixelBufferNumSlices>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25C9B0;
  v5.n128_u64[1] = v1;
  __n128 v6 = a1[1];
  int v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v5.n128_u64[0] = (unint64_t)&unk_26C25B060;
  unint64_t v3 = (MIL::MILContext *)MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::Parse<MIL::Text::Parser::INT64>(&v5);
  return MIL::IRConstantProperty::MakeInt64Scalar((MIL::IRConstantProperty *)v5.n128_u64[1], v3);
}

void MIL::Text::Parser::Argument::Parse(__n128 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt<MIL::Text::Parser::ID>(this, &v19);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v19.__r_.__value_.__l.__size_)
    {
      uint64_t v5 = this[1].n128_i64[1];
      int v2 = &this[1].n128_i64[1];
      uint64_t v3 = v5;
      std::string::__init_copy_ctor_external(&v16, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
LABEL_6:
      MIL::ParserContext::GetConstexprVariableValue(v3, (unsigned __int8 *)&v16, &v17);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      if (v17)
      {
        MIL::ParserContext::GetCurrentOperator(*v2, &v14);
        int IsConstexprOpTakingInputs = MIL::Util::IsConstexprOpTakingInputs(v14, v6);
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        if (IsConstexprOpTakingInputs)
        {
          uint64_t v12 = v17;
          uint64_t v13 = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::IRArgument::Make();
        }
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v11, v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
      }
      else {
        std::string v11 = v19;
      }
      MIL::IRArgument::Make();
    }
  }
  else if (*((unsigned char *)&v19.__r_.__value_.__s + 23))
  {
    uint64_t v4 = this[1].n128_i64[1];
    int v2 = &this[1].n128_i64[1];
    uint64_t v3 = v4;
    std::string v16 = v19;
    goto LABEL_6;
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt<MIL::Text::Parser::Value>(this, &v17);
  if (v17)
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    MIL::IRArgument::Make();
  }
  uint64_t v8 = this[2].n128_i64[0];
  uint64_t Options = MIL::ParserContext::GetOptions((MIL::ParserContext *)this[1].n128_u64[1]);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  MIL::TextLocationFromScannerLocation(v8, v10);
}

void sub_20F4493CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v31) {
    __cxa_free_exception(v30);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v32 - 64);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (*(char *)(v32 - 33) < 0) {
    operator delete(*(void **)(v32 - 56));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt<MIL::Text::Parser::ID>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C1A0;
  v6[1] = v3;
  __n128 v7 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25BFD8;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::ID,std::string>::ParseOpt((uint64_t)v6, a2);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt<MIL::Text::Parser::Value>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6[0] = &unk_26C25C470;
  v6[1] = v3;
  __n128 v7 = a1[1];
  uint64_t v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6[0] = &unk_26C25A7C8;
  return MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::ParseOpt((uint64_t)v6, a2);
}

void MIL::Text::Parser::ArgumentList::Parse(__n128 *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::Parse<MIL::Text::Parser::Argument>(this);
}

void sub_20F449748(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  *(void *)(v2 - 32) = v1;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 32));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::Parse<MIL::Text::Parser::Argument>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v3.n128_u64[0] = (unint64_t)&unk_26C25C9E0;
  v3.n128_u64[1] = v1;
  __n128 v4 = a1[1];
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  uint64_t v5 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v3.n128_u64[0] = (unint64_t)&unk_26C25B110;
  MIL::Text::Parser::Argument::Parse(&v3);
}

void MIL::Text::Parser::IDArgumentBinding::Parse(__n128 *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &v6);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 0);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v5);
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
  if (MIL::Scanner::Token::GetType(v2) == 5)
  {
    (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v4);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v4);
    MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBinding,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::ArgumentList>(this, &v3);
  }
  MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::Parse<MIL::Text::Parser::Argument>(this);
}

void sub_20F449A1C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 72) = v1;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 72));
  __n128 v4 = *(std::__shared_weak_count **)(v2 - 48);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(v2 - 73) < 0) {
    operator delete(*(void **)(v2 - 96));
  }
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBinding,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::ArgumentList>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25CA10;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  __n128 v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25B168;
  MIL::Text::Parser::ArgumentList::Parse(&v5, a2);
}

void MIL::Text::Parser::IDArgumentBindingMap::Parse(__n128 *this@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::IDArgumentBinding>(this);
}

void sub_20F449D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::~pair(v28 - 96);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v27, *(void **)(v27 + 8));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::Parse<MIL::Text::Parser::IDArgumentBinding>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v3.n128_u64[0] = (unint64_t)&unk_26C25CA40;
  v3.n128_u64[1] = v1;
  __n128 v4 = a1[1];
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  uint64_t v5 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v3.n128_u64[0] = (unint64_t)&unk_26C25B1C0;
  MIL::Text::Parser::IDArgumentBinding::Parse(&v3);
}

void MIL::Text::Parser::IDValueBinding::Parse(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &__p);
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBinding,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::ValueAssign>(this, &v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external((std::string *)a2, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    *(std::string *)a2 = __p;
  }
  *(_OWORD *)(a2 + 24) = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20F449F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBinding,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::ValueAssign>@<X0>(__n128 *a1@<X0>, void *a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v6.n128_u64[0] = (unint64_t)&unk_26C25CA70;
  v6.n128_u64[1] = v3;
  __n128 v7 = a1[1];
  long long v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v7.n128_u64[0] + 24))(v7.n128_u64[0], v7);
  uint64_t v8 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v6.n128_u64[0] = (unint64_t)&unk_26C25A820;
  return MIL::Text::Parser::ValueAssign::Parse(&v6, a2);
}

uint64_t MIL::Text::Parser::IDValueBindingMap::Parse@<X0>(MIL::Text::Parser::IDValueBindingMap *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::IDValueBinding>((__n128 *)this, (uint64_t)&v12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>(a2, (unsigned __int8 *)&v12, (uint64_t)&v12);
  while (1)
  {
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v12.__r_.__value_.__l.__data_);
    }
    long long v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
    uint64_t result = MIL::Scanner::Token::GetType(v4);
    if (result != 9) {
      break;
    }
    (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v11);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v11);
    MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::IDValueBinding>((__n128 *)this, (uint64_t)&v12);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v10, v12.__r_.__value_.__l.__data_, v12.__r_.__value_.__l.__size_);
    }
    else {
      std::string v10 = v12;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>(a2, (unsigned __int8 *)&v12, (uint64_t)&v12);
    if (!v6)
    {
      uint64_t v7 = *((void *)this + 4);
      uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v7, v9);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  return result;
}

void sub_20F44A210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v26 - 72);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v25);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::Parse<MIL::Text::Parser::IDValueBinding>(__n128 *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = a1->n128_u64[1];
  v5.n128_u64[0] = (unint64_t)&unk_26C25CAA0;
  v5.n128_u64[1] = v3;
  __n128 v6 = a1[1];
  long long v4 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v6.n128_u64[0] + 24))(v6.n128_u64[0], v6);
  uint64_t v7 = *(void *)MIL::Scanner::Token::GetLocation(v4);
  v5.n128_u64[0] = (unint64_t)&unk_26C25B270;
  MIL::Text::Parser::IDValueBinding::Parse(&v5, a2);
}

void MIL::Text::Parser::AttributesMap::Parse(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v5);
  MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt<MIL::Text::Parser::IDValueBindingMap>(this, a2);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 4);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v4);
}

void sub_20F44A3B8(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::IDTypeBinding::Parse(__n128 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::Parse<MIL::Text::Parser::Type>(this);
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &v3);
  if (SHIBYTE(v3.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&__p, v3.__r_.__value_.__l.__data_, v3.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v3;
  }
  MIL::IRNamedValueType::Make();
}

void sub_20F44A46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::IDTypeBindingMap::Parse(__n128 *this@<X0>, void *a2@<X8>)
{
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::Parse<MIL::Text::Parser::IDTypeBinding>(this);
}

void sub_20F44A6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v20) {
    __cxa_free_exception(v19);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100]((void ***)(v21 - 40), 0);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v18, *(char **)(v18 + 8));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::Parse<MIL::Text::Parser::IDTypeBinding>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v3.n128_u64[0] = (unint64_t)&unk_26C25CAD0;
  v3.n128_u64[1] = v1;
  __n128 v4 = a1[1];
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v4.n128_u64[0] + 24))(v4.n128_u64[0], v4);
  uint64_t v5 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v3.n128_u64[0] = (unint64_t)&unk_26C25B378;
  MIL::Text::Parser::IDTypeBinding::Parse(&v3);
}

void MIL::Text::Parser::IDTypeBindingList::Parse(__n128 *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::Parse<MIL::Text::Parser::IDTypeBinding>(this);
}

void sub_20F44AC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(&a22);
  std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100]((void ***)(v24 - 72), 0);
  *(void *)(v24 - 72) = v23;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 72));
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::IDList::Parse@<X0>(__n128 *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &__p);
  unint64_t v4 = *(void *)(a2 + 16);
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >= v4)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a2) >> 3);
    unint64_t v8 = v7 + 1;
    if (v7 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *(void *)a2) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v10) {
      std::string v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v10);
    }
    else {
      std::string v11 = 0;
    }
    std::string v12 = v11 + v7;
    __v.__first_ = v11;
    __v.__begin_ = v12;
    __v.__end_cap_.__value_ = &v11[v10];
    long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v12->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    memset(&__p, 0, sizeof(__p));
    __v.__end_ = v12 + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    uint64_t v14 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a2 + 8) = v14;
    if (v15 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v6 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(void *)(v5 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)unint64_t v5 = v6;
    *(void *)(a2 + 8) = v5 + 24;
  }
  while (1)
  {
    std::string v16 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t))(*(void *)this[1].n128_u64[0] + 24))(this[1].n128_u64[0]);
    uint64_t result = MIL::Scanner::Token::GetType(v16);
    if (result != 9) {
      break;
    }
    (*(void (**)(void *__return_ptr))(*(void *)this[1].n128_u64[0] + 16))(v30);
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v30);
    MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::Parse<MIL::Text::Parser::ID>(this, &__p);
    unint64_t v19 = *(void *)(a2 + 8);
    unint64_t v18 = *(void *)(a2 + 16);
    if (v19 >= v18)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *(void *)a2) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(void *)a2) >> 3);
      if (2 * v23 > v22) {
        unint64_t v22 = 2 * v23;
      }
      if (v23 >= 0x555555555555555) {
        unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v24 = v22;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v24) {
        uint64_t v25 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v24);
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v26 = v25 + v21;
      __v.__first_ = v25;
      __v.__begin_ = v26;
      __v.__end_cap_.__value_ = &v25[v24];
      long long v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v26->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v26 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
      uint64_t v28 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v29 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a2 + 8) = v28;
      if (v29 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v19 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v19 = v20;
      *(void *)(a2 + 8) = v19 + 24;
    }
  }
  return result;
}

void sub_20F44AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__p, uint64_t a6, int a7, __int16 a8, char a9, char a10, std::__split_buffer<std::string> *a11, uint64_t a12, uint64_t a13, void *__pa, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DType::Parse(MIL::Text::Parser::DType *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  MIL::Scanner::Token::Token(v11, v2);
  DTypeFirstSet = (void *)MIL::ParserContext::GetDTypeFirstSet(*((MIL::ParserContext **)this + 3));
  LODWORD(v1std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v11);
  if (!std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTypeFirstSet, (unsigned int *)&v10))
  {
    uint64_t v6 = *((void *)this + 4);
    uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
    MIL::TextLocationFromScannerLocation(v6, v8);
  }
  (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v9);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v9);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v11);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v11);
  return Type;
}

void sub_20F44B1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)(v25 - 64));
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::Parser::DTYPE_BOOL::Parse(MIL::Text::Parser::DTYPE_BOOL *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 31);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_STRING::Parse(MIL::Text::Parser::DTYPE_STRING *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 32);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_BF16::Parse(MIL::Text::Parser::DTYPE_BF16 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 33);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_FP16::Parse(MIL::Text::Parser::DTYPE_FP16 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 34);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B394(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_FP8E5M2::Parse(MIL::Text::Parser::DTYPE_FP8E5M2 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 35);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_FP8E4M3FN::Parse(MIL::Text::Parser::DTYPE_FP8E4M3FN *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 36);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_FP32::Parse(MIL::Text::Parser::DTYPE_FP32 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 37);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_FP64::Parse(MIL::Text::Parser::DTYPE_FP64 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 38);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_INT4::Parse(MIL::Text::Parser::DTYPE_INT4 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 39);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_INT8::Parse(MIL::Text::Parser::DTYPE_INT8 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 40);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B5BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_INT16::Parse(MIL::Text::Parser::DTYPE_INT16 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 41);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_INT32::Parse(MIL::Text::Parser::DTYPE_INT32 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 42);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_INT64::Parse(MIL::Text::Parser::DTYPE_INT64 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 43);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT1::Parse(MIL::Text::Parser::DTYPE_UINT1 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 44);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT2::Parse(MIL::Text::Parser::DTYPE_UINT2 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 45);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT3::Parse(MIL::Text::Parser::DTYPE_UINT3 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 46);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT4::Parse(MIL::Text::Parser::DTYPE_UINT4 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 47);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT6::Parse(MIL::Text::Parser::DTYPE_UINT6 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 48);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT8::Parse(MIL::Text::Parser::DTYPE_UINT8 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 49);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT16::Parse(MIL::Text::Parser::DTYPE_UINT16 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 50);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT32::Parse(MIL::Text::Parser::DTYPE_UINT32 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 51);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44B9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::DTYPE_UINT64::Parse(MIL::Text::Parser::DTYPE_UINT64 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 52);
  uint64_t Type = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)v3);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v3);
  return Type;
}

void sub_20F44BA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

float MIL::Text::Parser::FP32::Parse(MIL::Text::Parser::FP32 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 19);
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v13);
  std::string::size_type v3 = *(void *)(ProgramFirstSet + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = *(const void **)ProgramFirstSet;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v4, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v13);
  uint64_t v8 = *((void *)this + 4);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  float v11 = MIL::Util::stof(&__dst, v8, v10);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_20F44BB4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void *std::string::basic_string<std::string_view,0>(void *__dst, uint64_t a2)
{
  size_t v3 = *(void *)(a2 + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = *(const void **)a2;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    unint64_t v5 = operator new(v6 + 1);
    __dst[1] = v3;
    __dst[2] = v7 | 0x8000000000000000;
    *std::string __dst = v5;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v3;
    unint64_t v5 = __dst;
    if (!v3) {
      goto LABEL_9;
    }
  }
  memmove(v5, v4, v3);
LABEL_9:
  *((unsigned char *)v5 + v3) = 0;
  return __dst;
}

double MIL::Text::Parser::FP64::Parse(MIL::Text::Parser::FP64 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 19);
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v13);
  std::string::size_type v3 = *(void *)(ProgramFirstSet + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = *(const void **)ProgramFirstSet;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v4, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v13);
  uint64_t v8 = *((void *)this + 4);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  double v11 = MIL::Util::stod(&__dst, v8, v10);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_20F44BD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t MIL::Text::Parser::UINT8::Parse(MIL::Text::Parser::UINT8 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 18);
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v14);
  std::string::size_type v3 = *(void *)(ProgramFirstSet + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = *(const void **)ProgramFirstSet;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v4, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v14);
  int BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  uint64_t v9 = *((void *)this + 4);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  uint64_t v12 = MIL::Util::stoui8(&__dst, BaseAndPrepIntStringForParse, v9, v11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_20F44BEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t MIL::Text::Parser::INT32::Parse(MIL::ParserContext **this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 18);
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v12);
  std::string::size_type v3 = *(void *)(ProgramFirstSet + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = *(const void **)ProgramFirstSet;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v4, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v12);
  int BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  uint64_t Options = MIL::ParserContext::GetOptions(this[3]);
  (*(void (**)(uint64_t))(*(void *)Options + 24))(Options);
  uint64_t v10 = MIL::Util::stoi(&__dst, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_20F44C010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t MIL::Text::Parser::INT64::Parse(MIL::ParserContext **this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 18);
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v12);
  std::string::size_type v3 = *(void *)(ProgramFirstSet + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = *(const void **)ProgramFirstSet;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v4, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v12);
  int BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  uint64_t Options = MIL::ParserContext::GetOptions(this[3]);
  (*(void (**)(uint64_t))(*(void *)Options + 24))(Options);
  uint64_t v10 = MIL::Util::stoll(&__dst, BaseAndPrepIntStringForParse);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v10;
}

void sub_20F44C170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

unint64_t MIL::Text::Parser::UINT64::Parse(MIL::Text::Parser::UINT64 *this)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 18);
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v14);
  std::string::size_type v3 = *(void *)(ProgramFirstSet + 8);
  if (v3 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v4 = *(const void **)ProgramFirstSet;
  if (v3 >= 0x17)
  {
    uint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17) {
      uint64_t v6 = v3 | 7;
    }
    uint64_t v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((unsigned char *)&__dst.__r_.__value_.__s + 23) = *(void *)(ProgramFirstSet + 8);
  p_dst = &__dst;
  if (v3) {
LABEL_8:
  }
    memmove(p_dst, v4, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v14);
  int BaseAndPrepIntStringForParse = MIL::Util::GetBaseAndPrepIntStringForParse(&__dst);
  uint64_t v9 = *((void *)this + 4);
  uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
  unint64_t v12 = MIL::Util::stoull(&__dst, BaseAndPrepIntStringForParse, v9, v11);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return v12;
}

void sub_20F44C2D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

BOOL MIL::Text::Parser::BOOL::Parse(MIL::Text::Parser::BOOL *this)
{
  uint64_t v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  if (MIL::Scanner::Token::GetType(v2) != 21)
  {
    std::string::size_type v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
    if (MIL::Scanner::Token::GetType(v3) != 22)
    {
      uint64_t v6 = *((void *)this + 4);
      uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v6, v8);
    }
  }
  (*(void (**)(uint64_t *__return_ptr))(**((void **)this + 2) + 16))(&v9);
  BOOL v4 = MIL::Scanner::Token::GetType((MIL::Scanner::Token *)&v9) == 21;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v9);
  return v4;
}

void sub_20F44C48C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, char a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v20) {
    __cxa_free_exception(v19);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Text::Parser::STRING::Parse(MIL::Text::Parser::STRING *this@<X0>, void *a2@<X8>)
{
  MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 20);
  uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)v9);
  size_t v4 = *(void *)(ProgramFirstSet + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v5 = *(const void **)ProgramFirstSet;
  if (v4 >= 0x17)
  {
    uint64_t v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v6 = v4 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    a2[1] = v4;
    a2[2] = v7 | 0x8000000000000000;
    *a2 = v8;
    a2 = v8;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v4;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(a2, v5, v4);
LABEL_9:
  *((unsigned char *)a2 + v4) = 0;
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v9);
}

void sub_20F44C5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Text::Parser::SYNTAX_VERSION::Parse(MIL::Text::Parser::SYNTAX_VERSION *this)
{
  float v2 = MIL::Text::Parser::Rule<MIL::Text::Parser::SYNTAX_VERSION,MIL::SyntaxVersion>::Parse<MIL::Text::Parser::FP32>((__n128 *)this);
  if (MIL::Util::FltApproxEqual((MIL::Util *)3, v2, 1.0, 0.00000011921)) {
    return 1;
  }
  if (MIL::Util::FltApproxEqual((MIL::Util *)3, v2, 1.1, 0.00000011921)) {
    return 2;
  }
  uint64_t v3 = 3;
  if (!MIL::Util::FltApproxEqual((MIL::Util *)3, v2, 1.2, 0.00000011921))
  {
    if (!MIL::Util::FltApproxEqual((MIL::Util *)3, v2, 1.3, 0.00000011921))
    {
      uint64_t v5 = *((void *)this + 4);
      uint64_t Options = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 24))(Options);
      MIL::TextLocationFromScannerLocation(v5, v7);
    }
    return 4;
  }
  return v3;
}

void sub_20F44C734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v20) {
    __cxa_free_exception(v19);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

float MIL::Text::Parser::Rule<MIL::Text::Parser::SYNTAX_VERSION,MIL::SyntaxVersion>::Parse<MIL::Text::Parser::FP32>(__n128 *a1)
{
  unint64_t v1 = a1->n128_u64[1];
  v4[0] = &unk_26C25CB00;
  v4[1] = v1;
  __n128 v5 = a1[1];
  float v2 = (MIL::Scanner::Token *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v5.n128_u64[0] + 24))(v5.n128_u64[0], v5);
  uint64_t v6 = *(void *)MIL::Scanner::Token::GetLocation(v2);
  v4[0] = &unk_26C25BCC0;
  return MIL::Text::Parser::FP32::Parse((MIL::Text::Parser::FP32 *)v4);
}

void MIL::Text::Parser::ID::Parse(MIL::Text::Parser::ID *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 2) + 24))(*((void *)this + 2));
  MIL::Scanner::Token::Token(v22, v4);
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  if (Type == 54)
  {
    MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::Expect((uint64_t)this, 54);
    uint64_t ProgramFirstSet = MIL::ParserContext::GetProgramFirstSet((MIL::ParserContext *)&v20);
    size_t v8 = *(void *)(ProgramFirstSet + 8);
    if (v8 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = *(const void **)ProgramFirstSet;
    if (v8 >= 0x17)
    {
      uint64_t v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17) {
        uint64_t v13 = v8 | 7;
      }
      uint64_t v14 = v13 + 1;
      int v15 = (std::string *)operator new(v13 + 1);
      a2->__r_.__value_.__l.__size_ = v8;
      a2->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
      a2->__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
      a2 = v15;
    }
    else
    {
      *((unsigned char *)&a2->__r_.__value_.__s + 23) = v8;
      if (!v8) {
        goto LABEL_14;
      }
    }
    memmove(a2, v9, v8);
LABEL_14:
    a2->__r_.__value_.__s.__data_[v8] = 0;
    UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)&v20);
    goto LABEL_15;
  }
  uint64_t v10 = (MIL::ParserContext *)*((void *)this + 3);
  uint64_t Options = MIL::ParserContext::GetOptions(v10);
  int v12 = (*(uint64_t (**)(uint64_t))(*(void *)Options + 88))(Options);
  MIL::ParserContext::GetFallbackIDForKeyword((uint64_t)v10, Type, v12, &v20);
  if (!v21)
  {
    uint64_t v16 = *((void *)this + 4);
    uint64_t v17 = MIL::ParserContext::GetOptions(*((MIL::ParserContext **)this + 3));
    uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
    MIL::TextLocationFromScannerLocation(v16, v18);
  }
  (*(void (**)(void *__return_ptr))(**((void **)this + 2) + 16))(v19);
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v19);
  if (!v21) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(a2, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    if (v21 && SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *a2 = v20;
  }
LABEL_15:
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)v22);
}

void sub_20F44CADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (*(unsigned char *)(v26 - 72))
  {
    if (*(char *)(v26 - 73) < 0) {
      operator delete(*(void **)(v26 - 96));
    }
  }
  UnknownLocationImpl::~UnknownLocationImpl((UnknownLocationImpl *)(v26 - 64));
  _Unwind_Resume(a1);
}

void MIL::Text::Parser::Program::~Program(MIL::Text::Parser::Program *this)
{
  *(void *)this = &unk_26C25A458;
  unint64_t v1 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  *(void *)this = &unk_26C25A458;
  unint64_t v1 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Program,std::unique_ptr<MIL::IRProgram>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t ProgramFirstSet = (void *)MIL::ParserContext::GetProgramFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  uint64_t result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ProgramFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  return result;
}

void MIL::Text::Parser::Function::~Function(MIL::Text::Parser::Function *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::Function,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  FunctionFirstSet = (void *)MIL::ParserContext::GetFunctionFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(FunctionFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void MIL::Text::Parser::FunctionMap::~FunctionMap(MIL::Text::Parser::FunctionMap *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::FunctionMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  FunctionMapFirstSet = (void *)MIL::ParserContext::GetFunctionMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(FunctionMapFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void MIL::Text::Parser::OpsetBlock::~OpsetBlock(MIL::Text::Parser::OpsetBlock *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlock,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  OpsetBlockFirstSet = (void *)MIL::ParserContext::GetOpsetBlockFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(OpsetBlockFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void MIL::Text::Parser::OpsetBlockMap::~OpsetBlockMap(MIL::Text::Parser::OpsetBlockMap *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::OpsetBlockMap,std::map<std::string,std::unique_ptr<MIL::IRBlock>>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  OpsetBlockMapFirstSet = (void *)MIL::ParserContext::GetOpsetBlockMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(OpsetBlockMapFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

void MIL::Text::Parser::Block::~Block(MIL::Text::Parser::Block *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Block,std::unique_ptr<MIL::IRBlock>,MIL::IROpset const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  BlockFirstSet = (void *)MIL::ParserContext::GetBlockFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(BlockFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::BlockList::~BlockList(MIL::Text::Parser::BlockList *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::BlockList,std::vector<std::shared_ptr<MIL::IRBlock>>,MIL::IROpset const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  BlockListFirstSet = (void *)MIL::ParserContext::GetBlockListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(BlockListFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void MIL::Text::Parser::BlockInputDecls::~BlockInputDecls(MIL::Text::Parser::BlockInputDecls *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::BlockInputDecls,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  BlockInputDeclsFirstSet = (void *)MIL::ParserContext::GetBlockInputDeclsFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(BlockInputDeclsFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::Op::~Op(MIL::Text::Parser::Op *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Op,std::shared_ptr<MIL::IROperation>,MIL::IROpset const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  OpFirstSet = (void *)MIL::ParserContext::GetOpFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(OpFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void MIL::Text::Parser::OpList::~OpList(MIL::Text::Parser::OpList *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::OpList,std::vector<std::shared_ptr<MIL::IROperation>>,MIL::IROpset const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  OpListFirstSet = (void *)MIL::ParserContext::GetOpListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(OpListFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void MIL::Text::Parser::Value::~Value(MIL::Text::Parser::Value *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Value,std::shared_ptr<MIL::IRValue const>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  ValueFirstSet = (void *)MIL::ParserContext::GetValueFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ValueFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void MIL::Text::Parser::ValueAssign::~ValueAssign(MIL::Text::Parser::ValueAssign *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueAssign,std::shared_ptr<MIL::IRValue const>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  ValueAssignFirstSet = (void *)MIL::ParserContext::GetValueAssignFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ValueAssignFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void MIL::Text::Parser::ValueLiteral::~ValueLiteral(MIL::Text::Parser::ValueLiteral *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ValueLiteral,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  ValueLiteralFirstSet = (void *)MIL::ParserContext::GetValueLiteralFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ValueLiteralFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::IValue::~IValue(MIL::Text::Parser::IValue *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  IValueFirstSet = (void *)MIL::ParserContext::GetIValueFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IValueFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::RefValue::~RefValue(MIL::Text::Parser::RefValue *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::RefValue,std::unique_ptr<MIL::IRValue const>,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  RefValueFirstSet = (void *)MIL::ParserContext::GetRefValueFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(RefValueFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::TupleVal::~TupleVal(MIL::Text::Parser::TupleVal *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TupleVal,std::unique_ptr<MIL::IRTupleValue const>,MIL::IRTupleValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  TupleValFirstSet = (void *)MIL::ParserContext::GetTupleValFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TupleValFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::ListVal::~ListVal(MIL::Text::Parser::ListVal *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ListVal,std::unique_ptr<MIL::IRListValue const>,MIL::IRListValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  ListValFirstSet = (void *)MIL::ParserContext::GetListValFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ListValFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::DictItem::~DictItem(MIL::Text::Parser::DictItem *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DictItem,std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>,MIL::IRValueType const*,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  DictItemFirstSet = (void *)MIL::ParserContext::GetDictItemFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v9 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v9);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DictItemFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, a3);
  }
  *a4 = 0;
  a4[1] = 0;
  return result;
}

void MIL::Text::Parser::DictItemList::~DictItemList(MIL::Text::Parser::DictItemList *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DictItemList,std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,MIL::IRValueType const*,MIL::IRValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  DictItemListFirstSet = (void *)MIL::ParserContext::GetDictItemListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v9 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v9);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DictItemListFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, a3);
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  return result;
}

void MIL::Text::Parser::DictVal::~DictVal(MIL::Text::Parser::DictVal *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DictVal,std::unique_ptr<MIL::IRDictionaryValue const>,MIL::IRDictionaryValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  DictValFirstSet = (void *)MIL::ParserContext::GetDictValFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DictValFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::TensorVal::~TensorVal(MIL::Text::Parser::TensorVal *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorVal,std::unique_ptr<MIL::IRTensorValue const>,MIL::IRTensorValueType const*>::ParseOpt@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  TensorValFirstSet = (void *)MIL::ParserContext::GetTensorValFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v7 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v7);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorValFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
  }
  *a3 = 0;
  return result;
}

void MIL::Text::Parser::Type::~Type(MIL::Text::Parser::Type *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Type,MIL::IRValueType const*>::ParseOpt(uint64_t a1)
{
  TypeFirstSet = (void *)MIL::ParserContext::GetTypeFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TypeFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::TypeList::~TypeList(MIL::Text::Parser::TypeList *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TypeList,std::vector<MIL::IRValueType const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  TypeListFirstSet = (void *)MIL::ParserContext::GetTypeListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TypeListFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::TypeLength::~TypeLength(MIL::Text::Parser::TypeLength *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TypeLength,MIL::IRDimension const*>::ParseOpt(uint64_t a1)
{
  TypeLengthFirstSet = (void *)MIL::ParserContext::GetTypeLengthFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TypeLengthFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DimLength::~DimLength(MIL::Text::Parser::DimLength *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DimLength,MIL::IRDimension const*>::ParseOpt(uint64_t a1)
{
  DimLengthFirstSet = (void *)MIL::ParserContext::GetDimLengthFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DimLengthFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::TensorShape::~TensorShape(MIL::Text::Parser::TensorShape *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorShape,std::vector<MIL::IRDimension const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  TensorShapeFirstSet = (void *)MIL::ParserContext::GetTensorShapeFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorShapeFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::TensorBufferInterleaveFactor::~TensorBufferInterleaveFactor(MIL::Text::Parser::TensorBufferInterleaveFactor *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactor,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  TensorBufferInterleaveFactorFirstSet = (void *)MIL::ParserContext::GetTensorBufferInterleaveFactorFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferInterleaveFactorFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::TensorBufferStride::~TensorBufferStride(MIL::Text::Parser::TensorBufferStride *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStride,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  TensorBufferStrideFirstSet = (void *)MIL::ParserContext::GetTensorBufferStrideFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferStrideFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::TensorBufferStrides::~TensorBufferStrides(MIL::Text::Parser::TensorBufferStrides *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferStrides,std::vector<MIL::IRProperty const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  TensorBufferStridesFirstSet = (void *)MIL::ParserContext::GetTensorBufferStridesFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferStridesFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::TensorBufferRowAlignment::~TensorBufferRowAlignment(MIL::Text::Parser::TensorBufferRowAlignment *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferRowAlignment,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  TensorBufferRowAlignmentFirstSet = (void *)MIL::ParserContext::GetTensorBufferRowAlignmentFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferRowAlignmentFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::CircularBufferWrapDim::~CircularBufferWrapDim(MIL::Text::Parser::CircularBufferWrapDim *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::CircularBufferWrapDim,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  CircularBufferWrapDimFirstSet = (void *)MIL::ParserContext::GetCircularBufferWrapDimFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(CircularBufferWrapDimFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::CircularBufferSliceWrapDimSize::~CircularBufferSliceWrapDimSize(MIL::Text::Parser::CircularBufferSliceWrapDimSize *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::CircularBufferSliceWrapDimSize,MIL::IRDimension const*>::ParseOpt(uint64_t a1)
{
  CircularBufferSliceWrapDimSizeFirstSet = (void *)MIL::ParserContext::GetCircularBufferSliceWrapDimSizeFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(CircularBufferSliceWrapDimSizeFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::TensorBufferInterleaveFactors::~TensorBufferInterleaveFactors(MIL::Text::Parser::TensorBufferInterleaveFactors *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::TensorBufferInterleaveFactors,std::vector<MIL::IRProperty const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  TensorBufferInterleaveFactorsFirstSet = (void *)MIL::ParserContext::GetTensorBufferInterleaveFactorsFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(TensorBufferInterleaveFactorsFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::PixelBufferBytesPerRow::~PixelBufferBytesPerRow(MIL::Text::Parser::PixelBufferBytesPerRow *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRow,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  PixelBufferBytesPerRowFirstSet = (void *)MIL::ParserContext::GetPixelBufferBytesPerRowFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(PixelBufferBytesPerRowFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::PixelBufferBytesPerRowVec::~PixelBufferBytesPerRowVec(MIL::Text::Parser::PixelBufferBytesPerRowVec *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferBytesPerRowVec,std::vector<MIL::IRProperty const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  PixelBufferBytesPerRowVecFirstSet = (void *)MIL::ParserContext::GetPixelBufferBytesPerRowVecFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(PixelBufferBytesPerRowVecFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::PixelBufferNumSlices::~PixelBufferNumSlices(MIL::Text::Parser::PixelBufferNumSlices *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlices,MIL::IRProperty const*>::ParseOpt(uint64_t a1)
{
  PixelBufferNumSlicesFirstSet = (void *)MIL::ParserContext::GetPixelBufferNumSlicesFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(PixelBufferNumSlicesFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::PixelBufferNumSlicesVec::~PixelBufferNumSlicesVec(MIL::Text::Parser::PixelBufferNumSlicesVec *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::PixelBufferNumSlicesVec,std::vector<MIL::IRProperty const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  PixelBufferNumSlicesVecFirstSet = (void *)MIL::ParserContext::GetPixelBufferNumSlicesVecFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(PixelBufferNumSlicesVecFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::Argument::~Argument(MIL::Text::Parser::Argument *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::Argument,std::shared_ptr<MIL::IRArgument>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  ArgumentFirstSet = (void *)MIL::ParserContext::GetArgumentFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ArgumentFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void MIL::Text::Parser::ArgumentList::~ArgumentList(MIL::Text::Parser::ArgumentList *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ArgumentList,std::vector<std::shared_ptr<MIL::IRArgument>>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  ArgumentListFirstSet = (void *)MIL::ParserContext::GetArgumentListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(ArgumentListFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::IDArgumentBinding::~IDArgumentBinding(MIL::Text::Parser::IDArgumentBinding *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBinding,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>::ParseOpt@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  IDArgumentBindingFirstSet = (void *)MIL::ParserContext::GetIDArgumentBindingFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDArgumentBindingFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  else
  {
    double result = 0.0;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

void MIL::Text::Parser::IDArgumentBindingMap::~IDArgumentBindingMap(MIL::Text::Parser::IDArgumentBindingMap *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDArgumentBindingMap,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  IDArgumentBindingMapFirstSet = (void *)MIL::ParserContext::GetIDArgumentBindingMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDArgumentBindingMapFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

void MIL::Text::Parser::IDValueBinding::~IDValueBinding(MIL::Text::Parser::IDValueBinding *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBinding,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IDValueBindingFirstSet = (void *)MIL::ParserContext::GetIDValueBindingFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDValueBindingFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

void MIL::Text::Parser::IDValueBindingMap::~IDValueBindingMap(MIL::Text::Parser::IDValueBindingMap *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::IDValueBindingMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  IDValueBindingMapFirstSet = (void *)MIL::ParserContext::GetIDValueBindingMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDValueBindingMapFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void MIL::Text::Parser::AttributesMap::~AttributesMap(MIL::Text::Parser::AttributesMap *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::AttributesMap,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::ParseOpt@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AttributesMapFirstSet = (void *)MIL::ParserContext::GetAttributesMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  if (std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(AttributesMapFirstSet, &Type))
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_DWORD *)(a2 + 32) = 1065353216;
  }
  return result;
}

void MIL::Text::Parser::IDTypeBinding::~IDTypeBinding(MIL::Text::Parser::IDTypeBinding *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBinding,std::unique_ptr<MIL::IRNamedValueType>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  IDTypeBindingFirstSet = (void *)MIL::ParserContext::GetIDTypeBindingFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDTypeBindingFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  return result;
}

void MIL::Text::Parser::IDTypeBindingMap::~IDTypeBindingMap(MIL::Text::Parser::IDTypeBindingMap *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingMap,std::map<std::string,MIL::IRValueType const*>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  IDTypeBindingMapFirstSet = (void *)MIL::ParserContext::GetIDTypeBindingMapFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDTypeBindingMapFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

void MIL::Text::Parser::IDTypeBindingList::~IDTypeBindingList(MIL::Text::Parser::IDTypeBindingList *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDTypeBindingList,std::vector<std::shared_ptr<MIL::IRNamedValueType>>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  IDTypeBindingListFirstSet = (void *)MIL::ParserContext::GetIDTypeBindingListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDTypeBindingListFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::IDList::~IDList(MIL::Text::Parser::IDList *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::IDList,std::vector<std::string>>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  IDListFirstSet = (void *)MIL::ParserContext::GetIDListFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDListFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::DType::~DType(MIL::Text::Parser::DType *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DType,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTypeFirstSet = (void *)MIL::ParserContext::GetDTypeFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTypeFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_BOOL::~DTYPE_BOOL(MIL::Text::Parser::DTYPE_BOOL *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_BOOL,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_BOOLFirstSet = (void *)MIL::ParserContext::GetDTYPE_BOOLFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_BOOLFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_STRING::~DTYPE_STRING(MIL::Text::Parser::DTYPE_STRING *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_STRING,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_STRINGFirstSet = (void *)MIL::ParserContext::GetDTYPE_STRINGFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_STRINGFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_BF16::~DTYPE_BF16(MIL::Text::Parser::DTYPE_BF16 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_BF16,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_BF16FirstSet = (void *)MIL::ParserContext::GetDTYPE_BF16FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_BF16FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_FP16::~DTYPE_FP16(MIL::Text::Parser::DTYPE_FP16 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP16,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_FP16FirstSet = (void *)MIL::ParserContext::GetDTYPE_FP16FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP16FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_FP8E5M2::~DTYPE_FP8E5M2(MIL::Text::Parser::DTYPE_FP8E5M2 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP8E5M2,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_FP8E5M2FirstSet = (void *)MIL::ParserContext::GetDTYPE_FP8E5M2FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP8E5M2FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_FP8E4M3FN::~DTYPE_FP8E4M3FN(MIL::Text::Parser::DTYPE_FP8E4M3FN *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP8E4M3FN,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_FP8E4M3FNFirstSet = (void *)MIL::ParserContext::GetDTYPE_FP8E4M3FNFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP8E4M3FNFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_FP32::~DTYPE_FP32(MIL::Text::Parser::DTYPE_FP32 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP32,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_FP32FirstSet = (void *)MIL::ParserContext::GetDTYPE_FP32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP32FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_FP64::~DTYPE_FP64(MIL::Text::Parser::DTYPE_FP64 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_FP64,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_FP64FirstSet = (void *)MIL::ParserContext::GetDTYPE_FP64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_FP64FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_INT4::~DTYPE_INT4(MIL::Text::Parser::DTYPE_INT4 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT4,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_INT4FirstSet = (void *)MIL::ParserContext::GetDTYPE_INT4FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT4FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_INT8::~DTYPE_INT8(MIL::Text::Parser::DTYPE_INT8 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT8,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_INT8FirstSet = (void *)MIL::ParserContext::GetDTYPE_INT8FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT8FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_INT16::~DTYPE_INT16(MIL::Text::Parser::DTYPE_INT16 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT16,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_INT16FirstSet = (void *)MIL::ParserContext::GetDTYPE_INT16FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT16FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_INT32::~DTYPE_INT32(MIL::Text::Parser::DTYPE_INT32 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT32,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_INT32FirstSet = (void *)MIL::ParserContext::GetDTYPE_INT32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT32FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_INT64::~DTYPE_INT64(MIL::Text::Parser::DTYPE_INT64 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_INT64,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_INT64FirstSet = (void *)MIL::ParserContext::GetDTYPE_INT64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_INT64FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT1::~DTYPE_UINT1(MIL::Text::Parser::DTYPE_UINT1 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT1,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT1FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT1FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT1FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT2::~DTYPE_UINT2(MIL::Text::Parser::DTYPE_UINT2 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT2,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT2FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT2FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT2FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT3::~DTYPE_UINT3(MIL::Text::Parser::DTYPE_UINT3 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT3,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT3FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT3FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT3FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT4::~DTYPE_UINT4(MIL::Text::Parser::DTYPE_UINT4 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT4,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT4FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT4FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT4FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT6::~DTYPE_UINT6(MIL::Text::Parser::DTYPE_UINT6 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT6,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT6FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT6FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT6FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT8::~DTYPE_UINT8(MIL::Text::Parser::DTYPE_UINT8 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT8,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT8FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT8FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT8FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT16::~DTYPE_UINT16(MIL::Text::Parser::DTYPE_UINT16 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT16,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT16FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT16FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT16FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT32::~DTYPE_UINT32(MIL::Text::Parser::DTYPE_UINT32 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT32,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT32FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT32FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::DTYPE_UINT64::~DTYPE_UINT64(MIL::Text::Parser::DTYPE_UINT64 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::DTYPE_UINT64,MIL::Scanner::TokenType>::ParseOpt(uint64_t a1)
{
  DTYPE_UINT64FirstSet = (void *)MIL::ParserContext::GetDTYPE_UINT64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(DTYPE_UINT64FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::FP32::~FP32(MIL::Text::Parser::FP32 *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::FP32,float>::ParseOpt(uint64_t a1)
{
  FP32FirstSet = (void *)MIL::ParserContext::GetFP32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  if (!std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(FP32FirstSet, &Type))return 0.0; {
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::FP64::~FP64(MIL::Text::Parser::FP64 *this)
{
}

double MIL::Text::Parser::Rule<MIL::Text::Parser::FP64,double>::ParseOpt(uint64_t a1)
{
  FP64FirstSet = (void *)MIL::ParserContext::GetFP64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  if (!std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(FP64FirstSet, &Type))return 0.0; {
  (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::UINT8::~UINT8(MIL::Text::Parser::UINT8 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::UINT8,unsigned char>::ParseOpt(uint64_t a1)
{
  UINT8FirstSet = (void *)MIL::ParserContext::GetUINT8FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(UINT8FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::INT32::~INT32(MIL::Text::Parser::INT32 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::INT32,int>::ParseOpt(uint64_t a1)
{
  INT32FirstSet = (void *)MIL::ParserContext::GetINT32FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(INT32FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::INT64::~INT64(MIL::Text::Parser::INT64 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::INT64,long long>::ParseOpt(uint64_t a1)
{
  INT64FirstSet = (void *)MIL::ParserContext::GetINT64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(INT64FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::UINT64::~UINT64(MIL::Text::Parser::UINT64 *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::UINT64,unsigned long long>::ParseOpt(uint64_t a1)
{
  UINT64FirstSet = (void *)MIL::ParserContext::GetUINT64FirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(UINT64FirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::BOOL::~BOOL(MIL::Text::Parser::BOOL *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::BOOL,BOOL>::ParseOpt(uint64_t a1)
{
  BOOLFirstSet = (void *)MIL::ParserContext::GetBOOLFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(BOOLFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::STRING::~STRING(MIL::Text::Parser::STRING *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::STRING,std::string>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  STRINGFirstSet = (void *)MIL::ParserContext::GetSTRINGFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(STRINGFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void MIL::Text::Parser::SYNTAX_VERSION::~SYNTAX_VERSION(MIL::Text::Parser::SYNTAX_VERSION *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::SYNTAX_VERSION,MIL::SyntaxVersion>::ParseOpt(uint64_t a1)
{
  SYNTAX_VERSIONFirstSet = (void *)MIL::ParserContext::GetSYNTAX_VERSIONFirstSet(*(MIL::ParserContext **)(a1 + 24));
  uint64_t v3 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v3);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(SYNTAX_VERSIONFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  return result;
}

void MIL::Text::Parser::ID::~ID(MIL::Text::Parser::ID *this)
{
}

uint64_t *MIL::Text::Parser::Rule<MIL::Text::Parser::ID,std::string>::ParseOpt@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  IDFirstSet = (void *)MIL::ParserContext::GetIDFirstSet(*(MIL::ParserContext **)(a1 + 24));
  __n128 v5 = (MIL::Scanner::Token *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))(*(void *)(a1 + 16));
  unsigned int Type = MIL::Scanner::Token::GetType(v5);
  double result = std::__hash_table<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::__unordered_map_hasher<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::hash<MIL::Scanner::TokenType>,std::equal_to<MIL::Scanner::TokenType>,true>,std::__unordered_map_equal<MIL::Scanner::TokenType,std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>,std::equal_to<MIL::Scanner::TokenType>,std::hash<MIL::Scanner::TokenType>,true>,std::allocator<std::__hash_value_type<MIL::Scanner::TokenType,MIL::SyntaxVersion>>>::find<MIL::Scanner::TokenType>(IDFirstSet, &Type);
  if (result) {
    return (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::TextFileLocation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::TextFileLocation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::TextFileLocation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>::pair[abi:ne180100]<std::string,std::unique_ptr<MIL::IRFunction>,0>(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  std::shared_ptr<MIL::IRFunction>::shared_ptr[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((uint64_t *)(a1 + 24), (uint64_t *)a2 + 3);
  return a1;
}

void sub_20F450C5C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, void **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<MIL::IRArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>(this[1].__r_.__value_.__r.__words, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return this;
}

void sub_20F450CE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<MIL::ParserContext,std::allocator<MIL::ParserContext>,MIL::ParserOptions &,void>@<X0>(const MIL::ParserOptions *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0xE18uLL);
  uint64_t result = std::__shared_ptr_emplace<MIL::ParserContext>::__shared_ptr_emplace[abi:ne180100]<MIL::ParserOptions &,std::allocator<MIL::ParserContext>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20F450D4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MIL::ParserContext>::__shared_ptr_emplace[abi:ne180100]<MIL::ParserOptions &,std::allocator<MIL::ParserContext>,0>(void *a1, const MIL::ParserOptions *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C25C0F0;
  MIL::ParserContext::ParserContext((MIL::ParserContext *)(a1 + 3), a2);
  return a1;
}

void sub_20F450DA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::ParserContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25C0F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::ParserContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C25C0F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<MIL::ParserContext>::__on_zero_shared(uint64_t a1)
{
}

MIL::Attributes::BlobFileMutabilityInfo *std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo>::reset[abi:ne180100](MIL::Attributes::BlobFileMutabilityInfo **a1, MIL::Attributes::BlobFileMutabilityInfo *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::string&,std::unique_ptr<MIL::IRBlock>>(uint64_t **a1, const void **a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  size_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::string&,std::unique_ptr<MIL::IRBlock>>((uint64_t)a1, a3, a4, (uint64_t)v11);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v12, v9, v11[0]);
    size_t v8 = v11[0];
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11, 0);
  }
  return v8;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::string&,std::unique_ptr<MIL::IRBlock>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  size_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  uint64_t v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v8 + 6) = *(void *)(a2 + 16);
  }
  uint64_t v10 = *a3;
  *a3 = 0;
  *((void *)v8 + 7) = v10;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F450FBC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F451240(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F4512B8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::unique_ptr<MIL::IRBlock>>>(uint64_t **a1, const void **a2, long long *a3)
{
  long long v5 = (void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    uint64_t v6 = operator new(0x40uLL);
    v12[1] = a1 + 1;
    long long v8 = *a3;
    *(void *)a3 = 0;
    *((void *)a3 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0;
    uint64_t v9 = *((void *)a3 + 2);
    uint64_t v10 = *((void *)a3 + 3);
    *((void *)a3 + 2) = 0;
    *((void *)a3 + 3) = 0;
    void v6[2] = v8;
    *((void *)v6 + 6) = v9;
    *((void *)v6 + 7) = v10;
    char v13 = 1;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v14, v7, (uint64_t *)v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v6;
}

uint64_t *std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRValue const,std::default_delete<MIL::IRValue const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *uint64_t result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    long long v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::destroy[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  a2[1] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t result = *a2;
  *a2 = 0;
  if (result)
  {
    long long v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

uint64_t std::vector<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  void v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 16);
    do
    {
      uint64_t v9 = *(a3 - 2);
      a3 -= 2;
      *a3 = 0;
      *uint64_t v8 = v9;
      uint64_t v10 = a3[1];
      a3[1] = 0;
      v8[1] = v10;
      *((void *)&v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v8;
      v7 -= 16;
      v8 -= 2;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>,std::reverse_iterator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *(uint64_t **)(result[2] + 8);
  uint64_t v2 = *(uint64_t **)(result[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *result;
    do
    {
      uint64_t result = (uint64_t *)std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::destroy[abi:ne180100](v3, v1);
      v1 += 2;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v2 = *(void *)(result + 8);
  uint64_t v1 = *(void *)(result + 16);
  if (v1 != v2)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v3 + 32);
      *(void *)(v3 + 16) = v1 - 16;
      uint64_t result = std::allocator<std::pair<std::unique_ptr<MIL::IRValue const>,std::unique_ptr<MIL::IRValue const>>>::destroy[abi:ne180100](v4, (uint64_t *)(v1 - 16));
      uint64_t v1 = *(void *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> &>(uint64_t **a1, const void **a2, long long *a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> &>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> &>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20F451844(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    char v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (unint64_t i = *v13; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  long long v16 = (char *)operator new(0x38uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)long long v16 = 0;
  *((void *)v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = v9;
  *((_OWORD *)v16 + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_OWORD *)(a3 + 24);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 16) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F451AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>(uint64_t **a1, const void **a2, uint64_t a3, void *a4)
{
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t result = *v7;
  if (!*v7)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::string const&,MIL::IRValueType const*>((uint64_t)a1, a3, a4, (uint64_t)&v9);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v10, v7, v9);
    return v9;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::string const&,MIL::IRValueType const*>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  unint64_t v9 = (std::string *)(v8 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v8 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v8 + 7) = *a3;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F451C1C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void MIL::Text::BasicSerializer::~BasicSerializer(MIL::Text::BasicSerializer *this)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::destroy((uint64_t)this + 368, *((void **)this + 47));
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::~__hash_table((uint64_t)this + 328);
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *((void *)this + 6) = *MEMORY[0x263F8C2C8];
  *(void *)((char *)this + *(void *)(v3 - 24) + 48) = *(void *)(v2 + 24);
  *((void *)this + 7) = MEMORY[0x263F8C318] + 16;
  if (*((char *)this + 143) < 0) {
    operator delete(*((void **)this + 15));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21056C620]((char *)this + 160);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t MIL::Text::BasicSerializer::BasicSerializer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = a2;
  std::ostringstream::basic_ostringstream[abi:ne180100](a1 + 48);
  *(unsigned char *)(a1 + 312) = 0;
  *(void *)(a1 + 32std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = a3;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_DWORD *)(a1 + 36std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 368) = a1 + 376;
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(void *)(*v5 - 24);
  uint64_t v7 = std::locale::classic();
  unint64_t v8 = (std::ios_base *)((char *)v5 + v6);
  std::ios_base::getloc(v8);
  std::ios_base::imbue(v8, v7);
  std::locale::~locale(&v13);
  rdstd::string buf = (std::locale *)v8->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v7);
    std::locale::locale(&v12, rdbuf + 1);
    std::locale::operator=(rdbuf + 1, v7);
    std::locale::~locale(&v12);
  }
  std::locale::~locale(&v11);
  return a1;
}

void sub_20F451EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*(void **)(v10 + 16));
  }
  std::locale v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::BasicSerializer(MIL::Text::BasicSerializer *this, const MIL::Text::SerializerOptions *a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + std::__function::__value_func<void ()(void *)>::~__value_func[abi:ne180100]((void *)this + 1) = 0u;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = (char *)this + 48;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)this + 48);
  *((unsigned char *)this + 312) = 0;
  *((void *)this + 4std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = a2;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_DWORD *)this + 9std::unique_ptr<MIL::Passes::PalettizationOptions::PalettizationOptionsImpl>::reset[abi:ne180100]((uint64_t *)this, 0) = 1065353216;
  *((void *)this + 47) = 0;
  *((void *)this + 48) = 0;
  *((void *)this + 46) = (char *)this + 376;
  uint64_t v4 = (void *)*((void *)this + 5);
  uint64_t v5 = *(void *)(*v4 - 24);
  uint64_t v6 = std::locale::classic();
  uint64_t v7 = (std::ios_base *)((char *)v4 + v5);
  std::ios_base::getloc(v7);
  std::ios_base::imbue(v7, v6);
  std::locale::~locale(&v12);
  rdstd::string buf = (std::locale *)v7->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v6);
    std::locale::locale(&v11, rdbuf + 1);
    std::locale::operator=(rdbuf + 1, v6);
    std::locale::~locale(&v11);
  }
  std::locale::~locale(&v10);
  return this;
}

void sub_20F452034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  if (*(char *)(v10 + 39) < 0) {
    operator delete(*(void **)(v10 + 16));
  }
  std::locale v12 = *(std::__shared_weak_count **)(v10 + 8);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::GetOutput(MIL::Text::BasicSerializer *this)
{
  return std::stringbuf::str();
}

std::string *MIL::Text::BasicSerializer::Indent(MIL::Text::BasicSerializer *this)
{
  return std::string::append((std::string *)((char *)this + 16), "    ", 4uLL);
}

double MIL::Text::BasicSerializer::Unindent(MIL::Text::BasicSerializer *this)
{
  uint64_t v2 = (std::string *)((char *)this + 16);
  if (*((char *)this + 39) < 0) {
    uint64_t v3 = *((void *)this + 3);
  }
  else {
    uint64_t v3 = *((unsigned __int8 *)this + 39);
  }
  std::string::basic_string(&v5, v2, 0, v3 - 4, (std::allocator<char> *)&v6);
  if (*((char *)this + 39) < 0) {
    operator delete(v2->__r_.__value_.__l.__data_);
  }
  double result = *(double *)&v5.__r_.__value_.__l.__data_;
  *uint64_t v2 = v5;
  return result;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Program(MIL::Text::BasicSerializer *this, const MIL::IRProgram *a2)
{
  v80[20] = *MEMORY[0x263EF8340];
  (*(void (**)(std::string *__return_ptr, const MIL::IRProgram *))(*(void *)a2 + 48))(&v79, a2);
  long long v4 = *(_OWORD *)&v79.__r_.__value_.__l.__data_;
  *(_OWORD *)&v79.__r_.__value_.__l.__data_ = 0uLL;
  std::string v5 = (std::__shared_weak_count *)*((void *)this + 1);
  *(_OWORD *)this = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    if (v79.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v79.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 40) + 120))(*((void *)this + 40));
  uint64_t v7 = (*(uint64_t (**)(void))(**((void **)this + 40) + 176))(*((void *)this + 40));
  unint64_t v8 = (const void **)v7;
  if (*(char *)(v6 + 23) >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
  }
  else {
    uint64_t v9 = *(void *)(v6 + 8);
  }
  uint64_t v10 = *(unsigned __int8 *)(v7 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(v7 + 8);
  }
  if (v9)
  {
    if (v10)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::string::basic_string[abi:ne180100]<0>(&v79, "Serializing with both Weights file path, and weights directory set, is invalid");
      std::runtime_error::runtime_error(exception, &v79);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    std::ofstream::basic_ofstream((uint64_t *)&v79);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)&v79 + *(void *)(v79.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v79 + *(void *)(v79.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    std::allocate_shared[abi:ne180100]<MIL::Blob::StorageWriter,std::allocator<MIL::Blob::StorageWriter>,std::string const&,BOOL,void>(v6, (unsigned __int8 *)&__p, &v74);
    MIL::Util::FindBlobFilePaths(a2, (uint64_t *)&v78);
    std::string::size_type size = v78.__r_.__value_.__l.__size_;
    std::locale v12 = (long long *)v78.__r_.__value_.__r.__words[0];
    if (v78.__r_.__value_.__r.__words[0] == v78.__r_.__value_.__l.__size_) {
      goto LABEL_20;
    }
    do
    {
      p_p = (std::string *)v12;
      std::locale v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 46, (const void **)v12, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
      uint64_t v15 = v74;
      char v14 = v75;
      if (v75) {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = (std::__shared_weak_count *)v13[8];
      v13[7] = v15;
      v13[8] = (uint64_t)v14;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      std::locale v12 = (long long *)((char *)v12 + 24);
    }
    while (v12 != (long long *)size);
    if (v78.__r_.__value_.__l.__size_ == v78.__r_.__value_.__r.__words[0])
    {
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      p_p = &__p;
      float v17 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)this + 46, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&p_p);
      uint64_t v19 = v74;
      float v18 = v75;
      if (v75) {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v20 = (std::__shared_weak_count *)*((void *)v17 + 8);
      *((void *)v17 + 7) = v19;
      *((void *)v17 + 8) = v18;
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (v75) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v75);
    }
    v79.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2B0];
    *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words
                              + *(void *)(v79.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2B0]
                                                                                                + 24);
    MEMORY[0x21056C330](&v79.__r_.__value_.__r.__words[1]);
    std::ostream::~ostream();
    MEMORY[0x21056C620](v80);
  }
  else if (v10)
  {
    MIL::Util::FindBlobFilePaths(a2, (uint64_t *)&v78);
    std::string::size_type v72 = v78.__r_.__value_.__l.__size_;
    unint64_t v21 = (long long *)v78.__r_.__value_.__r.__words[0];
    if (v78.__r_.__value_.__r.__words[0] != v78.__r_.__value_.__l.__size_)
    {
      std::string::size_type v71 = *MEMORY[0x263F8C2B0];
      std::string::size_type v22 = *(void *)(MEMORY[0x263F8C2B0] + 24);
      int v23 = 1;
      do
      {
        if (*((char *)v8 + 23) >= 0) {
          size_t v24 = *((unsigned __int8 *)v8 + 23);
        }
        else {
          size_t v24 = (size_t)v8[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v24 + 8);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v25 = &__p;
        }
        else {
          int v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v24)
        {
          if (*((char *)v8 + 23) >= 0) {
            uint64_t v26 = v8;
          }
          else {
            uint64_t v26 = *v8;
          }
          memmove(v25, v26, v24);
        }
        strcpy((char *)v25 + v24, "/weights");
        std::to_string(&v79, v23);
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v27 = &v79;
        }
        else {
          char v27 = (std::string *)v79.__r_.__value_.__r.__words[0];
        }
        if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v28 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v28 = v79.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v27, v28);
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        std::string::append(&__p, ".bin");
        std::ofstream::basic_ofstream((uint64_t *)&v79);
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)((char *)&v79 + *(void *)(v79.__r_.__value_.__r.__words[0] - 24)), *(_DWORD *)((char *)&v79 + *(void *)(v79.__r_.__value_.__r.__words[0] - 24) + 32) | 4);
        }
        unsigned __int8 v76 = 0;
        std::allocate_shared[abi:ne180100]<MIL::Blob::StorageWriter,std::allocator<MIL::Blob::StorageWriter>,std::string &,BOOL,void>((uint64_t)&__p, &v76, &v74);
        p_p = (std::string *)v21;
        int v29 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 46, (const void **)v21, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
        uint64_t v31 = v74;
        uint64_t v30 = v75;
        if (v75) {
          atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v32 = (std::__shared_weak_count *)v29[8];
        v29[7] = v31;
        v29[8] = (uint64_t)v30;
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        if (v75) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v75);
        }
        v79.__r_.__value_.__r.__words[0] = v71;
        *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + *(void *)(v71 - 24)) = v22;
        MEMORY[0x21056C330](&v79.__r_.__value_.__r.__words[1]);
        std::ostream::~ostream();
        MEMORY[0x21056C620](v80);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        unint64_t v21 = (long long *)((char *)v21 + 24);
        ++v23;
      }
      while (v21 != (long long *)v72);
    }
    v79.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  }
  int v33 = *((char *)this + 39);
  if (v33 >= 0) {
    uint64_t v34 = (char *)this + 16;
  }
  else {
    uint64_t v34 = (char *)*((void *)this + 2);
  }
  if (v33 >= 0) {
    uint64_t v35 = *((unsigned __int8 *)this + 39);
  }
  else {
    uint64_t v35 = *((void *)this + 3);
  }
  uint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)v34, v35);
  uint64_t v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"program(", 8);
  int v38 = (*(uint64_t (**)(void))(**((void **)this + 40) + 104))(*((void *)this + 40));
  std::string::basic_string[abi:ne180100]<0>(&v79, off_26412C4A8[v38 - 1]);
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v39 = &v79;
  }
  else {
    std::string::size_type v39 = (std::string *)v79.__r_.__value_.__r.__words[0];
  }
  if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v40 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v40 = v79.__r_.__value_.__l.__size_;
  }
  uint64_t v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v39, v40);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)")", 1);
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v79.__r_.__value_.__l.__data_);
  }
  uint64_t v42 = *(void *)(MIL::IRObject::GetAttributes(a2) + 24);
  std::string::value_type v43 = (void *)*((void *)this + 5);
  if (v42)
  {
    v79.__r_.__value_.__s.__data_[0] = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v79, 1);
    uint64_t Attributes = (void *)MIL::IRObject::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t)this, Attributes);
    std::string::value_type v43 = (void *)*((void *)this + 5);
    v79.__r_.__value_.__s.__data_[0] = 10;
  }
  else
  {
    v79.__r_.__value_.__s.__data_[0] = 32;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v79, 1);
  int v45 = (void *)*((void *)this + 5);
  v79.__r_.__value_.__s.__data_[0] = 123;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)&v79, 1);
  std::string::append((std::string *)((char *)this + 16), "    ", 4uLL);
  if (*(void *)((*(uint64_t (**)(const MIL::IRProgram *))(*(void *)a2 + 72))(a2) + 24))
  {
    int v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"\n", 1);
    int v47 = *((char *)this + 39);
    uint64_t v48 = v47 >= 0
        ? (MIL::Text::BasicSerializer *)((char *)this + 16)
        : (MIL::Text::BasicSerializer *)*((void *)this + 2);
    uint64_t v49 = v47 >= 0 ? *((unsigned __int8 *)this + 39) : *((void *)this + 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)v48, v49);
    int v50 = (void *)(*(uint64_t (**)(const MIL::IRProgram *))(*(void *)a2 + 72))(a2);
    (*(void (**)(std::string *__return_ptr, const MIL::IRProgram *))(*(void *)a2 + 48))(&v79, a2);
    MIL::Text::BasicSerializer::FunctionMap((uint64_t)this, v50, (MIL::IROpset *)v79.__r_.__value_.__l.__data_);
    if (v79.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v79.__r_.__value_.__l.__size_);
    }
  }
  MIL::Text::BasicSerializer::Unindent(this);
  uint64_t v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"\n", 1);
  int v52 = *((char *)this + 39);
  if (v52 >= 0) {
    uint64_t v53 = (char *)this + 16;
  }
  else {
    uint64_t v53 = (char *)*((void *)this + 2);
  }
  if (v52 >= 0) {
    uint64_t v54 = *((unsigned __int8 *)this + 39);
  }
  else {
    uint64_t v54 = *((void *)this + 3);
  }
  int v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v53, v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"}", 1);
  if (*((void *)this + 48))
  {
    if (!*((unsigned char *)this + 312))
    {
      int v56 = (MIL::Text::BasicSerializer *)*((void *)this + 46);
      if (v56 != (MIL::Text::BasicSerializer *)((char *)this + 376))
      {
        do
        {
          uint64_t v57 = (MIL::Blob::StorageWriter *)*((void *)v56 + 7);
          int v58 = (std::__shared_weak_count *)*((void *)v56 + 8);
          if (v58) {
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          MIL::Blob::StorageWriter::GetFilePath(v57, &v79);
          if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = (const std::__fs::filesystem::path *)&v79;
          }
          else {
            uint64_t v60 = (const std::__fs::filesystem::path *)v79.__r_.__value_.__r.__words[0];
          }
          BOOL v61 = remove(v60, v59);
          if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v79.__r_.__value_.__l.__data_);
          }
          if (v61)
          {
            int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::string::basic_string[abi:ne180100]<0>(&v78, "encountered error when trying to delete weights file: ");
            uint64_t v67 = strerror(v61);
            uint64_t v68 = std::string::append(&v78, v67);
            long long v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
            v79.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v69;
            v68->__r_.__value_.__l.__size_ = 0;
            v68->__r_.__value_.__r.__words[2] = 0;
            v68->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(v66, &v79);
            __cxa_throw(v66, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          if (v58) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v58);
          }
          int v62 = (MIL::Text::BasicSerializer *)*((void *)v56 + 1);
          if (v62)
          {
            do
            {
              int v63 = v62;
              int v62 = *(MIL::Text::BasicSerializer **)v62;
            }
            while (v62);
          }
          else
          {
            do
            {
              int v63 = (MIL::Text::BasicSerializer *)*((void *)v56 + 2);
              BOOL v64 = *(void *)v63 == (void)v56;
              int v56 = v63;
            }
            while (!v64);
          }
          int v56 = v63;
        }
        while (v63 != (MIL::Text::BasicSerializer *)((char *)this + 376));
      }
    }
  }
  return this;
}

void sub_20F452B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    if ((v37 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v37)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v36);
  goto LABEL_6;
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x21056C320](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_20F452E70(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x21056C620](v1);
  _Unwind_Resume(a1);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x21056C330](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x21056C620](a1 + 52);
  return a1;
}

uint64_t MIL::Text::BasicSerializer::AttributesMap(uint64_t a1, void *a2)
{
  if (a2[3])
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"[", 1);
    MIL::Text::BasicSerializer::IDValueBindingMap(a1, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"]", 1);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::FunctionMap(uint64_t a1, void *a2, MIL::IROpset *a3)
{
  memset(&v22, 0, sizeof(v22));
  std::vector<std::string>::reserve(&v22, a2[3]);
  uint64_t v6 = (uint64_t *)a2[2];
  if (v6)
  {
    std::vector<std::string>::pointer end = v22.__end_;
    do
    {
      unint64_t v8 = (long long *)(v6 + 2);
      if (end >= v22.__end_cap_.__value_)
      {
        std::vector<std::string>::pointer end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v22, v8);
      }
      else
      {
        if (*((char *)v6 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v6[2], v6[3]);
        }
        else
        {
          long long v9 = *v8;
          end->__r_.__value_.__r.__words[2] = v6[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v9;
        }
        ++end;
      }
      v22.__end_ = end;
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
  else
  {
    std::vector<std::string>::pointer end = v22.__end_;
  }
  unint64_t v10 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v22.__begin_) >> 3));
  if (end == v22.__begin_) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v10;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v22.__begin_, (long long *)end, (uint64_t)&v23, v11, 1);
  std::vector<std::string>::pointer begin = v22.__begin_;
  std::vector<std::string>::pointer v13 = v22.__end_;
  if (v22.__begin_ != v22.__end_)
  {
    char v14 = 1;
    do
    {
      uint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)begin);
      long long v16 = v15;
      if (!v15) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (v14)
      {
        MIL::Text::BasicSerializer::Function(a1, (uint64_t)begin, *((MIL::IRObject **)v15 + 5), a3);
      }
      else
      {
        float v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
        int v18 = *(char *)(a1 + 39);
        if (v18 >= 0) {
          uint64_t v19 = a1 + 16;
        }
        else {
          uint64_t v19 = *(void *)(a1 + 16);
        }
        if (v18 >= 0) {
          uint64_t v20 = *(unsigned __int8 *)(a1 + 39);
        }
        else {
          uint64_t v20 = *(void *)(a1 + 24);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        MIL::Text::BasicSerializer::Function(a1, (uint64_t)begin, *((MIL::IRObject **)v16 + 5), a3);
      }
      char v14 = 0;
      ++begin;
    }
    while (begin != v13);
  }
  size_t v24 = &v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  return a1;
}

void sub_20F4531A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::Function(uint64_t a1, uint64_t a2, MIL::IRObject *a3, MIL::IROpset *a4)
{
  unint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"func ", 5);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  std::locale v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::vector<std::string>::pointer v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"<", 1);
  uint64_t v14 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a3 + 32))(a3);
  int v15 = *(char *)(v14 + 23);
  if (v15 >= 0) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = *(void *)v14;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  int v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v16, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)">(", 2);
  uint64_t v19 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a3 + 128))(a3);
  uint64_t v20 = v19 + 1;
  unint64_t v21 = (void *)*v19;
  if ((void *)*v19 != v19 + 1)
  {
    std::vector<std::string> v22 = "";
    do
    {
      size_t v23 = strlen(v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)v22, v23);
      MIL::Text::BasicSerializer::IDTypeBinding((MIL::Text::BasicSerializer *)a1, (uint64_t)(v21 + 4), (const MIL::IRValueType *)v21[7]);
      size_t v24 = (void *)v21[1];
      if (v24)
      {
        do
        {
          int v25 = v24;
          size_t v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          int v25 = (void *)v21[2];
          BOOL v26 = *v25 == (void)v21;
          unint64_t v21 = v25;
        }
        while (!v26);
      }
      std::vector<std::string> v22 = ", ";
      unint64_t v21 = v25;
    }
    while (v25 != v20);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)")", 1);
  if (*(void *)(MIL::IRObject::GetAttributes(a3) + 24))
  {
    char v27 = *(void **)(a1 + 40);
    LOBYTE(v39[0]) = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v39, 1);
    uint64_t Attributes = (void *)MIL::IRObject::GetAttributes(a3);
    MIL::Text::BasicSerializer::AttributesMap(a1, Attributes);
  }
  std::string::append((std::string *)(a1 + 16), "    ", 4uLL);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)" ", 1);
  int v29 = (MIL::IRObject *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a3 + 40))(a3);
  (*(void (**)(MIL::IRObject *))(*(void *)a3 + 32))(a3);
  uint64_t v30 = v38;
  v39[0] = v37;
  v39[1] = &v38->__vftable;
  MIL::Text::BasicSerializer::Block(a1, v29, v39);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (*(void *)((*(uint64_t (**)(MIL::IRObject *))(*(void *)a3 + 112))(a3) + 16) >= 2uLL)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
    int v31 = *(char *)(a1 + 39);
    if (v31 >= 0) {
      uint64_t v32 = a1 + 16;
    }
    else {
      uint64_t v32 = *(void *)(a1 + 16);
    }
    if (v31 >= 0) {
      uint64_t v33 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v33 = *(void *)(a1 + 24);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v32, v33);
    uint64_t v34 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a3 + 112))(a3);
    uint64_t v35 = (unsigned __int8 **)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a3 + 32))(a3);
    MIL::Text::BasicSerializer::OpsetBlockMap(a1, v34, v35, a4);
  }
  MIL::Text::BasicSerializer::Unindent((MIL::Text::BasicSerializer *)a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)";", 1);
  return a1;
}

void sub_20F453570(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDTypeBinding(MIL::Text::BasicSerializer *a1, uint64_t a2, const MIL::IRValueType *a3)
{
  MIL::Text::BasicSerializer::Type(a1, a3);
  uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)" ", 1);
  int v6 = *(char *)(a2 + 23);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(void *)a2;
  }
  if (v6 >= 0) {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  return a1;
}

uint64_t MIL::Text::BasicSerializer::Block(uint64_t a1, MIL::IRObject *a2, void **a3)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 40))(a2);
  MIL::Text::BasicSerializer::BlockInputDecls((MIL::Text::BasicSerializer *)a1, v6);
  uint64_t v7 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 40))(a2);
  if (*v7 != v7[1]) {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)" ", 1);
  }
  if (*(void *)(MIL::IRObject::GetAttributes(a2) + 24))
  {
    uint64_t Attributes = (void *)MIL::IRObject::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap(a1, Attributes);
    int v9 = *(void **)(a1 + 40);
    char v24 = 32;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v24, 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"{", 1);
  uint64_t v10 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 56))(a2);
  if (**(void **)v10 != *(void *)(*(void *)v10 + 8))
  {
    std::string::append((std::string *)(a1 + 16), "    ", 4uLL);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
    uint64_t v11 = (MIL::IRObject ****)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 56))(a2);
    std::locale v12 = **v11;
    std::vector<std::string>::pointer v13 = (*v11)[1];
    while (v12 != v13)
    {
      int v15 = *v12;
      v12 += 2;
      uint64_t v14 = v15;
      int v16 = *(char *)(a1 + 39);
      if (v16 >= 0) {
        uint64_t v17 = a1 + 16;
      }
      else {
        uint64_t v17 = *(void *)(a1 + 16);
      }
      if (v16 >= 0) {
        uint64_t v18 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v18 = *(void *)(a1 + 24);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v17, v18);
      MIL::Text::BasicSerializer::Op(a1, v14, a3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
    }
    MIL::Text::BasicSerializer::Unindent((MIL::Text::BasicSerializer *)a1);
    int v19 = *(char *)(a1 + 39);
    if (v19 >= 0) {
      uint64_t v20 = a1 + 16;
    }
    else {
      uint64_t v20 = *(void *)(a1 + 16);
    }
    if (v19 >= 0) {
      uint64_t v21 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v21 = *(void *)(a1 + 24);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v20, v21);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"} -> (", 6);
  std::vector<std::string> v22 = (uint64_t *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 88))(a2);
  MIL::Text::BasicSerializer::IDList(a1, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)")", 1);
  return a1;
}

MIL::IROpset *anonymous namespace'::TryGetOpsetNames@<X0>(MIL::IROpset *result@<X0>, uint64_t *a2@<X8>)
{
  if (result
    && (double result = (MIL::IROpset *)(*(uint64_t (**)(MIL::IROpset *))(*(void *)result + 16))(result)) != 0)
  {
    MIL::IROpset::GetReversedOperatorNamesMap(result, (uint64_t)v4);
    uint64_t v3 = operator new(0x40uLL);
    v3[1] = 0;
    void v3[2] = 0;
    void *v3 = &unk_26C25CB30;
    *a2 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v3 + 3), v4);
    a2[1] = (uint64_t)v3;
    return (MIL::IROpset *)std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v4);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return result;
}

void sub_20F453918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::OpsetBlockMap(uint64_t a1, void *a2, unsigned __int8 **a3, MIL::IROpset *a4)
{
  memset(&v39, 0, sizeof(v39));
  std::vector<std::string>::reserve(&v39, a2[2]);
  uint64_t v8 = (void *)*a2;
  if ((void *)*a2 == a2 + 1)
  {
    std::vector<std::string>::pointer end = v39.__end_;
  }
  else
  {
    std::vector<std::string>::pointer end = v39.__end_;
    do
    {
      uint64_t v10 = (long long *)(v8 + 4);
      if (end >= v39.__end_cap_.__value_)
      {
        std::vector<std::string>::pointer end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v39, v10);
      }
      else
      {
        if (*((char *)v8 + 55) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v8[4], v8[5]);
        }
        else
        {
          long long v11 = *v10;
          end->__r_.__value_.__r.__words[2] = v8[6];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
        }
        ++end;
      }
      v39.__end_ = end;
      std::locale v12 = (void *)v8[1];
      if (v12)
      {
        do
        {
          std::vector<std::string>::pointer v13 = v12;
          std::locale v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          std::vector<std::string>::pointer v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          uint64_t v8 = v13;
        }
        while (!v14);
      }
      uint64_t v8 = v13;
    }
    while (v13 != a2 + 1);
  }
  unint64_t v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v39.__begin_) >> 3));
  if (end == v39.__begin_) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v39.__begin_, (long long *)end, (uint64_t)&v35, v16, 1);
  std::vector<std::string>::pointer begin = v39.__begin_;
  std::vector<std::string>::pointer v18 = v39.__end_;
  if (v39.__begin_ != v39.__end_)
  {
    char v19 = 1;
    do
    {
      uint64_t v20 = (MIL::IRObject **)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at((uint64_t)a2, (const void **)&begin->__r_.__value_.__l.__data_);
      uint64_t v21 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      if ((v21 & 0x80u) == 0) {
        std::string::size_type size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = begin->__r_.__value_.__l.__size_;
      }
      size_t v23 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
      int v24 = (char)v23;
      if ((char)v23 < 0) {
        size_t v23 = a3[1];
      }
      if ((unsigned __int8 *)size != v23) {
        goto LABEL_38;
      }
      if (v24 >= 0) {
        int v25 = (unsigned __int8 *)a3;
      }
      else {
        int v25 = *a3;
      }
      if ((v21 & 0x80) != 0)
      {
        if (memcmp(begin->__r_.__value_.__l.__data_, v25, begin->__r_.__value_.__l.__size_)) {
          goto LABEL_38;
        }
      }
      else if (*((unsigned char *)&begin->__r_.__value_.__s + 23))
      {
        uint64_t v26 = 0;
        while (begin->__r_.__value_.__s.__data_[v26] == v25[v26])
        {
          if (v21 == ++v26) {
            goto LABEL_50;
          }
        }
LABEL_38:
        if (v19)
        {
          char v27 = *v20;
          std::string::size_type v28 = v36;
          int v37 = v35;
          int v38 = v36;
          MIL::Text::BasicSerializer::OpsetBlock(a1, (uint64_t)begin, v27, (void **)&v37);
        }
        else
        {
          int v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
          int v30 = *(char *)(a1 + 39);
          if (v30 >= 0) {
            uint64_t v31 = a1 + 16;
          }
          else {
            uint64_t v31 = *(void *)(a1 + 16);
          }
          if (v30 >= 0) {
            uint64_t v32 = *(unsigned __int8 *)(a1 + 39);
          }
          else {
            uint64_t v32 = *(void *)(a1 + 24);
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
          uint64_t v33 = *v20;
          std::string::size_type v28 = v36;
          int v37 = v35;
          int v38 = v36;
          MIL::Text::BasicSerializer::OpsetBlock(a1, (uint64_t)begin, v33, (void **)&v37);
        }
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        char v19 = 0;
      }
LABEL_50:
      ++begin;
    }
    while (begin != v18);
  }
  int v37 = &v39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  return a1;
}

void sub_20F453BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  a12 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::OpsetBlock(uint64_t a1, uint64_t a2, MIL::IRObject *a3, void **a4)
{
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"<", 1);
  int v9 = *(char *)(a2 + 23);
  if (v9 >= 0) {
    uint64_t v10 = a2;
  }
  else {
    uint64_t v10 = *(void *)a2;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  std::locale v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v10, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"> ", 2);

  return MIL::Text::BasicSerializer::Block(a1, a3, a4);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::BlockInputDecls(MIL::Text::BasicSerializer *a1, uint64_t a2)
{
  if (*(void *)a2 != *(void *)(a2 + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"(", 1);
    MIL::Text::BasicSerializer::IDTypeBindingList(a1, (MIL::IRNamedValueType ***)a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)")", 1);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::Op(uint64_t a1, MIL::IRObject *a2, void **a3)
{
  uint64_t v6 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 56))(a2);
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v47, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v47.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v7;
  }
  if (*a3)
  {
    uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(*a3, (unsigned __int8 *)&v47);
    if (v8)
    {
      std::string::operator=(&v47, (const std::string *)(v8 + 40));
      goto LABEL_7;
    }
    if ((*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 232))(a2))
    {
      uint64_t v32 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 232))(a2);
      uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 16))(v32);
      size_t v35 = v34;
      if (v34 > 0x7FFFFFFFFFFFFFF7) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      uint64_t v36 = (const void *)v33;
      if (v34 >= 0x17)
      {
        uint64_t v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17) {
          uint64_t v38 = v34 | 7;
        }
        uint64_t v39 = v38 + 1;
        p_dst = (void **)operator new(v38 + 1);
        size_t v45 = v35;
        int64_t v46 = v39 | 0x8000000000000000;
        std::string __dst = p_dst;
      }
      else
      {
        HIBYTE(v46) = v34;
        p_dst = (void **)&__dst;
        if (!v34) {
          goto LABEL_53;
        }
      }
      memmove(p_dst, v36, v35);
LABEL_53:
      *((unsigned char *)p_dst + v35) = 0;
      std::string::size_type v40 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v42, (unsigned __int8 *)&v47);
      if (v40) {
        std::string::operator=(&v47, (const std::string *)(v40 + 40));
      }
      if (v43) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v43);
      }
      if (SHIBYTE(v46) < 0) {
        operator delete(__dst);
      }
    }
  }
LABEL_7:
  uint64_t v9 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 176))(a2);
  if (*(void *)v9 != *(void *)(v9 + 8))
  {
    MIL::Text::BasicSerializer::IDTypeBindingList((MIL::Text::BasicSerializer *)a1, (MIL::IRNamedValueType ***)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)" = ", 3);
  }
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v47;
  }
  else {
    uint64_t v10 = (std::string *)v47.__r_.__value_.__r.__words[0];
  }
  if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v47.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)v10, size);
  if ((*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 232))(a2))
  {
    if ((*(int (**)(void))(**(void **)(a1 + 320) + 104))(*(void *)(a1 + 320)) <= 2)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Program version 1.2+ required to specify opsets on operations.  Use MIL::Text::Serialize overload with the options parameter instead");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v12 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 232))(a2);
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
    size_t v15 = v14;
    if (v14 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v16 = (const void *)v13;
    if (v14 >= 0x17)
    {
      uint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17) {
        uint64_t v18 = v14 | 7;
      }
      uint64_t v19 = v18 + 1;
      uint64_t v17 = (void **)operator new(v18 + 1);
      size_t v45 = v15;
      int64_t v46 = v19 | 0x8000000000000000;
      std::string __dst = v17;
    }
    else
    {
      HIBYTE(v46) = v14;
      uint64_t v17 = (void **)&__dst;
      if (!v14)
      {
LABEL_25:
        *((unsigned char *)v17 + v15) = 0;
        uint64_t v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"<", 1);
        if (v46 >= 0) {
          uint64_t v21 = (void **)&__dst;
        }
        else {
          uint64_t v21 = __dst;
        }
        if (v46 >= 0) {
          uint64_t v22 = HIBYTE(v46);
        }
        else {
          uint64_t v22 = v45;
        }
        size_t v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)">", 1);
        if (SHIBYTE(v46) < 0) {
          operator delete(__dst);
        }
        goto LABEL_33;
      }
    }
    memmove(v17, v16, v15);
    goto LABEL_25;
  }
LABEL_33:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"(", 1);
  int v24 = (void *)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 160))(a2);
  MIL::Text::BasicSerializer::IDArgumentBindingMap((MIL::Text::BasicSerializer *)a1, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)")", 1);
  uint64_t Attributes = (void *)MIL::IRObject::GetAttributes(a2);
  MIL::Text::BasicSerializer::OpAttrsMap(a1, Attributes);
  std::string::append((std::string *)(a1 + 16), "    ", 4uLL);
  uint64_t v26 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 208))(a2);
  if (**(void **)v26 != *(void *)(*(void *)v26 + 8))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
    int v27 = *(char *)(a1 + 39);
    if (v27 >= 0) {
      uint64_t v28 = a1 + 16;
    }
    else {
      uint64_t v28 = *(void *)(a1 + 16);
    }
    if (v27 >= 0) {
      uint64_t v29 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v29 = *(void *)(a1 + 24);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v28, v29);
    int v30 = (void **)(*(uint64_t (**)(MIL::IRObject *))(*(void *)a2 + 208))(a2);
    MIL::Text::BasicSerializer::BlockList(a1, v30);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)";", 1);
  MIL::Text::BasicSerializer::Unindent((MIL::Text::BasicSerializer *)a1);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_20F4542A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::IDList(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v5 = "";
    do
    {
      size_t v6 = strlen(v5);
      long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)v5, v6);
      int v8 = *(char *)(v3 + 23);
      if (v8 >= 0) {
        uint64_t v9 = v3;
      }
      else {
        uint64_t v9 = *(void *)v3;
      }
      if (v8 >= 0) {
        uint64_t v10 = *(unsigned __int8 *)(v3 + 23);
      }
      else {
        uint64_t v10 = *(void *)(v3 + 8);
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
      v3 += 24;
      uint64_t v5 = ", ";
    }
    while (v3 != v4);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::BlockList(uint64_t a1, void **a2)
{
  uint64_t v3 = (void *)**a2;
  if (v3 != (void *)(*a2)[1])
  {
    MIL::Text::BasicSerializer::Block(a1, *v3);
    if ((*a2)[1] - **a2 >= 0x11uLL)
    {
      unint64_t v5 = 1;
      uint64_t v6 = 16;
      do
      {
        long long v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
        int v8 = *(char *)(a1 + 39);
        if (v8 >= 0) {
          uint64_t v9 = a1 + 16;
        }
        else {
          uint64_t v9 = *(void *)(a1 + 16);
        }
        if (v8 >= 0) {
          uint64_t v10 = *(unsigned __int8 *)(a1 + 39);
        }
        else {
          uint64_t v10 = *(void *)(a1 + 24);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
        MIL::Text::BasicSerializer::Block(a1, *(void *)(**a2 + v6));
        ++v5;
        v6 += 16;
      }
      while (v5 < (uint64_t)((*a2)[1] - **a2) >> 4);
    }
  }
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDTypeBindingList(MIL::Text::BasicSerializer *a1, MIL::IRNamedValueType ***a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    unint64_t v5 = "";
    do
    {
      size_t v6 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v5, v6);
      uint64_t Name = MIL::IRNamedValueType::GetName(*v3);
      int v8 = *v3;
      v3 += 2;
      unsigned int Type = (const MIL::IRValueType *)MIL::IRNamedValueType::GetType(v8);
      MIL::Text::BasicSerializer::IDTypeBinding(a1, Name, Type);
      unint64_t v5 = ", ";
    }
    while (v3 != v4);
  }
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDArgumentBindingMap(MIL::Text::BasicSerializer *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    unint64_t v5 = "";
    do
    {
      size_t v6 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v5, v6);
      MIL::Text::BasicSerializer::IDArgumentBinding(a1, (uint64_t)(v4 + 4), (uint64_t)(v4 + 7));
      long long v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          long long v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      unint64_t v5 = ", ";
      uint64_t v4 = v8;
    }
    while (v8 != v3);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::OpAttrsMap(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[3];
  if (v3)
  {
    if (v3 != 1) {
      goto LABEL_8;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "TraceabilityInfo");
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)__p))
    {
      char v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 160))(*(void *)(a1 + 320)) ^ 1;
    }
    else
    {
      char v5 = 0;
    }
    if (v8 < 0)
    {
      operator delete(__p[0]);
      if (v5) {
        return a1;
      }
      goto LABEL_8;
    }
    if ((v5 & 1) == 0)
    {
LABEL_8:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"[", 1);
      MIL::Text::BasicSerializer::IDValueBindingMap(a1, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"]", 1);
    }
  }
  return a1;
}

void sub_20F4546E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::OpList(uint64_t a1, MIL::IRObject ****a2, void **a3)
{
  uint64_t v4 = **a2;
  if (v4 != (*a2)[1])
  {
    MIL::Text::BasicSerializer::Op(a1, *v4, a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
    if ((unint64_t)((char *)(*a2)[1] - (char *)**a2) >= 0x11)
    {
      unint64_t v7 = 1;
      uint64_t v8 = 2;
      do
      {
        int v9 = *(char *)(a1 + 39);
        if (v9 >= 0) {
          uint64_t v10 = a1 + 16;
        }
        else {
          uint64_t v10 = *(void *)(a1 + 16);
        }
        if (v9 >= 0) {
          uint64_t v11 = *(unsigned __int8 *)(a1 + 39);
        }
        else {
          uint64_t v11 = *(void *)(a1 + 24);
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), v10, v11);
        MIL::Text::BasicSerializer::Op(a1, (**a2)[v8], a3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(void **)(a1 + 40), (uint64_t)"\n", 1);
        ++v7;
        v8 += 2;
      }
      while (v7 < ((char *)(*a2)[1] - (char *)**a2) >> 4);
    }
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::IDValueBindingMap(uint64_t a1, void *a2)
{
  memset(&v33, 0, sizeof(v33));
  std::vector<std::string>::reserve(&v33, a2[3]);
  uint64_t v4 = (uint64_t *)a2[2];
  if (v4)
  {
    std::vector<std::string>::pointer end = v33.__end_;
    do
    {
      size_t v6 = (long long *)(v4 + 2);
      if (end >= v33.__end_cap_.__value_)
      {
        std::vector<std::string>::pointer end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v33, v6);
      }
      else
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          long long v7 = *v6;
          end->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        }
        ++end;
      }
      v33.__end_ = end;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    std::vector<std::string>::pointer end = v33.__end_;
  }
  unint64_t v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v33.__begin_) >> 3));
  if (end == v33.__begin_) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v33.__begin_, (long long *)end, (uint64_t)v29, v9, 1);
  std::string::basic_string[abi:ne180100]<0>(v31, "BlobFileMutabilityInfo");
  std::vector<std::string>::pointer begin = v33.__begin_;
  for (std::vector<std::string>::pointer i = v33.__end_; begin != i; ++begin)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "TraceabilityInfo");
    uint64_t v12 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
    if ((v12 & 0x80u) == 0) {
      std::string::size_type size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = begin->__r_.__value_.__l.__size_;
    }
    unint64_t v14 = v28;
    int v15 = (char)v28;
    if ((v28 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (size == v14)
    {
      if ((v28 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(begin->__r_.__value_.__l.__data_, v16, begin->__r_.__value_.__l.__size_))
        {
LABEL_34:
          char v18 = (*(uint64_t (**)(void, void **))(**(void **)(a1 + 320) + 160))(*(void *)(a1 + 320), v16);
          if ((char)v28 < 0) {
            operator delete(__p[0]);
          }
          if ((v18 & 1) == 0) {
            continue;
          }
          goto LABEL_37;
        }
      }
      else
      {
        if (!*((unsigned char *)&begin->__r_.__value_.__s + 23)) {
          goto LABEL_34;
        }
        uint64_t v17 = 0;
        while (begin->__r_.__value_.__s.__data_[v17] == *((unsigned __int8 *)v16 + v17))
        {
          if (v12 == ++v17) {
            goto LABEL_34;
          }
        }
      }
    }
    if (v15 < 0) {
      operator delete(__p[0]);
    }
LABEL_37:
    uint64_t v19 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
    if ((v19 & 0x80u) == 0) {
      std::string::size_type v20 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v20 = begin->__r_.__value_.__l.__size_;
    }
    unint64_t v21 = v32;
    if ((v32 & 0x80u) != 0) {
      unint64_t v21 = (unint64_t)v31[1];
    }
    if (v20 != v21) {
      goto LABEL_53;
    }
    if ((v32 & 0x80u) == 0) {
      uint64_t v22 = v31;
    }
    else {
      uint64_t v22 = (void **)v31[0];
    }
    if ((v19 & 0x80) != 0)
    {
      if (memcmp(begin->__r_.__value_.__l.__data_, v22, begin->__r_.__value_.__l.__size_)) {
        goto LABEL_53;
      }
    }
    else if (*((unsigned char *)&begin->__r_.__value_.__s + 23))
    {
      uint64_t v23 = 0;
      while (begin->__r_.__value_.__s.__data_[v23] == *((unsigned __int8 *)v22 + v23))
      {
        if (v19 == ++v23) {
          goto LABEL_54;
        }
      }
LABEL_53:
      std::string::basic_string[abi:ne180100]<0>(&v30, "[A-Za-z_][A-Za-z0-9_@]*");
      std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v29, (uint64_t)&v30, 0);
    }
LABEL_54:
    ;
  }
  int v24 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v31);
  if (v24) {
    MIL::Attributes::BlobFileMutabilityInfo::Make(*((MIL::Attributes::BlobFileMutabilityInfo **)v24 + 5), v25);
  }
  if ((char)v32 < 0) {
    operator delete(v31[0]);
  }
  __p[0] = &v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return a1;
}

void sub_20F454E18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v16 - 209) < 0)
  {
    operator delete(*(void **)(v16 - 232));
    if ((v15 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&__p);
      if (*(char *)(v16 - 145) < 0) {
        operator delete(*(void **)(v16 - 168));
      }
      if (*(char *)(v16 - 121) < 0) {
        operator delete(*(void **)(v16 - 144));
      }
      std::string __p = (void *)(v16 - 120);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      _Unwind_Resume(a1);
    }
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Value(MIL::Text::BasicSerializer *this, const MIL::IRValue *a2)
{
  uint64_t v4 = (*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 40))(a2);
  if (!v4) {
    goto LABEL_16;
  }
  uint64_t v5 = v4;
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 120))(v4)) {
    goto LABEL_16;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 128))(&__p, v5);
  if ((char)v13 < 0)
  {
    uint64_t v6 = v12;
    if (v12) {
      goto LABEL_7;
    }
    operator delete(__p);
LABEL_16:
    uint64_t v9 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 32))(a2);
    MIL::Text::BasicSerializer::Type(this, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"(", 1);
    MIL::Text::BasicSerializer::ValueLiteral(this, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)")", 1);
    return this;
  }
  if (!v13) {
    goto LABEL_16;
  }
  uint64_t v6 = v12;
LABEL_7:
  if ((v13 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  if ((v13 & 0x80u) == 0) {
    uint64_t v8 = v13;
  }
  else {
    uint64_t v8 = v6;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)p_p, v8);
  if ((char)v13 < 0) {
    operator delete(__p);
  }
  return this;
}

void sub_20F4550D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRValueType *a2)
{
  uint64_t v4 = (const MIL::IRTensorValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 24))(a2);
  if (v4)
  {
    MIL::Text::BasicSerializer::Type(this, v4);
  }
  else
  {
    uint64_t v5 = (const MIL::IRTupleValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 40))(a2);
    if (v5)
    {
      MIL::Text::BasicSerializer::Type(this, v5);
    }
    else
    {
      uint64_t v6 = (const MIL::IRListValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 32))(a2);
      if (v6)
      {
        MIL::Text::BasicSerializer::Type(this, v6);
      }
      else
      {
        long long v7 = (const MIL::IRDictionaryValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 48))(a2);
        if (v7)
        {
          MIL::Text::BasicSerializer::Type(this, v7);
        }
        else
        {
          uint64_t v8 = (const MIL::IRMemoryLayoutValueType *)MIL::IRValueType::TryCastAsMemoryLayoutType(a2);
          if (v8)
          {
            MIL::Text::BasicSerializer::Type(this, v8);
          }
          else
          {
            uint64_t v9 = (const MIL::IRStateValueType *)MIL::IRValueType::TryCastAsStateType(a2);
            if (!v9)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Provided type is not supported by the serializer.");
              __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            MIL::Text::BasicSerializer::Type(this, v9);
          }
        }
      }
    }
  }
  return this;
}

void sub_20F455274(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::ValueLiteral(MIL::Text::BasicSerializer *this, const MIL::IRValue *a2)
{
  uint64_t v4 = (const MIL::IRTensorValue *)(*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 40))(a2);
  if (v4)
  {
    return (MIL::Text::BasicSerializer *)MIL::Text::BasicSerializer::Val(this, v4);
  }
  else
  {
    uint64_t v6 = (const MIL::IRTupleValue *)(*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 56))(a2);
    if (v6)
    {
      MIL::Text::BasicSerializer::Val(this, v6);
    }
    else
    {
      long long v7 = (const MIL::IRListValue *)(*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 48))(a2);
      if (v7)
      {
        MIL::Text::BasicSerializer::Val(this, v7);
      }
      else
      {
        uint64_t v8 = (const MIL::IRDictionaryValue *)(*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 64))(a2);
        if (!v8)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Value type is not supported by the serializer.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        MIL::Text::BasicSerializer::Val(this, v8);
      }
    }
    return this;
  }
}

void sub_20F4553E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::ValueAssign(MIL::Text::BasicSerializer *this, const MIL::IRValue *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"= ", 2);

  return MIL::Text::BasicSerializer::Value(this, a2);
}

uint64_t MIL::Text::BasicSerializer::Val(MIL::Text::BasicSerializer *this, const MIL::IRTensorValue *a2)
{
  uint64_t v4 = (*(uint64_t (**)(const MIL::IRTensorValue *))(*(void *)a2 + 32))(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
  switch((int)result)
  {
    case 3:
      uint64_t result = MIL::Text::BasicSerializer::Val<std::string>((uint64_t)this, v15);
      break;
    case 4:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::Fp16>((uint64_t)this, v16);
      break;
    case 5:
      uint64_t result = MIL::Text::BasicSerializer::Val<float>((uint64_t)this, v17);
      break;
    case 6:
      uint64_t result = MIL::Text::BasicSerializer::Val<double>((uint64_t)this, v11);
      break;
    case 7:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::Bf16>((uint64_t)this, v22);
      break;
    case 8:
      __break(1u);
      break;
    case 9:
      uint64_t result = MIL::Text::BasicSerializer::Val<signed char>((uint64_t)this, v18);
      break;
    case 10:
      uint64_t result = MIL::Text::BasicSerializer::Val<short>((uint64_t)this, v12);
      break;
    case 11:
      uint64_t result = MIL::Text::BasicSerializer::Val<int>((uint64_t)this, v19);
      break;
    case 12:
      uint64_t result = MIL::Text::BasicSerializer::Val<long long>((uint64_t)this, v7);
      break;
    case 13:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::Int4>((uint64_t)this, v20);
      break;
    case 14:
      uint64_t result = MIL::Text::BasicSerializer::Val<unsigned char>((uint64_t)this, v8);
      break;
    case 15:
      uint64_t result = MIL::Text::BasicSerializer::Val<unsigned short>((uint64_t)this, v9);
      break;
    case 16:
      uint64_t result = MIL::Text::BasicSerializer::Val<unsigned int>((uint64_t)this, v21);
      break;
    case 17:
      uint64_t result = MIL::Text::BasicSerializer::Val<unsigned long long>((uint64_t)this, v23);
      break;
    case 18:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "cannot dispatch on type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 19:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::UInt2>((uint64_t)this, v13);
      break;
    case 20:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::UInt4>((uint64_t)this, v24);
      break;
    case 21:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::UInt1>((uint64_t)this, v10);
      break;
    case 22:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::UInt3>((uint64_t)this, v26);
      break;
    case 23:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::UInt6>((uint64_t)this, v25);
      break;
    case 24:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::Fp8E4M3FN>((uint64_t)this, v27);
      break;
    case 25:
      uint64_t result = MIL::Text::BasicSerializer::Val<MIL::Fp8E5M2>((uint64_t)this, v14);
      break;
    default:
      uint64_t result = MIL::Text::BasicSerializer::Val<BOOL>((uint64_t)this, v6);
      break;
  }
  return result;
}

void sub_20F455E00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Val(MIL::Text::BasicSerializer *this, const MIL::IRTupleValue *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"(", 1);
  v6[0] = MIL::IRTupleValue::GetValues(a2);
  v6[1] = v4;
  MIL::Text::BasicSerializer::ValueLiteralList(this, (uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)")", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Val(MIL::Text::BasicSerializer *this, const MIL::IRListValue *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"[", 1);
  v6[0] = MIL::IRListValue::GetValues(a2);
  v6[1] = v4;
  MIL::Text::BasicSerializer::ValueLiteralList(this, (uint64_t)v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"]", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Val(MIL::Text::BasicSerializer *this, const MIL::IRDictionaryValue *a2)
{
  v49[2] = *MEMORY[0x263EF8340];
  memset(&v47, 0, sizeof(v47));
  std::vector<std::string>::size_type v4 = MIL::IRDictionaryValue::Size(a2);
  std::vector<std::string>::reserve(&v47, v4);
  uint64_t v5 = MIL::IRDictionaryValue::begin(a2);
  uint64_t v6 = MIL::IRDictionaryValue::end(a2);
  if (v5 != v6)
  {
    long long v7 = "{";
    uint64_t v8 = ", ";
    do
    {
      (*(void (**)(std::string *__return_ptr))(**(void **)(v5 + 16) + 72))(&v43);
      uint64_t v9 = std::string::insert(&v43, 0, v7);
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      uint64_t v11 = std::string::append(&v44, v8);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      (*(void (**)(void **__return_ptr))(**(void **)(v5 + 32) + 72))(__p);
      if ((v42 & 0x80u) == 0) {
        unsigned __int8 v13 = __p;
      }
      else {
        unsigned __int8 v13 = (void **)__p[0];
      }
      if ((v42 & 0x80u) == 0) {
        std::string::size_type v14 = v42;
      }
      else {
        std::string::size_type v14 = (std::string::size_type)__p[1];
      }
      int v15 = std::string::append(&v45, (const std::string::value_type *)v13, v14);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      uint64_t v17 = std::string::append(&v46, "}");
      char v18 = (char *)v17->__r_.__value_.__r.__words[0];
      v49[0] = v17->__r_.__value_.__l.__size_;
      *(void *)((char *)v49 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
      char v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::vector<std::string>::pointer end = v47.__end_;
      if (v47.__end_ >= v47.__end_cap_.__value_)
      {
        uint64_t v23 = v8;
        int v24 = v7;
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_ - (char *)v47.__begin_) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3) > v26) {
          unint64_t v26 = 0x5555555555555556 * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_cap_.__value_ - (char *)v47.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v27 = v26;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v47.__end_cap_;
        if (v27) {
          unsigned __int8 v28 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v47.__end_cap_, v27);
        }
        else {
          unsigned __int8 v28 = 0;
        }
        uint64_t v29 = v28 + v25;
        __v.__first_ = v28;
        __v.__begin_ = v29;
        __v.__end_cap_.__value_ = &v28[v27];
        std::string::size_type v30 = v49[0];
        v29->__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
        v29->__r_.__value_.__l.__size_ = v30;
        *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v49 + 7);
        *((unsigned char *)&v29->__r_.__value_.__s + 23) = v19;
        v49[0] = 0;
        *(void *)((char *)v49 + 7) = 0;
        __v.__end_ = v29 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v47, &__v);
        uint64_t v22 = v47.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        long long v7 = v24;
        uint64_t v8 = v23;
      }
      else
      {
        std::string::size_type v21 = v49[0];
        v47.__end_->__r_.__value_.__l.__data_ = v18;
        end->__r_.__value_.__l.__size_ = v21;
        *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v49 + 7);
        *((unsigned char *)&end->__r_.__value_.__s + 23) = v19;
        v49[0] = 0;
        *(void *)((char *)v49 + 7) = 0;
        uint64_t v22 = end + 1;
      }
      v47.__end_ = v22;
      if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v46.__r_.__value_.__l.__data_);
      }
      if ((char)v42 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v45.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v44.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v43.__r_.__value_.__l.__data_);
      }
      uint64_t v5 = *(void *)v5;
    }
    while (v5 != v6);
  }
  unint64_t v31 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v47.__end_ - (char *)v47.__begin_) >> 3));
  if (v47.__end_ == v47.__begin_) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v47.__begin_, (long long *)v47.__end_, (uint64_t)&__v, v32, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"{", 1);
  std::vector<std::string>::pointer begin = v47.__begin_;
  std::vector<std::string>::pointer v34 = v47.__end_;
  if (v47.__begin_ != v47.__end_)
  {
    size_t v35 = "";
    do
    {
      size_t v36 = strlen(v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)v35, v36);
      int v37 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
      if (v37 >= 0) {
        uint64_t v38 = (uint64_t)begin;
      }
      else {
        uint64_t v38 = begin->__r_.__value_.__r.__words[0];
      }
      if (v37 >= 0) {
        uint64_t size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
      }
      else {
        uint64_t size = begin->__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), v38, size);
      ++begin;
      size_t v35 = ", ";
    }
    while (begin != v34);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"}", 1);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  return this;
}

void sub_20F456378(_Unwind_Exception *a1, uint64_t a2, int a3, __int16 a4, char a5, char a6, void *a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,void *a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char *__pa,std::__split_buffer<std::string> *a36,uint64_t a37,char a38)
{
  __pa = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::ValueLiteralList(MIL::Text::BasicSerializer *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    std::vector<std::string>::size_type v4 = *(const MIL::IRValue ***)a2;
    uint64_t v5 = 16 * v3;
    uint64_t v6 = "";
    do
    {
      size_t v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v6, v7);
      uint64_t v8 = *v4;
      v4 += 2;
      MIL::Text::BasicSerializer::ValueLiteral(a1, v8);
      uint64_t v6 = ", ";
      v5 -= 16;
    }
    while (v5);
  }
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRTensorValueType *a2)
{
  std::vector<std::string>::size_type v4 = (void *)(*(uint64_t (**)(const MIL::IRTensorValueType *))(*(void *)a2 + 80))(a2);
  if ((*(int (**)(void))(**((void **)this + 40) + 104))(*((void *)this + 40)) < 2
    || !MIL::IRTensorValueType::IsScalar(a2)
    || v4[3])
  {
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"tensor<", 7);
    int v10 = (*(uint64_t (**)(const MIL::IRTensorValueType *))(*(void *)a2 + 88))(a2);
    MIL::IRDataTypeToString(v10, &__p);
    if ((v18 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v12 = v18;
    }
    else {
      uint64_t v12 = v17;
    }
    unsigned __int8 v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)p_p, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
    std::string::size_type v14 = (const MIL::IRDimension ***)(*(uint64_t (**)(const MIL::IRTensorValueType *))(*(void *)a2 + 96))(a2);
    MIL::Text::BasicSerializer::TensorShape(this, v14);
    if (v4[3])
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", ", 2);
      MIL::Text::BasicSerializer::AttributesMap((uint64_t)this, v4);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)">", 1);
  }
  else
  {
    uint64_t v5 = (void *)*((void *)this + 5);
    int v6 = (*(uint64_t (**)(const MIL::IRTensorValueType *))(*(void *)a2 + 88))(a2);
    MIL::IRDataTypeToString(v6, &__p);
    if ((v18 & 0x80u) == 0) {
      size_t v7 = &__p;
    }
    else {
      size_t v7 = __p;
    }
    if ((v18 & 0x80u) == 0) {
      uint64_t v8 = v18;
    }
    else {
      uint64_t v8 = v17;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v7, v8);
    if ((char)v18 < 0) {
      operator delete(__p);
    }
  }
  return this;
}

void sub_20F4566E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRTupleValueType *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"tuple<", 6);
  std::vector<std::string>::size_type v4 = (const MIL::IRValueType ***)(*(uint64_t (**)(const MIL::IRTupleValueType *))(*(void *)a2 + 64))(a2);
  MIL::Text::BasicSerializer::TypeList(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)">", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRListValueType *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"list<", 5);
  std::vector<std::string>::size_type v4 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRListValueType *))(*(void *)a2 + 64))(a2);
  MIL::Text::BasicSerializer::Type(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", ", 2);
  uint64_t v5 = (const MIL::IRDimension *)(*(uint64_t (**)(const MIL::IRListValueType *))(*(void *)a2 + 72))(a2);
  MIL::Text::BasicSerializer::Dimension(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)">", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRDictionaryValueType *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"dict<", 5);
  std::vector<std::string>::size_type v4 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(void *)a2 + 64))(a2);
  MIL::Text::BasicSerializer::Type(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", ", 2);
  uint64_t v5 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(void *)a2 + 72))(a2);
  MIL::Text::BasicSerializer::Type(this, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)">", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRMemoryLayoutValueType *a2)
{
  if ((*(int (**)(void))(**((void **)this + 40) + 104))(*((void *)this + 40)) <= 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Program version 1.2+ required for memory layouts.  Use MIL::Text::Serialize overload with the options parameter instead");
    goto LABEL_10;
  }
  std::vector<std::string>::size_type v4 = (const MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(a2);
  if (!v4)
  {
    uint64_t v5 = (const MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(a2);
    if (v5)
    {
      MIL::Text::BasicSerializer::Type(this, v5);
      return this;
    }
    int v6 = (const MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(a2);
    if (v6)
    {
      MIL::Text::BasicSerializer::Type(this, v6);
      return this;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Provided memory layout type is not supported by the serializer.");
LABEL_10:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::Text::BasicSerializer::Type(this, v4);
  return this;
}

void sub_20F456A20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRStateValueType *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"state<", 6);
  Wrappedunsigned int Type = (const MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(a2);
  MIL::Text::BasicSerializer::Type(this, WrappedType);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)">", 1);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::TensorShape(MIL::Text::BasicSerializer *a1, const MIL::IRDimension ***a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"[", 1);
  std::vector<std::string>::size_type v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    int v6 = "";
    do
    {
      size_t v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v6, v7);
      uint64_t v8 = *v4++;
      MIL::Text::BasicSerializer::Dimension(a1, v8);
      int v6 = ", ";
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"]", 1);
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Dimension(MIL::Text::BasicSerializer *this, const MIL::IRDimension *a2)
{
  uint64_t v4 = (*(uint64_t (**)(const MIL::IRDimension *))(*(void *)a2 + 16))(a2);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
    std::ostream::operator<<();
  }
  else
  {
    uint64_t v5 = (const MIL::IRUnknownDimension *)(*(uint64_t (**)(const MIL::IRDimension *))(*(void *)a2 + 24))(a2);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Dimension type is not supported by the serializer.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    MIL::Text::BasicSerializer::Dimension(this, v5);
  }
  return this;
}

void sub_20F456C48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::TypeList(MIL::Text::BasicSerializer *a1, const MIL::IRValueType ***a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v5 = "";
    do
    {
      int v6 = *v3++;
      size_t v7 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v5, v7);
      MIL::Text::BasicSerializer::Type(a1, v6);
      uint64_t v5 = ", ";
    }
    while (v3 != v4);
  }
  return a1;
}

uint64_t MIL::Text::BasicSerializer::PropertyItem<unsigned char>(uint64_t a1, MIL::IRConstantProperty *this)
{
  return a1;
}

uint64_t MIL::Text::BasicSerializer::PropertyItem<unsigned long long>(uint64_t a1, MIL::IRConstantProperty *this)
{
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::PropertyItem(MIL::Text::BasicSerializer *this, const MIL::IRUnknownProperty *a2)
{
  if (MIL::IRUnknownProperty::IsVariadic(a2))
  {
    uint64_t v3 = "...";
    uint64_t v4 = 3;
  }
  else
  {
    uint64_t v3 = "?";
    uint64_t v4 = 1;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)v3, v4);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRTensorBufferValueType *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"tensor_buffer<", 14);
  uint64_t v4 = (void *)*((void *)this + 5);
  Dataunsigned int Type = MIL::IRTensorBufferValueType::GetDataType(a2);
  MIL::IRDataTypeToString(DataType, __p);
  if ((v19 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    uint64_t v7 = v19;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", shape=", 8);
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t Shape = (const MIL::IRDimension ***)MIL::IRTensorBufferValueType::GetShape(a2);
  MIL::Text::BasicSerializer::TensorShape(this, Shape);
  uint64_t Strides = MIL::IRTensorBufferValueType::TryGetStrides(a2);
  uint64_t v11 = (void *)*((void *)this + 5);
  if (Strides)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", strides=", 10);
    uint64_t v12 = (MIL::IRProperty ***)MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)a2);
    MIL::Text::BasicSerializer::PropertyList<long long>(this, v12);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", row_alignment_in_bytes=", 25);
    uint64_t RowAlignmentInBytes = (MIL::IRProperty *)MIL::IRTensorBufferValueType::GetRowAlignmentInBytes((MIL::IRTensorBufferValueTypeImpl **)a2);
    std::string::size_type v14 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(RowAlignmentInBytes);
    MIL::IRConstantProperty::GetUInt64ScalarValue(v14);
    std::ostream::operator<<();
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", interleave_factors=", 21);
  uint64_t InterleaveFactors = (MIL::IRProperty ***)MIL::IRTensorBufferValueType::GetInterleaveFactors(a2);
  MIL::Text::BasicSerializer::PropertyList<unsigned char>(this, InterleaveFactors);
  if (*(void *)(MIL::IRTensorBufferValueType::GetAttributes(a2) + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", ", 2);
    uint64_t Attributes = (void *)MIL::IRTensorBufferValueType::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t)this, Attributes);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)">", 1);
  return this;
}

void sub_20F456F54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRPixelBufferValueType *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"pixel_buffer<", 13);
  uint64_t v4 = (void *)*((void *)this + 5);
  PixelFormatunsigned int Type = MIL::IRPixelBufferValueType::GetPixelFormatType(a2);
  MIL::IRPixelFormatTypeToString(PixelFormatType, __p);
  if ((v16 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v16 & 0x80u) == 0) {
    uint64_t v7 = v16;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", shape=", 8);
  uint64_t Shape = (const MIL::IRDimension ***)MIL::IRPixelBufferValueType::GetShape(a2);
  MIL::Text::BasicSerializer::TensorShape(this, Shape);
  uint64_t BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(a2);
  if (BytesPerRow)
  {
    int v10 = (MIL::IRProperty ***)BytesPerRow;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", bytes_per_row=", 16);
    MIL::Text::BasicSerializer::PropertyList<long long>(this, v10);
  }
  uint64_t NumSlices = MIL::IRPixelBufferValueType::TryGetNumSlices(a2);
  if (NumSlices)
  {
    uint64_t v12 = (MIL::IRProperty ***)NumSlices;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", num_slices=", 13);
    MIL::Text::BasicSerializer::PropertyList<long long>(this, v12);
  }
  if (*(void *)(MIL::IRPixelBufferValueType::GetAttributes(a2) + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", ", 2);
    uint64_t Attributes = (void *)MIL::IRPixelBufferValueType::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t)this, Attributes);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)">", 1);
  return this;
}

void sub_20F4570D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Type(MIL::Text::BasicSerializer *this, const MIL::IRCircularBufferValueType *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)"circular_buffer<", 16);
  uint64_t v4 = (void *)*((void *)this + 5);
  Dataunsigned int Type = MIL::IRCircularBufferValueType::GetDataType(a2);
  MIL::IRDataTypeToString(DataType, __p);
  if ((v21 & 0x80u) == 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  if ((v21 & 0x80u) == 0) {
    uint64_t v7 = v21;
  }
  else {
    uint64_t v7 = (uint64_t)__p[1];
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)", shape=", 8);
  if ((char)v21 < 0) {
    operator delete(__p[0]);
  }
  uint64_t Shape = (const MIL::IRDimension ***)MIL::IRCircularBufferValueType::GetShape(a2);
  MIL::Text::BasicSerializer::TensorShape(this, Shape);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", strides=", 10);
  uint64_t Strides = (MIL::IRProperty ***)MIL::IRCircularBufferValueType::GetStrides(a2);
  MIL::Text::BasicSerializer::PropertyList<long long>(this, Strides);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", interleave_factors=", 21);
  uint64_t InterleaveFactors = (MIL::IRProperty ***)MIL::IRCircularBufferValueType::GetInterleaveFactors(a2);
  MIL::Text::BasicSerializer::PropertyList<unsigned char>(this, InterleaveFactors);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", wrap_dim=", 11);
  WrapDim = (void *)MIL::IRCircularBufferValueType::GetWrapDim(a2);
  unsigned __int8 v13 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(WrapDim);
  MIL::IRConstantProperty::GetInt64ScalarValue(v13);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", slice_wrap_dim_size=", 22);
  Sliceuint64_t Shape = (void *)MIL::IRCircularBufferValueType::GetSliceShape(a2);
  int v15 = (void *)MIL::IRCircularBufferValueType::GetWrapDim(a2);
  unsigned __int8 v16 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(v15);
  Int64Scalaruint64_t Value = MIL::IRConstantProperty::GetInt64ScalarValue(v16);
  if (Int64ScalarValue >= (uint64_t)(SliceShape[1] - *SliceShape) >> 3) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  MIL::Text::BasicSerializer::Dimension(this, *(const MIL::IRDimension **)(*SliceShape + 8 * Int64ScalarValue));
  if (*(void *)(MIL::IRCircularBufferValueType::GetAttributes(a2) + 24))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)", ", 2);
    uint64_t Attributes = (void *)MIL::IRCircularBufferValueType::GetAttributes(a2);
    MIL::Text::BasicSerializer::AttributesMap((uint64_t)this, Attributes);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)">", 1);
  return this;
}

void sub_20F4572D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::PropertyList<long long>(MIL::Text::BasicSerializer *a1, MIL::IRProperty ***a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"[", 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    int v6 = "";
    do
    {
      size_t v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v6, v7);
      uint64_t v8 = *v4++;
      MIL::Text::BasicSerializer::PropertyItem<long long>(a1, v8);
      int v6 = ", ";
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"]", 1);
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::PropertyList<unsigned char>(MIL::Text::BasicSerializer *a1, MIL::IRProperty ***a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"[", 1);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    int v6 = "";
    do
    {
      size_t v7 = strlen(v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v6, v7);
      uint64_t v8 = *v4++;
      MIL::Text::BasicSerializer::PropertyItem<unsigned char>(a1, v8);
      int v6 = ", ";
    }
    while (v4 != v5);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"]", 1);
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Dimension(MIL::Text::BasicSerializer *this, const MIL::IRConstantDimension *a2)
{
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Dimension(MIL::Text::BasicSerializer *this, const MIL::IRUnknownDimension *a2)
{
  if ((*(unsigned int (**)(const MIL::IRUnknownDimension *))(*(void *)a2 + 32))(a2))
  {
    uint64_t v3 = "...";
    uint64_t v4 = 3;
  }
  else
  {
    uint64_t v3 = "?";
    uint64_t v4 = 1;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)this + 5), (uint64_t)v3, v4);
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::Argument(MIL::Text::BasicSerializer *this, const MIL::IRArgument *a2)
{
  if ((*(unsigned int (**)(const MIL::IRArgument *))(*(void *)a2 + 16))(a2))
  {
    uint64_t v4 = (void *)*((void *)this + 5);
    uint64_t Name = MIL::IRArgument::GetName(a2);
    int v6 = *(char *)(Name + 23);
    if (v6 >= 0) {
      uint64_t v7 = Name;
    }
    else {
      uint64_t v7 = *(void *)Name;
    }
    if (v6 >= 0) {
      uint64_t v8 = *(unsigned __int8 *)(Name + 23);
    }
    else {
      uint64_t v8 = *(void *)(Name + 8);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  }
  else
  {
    uint64_t Value = (const MIL::IRValue *)MIL::IRArgument::GetValue(a2);
    MIL::Text::BasicSerializer::Value(this, Value);
  }
  return this;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::ArgumentList(MIL::Text::BasicSerializer *a1, const MIL::IRArgument ***a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v5 = "";
    do
    {
      size_t v6 = strlen(v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v5, v6);
      uint64_t v7 = *v3;
      v3 += 2;
      MIL::Text::BasicSerializer::Argument(a1, v7);
      uint64_t v5 = ", ";
    }
    while (v3 != v4);
  }
  return a1;
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDArgumentBinding(MIL::Text::BasicSerializer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*((void *)a1 + 5);
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v7 = v6;
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" = ", 3);
  unint64_t v9 = *(void *)(a3 + 8) - *(void *)a3;
  if (v9 < 0x11)
  {
    if (v9 != 16)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v12);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    MIL::Text::BasicSerializer::Argument(a1, **(const MIL::IRArgument ***)a3);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"(", 1);
    MIL::Text::BasicSerializer::ArgumentList(a1, (const MIL::IRArgument ***)a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)")", 1);
  }
  return a1;
}

void sub_20F457764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t MIL::Text::BasicSerializer::IDValueBinding(MIL::Text::BasicSerializer *a1, uint64_t a2, const MIL::IRValue *a3)
{
  uint64_t v5 = (void *)*((void *)a1 + 5);
  uint64_t v6 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    uint64_t v7 = v6;
  }
  uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)"= ", 2);

  return MIL::Text::BasicSerializer::Value(a1, a3);
}

MIL::Text::BasicSerializer *MIL::Text::BasicSerializer::IDTypeBindingMap(MIL::Text::BasicSerializer *a1, void *a2)
{
  memset(&v17, 0, sizeof(v17));
  std::vector<std::string>::reserve(&v17, a2[3]);
  uint64_t v4 = (uint64_t *)a2[2];
  if (v4)
  {
    std::vector<std::string>::pointer end = v17.__end_;
    do
    {
      uint64_t v6 = (long long *)(v4 + 2);
      if (end >= v17.__end_cap_.__value_)
      {
        std::vector<std::string>::pointer end = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v17, v6);
      }
      else
      {
        if (*((char *)v4 + 39) < 0)
        {
          std::string::__init_copy_ctor_external(end, (const std::string::value_type *)v4[2], v4[3]);
        }
        else
        {
          long long v7 = *v6;
          end->__r_.__value_.__r.__words[2] = v4[4];
          *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
        }
        ++end;
      }
      v17.__end_ = end;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    std::vector<std::string>::pointer end = v17.__end_;
  }
  unint64_t v8 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)v17.__begin_) >> 3));
  if (end == v17.__begin_) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = v8;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v17.__begin_, (long long *)end, (uint64_t)&v18, v9, 1);
  std::vector<std::string>::pointer begin = v17.__begin_;
  std::vector<std::string>::pointer v11 = v17.__end_;
  if (v17.__begin_ != v17.__end_)
  {
    std::string v12 = "";
    do
    {
      unsigned __int8 v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)begin);
      if (!v13) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      std::string::size_type v14 = (const MIL::IRValueType *)*((void *)v13 + 5);
      size_t v15 = strlen(v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((void **)a1 + 5), (uint64_t)v12, v15);
      MIL::Text::BasicSerializer::IDTypeBinding(a1, (uint64_t)begin++, v14);
      std::string v12 = ", ";
    }
    while (begin != v11);
  }
  unsigned __int8 v19 = &v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v19);
  return a1;
}

void sub_20F4579AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  _Unwind_Resume(a1);
}

uint64_t MIL::Text::BasicSerializer::Val<BOOL>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    unsigned int Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<BOOL>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<BOOL>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<BOOL>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<BOOL>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<BOOL>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<BOOL>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<BOOL>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<BOOL>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<BOOL>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              uint64_t v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<BOOL>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<BOOL>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}

void sub_20F4585CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<BOOL>(uint64_t a1, void *a2)
{
  uint64_t Type = MIL::IRTypedTensorValue<BOOL>::GetType(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  unsigned int v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  if (__p == v11)
  {
    Scalaruint64_t Value = MIL::IRTypedTensorValue<BOOL>::GetScalarValue(a1);
    if (ScalarValue) {
      unint64_t v7 = "true";
    }
    else {
      unint64_t v7 = "false";
    }
    if (ScalarValue) {
      uint64_t v8 = 4;
    }
    else {
      uint64_t v8 = 5;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v7, v8);
  }
  uint64_t Values = MIL::IRTypedTensorValue<BOOL>::GetValues(a1);
  if (__p)
  {
    unsigned int v11 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F458978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<std::string>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<std::string>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<std::string>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<std::string>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<std::string>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<std::string>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<std::string>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<std::string>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<std::string>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<std::string>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<std::string>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<std::string>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}

void sub_20F459588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<std::string>(uint64_t a1, void *a2)
{
  uint64_t Type = MIL::IRTypedTensorValue<std::string>::GetType(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  int v8 = 0;
  uint64_t v9 = 0;
  unint64_t v7 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v7, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  if (v7 == v8)
  {
    MIL::IRTypedTensorValue<std::string>::GetScalarValue(a1, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = MIL::IRTypedTensorValue<std::string>::GetValues(a1);
  if (v7)
  {
    int v8 = (MIL::IRDimension **)v7;
    operator delete(v7);
  }
}

void sub_20F45992C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Bf16>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Bf16>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Bf16>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<MIL::Bf16>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<MIL::Bf16>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<MIL::Bf16>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<MIL::Bf16>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<MIL::Bf16>((uint64_t)a2, *(void **)(a1 + 40), *(void *)(a1 + 320));
  return a1;
}

void sub_20F45A554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<MIL::Bf16>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t Type = MIL::IRTypedTensorValue<MIL::Bf16>::GetType(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (__p == v10)
  {
    LOWORD(Values) = MIL::IRTypedTensorValue<MIL::Bf16>::GetScalarValue(a1);
    MIL::Bf16::GetFloat((MIL::Bf16 *)&Values);
  }
  uint64_t Values = (MIL::Bf16 *)MIL::IRTypedTensorValue<MIL::Bf16>::GetValues(a1);
  if (__p)
  {
    uint64_t v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F45A904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Fp16>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp16>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp16>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<MIL::Fp16>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<MIL::Fp16>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<MIL::Fp16>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<MIL::Fp16>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<MIL::Fp16>((uint64_t)a2, *(void **)(a1 + 40), *(void *)(a1 + 320));
  return a1;
}

void sub_20F45B514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<MIL::Fp16>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t Type = MIL::IRTypedTensorValue<MIL::Fp16>::GetType(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (__p == v10)
  {
    LOWORD(Values) = MIL::IRTypedTensorValue<MIL::Fp16>::GetScalarValue(a1);
    MIL::Fp16::GetFloat((MIL::Fp16 *)&Values);
  }
  uint64_t Values = (MIL::Fp16 *)MIL::IRTypedTensorValue<MIL::Fp16>::GetValues(a1);
  if (__p)
  {
    uint64_t v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F45B8C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Fp8E5M2>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<MIL::Fp8E5M2>((uint64_t)a2, *(void **)(a1 + 40), *(void *)(a1 + 320));
  return a1;
}

void sub_20F45C4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<MIL::Fp8E5M2>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t Type = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (__p == v10)
  {
    LOBYTE(Values) = MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetScalarValue(a1);
    MIL::Fp8E5M2::GetFloat((MIL::Fp8E5M2 *)&Values);
  }
  uint64_t Values = (MIL::Fp8E5M2 *)MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetValues(a1);
  if (__p)
  {
    uint64_t v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F45C884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Fp8E4M3FN>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<MIL::Fp8E4M3FN>((uint64_t)a2, *(void **)(a1 + 40), *(void *)(a1 + 320));
  return a1;
}

void sub_20F45D494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<MIL::Fp8E4M3FN>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t Type = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (__p == v10)
  {
    LOBYTE(Values) = MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetScalarValue(a1);
    MIL::Fp8E4M3FN::GetFloat((MIL::Fp8E4M3FN *)&Values);
  }
  uint64_t Values = (MIL::Fp8E4M3FN *)MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetValues(a1);
  if (__p)
  {
    uint64_t v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F45D844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<float>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<float>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<float>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<float>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<float>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<float>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<float>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<float>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<float>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<float>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<float>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<float>((uint64_t)a2, *(void **)(a1 + 40), *(void *)(a1 + 320));
  return a1;
}

void sub_20F45E454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<float>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t Type = MIL::IRTypedTensorValue<float>::GetType(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (__p == v10)
  {
    MIL::IRTypedTensorValue<float>::GetScalarValue(a1);
  }
  uint64_t Values = MIL::IRTypedTensorValue<float>::GetValues(a1);
  if (__p)
  {
    uint64_t v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F45E7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<double>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<double>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<double>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<double>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<double>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<double>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<double>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<double>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<double>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<double>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<double>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<double>((uint64_t)a2, *(void **)(a1 + 40), *(void *)(a1 + 320));
  return a1;
}

void sub_20F45F408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<double>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t Type = MIL::IRTypedTensorValue<double>::GetType(a1);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (__p == v10)
  {
    Scalaruint64_t Value = MIL::IRTypedTensorValue<double>::GetScalarValue(a1);
  }
  Scalaruint64_t Value = COERCE_DOUBLE(MIL::IRTypedTensorValue<double>::GetValues(a1));
  if (__p)
  {
    uint64_t v10 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F45F7B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::Int4>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Int4>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::Int4>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<MIL::Int4>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<MIL::Int4>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<MIL::Int4>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<MIL::Int4>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelperForSubByteTypes<MIL::Int4>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}

void sub_20F4603C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

uint64_t MIL::Text::BasicSerializer::Val<signed char>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<signed char>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<signed char>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<signed char>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<signed char>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<signed char>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<signed char>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<signed char>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<signed char>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<signed char>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<signed char>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<signed char>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}

void sub_20F461280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<signed char>(uint64_t a1, void *a2)
{
  uint64_t Type = MIL::IRTypedTensorValue<signed char>::GetType(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  int v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<signed char>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  uint64_t Values = MIL::IRTypedTensorValue<signed char>::GetValues(a1);
  if (__p)
  {
    int v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F461610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<short>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<short>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<short>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<short>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<short>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<short>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<short>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<short>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<short>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<short>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<short>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<short>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}

void sub_20F462220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<short>(uint64_t a1, void *a2)
{
  uint64_t Type = MIL::IRTypedTensorValue<short>::GetType(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  int v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<short>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  uint64_t Values = MIL::IRTypedTensorValue<short>::GetValues(a1);
  if (__p)
  {
    int v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F4625B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<int>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<int>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<int>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<int>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<int>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<int>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<int>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<int>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<int>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<int>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<int>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<int>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}

void sub_20F4631C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<int>(uint64_t a1, void *a2)
{
  uint64_t Type = MIL::IRTypedTensorValue<int>::GetType(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  int v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<int>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  uint64_t Values = MIL::IRTypedTensorValue<int>::GetValues(a1);
  if (__p)
  {
    int v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F463550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<long long>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<long long>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<long long>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<long long>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<long long>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<long long>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<long long>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<long long>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<long long>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<long long>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<long long>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelper<long long>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}

void sub_20F464160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

void ValHelper<long long>(uint64_t a1, void *a2)
{
  uint64_t Type = MIL::IRTypedTensorValue<long long>::GetType(a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)Type + 96))(Type);
  int v8 = 0;
  uint64_t v9 = 0;
  std::string __p = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v5, *(void *)(v5 + 8), (uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3);
  if (__p == v8)
  {
    MIL::IRTypedTensorValue<long long>::GetScalarValue(a1);
    std::ostream::operator<<();
  }
  uint64_t Values = MIL::IRTypedTensorValue<long long>::GetValues(a1);
  if (__p)
  {
    int v8 = (MIL::IRDimension **)__p;
    operator delete(__p);
  }
}

void sub_20F4644F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::UInt1>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt1>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt1>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<MIL::UInt1>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<MIL::UInt1>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<MIL::UInt1>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<MIL::UInt1>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelperForSubByteTypes<MIL::UInt1>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}

void sub_20F465100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,char a37)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v39 & 1) == 0)
    {
LABEL_8:
      if (a35 < 0) {
        operator delete(a30);
      }
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v39)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v38);
  goto LABEL_8;
}

uint64_t MIL::Text::BasicSerializer::Val<MIL::UInt2>(uint64_t a1, MIL::IRTensorValue *a2)
{
  uint64_t v4 = *(void *)(a1 + 384);
  if (v4)
  {
    uint64_t Type = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt2>::GetType((uint64_t)a2);
    uint64_t v6 = MIL::IRValueType::AsTensorType(Type);
    unint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
    int v8 = v7 >= (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 136))(*(void *)(a1 + 320));
  }
  else
  {
    int v8 = MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage((uint64_t)a2);
  }
  uint64_t v9 = (MIL::IRValueType *)MIL::IRTypedTensorValue<MIL::UInt2>::GetType((uint64_t)a2);
  uint64_t v10 = MIL::IRValueType::AsTensorType(v9);
  unsigned int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 88))(v10);
  int v12 = v11;
  if (!v4 || !v8 || (v11 <= 0x19 ? (BOOL v13 = ((1 << v11) & 0x3F9EE30) == 0) : (BOOL v13 = 1), !v13))
  {
    if (v8)
    {
      memset(v71, 0, sizeof(v71));
      int v72 = 1065353216;
      if (!v4)
      {
        uint64_t FileProperties = MIL::IRTypedTensorValue<MIL::UInt2>::GetFileProperties((uint64_t)a2);
        if (v71 != (_OWORD *)FileProperties)
        {
          int v72 = *(_DWORD *)(FileProperties + 32);
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>(v71, *(uint64_t **)(FileProperties + 16), 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&__str, "type");
        int v56 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
        if (v56)
        {
          MIL::IRValue::GetScalar<std::string>(*((const void **)v56 + 5), &__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "type");
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v71, (unsigned __int8 *)&__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, "path");
          uint64_t v57 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v71, (unsigned __int8 *)&__str);
          if (v57)
          {
            uint64_t v59 = (const void *)*((void *)v57 + 5);
            uint64_t v58 = *((void *)v57 + 6);
            if (v58) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            MIL::IRValue::GetScalar<std::string>(v59, &__str);
            uint64_t v60 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 32))(*(void *)(a1 + 320));
            MIL::Util::ReplaceModelPaths(&__str, v60);
            BOOL v61 = (MIL::IRValueType *)(*(uint64_t (**)(const void *))(*(void *)v59 + 32))(v59);
            int v62 = (_anonymous_namespace_ *)MIL::IRValueType::AsTensorType(v61);
            std::string v67 = __str;
            memset(&__str, 0, sizeof(__str));
            MIL::IRTensorValueType::MakeStringValue(v62, (const MIL::IRTensorValueType *)&v67);
          }
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      uint64_t v14 = a1 + 368;
      if (MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage((uint64_t)a2))
      {
        size_t v15 = (void *)MIL::IRTypedTensorValue<MIL::UInt2>::GetFileProperties((uint64_t)a2);
        std::string::basic_string[abi:ne180100]<0>(&__p, "path");
        int v16 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v15, (unsigned __int8 *)&__p);
        if (!v16) {
          std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
        }
        std::vector<std::string> v17 = (const void *)*((void *)v16 + 5);
        char v18 = (std::__shared_weak_count *)*((void *)v16 + 6);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        MIL::IRValue::GetScalar<std::string>(v17, &__p);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        unsigned __int8 v19 = std::__tree<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<MIL::Blob::StorageWriter>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 368), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &__str);
        unsigned __int8 v21 = (MIL::Blob::StorageWriter *)*((void *)v19 + 7);
        uint64_t v20 = *((void *)v19 + 8);
        if (v20) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
      }
      else
      {
        unsigned __int8 v21 = *(MIL::Blob::StorageWriter **)(*(void *)v14 + 56);
        uint64_t v23 = *(void *)(*(void *)v14 + 64);
        if (v23) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
        }
      }
      memset(&__p, 0, sizeof(__p));
      uint64_t v73 = 0;
      if (!MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage((uint64_t)a2)) {
        goto LABEL_59;
      }
      int v24 = (void *)MIL::IRTypedTensorValue<MIL::UInt2>::GetFileProperties((uint64_t)a2);
      std::string::basic_string[abi:ne180100]<0>(&__str, "path");
      unint64_t v25 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      if (!v25) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v27 = (const void *)*((void *)v25 + 5);
      unint64_t v26 = (std::__shared_weak_count *)*((void *)v25 + 6);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      MIL::IRValue::GetScalar<std::string>(v27, &__str);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = __str;
      std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
      unsigned __int8 v28 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
      uint64_t v29 = v28;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__str.__r_.__value_.__l.__data_);
        if (v29)
        {
LABEL_39:
          std::string::basic_string[abi:ne180100]<0>(&__str, "offset");
          std::string::size_type v30 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v24, (unsigned __int8 *)&__str);
          if (!v30) {
            std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
          }
          unint64_t v31 = (const void *)*((void *)v30 + 5);
          uint64_t v32 = (std::__shared_weak_count *)*((void *)v30 + 6);
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v73 = MIL::IRValue::GetScalar<unsigned long long>(v31);
          if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p))
          {
            std::vector<std::string> v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 328), (unsigned __int8 *)&__p);
            if (!v33) {
              goto LABEL_94;
            }
            std::vector<std::string>::pointer v34 = v33 + 40;
            if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>((void *)v33 + 5, (unint64_t *)&v73))
            {
              if (std::__hash_table<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,MIL::Blob::LegacyStorageReader::FileInfo>>>::find<unsigned long long>(v34, (unint64_t *)&v73))
              {
                char v35 = 1;
                goto LABEL_50;
              }
LABEL_94:
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            }
          }
          char v35 = 0;
LABEL_50:
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if (v35)
          {
LABEL_78:
            uint64_t v55 = MIL::IRTypedTensorValue<MIL::UInt2>::GetType((uint64_t)a2);
            (*(void (**)(uint64_t))(*(void *)v55 + 24))(v55);
            MIL::Blob::StorageWriter::GetFilePath(v21, &__str);
            MIL::IRTensorValueType::MakeValueFromBlobFile();
          }
LABEL_59:
          switch(v12)
          {
            case 4:
              size_t v36 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp16>(v36);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp16>((uint64_t *)v21);
              break;
            case 5:
              uint64_t v51 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<float>(v51);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<float>((uint64_t *)v21);
              break;
            case 9:
              uint64_t v48 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<signed char>(v48);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<signed char>((uint64_t *)v21);
              break;
            case 10:
              int v50 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<short>(v50);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<short>((uint64_t *)v21);
              break;
            case 11:
              std::string v45 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<int>(v45);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<int>((uint64_t *)v21);
              break;
            case 13:
              std::vector<std::string> v47 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Int4>(v47);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Int4>((uint64_t *)v21);
              break;
            case 14:
              int v52 = (void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned char>(v52);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned char>((uint64_t *)v21);
              break;
            case 15:
              uint64_t v49 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned short>(v49);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned short>((uint64_t *)v21);
              break;
            case 16:
              unsigned __int8 v42 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<unsigned int>(v42);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<unsigned int>((uint64_t *)v21);
              break;
            case 19:
              int v39 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt2>(v39);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt2>((uint64_t *)v21);
              break;
            case 20:
              uint64_t v41 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt4>(v41);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt4>((uint64_t *)v21);
              break;
            case 21:
              uint64_t v38 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt1>(v38);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt1>((uint64_t *)v21);
              break;
            case 22:
              std::string::size_type v40 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt3>(v40);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt3>((uint64_t *)v21);
              break;
            case 23:
              std::string v43 = (const void *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::UInt6>(v43);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::UInt6>((uint64_t *)v21);
              break;
            case 24:
              std::string v44 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v44);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E4M3FN>((uint64_t *)v21);
              break;
            case 25:
              std::string v46 = (uint64_t *)MIL::IRTensorValue::TryAsTensor(a2);
              MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v46);
              unint64_t v37 = MIL::Blob::StorageWriter::WriteData<MIL::Fp8E5M2>((uint64_t *)v21);
              break;
            default:
              exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              MIL::IRDataTypeToString(v12, &v68);
              int v65 = std::string::insert(&v68, 0, "[MIL Serialization] Unsupported Data type ");
              long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
              __str.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
              *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v66;
              v65->__r_.__value_.__l.__size_ = 0;
              v65->__r_.__value_.__r.__words[2] = 0;
              v65->__r_.__value_.__r.__words[0] = 0;
              std::logic_error::logic_error(exception, &__str);
              exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
          unint64_t v53 = v37;
          if (MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage((uint64_t)a2))
          {
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            uint64_t v54 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<unsigned long long,unsigned long long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 328, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&__str);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
            std::__hash_table<std::__hash_value_type<unsigned long long,unsigned long long>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,unsigned long long>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,unsigned long long>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)(v54 + 40), (unint64_t *)&v73, (uint64_t)&std::piecewise_construct, &__str)[3] = v53;
          }
          goto LABEL_78;
        }
      }
      else if (v28)
      {
        goto LABEL_39;
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      goto LABEL_59;
    }
  }
  ValHelperForSubByteTypes<MIL::UInt2>((uint64_t)a2, *(void **)(a1 + 40));
  return a1;
}