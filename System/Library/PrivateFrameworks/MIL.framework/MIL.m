void *MIL::AbstractConstExpr::AbstractConstExpr(void *this)
{
  *this = &unk_26C250D90;
  return this;
}

uint64_t MIL::Conversion::CopyTensorValue@<X0>(MIL::Conversion *this@<X0>, MIL::MILContext *a2@<X1>, const MIL::IRTensorValueType *a3@<X2>, void *a4@<X8>)
{
  if (!(*(unsigned int (**)(const MIL::IRTensorValueType *))(*(void *)a3 + 80))(a3))
  {
    switch((*(unsigned int (**)(MIL::MILContext *))(*(void *)a2 + 88))(a2))
    {
      case 4u:
        v11 = (const void *)MIL::IRTensorValue::GetDataView<MIL::Fp16>((uint64_t *)a3);
        uint64_t v12 = MIL::IRTensorValue::GetDataView<MIL::Fp16>((uint64_t *)a3);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16 const*,MIL::Fp16 const*>(&v37, v11, v12 + 2 * v13, (v12 + 2 * v13 - (uint64_t)v11) >> 1);
        MIL::IRTensorValueType::MakeFloat16Value();
      case 5u:
        Data = (const void *)MIL::IRTensorValue::GetDataView<float>((uint64_t *)a3);
        uint64_t v30 = MIL::IRTensorValue::GetDataView<float>((uint64_t *)a3);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(&v37, Data, v30 + 4 * v31, (v30 + 4 * v31 - (uint64_t)Data) >> 2);
        MIL::IRTensorValueType::MakeFloat32Value();
      case 9u:
        v14 = (const void *)MIL::IRTensorValue::GetDataView<signed char>((uint64_t *)a3);
        uint64_t v15 = MIL::IRTensorValue::GetDataView<signed char>((uint64_t *)a3);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(&v37, v14, v15 + v16, v15 + v16 - (void)v14);
        MIL::IRTensorValueType::MakeInt8Value();
      case 0xEu:
        v17 = (const void *)MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v18 = MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v37, v17, v18 + v19, v18 + v19 - (void)v17);
        MIL::IRTensorValueType::MakeUInt8Value();
      case 0x13u:
        v20 = (const void *)MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v21 = MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v37, v20, v21 + v22, v21 + v22 - (void)v20);
        MIL::IRTensorValueType::MakeUInt2Value();
      case 0x14u:
        v23 = (const void *)MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v24 = MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v37, v23, v24 + v25, v24 + v25 - (void)v23);
        MIL::IRTensorValueType::MakeUInt4Value();
      case 0x15u:
        v32 = (const void *)MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v33 = MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v37, v32, v33 + v34, v33 + v34 - (void)v32);
        MIL::IRTensorValueType::MakeUInt1Value();
      case 0x17u:
        v26 = (const void *)MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v27 = MIL::IRTensorValue::GetDataView<unsigned char>(a3);
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v37 = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v37, v26, v27 + v28, v27 + v28 - (void)v26);
        MIL::IRTensorValueType::MakeUInt6Value();
      default:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported type in CopyTensorValue.");
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
  }
  uint64_t v9 = (*(uint64_t (**)(const MIL::IRTensorValueType *))(*(void *)a3 + 88))(a3);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v37, v9);
  MIL::IRTensorValueType::MakeValueFromFileProperties((std::string::size_type)a2, this, &v37);
  *a4 = v36;
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v37);
}

void sub_20F34993C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
  return result;
}

void MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  *(void *)(a2 + 24) = 0;
  v3 = operator new(0x20uLL);
  void *v3 = &unk_26C250DD8;
  v4 = (std::string *)(v3 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a2 + 24) = v3;
    if (v5 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v3[3] = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a2 + 24) = v3;
  }
}

void sub_20F349AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  *(void *)(a2 + 24) = 0;
  v3 = operator new(0x20uLL);
  void *v3 = &unk_26C250EC8;
  v4 = (std::string *)(v3 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    int v5 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(void *)(a2 + 24) = v3;
    if (v5 < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v3[3] = *((void *)&__p.__r_.__value_.__l + 2);
    *(void *)(a2 + 24) = v3;
  }
}

void sub_20F349BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  operator delete(v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void *a1@<X8>)
{
  *a1 = &unk_26C250F48;
  a1[3] = a1;
}

void MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void *a1@<X8>)
{
  *a1 = &unk_26C251028;
  a1[3] = a1;
}

void MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void *a1@<X8>)
{
  *a1 = &unk_26C2510A8;
  a1[3] = a1;
}

void MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void *a1@<X8>)
{
  *a1 = &unk_26C251128;
  a1[3] = a1;
}

void MIL::Conversion::MakeIos18DecompositionSDPATransform(void *a1@<X8>)
{
  *a1 = &unk_26C2511A8;
  a1[3] = a1;
}

void __clang_call_terminate(void *a1)
{
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  int v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    int v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26412C1D8, MEMORY[0x263F8C060]);
}

void sub_20F349DA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>,0>(uint64_t a1)
{
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(uint64_t a1)
{
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_20F34A00C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F34A4DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F34A554(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      uint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

std::string *std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 4);
  this[1].__r_.__value_.__r.__words[0] = *((void *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

{
  long long v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  return this;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F34ABE0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<unsigned char>::__throw_length_error[abi:ne180100]()
{
}

void *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char const*,signed char const*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F34ACB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::Fp16>::__init_with_size[abi:ne180100]<MIL::Fp16 const*,MIL::Fp16 const*>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<MIL::Fp16>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F34AD34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MIL::Fp16>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float const*,float const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<float>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F34AE24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C250DD8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C250DD8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26C250DD8;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20F34AFF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C250DD8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, uint64_t **a2, void *a3)
{
  v42[2] = *MEMORY[0x263EF8340];
  MIL::Matching::MatchView::MatchView(&v30, a3);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  uint64_t Operator = MIL::Matching::MatchView::GetOperator(&v30);
  for (i = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(void *)Operator + 64))(Operator) + 16);
        i;
        i = (uint64_t *)*i)
  {
    uint64_t v7 = (int **)(i + 2);
    int v8 = *((char *)i + 39);
    if (v8 < 0)
    {
      if (i[3] != 7) {
        goto LABEL_11;
      }
      int v9 = *v7;
    }
    else
    {
      int v9 = (int *)(i + 2);
      if (v8 != 7) {
        goto LABEL_11;
      }
    }
    int v10 = *v9;
    int v11 = *(int *)((char *)v9 + 3);
    if (v10 != 1768189545 || v11 != 1936024425)
    {
LABEL_11:
      if (MIL::Matching::MatchView::GetArgumentCount(&v30, (const void **)i + 2))
      {
        unint64_t v13 = (int *)(i + 2);
        if (*((char *)i + 39) < 0) {
          unint64_t v13 = *v7;
        }
        MIL::Matching::MatchView::GetArgument(&v30, (uint64_t)(i + 2), (uint64_t *)v39);
        p_p = v13;
        MIL::Matching::ArgumentView::ArgumentView(v35, v39);
        std::string __p = p_p;
        MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)v37, (const MIL::Matching::ArgumentView *)v35);
        BOOL v14 = v32;
        if ((unint64_t)v32 >= v33)
        {
          uint64_t v15 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>(&v31, &__p);
        }
        else
        {
          void *v32 = __p;
          MIL::Transform::ArgumentDescription::ArgumentDescription(v14 + 1, v37);
          uint64_t v15 = (uint64_t)(v14 + 5);
        }
        uint64_t v32 = (void *)v15;
        MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)v37);
        MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v35);
        MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v39);
      }
    }
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription((uint64_t)&p_p, 1);
  std::string __p = "validate_indices";
  MIL::Transform::ArgumentDescription::ArgumentDescription(v37, &p_p);
  unint64_t v16 = v32;
  if ((unint64_t)v32 >= v33)
  {
    uint64_t v17 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>(&v31, &__p);
  }
  else
  {
    void *v32 = __p;
    MIL::Transform::ArgumentDescription::ArgumentDescription(v16 + 1, v37);
    uint64_t v17 = (uint64_t)(v16 + 5);
  }
  uint64_t v32 = (void *)v17;
  MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)v37);
  MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)&p_p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  MIL::Matching::MatchView::GetArgument(&v30, (uint64_t)&__p, v42);
  if (v38 < 0) {
    operator delete(__p);
  }
  uint64_t v18 = (uint64_t **)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v20 = *(void *)(a1 + 16);
    if (v20 == 6)
    {
      int v23 = *((unsigned __int16 *)*v18 + 2);
      BOOL v24 = *(_DWORD *)*v18 == 1752457575;
      int v25 = 29285;
      goto LABEL_42;
    }
    if (v20 != 17)
    {
LABEL_46:
      std::string::basic_string[abi:ne180100]<0>(&__p, "data");
      MIL::Matching::MatchView::GetArgument(&v30, (uint64_t)&__p, v41);
LABEL_47:
      if (v38 < 0) {
        operator delete(__p);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "axis");
      MIL::Matching::MatchView::GetArgument(&v30, (uint64_t)&__p, v40);
      if (v38 < 0) {
        operator delete(__p);
      }
      uint64_t Value = MIL::Matching::ArgumentView::TryGetValue((MIL::Matching::ArgumentView *)v40);
      uint64_t v29 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)Value + 40))(Value);
      MIL::IRValue::GetScalar<int>(v29);
      std::string __p = "x";
      MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)v37, (const MIL::Matching::ArgumentView *)v41);
      p_p = &__p;
      v35[0].n128_u64[0] = 1;
      MIL::Transform::MatchContext::AddOperation(a2, "ios17::shape", (uint64_t *)&p_p);
    }
    uint64_t v19 = *v18;
  }
  else
  {
    if (*(unsigned char *)(a1 + 31) == 6)
    {
      if (*(_DWORD *)v18 != 1752457575 || *(_WORD *)(a1 + 12) != 29285) {
        goto LABEL_46;
      }
      goto LABEL_40;
    }
    uint64_t v19 = (uint64_t *)(a1 + 8);
    if (*(unsigned char *)(a1 + 31) != 17) {
      goto LABEL_46;
    }
  }
  uint64_t v21 = *v19;
  uint64_t v22 = v19[1];
  int v23 = *((unsigned __int8 *)v19 + 16);
  BOOL v24 = v21 == 0x615F726568746167 && v22 == 0x6978615F676E6F6CLL;
  int v25 = 115;
LABEL_42:
  if (!v24 || v23 != v25) {
    goto LABEL_46;
  }
LABEL_40:
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  MIL::Matching::MatchView::GetArgument(&v30, (uint64_t)&__p, v41);
  goto LABEL_47;
}

void sub_20F34B8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, __int16 *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v45 - 104));
  a17 = &a12;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void anonymous namespace'::GetConstantIntTensor(uint64_t a1, const void **a2, MIL::IRConstantDimension *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (*((char *)a2 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  uint64_t v6 = v10;
  std::string::basic_string[abi:ne180100]((uint64_t)v10, v5 + 7);
  if (v11 < 0) {
    uint64_t v6 = (void **)v10[0];
  }
  if (v5)
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *a2;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "::const");
  v9[9] = 0;
  v9[10] = 0;
  int v8 = operator new(8uLL);
  v9[0] = v8;
  void *v8 = 1;
  v9[1] = v8 + 1;
  v9[2] = v8 + 1;
  MIL::IRTensorValueType::Make(a3, 11, (MIL::MILContext ***)v9);
}

void sub_20F34BE3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a17);
  std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::~pair(v29 - 112);
  if (a16) {
    (*(void (**)(uint64_t))(*(void *)a16 + 8))(a16);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>(uint64_t *a1, void *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x333333333333333) {
    unint64_t v9 = 0x666666666666666;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    int v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription>>>(v7, v9);
  }
  else {
    int v10 = 0;
  }
  char v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  uint64_t v15 = v11;
  unint64_t v16 = &v10[40 * v9];
  *(void *)char v11 = *a2;
  MIL::Transform::ArgumentDescription::ArgumentDescription(v11 + 8, a2 + 1);
  v15 += 40;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_20F34BFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription>>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<char const*,MIL::Transform::ArgumentDescription>>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>,std::reverse_iterator<std::pair<char const*,MIL::Transform::ArgumentDescription>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 48; ; i -= 40)
  {
    uint64_t v12 = a3 + i;
    if (a3 + i - 48 == a5) {
      break;
    }
    *(void *)(a7 + i - 88) = *(void *)(v12 - 88);
    unint64_t v13 = (MIL::Transform::ArgumentDescription *)(a7 + i - 80);
    MIL::Transform::ArgumentDescription::ArgumentDescription(v13, (const MIL::Transform::ArgumentDescription *)(v12 - 80));
  }
  return a6;
}

uint64_t std::__split_buffer<std::pair<char const*,MIL::Transform::ArgumentDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

char *std::vector<unsigned long long>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void *std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]<char const(&)[4],std::unique_ptr<MIL::IRTensorValue const>,0>(void *a1, char *a2, uint64_t *a3)
{
  uint64_t v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(v5 + 3, a3);
  return a1;
}

void sub_20F34C3A0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IRTensorValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTensorValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, a2, (long long *)a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_20F34C5A4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 40;
        MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(v4 - 32));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C250EC8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26C250EC8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x21056C700);
}

void *std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = &unk_26C250EC8;
  uint64_t v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_20F34C774(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C250EC8;
  uint64_t v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

void std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, void *a3)
{
  __n128 v35[2] = *MEMORY[0x263EF8340];
  MIL::Matching::MatchView::MatchView(&v24, a3);
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  unint64_t v27 = 0;
  uint64_t Operator = MIL::Matching::MatchView::GetOperator(&v24);
  for (uint64_t i = *(uint64_t **)((*(uint64_t (**)(uint64_t))(*(void *)Operator + 64))(Operator) + 16);
        i;
        uint64_t i = (uint64_t *)*i)
  {
    uint64_t v7 = (int **)(i + 2);
    int v8 = *((char *)i + 39);
    if (v8 < 0)
    {
      if (i[3] != 7) {
        goto LABEL_11;
      }
      unint64_t v9 = *v7;
    }
    else
    {
      unint64_t v9 = (int *)(i + 2);
      if (v8 != 7) {
        goto LABEL_11;
      }
    }
    int v10 = *v9;
    int v11 = *(int *)((char *)v9 + 3);
    if (v10 != 1768189545 || v11 != 1936024425)
    {
LABEL_11:
      if (MIL::Matching::MatchView::GetArgumentCount(&v24, (const void **)i + 2))
      {
        unint64_t v13 = (int *)(i + 2);
        if (*((char *)i + 39) < 0) {
          unint64_t v13 = *v7;
        }
        MIL::Matching::MatchView::GetArgument(&v24, (uint64_t)(i + 2), (uint64_t *)v33);
        uint64_t v28 = v13;
        MIL::Matching::ArgumentView::ArgumentView(v29, v33);
        std::string __p = v28;
        MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)v31, (const MIL::Matching::ArgumentView *)v29);
        BOOL v14 = v26;
        if ((unint64_t)v26 >= v27)
        {
          uint64_t v15 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>(&v25, &__p);
        }
        else
        {
          void *v26 = __p;
          MIL::Transform::ArgumentDescription::ArgumentDescription(v14 + 1, v31);
          uint64_t v15 = (uint64_t)(v14 + 5);
        }
        uint64_t v26 = (void *)v15;
        MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)v31);
        MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v29);
        MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)v33);
      }
    }
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription((uint64_t)&v28, 1);
  std::string __p = "validate_indices";
  MIL::Transform::ArgumentDescription::ArgumentDescription(v31, &v28);
  unint64_t v16 = v26;
  if ((unint64_t)v26 >= v27)
  {
    uint64_t v17 = std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__push_back_slow_path<std::pair<char const*,MIL::Transform::ArgumentDescription>>(&v25, &__p);
  }
  else
  {
    void *v26 = __p;
    MIL::Transform::ArgumentDescription::ArgumentDescription(v16 + 1, v31);
    uint64_t v17 = (uint64_t)(v16 + 5);
  }
  uint64_t v26 = (void *)v17;
  MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)v31);
  MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)&v28);
  std::string::basic_string[abi:ne180100]<0>(&__p, "indices");
  MIL::Matching::MatchView::GetArgument(&v24, (uint64_t)&__p, v35);
  if (v32 < 0) {
    operator delete(__p);
  }
  int v18 = *(char *)(a1 + 31);
  if (v18 < 0)
  {
    if (*(void *)(a1 + 16) != 9) {
      goto LABEL_33;
    }
    uint64_t v19 = *(uint64_t **)(a1 + 8);
  }
  else
  {
    uint64_t v19 = (uint64_t *)(a1 + 8);
    if (v18 != 9) {
      goto LABEL_33;
    }
  }
  uint64_t v20 = *v19;
  int v21 = *((unsigned __int8 *)v19 + 8);
  if (v20 == 0x6E5F726568746167 && v21 == 100)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "x");
    MIL::Matching::MatchView::GetArgument(&v24, (uint64_t)&__p, v34);
LABEL_34:
    if (v32 < 0) {
      operator delete(__p);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ios17");
    MILContext = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
  }
LABEL_33:
  std::string::basic_string[abi:ne180100]<0>(&__p, "data");
  MIL::Matching::MatchView::GetArgument(&v24, (uint64_t)&__p, v34);
  goto LABEL_34;
}

void sub_20F34D1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v61 - 248));
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)(v61 - 184));
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)(v61 - 152));
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v61 - 120));
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v61 - 104));
  a31 = &a16;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a31);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0,std::allocator<MIL::Conversion::MakeIos16ToIos17GatherScatterNdTransform(std::string const&)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

void *std::__function::__func<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C250F48;
  return result;
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C250F48;
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  MIL::Matching::MatchView::MatchView(v14, a3);
  memset(&v14[10], 0, 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "indices");
  MIL::Matching::MatchView::GetAttribute(v14, (unsigned __int8 *)__p, &v17);
  MIL::IRValue::AsTensor(v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "lut");
  MIL::Matching::MatchView::GetAttribute(v14, (unsigned __int8 *)__p, &v17);
  uint64_t v4 = MIL::IRValue::AsTensor(v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  MIL::Matching::MatchView::GetAttribute(v14, (unsigned __int8 *)__p, &v17);
  uint64_t v5 = (uint64_t *)MIL::IRValue::AsTensor(v17);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  if (v7 <= 15)
  {
    if (v7 == 2)
    {
      uint64_t v8 = 21;
    }
    else
    {
      if (v7 != 4) {
        goto LABEL_25;
      }
      uint64_t v8 = 19;
    }
  }
  else
  {
    switch(v7)
    {
      case 16:
        uint64_t v8 = 20;
        break;
      case 64:
        uint64_t v8 = 23;
        break;
      case 256:
        uint64_t v8 = 14;
        break;
      default:
LABEL_25:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Invalid lut size.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
  }
  MILContext = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
  Data = (unsigned int *)MIL::IRTensorValue::GetDataView<unsigned int>(v5);
  uint64_t v11 = MIL::IRTensorValue::GetDataView<unsigned int>(v5);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)__p, Data, (unsigned int *)(v11 + 4 * v12), (v11 + 4 * v12 - (uint64_t)Data) >> 2);
  MIL::IRTensorValueType::Make(MILContext, v8, (MIL::MILContext ***)__p);
}

void sub_20F34DDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  a23 = &a20;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18LutToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

char *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(char *result, unsigned int *a2, unsigned int *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      unsigned int v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20F34DFF8(_Unwind_Exception *exception_object)
{
  long long v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MIL::IRValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IRValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[8],std::shared_ptr<MIL::IRValue const> &,0>(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  unsigned int v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription(v4, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_20F34E120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[4],std::shared_ptr<MIL::IRValue const> &,0>(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  unsigned int v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription(v4, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_20F34E194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

void *std::__function::__func<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C251028;
  return result;
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C251028;
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  MIL::Matching::MatchView::MatchView(v9, a3);
  memset(&v9[10], 0, 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "mask");
  MIL::Matching::MatchView::GetAttribute(v9, (unsigned __int8 *)__p, &v12);
  MIL::IRValue::AsTensor(v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "shape");
  MIL::Matching::MatchView::GetAttribute(v9, (unsigned __int8 *)__p, &v12);
  uint64_t v4 = (uint64_t *)MIL::IRValue::AsTensor(v12);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  MILContext = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
  Data = (unsigned int *)MIL::IRTensorValue::GetDataView<unsigned int>(v4);
  uint64_t v7 = MIL::IRTensorValue::GetDataView<unsigned int>(v4);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((char *)__p, Data, (unsigned int *)(v7 + 4 * v8), (v7 + 4 * v8 - (uint64_t)Data) >> 2);
  MIL::IRTensorValueType::Make(MILContext, 21, (MIL::MILContext ***)__p);
}

void sub_20F34E4C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  a25 = &a22;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a25);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18SparseToDenseTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[5],std::shared_ptr<MIL::IRValue const> &,0>(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = a1 + 1;
  uint64_t v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  uint64_t v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription(v4, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_20F34E6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[13],std::shared_ptr<MIL::IRValue const>,0>(void *a1, uint64_t a2, long long *a3)
{
  *a1 = a2;
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  MIL::Transform::ArgumentDescription::ArgumentDescription(a1 + 1, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  return a1;
}

void sub_20F34E728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

void *std::__function::__func<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C2510A8;
  return result;
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C2510A8;
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, uint64_t **a2, void *a3)
{
  v11[9] = *MEMORY[0x263EF8340];
  MIL::Matching::MatchView::MatchView(&v4, a3);
  std::string::basic_string[abi:ne180100]<0>(v7, "source_val");
  MIL::Matching::MatchView::GetAttribute(&v4, v7, &v8);
  std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[11],std::shared_ptr<MIL::IRValue const>,0>(v10, (uint64_t)"source_val", &v8);
  std::string::basic_string[abi:ne180100]<0>(__p, "output_dtype");
  MIL::Matching::MatchView::GetAttribute(&v4, __p, &v6);
  std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[13],std::shared_ptr<MIL::IRValue const>,0>(v11, (uint64_t)"output_dtype", &v6);
  v9[0] = (uint64_t)v10;
  v9[1] = 2;
  MIL::Transform::MatchContext::AddOperation(a2, "ios18::constexpr_cast", v9);
}

void sub_20F34E91C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,char a28)
{
  for (uint64_t i = 48; i != -32; i -= 40)
    MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)(v28 + i));
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a9);
  _Unwind_Resume(a1);
}

void sub_20F34EA00()
{
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ConstCastTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[11],std::shared_ptr<MIL::IRValue const>,0>(void *a1, uint64_t a2, long long *a3)
{
  *a1 = a2;
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  MIL::Transform::ArgumentDescription::ArgumentDescription(a1 + 1, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  return a1;
}

void sub_20F34EAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

void *std::__function::__func<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C251128;
  return result;
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C251128;
}

void std::__function::__func<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, MIL::Transform::MatchContext *a2, void *a3)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  MIL::Matching::MatchView::MatchView(&v36, a3);
  memset(&v39[1], 0, 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "zero_point");
  MIL::Matching::MatchView::GetAttribute(&v36, (unsigned __int8 *)__p, &v42);
  MIL::IRValue::AsTensor(v42);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  MIL::Matching::MatchView::GetAttribute(&v36, (unsigned __int8 *)__p, &v42);
  uint64_t v4 = MIL::IRValue::AsTensor(v42);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "axis");
  MIL::Matching::MatchView::GetAttribute(&v36, (unsigned __int8 *)__p, &v42);
  long long v5 = (uint64_t *)MIL::IRValue::AsTensor(v42);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "quantized_data");
  MIL::Matching::MatchView::GetAttribute(&v36, (unsigned __int8 *)__p, &v42);
  uint64_t v6 = MIL::IRValue::AsTensor(v42);
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  if (v41 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(int *)MIL::IRTensorValue::GetDataView<int>(v5);
  long long v8 = (MIL::IRTensorValueType *)(*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
  uint64_t v9 = MIL::IRTensorValueType::Rank(v8);
  uint64_t v37 = 0;
  char v38 = 0;
  v39[0] = 0;
  if (v9 < 1)
  {
LABEL_54:
    MILContext = (MIL::IRConstantDimension *)MIL::Transform::MatchContext::GetMILContext(a2);
    uint64_t v34 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 88))(v34);
    MIL::IRTensorValueType::Make(MILContext, v35, (MIL::MILContext ***)&v37);
  }
  int v10 = 0;
  uint64_t v11 = 0;
  while (1)
  {
    uint64_t v12 = v10;
    if (v11 == v7)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
      if ((unint64_t)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 16))(v13) > 1)
      {
        uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 32))(v6);
        uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 96))(v14);
        uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(*v15 + 8 * v7) + 16))(*(void *)(*v15 + 8 * v7));
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
        uint64_t v18 = v17;
        uint64_t v19 = v38;
        if ((unint64_t)v38 >= v39[0])
        {
          int v21 = (char *)v37;
          uint64_t v29 = ((char *)v38 - (unsigned char *)v37) >> 3;
          unint64_t v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v31 = v39[0] - (void)v37;
          if ((uint64_t)(v39[0] - (void)v37) >> 2 > v30) {
            unint64_t v30 = v31 >> 2;
          }
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v30;
          }
          if (v25)
          {
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v39, v25);
            int v21 = (char *)v37;
            uint64_t v19 = v38;
          }
          else
          {
            uint64_t v26 = 0;
          }
          unint64_t v27 = &v26[8 * v29];
          *(void *)unint64_t v27 = v18;
          int v10 = v27 + 8;
          while (v19 != (uint64_t *)v21)
          {
            uint64_t v32 = *--v19;
            *((void *)v27 - 1) = v32;
            v27 -= 8;
          }
LABEL_51:
          uint64_t v37 = v27;
          char v38 = (uint64_t *)v10;
          v39[0] = &v26[8 * v25];
          if (v21) {
            operator delete(v21);
          }
          goto LABEL_53;
        }
        *char v38 = v17;
        uint64_t v20 = (char *)(v19 + 1);
        goto LABEL_26;
      }
      uint64_t v12 = (char *)v38;
    }
    if ((unint64_t)v12 >= v39[0])
    {
      int v21 = (char *)v37;
      uint64_t v22 = (v12 - (unsigned char *)v37) >> 3;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 61) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v39[0] - (void)v37;
      if ((uint64_t)(v39[0] - (void)v37) >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v39, v25);
        int v21 = (char *)v37;
        uint64_t v12 = (char *)v38;
      }
      else
      {
        uint64_t v26 = 0;
      }
      unint64_t v27 = &v26[8 * v22];
      *(void *)unint64_t v27 = 1;
      int v10 = v27 + 8;
      while (v12 != v21)
      {
        uint64_t v28 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v27 - 1) = v28;
        v27 -= 8;
      }
      goto LABEL_51;
    }
    *(void *)uint64_t v12 = 1;
    uint64_t v20 = v12 + 8;
LABEL_26:
    int v10 = v20;
LABEL_53:
    char v38 = (uint64_t *)v10;
    if (++v11 == v9) {
      goto LABEL_54;
    }
  }
}

void sub_20F34F24C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,char *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  (*(void (**)(uint64_t))(*(void *)v38 + 8))(v38);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  if (__p)
  {
    a28 = (uint64_t)__p;
    operator delete(__p);
  }
  a33 = &a30;
  std::vector<std::pair<char const*,MIL::Transform::ArgumentDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a12);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos17ToIos18ShiftScaleTransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[5],std::shared_ptr<MIL::IRValue const>,0>(void *a1, uint64_t a2, long long *a3)
{
  *a1 = a2;
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  MIL::Transform::ArgumentDescription::ArgumentDescription(a1 + 1, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  return a1;
}

void sub_20F34F4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[6],std::shared_ptr<MIL::IRValue const> &,0>(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = a1 + 1;
  long long v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  long long v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription(v4, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_20F34F524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::pair<char const*,MIL::Transform::ArgumentDescription>::pair[abi:ne180100]<char const(&)[7],std::shared_ptr<MIL::IRValue const> &,0>(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = a2;
  uint64_t v4 = a1 + 1;
  long long v5 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  long long v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Transform::ArgumentDescription::ArgumentDescription(v4, &v7);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return a1;
}

void sub_20F34F598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::~__func()
{
}

void *std::__function::__func<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  void *result = &unk_26C2511A8;
  return result;
}

void std::__function::__func<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26C2511A8;
}

void std::__function::__func<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::operator()(uint64_t a1, uint64_t **a2, void *a3)
{
  v17[16] = *MEMORY[0x263EF8340];
  MIL::Matching::MatchView::MatchView(&v5, a3);
  uint64_t Attributes = MIL::Matching::MatchView::GetAttributes(&v5);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v6, Attributes);
  std::string::basic_string[abi:ne180100]<0>(&__p, "query");
  MIL::Matching::MatchView::GetArgument(&v5, (uint64_t)&__p, v17);
  if (v10 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "key");
  MIL::Matching::MatchView::GetArgument(&v5, (uint64_t)&__p, v16);
  if (v10 < 0) {
    operator delete(__p);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  MIL::Matching::MatchView::GetArgument(&v5, (uint64_t)&__p, &v15);
  if (v10 < 0) {
    operator delete(__p);
  }
  std::string __p = "x";
  MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)&v9, (const MIL::Matching::ArgumentView *)v17);
  uint64_t v11 = "y";
  MIL::Transform::ArgumentDescription::ArgumentDescription((MIL::Transform::ArgumentDescription *)v12, (const MIL::Matching::ArgumentView *)v16);
  v12[4] = "transpose_x";
  MIL::Transform::ArgumentDescription::ArgumentDescription((uint64_t)v13, 0);
  v13[4] = "transpose_y";
  MIL::Transform::ArgumentDescription::ArgumentDescription((uint64_t)&v14, 1);
  v7[0] = &__p;
  v7[1] = (void *)4;
  MIL::Transform::MatchContext::AddOperation(a2, "ios18::matmul", (uint64_t *)v7);
}

void sub_20F3506B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)&__p);
  for (uint64_t i = 48; i != -32; i -= 40)
    MIL::Transform::ArgumentDescription::~ArgumentDescription((MIL::Transform::ArgumentDescription *)((char *)&a49 + i));
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)(v69 - 160));
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v69 - 208));
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)(v69 - 128));
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)&a45);
  MIL::Transform::NewOperationOutput::~NewOperationOutput((MIL::Transform::NewOperationOutput *)&a69);
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v69 - 256));
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v69 - 240));
  MIL::Matching::ArgumentView::~ArgumentView((MIL::Matching::ArgumentView *)(v69 - 224));
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a14);
  MIL::Matching::MatchView::~MatchView((MIL::Matching::MatchView *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0,std::allocator<MIL::Conversion::MakeIos18DecompositionSDPATransform(void)::$_0>,void ()(MIL::Transform::MatchContext &,MIL::Matching::MatchView)>::target_type()
{
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map<std::__hash_map_const_iterator<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *> *>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    long long v5 = (unsigned __int8 *)a2;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>> const&>(a1, v5 + 16, (long long *)v5 + 1);
      long long v5 = *(unsigned __int8 **)v5;
    }
    while (v5 != (unsigned __int8 *)a3);
  }
  return a1;
}

void sub_20F350E88(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F351108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F351180(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *MIL::Passes::FlattenBlockNamespace::FlattenBlockNamespace(MIL::Passes::FlattenBlockNamespace *this)
{
  uint64_t result = MIL::Pass::Pass(this);
  void *result = &unk_26C251228;
  return result;
}

{
  void *result;

  uint64_t result = MIL::Pass::Pass(this);
  void *result = &unk_26C251228;
  return result;
}

void MIL::Passes::FlattenBlockNamespace::~FlattenBlockNamespace(MIL::Passes::FlattenBlockNamespace *this)
{
  MIL::Pass::~Pass(this);

  JUMPOUT(0x21056C700);
}

void MIL::Passes::FlattenBlockNamespace::Make(MIL::Passes::FlattenBlockNamespace *this)
{
}

void sub_20F3512FC(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x81C40B8603338);
  _Unwind_Resume(a1);
}

uint64_t MIL::Passes::FlattenBlockNamespace::Run(MIL::Passes::FlattenBlockNamespace *this, const MIL::IRBlock *a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  memset(v8, 0, sizeof(v8));
  int v9 = 1065353216;
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  long long v5 = v8;
  unint64_t v3 = operator new(0x20uLL);
  void *v3 = &unk_26C2512B8;
  v3[1] = v10;
  v3[2] = v6;
  v3[3] = &v5;
  v10[3] = v3;
  std::__function::__func<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1,std::allocator<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1>,std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::operator()(v3, (uint64_t)a2);
  std::__function::__value_func<std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::~__value_func[abi:ne180100](v10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v6);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v8);
}

void sub_20F35140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  std::__function::__value_func<std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::~__value_func[abi:ne180100]((void *)(v3 - 72));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t **anonymous namespace'::FindRedefinedValues(void *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = *(unsigned __int8 **)((*(uint64_t (**)(void))(a1[8] + 32))() + 16); i; uint64_t i = *(unsigned __int8 **)i)
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, i + 16, (uint64_t)(i + 16));
    if ((v7 & 1) == 0) {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a3, i + 16, (uint64_t)(i + 16));
    }
  }
  uint64_t result = (uint64_t **)(*(uint64_t (**)(void *))(*a1 + 56))(a1);
  uint64_t v9 = **result;
  uint64_t v10 = (*result)[1];
  while (v9 != v10)
  {
    uint64_t result = (uint64_t **)(*(uint64_t (**)(void))(**(void **)v9 + 208))();
    uint64_t v11 = (uint64_t *)**result;
    unint64_t v12 = (uint64_t *)(*result)[1];
    while (v11 != v12)
    {
      uint64_t v13 = *v11;
      v11 += 2;
    }
    v9 += 16;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20F3517B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__construct_node_hash<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x28uLL);
  *(void *)(a4 + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v9->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F351864(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(int a1, void **__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x21056C700);
}

void std::__function::__func<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1,std::allocator<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1>,std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::~__func()
{
}

__n128 std::__function::__func<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1,std::allocator<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1>,std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C2512B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1,std::allocator<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1>,std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C2512B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1,std::allocator<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1>,std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::operator()(void *a1, uint64_t a2)
{
  v57[2] = *MEMORY[0x263EF8340];
  uint64_t v52 = 0;
  v53 = 0;
  unint64_t v54 = 0;
  uint64_t v3 = (uint64_t ***)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
  uint64_t v4 = **v3;
  for (uint64_t i = (*v3)[1]; v4 != i; v4 += 2)
  {
    uint64_t v5 = *v4;
    memset(&v56, 0, sizeof(v56));
    uint64_t v6 = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 208))(v5);
    uint64_t v8 = **v6;
    uint64_t v7 = (*v6)[1];
    while (v8 != v7)
    {
      uint64_t v9 = *(void *)(a1[1] + 24);
      if (!v9) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v9 + 48))(&v55);
      if (v55.__r_.__value_.__r.__words[0]) {
        operator new();
      }
      v55.__r_.__value_.__r.__words[0] = 0;
      std::string::size_type size = v56.__r_.__value_.__l.__size_;
      if (v56.__r_.__value_.__l.__size_ >= v56.__r_.__value_.__r.__words[2])
      {
        uint64_t v12 = (uint64_t)(v56.__r_.__value_.__l.__size_ - v56.__r_.__value_.__r.__words[0]) >> 4;
        unint64_t v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        int64_t v14 = v56.__r_.__value_.__r.__words[2] - v56.__r_.__value_.__r.__words[0];
        if ((uint64_t)(v56.__r_.__value_.__r.__words[2] - v56.__r_.__value_.__r.__words[0]) >> 3 > v13) {
          unint64_t v13 = v14 >> 3;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v15 = v13;
        }
        *((void *)&v48 + 1) = (char *)&v56.__r_.__value_.__l + 16;
        float v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v56.__r_.__value_.__r.__words[2], v15);
        float v17 = &v16[16 * v12];
        v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        v47.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
        *(void *)&long long v48 = &v16[16 * v18];
        *(void *)float v17 = 0;
        *((void *)v17 + 1) = 0;
        v47.__r_.__value_.__r.__words[2] = (std::string::size_type)(v17 + 16);
        std::vector<std::shared_ptr<MIL::IRBlock>>::__swap_out_circular_buffer((uint64_t *)&v56, &v47);
        std::string::size_type v11 = v56.__r_.__value_.__l.__size_;
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&v47.__r_.__value_.__l.__data_);
      }
      else
      {
        *(void *)v56.__r_.__value_.__l.__size_ = 0;
        *(void *)(size + 8) = 0;
        std::string::size_type v11 = size + 16;
      }
      v56.__r_.__value_.__l.__size_ = v11;
      std::string::size_type v19 = v55.__r_.__value_.__r.__words[0];
      v55.__r_.__value_.__r.__words[0] = 0;
      if (v19) {
        (*(void (**)(std::string::size_type))(*(void *)v19 + 8))(v19);
      }
      v8 += 16;
    }
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v5 + 40))(&v55, v5, &v56);
    if (v55.__r_.__value_.__r.__words[0]) {
      operator new();
    }
    v55.__r_.__value_.__r.__words[0] = 0;
    unint64_t v20 = v53;
    if ((unint64_t)v53 >= v54)
    {
      uint64_t v22 = ((uint64_t)v53 - v52) >> 4;
      unint64_t v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 60) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v24 = v54 - v52;
      if ((uint64_t)(v54 - v52) >> 3 > v23) {
        unint64_t v23 = v24 >> 3;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      *((void *)&v48 + 1) = &v54;
      uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v54, v25);
      unint64_t v27 = &v26[16 * v22];
      v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
      v47.__r_.__value_.__l.__size_ = (std::string::size_type)v27;
      *(void *)&long long v48 = &v26[16 * v28];
      *(void *)unint64_t v27 = 0;
      *((void *)v27 + 1) = 0;
      v47.__r_.__value_.__r.__words[2] = (std::string::size_type)(v27 + 16);
      std::vector<std::shared_ptr<MIL::IROperation>>::__swap_out_circular_buffer(&v52, &v47);
      size_t v21 = v53;
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)&v47.__r_.__value_.__l.__data_);
    }
    else
    {
      void *v53 = 0;
      v20[1] = 0;
      size_t v21 = v20 + 2;
    }
    v53 = v21;
    std::string::size_type v29 = v55.__r_.__value_.__r.__words[0];
    v55.__r_.__value_.__r.__words[0] = 0;
    if (v29) {
      (*(void (**)(std::string::size_type))(*(void *)v29 + 8))(v29);
    }
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  }
  (*(void (**)(void **__return_ptr))(*(void *)a2 + 112))(&v51);
  memset(&v50, 0, sizeof(v50));
  for (j = *(uint64_t **)(a1[2] + 16); j; j = (uint64_t *)*j)
  {
    uint64_t v31 = (void *)(*(uint64_t (**)(void))(v51[8] + 32))();
    if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v31, (unsigned __int8 *)j + 16))
    {
      uint64_t v32 = (uint64_t *)a1[3];
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)j + 2, 95, (uint64_t)&v56);
      std::to_string(&v55, 0);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v33 = &v55;
      }
      else {
        unint64_t v33 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = v55.__r_.__value_.__l.__size_;
      }
      uint64_t v35 = std::string::append(&v56, (const std::string::value_type *)v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      __p[2] = (void *)v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v55.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v56.__r_.__value_.__l.__data_);
      }
      if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)*v32, (unsigned __int8 *)__p))
      {
        unsigned int v37 = 1;
        do
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)j + 2, 95, (uint64_t)&v56);
          std::to_string(&v55, v37);
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v38 = &v55;
          }
          else {
            uint64_t v38 = (std::string *)v55.__r_.__value_.__r.__words[0];
          }
          if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v39 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v39 = v55.__r_.__value_.__l.__size_;
          }
          unint64_t v40 = std::string::append(&v56, (const std::string::value_type *)v38, v39);
          char v41 = (void *)v40->__r_.__value_.__r.__words[0];
          v57[0] = v40->__r_.__value_.__l.__size_;
          *(void *)((char *)v57 + 7) = *(std::string::size_type *)((char *)&v40->__r_.__value_.__r.__words[1] + 7);
          char v42 = HIBYTE(v40->__r_.__value_.__r.__words[2]);
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          __p[0] = v41;
          __p[1] = (void *)v57[0];
          *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v57 + 7);
          HIBYTE(__p[2]) = v42;
          if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v55.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v56.__r_.__value_.__l.__data_);
          }
          ++v37;
        }
        while (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)*v32, (unsigned __int8 *)__p));
      }
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(*v32, (unsigned __int8 *)__p, (uint64_t)__p);
      if (*((char *)j + 39) < 0) {
        std::string::__init_copy_ctor_external(&v47, (const std::string::value_type *)j[2], j[3]);
      }
      else {
        std::string v47 = *(std::string *)(j + 2);
      }
      long long v48 = *(_OWORD *)__p;
      v49 = __p[2];
      memset(__p, 0, 24);
      std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](&v50, (long long *)&v47);
      if (SHIBYTE(v49) < 0) {
        operator delete((void *)v48);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
    }
  }
  (*(void (**)(void *, std::vector<std::pair<std::string, std::string>> *))(*v51 + 120))(v51, &v50);
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  v43 = v51;
  v51 = 0;
  if (v43) {
    (*(void (**)(void *))(*v43 + 8))(v43);
  }
  v47.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
}

void sub_20F352170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  a20 = &a32;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  uint64_t v45 = a35;
  a35 = 0;
  if (v45) {
    (*(void (**)(uint64_t))(*(void *)v45 + 8))(v45);
  }
  a39 = &a36;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1,std::allocator<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1>,std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1,std::allocator<MIL::Passes::FlattenBlockNamespace::Run(MIL::IRBlock const&)::$_1>,std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::target_type()
{
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  uint64_t v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      unint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    float v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_20F3524D0(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t std::vector<std::shared_ptr<MIL::IRBlock>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__shared_ptr_pointer<MIL::IRBlock  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IRBlock  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRBlock  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t std::vector<std::shared_ptr<MIL::IROperation>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IROperation>>,std::reverse_iterator<std::shared_ptr<MIL::IROperation>*>,std::reverse_iterator<std::shared_ptr<MIL::IROperation>*>,std::reverse_iterator<std::shared_ptr<MIL::IROperation>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IROperation>>,std::reverse_iterator<std::shared_ptr<MIL::IROperation>*>,std::reverse_iterator<std::shared_ptr<MIL::IROperation>*>,std::reverse_iterator<std::shared_ptr<MIL::IROperation>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IROperation>>,std::reverse_iterator<std::shared_ptr<MIL::IROperation>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IROperation>>,std::reverse_iterator<std::shared_ptr<MIL::IROperation>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IROperation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<MIL::IRBlock>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<MIL::IRBlock>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v6 == v13)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(48 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v5 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v7 = (char *)result;
  }
  else {
    uint64_t v7 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      unint64_t v8 = a1;
    }
    else {
      unint64_t v8 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v7, v8, v5);
  }
  uint64_t v9 = &v7[v5];
  *uint64_t v9 = a2;
  v9[1] = 0;
  return result;
}

void std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    size_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__function::__value_func<std::unique_ptr<MIL::IRBlock> ()(MIL::IRBlock const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *MIL::Pass::Pass(void *this)
{
  *this = &unk_26C251408;
  return this;
}

{
  *this = &unk_26C251408;
  return this;
}

void MIL::Pass::~Pass(MIL::Pass *this)
{
}

uint64_t MIL::Pass::Run(MIL::Pass *this, const MIL::IRProgram *a2)
{
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  for (uint64_t i = *(uint64_t **)((*(uint64_t (**)(const MIL::IRProgram *))(*(void *)a2 + 72))(a2) + 16);
        i;
        uint64_t i = (uint64_t *)*i)
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)i[5] + 48))(i[5]);
    (*(void (**)(uint64_t *__return_ptr, MIL::Pass *, uint64_t))(*(void *)this + 24))(&v11, this, v5);
    (*(void (**)(uint64_t *__return_ptr))(*(void *)i[5] + 192))(&v10);
    char v14 = (long long *)(i + 2);
    unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v12, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v14);
    std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((void *)v6 + 5, &v10);
    uint64_t v7 = v10;
    uint64_t v10 = 0;
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    }
    uint64_t v8 = v11;
    uint64_t v11 = 0;
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
  }
  (*(void (**)(const MIL::IRProgram *, _OWORD *))(*(void *)a2 + 88))(a2, v12);
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v12);
}

void sub_20F353230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::IRFunction>::operator=[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRFunction>::shared_ptr[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void MIL::Pass::Run(MIL::Pass *this, const MIL::IRBlock *a2)
{
  uint64_t v18 = 0;
  std::string::size_type v19 = 0;
  unint64_t v20 = 0;
  uint64_t v4 = (*(uint64_t (**)(const MIL::IRBlock *))(*(void *)a2 + 56))(a2);
  std::vector<std::shared_ptr<MIL::IROperation>>::reserve(&v18, (uint64_t)(*(void *)(*(void *)v4 + 8) - **(void **)v4) >> 4);
  uint64_t v5 = (void **)(*(uint64_t (**)(const MIL::IRBlock *))(*(void *)a2 + 56))(a2);
  long long v6 = (void *)**v5;
  for (uint64_t i = (void *)(*v5)[1]; v6 != i; v6 += 2)
  {
    (*(void (**)(uint64_t *__return_ptr, MIL::Pass *, void))(*(void *)this + 32))(&v22, this, *v6);
    if (v22) {
      operator new();
    }
    uint64_t v22 = 0;
    uint64_t v8 = v19;
    if ((unint64_t)v19 >= v20)
    {
      uint64_t v10 = ((uint64_t)v19 - v18) >> 4;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 60) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v20 - v18;
      if ((uint64_t)(v20 - v18) >> 3 > v11) {
        unint64_t v11 = v12 >> 3;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      v21[4] = &v20;
      char v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v20, v13);
      long long v15 = &v14[16 * v10];
      v21[0] = v14;
      v21[1] = v15;
      v21[3] = &v14[16 * v16];
      *(void *)long long v15 = 0;
      *((void *)v15 + 1) = 0;
      v21[2] = v15 + 16;
      std::vector<std::shared_ptr<MIL::IROperation>>::__swap_out_circular_buffer(&v18, v21);
      uint64_t v9 = v19;
      std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v21);
    }
    else
    {
      *std::string::size_type v19 = 0;
      v8[1] = 0;
      uint64_t v9 = v8 + 2;
    }
    std::string::size_type v19 = v9;
    uint64_t v17 = v22;
    uint64_t v22 = 0;
    if (v17) {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
    }
  }
  (*(void (**)(const MIL::IRBlock *, uint64_t *))(*(void *)a2 + 112))(a2, &v18);
  v21[0] = &v18;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
}

void sub_20F353560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<MIL::IROperation>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<MIL::IROperation>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v7);
  }
  return result;
}

void sub_20F353664(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::Pass::Run(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    char v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F353924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3539C4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<MIL::IRFunction>::shared_ptr[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IRFunction  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRFunction  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void PassManagerImpl::~PassManagerImpl(PassManagerImpl *this)
{
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x21056C700](this, 0xA1C4030951706);
}

void *MIL::PassManager::PassManager(void *this)
{
  *this = &unk_26C2514B0;
  return this;
}

void MIL::PassManager::Make(MIL::PassManager *this)
{
}

void **PassManagerImpl::RegisterPass(uint64_t a1, uint64_t *a2)
{
  unint64_t v6 = *(void *)(a1 + 24);
  uint64_t result = (void **)(a1 + 24);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v10 = (uint64_t *)(result - 2);
    uint64_t v11 = (uint64_t)*(result - 2);
    uint64_t v12 = ((uint64_t)v7 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = v5 - v11;
    uint64_t v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    v19[4] = result;
    if (v15) {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)result, v15);
    }
    else {
      unint64_t v16 = 0;
    }
    float v17 = &v16[8 * v12];
    v19[0] = v16;
    v19[1] = v17;
    v19[3] = &v16[8 * v15];
    uint64_t v18 = *a2;
    *a2 = 0;
    *(void *)float v17 = v18;
    v19[2] = v17 + 8;
    std::vector<std::unique_ptr<MIL::Pass>>::__swap_out_circular_buffer(v10, v19);
    unint64_t v9 = *(void **)(a1 + 16);
    uint64_t result = std::__split_buffer<std::unique_ptr<MIL::Pass>>::~__split_buffer(v19);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *uint64_t v7 = v8;
    unint64_t v9 = v7 + 1;
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 16) = v9;
  return result;
}

void sub_20F353D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<MIL::Pass>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t PassManagerImpl::RunPasses@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 32))(a2);
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  while (v7 != v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)v7 + 16))(&v9);
    uint64_t v8 = v9;
    uint64_t v9 = 0;
    uint64_t result = *a3;
    *a3 = v8;
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 8))(result);
      uint64_t result = v9;
      uint64_t v9 = 0;
      if (result) {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
      }
    }
    v7 += 8;
  }
  return result;
}

void sub_20F353E7C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MIL::Pass::Run(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::unique_ptr<MIL::Pass>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<MIL::Pass>>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<MIL::Pass>>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = (void *)(a7 - 8);
    uint64_t v9 = (void *)(a7 - 8);
    do
    {
      uint64_t v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((void *)&v16 + 1) = v8;
      v7 -= 8;
      uint64_t v8 = v9;
    }
    while (a3 != a5);
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MIL::Pass>>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MIL::Pass>>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MIL::Pass>>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>>::operator()[abi:ne180100]((void *)a1);
  }
  return a1;
}

void *std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<MIL::Pass>>,std::reverse_iterator<std::unique_ptr<MIL::Pass>*>>::operator()[abi:ne180100](void *result)
{
  uint64_t v1 = *(void ***)(result[2] + 8);
  uint64_t v2 = *(void ***)(result[1] + 8);
  while (v1 != v2)
  {
    uint64_t result = *v1;
    uint64_t *v1 = 0;
    if (result) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
    ++v1;
  }
  return result;
}

void **std::__split_buffer<std::unique_ptr<MIL::Pass>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void *std::__split_buffer<std::unique_ptr<MIL::Pass>>::__destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v2 = result[2];
  if (v2 != a2)
  {
    unint64_t v4 = result;
    do
    {
      v4[2] = v2 - 8;
      uint64_t result = *(void **)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
      }
      uint64_t v2 = v4[2];
    }
    while (v2 != a2);
  }
  return result;
}

void std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<MIL::Pass>>::__clear[abi:ne180100](v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<MIL::Pass>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  uint64_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    unint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

uint64_t *std::unique_ptr<PassManagerImpl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  void *result = a2;
  if (v2)
  {
    uint64_t v3 = (void **)(v2 + 8);
    std::vector<std::unique_ptr<MIL::Pass>>::__destroy_vector::operator()[abi:ne180100](&v3);
    return (uint64_t *)MEMORY[0x21056C700](v2, 0xA1C4030951706);
  }
  return result;
}

std::runtime_error *MIL::MILError::MILError(std::runtime_error *a1, const std::string *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C251538;
  return result;
}

void *MIL::MILError::GetMessage@<X0>(MIL::MILError *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(MIL::MILError *))(*(void *)this + 16))(this);

  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

__n128 MIL::MILErrorWithLocation::MILErrorWithLocation(std::runtime_error *a1, __n128 *a2, std::string *a3)
{
  unint64_t v4 = std::runtime_error::runtime_error(a1, a3);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  __n128 result = *a2;
  v4[1] = *(std::runtime_error *)a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

{
  std::runtime_error *v4;
  __n128 result;

  unint64_t v4 = std::runtime_error::runtime_error(a1, a3);
  v4->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  __n128 result = *a2;
  v4[1] = *(std::runtime_error *)a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void MIL::MILErrorWithLocation::GetMessageWithLocation(MIL::MILErrorWithLocation *this@<X0>, std::string *a2@<X8>)
{
  (*(void (**)(std::string *__return_ptr))(**((void **)this + 2) + 24))(&v11);
  unint64_t v4 = std::string::append(&v11, ": ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, MIL::MILErrorWithLocation *))(*(void *)this + 24))(__p, this);
  if ((v10 & 0x80u) == 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  if ((v10 & 0x80u) == 0) {
    std::string::size_type v7 = v10;
  }
  else {
    std::string::size_type v7 = (std::string::size_type)__p[1];
  }
  uint64_t v8 = std::string::append(&v12, (const std::string::value_type *)v6, v7);
  *a2 = *v8;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if ((char)v10 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_20F35445C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::MILErrorWithLocation::GetLocation(MIL::MILErrorWithLocation *this)
{
  return *((void *)this + 2);
}

uint64_t MIL::MILErrorWithLocation::GetLocationSharedPtr(MIL::MILErrorWithLocation *this)
{
  return (uint64_t)this + 16;
}

std::runtime_error *MIL::OutOfRangeError::OutOfRangeError(std::runtime_error *a1, std::runtime_error_vtbl **a2, std::string *a3)
{
  unint64_t v4 = *a2;
  uint64_t v3 = (const char *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  __n128 result = std::runtime_error::runtime_error(a1, a3);
  result[1].__vftable = v4;
  result[1].__imp_.__imp_ = v3;
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C2515C8;
  return result;
}

void sub_20F354504(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::OutOfRangeError::GetMessage@<X0>(MIL::OutOfRangeError *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(MIL::OutOfRangeError *))(*(void *)this + 16))(this);

  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

std::runtime_error *MIL::InvalidArgumentError::InvalidArgumentError(std::runtime_error *a1, std::runtime_error_vtbl **a2, std::string *a3)
{
  unint64_t v4 = *a2;
  uint64_t v3 = (const char *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  __n128 result = std::runtime_error::runtime_error(a1, a3);
  result[1].__vftable = v4;
  result[1].__imp_.__imp_ = v3;
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C251610;
  return result;
}

void sub_20F3545C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::InvalidArgumentError::GetMessage@<X0>(MIL::InvalidArgumentError *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(MIL::InvalidArgumentError *))(*(void *)this + 16))(this);

  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

std::runtime_error *MIL::InvalidOperationError::InvalidOperationError(std::runtime_error *a1, std::runtime_error_vtbl **a2, std::string *a3)
{
  unint64_t v4 = *a2;
  uint64_t v3 = (const char *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  __n128 result = std::runtime_error::runtime_error(a1, a3);
  result[1].__vftable = v4;
  result[1].__imp_.__imp_ = v3;
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C251658;
  return result;
}

void sub_20F35468C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::InvalidOperationError::GetMessage@<X0>(MIL::InvalidOperationError *this@<X0>, void *a2@<X8>)
{
  uint64_t v3 = (char *)(*(uint64_t (**)(MIL::InvalidOperationError *))(*(void *)this + 16))(this);

  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

std::runtime_error *MIL::MILErrorWithResult::MILErrorWithResult(std::runtime_error *a1, const std::string *a2)
{
  __n128 result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)&unk_26C2516A0;
  return result;
}

uint64_t MIL::MILErrorWithResult::GetMessageWithLocation(MIL::MILErrorWithResult *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(MIL::MILErrorWithResult *))(*(void *)this + 56))(this)
                           + 24);

  return v1();
}

uint64_t MIL::MILErrorWithResult::GetLocation(MIL::MILErrorWithResult *this)
{
  uint64_t v1 = (MIL::MILResult *)(*(uint64_t (**)(MIL::MILErrorWithResult *))(*(void *)this + 56))(this);

  return MIL::MILResult::GetLocation(v1);
}

uint64_t MIL::MILErrorWithResult::GetLocationSharedPtr(MIL::MILErrorWithResult *this)
{
  uint64_t v1 = (MIL::MILResult *)(*(uint64_t (**)(MIL::MILErrorWithResult *))(*(void *)this + 56))(this);

  return MIL::MILResult::GetLocationSharedPtr(v1);
}

void MIL::MILErrorWithLocation::~MILErrorWithLocation(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    std::__shared_weak_count::__release_shared[abi:ne180100](imp);
  }

  std::runtime_error::~runtime_error(this);
}

{
  std::__shared_weak_count *imp;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    std::__shared_weak_count::__release_shared[abi:ne180100](imp);
  }
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x21056C700);
}

void MIL::OutOfRangeError::~OutOfRangeError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    std::__shared_weak_count::__release_shared[abi:ne180100](imp);
  }

  std::runtime_error::~runtime_error(this);
}

{
  std::__shared_weak_count *imp;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    std::__shared_weak_count::__release_shared[abi:ne180100](imp);
  }
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x21056C700);
}

void MIL::InvalidArgumentError::~InvalidArgumentError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    std::__shared_weak_count::__release_shared[abi:ne180100](imp);
  }

  std::runtime_error::~runtime_error(this);
}

{
  std::__shared_weak_count *imp;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    std::__shared_weak_count::__release_shared[abi:ne180100](imp);
  }
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x21056C700);
}

void MIL::InvalidOperationError::~InvalidOperationError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    std::__shared_weak_count::__release_shared[abi:ne180100](imp);
  }

  std::runtime_error::~runtime_error(this);
}

{
  std::__shared_weak_count *imp;
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26C251580;
  imp = (std::__shared_weak_count *)this[1].__imp_.__imp_;
  if (imp) {
    std::__shared_weak_count::__release_shared[abi:ne180100](imp);
  }
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::Bf16::FromFloat(MIL::Bf16 *this, float a2)
{
  unsigned int v2 = (LODWORD(a2) + 0x8000) >> 16;
  if ((LODWORD(a2) & 0x1FFFF) == 0x8000) {
    return HIWORD(LODWORD(a2));
  }
  return v2;
}

_WORD *MIL::Bf16::SetFloat(_WORD *this, float a2)
{
  unsigned int v2 = (LODWORD(a2) + 0x8000) >> 16;
  if ((LODWORD(a2) & 0x1FFFF) == 0x8000) {
    unsigned int v2 = HIWORD(LODWORD(a2));
  }
  *this = v2;
  return this;
}

float MIL::Bf16::GetFloat(MIL::Bf16 *this)
{
  LODWORD(result) = *(unsigned __int16 *)this << 16;
  return result;
}

float MIL::Fp8E5M2::GetFloat(MIL::Fp8E5M2 *this)
{
  unsigned int v1 = *(unsigned __int8 *)this;
  unsigned int v2 = (v1 << 24) & 0x80000000;
  int v3 = v1 & 0x7C;
  if (v3 == 124)
  {
    LODWORD(result) = v2 | v1 & 3 | 0x7F800000;
  }
  else
  {
    LODWORD(v5) = ((((v1 & 3) << 21) & 0xF07FFFFF | (((v1 >> 2) & 0x1F) << 23)) + 939524096) | v2;
    if ((v1 & 0x7F) == 0) {
      LODWORD(v5) = (v1 << 24) & 0x80000000;
    }
    float result = v5;
    int v6 = v1 & 3;
    if (v3) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v6 == 0;
    }
    if (!v7) {
      return COERCE_FLOAT((LODWORD(v5) + 0x800000) & 0x7F800000 | LODWORD(v5) & 0x807FFFFF)
    }
           - COERCE_FLOAT((LODWORD(v5) + 0x800000) & 0x7F800000 | v2);
  }
  return result;
}

float MIL::Fp8E4M3FN::GetFloat(MIL::Fp8E4M3FN *this)
{
  unsigned int v1 = *(unsigned __int8 *)this;
  unsigned int v2 = (v1 << 24) & 0x80000000;
  int v3 = v1 & 7;
  if ((v1 & 0x7F) != 0)
  {
    if ((v1 & 0x7F) == 0x7F)
    {
      LODWORD(result) = v2 | v3 | 0x7F800000;
      return result;
    }
    LODWORD(v5) = ((((v1 & 7) << 20) & 0xF87FFFFF | (((v1 >> 3) & 0xF) << 23)) + 1006632960) | v2;
  }
  else
  {
    LODWORD(v5) = (v1 << 24) & 0x80000000;
  }
  if ((v1 & 0x78) != 0 || v3 == 0) {
    return v5;
  }
  else {
    return COERCE_FLOAT((LODWORD(v5) + 0x800000) & 0x7F800000 | LODWORD(v5) & 0x807FFFFF)
  }
         - COERCE_FLOAT((LODWORD(v5) + 0x800000) & 0x7F800000 | v2);
}

unsigned char *MIL::Fp8E5M2::SetFloat(unsigned char *this, float a2)
{
  float v4 = a2;
  *this = HIBYTE(a2) & 0x80;
  if (fabsf(a2) == INFINITY)
  {
    *this = HIBYTE(a2) & 0x80 | 0x7C;
    return this;
  }
  if (a2 != 0.0)
  {
    unsigned int v2 = (LODWORD(a2) >> 23);
    if (v2 >= 0x8F)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::range_error::range_error[abi:ne180100](exception, "Fp8E5M2 SetFloat exponent overflow.");
    }
    else
    {
      if (v2 > 0x6E) {
        return HandleFp32ToFp8ExponentMantissa<MIL::Fp8E5M2,MIL::Fp8E5M2::Cast>(this, &v4);
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::range_error::range_error[abi:ne180100](exception, "Fp8E5M2 SetFloat exponent underflow.");
    }
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return this;
}

void sub_20F354DE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::range_error::range_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  float result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
  return result;
}

unsigned char *HandleFp32ToFp8ExponentMantissa<MIL::Fp8E5M2,MIL::Fp8E5M2::Cast>(unsigned char *result, float *a2)
{
  float v2 = *a2;
  if ((*(_DWORD *)a2 & 0x7F800000u) < 0x38000001)
  {
    *a2 = v2 + COERCE_FLOAT(LODWORD(v2) & 0x80000000 | 0x38800000);
    LOBYTE(v3) = *result & 0x83;
  }
  else
  {
    unsigned int v3 = *result & 0x83 | (4 * ((((LODWORD(v2) >> 21) + 64) >> 2) & 0x1F));
  }
  std::runtime_error *result = v3;
  if ((*(_DWORD *)a2 & 0x1FFFFF) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "FP8 SetFloat requires rounding for the given value.");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  std::runtime_error *result = v3 & 0xFC | (*(_DWORD *)a2 >> 21) & 3;
  return result;
}

void sub_20F354EE8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *MIL::Fp8E4M3FN::SetFloat(unsigned char *this, float a2)
{
  float v4 = a2;
  *this = HIBYTE(a2) & 0x80;
  if (fabsf(a2) == INFINITY)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Fp8E4M3FN SetFloat infinity not supported.");
    goto LABEL_10;
  }
  if (a2 == 0.0) {
    return this;
  }
  unsigned int v2 = (LODWORD(a2) >> 23);
  if (v2 >= 0x88)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Fp8E4M3FN SetFloat exponent overflow.");
    goto LABEL_10;
  }
  if (v2 <= 0x75)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Fp8E4M3FN SetFloat exponent underflow.");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return HandleFp32ToFp8ExponentMantissa<MIL::Fp8E4M3FN,MIL::Fp8E4M3FN::Cast>(this, &v4);
}

void sub_20F354FF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *HandleFp32ToFp8ExponentMantissa<MIL::Fp8E4M3FN,MIL::Fp8E4M3FN::Cast>(unsigned char *result, float *a2)
{
  float v2 = *a2;
  if ((*(_DWORD *)a2 & 0x7F800000u) < 0x3C000001)
  {
    *a2 = v2 + COERCE_FLOAT(LODWORD(v2) & 0x80000000 | 0x3C800000);
    LOBYTE(v3) = *result & 0x87;
  }
  else
  {
    unsigned int v3 = *result & 0x87 | (8 * ((((LODWORD(v2) >> 20) + 64) >> 3) & 0xF));
  }
  std::runtime_error *result = v3;
  if ((*(_DWORD *)a2 & 0xFFFFF) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "FP8 SetFloat requires rounding for the given value.");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  std::runtime_error *result = v3 & 0xF8 | (*(_DWORD *)a2 >> 20) & 7;
  return result;
}

void sub_20F3550C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Fp8E5M2::FromFloat(MIL::Fp8E5M2 *this, float a2)
{
  unsigned __int8 v3 = 0;
  MIL::Fp8E5M2::SetFloat(&v3, a2);
  return v3;
}

uint64_t MIL::Fp8E4M3FN::FromFloat(MIL::Fp8E4M3FN *this, float a2)
{
  unsigned __int8 v3 = 0;
  MIL::Fp8E4M3FN::SetFloat(&v3, a2);
  return v3;
}

BOOL MIL::Fp8E5M2::IsNaN(MIL::Fp8E5M2 *this)
{
  int v1 = *(unsigned __int8 *)this;
  return (v1 & 3) != 0 && (~v1 & 0x7C) == 0;
}

BOOL MIL::Fp8E4M3FN::IsNaN(MIL::Fp8E4M3FN *this)
{
  return (~*(unsigned __int8 *)this & 0x7F) == 0;
}

uint64_t MIL::Fp16::FromFloat(MIL::Fp16 *this, float a2)
{
  return (2 * LODWORD(a2)) | (((unint64_t)LODWORD(a2) >> 31) << 15);
}

float MIL::Fp16::GetFloat(MIL::Fp16 *this)
{
  unsigned int v1 = *(__int16 *)this;
  float v2 = COERCE_FLOAT(((v1 & 0x7FFF) << 13) | 0x70000000) * 1.9259e-34;
  if (((v1 >> 10) & 0x1F) == 0) {
    float v2 = COERCE_FLOAT(v1 & 0x7FFF | 0x3F000000) + -0.5;
  }
  LODWORD(result) = v1 & 0x80000000 | LODWORD(v2);
  return result;
}

_WORD *MIL::Fp16::SetFloat(_WORD *this, float a2)
{
  *this = (2 * LOWORD(a2)) | ((unint64_t)LODWORD(a2) >> 31 << 15);
  return this;
}

void *MIL::IRArgument::IRArgument(void *this)
{
  *this = &unk_26C251780;
  return this;
}

void MIL::IRArgument::Make()
{
}

{
  operator new();
}

uint64_t *std::unique_ptr<anonymous namespace'::IRArgumentImpl>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(v2 + 8);
    MEMORY[0x21056C700](v2, 0x10F3C4066A09554);
  }
  return a1;
}

uint64_t MIL::IRArgument::GetName(MIL::IRArgument *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRArgument *))(*(void *)this + 32))(this);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Argument is not a name");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3554A8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRArgument::GetValue(MIL::IRArgument *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRArgument *))(*(void *)this + 40))(this);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Argument is not a value");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F355538(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRArgument::ToString(MIL::IRArgument *this)
{
}

void sub_20F35560C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTypedArgument::~IRTypedArgument(MIL::IRTypedArgument *this)
{
  *(void *)this = &unk_26C2517D0;
  std::unique_ptr<MIL::IRTypedArgument::IRTypedArgumentImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  *(void *)this = &unk_26C2517D0;
  std::unique_ptr<MIL::IRTypedArgument::IRTypedArgumentImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26C2517D0;
  std::unique_ptr<MIL::IRTypedArgument::IRTypedArgumentImpl>::reset[abi:ne180100]((uint64_t *)this + 1, 0);

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedArgument::IRTypedArgument(MIL::IRTypedArgument *this, const MIL::IRValueType *a2)
{
  *(void *)this = &unk_26C2517D0;
  operator new();
}

{
  *(void *)this = &unk_26C2517D0;
  operator new();
}

void MIL::IRTypedArgument::IRTypedArgument(void *a1)
{
  *a1 = &unk_26C2517D0;
  operator new();
}

BOOL MIL::IRTypedArgument::IsValueType(MIL::IRTypedArgument *this)
{
  return *(_DWORD *)(*((void *)this + 1) + 16) == 0;
}

BOOL MIL::IRTypedArgument::IsValue(MIL::IRTypedArgument *this)
{
  return *(_DWORD *)(*((void *)this + 1) + 16) == 1;
}

uint64_t MIL::IRTypedArgument::TryGetValue(MIL::IRTypedArgument::IRTypedArgumentImpl **this)
{
  return MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValue(this[1]);
}

uint64_t MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValue(MIL::IRTypedArgument::IRTypedArgumentImpl *this)
{
  if (!this || *((_DWORD *)this + 4) != 1) {
    return 0;
  }
  uint64_t v2 = *(void *)this;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

uint64_t MIL::IRTypedArgument::TryGetValueType(MIL::IRTypedArgument::IRTypedArgumentImpl **this)
{
  return MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValueType(this[1]);
}

uint64_t MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValueType(MIL::IRTypedArgument::IRTypedArgumentImpl *this)
{
  if (this && !*((_DWORD *)this + 4)) {
    return *(void *)this;
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValue(this) + 32);

  return v1();
}

uint64_t MIL::IRTypedArgument::TryGetValueSharedPtr@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(uint64_t **)(this + 8);
  if (v2 && *((_DWORD *)v2 + 4) == 1)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = v2[1];
    *a2 = v4;
    a2[1] = v3;
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

uint64_t MIL::IRTypedArgument::Equals(MIL::IRTypedArgument::IRTypedArgumentImpl **this, const MIL::IRTypedArgument::IRTypedArgumentImpl **a2)
{
  return MIL::IRTypedArgument::IRTypedArgumentImpl::Equals(this[1], a2[1]);
}

uint64_t MIL::IRTypedArgument::IRTypedArgumentImpl::Equals(MIL::IRTypedArgument::IRTypedArgumentImpl *this, const MIL::IRTypedArgument::IRTypedArgumentImpl *a2)
{
  int v3 = *((_DWORD *)a2 + 4);
  if (!*((_DWORD *)this + 4))
  {
    if (!v3)
    {
      uint64_t ValueType = MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValueType(this);
      return ValueType == MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValueType(a2);
    }
    return 0;
  }
  if (v3 != 1) {
    return 0;
  }
  uint64_t Value = MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValue(this);
  if (*((_DWORD *)a2 + 4) == 1)
  {
    uint64_t v6 = *(void *)a2;
    float v5 = (std::__shared_weak_count *)*((void *)a2 + 1);
    if (v5)
    {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)Value + 16);

  return v8(Value, v6);
}

void MIL::IRTypedArgument::Make(MIL::IRTypedArgument *this, const MIL::IRValueType *a2)
{
}

void sub_20F355B3C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

void MIL::IRTypedArgument::Make()
{
}

void sub_20F355C04(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x21056C700](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedArgument::GetValueType(MIL::IRTypedArgument::IRTypedArgumentImpl **this)
{
  uint64_t result = MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValueType(this[1]);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Argument is not a value type pointer");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F355C94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedArgument::GetValue(MIL::IRTypedArgument::IRTypedArgumentImpl **this)
{
  uint64_t result = MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValue(this[1]);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Argument is not a value");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F355D08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedArgument::ToString(MIL::IRTypedArgument::IRTypedArgumentImpl **this)
{
  return MIL::IRTypedArgument::IRTypedArgumentImpl::ToString(this[1]);
}

uint64_t MIL::IRTypedArgument::IRTypedArgumentImpl::ToString(MIL::IRTypedArgument::IRTypedArgumentImpl *this)
{
  uint64_t Value = (MIL::Text::SerializerOptions *)MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValue(this);
  if (Value) {
    MIL::Text::SerializerOptions::Make(Value);
  }
  int v3 = *(uint64_t (**)(void))(*(void *)MIL::IRTypedArgument::IRTypedArgumentImpl::TryGetValueType(this) + 56);

  return v3();
}

void sub_20F355E40(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::IRArgumentImpl::~IRArgumentImpl(_anonymous_namespace_::IRArgumentImpl *this)
{
}

{
  uint64_t vars8;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8);

  JUMPOUT(0x21056C700);
}

BOOL anonymous namespace'::IRArgumentImpl::IsName(_anonymous_namespace_::IRArgumentImpl *this)
{
  return *((_DWORD *)this + 8) == 0;
}

BOOL anonymous namespace'::IRArgumentImpl::IsValue(_anonymous_namespace_::IRArgumentImpl *this)
{
  return *((_DWORD *)this + 8) == 1;
}

uint64_t anonymous namespace'::IRArgumentImpl::TryGetName(_anonymous_namespace_::IRArgumentImpl *this)
{
  if (!*((_DWORD *)this + 8)) {
    return (uint64_t)this + 8;
  }
  uint64_t v2 = *((void *)this + 1);
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 40))(v2);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 136);
    return v4();
  }
  return result;
}

uint64_t anonymous namespace'::IRArgumentImpl::TryGetValue(_anonymous_namespace_::IRArgumentImpl *this)
{
  if (*((_DWORD *)this + 8) != 1) {
    return 0;
  }
  uint64_t v2 = *((void *)this + 1);
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    atomic_fetch_add_explicit(&v1->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  return v2;
}

uint64_t anonymous namespace'::IRArgumentImpl::TryGetValueSharedPtr@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  if (*(_DWORD *)(this + 32) == 1)
  {
    uint64_t v2 = *(void *)(this + 16);
    *a2 = *(void *)(this + 8);
    a2[1] = v2;
    if (v2) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
  return this;
}

uint64_t anonymous namespace'::IRArgumentImpl::Equals(_anonymous_namespace_::IRArgumentImpl *this, const MIL::IRArgument *a2)
{
  uint64_t v4 = *(void *)a2;
  if (*((_DWORD *)this + 8))
  {
    uint64_t result = (*(uint64_t (**)(const MIL::IRArgument *))(v4 + 24))(a2);
    if (result)
    {
      if (*((_DWORD *)this + 8) == 1)
      {
        uint64_t v7 = *((void *)this + 1);
        uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
        if (v6)
        {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v22 = (*(uint64_t (**)(const MIL::IRArgument *))(*(void *)a2 + 40))(a2);
      unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 16);
      return v23(v7, v22);
    }
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(const MIL::IRArgument *))(v4 + 16))(a2);
    if (result)
    {
      uint64_t v9 = (*(uint64_t (**)(const MIL::IRArgument *))(*(void *)a2 + 32))(a2);
      uint64_t v10 = Name[23];
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = Name[23];
      }
      else {
        uint64_t v11 = *((void *)Name + 1);
      }
      uint64_t v12 = *(unsigned __int8 *)(v9 + 23);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v9 + 8);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          char v14 = (unsigned __int8 *)v9;
        }
        else {
          char v14 = *(unsigned __int8 **)v9;
        }
        if ((v10 & 0x80) != 0)
        {
          return memcmp(*(const void **)Name, v14, *((void *)Name + 1)) == 0;
        }
        else if (Name[23])
        {
          uint64_t v15 = v10 - 1;
          do
          {
            int v17 = *Name++;
            int v16 = v17;
            int v19 = *v14++;
            int v18 = v19;
            BOOL v21 = v15-- != 0;
            uint64_t result = v16 == v18;
          }
          while (v16 == v18 && v21);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C251868[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIKN3MIL7IRValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSD_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS_10shared_ptrIKN3MIL7IRValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSK_1EJSD_SI_EEEEEEDcSM_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t std::unique_ptr<MIL::IRTypedArgument::IRTypedArgumentImpl>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__variant_detail::__dtor<std::__variant_detail::__traits<MIL::IRValueType const*,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<MIL::IRValueType const*,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_26C251878[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJPKN3MIL11IRValueTypeENS_10shared_ptrIKNS8_7IRValueEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSH_1EJSB_SF_EEEEEEDcSJ_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void MIL::IRBlock::~IRBlock(MIL::IRBlock *this)
{
  MIL::IRCachedScope::~IRCachedScope((MIL::IRBlock *)((char *)this + 64));

  MIL::IRObject::~IRObject(this);
}

void *MIL::IRBlock::IRBlock(void *a1, long long *a2, uint64_t *a3)
{
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::IRObject::IRObject((uint64_t)a1, (uint64_t)&v5, a3);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  MIL::IRCachedScope::IRCachedScope((MIL::IRCachedScope *)(a1 + 8));
  *a1 = &unk_26C251898;
  a1[8] = &unk_26C251928;
  return a1;
}

void sub_20F35644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  MIL::IRObject::~IRObject(v10);
  _Unwind_Resume(a1);
}

void MIL::IRBlock::Make(long long *a1)
{
  long long v4 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  long long v1 = 0u;
  long long v2 = 0u;
  int v3 = 1065353216;
  MIL::IRBlock::Make();
}

void sub_20F3564D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 - 24);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(a1);
}

void MIL::IRBlock::Make()
{
}

void sub_20F3565A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21056C700](v10, 0x10E1C407CF303FALL);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::IRBlockImpl **std::unique_ptr<anonymous namespace'::IRBlockImpl>::~unique_ptr[abi:ne180100](_anonymous_namespace_::IRBlockImpl **a1)
{
  long long v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MEMORY[0x21056C700]();
  }
  return a1;
}

void MIL::IRBlock::ToString(MIL::IRBlock *this)
{
}

void sub_20F3566F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = *(void *)(v11 - 40);
  *(void *)(v11 - 40) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::IRBlockImpl::~IRBlockImpl(_anonymous_namespace_::IRBlockImpl *this)
{
  uint64_t v2 = *((void *)this + 30);
  *((void *)this + 30) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x20C4093837F09);
  }
  int v3 = (void **)((char *)this + 216);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = (void **)((char *)this + 192);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  int v3 = (void **)((char *)this + 168);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
  MIL::IRCachedScope::~IRCachedScope((_anonymous_namespace_::IRBlockImpl *)((char *)this + 64));
  MIL::IRObject::~IRObject(this);
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

void non-virtual thunk to'anonymous namespace'::IRBlockImpl::~IRBlockImpl(_anonymous_namespace_::IRBlockImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t anonymous namespace'::IRBlockImpl::IRBlockImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  long long v11 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  MIL::IRBlock::IRBlock((void *)a1, &v11, a6);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  *(void *)a1 = &unk_26C2519C8;
  *(void *)(a1 + 64) = &unk_26C251A60;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)a3;
  *(void *)(a1 + 184) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)a4;
  *(void *)(a1 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  return a1;
}

void sub_20F356988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v7 = *((void *)v4 + 30);
  *((void *)v4 + 30) = 0;
  if (v7) {
    MEMORY[0x21056C700](v7, 0x20C4093837F09);
  }
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  MIL::IRCachedScope::~IRCachedScope(v5);
  MIL::IRObject::~IRObject(v4);
  _Unwind_Resume(a1);
}

void *anonymous namespace'::IRBlockImpl::SetOperations(uint64_t a1, uint64_t a2)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C251AE0;
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = v3;
  MIL::IRCachedScope::InvalidateAndCall(a1 + 64, (uint64_t)v3);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
}

void sub_20F356A84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IRBlockImpl::EqualsImpl(_anonymous_namespace_::IRBlockImpl *this, const MIL::IRObject *lpsrc)
{
  if (result)
  {
    long long v4 = (void *)result;
    uint64_t v5 = *((void *)this + 21);
    uint64_t v6 = *((void *)this + 22);
    if (v6 - v5 != *(void *)(result + 176) - *(void *)(result + 168)) {
      return 0;
    }
    if (v6 != v5)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (MIL::IRNamedValueType::Equals(*(MIL::IRNamedValueType **)(v5 + v7), *(const MIL::IRNamedValueType **)(v4[21] + v7)))
      {
        ++v8;
        uint64_t v5 = *((void *)this + 21);
        v7 += 16;
        if (v8 >= (*((void *)this + 22) - v5) >> 4) {
          goto LABEL_7;
        }
      }
      return 0;
    }
LABEL_7:
    uint64_t v10 = *((void *)this + 24);
    uint64_t v9 = *((void *)this + 25);
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
    uint64_t v12 = v4[24];
    if (v11 != 0xAAAAAAAAAAAAAAABLL * ((v4[25] - v12) >> 3)) {
      return 0;
    }
    if (v9 != v10)
    {
      uint64_t v13 = 0;
      if (v11 <= 1) {
        unint64_t v14 = 1;
      }
      else {
        unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 3);
      }
      do
      {
        uint64_t v15 = (unsigned __int8 *)(v10 + 24 * v13);
        int v16 = (unsigned __int8 **)(v12 + 24 * v13);
        uint64_t v17 = v15[23];
        if ((v17 & 0x80u) == 0) {
          int v18 = (unsigned __int8 *)v15[23];
        }
        else {
          int v18 = (unsigned __int8 *)*((void *)v15 + 1);
        }
        int v19 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
        int v20 = (char)v19;
        if ((char)v19 < 0) {
          int v19 = v16[1];
        }
        if (v18 != v19) {
          return 0;
        }
        if (v20 >= 0) {
          BOOL v21 = (unsigned __int8 *)(v12 + 24 * v13);
        }
        else {
          BOOL v21 = *v16;
        }
        if ((v17 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v15, v21, *((void *)v15 + 1))) {
            return 0;
          }
        }
        else if (v15[23])
        {
          while (*v15 == *v21)
          {
            ++v15;
            ++v21;
            if (!--v17) {
              goto LABEL_27;
            }
          }
          return 0;
        }
LABEL_27:
        ;
      }
      while (++v13 != v14);
    }
    uint64_t v22 = (uint64_t **)*((void *)this + 30);
    uint64_t v23 = v4[30];
    uint64_t v24 = **v22;
    uint64_t v25 = (*v22)[1];
    if (v25 - v24 != *(void *)(*(void *)v23 + 8) - **(void **)v23) {
      return 0;
    }
    if (v25 == v24)
    {
      return 1;
    }
    else
    {
      uint64_t v26 = 0;
      unint64_t v27 = 0;
      do
      {
        uint64_t result = MIL::IRObject::Equals(*(MIL::IRObject **)(v24 + v26), *(const MIL::IRObject **)(**(void **)v23 + v26));
        if ((result & 1) == 0) {
          break;
        }
        ++v27;
        uint64_t v24 = **v22;
        v26 += 16;
      }
      while (v27 < ((*v22)[1] - v24) >> 4);
    }
  }
  return result;
}

void anonymous namespace'::IRBlockImpl::Copy(_anonymous_namespace_::IRBlockImpl *this)
{
  memset(v1, 0, sizeof(v1));
}

void sub_20F356D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IRBlockImpl::GetInputs(_anonymous_namespace_::IRBlockImpl *this)
{
  return (uint64_t)this + 168;
}

void *anonymous namespace'::IRBlockImpl::SetInputs(uint64_t a1, uint64_t a2)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C251B70;
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = v3;
  MIL::IRCachedScope::InvalidateAndCall(a1 + 64, (uint64_t)v3);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
}

void sub_20F356DE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IRBlockImpl::GetOperations(_anonymous_namespace_::IRBlockImpl *this)
{
  return *((void *)this + 30);
}

{
  MIL::IRCachedScope::DisableCache((_anonymous_namespace_::IRBlockImpl *)((char *)this + 64));
  return *((void *)this + 30);
}

uint64_t anonymous namespace'::IRBlockImpl::GetOperationsSharedPtr(_anonymous_namespace_::IRBlockImpl *this)
{
  return (uint64_t)this + 216;
}

uint64_t anonymous namespace'::IRBlockImpl::GetOutputs(_anonymous_namespace_::IRBlockImpl *this)
{
  return (uint64_t)this + 192;
}

void *anonymous namespace'::IRBlockImpl::SetOutputs(uint64_t a1, uint64_t a2)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C251BF0;
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = v3;
  MIL::IRCachedScope::InvalidateAndCall(a1 + 64, (uint64_t)v3);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
}

void sub_20F356EE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *anonymous namespace'::IRBlockImpl::SetParent(_anonymous_namespace_::IRBlockImpl *this, const MIL::IRScope *a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  int v3 = a2;
  v4[0] = &unk_26C251C70;
  v4[1] = this;
  v4[2] = &v3;
  v4[3] = v4;
  MIL::IRCachedScope::InvalidateAndCall((uint64_t)this + 64, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_20F356F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRBlockImpl::WithOperations(long long **a1)
{
  MIL::IRObject::GetLocationPtr((MIL::IRObject *)a1);
  memset(&v4, 0, sizeof(v4));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v4, a1[24], a1[25], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[25] - (char *)a1[24]) >> 3));
  uint64_t Attributes = MIL::IRObject::GetAttributes((MIL::IRObject *)a1);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v3, Attributes);
  operator new();
}

void sub_20F3570D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRBlockImpl::WithRenames(uint64_t a1, const std::string **a2)
{
  memset(&v50, 0, sizeof(v50));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v50, *(long long **)(a1 + 192), *(long long **)(a1 + 200), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 200) - *(void *)(a1 + 192)) >> 3));
  std::string v4 = *a2;
  uint64_t v5 = a2[1];
LABEL_2:
  if (v4 != v5)
  {
    uint64_t v6 = (MIL::IRNamedValueType **)v51[0];
    uint64_t v7 = v51[1];
    while (v6 != (MIL::IRNamedValueType **)v7)
    {
      Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v6);
      uint64_t v9 = Name[23];
      if ((v9 & 0x80u) == 0) {
        uint64_t v10 = Name[23];
      }
      else {
        uint64_t v10 = *((void *)Name + 1);
      }
      std::string::size_type size = HIBYTE(v4->__r_.__value_.__r.__words[2]);
      int v12 = (char)size;
      if ((size & 0x80u) != 0) {
        std::string::size_type size = v4->__r_.__value_.__l.__size_;
      }
      if (v10 == size)
      {
        if (v12 >= 0) {
          uint64_t v13 = v4;
        }
        else {
          uint64_t v13 = (const std::string *)v4->__r_.__value_.__r.__words[0];
        }
        if ((v9 & 0x80) != 0)
        {
          if (memcmp(*(const void **)Name, v13, *((void *)Name + 1))) {
            goto LABEL_25;
          }
LABEL_20:
          unint64_t v14 = *v6;
          if (SHIBYTE(v4[1].__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v49, v4[1].__r_.__value_.__l.__data_, v4[1].__r_.__value_.__l.__size_);
          }
          else {
            std::string v49 = v4[1];
          }
          MIL::IRNamedValueType::SetName((uint64_t)v14, (__n128 *)&v49);
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
          goto LABEL_25;
        }
        if (!Name[23]) {
          goto LABEL_20;
        }
        while (*Name == v13->__r_.__value_.__s.__data_[0])
        {
          ++Name;
          uint64_t v13 = (const std::string *)((char *)v13 + 1);
          if (!--v9) {
            goto LABEL_20;
          }
        }
      }
LABEL_25:
      v6 += 2;
    }
    std::string::size_type v16 = v50.__r_.__value_.__l.__size_;
    for (std::string::size_type i = v50.__r_.__value_.__r.__words[0]; ; i += 24)
    {
      if (i == v16)
      {
        v4 += 2;
        goto LABEL_2;
      }
      uint64_t v17 = *(unsigned __int8 *)(i + 23);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = *(unsigned __int8 *)(i + 23);
      }
      else {
        uint64_t v18 = *(void *)(i + 8);
      }
      std::string::size_type v19 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
      int v20 = (char)v19;
      if ((v19 & 0x80u) != 0) {
        std::string::size_type v19 = v4->__r_.__value_.__l.__size_;
      }
      if (v18 == v19)
      {
        if (v20 >= 0) {
          BOOL v21 = v4;
        }
        else {
          BOOL v21 = (const std::string *)v4->__r_.__value_.__r.__words[0];
        }
        if ((v17 & 0x80) != 0)
        {
          if (memcmp(*(const void **)i, v21, *(void *)(i + 8))) {
            continue;
          }
LABEL_44:
          std::string::operator=((std::string *)i, v4 + 1);
          continue;
        }
        if (!*(unsigned char *)(i + 23)) {
          goto LABEL_44;
        }
        uint64_t v22 = 0;
        while (*(unsigned __int8 *)(i + v22) == v21->__r_.__value_.__s.__data_[v22])
        {
          if (v17 == ++v22) {
            goto LABEL_44;
          }
        }
      }
    }
  }
  std::string::size_type v24 = v50.__r_.__value_.__l.__size_;
  std::string::size_type v23 = v50.__r_.__value_.__r.__words[0];
LABEL_48:
  if (v23 == v24)
  {
    uint64_t v46 = 0;
    std::string v47 = 0;
    unint64_t v48 = 0;
    std::vector<std::shared_ptr<MIL::IROperation>>::reserve(&v46, (uint64_t)(*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 4);
    uint64_t v33 = *(void *)(a1 + 216);
    for (uint64_t j = *(void *)(a1 + 224); v33 != j; v33 += 16)
    {
      (*(void (**)(uint64_t *__return_ptr))(**(void **)v33 + 48))(&v53);
      if (v53) {
        operator new();
      }
      uint64_t v53 = 0;
      uint64_t v35 = v47;
      if ((unint64_t)v47 >= v48)
      {
        uint64_t v37 = ((uint64_t)v47 - v46) >> 4;
        unint64_t v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v48 - v46;
        if ((uint64_t)(v48 - v46) >> 3 > v38) {
          unint64_t v38 = v39 >> 3;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v40 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v40 = v38;
        }
        v52[4] = &v48;
        char v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v48, v40);
        char v42 = &v41[16 * v37];
        v52[0] = v41;
        v52[1] = v42;
        v52[3] = &v41[16 * v43];
        *(void *)char v42 = 0;
        *((void *)v42 + 1) = 0;
        v52[2] = v42 + 16;
        std::vector<std::shared_ptr<MIL::IROperation>>::__swap_out_circular_buffer(&v46, v52);
        long long v36 = v47;
        std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v52);
      }
      else
      {
        *std::string v47 = 0;
        v35[1] = 0;
        long long v36 = v35 + 2;
      }
      std::string v47 = v36;
      uint64_t v44 = v53;
      uint64_t v53 = 0;
      if (v44) {
        (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
      }
    }
    MIL::IRObject::GetLocationPtr((MIL::IRObject *)a1);
    uint64_t Attributes = MIL::IRObject::GetAttributes((MIL::IRObject *)a1);
    std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v52, Attributes);
    operator new();
  }
  uint64_t v25 = *a2;
  uint64_t v26 = a2[1];
  while (1)
  {
    if (v25 == v26)
    {
      v23 += 24;
      goto LABEL_48;
    }
    uint64_t v27 = *(unsigned __int8 *)(v23 + 23);
    if ((v27 & 0x80u) == 0) {
      uint64_t v28 = (unsigned __int8 *)*(unsigned __int8 *)(v23 + 23);
    }
    else {
      uint64_t v28 = *(unsigned __int8 **)(v23 + 8);
    }
    std::string::size_type v29 = (unsigned __int8 *)HIBYTE(v25->__r_.__value_.__r.__words[2]);
    int v30 = (char)v29;
    if ((char)v29 < 0) {
      std::string::size_type v29 = (unsigned __int8 *)v25->__r_.__value_.__l.__size_;
    }
    if (v28 == v29)
    {
      if (v30 >= 0) {
        uint64_t v31 = v25;
      }
      else {
        uint64_t v31 = (const std::string *)v25->__r_.__value_.__r.__words[0];
      }
      if ((v27 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v23, v31, *(void *)(v23 + 8))) {
          goto LABEL_68;
        }
LABEL_67:
        std::string::operator=((std::string *)v23, v25 + 1);
        goto LABEL_68;
      }
      if (!*(unsigned char *)(v23 + 23)) {
        goto LABEL_67;
      }
      uint64_t v32 = 0;
      while (*(unsigned __int8 *)(v23 + v32) == v31->__r_.__value_.__s.__data_[v32])
      {
        if (v27 == ++v32) {
          goto LABEL_67;
        }
      }
    }
LABEL_68:
    v25 += 2;
  }
}

void sub_20F35766C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  *(void *)(v25 - 96) = &a10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 96));
  a10 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a19 = &a22;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRBlockImpl::BuildScopeCache(_anonymous_namespace_::IRBlockImpl *this)
{
  memset(v60, 0, sizeof(v60));
  int v61 = 1065353216;
  memset(v58, 0, sizeof(v58));
  int v59 = 1065353216;
  uint64_t v2 = (MIL::IRNamedValueType **)*((void *)this + 21);
  for (std::string::size_type i = (MIL::IRNamedValueType **)*((void *)this + 22); v2 != i; v2 += 2)
  {
    Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v2);
    v53.__r_.__value_.__r.__words[0] = 0;
    v53.__r_.__value_.__r.__words[0] = MIL::IRNamedValueType::GetType(*v2);
    std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const* const&>((uint64_t)v60, Name, (uint64_t)Name, &v53);
    if ((v5 & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(exception, &v56);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v6 = *((void *)this + 20);
    if (v6)
    {
      (*(void (**)(std::string *__return_ptr))(*(void *)v6 + 56))(&v56);
      if (v56.__r_.__value_.__r.__words[0])
      {
        v57.__r_.__value_.__r.__words[0] = (std::string::size_type)Name;
        uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v58, Name, (uint64_t)&std::piecewise_construct, (long long **)&v57);
        long long v8 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = 0uLL;
        uint64_t v9 = (std::__shared_weak_count *)*((void *)v7 + 6);
        *(_OWORD *)(v7 + 40) = v8;
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
    }
    else
    {
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = 0uLL;
    }
    if (v56.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v56.__r_.__value_.__l.__size_);
    }
  }
  uint64_t v10 = (uint64_t **)**((void **)this + 30);
  unint64_t v11 = *v10;
  int v12 = v10[1];
  if (*v10 != v12)
  {
    do
    {
      uint64_t v13 = *v11;
      unint64_t v14 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)*v11 + 160))(*v11);
      std::string::size_type v16 = v14 + 1;
      uint64_t v15 = (void *)*v14;
      if ((void *)*v14 != v14 + 1)
      {
        do
        {
          uint64_t v18 = (MIL::IRArgument **)v15[7];
          uint64_t v17 = (MIL::IRArgument **)v15[8];
          while (v18 != v17)
          {
            if (((*(uint64_t (**)(void))(*(void *)*v18 + 24))() & 1) == 0)
            {
              uint64_t v19 = MIL::IRArgument::GetName(*v18);
              if (*(char *)(v19 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v19, *(void *)(v19 + 8));
              }
              else
              {
                long long v20 = *(_OWORD *)v19;
                v57.__r_.__value_.__r.__words[2] = *(void *)(v19 + 16);
                *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v20;
              }
              if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v60, (unsigned __int8 *)&v57))
              {
                uint64_t v21 = *((void *)this + 20);
                if (v21)
                {
                  if (!(*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v21 + 24))(v21, &v57, 1))
                  {
                    else {
                      uint64_t v38 = 305;
                    }
                    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v56);
                    uint64_t v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Input '", 7);
                    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      unint64_t v40 = &v57;
                    }
                    else {
                      unint64_t v40 = (std::string *)v57.__r_.__value_.__r.__words[0];
                    }
                    if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::string::size_type size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
                    }
                    else {
                      std::string::size_type size = v57.__r_.__value_.__l.__size_;
                    }
                    char v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, size);
                    uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' for parameter '", 17);
                    int v44 = *((char *)v15 + 55);
                    if (v44 >= 0) {
                      uint64_t v45 = (uint64_t)(v15 + 4);
                    }
                    else {
                      uint64_t v45 = v15[4];
                    }
                    if (v44 >= 0) {
                      uint64_t v46 = *((unsigned __int8 *)v15 + 55);
                    }
                    else {
                      uint64_t v46 = v15[5];
                    }
                    std::string v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v45, v46);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"' does not resolve. Operations are expected to be topologically sorted.", 71);
                    unint64_t v48 = __cxa_allocate_exception(0x48uLL);
                    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(this);
                    uint64_t v50 = LocationPtr[1];
                    *(void *)&long long v55 = *LocationPtr;
                    *((void *)&v55 + 1) = v50;
                    if (v50) {
                      atomic_fetch_add_explicit((atomic_ullong *volatile)(v50 + 8), 1uLL, memory_order_relaxed);
                    }
                    std::stringbuf::str();
                    MIL::ValidationError::ValidationError((uint64_t)v48, &v55, (uint64_t)v54, v38);
                  }
                }
              }
              if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v57.__r_.__value_.__l.__data_);
              }
            }
            v18 += 2;
          }
          uint64_t v22 = (void *)v15[1];
          if (v22)
          {
            do
            {
              std::string::size_type v23 = v22;
              uint64_t v22 = (void *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              std::string::size_type v23 = (void *)v15[2];
              BOOL v24 = *v23 == (void)v15;
              uint64_t v15 = v23;
            }
            while (!v24);
          }
          uint64_t v15 = v23;
        }
        while (v23 != v16);
      }
      uint64_t v25 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 72))(v13);
      uint64_t v26 = v25;
      memset(&v56, 0, sizeof(v56));
      if (v25 && (*(unsigned int (**)(uint64_t))(*(void *)v25 + 104))(v25))
      {
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v26 + 248))(&v57, v26, v13);
        std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)&v56);
        std::string v56 = v57;
        memset(&v57, 0, sizeof(v57));
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      }
      uint64_t v27 = (void **)(*(uint64_t (**)(uint64_t))(*(void *)v13 + 176))(v13);
      memset(&v57, 0, sizeof(v57));
      std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(&v57, *v27, v27[1], ((char *)v27[1] - (char *)*v27) >> 4);
      std::string::size_type v28 = v57.__r_.__value_.__r.__words[0];
      if (v57.__r_.__value_.__l.__size_ != v57.__r_.__value_.__r.__words[0])
      {
        unint64_t v29 = 0;
        do
        {
          int v30 = (MIL::IRNamedValueType **)(v28 + 16 * v29);
          uint64_t v31 = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v30);
          v53.__r_.__value_.__r.__words[0] = MIL::IRNamedValueType::GetType(*v30);
          std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>((uint64_t)v60, v31, (uint64_t)v31, &v53);
          if ((v32 & 1) == 0)
          {
            v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRNamedValueType::GetName(*v30);
            std::operator+<char>();
            std::runtime_error::runtime_error(v51, &v53);
            __cxa_throw(v51, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          std::string::size_type v33 = v56.__r_.__value_.__r.__words[0];
          if (v56.__r_.__value_.__r.__words[0] != v56.__r_.__value_.__l.__size_)
          {
            v62 = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v30);
            std::string::size_type v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v58, v62, (uint64_t)&std::piecewise_construct, (long long **)&v62);
            long long v35 = *(_OWORD *)(v33 + 16 * v29);
            uint64_t v36 = *(void *)(v33 + 16 * v29 + 8);
            if (v36) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v37 = (std::__shared_weak_count *)*((void *)v34 + 6);
            *(_OWORD *)(v34 + 40) = v35;
            if (v37) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v37);
            }
          }
          ++v29;
          std::string::size_type v28 = v57.__r_.__value_.__r.__words[0];
        }
        while (v29 < (uint64_t)(v57.__r_.__value_.__l.__size_ - v57.__r_.__value_.__r.__words[0]) >> 4);
      }
      v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
      v57.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v57);
      v11 += 2;
    }
    while (v11 != v12);
  }
  MIL::IRMutableScope::Make();
}

void sub_20F357E14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v30 - 192);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v30 - 144);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'anonymous namespace'::IRBlockImpl::BuildScopeCache(_anonymous_namespace_::IRBlockImpl *this)
{
}

void std::__function::__func<anonymous namespace'::IRBlockImpl::SetOperations(std::vector<std::shared_ptr<MIL::IROperation>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IROperation>> &&>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetOperations(std::vector<std::shared_ptr<MIL::IROperation>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IROperation>> &&>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C251AE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetOperations(std::vector<std::shared_ptr<MIL::IROperation>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IROperation>> &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C251AE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<anonymous namespace'::IRBlockImpl::SetOperations(std::vector<std::shared_ptr<MIL::IROperation>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IROperation>> &&>,void ()(void)>::operator()(uint64_t a1)
{
  std::string::size_type v33 = (uint64_t *)(*(void *)(a1 + 8) + 216);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__clear[abi:ne180100](v33);
  memset(v39, 0, sizeof(v39));
  int v40 = 1065353216;
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  int v3 = (long long *)*v2;
  char v32 = (long long *)v2[1];
  if ((long long *)*v2 != v32)
  {
    uint64_t v31 = a1;
    do
    {
      std::string v4 = (void *)(*(uint64_t (**)(void))(**(void **)v3 + 160))();
      uint64_t v6 = v4 + 1;
      char v5 = (void *)*v4;
      if ((void *)*v4 != v4 + 1)
      {
        do
        {
          long long v8 = (MIL::IRArgument **)v5[7];
          uint64_t v7 = (MIL::IRArgument **)v5[8];
          while (v8 != v7)
          {
            if ((*(unsigned int (**)(void))(*(void *)*v8 + 16))())
            {
              Name = (unsigned __int8 *)MIL::IRArgument::GetName(*v8);
              if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v39, Name))
              {
                uint64_t v10 = (MIL::Util *)(*(uint64_t (**)(void))(**(void **)v3 + 64))();
                if (MIL::Util::IsConstexprOpTakingInputs(v10, v11))
                {
                  uint64_t v12 = *(void *)v3;
                  uint64_t v13 = MIL::IRArgument::GetName(*v8);
                  long long v35 = (unsigned __int8 *)MIL::IRArgument::GetName(*v8);
                  unint64_t v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v39, v35, (uint64_t)&std::piecewise_construct, (long long **)&v35);
                  uint64_t v15 = (std::__shared_weak_count *)*((void *)v14 + 6);
                  uint64_t v37 = *((void *)v14 + 5);
                  uint64_t v38 = v15;
                  if (v15) {
                    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v12 + 248))(v12, v13, &v37);
                  if (v38) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
                  }
                }
              }
            }
            v8 += 2;
          }
          std::string::size_type v16 = (void *)v5[1];
          if (v16)
          {
            do
            {
              uint64_t v17 = v16;
              std::string::size_type v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              uint64_t v17 = (void *)v5[2];
              BOOL v18 = *v17 == (void)v5;
              char v5 = v17;
            }
            while (!v18);
          }
          char v5 = v17;
        }
        while (v17 != v6);
      }
      uint64_t v19 = (*(uint64_t (**)(void))(**(void **)v3 + 72))();
      uint64_t v20 = v19;
      if (v19 && (*(unsigned int (**)(uint64_t))(*(void *)v19 + 104))(v19))
      {
        (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, void))(*(void *)v20 + 248))(&v35, v20, *(void *)v3);
        if (v36 != (long long *)v35)
        {
          uint64_t v21 = 0;
          unint64_t v22 = 0;
          do
          {
            std::string::size_type v23 = (void *)(*(uint64_t (**)(void))(**(void **)v3 + 176))();
            uint64_t v24 = MIL::IRNamedValueType::GetName(*(MIL::IRNamedValueType **)(*v23 + v21));
            if (*(char *)(v24 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v24, *(void *)(v24 + 8));
            }
            else
            {
              long long v25 = *(_OWORD *)v24;
              v34.__r_.__value_.__r.__words[2] = *(void *)(v24 + 16);
              *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v25;
            }
            uint64_t v26 = v35;
            char v41 = &v34;
            uint64_t v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v39, (unsigned __int8 *)&v34, (uint64_t)&std::piecewise_construct, (long long **)&v41);
            long long v28 = *(_OWORD *)&v26[16 * v22];
            uint64_t v29 = *(void *)&v26[16 * v22 + 8];
            if (v29) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v30 = (std::__shared_weak_count *)*((void *)v27 + 6);
            *(_OWORD *)(v27 + 40) = v28;
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
            if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v34.__r_.__value_.__l.__data_);
            }
            ++v22;
            v21 += 16;
          }
          while (v22 < ((char *)v36 - (char *)v35) >> 4);
        }
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      }
      std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100](v33, v3++);
    }
    while (v3 != v32);
    uint64_t v2 = *(uint64_t **)(v31 + 16);
  }
  std::vector<std::shared_ptr<MIL::IRBlock>>::__clear[abi:ne180100](v2);
  operator new();
}

void sub_20F3584A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

uint64_t std::__function::__func<anonymous namespace'::IRBlockImpl::SetOperations(std::vector<std::shared_ptr<MIL::IROperation>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IROperation>> &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRBlockImpl::SetOperations(std::vector<std::shared_ptr<MIL::IROperation>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IROperation>> &&>,void ()(void)>::target_type()
{
}

void **std::vector<std::shared_ptr<MIL::IROperation>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    unint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<MIL::IROperation>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20F358668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      unint64_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::string::size_type i = *v14; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::string::size_type v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F358A04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F358AA4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::IRBlockImpl::SetInputs(std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetInputs(std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C251B70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetInputs(std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C251B70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetInputs(std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(__n128 **)(a1 + 16);
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)(v1 + 168));
  __n128 result = *v2;
  *(__n128 *)(v1 + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *v2;
  *(void *)(v1 + 184) = v2[1].n128_u64[0];
  v2->n128_u64[0] = 0;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRBlockImpl::SetInputs(std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRBlockImpl::SetInputs(std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&)::{lambda(void)#1},std::allocator<std::vector<std::shared_ptr<MIL::IRNamedValueType>> &&>,void ()(void)>::target_type()
{
}

void std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<MIL::IRBlock>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__function::__func<anonymous namespace'::IRBlockImpl::SetOutputs(std::vector<std::string> &&)::{lambda(void)#1},std::allocator<std::vector<std::string> &&>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetOutputs(std::vector<std::string> &&)::{lambda(void)#1},std::allocator<std::vector<std::string> &&>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C251BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetOutputs(std::vector<std::string> &&)::{lambda(void)#1},std::allocator<std::vector<std::string> &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C251BF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetOutputs(std::vector<std::string> &&)::{lambda(void)#1},std::allocator<std::vector<std::string> &&>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(std::vector<std::string> **)(a1 + 8);
  uint64_t v2 = *(__n128 **)(a1 + 16);
  std::vector<std::string>::__vdeallocate(v1 + 8);
  __n128 result = *v2;
  *(__n128 *)&v1[8].__begin_ = *v2;
  v1[8].__end_cap_.__value_ = (std::string *)v2[1].n128_u64[0];
  v2->n128_u64[0] = 0;
  v2->n128_u64[1] = 0;
  v2[1].n128_u64[0] = 0;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRBlockImpl::SetOutputs(std::vector<std::string> &&)::{lambda(void)#1},std::allocator<std::vector<std::string> &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRBlockImpl::SetOutputs(std::vector<std::string> &&)::{lambda(void)#1},std::allocator<std::vector<std::string> &&>,void ()(void)>::target_type()
{
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

void std::__function::__func<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C251C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C251C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result)
{
  *(void *)(*(void *)(result + 8) + 160) = **(void **)(result + 16);
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRBlockImpl::SetParent(MIL::IRScope const*)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void **anonymous namespace'::IRBlockImpl::CopyInputs@<X0>(_anonymous_namespace_::IRBlockImpl *this@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __n128 result = std::vector<std::shared_ptr<MIL::IRNamedValueType>>::reserve(a2, (uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 4);
  unint64_t v4 = (MIL::IRNamedValueType **)*((void *)this + 21);
  if (v4 != *((MIL::IRNamedValueType ***)this + 22))
  {
    uint64_t Name = MIL::IRNamedValueType::GetName(*v4);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)Name, *(void *)(Name + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)Name;
      __p.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    MIL::IRNamedValueType::GetType(*v4);
    MIL::IRNamedValueType::Make();
  }
  return result;
}

void sub_20F3590DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
}

void **std::vector<std::shared_ptr<MIL::IRNamedValueType>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  __n128 result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 16 * v6;
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v7);
  }
  return result;
}

void sub_20F3591CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::reverse_iterator<std::shared_ptr<MIL::IRNamedValueType>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void **std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void ***)(a1 + 24);
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRNamedValueType  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void **std::unique_ptr<MIL::IRNamedValueType>::reset[abi:ne180100](void ***a1, void **a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IRNamedValueType::~IRNamedValueType(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_20F3594A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  long long v11 = this;
  uint8x8_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint8x8_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_20F35960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

uint64_t anonymous namespace'::IRBlockImpl::LinearSearchOutputsForIdentifier(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  uint64_t v4 = *(MIL::IRNamedValueType ***)v3;
  uint64_t v5 = *(MIL::IRNamedValueType ***)(v3 + 8);
  while (v4 != v5)
  {
    uint64_t Name = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v4);
    uint64_t v7 = Name[23];
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = Name[23];
    }
    else {
      uint64_t v8 = *((void *)Name + 1);
    }
    uint64_t v9 = a2[23];
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *((void *)a2 + 1);
    }
    if (v8 == v9)
    {
      if (v10 >= 0) {
        long long v11 = a2;
      }
      else {
        long long v11 = *(unsigned __int8 **)a2;
      }
      if ((v7 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)Name, v11, *((void *)Name + 1))) {
          return 1;
        }
      }
      else
      {
        if (!Name[23]) {
          return 1;
        }
        while (*Name == *v11)
        {
          ++Name;
          ++v11;
          if (!--v7) {
            return 1;
          }
        }
      }
    }
    v4 += 2;
  }
  return 0;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_20F3598F8(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x21056C620](v1);
  _Unwind_Resume(a1);
}

void MIL::ValidationError::~ValidationError(std::runtime_error *this)
{
  this->__vftable = (std::runtime_error_vtbl *)&unk_26C25DAE8;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&this[1]);

  std::runtime_error::~runtime_error(this);
}

{
  uint64_t vars8;

  this->__vftable = (std::runtime_error_vtbl *)&unk_26C25DAE8;
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&this[1]);
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x21056C700);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21056C620](a1 + 112);
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const* const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (std::string::size_type i = *v15; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__construct_node_hash<std::string const&,MIL::IRValueType const* const&>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_20F359CDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__construct_node_hash<std::string const&,MIL::IRValueType const* const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)(a5 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  unint64_t v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  void v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
}

void sub_20F359D9C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x21056C390](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      unint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x21056C3A0](v13);
  return a1;
}

void sub_20F359EF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x21056C3A0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x20F359ED4);
}

void sub_20F359F48(_Unwind_Exception *a1)
{
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      uint8x8_t v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_20F35A0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    uint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

void *std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F35A1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const*>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (std::string::size_type i = *v15; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__construct_node_hash<std::string const&,MIL::IRValueType const*>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v27[0];
  ++*v9;
  return i;
}

void sub_20F35A5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__construct_node_hash<std::string const&,MIL::IRValueType const*>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)(a5 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
  *(void *)a5 = v10;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  unint64_t v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  void v10[5] = *a4;
  *(unsigned char *)(a5 + 16) = 1;
}

void sub_20F35A68C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void *MIL::IRDataTypeToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  uint64_t v4 = 0;
  {
    v4 += 4;
    if (v4 == 92) {
      return std::string::basic_string[abi:ne180100]<0>(a2, *((char **)v5 + 1));
    }
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, *((char **)v5 + 1));
}

uint64_t MIL::StringToIRDataType(const void **a1, char a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = *((unsigned __int8 *)a1 + 23);
  size_t v7 = (const void **)*a1;
  uint64_t v6 = a1[1];
  do
  {
    size_t v9 = v8;
    if ((v5 & 0x80) != 0)
    {
      if ((const void *)v8 != v6) {
        goto LABEL_8;
      }
      unint64_t v10 = v7;
      if (v6 == (const void *)-1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
    }
    else
    {
      unint64_t v10 = a1;
      if (v9 != v5) {
        goto LABEL_8;
      }
    }
LABEL_8:
    v4 += 4;
  }
  while (v4 != 92);
  if ((a2 & 1) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint8x8_t v13 = std::string::append(&v15, " does not map to a data value type.");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v16);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return 18;
}

void sub_20F35A83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *MIL::GetValidTensorDataTypes(MIL *this)
{
}

void *MIL::GetUnsupportedTensorDataTypes(MIL *this)
{
}

void std::string::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
}

void sub_20F35A920(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

BOOL MIL::IsFloat(int a1)
{
  uint64_t v1 = 0;
  {
    if (++v1 == 6) {
  }
    }
}

BOOL MIL::IsSignedInt(int a1)
{
  uint64_t v1 = 0;
  {
    if (++v1 == 5) {
  }
    }
}

BOOL MIL::IsUnsignedInt(int a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = (int *)"N3MIL10IRFunctionE";
  {
    if (++v1 == 9) {
  }
    }
}

void MIL::IRFunction::~IRFunction(MIL::IRFunction *this)
{
  MIL::IRCachedScope::~IRCachedScope((MIL::IRFunction *)((char *)this + 64));

  MIL::IRObject::~IRObject(this);
}

void *MIL::IRFunction::IRFunction(void *a1, long long *a2, uint64_t *a3)
{
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::IRObject::IRObject((uint64_t)a1, (uint64_t)&v5, a3);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  MIL::IRCachedScope::IRCachedScope((MIL::IRCachedScope *)(a1 + 8));
  *a1 = &unk_26C251D50;
  a1[8] = &unk_26C251E58;
  return a1;
}

void sub_20F35AB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  MIL::IRObject::~IRObject(v10);
  _Unwind_Resume(a1);
}

void MIL::IRFunction::Make(long long *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  long long v9 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v8 = *(void *)(a3 + 16);
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  long long v4 = 0u;
  long long v5 = 0u;
  int v6 = 1065353216;
  MIL::IRFunction::Make((uint64_t)&v9, a2, (uint64_t)__p, a4);
}

void sub_20F35ABC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (a20 < 0) {
    operator delete(__p);
  }
  int v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void MIL::IRFunction::Make(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v13 = *(std::string *)a3;
  }
  v12[0] = 0;
  v12[1] = 0;
  unint64_t v11 = v12;
  *(_OWORD *)std::string __p = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  uint64_t v5 = *a4;
  *a4 = 0;
  std::string::size_type v6 = v13.__r_.__value_.__r.__words[2];
  memset(&v13, 0, sizeof(v13));
  std::string::size_type v9 = v6;
  uint64_t v10 = v5;
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>(&v11, (const void **)__p, (long long *)__p);
  uint64_t v7 = v10;
  uint64_t v10 = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F35AD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::make_unique[abi:ne180100]<anonymous namespace'::IRFunctionImpl,std::shared_ptr<MIL::Location const>,std::map<std::string,MIL::IRValueType const*>,std::string,std::map<std::string,std::unique_ptr<MIL::IRBlock>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

void sub_20F35AEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C402FF647B4);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::IRFunctionImpl **std::unique_ptr<anonymous namespace'::IRFunctionImpl>::~unique_ptr[abi:ne180100](_anonymous_namespace_::IRFunctionImpl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MEMORY[0x21056C700]();
  }
  return a1;
}

void MIL::IRFunction::Make(long long *a1, uint64_t a2, uint64_t a3)
{
  long long v8 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  uint64_t v7 = *(void *)(a3 + 16);
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  int v5 = 1065353216;
}

void sub_20F35AFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (a20 < 0) {
    operator delete(__p);
  }
  int v22 = *(std::__shared_weak_count **)(v20 - 40);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  _Unwind_Resume(a1);
}

void MIL::IRFunction::Make()
{
}

void MIL::IRFunction::ToString(MIL::IRFunction *this)
{
}

void sub_20F35B1B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v18 = *(void *)(v16 - 40);
  *(void *)(v16 - 40) = 0;
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    long long v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>(uint64_t **a1, const void **a2, long long *a3)
{
  int v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  std::string::size_type v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    std::string::size_type v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        long long v8 = (void *)v4;
        std::string::size_type v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        int v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      int v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    long long v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

std::string *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  std::string::size_type v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20F35B480(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  uint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    std::string::size_type v6 = a2;
  }
  else {
    std::string::size_type v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    long long v8 = a3;
  }
  else {
    long long v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

std::string *std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::string::size_type v5 = *((void *)a2 + 3);
  *((void *)a2 + 3) = 0;
  this[1].__r_.__value_.__r.__words[0] = v5;
  return this;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      int v3 = (uint64_t *)v2[2];
      long long v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), std::string::size_type v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            size_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            size_t v9 = (uint64_t **)v2[1];
            int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              int v3 = (uint64_t *)v2[2];
            }
            uint64_t v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *size_t v9 = v2;
            v2[2] = (uint64_t)v9;
            int v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), std::string::size_type v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            int v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          int v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *std::string::size_type v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void anonymous namespace'::IRFunctionImpl::~IRFunctionImpl(_anonymous_namespace_::IRFunctionImpl *this)
{
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy((uint64_t)this + 232, *((void **)this + 30));
  if (*((char *)this + 231) < 0) {
    operator delete(*((void **)this + 26));
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)this + 184, *((char **)this + 24));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MIL::IRCachedScope::~IRCachedScope((_anonymous_namespace_::IRFunctionImpl *)((char *)this + 64));

  MIL::IRObject::~IRObject(this);
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

void non-virtual thunk to'anonymous namespace'::IRFunctionImpl::~IRFunctionImpl(_anonymous_namespace_::IRFunctionImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

uint64_t anonymous namespace'::IRFunctionImpl::IRFunctionImpl(uint64_t a1, uint64_t a2, void *a3, long long *a4, void *a5, uint64_t *a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  long long v26 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  MIL::IRFunction::IRFunction((void *)a1, &v26, a6);
  if (*((void *)&v26 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v26 + 1));
  }
  *(void *)a1 = &unk_26C251EF8;
  *(void *)(a1 + 64) = &unk_26C252008;
  *(void *)(a1 + 16std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 184) = *a3;
  int v10 = a3 + 1;
  uint64_t v11 = a3[1];
  *(void *)(a1 + 192) = v11;
  uint64_t v12 = a1 + 192;
  uint64_t v13 = a3[2];
  *(void *)(a1 + 200) = v13;
  if (v13)
  {
    *(void *)(v11 + 16) = v12;
    *a3 = v10;
    void *v10 = 0;
    a3[2] = 0;
  }
  else
  {
    *(void *)(a1 + 184) = v12;
  }
  long long v14 = *a4;
  *(void *)(a1 + 224) = *((void *)a4 + 2);
  *(_OWORD *)(a1 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v14;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  *(void *)(a1 + 232) = *a5;
  std::string v15 = a5 + 1;
  uint64_t v16 = a5[1];
  *(void *)(a1 + 240) = v16;
  uint64_t v17 = a1 + 240;
  uint64_t v18 = a5[2];
  *(void *)(a1 + 24std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v18;
  if (v18)
  {
    *(void *)(v16 + 16) = v17;
    *a5 = v15;
    *std::string v15 = 0;
    a5[2] = 0;
  }
  else
  {
    *(void *)(a1 + 232) = v17;
  }
  uint64_t v19 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 232, (const void **)(a1 + 208));
  if (v17 == v19)
  {
    exception = __cxa_allocate_exception(0x48uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr((MIL::IRObject *)a1);
    uint64_t v23 = LocationPtr[1];
    *(void *)&long long v28 = *LocationPtr;
    *((void *)&v28 + 1) = v23;
    if (v23) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v23 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    unint64_t v24 = std::string::append(&v27, "' not in blocks.");
    long long v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    std::string::size_type v30 = v24->__r_.__value_.__r.__words[2];
    long long v29 = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationError::ValidationError((uint64_t)exception, &v28, (uint64_t)&v29, 203);
  }
  *(void *)(a1 + 256) = *(void *)(v19 + 56);
  *(void *)&long long v29 = &unk_26C252088;
  *((void *)&v29 + 1) = a1;
  uint64_t v31 = &v29;
  MIL::IRCachedScope::InvalidateAndCall(a1 + 64, (uint64_t)&v29);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v29);
  return a1;
}

void sub_20F35BAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, std::__shared_weak_count *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a19)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
    if ((v31 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (!v31)
  {
LABEL_10:
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v29, *(void **)(v25 + 240));
    if (*(char *)(v25 + 231) < 0) {
      operator delete(*v28);
    }
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v27, *(char **)(v25 + 192));
    std::string::size_type v33 = *(std::__shared_weak_count **)(v25 + 168);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    MIL::IRCachedScope::~IRCachedScope(v26);
    MIL::IRObject::~IRObject((MIL::IRObject *)v25);
    _Unwind_Resume(a1);
  }
  __cxa_free_exception(v30);
  goto LABEL_10;
}

void sub_20F35BBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  JUMPOUT(0x20F35BBC0);
}

uint64_t anonymous namespace'::IRFunctionImpl::EqualsImpl(_anonymous_namespace_::IRFunctionImpl *this, const MIL::IRObject *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    if (*((void *)this + 25) == *(void *)(result + 200))
    {
      std::string::size_type v5 = (_anonymous_namespace_::IRFunctionImpl *)*((void *)this + 23);
      if (v5 != (_anonymous_namespace_::IRFunctionImpl *)((char *)this + 192))
      {
        uint64_t v6 = result + 192;
        do
        {
          uint64_t v7 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v4 + 184, (const void **)v5 + 4);
          if (v6 == v7 || *((void *)v5 + 7) != *(void *)(v7 + 56)) {
            return 0;
          }
          int v8 = (_anonymous_namespace_::IRFunctionImpl *)*((void *)v5 + 1);
          if (v8)
          {
            do
            {
              size_t v9 = v8;
              int v8 = *(_anonymous_namespace_::IRFunctionImpl **)v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              size_t v9 = (_anonymous_namespace_::IRFunctionImpl *)*((void *)v5 + 2);
              BOOL v10 = *(void *)v9 == (void)v5;
              std::string::size_type v5 = v9;
            }
            while (!v10);
          }
          std::string::size_type v5 = v9;
        }
        while (v9 != (_anonymous_namespace_::IRFunctionImpl *)((char *)this + 192));
      }
      uint64_t v11 = *((unsigned __int8 *)this + 231);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *((unsigned __int8 *)this + 231);
      }
      else {
        uint64_t v12 = *((void *)this + 27);
      }
      uint64_t v13 = *(unsigned __int8 *)(v4 + 231);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        uint64_t v13 = *(void *)(v4 + 216);
      }
      if (v12 == v13)
      {
        std::string v15 = (const void **)((char *)this + 208);
        if (v14 >= 0) {
          uint64_t v16 = (unsigned __int8 *)(v4 + 208);
        }
        else {
          uint64_t v16 = *(unsigned __int8 **)(v4 + 208);
        }
        if ((v11 & 0x80) == 0)
        {
          if (*((unsigned char *)this + 231))
          {
            while (*(unsigned __int8 *)v15 == *v16)
            {
              std::string v15 = (const void **)((char *)v15 + 1);
              ++v16;
              if (!--v11) {
                goto LABEL_28;
              }
            }
            return 0;
          }
LABEL_28:
          if (*((void *)this + 31) == *(void *)(v4 + 248))
          {
            uint64_t v17 = (const void **)*((void *)this + 29);
            uint64_t v18 = (const void ***)((char *)this + 240);
            if (v17 == (const void **)((char *)this + 240)) {
              return 1;
            }
            uint64_t v19 = v4 + 232;
            uint64_t v20 = v4 + 240;
            while (1)
            {
              uint64_t v21 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v19, v17 + 4);
              if (v20 == v21) {
                break;
              }
              uint64_t result = MIL::IRObject::Equals((MIL::IRObject *)v17[7], *(const MIL::IRObject **)(v21 + 56));
              if (result)
              {
                int v22 = (const void **)v17[1];
                if (v22)
                {
                  do
                  {
                    uint64_t v23 = (const void ***)v22;
                    int v22 = (const void **)*v22;
                  }
                  while (v22);
                }
                else
                {
                  do
                  {
                    uint64_t v23 = (const void ***)v17[2];
                    BOOL v10 = *v23 == v17;
                    uint64_t v17 = (const void **)v23;
                  }
                  while (!v10);
                }
                uint64_t result = 1;
                uint64_t v17 = (const void **)v23;
                if (v23 != v18) {
                  continue;
                }
              }
              return result;
            }
          }
          return 0;
        }
        if (!memcmp(*v15, v16, *((void *)this + 27))) {
          goto LABEL_28;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t anonymous namespace'::IRFunctionImpl::SelectedSpecialization(_anonymous_namespace_::IRFunctionImpl *this)
{
  return (uint64_t)this + 208;
}

uint64_t anonymous namespace'::IRFunctionImpl::GetBlock(_anonymous_namespace_::IRFunctionImpl *this)
{
  return *((void *)this + 32);
}

{
  MIL::IRCachedScope::DisableCache((_anonymous_namespace_::IRFunctionImpl *)((char *)this + 64));
  return *((void *)this + 32);
}

void anonymous namespace'::IRFunctionImpl::SpecializationNames(_anonymous_namespace_::IRFunctionImpl *this@<X0>, char **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::string const*>::reserve((void **)a2, *((void *)this + 31));
  uint64_t v4 = (char *)*((void *)this + 29);
  std::string::size_type v5 = (char *)this + 240;
  if (v4 != (char *)this + 240)
  {
    uint64_t v6 = a2 + 2;
    uint64_t v7 = a2[1];
    do
    {
      int v8 = v4 + 32;
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = (v7 - *a2) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = *v6 - (void)*a2;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0;
        }
        int v14 = &v13[8 * v9];
        *(void *)int v14 = v8;
        uint64_t v7 = v14 + 8;
        uint64_t v16 = *a2;
        std::string v15 = a2[1];
        if (v15 != *a2)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          std::string v15 = *a2;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)uint64_t v7 = v8;
        v7 += 8;
      }
      a2[1] = v7;
      uint64_t v18 = (char *)*((void *)v4 + 1);
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (char *)*((void *)v4 + 2);
          BOOL v20 = *(void *)v19 == (void)v4;
          uint64_t v4 = v19;
        }
        while (!v20);
      }
      uint64_t v4 = v19;
    }
    while (v19 != v5);
  }
}

void sub_20F35BFC4(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::IRFunctionImpl::TrySpecializationForName(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 232, a2);
  if (a1 + 240 == v3) {
    return 0;
  }
  else {
    return *(void *)(v3 + 56);
  }
}

uint64_t anonymous namespace'::IRFunctionImpl::CopySpecializationForName@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 232, a2);
  if (a1 + 240 == result)
  {
    *a3 = 0;
  }
  else
  {
    uint64_t v6 = *(uint64_t (**)(void))(**(void **)(result + 56) + 32);
    return v6();
  }
  return result;
}

void *anonymous namespace'::IRFunctionImpl::SetBlock(uint64_t a1, uint64_t a2)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C252108;
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = v3;
  MIL::IRCachedScope::InvalidateAndCall(a1 + 64, (uint64_t)v3);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
}

void sub_20F35C130(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRFunctionImpl::SetSpecialization(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  __p[0] = &unk_26C252188;
  __p[1] = a3;
  uint64_t v10 = a1;
  uint64_t v11 = __p;
  MIL::IRCachedScope::InvalidateAndCall(a1 + 64, (uint64_t)__p);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](__p);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v7 = (void **)*a3;
  *a3 = 0;
  uint64_t v10 = v6;
  uint64_t v11 = v7;
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>((uint64_t **)(a1 + 232), (const void **)__p, (long long *)__p);
  int v8 = v11;
  uint64_t v11 = 0;
  if (v8) {
    (*((void (**)(void **))*v8 + 1))(v8);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F35C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *anonymous namespace'::IRFunctionImpl::UseSpecialization(uint64_t a1, std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 208), a2);
  uint64_t result = (void *)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(a1 + 232, (const void **)&a2->__r_.__value_.__l.__data_);
  *(void *)(a1 + 256) = *result;
  return result;
}

uint64_t anonymous namespace'::IRFunctionImpl::RemoveSpecialization(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 231);
  if ((v4 & 0x80u) == 0) {
    std::string::size_type v5 = (const void *)*(unsigned __int8 *)(a1 + 231);
  }
  else {
    std::string::size_type v5 = *(const void **)(a1 + 216);
  }
  uint64_t v6 = (const void *)*((unsigned __int8 *)a2 + 23);
  int v7 = (char)v6;
  if ((char)v6 < 0) {
    uint64_t v6 = a2[1];
  }
  if (v5 != v6) {
    goto LABEL_15;
  }
  int v8 = (const void **)(a1 + 208);
  if (v7 < 0) {
    a2 = (const void **)*a2;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, a2, *(void *)(a1 + 216))) {
      goto LABEL_15;
    }
LABEL_13:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v10 = std::string::append(&v13, "').");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (!*(unsigned char *)(a1 + 231)) {
    goto LABEL_13;
  }
  while (*(unsigned __int8 *)v8 == *(unsigned __int8 *)a2)
  {
    int v8 = (const void **)((char *)v8 + 1);
    a2 = (const void **)((char *)a2 + 1);
    if (!--v4) {
      goto LABEL_13;
    }
  }
LABEL_15:

  return std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__erase_unique<std::string>((uint64_t **)(a1 + 232), v2);
}

void sub_20F35C3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t anonymous namespace'::IRFunctionImpl::GetSpecializations(_anonymous_namespace_::IRFunctionImpl *this)
{
  return (uint64_t)this + 232;
}

{
  MIL::IRCachedScope::DisableCache((_anonymous_namespace_::IRFunctionImpl *)((char *)this + 64));
  return (uint64_t)this + 232;
}

uint64_t anonymous namespace'::IRFunctionImpl::GetInputs(_anonymous_namespace_::IRFunctionImpl *this)
{
  return (uint64_t)this + 184;
}

void *anonymous namespace'::IRFunctionImpl::SetInputs(uint64_t a1, uint64_t a2)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C252208;
  v3[1] = a1;
  v3[2] = a2;
  v3[3] = v3;
  MIL::IRCachedScope::InvalidateAndCall(a1 + 64, (uint64_t)v3);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
}

void sub_20F35C518(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IRFunctionImpl::GetInputType(uint64_t a1, const void **a2)
{
  return *(void *)std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(a1 + 184, a2);
}

uint64_t anonymous namespace'::IRFunctionImpl::TryGetInputType(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 184, a2);
  if (a1 + 192 == v3) {
    return 0;
  }
  else {
    return *(void *)(v3 + 56);
  }
}

void anonymous namespace'::IRFunctionImpl::GetOutputTypes(_anonymous_namespace_::IRFunctionImpl *this@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *((void *)this + 32);
  uint64_t v4 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 88))(v3);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    uint64_t v7 = v3 + 64;
    do
    {
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v5, 1);
      uint64_t v9 = v8;
      long long v11 = (uint64_t *)a2[1];
      unint64_t v10 = (unint64_t)a2[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = ((char *)v11 - (unsigned char *)*a2) >> 3;
        if ((unint64_t)(v13 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v14 = v10 - (void)*a2;
        uint64_t v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a2 + 2), v16);
        }
        else {
          uint64_t v17 = 0;
        }
        uint64_t v18 = (uint64_t *)&v17[8 * v13];
        *uint64_t v18 = v9;
        uint64_t v12 = v18 + 1;
        BOOL v20 = (char *)*a2;
        uint64_t v19 = (char *)a2[1];
        if (v19 != *a2)
        {
          do
          {
            uint64_t v21 = *((void *)v19 - 1);
            v19 -= 8;
            *--uint64_t v18 = v21;
          }
          while (v19 != v20);
          uint64_t v19 = (char *)*a2;
        }
        *a2 = v18;
        a2[1] = v12;
        a2[2] = &v17[8 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        uint64_t *v11 = v8;
        uint64_t v12 = v11 + 1;
      }
      a2[1] = v12;
      v5 += 24;
    }
    while (v5 != v6);
  }
}

void sub_20F35C708(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::IRFunctionImpl::GetParentProgram(_anonymous_namespace_::IRFunctionImpl *this)
{
  uint64_t result = *((void *)this + 22);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot access non-existent parent of an IRFunction.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F35C788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IRFunctionImpl::TryGetParentProgram(_anonymous_namespace_::IRFunctionImpl *this)
{
  return *((void *)this + 22);
}

void *anonymous namespace'::IRFunctionImpl::SetParent(_anonymous_namespace_::IRFunctionImpl *this, const MIL::IRProgram *a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  uint64_t v3 = a2;
  v4[0] = &unk_26C252288;
  v4[1] = this;
  v4[2] = &v3;
  v4[3] = v4;
  MIL::IRCachedScope::InvalidateAndCall((uint64_t)this + 64, (uint64_t)v4);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
}

void sub_20F35C838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRFunctionImpl::WithBlock(uint64_t a1, uint64_t *a2)
{
  v8[0] = (long long *)(a1 + 208);
  uint64_t v4 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v10, (const void **)(a1 + 208), (uint64_t)&std::piecewise_construct, v8);
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = v4[7];
  v4[7] = v5;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  MIL::IRObject::GetLocationPtr((MIL::IRObject *)a1);
  std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](&v9, (const void ***)(a1 + 184));
  uint64_t Attributes = MIL::IRObject::GetAttributes((MIL::IRObject *)a1);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v8, Attributes);
}

void sub_20F35C968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&a14, a15);
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v15 - 56, *(void **)(v15 - 48));
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::IRFunctionImpl::HasSpecialization(uint64_t a1, const void **a2)
{
  return a1 + 240 != std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(a1 + 232, a2);
}

void anonymous namespace'::IRFunctionImpl::UsingSpecialization(const void ***a1)
{
  MIL::IRObject::GetLocationPtr((MIL::IRObject *)a1);
  std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](&v5, a1 + 23);
  uint64_t Attributes = MIL::IRObject::GetAttributes((MIL::IRObject *)a1);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v3, Attributes);
}

void sub_20F35CAC8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRFunctionImpl::WithNamedSpecialization(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v7 = *a3;
  *a3 = 0;
  uint64_t v11 = v6;
  uint64_t v12 = v7;
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>(&v14, (const void **)__p, (long long *)__p);
  uint64_t v8 = v12;
  uint64_t v12 = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  MIL::IRObject::GetLocationPtr((MIL::IRObject *)a1);
  std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](&v13, (const void ***)(a1 + 184));
  uint64_t Attributes = MIL::IRObject::GetAttributes((MIL::IRObject *)a1);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)__p, Attributes);
}

void sub_20F35CC74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v9 - 56, *(void **)(v9 - 48));
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRFunctionImpl::WithRenames(uint64_t a1, const void ***a2)
{
  std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100]((uint64_t *)&v21, (const void ***)(a1 + 184));
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      uint64_t v6 = (uint64_t *)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)&v21, v4);
      if (&v22 != v6)
      {
        uint64_t v7 = v6[7];
        v16.__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 3);
        std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v21, v4 + 3, (uint64_t)&std::piecewise_construct, (long long **)&v16)[7] = v7;
        std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__erase_unique<std::string>(&v21, v4);
      }
      v4 += 6;
    }
    while (v4 != v5);
  }
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v19 = v20;
  uint64_t v8 = *(void **)(a1 + 232);
  if (v8 != (void *)(a1 + 240))
  {
    do
    {
      (*(void (**)(uint64_t *__return_ptr))(*(void *)v8[7] + 120))(&v18);
      if (*((char *)v8 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v8[4], v8[5]);
      }
      else {
        std::string v16 = *(std::string *)(v8 + 4);
      }
      uint64_t v9 = v18;
      uint64_t v18 = 0;
      uint64_t v17 = v9;
      std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>(&v19, (const void **)&v16.__r_.__value_.__l.__data_, (long long *)&v16);
      uint64_t v10 = v17;
      uint64_t v17 = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
      uint64_t v11 = v18;
      uint64_t v18 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
      uint64_t v12 = (void *)v8[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)v8[2];
          BOOL v14 = *v13 == (void)v8;
          uint64_t v8 = v13;
        }
        while (!v14);
      }
      uint64_t v8 = v13;
    }
    while (v13 != (void *)(a1 + 240));
  }
  MIL::IRObject::GetLocationPtr((MIL::IRObject *)a1);
  uint64_t Attributes = MIL::IRObject::GetAttributes((MIL::IRObject *)a1);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v16, Attributes);
}

void sub_20F35D2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  __cxa_free_exception(v33);
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v34 - 128, *(void **)(v34 - 120));
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v34 - 104, *(char **)(v34 - 96));
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRFunctionImpl::Copy(_anonymous_namespace_::IRFunctionImpl *this)
{
  memset(v1, 0, sizeof(v1));
}

void sub_20F35D494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IRFunctionImpl::AlignSpecialization(_anonymous_namespace_::IRFunctionImpl *this)
{
  long long v49 = 0u;
  long long v50 = 0u;
  int v51 = 1065353216;
  MIL::IRCachedScope::DisableCache((_anonymous_namespace_::IRFunctionImpl *)((char *)this + 64));
  uint64_t v43 = this;
  uint64_t v42 = *((void *)this + 32);
  uint64_t v2 = (void ***)(*(uint64_t (**)(void))(*(void *)v42 + 64))();
  uint64_t v3 = **v2;
  uint64_t v4 = (*v2)[1];
  if (v3 != v4)
  {
    uint64_t v5 = (unsigned __int8 *)this + 208;
    while (1)
    {
      uint64_t v6 = *v3;
      if ((*(uint64_t (**)(void))(*(void *)*v3 + 232))(*v3)) {
        break;
      }
      if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(&v49, v5))
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 208;
        uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v49, v5, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
        int v14 = *((_DWORD *)v13 + 10) + 1;
      }
      else
      {
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)this + 208;
        uint64_t v13 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v49, v5, (uint64_t)&std::piecewise_construct, (long long **)&__dst);
        int v14 = 1;
      }
      *((_DWORD *)v13 + 10) = v14;
LABEL_21:
      v3 += 2;
      if (v3 == v4) {
        goto LABEL_22;
      }
    }
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 232))(v6);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
    std::string::size_type v10 = v9;
    if (v9 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (const void *)v8;
    if (v9 >= 0x17)
    {
      uint64_t v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v15 = v9 | 7;
      }
      uint64_t v16 = v15 + 1;
      p_dst = (std::string *)operator new(v15 + 1);
      __dst.__r_.__value_.__l.__size_ = v10;
      __dst.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v9;
      p_dst = &__dst;
      if (!v9)
      {
LABEL_14:
        p_dst->__r_.__value_.__s.__data_[v10] = 0;
        if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(&v49, (unsigned __int8 *)&__dst))
        {
          uint64_t v46 = &__dst;
          uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v49, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (long long **)&v46);
          int v18 = *((_DWORD *)v17 + 10) + 1;
        }
        else
        {
          uint64_t v46 = &__dst;
          uint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)&v49, (unsigned __int8 *)&__dst, (uint64_t)&std::piecewise_construct, (long long **)&v46);
          int v18 = 1;
        }
        *((_DWORD *)v17 + 10) = v18;
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        goto LABEL_21;
      }
    }
    memmove(p_dst, v11, v10);
    goto LABEL_14;
  }
LABEL_22:
  memset(&__dst, 0, sizeof(__dst));
  uint64_t v19 = (uint64_t *)v50;
  if ((void)v50)
  {
    int v20 = -1;
    do
    {
      int v21 = *((_DWORD *)v19 + 10);
      if (v21 > v20)
      {
        std::string::operator=(&__dst, (const std::string *)(v19 + 2));
        int v20 = v21;
      }
      uint64_t v19 = (uint64_t *)*v19;
    }
    while (v19);
    if (v20 > 0)
    {
      uint64_t v22 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      uint64_t v24 = *((unsigned __int8 *)v43 + 231);
      int v25 = (char)v24;
      if ((v24 & 0x80u) != 0) {
        uint64_t v24 = *((void *)v43 + 27);
      }
      if (size == v24)
      {
        if (v25 >= 0) {
          long long v26 = (unsigned __int8 *)v43 + 208;
        }
        else {
          long long v26 = (unsigned __int8 *)*((void *)v43 + 26);
        }
        if ((*((unsigned char *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__dst.__r_.__value_.__l.__data_, v26, __dst.__r_.__value_.__l.__size_)) {
            goto LABEL_63;
          }
        }
        else
        {
          if (!*((unsigned char *)&__dst.__r_.__value_.__s + 23)) {
            goto LABEL_63;
          }
          uint64_t v27 = &__dst;
          while (v27->__r_.__value_.__s.__data_[0] == *v26)
          {
            uint64_t v27 = (std::string *)((char *)v27 + 1);
            ++v26;
            if (!--v22) {
              goto LABEL_63;
            }
          }
        }
      }
      uint64_t v28 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)v43 + 232, (const void **)v43 + 26);
      if ((_anonymous_namespace_::IRFunctionImpl *)((char *)v43 + 240) == (_anonymous_namespace_::IRFunctionImpl *)v28)
      {
        uint64_t v28 = 0;
        char v29 = 0;
        uint64_t v47 = 0;
      }
      else
      {
        std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer((uint64_t **)v43 + 29, (uint64_t *)v28);
        char v29 = 1;
      }
      uint64_t v46 = (std::string *)v28;
      BYTE1(v47) = v29;
      std::string::operator=((std::string *)(v28 + 32), &__dst);
      std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__node_handle_insert_unique[abi:ne180100]<std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::allocator<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>,std::__map_node_handle_specifics>,std::__insert_return_type<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>*,long>>,std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::allocator<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>,std::__map_node_handle_specifics>>>((uint64_t **)v43 + 29, (uint64_t *)&v46, (uint64_t)v44);
      std::string::size_type v30 = v45;
      if (v45)
      {
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)v45 + 32);
        operator delete(v30);
        uint64_t v45 = 0;
      }
      std::string::operator=((std::string *)((char *)v43 + 208), &__dst);
      int v31 = (void ***)(*(uint64_t (**)(uint64_t))(*(void *)v42 + 64))(v42);
      uint64_t v32 = **v31;
      for (std::string::size_type i = (*v31)[1]; v32 != i; v32 += 2)
      {
        uint64_t v34 = *v32;
        if ((*(uint64_t (**)(void))(*(void *)*v32 + 232))(*v32))
        {
          uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 232))(v34);
          uint64_t v36 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v35 + 16))(v35);
          size_t v38 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
              : __dst.__r_.__value_.__l.__size_;
          if (v37 == v38)
          {
            uint64_t v39 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__dst
                : (std::string *)__dst.__r_.__value_.__r.__words[0];
            if (!memcmp(v36, v39, v38)) {
              (*(void (**)(uint64_t))(*(void *)v34 + 240))(v34);
            }
          }
        }
      }
      int v40 = (long long *)v46;
      if (v46)
      {
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)&v46[1].__r_.__value_.__l.__size_);
        operator delete(v40);
      }
    }
  }
LABEL_63:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v49);
}

void sub_20F35D9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRFunctionImpl::BuildScopeCache(_anonymous_namespace_::IRFunctionImpl *this)
{
  memset(v18, 0, sizeof(v18));
  int v19 = 1065353216;
  uint64_t v2 = (unsigned __int8 *)*((void *)this + 23);
  uint64_t v3 = (char *)this + 192;
  if (v2 != (unsigned __int8 *)((char *)this + 192))
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::string const&,MIL::IRValueType const* const&>((uint64_t)v18, v2 + 32, (uint64_t)(v2 + 32), (void *)v2 + 7);
      if (!v4)
      {
        exception = __cxa_allocate_exception(0x48uLL);
        LocationPtr = (void *)MIL::IRObject::GetLocationPtr(this);
        uint64_t v10 = LocationPtr[1];
        *(void *)&long long v17 = *LocationPtr;
        *((void *)&v17 + 1) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        uint64_t v11 = std::string::append((std::string *)v13, "'");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        std::string::size_type v16 = v11->__r_.__value_.__r.__words[2];
        long long v15 = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationError::ValidationError((uint64_t)exception, &v17, (uint64_t)&v15, 205);
      }
      uint64_t v5 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = *(unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (unsigned __int8 *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != (unsigned __int8 *)v3);
  }
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  MIL::IRMutableScope::Make();
}

void sub_20F35DBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

void non-virtual thunk to'anonymous namespace'::IRFunctionImpl::BuildScopeCache(_anonymous_namespace_::IRFunctionImpl *this)
{
}

uint64_t std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

void std::__function::__func<anonymous namespace'::IRFunctionImpl::IRFunctionImpl(std::shared_ptr<MIL::Location const>,std::map<std::string,MIL::IRValueType const*> &&,std::string,std::map<std::string,std::unique_ptr<MIL::IRBlock>> &&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> &&)::{lambda(void)#2},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,void ()(void)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::IRFunctionImpl::IRFunctionImpl(std::shared_ptr<MIL::Location const>,std::map<std::string,MIL::IRValueType const*> &&,std::string,std::map<std::string,std::unique_ptr<MIL::IRBlock>> &&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> &&)::{lambda(void)#2},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C252088;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::IRFunctionImpl(std::shared_ptr<MIL::Location const>,std::map<std::string,MIL::IRValueType const*> &&,std::string,std::map<std::string,std::unique_ptr<MIL::IRBlock>> &&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> &&)::{lambda(void)#2},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C252088;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::IRFunctionImpl(std::shared_ptr<MIL::Location const>,std::map<std::string,MIL::IRValueType const*> &&,std::string,std::map<std::string,std::unique_ptr<MIL::IRBlock>> &&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> &&)::{lambda(void)#2},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,void ()(void)>::operator()(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = *(void **)(v1 + 232);
  uint64_t v3 = (void *)(v1 + 240);
  if (v2 != (void *)(v1 + 240))
  {
    uint64_t v4 = v1 + 64;
    do
    {
      uint64_t result = (*(uint64_t (**)(void, uint64_t))(*(void *)v2[7] + 104))(v2[7], v4);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::IRFunctionImpl(std::shared_ptr<MIL::Location const>,std::map<std::string,MIL::IRValueType const*> &&,std::string,std::map<std::string,std::unique_ptr<MIL::IRBlock>> &&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> &&)::{lambda(void)#2},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRFunctionImpl::IRFunctionImpl(std::shared_ptr<MIL::Location const>,std::map<std::string,MIL::IRValueType const*> &&,std::string,std::map<std::string,std::unique_ptr<MIL::IRBlock>> &&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> &&)::{lambda(void)#2},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,void ()(void)>::target_type()
{
}

void std::vector<std::string const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v3, a2);
    BOOL v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::__function::__func<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C252108;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C252108;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  *(void *)(v1 + 256) = *v2;
  BOOL v7 = (long long *)(v1 + 208);
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(v1 + 232), (const void **)(v1 + 208), (uint64_t)&std::piecewise_construct, &v7);
  uint64_t v4 = *v2;
  uint64_t *v2 = 0;
  uint64_t v5 = v3[7];
  v3[7] = v4;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 256) + 104))(*(void *)(v1 + 256), v1 + 64);
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetBlock(std::unique_ptr<MIL::IRBlock>)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  BOOL v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    BOOL v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  BOOL v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20F35E214(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__function::__func<anonymous namespace'::IRFunctionImpl::SetSpecialization(std::string,std::unique_ptr<MIL::IRBlock> &&)::{lambda(void)#1},std::allocator<std::unique_ptr<MIL::IRBlock> &&>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRFunctionImpl::SetSpecialization(std::string,std::unique_ptr<MIL::IRBlock> &&)::{lambda(void)#1},std::allocator<std::unique_ptr<MIL::IRBlock> &&>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C252188;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRFunctionImpl::SetSpecialization(std::string,std::unique_ptr<MIL::IRBlock> &&)::{lambda(void)#1},std::allocator<std::unique_ptr<MIL::IRBlock> &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C252188;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::SetSpecialization(std::string,std::unique_ptr<MIL::IRBlock> &&)::{lambda(void)#1},std::allocator<std::unique_ptr<MIL::IRBlock> &&>,void ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(***(void ***)(a1 + 8) + 104))(**(void **)(a1 + 8), *(void *)(a1 + 16) + 64);
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::SetSpecialization(std::string,std::unique_ptr<MIL::IRBlock> &&)::{lambda(void)#1},std::allocator<std::unique_ptr<MIL::IRBlock> &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRFunctionImpl::SetSpecialization(std::string,std::unique_ptr<MIL::IRBlock> &&)::{lambda(void)#1},std::allocator<std::unique_ptr<MIL::IRBlock> &&>,void ()(void)>::target_type()
{
}

uint64_t std::map<std::string,std::unique_ptr<MIL::IRBlock>>::at(uint64_t a1, const void **a2)
{
  uint64_t v2 = *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>(a1, &v4, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  }
  return v2 + 56;
}

uint64_t std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3 = (uint64_t *)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  uint64_t v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  uint64_t v6 = (uint64_t **)v3[2];
  BOOL v7 = *v6;
  if (*v6 == v3)
  {
    *uint64_t v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      BOOL v7 = 0;
      __n128 result = (uint64_t *)v2;
    }
    else
    {
      BOOL v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      *uint64_t v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        __n128 result = v7;
      }
      BOOL v7 = *(uint64_t **)(*v7 + 8);
    }
    long long v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      std::string::size_type v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *BOOL v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        std::string::size_type v16 = v7;
      }
      else
      {
        long long v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    std::string::size_type v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    BOOL v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      __n128 result = v7;
    }
    BOOL v7 = *(uint64_t **)v12;
  }
  int v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  int v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    int v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    void v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    uint64_t *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    int v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void std::__function::__func<anonymous namespace'::IRFunctionImpl::SetInputs(std::map<std::string,MIL::IRValueType const*> &&)::{lambda(void)#1},std::allocator<std::map<std::string,MIL::IRValueType const*> &&>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRFunctionImpl::SetInputs(std::map<std::string,MIL::IRValueType const*> &&)::{lambda(void)#1},std::allocator<std::map<std::string,MIL::IRValueType const*> &&>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C252208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRFunctionImpl::SetInputs(std::map<std::string,MIL::IRValueType const*> &&)::{lambda(void)#1},std::allocator<std::map<std::string,MIL::IRValueType const*> &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C252208;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<anonymous namespace'::IRFunctionImpl::SetInputs(std::map<std::string,MIL::IRValueType const*> &&)::{lambda(void)#1},std::allocator<std::map<std::string,MIL::IRValueType const*> &&>,void ()(void)>::operator()(uint64_t a1)
{
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::SetInputs(std::map<std::string,MIL::IRValueType const*> &&)::{lambda(void)#1},std::allocator<std::map<std::string,MIL::IRValueType const*> &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRFunctionImpl::SetInputs(std::map<std::string,MIL::IRValueType const*> &&)::{lambda(void)#1},std::allocator<std::map<std::string,MIL::IRValueType const*> &&>,void ()(void)>::target_type()
{
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__move_assign(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a1, *(char **)(a1 + 8));
  *(void *)a1 = *a2;
  int v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *int v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::__function::__func<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C252288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C252288;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t result)
{
  *(void *)(*(void *)(result + 8) + 176) = **(void **)(result + 16);
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1},std::allocator<anonymous namespace'::IRFunctionImpl::SetParent(MIL::IRProgram const*)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

void *anonymous namespace'::IRFunctionImpl::SpecializationsCopy@<X0>(void *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v3 = (void *)this[29];
  uint64_t v4 = this + 30;
  if (v3 != this + 30)
  {
    do
    {
      (*(void (**)(void **__return_ptr))(*(void *)v3[7] + 32))(&v10);
      if (*((char *)v3 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v11, (const std::string::value_type *)v3[4], v3[5]);
      }
      else {
        std::string v11 = *(std::string *)(v3 + 4);
      }
      int v5 = v10;
      uint64_t v10 = 0;
      uint64_t v12 = v5;
      std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>((uint64_t **)a2, (const void **)&v11.__r_.__value_.__l.__data_, (long long *)&v11);
      uint64_t v6 = v12;
      uint64_t v12 = 0;
      if (v6) {
        (*(void (**)(void *))(*v6 + 8))(v6);
      }
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v11.__r_.__value_.__l.__data_);
      }
      this = v10;
      uint64_t v10 = 0;
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      uint64_t v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v3[2];
          BOOL v9 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v9);
      }
      uint64_t v3 = v8;
    }
    while (v8 != v4);
  }
  return this;
}

void sub_20F35EB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    (*(void (**)(uint64_t))(*(void *)a10 + 8))(a10);
  }
  std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::destroy(v10, *(void **)(v10 + 8));
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<anonymous namespace'::IRFunctionImpl,std::shared_ptr<MIL::Location const> const&,std::map<std::string,MIL::IRValueType const*>,std::string const&,std::map<std::string,std::unique_ptr<MIL::IRBlock>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

void sub_20F35ECCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C402FF647B4);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,MIL::IRValueType const*>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,MIL::IRValueType const*>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MIL::IRValueType const*>,std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_20F35ED54(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,MIL::IRValueType const*>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,MIL::IRValueType const*>,std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          int v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::pair<std::string const,MIL::IRValueType const*> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

const void **std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__find_equal<std::string>(void *a1, uint64_t *a2, const void ***a3, uint64_t *a4, const void **a5)
{
  uint64_t v9 = (const void **)(a1 + 1);
  if (a1 + 1 != a2 && !std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, (const void **)a2 + 4))
  {
    if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), (const void **)a2 + 4, a5))
    {
      *a3 = (const void **)a2;
      *a4 = (uint64_t)a2;
      return (const void **)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (const void **)a2[1];
      do
      {
        long long v15 = v14;
        uint64_t v14 = (const void **)*v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (const void **)a2;
      do
      {
        long long v15 = (const void **)v18[2];
        BOOL v17 = *v15 == v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), a5, v15 + 4)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const void **)a2;
    }
    return (const void **)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    uint64_t v12 = (const void **)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 1;
    }
    else
    {
      *a3 = (const void **)a2;
      return (const void **)a2;
    }
  }
  std::string v11 = (const void **)*a2;
  if (*a2)
  {
    do
    {
      uint64_t v12 = v11;
      std::string v11 = (const void **)v11[1];
    }
    while (v11);
  }
  else
  {
    std::string::size_type v16 = a2;
    do
    {
      uint64_t v12 = (const void **)v16[2];
      BOOL v17 = *v12 == v16;
      std::string::size_type v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (std::less<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 2), v12 + 4, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (const void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, a3, a5);
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((void *)v6 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v6 + 7) = *(void *)(a2 + 24);
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20F35F0B4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void anonymous namespace'::RenameFlexibleShapeInfoMap<std::vector<MIL::IRDimension const*>>(std::string **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_handle_extract[abi:ne180100]<std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>,std::__map_node_handle_specifics>>(a2, (unsigned __int8 *)v2, (uint64_t)&v8);
      if (v8)
      {
        std::string::operator=((std::string *)(v8 + 16), v2 + 1);
        if (v8)
        {
          std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(a2, v8);
          if (v5)
          {
            uint64_t v6 = 0;
            if (HIBYTE(v9)) {
              HIBYTE(v9) = 0;
            }
          }
          else
          {
            uint64_t v6 = (void *)v8;
          }
          uint64_t v8 = 0;
          if (v9 >= 0x100u) {
            HIBYTE(v9) = 0;
          }
          if (v6)
          {
            std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)v6 + 16);
            operator delete(v6);
            uint64_t v7 = (void *)v8;
            if (v8)
            {
              std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>(v8 + 16);
              operator delete(v7);
            }
          }
        }
      }
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void sub_20F35F210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x40uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  *((void *)v6 + 7) = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20F35F384(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_20F35F48C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__construct_node_hash<std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F35F710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__construct_node_hash<std::pair<std::string const,std::vector<MIL::IRDimension const*>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F35F788(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<MIL::IRDimension const*>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(this[1].__r_.__value_.__r.__words, *((const void **)a2 + 3), *((void *)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  return this;
}

void sub_20F35F80C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F35F888(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_handle_extract[abi:ne180100]<std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>,std::__map_node_handle_specifics>>(void *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, a2);
  if (v5)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, v5, (uint64_t)v8);
    uint64_t v6 = v8[0];
    v8[0] = 0;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
    char v7 = 1;
  }
  else
  {
    uint64_t v6 = 0;
    char v7 = 0;
    *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  }
  *(void *)a3 = v6;
  *(unsigned char *)(a3 + 9) = v7;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    char v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *char v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  unint64_t v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100]((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_perform[abi:ne180100](a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_prepare[abi:ne180100](uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    uint64_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (std::string::size_type i = *v10; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a3)) {
            return i;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
  }
  return 0;
}

void *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__node_insert_unique_perform[abi:ne180100](void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *unint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    unint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void **std::__basic_node_handle<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100](void **a1)
{
  int8x8_t v2 = *a1;
  if (*a1)
  {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<MIL::IRDimension const*>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t std::unordered_map<std::string,std::vector<std::pair<int,int>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<int,int>>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_20F35FEA0(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::pair<int,int>>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint8x8_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::pair<int,int>>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F360124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__construct_node_hash<std::pair<std::string const,std::vector<std::pair<int,int>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,std::vector<std::pair<int,int>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F36019C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::pair<int,int>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>((char *)&this[1], *((uint64_t **)a2 + 3), *((uint64_t **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3);
  return this;
}

void sub_20F360220(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<int,int>>::__init_with_size[abi:ne180100]<std::pair<int,int>*,std::pair<int,int>*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    __n128 result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (void *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20F360294(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_20F360310(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F360594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__construct_node_hash<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x50uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F36060C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    int8x8_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int8x8_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int8x8_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int8x8_t v2 = v3;
    }
    while (v3);
  }
}

std::string *std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>::unordered_map((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_20F3607A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

MIL::Attributes::FlexibleShapeInfo *std::unique_ptr<MIL::Attributes::FlexibleShapeInfo>::reset[abi:ne180100](MIL::Attributes::FlexibleShapeInfo **a1, MIL::Attributes::FlexibleShapeInfo *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    float v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::string::size_type i = *v14; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_20F360A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    *((void *)v8 + 4) = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  *((_DWORD *)v8 + 10) = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F360B3C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__node_handle_insert_unique[abi:ne180100]<std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::allocator<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>,std::__map_node_handle_specifics>,std::__insert_return_type<std::__map_iterator<std::__tree_iterator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>*,long>>,std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::allocator<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>,std::__map_node_handle_specifics>>>@<X0>(uint64_t **result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result;
  uint64_t v5 = *a2;
  if (!*a2)
  {
    *(void *)a3 = result + 1;
    *(unsigned char *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
LABEL_9:
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    return result;
  }
  __n128 result = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)result, &v8, (const void **)(v5 + 32));
  if (!*result)
  {
    __n128 result = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(v3, v8, result, (uint64_t *)v5);
    *a2 = 0;
    if (*((unsigned char *)a2 + 9)) {
      *((unsigned char *)a2 + 9) = 0;
    }
    *(void *)a3 = v5;
    *(unsigned char *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
    goto LABEL_9;
  }
  *(void *)a3 = *result;
  *(unsigned char *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = *a2;
  unsigned int v7 = *((unsigned __int16 *)a2 + 4);
  *(_WORD *)(a3 + 24) = v7;
  *a2 = 0;
  if (v7 >= 0x100) {
    *((unsigned char *)a2 + 9) = 0;
  }
  return result;
}

void **std::__basic_node_handle<std::__tree_node<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,void *>,std::allocator<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>>,std::__map_node_handle_specifics>::~__basic_node_handle[abi:ne180100](void **a1)
{
  int8x8_t v2 = *a1;
  if (*a1)
  {
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IRBlock>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
    *a1 = 0;
  }
  return a1;
}

uint64_t MIL::GetDTypeForPixelFormat(int a1)
{
  uint64_t result = 14;
  if (a1 > 5)
  {
    if (a1 <= 0x3A)
    {
      if (((1 << a1) & 0x7803C000002C040) != 0) {
        return 4;
      }
      if (a1 == 41) {
        return 15;
      }
      if (((1 << a1) & 0x10000100000) != 0)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported pixel format type.");
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
    }
    if ((a1 - 90) >= 2)
    {
      if (a1 != 100) {
        return result;
      }
      return 4;
    }
    return 15;
  }
  if (a1 == 2) {
    return 4;
  }
  if (a1 == 3 || a1 == 5) {
    return 5;
  }
  return result;
}

void sub_20F360D54(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IsBiPlanar420Format(int a1)
{
  if ((a1 - 21) < 7 || (a1 - 70) < 2) {
    return 1;
  }
  if (a1 == 20 || a1 == 40)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported pixel format type.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return 0;
}

void sub_20F360DF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__n128 MIL::GetShapeForPlane@<Q0>(MIL::IRConstantDimension *this@<X0>, MIL::MILContext *ChannelDimForFormat@<X4>, int a3@<W1>, MIL::IRDimension ***a4@<X2>, unsigned int a5@<W3>, void *a6@<X8>)
{
  if (a3 != 100) {
    ChannelDimForFormat = (MIL::MILContext *)MIL::GetChannelDimForFormat(a3, a5);
  }
  uint64_t v11 = MIL::IRConstantDimension::Make(this, ChannelDimForFormat);
  uint8x8_t v12 = *a4;
  uint64_t v13 = (uint64_t)a4[1];
  if (v13 - (void)*a4 != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "ImageShape does not have exactly 2 dimensions.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  uint64_t v14 = v11;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v27, v12, v13, 2uLL);
  int v15 = MIL::IsBiPlanar420Format(a3) ^ 1;
  if (a5 != 1) {
    LOBYTE(v15) = 1;
  }
  if ((v15 & 1) == 0)
  {
    if ((*(uint64_t (**)(MIL::IRDimension *))(*(void *)**a4 + 16))(**a4))
    {
      uint64_t v16 = MIL::IRDimension::AsConstant(**a4);
      unint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 48))(v16);
      uint64_t v18 = MIL::IRConstantDimension::Make(this, (MIL::MILContext *)(v17 >> 1));
      *uint64_t v27 = v18;
    }
    if ((*(uint64_t (**)(MIL::IRDimension *))(*(void *)(*a4)[1] + 16))((*a4)[1]))
    {
      uint64_t v19 = MIL::IRDimension::AsConstant((*a4)[1]);
      unint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
      uint64_t v21 = MIL::IRConstantDimension::Make(this, (MIL::MILContext *)(v20 >> 1));
      v27[1] = v21;
    }
  }
  size_t v22 = v27;
  long long v26 = *(_OWORD *)v27;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  unint64_t v23 = (char *)operator new(0x18uLL);
  a6[1] = v23 + 24;
  a6[2] = v23 + 24;
  *(void *)unint64_t v23 = v14;
  *(_OWORD *)(v23 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v26;
  *a6 = v23;
  uint64_t v28 = v22;
  operator delete(v22);
  return result;
}

void sub_20F361010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

BOOL MIL::SupportsMultiSlice(int a1)
{
  return a1 == 100;
}

uint64_t MIL::Util::GetRowAlignedStrides@<X0>(MIL::IRUnknownProperty *a1@<X0>, int a2@<W1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, unint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  std::vector<MIL::IRProperty const*>::vector(a6, (a3[1] - *a3) >> 3);
  uint64_t v12 = a3[1];
  if (v12 != *a3)
  {
    unint64_t v13 = 0;
    uint64_t v12 = *a3;
    while (1)
    {
      uint64_t result = (*(uint64_t (**)(void))(**(void **)(v12 + 8 * v13) + 24))(*(void *)(v12 + 8 * v13));
      if (result) {
        break;
      }
      ++v13;
      uint64_t v12 = *a3;
      uint64_t v15 = a3[1];
      if (v13 >= (v15 - *a3) >> 3) {
        goto LABEL_7;
      }
    }
    if (a6[1] != *a6)
    {
      unint64_t v36 = 0;
      do
      {
        uint64_t result = MIL::IRUnknownProperty::Make(a1, 0);
        *(void *)(*a6 + 8 * v36++) = result;
      }
      while (v36 < (a6[1] - *a6) >> 3);
    }
    return result;
  }
  uint64_t v15 = a3[1];
LABEL_7:
  uint64_t v16 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = (MIL::IRConstantPropertyImpl **)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v16 + 8 * v17));
      int ScalarDataType = MIL::IRConstantProperty::GetScalarDataType(v18);
      if (ScalarDataType != 14)
      {
        if (ScalarDataType == 12)
        {
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::to_string(&v55, v17);
          size_t v38 = std::string::insert(&v55, 0, "interleave_factor at index: ");
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v56.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          int v40 = std::string::append(&v56, " is of type Int64. This interleave is not supproted. ");
          long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v57.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          std::logic_error::logic_error(exception, &v57);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
        }
        uint64_t v42 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v56, v17);
        uint64_t v43 = std::string::insert(&v56, 0, "Unexpected types for interleave_factor at index: ");
        long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v42, &v57);
        v42->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v42, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      unint64_t v20 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(*a4 + 8 * v17));
      if (MIL::IRConstantProperty::GetUInt8ScalarValue(v20) != 1)
      {
        uint64_t v45 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::to_string(&v55, v17);
        uint64_t v46 = std::string::insert(&v55, 0, "interleave_factor at index: ");
        long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v47;
        v46->__r_.__value_.__l.__size_ = 0;
        v46->__r_.__value_.__r.__words[2] = 0;
        v46->__r_.__value_.__r.__words[0] = 0;
        unint64_t v48 = std::string::append(&v56, " is not 1. This interleave is not supproted.");
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v57.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v45, &v57);
        v45->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v45, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      ++v17;
      uint64_t v16 = *a4;
    }
    while (v17 < (a4[1] - *a4) >> 3);
    uint64_t v12 = *a3;
    uint64_t v15 = a3[1];
  }
  if (v15 == v12) {
    std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v21 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v15 - 8));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21);
  int v22 = a2 - 2;
  if ((a2 - 2) >= 0x10 || ((0xF79Du >> v22) & 1) == 0)
  {
    long long v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    MIL::IRDataTypeToString(a2, &v55);
    int v51 = std::string::insert(&v55, 0, "Unsupported MIL IRDataType (");
    long long v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    std::string v53 = std::string::append(&v56, ")");
    long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v57.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v50, &v57);
    __cxa_throw(v50, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v23 = *a6;
  uint64_t v24 = a6[1] - *a6;
  if (v24)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0;
    unint64_t v27 = (a5 + qword_20F90DEB8[v22] * result - 1) / a5 * a5 / qword_20F90DEB8[v22];
    unint64_t v28 = v24 >> 3;
    while (1)
    {
      uint64_t v29 = v28 + v25;
      if (!v25) {
        break;
      }
      uint64_t v30 = v27;
      if (v29 + 1 == v28) {
        goto LABEL_22;
      }
      int v31 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v23 + 8 * v29));
      Int64Scalaruint64_t Value = MIL::IRConstantProperty::GetInt64ScalarValue(v31);
      std::string::size_type v33 = (MIL::IRDimension *)(*(uint64_t (**)(void))(**(void **)(*a3 + 8 * v29) + 16))(*(void *)(*a3 + 8 * v29));
      uint64_t v34 = MIL::IRDimension::AsConstant(v33);
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 48))(v34);
      uint64_t result = MIL::IRConstantProperty::MakeInt64Scalar(a1, (MIL::MILContext *)(v35 * Int64ScalarValue));
LABEL_23:
      *(void *)(*a6 + 8 * (v29 - 1)) = result;
      ++v26;
      uint64_t v23 = *a6;
      unint64_t v28 = (a6[1] - *a6) >> 3;
      --v25;
      if (v26 >= v28) {
        return result;
      }
    }
    uint64_t v30 = 1;
LABEL_22:
    uint64_t result = MIL::IRConstantProperty::MakeInt64Scalar(a1, (MIL::MILContext *)v30);
    goto LABEL_23;
  }
  return result;
}

void sub_20F3615BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v30 & 1) == 0)
    {
LABEL_10:
      uint64_t v32 = *(void **)v28;
      if (*(void *)v28)
      {
        *(void *)(v28 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v32;
        operator delete(v32);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_10;
  }
  __cxa_free_exception(v29);
  goto LABEL_10;
}

void *std::vector<MIL::IRProperty const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20F361728(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]()
{
}

void MIL::IRObject::~IRObject(MIL::IRObject *this)
{
  *(void *)this = &unk_26C252308;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 24);
  int8x8_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t MIL::IRObject::IRObject(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C252308;
  *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 24, a3);
  if (!*(void *)(a1 + 8))
  {
    exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x20uLL);
    MIL::UnknownLocation::Make(exception);
  }
  return a1;
}

void sub_20F3618E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  __cxa_free_exception(v19);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v18);
  uint64_t v21 = *(std::__shared_weak_count **)(v17 + 16);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRObject::Equals(MIL::IRObject *this, const MIL::IRObject *a2)
{
  if (this == a2) {
    return 1;
  }
  if (*((void *)this + 6) != *((void *)a2 + 6)) {
    return 0;
  }
  unint64_t v4 = (unsigned __int8 *)this + 40;
  while (1)
  {
    unint64_t v4 = *(unsigned __int8 **)v4;
    if (!v4) {
      break;
    }
    uint64_t result = MIL::IRObject::TryGetAttribute((uint64_t)a2, v4 + 16);
    if (!result) {
      return result;
    }
    if (((*(uint64_t (**)(void, uint64_t))(**((void **)v4 + 5) + 16))(*((void *)v4 + 5), result) & 1) == 0) {
      return 0;
    }
  }
  unint64_t v6 = *(uint64_t (**)(MIL::IRObject *, const MIL::IRObject *))(*(void *)this + 24);

  return v6(this, a2);
}

uint64_t MIL::IRObject::GetAttributes(MIL::IRObject *this)
{
  return (uint64_t)this + 24;
}

uint64_t MIL::IRObject::TryGetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  int8x8_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 24), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)v2 + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

uint64_t MIL::IRObject::GetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = MIL::IRObject::TryGetAttribute(a1, a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    uint64_t v5 = a1;
    unint64_t v6 = exception;
    uint64_t v8 = *(void *)(v5 + 8);
    uint64_t v7 = *(void *)(v5 + 16);
    v14[0] = v8;
    v14[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    unint64_t v9 = std::string::append(&v11, "' does not exist.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    std::string::size_type v13 = v9->__r_.__value_.__r.__words[2];
    long long v12 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    MIL::OutOfRangeError::OutOfRangeError(v6, v14, &v12);
  }
  return result;
}

void sub_20F361BA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRObject::GetLocationPtr(MIL::IRObject *this)
{
  return (uint64_t)this + 8;
}

unsigned __int8 *MIL::IRObject::TryGetAttributeSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 24), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

BOOL MIL::IRObject::RemoveAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((void *)(a1 + 24), a2) != 0;
}

BOOL MIL::IRObject::SetAttribute(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::insert_or_assign[abi:ne180100]<std::shared_ptr<MIL::IRValue const>>(a1 + 24, a2, a3);
  return v3 != 0;
}

unsigned __int8 *std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::insert_or_assign[abi:ne180100]<std::shared_ptr<MIL::IRValue const>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::string,std::shared_ptr<MIL::IRValue const>>(a1, a2, (uint64_t)a2, a3);
  uint64_t v5 = v4;
  if (!v6)
  {
    long long v7 = *(_OWORD *)a3;
    *(void *)a3 = 0;
    *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    uint64_t v8 = (std::__shared_weak_count *)*((void *)v4 + 6);
    *(_OWORD *)(v5 + 40) = v7;
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return v5;
}

void MIL::IRObject::SetAttributes(uint64_t a1, uint64_t *a2)
{
}

uint64_t MIL::IRObject::GetLocation(MIL::IRObject *this)
{
  return *((void *)this + 1);
}

void MIL::IRObject::SetLocation(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  if (!*a2)
  {
    exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x20uLL);
    MIL::UnknownLocation::Make(exception);
  }
  uint64_t v3 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  *(void *)(a1 + 16) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_20F361E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  __cxa_free_exception(v17);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::UnknownLocation  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::UnknownLocation  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::UnknownLocation  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::string,std::shared_ptr<MIL::IRValue const>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (std::string::size_type i = *v15; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t v18 = (char *)operator new(0x38uLL);
  v28[0] = v18;
  v28[1] = a1 + 16;
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = v11;
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((void *)v18 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(v18 + 40) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *uint64_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v26 >= v12) {
          v26 %= v12;
        }
      }
      else
      {
        v26 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_20F3622D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  unint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *unint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void MIL::IROperation::~IROperation(MIL::IROperation *this)
{
  MIL::IRValueQueryable::~IRValueQueryable((MIL::IROperation *)((char *)this + 64));

  MIL::IRObject::~IRObject(this);
}

void *MIL::IROperation::IROperation(void *a1, long long *a2, uint64_t *a3)
{
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::IRObject::IRObject((uint64_t)a1, (uint64_t)&v5, a3);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  MIL::IRValueQueryable::IRValueQueryable(a1 + 8);
  *a1 = &unk_26C2523A8;
  a1[8] = &unk_26C2524B8;
  return a1;
}

void sub_20F3624C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  MIL::IRObject::~IRObject(v10);
  _Unwind_Resume(a1);
}

uint64_t MIL::IROperation::GetArgumentName(MIL::IRObject *a1)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 120))(a1);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v5 = LocationPtr[1];
    v11[0] = *LocationPtr;
    v11[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v8, " does not exist.");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    std::string::size_type v10 = v6->__r_.__value_.__r.__words[2];
    long long v9 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    MIL::OutOfRangeError::OutOfRangeError(exception, v11, &v9);
  }
  return result;
}

void sub_20F3625EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  uint64_t v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    if ((v22 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (!v22)
  {
LABEL_10:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v21);
  goto LABEL_10;
}

uint64_t MIL::IROperation::GetArgumentValue(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 128))(a1);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v3 = std::string::append(&v5, " does not exist.");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v6.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  return result;
}

void sub_20F362754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::IROperation::TryGetParameterValue(void *a1, uint64_t a2, uint64_t a3)
{
  MIL::IROperation::TryGetParameterValueSharedPtr(a1, a2, a3, &v5);
  uint64_t v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

void MIL::IROperation::TryGetParameterValueSharedPtr(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 136))(&v10);
  if (v10)
  {
    std::string v8 = v11;
    *a4 = v10;
    a4[1] = (uint64_t)v8;
    a4 = &v10;
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    goto LABEL_6;
  }
  uint64_t v9 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
  if (!v9) {
    goto LABEL_3;
  }
  (*(void (**)(void *, uint64_t, uint64_t))(a1[8] + 56))(a1 + 8, v9, 1);
LABEL_6:
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_20F3628E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IROperation::GetParameterValue(MIL::IRObject *a1)
{
  uint64_t v2 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 128))(a1);
  if (!v2)
  {
    Argumentuint64_t Name = MIL::IROperation::GetArgumentName(a1);
    if (*(char *)(ArgumentName + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)ArgumentName, *(void *)(ArgumentName + 8));
    }
    else
    {
      long long v4 = *(_OWORD *)ArgumentName;
      __p.__r_.__value_.__r.__words[2] = *(void *)(ArgumentName + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v4;
    }
    uint64_t v2 = (*(uint64_t (**)(void *, std::string *, uint64_t))(*((void *)a1 + 8) + 40))((void *)a1 + 8, &__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return v2;
}

void sub_20F3629E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IROperation::TryGetParameterType(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 128))(a1);
  if (v6)
  {
    long long v7 = *(uint64_t (**)(void))(*(void *)v6 + 32);
    return v7();
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, a3);
    if (result)
    {
      uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a1[8] + 24);
      return v9(a1 + 8, result, 1);
    }
  }
  return result;
}

uint64_t MIL::IROperation::GetParameterType(MIL::IRObject *a1)
{
  uint64_t v2 = (*(uint64_t (**)(MIL::IRObject *))(*(void *)a1 + 128))(a1);
  if (v2)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 32);
    return v3();
  }
  else
  {
    Argumentuint64_t Name = MIL::IROperation::GetArgumentName(a1);
    if (*(char *)(ArgumentName + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)ArgumentName, *(void *)(ArgumentName + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)ArgumentName;
      __p.__r_.__value_.__r.__words[2] = *(void *)(ArgumentName + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
    }
    uint64_t v7 = (*(uint64_t (**)(void *, std::string *, uint64_t))(*((void *)a1 + 8) + 16))((void *)a1 + 8, &__p, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return v7;
  }
}

void sub_20F362C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IROperation::TryGetOutputType(MIL::IROperation *this, unint64_t a2)
{
  uint64_t v3 = (void **)(*(uint64_t (**)(MIL::IROperation *))(*(void *)this + 176))(this);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v6 = 0;
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(&v6, *v3, v3[1], ((char *)v3[1] - (char *)*v3) >> 4);
  uint64_t Type = 0;
  if (a2 < (v7 - v6) >> 4) {
    uint64_t Type = MIL::IRNamedValueType::GetType(*(MIL::IRNamedValueType **)(v6 + 16 * a2));
  }
  uint64_t v9 = (void **)&v6;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v9);
  return Type;
}

void sub_20F362CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t MIL::IROperation::GetOutputType(MIL::IROperation *this, unint64_t a2)
{
  uint64_t result = MIL::IROperation::TryGetOutputType(this, a2);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v7 = LocationPtr[1];
    v26[0] = *LocationPtr;
    v26[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::to_string(&v20, a2);
    uint64_t v8 = std::string::insert(&v20, 0, "Output ");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    uint64_t v10 = std::string::append(&v21, " does not exist in a block with ");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unint64_t v12 = (*(uint64_t (**)(MIL::IROperation *))(*(void *)this + 192))(this);
    std::to_string(&v19, v12);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint8x8_t v13 = &v19;
    }
    else {
      uint8x8_t v13 = (std::string *)v19.__r_.__value_.__r.__words[0];
    }
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v19.__r_.__value_.__l.__size_;
    }
    uint64_t v15 = std::string::append(&v22, (const std::string::value_type *)v13, size);
    long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    unint64_t v17 = std::string::append(&v23, " outputs.");
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    std::string::size_type v25 = v17->__r_.__value_.__r.__words[2];
    long long v24 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    MIL::OutOfRangeError::OutOfRangeError(exception, v26, &v24);
  }
  return result;
}

void sub_20F362EB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (*(char *)(v42 - 57) < 0) {
    operator delete(*(void **)(v42 - 80));
  }
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  long long v44 = *(std::__shared_weak_count **)(v42 - 40);
  if (v44)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    if ((v40 & 1) == 0) {
      goto LABEL_18;
    }
  }
  else if (!v40)
  {
LABEL_18:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v41);
  goto LABEL_18;
}

BOOL MIL::IROperation::IsParameterSet(uint64_t a1, const void **a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v5 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v4, a2);
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) + 8 != v5;
}

void MIL::IROperation::Make()
{
}

{
  operator new();
}

void std::make_unique[abi:ne180100]<anonymous namespace'::IROperationImpl,std::shared_ptr<MIL::Location const>,std::shared_ptr<MIL::IROperator const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::vector<std::shared_ptr<MIL::IRNamedValueType>>,std::vector<std::shared_ptr<MIL::IRBlock>>,decltype(nullptr)>()
{
}

void sub_20F36315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x10E1C40E9C383C0);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::IROperationImpl **std::unique_ptr<anonymous namespace'::IROperationImpl>::~unique_ptr[abi:ne180100](_anonymous_namespace_::IROperationImpl **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MEMORY[0x21056C700]();
  }
  return a1;
}

void sub_20F3632BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x10E1C40E9C383C0);
  _Unwind_Resume(a1);
}

void MIL::IROperation::Make(uint64_t a1, uint64_t a2, void *a3)
{
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  uint64_t v4 = (long long *)(a3 + 1);
  uint64_t v3 = (long long *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      memset(v14, 0, sizeof(v14));
      uint64_t v5 = (long long *)*((void *)v3 + 7);
      if (v5 != *((long long **)v3 + 8))
      {
        long long v6 = *v5;
        uint64_t v13 = *((void *)v5 + 2);
        *(_OWORD *)std::string __p = v6;
        *((void *)v5 + 1) = 0;
        *((void *)v5 + 2) = 0;
        *(void *)uint64_t v5 = 0;
        MIL::IRArgument::Make();
      }
      std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]<std::string const&,std::vector<std::shared_ptr<MIL::IRArgument>>,0>(&v10, v3 + 2, (uint64_t)v14);
      std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>(&v15, (const void **)&v10.__r_.__value_.__l.__data_, (long long *)&v10);
      unint64_t v17 = (void **)&v11;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v17);
      if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v10.__r_.__value_.__l.__data_);
      }
      v10.__r_.__value_.__r.__words[0] = (std::string::size_type)v14;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v10);
      uint64_t v7 = (long long *)*((void *)v3 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(long long **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (long long *)*((void *)v3 + 2);
          BOOL v9 = *(void *)v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v9);
      }
      uint64_t v3 = v8;
    }
    while (v8 != v4);
  }
}

void sub_20F3635B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v30 - 120, *(void **)(v30 - 112));
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::~pair(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void MIL::IROperation::ToString(MIL::IROperation *this)
{
}

void sub_20F363788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = *(void *)(v11 - 40);
  *(void *)(v11 - 40) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]<std::string const&,std::vector<std::shared_ptr<MIL::IRArgument>>,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  this[1].__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  return this;
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t *std::shared_ptr<MIL::IRArgument>::shared_ptr[abi:ne180100]<MIL::IRArgument,std::default_delete<MIL::IRArgument>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned __int8 *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IRArgument  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IRArgument  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRArgument  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void anonymous namespace'::IROperationImpl::~IROperationImpl(_anonymous_namespace_::IROperationImpl *this)
{
  uint64_t v2 = *((void *)this + 21);
  *((void *)this + 21) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x60C4044C4A2DFLL);
  }
  uint64_t v4 = (void **)((char *)this + 144);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v4 = (void **)((char *)this + 120);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy((uint64_t)this + 96, *((void **)this + 13));
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  MIL::IRValueQueryable::~IRValueQueryable((_anonymous_namespace_::IROperationImpl *)((char *)this + 64));
  MIL::IRObject::~IRObject(this);
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

void non-virtual thunk to'anonymous namespace'::IROperationImpl::~IROperationImpl(_anonymous_namespace_::IROperationImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

uint64_t std::vector<std::shared_ptr<MIL::IRArgument>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::reverse_iterator<std::shared_ptr<MIL::IRArgument>*>,std::reverse_iterator<std::shared_ptr<MIL::IRArgument>*>,std::reverse_iterator<std::shared_ptr<MIL::IRArgument>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::reverse_iterator<std::shared_ptr<MIL::IRArgument>*>,std::reverse_iterator<std::shared_ptr<MIL::IRArgument>*>,std::reverse_iterator<std::shared_ptr<MIL::IRArgument>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::reverse_iterator<std::shared_ptr<MIL::IRArgument>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::reverse_iterator<std::shared_ptr<MIL::IRArgument>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void anonymous namespace'::IROperationImpl::IROperationImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v18 = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  MIL::IROperation::IROperation((void *)a1, &v18, a4);
  if (*((void *)&v18 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v18 + 1));
  }
  *(void *)a1 = &unk_26C2525A8;
  *(void *)(a1 + 64) = &unk_26C2526F0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 96) = *a5;
  long long v14 = a5 + 1;
  uint64_t v15 = a5[1];
  *(void *)(a1 + 104) = v15;
  uint64_t v16 = a1 + 104;
  uint64_t v17 = a5[2];
  *(void *)(a1 + 112) = v17;
  if (v17)
  {
    *(void *)(v15 + 16) = v16;
    *a5 = v14;
    void *v14 = 0;
    a5[2] = 0;
  }
  else
  {
    *(void *)(a1 + 96) = v16;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)a6;
  *(void *)(a1 + 136) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(void *)(a1 + 176) = a8;
}

void sub_20F363D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::IROperationImpl::SetBlocks(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 144) = *(_OWORD *)a2;
  *(void *)(a1 + 160) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  operator new();
}

void *anonymous namespace'::IROperationImpl::SetParent(void *this, const MIL::IRBlock *a2)
{
  this[9] = a2;
  uint64_t v2 = (uint64_t *)this[18];
  uint64_t v3 = (uint64_t *)this[19];
  if (v2 != v3)
  {
    if (a2) {
      uint64_t v4 = (char *)a2 + 64;
    }
    else {
      uint64_t v4 = 0;
    }
    do
    {
      uint64_t v5 = *v2;
      v2 += 2;
      this = (void *)(*(uint64_t (**)(uint64_t, char *))(*(void *)v5 + 104))(v5, v4);
    }
    while (v2 != v3);
  }
  return this;
}

void *anonymous namespace'::IROperationImpl::PopulateDefaultValues(_anonymous_namespace_::IROperationImpl *this)
{
  v6[7] = *MEMORY[0x263EF8340];
  uint64_t result = (void *)*((void *)this + 10);
  if (result)
  {
    uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 72))(result);
    if (result)
    {
      for (uint64_t i = (const void **)result[2]; i; uint64_t i = (const void **)*i)
      {
        uint64_t v4 = (*(uint64_t (**)(_anonymous_namespace_::IROperationImpl *))(*(void *)this + 160))(this);
        uint64_t v5 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v4, i + 2);
        uint64_t result = (void *)(*(uint64_t (**)(_anonymous_namespace_::IROperationImpl *))(*(void *)this + 160))(this);
        if (result + 1 == (void *)v5)
        {
          uint64_t result = (void *)(*(uint64_t (**)(const void *))(*(void *)i[5] + 80))(i[5]);
          if (result)
          {
            (*(void (**)(void *__return_ptr))(*(void *)i[5] + 104))(v6);
            MIL::IRArgument::Make();
          }
        }
      }
    }
  }
  return result;
}

void sub_20F36418C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a11) {
    (*(void (**)(uint64_t))(*(void *)a11 + 8))(a11);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

_anonymous_namespace_::IROperationImpl *anonymous namespace'::IROperationImpl::EqualsImpl(_anonymous_namespace_::IROperationImpl **this, const MIL::IRObject *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v7 = OperatorName[23];
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = OperatorName[23];
    }
    else {
      uint64_t v8 = *((void *)OperatorName + 1);
    }
    uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(v6 + 8);
    }
    if (v8 == v9)
    {
      if (v10 >= 0) {
        uint64_t v11 = (unsigned __int8 *)v6;
      }
      else {
        uint64_t v11 = *(unsigned __int8 **)v6;
      }
      if ((v7 & 0x80) == 0)
      {
        if (OperatorName[23])
        {
          while (*OperatorName == *v11)
          {
            ++OperatorName;
            ++v11;
            if (!--v7) {
              goto LABEL_17;
            }
          }
          return 0;
        }
LABEL_17:
        if (this[14] == *((_anonymous_namespace_::IROperationImpl **)v4 + 14))
        {
          uint64_t v12 = this[12];
          if (v12 == (_anonymous_namespace_::IROperationImpl *)(this + 13))
          {
LABEL_31:
            std::string v22 = this[15];
            std::string v23 = this[16];
            if (v23 - v22 == *((void *)v4 + 16) - *((void *)v4 + 15))
            {
              if (v23 == v22)
              {
LABEL_36:
                unint64_t v26 = this[21];
                uint64_t v27 = *((void *)v4 + 21);
                uint64_t v28 = **(void **)v26;
                uint64_t v29 = *(void *)(*(void *)v26 + 8);
                if (v29 - v28 == *(void *)(*(void *)v27 + 8) - **(void **)v27)
                {
                  if (v29 == v28) {
                    return (_anonymous_namespace_::IROperationImpl *)(this[22] == *((_anonymous_namespace_::IROperationImpl **)v4
                  }
                                                                                  + 22));
                  uint64_t v30 = 0;
                  unint64_t v31 = 0;
                  while ((MIL::IRObject::Equals(*(MIL::IRObject **)(v28 + v30), *(const MIL::IRObject **)(**(void **)v27 + v30)) & 1) != 0)
                  {
                    ++v31;
                    uint64_t v28 = **(void **)v26;
                    v30 += 16;
                    if (v31 >= (*(void *)(*(void *)v26 + 8) - v28) >> 4) {
                      return (_anonymous_namespace_::IROperationImpl *)(this[22] == *((_anonymous_namespace_::IROperationImpl **)v4
                    }
                                                                                    + 22));
                  }
                }
              }
              else
              {
                uint64_t v24 = 0;
                unint64_t v25 = 0;
                while (MIL::IRNamedValueType::Equals(*(MIL::IRNamedValueType **)((char *)v22 + v24), *(const MIL::IRNamedValueType **)(*((void *)v4 + 15) + v24)))
                {
                  ++v25;
                  std::string v22 = this[15];
                  v24 += 16;
                  if (v25 >= (this[16] - v22) >> 4) {
                    goto LABEL_36;
                  }
                }
              }
            }
          }
          else
          {
            while (1)
            {
              uint64_t v13 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)v4 + 96, (const void **)v12 + 4);
              if ((_anonymous_namespace_::IROperationImpl *)((char *)v4 + 104) == (_anonymous_namespace_::IROperationImpl *)v13) {
                break;
              }
              uint64_t v14 = v13;
              uint64_t v15 = *((void *)v12 + 7);
              uint64_t v16 = *((void *)v12 + 8);
              if (v16 - v15 != *(void *)(v13 + 64) - *(void *)(v13 + 56)) {
                break;
              }
              if (v16 != v15)
              {
                uint64_t v17 = 0;
                unint64_t v18 = 0;
                while (((*(uint64_t (**)(void, void))(**(void **)(v15 + v17) + 56))(*(void *)(v15 + v17), *(void *)(*(void *)(v14 + 56) + v17)) & 1) != 0)
                {
                  ++v18;
                  uint64_t v15 = *((void *)v12 + 7);
                  v17 += 16;
                  if (v18 >= (*((void *)v12 + 8) - v15) >> 4) {
                    goto LABEL_25;
                  }
                }
                return 0;
              }
LABEL_25:
              std::string v19 = (_anonymous_namespace_::IROperationImpl *)*((void *)v12 + 1);
              if (v19)
              {
                do
                {
                  std::string v20 = v19;
                  std::string v19 = *(_anonymous_namespace_::IROperationImpl **)v19;
                }
                while (v19);
              }
              else
              {
                do
                {
                  std::string v20 = (_anonymous_namespace_::IROperationImpl *)*((void *)v12 + 2);
                  BOOL v21 = *(void *)v20 == (void)v12;
                  uint64_t v12 = v20;
                }
                while (!v21);
              }
              uint64_t v12 = v20;
              if (v20 == (_anonymous_namespace_::IROperationImpl *)(this + 13)) {
                goto LABEL_31;
              }
            }
          }
        }
        return 0;
      }
      if (!memcmp(*(const void **)OperatorName, v11, *((void *)OperatorName + 1))) {
        goto LABEL_17;
      }
    }
    return 0;
  }
  return result;
}

void anonymous namespace'::IROperationImpl::Copy(_anonymous_namespace_::IROperationImpl *this)
{
  memset(v1, 0, sizeof(v1));
}

void sub_20F364550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void anonymous namespace'::IROperationImpl::WithBlocks(uint64_t a1)
{
  MIL::IRObject::GetLocationPtr((MIL::IRObject *)a1);
  uint64_t Attributes = MIL::IRObject::GetAttributes((MIL::IRObject *)a1);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v5, Attributes);
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100](&v4, (const void ***)(a1 + 96));
  memset(v3, 0, sizeof(v3));
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRNamedValueType>*,std::shared_ptr<MIL::IRNamedValueType>*>(v3, *(void **)(a1 + 120), *(void **)(a1 + 128), (uint64_t)(*(void *)(a1 + 128) - *(void *)(a1 + 120)) >> 4);
}

void sub_20F364658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void anonymous namespace'::IROperationImpl::WithRenames(MIL::IRObject *a1, uint64_t *a2)
{
  v64[0] = 0;
  v64[1] = 0;
  v63 = v64;
  uint64_t v2 = (const void **)*((void *)a1 + 12);
  if (v2 != (const void **)((char *)a1 + 104))
  {
    do
    {
      uint64_t v3 = (MIL::IRArgument **)v2[7];
      if (v3 != v2[8])
      {
        if ((*(unsigned int (**)(void))(*(void *)*v3 + 24))())
        {
          v65[0] = v2 + 4;
          std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v63, v2 + 4, (uint64_t)&std::piecewise_construct, (long long **)v65);
          (*(void (**)(uint64_t *__return_ptr))(*(void *)*v3 + 48))(&v62);
          MIL::IRArgument::Make();
        }
        v65[0] = v2 + 4;
        std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v63, v2 + 4, (uint64_t)&std::piecewise_construct, (long long **)v65);
        uint64_t Name = MIL::IRArgument::GetName(*v3);
        if (*(char *)(Name + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v61, *(const std::string::value_type **)Name, *(void *)(Name + 8));
        }
        else
        {
          long long v5 = *(_OWORD *)Name;
          v61.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
          *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v5;
        }
        MIL::IRArgument::Make();
      }
      uint64_t v6 = (const void **)v2[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = (const void ***)v6;
          uint64_t v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (const void ***)v2[2];
          BOOL v8 = *v7 == v2;
          uint64_t v2 = (const void **)v7;
        }
        while (!v8);
      }
      uint64_t v2 = (const void **)v7;
    }
    while (v7 != (const void ***)((char *)a1 + 104));
    uint64_t v9 = v63;
    if (v63 != v64)
    {
      do
      {
        uint64_t v11 = (MIL::IRArgument **)v9[7];
        int v10 = (MIL::IRArgument **)v9[8];
        while (v11 != v10)
        {
          if (((*(uint64_t (**)(void))(*(void *)*v11 + 24))() & 1) == 0)
          {
            uint64_t v12 = *a2;
            uint64_t v13 = a2[1];
            while (v12 != v13)
            {
              uint64_t v14 = MIL::IRArgument::GetName(*v11);
              uint64_t v15 = *(unsigned __int8 *)(v12 + 23);
              if ((v15 & 0x80u) == 0) {
                uint64_t v16 = *(unsigned __int8 *)(v12 + 23);
              }
              else {
                uint64_t v16 = *(void *)(v12 + 8);
              }
              uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
              int v18 = (char)v17;
              if ((v17 & 0x80u) != 0) {
                uint64_t v17 = *(void *)(v14 + 8);
              }
              if (v16 == v17)
              {
                if (v18 >= 0) {
                  std::string v19 = (unsigned __int8 *)v14;
                }
                else {
                  std::string v19 = *(unsigned __int8 **)v14;
                }
                if ((v15 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v12, v19, *(void *)(v12 + 8)))
                  {
LABEL_38:
                    if (*(char *)(v12 + 47) < 0) {
                      std::string::__init_copy_ctor_external(&v60, *(const std::string::value_type **)(v12 + 24), *(void *)(v12 + 32));
                    }
                    else {
                      std::string v60 = *(std::string *)(v12 + 24);
                    }
                    MIL::IRArgument::Make();
                  }
                }
                else
                {
                  if (!*(unsigned char *)(v12 + 23)) {
                    goto LABEL_38;
                  }
                  uint64_t v20 = 0;
                  while (*(unsigned __int8 *)(v12 + v20) == v19[v20])
                  {
                    if (v15 == ++v20) {
                      goto LABEL_38;
                    }
                  }
                }
              }
              v12 += 48;
            }
          }
          v11 += 2;
        }
        BOOL v21 = (uint64_t *)v9[1];
        if (v21)
        {
          do
          {
            std::string v22 = v21;
            BOOL v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            std::string v22 = (uint64_t *)v9[2];
            BOOL v8 = *v22 == (void)v9;
            uint64_t v9 = v22;
          }
          while (!v8);
        }
        uint64_t v9 = v22;
      }
      while (v22 != v64);
    }
  }
  std::string v57 = 0;
  v58 = 0;
  uint64_t v59 = 0;
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::reserve((uint64_t *)&v57, (uint64_t)(*((void *)a1 + 16) - *((void *)a1 + 15)) >> 4);
  std::string v23 = (MIL::IRNamedValueType **)*((void *)a1 + 15);
  if (v23 != *((MIL::IRNamedValueType ***)a1 + 16))
  {
    uint64_t v24 = MIL::IRNamedValueType::GetName(*v23);
    if (*(char *)(v24 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v56, *(const std::string::value_type **)v24, *(void *)(v24 + 8));
    }
    else
    {
      long long v25 = *(_OWORD *)v24;
      v56.__r_.__value_.__r.__words[2] = *(void *)(v24 + 16);
      *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v25;
    }
    MIL::IRNamedValueType::GetType(*v23);
    MIL::IRNamedValueType::Make();
  }
  uint64_t v26 = *a2;
  uint64_t v27 = a2[1];
  while (1)
  {
    if (v26 == v27)
    {
      long long v52 = 0;
      std::string v53 = 0;
      unint64_t v54 = 0;
      uint64_t v37 = *((void *)a1 + 18);
      for (uint64_t i = *((void *)a1 + 19); v37 != i; v37 += 16)
      {
        (*(void (**)(uint64_t *__return_ptr))(**(void **)v37 + 120))(&v66);
        if (v66) {
          operator new();
        }
        uint64_t v66 = 0;
        long long v39 = v53;
        if ((unint64_t)v53 >= v54)
        {
          uint64_t v41 = (v53 - (char *)v52) >> 4;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 60) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v43 = v54 - (void)v52;
          if ((uint64_t)(v54 - (void)v52) >> 3 > v42) {
            unint64_t v42 = v43 >> 3;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          v65[4] = &v54;
          uint64_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)&v54, v44);
          uint64_t v46 = &v45[16 * v41];
          v65[0] = v45;
          v65[1] = v46;
          v65[3] = &v45[16 * v47];
          *(void *)uint64_t v46 = 0;
          *((void *)v46 + 1) = 0;
          v65[2] = v46 + 16;
          std::vector<std::shared_ptr<MIL::IRBlock>>::__swap_out_circular_buffer((uint64_t *)&v52, v65);
          int v40 = v53;
          std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v65);
        }
        else
        {
          *(void *)std::string v53 = 0;
          *((void *)v39 + 1) = 0;
          int v40 = v39 + 16;
        }
        std::string v53 = v40;
        uint64_t v48 = v66;
        uint64_t v66 = 0;
        if (v48) {
          (*(void (**)(uint64_t))(*(void *)v48 + 8))(v48);
        }
      }
      MIL::IRObject::GetLocationPtr(a1);
      uint64_t Attributes = MIL::IRObject::GetAttributes(a1);
      std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v65, Attributes);
    }
    uint64_t v28 = v57;
    uint64_t v29 = v58;
    if (v57 != v58) {
      break;
    }
LABEL_78:
    v26 += 48;
  }
  while (1)
  {
    uint64_t v30 = (unsigned __int8 *)MIL::IRNamedValueType::GetName(*v28);
    uint64_t v31 = v30[23];
    if ((v31 & 0x80u) == 0) {
      uint64_t v32 = v30[23];
    }
    else {
      uint64_t v32 = *((void *)v30 + 1);
    }
    uint64_t v33 = *(unsigned __int8 *)(v26 + 23);
    int v34 = (char)v33;
    if ((v33 & 0x80u) != 0) {
      uint64_t v33 = *(void *)(v26 + 8);
    }
    if (v32 != v33) {
      goto LABEL_77;
    }
    uint64_t v35 = v34 >= 0 ? (unsigned __int8 *)v26 : *(unsigned __int8 **)v26;
    if ((v31 & 0x80) == 0) {
      break;
    }
    if (!memcmp(*(const void **)v30, v35, *((void *)v30 + 1))) {
      goto LABEL_72;
    }
LABEL_77:
    v28 += 2;
    if (v28 == v29) {
      goto LABEL_78;
    }
  }
  if (v30[23])
  {
    while (*v30 == *v35)
    {
      ++v30;
      ++v35;
      if (!--v31) {
        goto LABEL_72;
      }
    }
    goto LABEL_77;
  }
LABEL_72:
  unint64_t v36 = *v28;
  if (*(char *)(v26 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v55, *(const std::string::value_type **)(v26 + 24), *(void *)(v26 + 32));
  }
  else {
    std::string v55 = *(std::string *)(v26 + 24);
  }
  MIL::IRNamedValueType::SetName((uint64_t)v36, (__n128 *)&v55);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  goto LABEL_77;
}

void sub_20F36512C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  *(void *)(v45 - 96) = &a14;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v45 - 96));
  a14 = &a30;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v45 - 160, *(void **)(v45 - 152));
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IROperationImpl::GetOperatorName(_anonymous_namespace_::IROperationImpl *this)
{
  uint64_t v1 = *((void *)this + 10);
  if (!v1) {
    goto LABEL_8;
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v1 + 16))(*((void *)this + 10));
  uint64_t v3 = *(unsigned __int8 *)(v2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(v2 + 8);
  }
  if (!v3)
  {
LABEL_8:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Operation has no definition or definition has no name.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(*(void *)v1 + 16);

  return v4(v1);
}

void sub_20F365468(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IROperationImpl::GetOperator(_anonymous_namespace_::IROperationImpl *this)
{
  uint64_t result = *((void *)this + 10);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Operator has not been defined.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3654D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IROperationImpl::TryGetOperator(_anonymous_namespace_::IROperationImpl *this)
{
  return *((void *)this + 10);
}

uint64_t anonymous namespace'::IROperationImpl::TryGetOperatorSharedPtr@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 88);
  *a2 = *(void *)(this + 80);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void anonymous namespace'::IROperationImpl::SetOperator(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t anonymous namespace'::IROperationImpl::GetParentBlock(_anonymous_namespace_::IROperationImpl *this)
{
  uint64_t result = *((void *)this + 9);
  if (!result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v5 = LocationPtr[1];
    v7[0] = *LocationPtr;
    v7[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v6, "Cannot access non-existent parent of an IROperation.");
    MIL::InvalidOperationError::InvalidOperationError(exception, v7, v6);
  }
  return result;
}

void sub_20F3655E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
    if ((v18 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v18)
  {
LABEL_8:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v17);
  goto LABEL_8;
}

uint64_t anonymous namespace'::IROperationImpl::TryGetParentBlock(_anonymous_namespace_::IROperationImpl *this)
{
  return *((void *)this + 9);
}

uint64_t anonymous namespace'::IROperationImpl::TryGetArgumentName(uint64_t a1, const void **a2, unsigned int a3)
{
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v7 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v6, a2);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1) + 8 == v7) {
    return 0;
  }
  uint64_t v8 = a1 + 96;
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v8, a2);
  if (a3 >= (unint64_t)((uint64_t)(*(void *)(v9 + 64) - *(void *)(v9 + 56)) >> 4)) {
    return 0;
  }
  int v10 = *(uint64_t (**)(void))(**(void **)(*(void *)(std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v8, a2)+ 56)+ 16 * a3)+ 32);

  return v10();
}

uint64_t anonymous namespace'::IROperationImpl::TryGetArgumentValue(uint64_t a1, const void **a2, unsigned int a3)
{
  uint64_t v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

uint64_t anonymous namespace'::IROperationImpl::TryGetArgumentValueSharedPtr@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v9 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v8, a2);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  if (result + 8 == v9
    || (uint64_t v11 = a1 + 96,
        uint64_t result = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v11, a2), a3 >= (unint64_t)((uint64_t)(*(void *)(result + 64) - *(void *)(result + 56)) >> 4)))
  {
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    uint64_t v12 = *(uint64_t (**)(void))(**(void **)(*(void *)(std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>(v11, a2)+ 56)+ 16 * a3)+ 48);
    return v12();
  }
  return result;
}

uint64_t anonymous namespace'::IROperationImpl::GetNumSetParameters(_anonymous_namespace_::IROperationImpl *this)
{
  return *((void *)this + 14);
}

uint64_t anonymous namespace'::IROperationImpl::GetNumArguments(MIL::IRObject *a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::find<std::string>((uint64_t)a1 + 96, a2);
  if ((MIL::IRObject *)((char *)a1 + 104) == (MIL::IRObject *)v3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v7 = LocationPtr[1];
    v13[0] = *LocationPtr;
    v13[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    uint64_t v8 = std::string::append(&v10, " does not exist.");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v12 = v8->__r_.__value_.__r.__words[2];
    long long v11 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    MIL::OutOfRangeError::OutOfRangeError(exception, v13, &v11);
  }
  return (*(void *)(v3 + 64) - *(void *)(v3 + 56)) >> 4;
}

void sub_20F3659B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  long long v25 = *(std::__shared_weak_count **)(v23 - 40);
  if (v25)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    if ((v22 & 1) == 0) {
      goto LABEL_10;
    }
  }
  else if (!v22)
  {
LABEL_10:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v21);
  goto LABEL_10;
}

uint64_t anonymous namespace'::IROperationImpl::GetArgumentMapping(_anonymous_namespace_::IROperationImpl *this)
{
  return (uint64_t)this + 96;
}

void *anonymous namespace'::IROperationImpl::SetArgumentMapping(_anonymous_namespace_::IROperationImpl *a1, void *a2)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__move_assign((uint64_t)a1 + 96, a2);
}

uint64_t anonymous namespace'::IROperationImpl::GetOutputs(_anonymous_namespace_::IROperationImpl *this)
{
  return (uint64_t)this + 120;
}

__n128 anonymous namespace'::IROperationImpl::SetOutputs(uint64_t a1, __n128 *a2)
{
  std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)(a1 + 120));
  __n128 result = *a2;
  *(__n128 *)(a1 + 120) = *a2;
  *(void *)(a1 + 136) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t anonymous namespace'::IROperationImpl::GetNumOutputs(_anonymous_namespace_::IROperationImpl *this)
{
  return (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 4;
}

void anonymous namespace'::IROperationImpl::GetOutputNames(_anonymous_namespace_::IROperationImpl *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, (uint64_t)(*((void *)this + 16) - *((void *)this + 15)) >> 4);
  uint64_t v5 = (MIL::IRNamedValueType **)*((void *)this + 15);
  uint64_t v4 = (MIL::IRNamedValueType **)*((void *)this + 16);
  while (v5 != v4)
  {
    uint64_t Name = (long long *)MIL::IRNamedValueType::GetName(*v5);
    end = a2->__end_;
    if (end >= a2->__end_cap_.__value_)
    {
      uint64_t v8 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, Name);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, Name);
      uint64_t v8 = (uint64_t)&end[1];
    }
    a2->__end_ = (std::vector<std::string>::pointer)v8;
    v5 += 2;
  }
}

void sub_20F365B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IROperationImpl::GetBlocks(_anonymous_namespace_::IROperationImpl *this)
{
  return *((void *)this + 21);
}

uint64_t anonymous namespace'::IROperationImpl::GetBlocksShared(_anonymous_namespace_::IROperationImpl *this)
{
  return (uint64_t)this + 144;
}

uint64_t anonymous namespace'::IROperationImpl::GetOpsetSpecification(_anonymous_namespace_::IROperationImpl *this)
{
  return *((void *)this + 22);
}

uint64_t anonymous namespace'::IROperationImpl::ClearOpsetSpecification(uint64_t this)
{
  *(void *)(this + 176) = 0;
  return this;
}

uint64_t anonymous namespace'::IROperationImpl::UpdateInput(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 96);
  uint64_t v4 = (void *)(a1 + 104);
  if (v3 != (void *)(a1 + 104))
  {
    do
    {
      uint64_t v7 = v3[7];
      if (v3[8] != v7)
      {
        unint64_t v8 = 0;
        do
        {
          long long v9 = (MIL::IRArgument **)(v7 + 16 * v8);
          if ((*(unsigned int (**)(void))(*(void *)*v9 + 16))())
          {
            uint64_t Name = (unsigned __int8 *)MIL::IRArgument::GetName(*v9);
            uint64_t v11 = Name[23];
            if ((v11 & 0x80u) == 0) {
              uint64_t v12 = Name[23];
            }
            else {
              uint64_t v12 = *((void *)Name + 1);
            }
            uint64_t v13 = a2[23];
            int v14 = (char)v13;
            if ((v13 & 0x80u) != 0) {
              uint64_t v13 = *((void *)a2 + 1);
            }
            if (v12 == v13)
            {
              if (v14 >= 0) {
                uint64_t v15 = a2;
              }
              else {
                uint64_t v15 = *(unsigned __int8 **)a2;
              }
              if ((v11 & 0x80) != 0)
              {
                if (!memcmp(*(const void **)Name, v15, *((void *)Name + 1)))
                {
LABEL_28:
                  uint64_t v20 = *(void *)(a3 + 8);
                  if (v20) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
                  }
                  MIL::IRArgument::Make();
                }
              }
              else
              {
                if (!Name[23]) {
                  goto LABEL_28;
                }
                while (*Name == *v15)
                {
                  ++Name;
                  ++v15;
                  if (!--v11) {
                    goto LABEL_28;
                  }
                }
              }
            }
          }
          ++v8;
          uint64_t v7 = v3[7];
        }
        while (v8 < (v3[8] - v7) >> 4);
      }
      uint64_t v16 = (void *)v3[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v3[2];
          BOOL v18 = *v17 == (void)v3;
          uint64_t v3 = v17;
        }
        while (!v18);
      }
      uint64_t v3 = v17;
    }
    while (v17 != v4);
  }
  return 0;
}

void sub_20F365DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12)
{
  if (a12) {
  if (a11)
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::IROperationImpl::GetType(MIL::IRObject *a1)
{
  uint64_t v2 = *((void *)a1 + 9);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v7 = LocationPtr[1];
    v9[0] = *LocationPtr;
    v9[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "Cannot query for a type when the parent block/scope is not set.");
    MIL::InvalidOperationError::InvalidOperationError(exception, v9, v8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v2 + 64) + 16);

  return v3();
}

void sub_20F365EC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
    if ((v18 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v18)
  {
LABEL_8:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v17);
  goto LABEL_8;
}

uint64_t anonymous namespace'::IROperationImpl::TryGetType(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 64) + 24))();
  }
  return result;
}

uint64_t anonymous namespace'::IROperationImpl::GetTypes(_anonymous_namespace_::IROperationImpl *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(this);
    uint64_t v7 = LocationPtr[1];
    v9[0] = *LocationPtr;
    v9[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "Cannot query for a list of types in scope when the parent block/scope is not set.");
    MIL::InvalidOperationError::InvalidOperationError(exception, v9, v8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v2 + 64) + 32);

  return v3();
}

void sub_20F366030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
    if ((v18 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v18)
  {
LABEL_8:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v17);
  goto LABEL_8;
}

uint64_t anonymous namespace'::IROperationImpl::GetValue(MIL::IRObject *a1)
{
  uint64_t v2 = *((void *)a1 + 9);
  if (!v2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    LocationPtr = (void *)MIL::IRObject::GetLocationPtr(a1);
    uint64_t v7 = LocationPtr[1];
    v9[0] = *LocationPtr;
    v9[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::string::basic_string[abi:ne180100]<0>(v8, "Cannot query for a value when the parent block/scope is not set.");
    MIL::InvalidOperationError::InvalidOperationError(exception, v9, v8);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)(v2 + 64) + 40);

  return v3();
}

void sub_20F366168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
    if ((v18 & 1) == 0) {
      goto LABEL_8;
    }
  }
  else if (!v18)
  {
LABEL_8:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v17);
  goto LABEL_8;
}

uint64_t anonymous namespace'::IROperationImpl::TryGetValue(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 64) + 48))();
  }
  return result;
}

uint64_t anonymous namespace'::IROperationImpl::TryGetValueSharedPtr@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 64) + 56))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t anonymous namespace'::IROperationImpl::GetValues(_anonymous_namespace_::IROperationImpl *this)
{
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 9) + 64) + 64))();
}

uint64_t non-virtual thunk to'anonymous namespace'::IROperationImpl::GetType(uint64_t a1)
{
}

uint64_t non-virtual thunk to'anonymous namespace'::IROperationImpl::TryGetType(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 64) + 24))();
  }
  return result;
}

uint64_t non-virtual thunk to'anonymous namespace'::IROperationImpl::GetTypes(_anonymous_namespace_::IROperationImpl *this)
{
}

uint64_t non-virtual thunk to'anonymous namespace'::IROperationImpl::GetValue(uint64_t a1)
{
}

uint64_t non-virtual thunk to'anonymous namespace'::IROperationImpl::TryGetValue(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 64) + 48))();
  }
  return result;
}

uint64_t non-virtual thunk to'anonymous namespace'::IROperationImpl::TryGetValueSharedPtr@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)(result + 64) + 56))();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

uint64_t non-virtual thunk to'anonymous namespace'::IROperationImpl::GetValues(_anonymous_namespace_::IROperationImpl *this)
{
  return (*(uint64_t (**)(void))(*(void *)(*((void *)this + 1) + 64) + 64))();
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  unint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  void v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20F366488(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::vector<std::shared_ptr<MIL::IRArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  long long v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100]((void *)a1, v12);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    uint64_t v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v20, a2, v15, v9);
    uint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      std::string v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v17;
}

void sub_20F36663C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F366644(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  long long v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, void *a4)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    uint64_t v8 = *v5;
    uint64_t v7 = v5[1];
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = (std::__shared_weak_count *)a4[1];
    *a4 = v8;
    a4[1] = v7;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

void std::make_unique[abi:ne180100]<anonymous namespace'::IROperationImpl,std::shared_ptr<MIL::Location const> const&,std::shared_ptr<MIL::IROperator const> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>,std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::vector<std::shared_ptr<MIL::IRNamedValueType>>,std::vector<std::shared_ptr<MIL::IRBlock>>,MIL::IROpset const* const&>()
{
}

void sub_20F3668AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x10E1C40E9C383C0);
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::map[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *> *,long>>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_20F366928(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *> *,long>>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v6 = std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__find_equal<std::string>(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>> const&>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20F366AB8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::shared_ptr<MIL::IRArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>(this[1].__r_.__value_.__r.__words, *((void **)a2 + 3), *((void **)a2 + 4), (uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 4);
  return this;
}

{
  long long v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(long long *)((char *)a2 + 24);
  this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  return this;
}

void sub_20F366B3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<MIL::IRArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRArgument>*,std::shared_ptr<MIL::IRArgument>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRArgument>>,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F366BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::IRArgument>::operator=[abi:ne180100]<MIL::IRArgument,std::default_delete<MIL::IRArgument>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRArgument>::shared_ptr[abi:ne180100]<MIL::IRArgument,std::default_delete<MIL::IRArgument>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__move_assign(uint64_t a1, void *a2)
{
  long long v4 = (void *)(a1 + 8);
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::destroy(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  void *v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void std::vector<std::string>::reserve(std::vector<std::string> *this, std::vector<std::string>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3) < __n)
  {
    if (__n >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)p_end_cap;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, __n);
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_ = (std::__split_buffer<std::string>::pointer)((char *)__v.__first_ + v5);
    __v.__end_cap_.__value_ = &__v.__first_[v6];
    std::vector<std::string>::__swap_out_circular_buffer(this, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
}

void sub_20F366D38(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::reverse_iterator<std::string*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 24;
  }
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::string>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      int64_t v5 = v2 - 3;
      *(void *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        int64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3 + 24;
}

void sub_20F366FCC(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    long long v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_20F3670E4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>(uint64_t **a1, const void **a2, long long *a3)
{
  unint64_t v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

std::string *std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>>>::__construct_node<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>>@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t result = std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>::pair[abi:ne180100]((std::string *)(v6 + 32), a2);
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void sub_20F3671E0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::shared_ptr<MIL::IRArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void IRParameterImpl::~IRParameterImpl(IRParameterImpl *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  IRParameterImpl::~IRParameterImpl(this);

  JUMPOUT(0x21056C700);
}

void *MIL::IRParameter::IRParameter(void *this)
{
  *this = &unk_26C252760;
  return this;
}

void MIL::IRParameter::Make()
{
}

{
  operator new();
}

void sub_20F36739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21056C700](v10, 0x10E1C403F0BF65ALL);
  _Unwind_Resume(a1);
}

void sub_20F36744C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21056C700](v10, 0x10E1C403F0BF65ALL);
  _Unwind_Resume(a1);
}

void *MIL::IRParameter::MakeTypeSet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v4[0] = a1;
  v4[1] = a2;
  return std::allocate_shared[abi:ne180100]<std::unordered_set<MIL::IRValueType const*>,std::allocator<std::unordered_set<MIL::IRValueType const*>>,std::initializer_list<MIL::IRValueType const*> &,void>((uint64_t)v4, a3);
}

void MIL::IRMemoryEffect::~IRMemoryEffect(MIL::IRMemoryEffect *this)
{
}

void *MIL::IRMemoryEffect::IRMemoryEffect(void *this)
{
  *this = &unk_26C2527E8;
  return this;
}

{
  *this = &unk_26C2527E8;
  return this;
}

void *MIL::IRMemoryEffect::TryAsStateReadEffect(void *this)
{
  if (this) {
  return this;
  }
}

void *MIL::IRMemoryEffect::AsStateReadEffect(MIL::IRMemoryEffect *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void *MIL::IRMemoryEffect::TryAsStateWriteEffect(void *this)
{
  if (this) {
  return this;
  }
}

void *MIL::IRMemoryEffect::AsStateWriteEffect(MIL::IRMemoryEffect *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void MIL::IRStateReadEffect::~IRStateReadEffect(MIL::IRStateReadEffect *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C252818;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0xC400A2AC0F1);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C252818;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0xC400A2AC0F1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C252818;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0xC400A2AC0F1);
  }

  JUMPOUT(0x21056C700);
}

void *MIL::IRStateReadEffect::IRStateReadEffect(void *this)
{
  *this = &unk_26C252818;
  this[1] = 0;
  return this;
}

{
  *this = &unk_26C252818;
  this[1] = 0;
  return this;
}

void *MIL::IRStateReadEffect::IRStateReadEffect(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C252818;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C252818;
  result[1] = v2;
  return result;
}

void MIL::IRStateReadEffect::Make(MIL::IRStateReadEffect *this)
{
}

void sub_20F3678C4(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

void MIL::IRStateWriteEffect::~IRStateWriteEffect(MIL::IRStateWriteEffect *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C252838;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0xC400A2AC0F1);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C252838;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0xC400A2AC0F1);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C252838;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0xC400A2AC0F1);
  }

  JUMPOUT(0x21056C700);
}

void *MIL::IRStateWriteEffect::IRStateWriteEffect(void *this)
{
  *this = &unk_26C252838;
  this[1] = 0;
  return this;
}

{
  *this = &unk_26C252838;
  this[1] = 0;
  return this;
}

void *MIL::IRStateWriteEffect::IRStateWriteEffect(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C252838;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C252838;
  result[1] = v2;
  return result;
}

void MIL::IRStateWriteEffect::Make(MIL::IRStateWriteEffect *this)
{
}

void sub_20F367B0C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xC400A2AC0F1);
  _Unwind_Resume(a1);
}

void IROperatorImpl::~IROperatorImpl(IROperatorImpl *this)
{
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)this + 42);
  uint64_t v2 = *((void *)this + 41);
  *((void *)this + 41) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::~__value_func[abi:ne180100]((void *)this + 37);
  std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__value_func[abi:ne180100]((void *)this + 33);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__function::__value_func<void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::~__value_func[abi:ne180100]((void *)this + 27);
  std::__function::__value_func<std::string ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)this + 23);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)this + 19);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)this + 15);
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (void **)((char *)this + 64);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

{
  uint64_t vars8;

  IROperatorImpl::~IROperatorImpl(this);

  JUMPOUT(0x21056C700);
}

void *MIL::IROperator::IROperator(void *this)
{
  *this = &unk_26C252858;
  return this;
}

void MIL::IROperator::Make(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  *a6 = 0;
  a6[1] = 0;
  *a7 = 0;
  a7[1] = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v10, a8);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v9, a9);
  std::make_unique[abi:ne180100]<IROperatorImpl,std::string,unsigned long long &,unsigned long long &,unsigned long long &,unsigned long long &,std::shared_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>,std::shared_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>,std::unique_ptr<MIL::IRMemoryEffect>,std::function<MIL::ValidationResult ()(MIL::IROperation const&)>,std::function<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>>();
}

void sub_20F367DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)(v18 - 128));
  if (a5) {
    MIL::IROperator::Make(a5);
  }
  MIL::IROperator::Make(v17);
  _Unwind_Resume(a1);
}

void MIL::IROperator::Make()
{
}

void std::make_unique[abi:ne180100]<IROperatorImpl,std::string,unsigned long long &,unsigned long long &,unsigned long long &,unsigned long long &,std::shared_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>,std::shared_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>,std::unique_ptr<MIL::IRMemoryEffect>,std::function<MIL::ValidationResult ()(MIL::IROperation const&)>,std::function<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>>()
{
}

void MIL::IROperator::Make(long long *a1, long long *a2, long long *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  long long v6 = *a1;
  uint64_t v11 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  long long v9 = *a2;
  *(_OWORD *)std::string __p = v6;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v8 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v7 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v13, a4);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v12, a5);
  MIL::IROperator::Make(__p, &v9, (uint64_t *)&v8, &v7, (uint64_t)v13, (uint64_t)v12);
}

void sub_20F368194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)(v11 - 72));
  if (a3) {
    MIL::IROperator::Make(a3);
  }
  MIL::IROperator::Make(v10);
  _Unwind_Resume(a1);
}

void MIL::IROperator::Make(void *a1, void *a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  if (*a2)
  {
    for (uint64_t i = *(uint64_t ***)(*a2 + 16); i; uint64_t i = (uint64_t **)*i)
      (*(uint64_t (**)(uint64_t *))(*i[5] + 40))(i[5]);
  }
  long long v12 = (uint64_t **)*a3;
  if (*a3)
  {
    uint64_t v13 = a5;
    uint64_t v14 = *v12;
    long long v15 = v12[1];
    if (*v12 != v15)
    {
      do
      {
        uint64_t v16 = *v14;
        v14 += 2;
        (*(uint64_t (**)(uint64_t))(*(void *)v16 + 40))(v16);
      }
      while (v14 != v15);
    }
    a5 = v13;
  }
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  *a2 = 0;
  a2[1] = 0;
  *a3 = 0;
  a3[1] = 0;
  *a4 = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v19, a5);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v18, a6);
  std::make_unique[abi:ne180100]<IROperatorImpl,std::string,unsigned long long &,unsigned long long &,unsigned long long &,unsigned long long &,std::shared_ptr<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>,std::shared_ptr<std::vector<std::shared_ptr<MIL::IRParameter>>>,std::unique_ptr<MIL::IRMemoryEffect>,std::function<MIL::ValidationResult ()(MIL::IROperation const&)>,std::function<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>>();
}

void sub_20F368454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](&a27);
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100]((void *)(v28 - 128));
  if (a14) {
    MIL::IROperator::Make(a14);
  }
  MIL::IROperator::Make(v27);
  _Unwind_Resume(a1);
}

void *MIL::IROperator::MakeParameterMap@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v4[0] = a1;
  v4[1] = a2;
  return std::allocate_shared[abi:ne180100]<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>,std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>,std::initializer_list<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>> &,void>((uint64_t)v4, a3);
}

void *MIL::IROperator::MakeParameterVec@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v4[0] = a1;
  v4[1] = a2;
  return std::allocate_shared[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRParameter>>,std::allocator<std::vector<std::shared_ptr<MIL::IRParameter>>>,std::initializer_list<std::shared_ptr<MIL::IRParameter>> &,void>((uint64_t)v4, a3);
}

uint64_t IRParameterImpl::GetValidTypes(IRParameterImpl *this)
{
  return *((void *)this + 1);
}

uint64_t IRParameterImpl::IsConst(IRParameterImpl *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t IRParameterImpl::SetConst(uint64_t this, char a2)
{
  *(unsigned char *)(this + 24) = a2;
  return this;
}

uint64_t IRParameterImpl::IsOptional(IRParameterImpl *this)
{
  return *((unsigned __int8 *)this + 25);
}

void IRParameterImpl::SetOptional(IRParameterImpl *this, char a2)
{
  *((unsigned char *)this + 25) = a2;
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 5);
    *((void *)this + 4) = 0;
    *((void *)this + 5) = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
}

uint64_t IRParameterImpl::IsVariadic(IRParameterImpl *this)
{
  return *((unsigned __int8 *)this + 26);
}

uint64_t IRParameterImpl::SetVariadic(uint64_t this, char a2)
{
  *(unsigned char *)(this + 26) = a2;
  return this;
}

BOOL IRParameterImpl::IsValidType(IRParameterImpl *this, const MIL::IRValueType *a2, const MIL::IRValueType *a3)
{
  uint64_t v4 = *((void *)this + 1) + 16;
  do
    uint64_t v4 = *(void *)v4;
  while (v4 && !MIL::IsEqualOrStrongerType(*(MIL **)(v4 + 16), a2, a3));
  return v4 != 0;
}

BOOL IRParameterImpl::HasDefaultValue(IRParameterImpl *this)
{
  return *((void *)this + 4) != 0;
}

uint64_t IRParameterImpl::GetDefaultValue(IRParameterImpl *this)
{
  uint64_t result = *((void *)this + 4);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Default value has not been set.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3685F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t IRParameterImpl::TryGetDefaultValue(IRParameterImpl *this)
{
  return *((void *)this + 4);
}

uint64_t IRParameterImpl::TryGetDefaultValueSharedPtr@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 40);
  *a2 = *(void *)(this + 32);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void IRParameterImpl::SetDefaultValue(uint64_t a1, void *a2)
{
  if (!*(unsigned char *)(a1 + 25))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot set a default value for a non-optional IRParameter.");
LABEL_11:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v5 = (const MIL::IRValueType *)(*(uint64_t (**)(void))(*(void *)*a2 + 32))();
  uint64_t v6 = *(void *)(a1 + 8) + 16;
  do
  {
    uint64_t v6 = *(void *)v6;
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Default value does not have a permitted type for this IRParameter.");
      goto LABEL_11;
    }
  }
  while ((MIL::IsEqualOrStrongerType(*(MIL **)(v6 + 16), v5, v4) & 1) == 0);
  long long v7 = *(_OWORD *)a2;
  *a2 = 0;
  a2[1] = 0;
  long long v8 = *(std::__shared_weak_count **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_20F368734(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t IROperatorImpl::GetName(IROperatorImpl *this)
{
  return (uint64_t)this + 8;
}

uint64_t IROperatorImpl::GetMinInputs(IROperatorImpl *this)
{
  return *((void *)this + 4);
}

uint64_t IROperatorImpl::GetMaxInputs(IROperatorImpl *this)
{
  return *((void *)this + 5);
}

uint64_t IROperatorImpl::GetMinOutputs(IROperatorImpl *this)
{
  return *((void *)this + 6);
}

uint64_t IROperatorImpl::GetMaxOutputs(IROperatorImpl *this)
{
  return *((void *)this + 7);
}

void **IROperatorImpl::AddConstraints(uint64_t a1, uint64_t a2)
{
  return std::vector<std::shared_ptr<MIL::Validation::Constraints const>>::push_back[abi:ne180100]((uint64_t *)(a1 + 64), a2);
}

uint64_t IROperatorImpl::GetParameters(IROperatorImpl *this)
{
  uint64_t result = *((void *)this + 11);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Operator parameters have not been defined.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3687D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t IROperatorImpl::TryGetParameters(IROperatorImpl *this)
{
  return *((void *)this + 11);
}

uint64_t IROperatorImpl::GetOutputs(IROperatorImpl *this)
{
  uint64_t result = *((void *)this + 13);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Operator outputs have not been defined.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F368850(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t IROperatorImpl::TryGetOutputs(IROperatorImpl *this)
{
  return *((void *)this + 13);
}

void IROperatorImpl::Validate(IROperatorImpl *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  IROperatorImpl::ValidateInputs(this, a2, (MIL::ValidationResult *)v22);
  if (((*((uint64_t (**)(void ***))v22[0] + 2))(v22) & 1) != 0
    && (MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v22),
        IROperatorImpl::ValidateOutputs(this, a2, (MIL::ValidationResult *)v22),
        ((*((uint64_t (**)(void ***))v22[0] + 2))(v22) & 1) != 0)
    && (MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v22),
        IROperatorImpl::ValidateAttributes(this, a2, (MIL::ValidationResult *)v22),
        ((*((uint64_t (**)(void ***))v22[0] + 2))(v22) & 1) != 0))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v22);
    uint64_t v6 = *((void *)this + 8);
    uint64_t v7 = *((void *)this + 9);
    while (v6 != v7)
    {
      (*(void (**)(void ***__return_ptr))(**(void **)v6 + 16))(v22);
      if (((*((uint64_t (**)(void ***))v22[0] + 2))(v22) & 1) == 0) {
        goto LABEL_29;
      }
      MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v22);
      v6 += 16;
    }
    (*(void (**)(unsigned __int8 **__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(v21, a2);
    std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)v22, v21[0], v21[1]);
    long long v8 = (void *)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 160))(a2);
    long long v9 = v8 + 1;
    uint64_t v10 = (void *)*v8;
    if ((void *)*v8 != v8 + 1)
    {
      do
      {
        uint64_t v11 = (MIL::IRArgument **)v10[7];
        long long v12 = (MIL::IRArgument **)v10[8];
        while (v11 != v12)
        {
          if (((*(uint64_t (**)(void))(*(void *)*v11 + 24))() & 1) == 0)
          {
            uint64_t Name = MIL::IRArgument::GetName(*v11);
            if (*(char *)(Name + 23) < 0)
            {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)Name, *(void *)(Name + 8));
            }
            else
            {
              long long v14 = *(_OWORD *)Name;
              __p.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
              *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
            }
            if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v22, (unsigned __int8 *)&__p))
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Operator argument and output names must not be the same.");
              __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          v11 += 2;
        }
        long long v15 = (void *)v10[1];
        if (v15)
        {
          do
          {
            uint64_t v16 = v15;
            long long v15 = (void *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            uint64_t v16 = (void *)v10[2];
            BOOL v17 = *v16 == (void)v10;
            uint64_t v10 = v16;
          }
          while (!v17);
        }
        uint64_t v10 = v16;
      }
      while (v16 != v9);
    }
    uint64_t v18 = *((void *)this + 18);
    if (v18) {
      (*(void (**)(uint64_t, const MIL::IROperation *))(*(void *)v18 + 48))(v18, a2);
    }
    else {
      MIL::ValidationResult::ValidationResult(a3);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v22);
    v22[0] = (void **)v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v22);
  }
  else
  {
LABEL_29:
    MIL::MILResult::MILResult((std::string *)a3, (uint64_t)v22);
    *(void *)a3 = &unk_26C25DB50;
    *((_DWORD *)a3 + 12) = v23;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v22);
  }
}

void sub_20F368C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

BOOL IROperatorImpl::DefinesConstant(IROperatorImpl *this)
{
  return *((void *)this + 22) || *((void *)this + 45) != 0;
}

uint64_t IROperatorImpl::GetConstant@<X0>(IROperatorImpl *this@<X0>, const MIL::IROperation *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = *((void *)this + 22);
  if (result) {
    return (*(uint64_t (**)(uint64_t, const MIL::IROperation *))(*(void *)result + 48))(result, a2);
  }
  *a3 = 0;
  a3[1] = 0;
  return result;
}

void *IROperatorImpl::GetCallee@<X0>(IROperatorImpl *this@<X0>, const MIL::IROperation *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *((void *)this + 26);
  if (v3) {
    return (void *)(*(uint64_t (**)(uint64_t, const MIL::IROperation *))(*(void *)v3 + 48))(v3, a2);
  }
  else {
    return std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

BOOL IROperatorImpl::IsCall(IROperatorImpl *this)
{
  return *((void *)this + 26) != 0;
}

void *IROperatorImpl::SetGetCalleeFunction(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<std::string ()(MIL::IROperation const&)>::operator=[abi:ne180100]((void *)(a1 + 184), a2);
}

void *IROperatorImpl::SetGetConstantFunction(uint64_t a1, uint64_t a2)
{
  return std::function<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator=((void *)(a1 + 152), a2);
}

void *IROperatorImpl::SetSetConstantFunction(void *a1, uint64_t a2)
{
  if (!a1[22] && !a1[45])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot add SetConstantFunction to an IROperator that does not define a constant.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return std::__function::__value_func<void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::operator=[abi:ne180100](a1 + 27, a2);
}

void sub_20F368DEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void IROperatorImpl::SetConstant(uint64_t a1, uint64_t a2, long long *a3)
{
  if (!*(void *)(a1 + 240))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "No SetConstantFunction is defined for this IROperator.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v3 = *(void *)(a1 + 240);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v3 + 48))(v3, a2, &v5);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_20F368EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t IROperatorImpl::GetAttributes(IROperatorImpl *this)
{
  uint64_t result = *((void *)this + 31);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Operator attributes have not been defined.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F368F3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t IROperatorImpl::TryGetAttributes(IROperatorImpl *this)
{
  return *((void *)this + 31);
}

void IROperatorImpl::SetAttributes(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 256);
  *(_OWORD *)(a1 + 24std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void IROperatorImpl::InferOutputValueTypes(void *a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (!a1[36])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v29);
    std::operator+<char>();
    long long v14 = std::string::append(&v27, " ValueTypeInferenceFunction has not been defined.");
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v29, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &__p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  IROperatorImpl::ValidateInputs(a1, a3, a4, (MIL::ValidationResult *)&v29);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v29))
  {
    std::string v19 = __cxa_allocate_exception(0x48uLL);
    long long v23 = v30;
    long long v30 = 0uLL;
    long long v24 = v31;
    uint64_t v25 = v32;
    long long v31 = 0uLL;
    uint64_t v32 = 0;
    int v22 = &unk_26C25DB50;
    int v26 = v33;
    MIL::ValidationError::ValidationError(v19, &v22);
  }
  long long v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v20 = *a3;
  char v21 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = a1[36];
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *, void *, uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a2, &v20, a4, a5, a6);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v29);
}

void sub_20F3691D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a29 < 0)
  {
    operator delete(__p);
    if ((v31 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a30);
      _Unwind_Resume(a1);
    }
  }
  else if (!v31)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v30);
  goto LABEL_6;
}

void *IROperatorImpl::SetValueTypeInferenceFunction(uint64_t a1, uint64_t a2)
{
  return std::function<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator=((void *)(a1 + 264), a2);
}

uint64_t IROperatorImpl::InferOutputValues(void *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  if (!a1[40])
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v40);
    std::operator+<char>();
    uint64_t v13 = std::string::append(&v39, " ValueInferenceFunction has not been defined.");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    *(void *)&long long v37 = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v37) & 0x80u) == 0) {
      long long v15 = __p;
    }
    else {
      long long v15 = (void **)__p[0];
    }
    if ((SBYTE7(v37) & 0x80u) == 0) {
      uint64_t v16 = BYTE7(v37);
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)v15, v16);
    if (SBYTE7(v37) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, (const std::string *)__p);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v37 = 0u;
  int v38 = 1065353216;
  for (uint64_t i = *(uint64_t **)(a4 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    memset(&v39, 0, sizeof(v39));
    long long v8 = (uint64_t *)i[5];
    if (v8 != (uint64_t *)i[6])
    {
      uint64_t v34 = *v8;
      uint64_t v9 = v8[1];
      uint64_t v35 = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      MIL::IRTypedArgument::Make();
    }
    int v40 = (std::string *)(i + 2);
    uint64_t v10 = (std::string *)(std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, (long long **)&v40)+ 40);
    if (v10 != &v39) {
      std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((uint64_t)v10, (uint64_t *)v39.__r_.__value_.__l.__data_, (uint64_t *)v39.__r_.__value_.__l.__size_, (uint64_t)(v39.__r_.__value_.__l.__size_ - v39.__r_.__value_.__r.__words[0]) >> 4);
    }
    int v40 = &v39;
    std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
  }
  IROperatorImpl::ValidateInputs(a1, a3, __p, (MIL::ValidationResult *)&v40);
  if (!MIL::ValidationResult::IsGood((MIL::ValidationResult *)&v40))
  {
    uint64_t v18 = __cxa_allocate_exception(0x48uLL);
    long long v19 = v41;
    long long v41 = 0uLL;
    long long v30 = v19;
    long long v31 = v42;
    uint64_t v32 = v43;
    long long v42 = 0uLL;
    uint64_t v43 = 0;
    uint64_t v29 = &unk_26C25DB50;
    int v33 = v44;
    MIL::ValidationError::ValidationError(v18, &v29);
  }
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v27 = *a3;
  uint64_t v28 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::function<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::operator()((uint64_t)(a1 + 37), a2, (uint64_t)&v27, a4, a5, a6, a7);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)&v40);
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)__p);
}

void sub_20F3696D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44)
{
  if (a34 < 0)
  {
    operator delete(__p);
    if ((v45 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a44);
      _Unwind_Resume(a1);
    }
  }
  else if (!v45)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v44);
  goto LABEL_6;
}

void *IROperatorImpl::SetValueInferenceFunction(uint64_t a1, uint64_t a2)
{
  return std::function<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::operator=((void *)(a1 + 296), a2);
}

BOOL IROperatorImpl::HasValueInferenceFunction(IROperatorImpl *this)
{
  return *((void *)this + 40) != 0;
}

BOOL IROperatorImpl::HasValueTypeInferenceFunction(IROperatorImpl *this)
{
  return *((void *)this + 36) != 0;
}

uint64_t IROperatorImpl::GetMemoryEffect(IROperatorImpl *this)
{
  return *((void *)this + 41);
}

void IROperatorImpl::GetConstants(IROperatorImpl *this@<X0>, const MIL::IROperation *a2@<X1>, void *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 22);
  uint64_t v5 = *((void *)this + 45);
  if (v4)
  {
    if (!v5)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, const MIL::IROperation *))(*(void *)v4 + 48))(&v16, v4, a2);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      long long v14 = a3;
      char v15 = 0;
      uint64_t v6 = operator new(0x10uLL);
      *a3 = v6;
      a3[1] = v6;
      a3[2] = v6 + 2;
      a3[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const>*>((uint64_t)(a3 + 2), &v16, &v16.__r_.__value_.__r.__words[2], v6);
      if (v16.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16.__r_.__value_.__l.__size_);
      }
      return;
    }
  }
  else if (!v5)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
    std::operator+<char>();
    long long v8 = std::string::append(&__p, " GetConstantFunction or GetConstantsFunction has not been defined.");
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v16;
    }
    else {
      uint64_t v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v16.__r_.__value_.__l.__size_;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)v10, size);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::stringbuf::str();
    std::runtime_error::runtime_error(exception, &v16);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = *(void (**)(void))(*(void *)v5 + 48);

  v7();
}

void sub_20F369A90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (*(char *)(v17 - 41) < 0)
  {
    operator delete(*(void **)(v17 - 64));
    if ((v16 & 1) == 0)
    {
LABEL_6:
      std::ostringstream::~ostringstream((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void *IROperatorImpl::SetGetConstantsFunction(uint64_t a1, uint64_t a2)
{
  return std::function<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::operator=((void *)(a1 + 336), a2);
}

void **std::vector<std::shared_ptr<MIL::Validation::Constraints const>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((uint64_t)v7 - *a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - *a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    v16[4] = result;
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)result, v12);
    long long v14 = &v13[16 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[16 * v15];
    *(_OWORD *)long long v14 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    void v16[2] = v14 + 16;
    std::vector<std::shared_ptr<MIL::Validation::Constraints const>>::__swap_out_circular_buffer(a1, v16);
    long long v8 = (_OWORD *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer(v16);
  }
  else
  {
    *uint64_t v7 = *(_OWORD *)a2;
    long long v8 = v7 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    a1[1] = (uint64_t)v8;
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_20F369C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::shared_ptr<MIL::Validation::Constraints const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Validation::Constraints const>>,std::reverse_iterator<std::shared_ptr<MIL::Validation::Constraints const>*>,std::reverse_iterator<std::shared_ptr<MIL::Validation::Constraints const>*>,std::reverse_iterator<std::shared_ptr<MIL::Validation::Constraints const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::Validation::Constraints const>>,std::reverse_iterator<std::shared_ptr<MIL::Validation::Constraints const>*>,std::reverse_iterator<std::shared_ptr<MIL::Validation::Constraints const>*>,std::reverse_iterator<std::shared_ptr<MIL::Validation::Constraints const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Validation::Constraints const>>,std::reverse_iterator<std::shared_ptr<MIL::Validation::Constraints const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::Validation::Constraints const>>,std::reverse_iterator<std::shared_ptr<MIL::Validation::Constraints const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void IROperatorImpl::ValidateInputs(IROperatorImpl *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  MIL::ValidationResult::ValidationResult((MIL::ValidationResult *)v11);
  memset(v9, 0, sizeof(v9));
  int v10 = 1065353216;
  MIL::Validation::OpToTypeInferenceParams(a2, (uint64_t)v9, (MIL::ValidationResult *)v7);
  if ((*(uint64_t (**)(void *))(v7[0] + 16))(v7))
  {
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v7);
    LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
    MIL::IRObject::GetAttributes(a2);
    IROperatorImpl::ValidateInputs(this, LocationPtr, v9, a3);
  }
  else
  {
    MIL::MILResult::MILResult((std::string *)a3, (uint64_t)v7);
    *(void *)a3 = &unk_26C25DB50;
    *((_DWORD *)a3 + 12) = v8;
    MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v7);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)v9);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)v11);
}

void sub_20F369E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table((uint64_t)va);
  MIL::ValidationResult::~ValidationResult((MIL::ValidationResult *)(v9 - 88));
  _Unwind_Resume(a1);
}

uint64_t IROperatorImpl::ValidateOutputs@<X0>(IROperatorImpl *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  memset(v91, 0, sizeof(v91));
  int v92 = 1065353216;
  if ((unint64_t)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 192))(a2) >= *((void *)this + 6)
    && (unint64_t)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 192))(a2) <= *((void *)this + 7))
  {
    uint64_t v29 = (void *)*((void *)this + 13);
    if (!v29)
    {
LABEL_56:
      (*(void (**)(std::string *__return_ptr, const MIL::IROperation *))(*(void *)a2 + 200))(&v75, a2);
      std::string::size_type size = v75.__r_.__value_.__l.__size_;
      for (std::string::size_type i = v75.__r_.__value_.__r.__words[0]; ; i += 24)
      {
        if (i == size)
        {
          v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
          MIL::ValidationResult::ValidationResult(a3);
          return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v91);
        }
        if (*(char *)(i + 23) < 0)
        {
          if (!*(void *)(i + 8))
          {
LABEL_97:
            LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
            std::string v56 = (std::__shared_weak_count *)LocationPtr[1];
            uint64_t v69 = *LocationPtr;
            v70 = v56;
            if (v56) {
              atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            std::string::basic_string[abi:ne180100]<0>(v67, "Operation output names must be non-empty.");
            MIL::ValidationResult::ValidationResult(a3, &v69, 311, v67);
            if (v68 < 0) {
              operator delete(v67[0]);
            }
            std::string v57 = v70;
            if (!v70) {
              goto LABEL_103;
            }
            goto LABEL_102;
          }
        }
        else if (!*(unsigned char *)(i + 23))
        {
          goto LABEL_97;
        }
        if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v91, (unsigned __int8 *)i))
        {
          uint64_t v59 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
          std::string v60 = (std::__shared_weak_count *)v59[1];
          uint64_t v65 = *v59;
          uint64_t v66 = v60;
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::operator+<char>();
          std::string v61 = std::string::append(&v89, "' as both an input and an output.");
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          std::string::size_type v64 = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)v63 = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          MIL::ValidationResult::ValidationResult(a3, &v65, 303, v63);
          if (SHIBYTE(v64) < 0) {
            operator delete(v63[0]);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          std::string v57 = v66;
          if (!v66)
          {
LABEL_103:
            v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v75;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v89);
            return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v91);
          }
LABEL_102:
          std::__shared_weak_count::__release_shared[abi:ne180100](v57);
          goto LABEL_103;
        }
      }
    }
    uint64_t v30 = 0;
    for (unint64_t j = 0; ; ++j)
    {
      if (j >= (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 192))(a2)) {
        goto LABEL_56;
      }
      Outputuint64_t Type = MIL::IROperation::GetOutputType(a2, j);
      if (j >= (uint64_t)(v29[1] - *v29) >> 4) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v33 = OutputType;
      if (((*(uint64_t (**)(void, uint64_t))(**(void **)(*v29 + v30) + 72))(*(void *)(*v29 + v30), OutputType) & 1) == 0)break; {
      v30 += 16;
      }
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Output '", 8);
    unint64_t v36 = (void *)std::ostream::operator<<();
    long long v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"' has incorrect type for operator '", 35);
    uint64_t v38 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
    int v39 = *(char *)(v38 + 23);
    if (v39 >= 0) {
      uint64_t v40 = v38;
    }
    else {
      uint64_t v40 = *(void *)v38;
    }
    if (v39 >= 0) {
      uint64_t v41 = *(unsigned __int8 *)(v38 + 23);
    }
    else {
      uint64_t v41 = *(void *)(v38 + 8);
    }
    long long v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v40, v41);
    uint64_t v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"'. Expected ", 12);
    if (j >= (uint64_t)(v29[1] - *v29) >> 4) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    int v44 = v43;
    uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(*v29 + v30) + 16))(*(void *)(*v29 + v30));
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v46 = &v89;
    }
    else {
      uint64_t v46 = (std::string *)v89.__r_.__value_.__r.__words[0];
    }
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v47 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v47 = v89.__r_.__value_.__l.__size_;
    }
    uint64_t v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v46, v47);
    long long v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"; got ", 6);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v33 + 56))(&v88, v33);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v50 = &v88;
    }
    else {
      long long v50 = (std::string *)v88.__r_.__value_.__r.__words[0];
    }
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v51 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v51 = v88.__r_.__value_.__l.__size_;
    }
    long long v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
    v87.__r_.__value_.__s.__data_[0] = 46;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)&v87, 1);
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    std::string v53 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
    unint64_t v54 = (std::__shared_weak_count *)v53[1];
    uint64_t v73 = *v53;
    v74 = v54;
    if (v54) {
      atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::stringbuf::str();
    MIL::ValidationResult::ValidationResult(a3, &v73, 313, &__p);
    if (v72 < 0) {
      operator delete(__p);
    }
    if (v74) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v74);
    }
    v75.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
    *(std::string::size_type *)((char *)v75.__r_.__value_.__r.__words
                              + *(void *)(v75.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8]
                                                                                                + 24);
    v75.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
    if (v77 < 0) {
      operator delete(v76);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x21056C620](&v78);
  }
  else
  {
    (*(void (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v85, " number of outputs must be within the range (inclusive): ");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v86.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v86.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v84, *((void *)this + 6));
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v8 = &v84;
    }
    else {
      int v8 = (std::string *)v84.__r_.__value_.__r.__words[0];
    }
    if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = v84.__r_.__value_.__l.__size_;
    }
    int v10 = std::string::append(&v86, (const std::string::value_type *)v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v87.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    unint64_t v12 = std::string::append(&v87, " : ");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v88.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v83, *((void *)this + 7));
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v14 = &v83;
    }
    else {
      long long v14 = (std::string *)v83.__r_.__value_.__r.__words[0];
    }
    if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v15 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v15 = v83.__r_.__value_.__l.__size_;
    }
    int v16 = std::string::append(&v88, (const std::string::value_type *)v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v89.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    uint64_t v18 = std::string::append(&v89, ". Provided ");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    unint64_t v20 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 192))(a2);
    std::to_string(&v82, v20);
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v21 = &v82;
    }
    else {
      char v21 = (std::string *)v82.__r_.__value_.__r.__words[0];
    }
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v22 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v22 = v82.__r_.__value_.__l.__size_;
    }
    long long v23 = std::string::append(&v75, (const std::string::value_type *)v21, v22);
    long long v24 = (std::string::value_type *)v23->__r_.__value_.__r.__words[0];
    std::string::size_type v25 = v23->__r_.__value_.__l.__size_;
    v90[0] = v23->__r_.__value_.__r.__words[2];
    *(_DWORD *)((char *)v90 + 3) = *(_DWORD *)((char *)&v23->__r_.__value_.__r.__words[2] + 3);
    int v26 = SHIBYTE(v23->__r_.__value_.__r.__words[2]);
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v82.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v89.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v83.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v88.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v87.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v84.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    uint64_t v27 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
    uint64_t v28 = (std::__shared_weak_count *)v27[1];
    uint64_t v80 = *v27;
    v81 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v26 < 0)
    {
      std::string::__init_copy_ctor_external(&v79, v24, v25);
    }
    else
    {
      v79.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
      v79.__r_.__value_.__l.__size_ = v25;
      LODWORD(v79.__r_.__value_.__r.__words[2]) = v90[0];
      *(_DWORD *)((char *)&v79.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v90 + 3);
      *((unsigned char *)&v79.__r_.__value_.__s + 23) = v26;
    }
    MIL::ValidationResult::ValidationResult(a3, &v80, 310, &v79);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    if (v81) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v81);
    }
    if (v26 < 0) {
      operator delete(v24);
    }
  }
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v91);
}

void sub_20F36A788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 121) < 0) {
    operator delete(*(void **)(v28 - 144));
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  *(void *)(v28 - 144) = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 144));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v28 - 112);
  _Unwind_Resume(a1);
}

void IROperatorImpl::ValidateAttributes(IROperatorImpl *this@<X0>, const MIL::IROperation *a2@<X1>, MIL::ValidationResult *a3@<X8>)
{
  uint64_t v6 = *(unsigned __int8 **)(MIL::IRObject::GetAttributes(a2) + 16);
  if (v6)
  {
    while (1)
    {
      if (!*((void *)v6 + 5))
      {
        LocationPtr = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
        long long v14 = (std::__shared_weak_count *)LocationPtr[1];
        uint64_t v71 = *LocationPtr;
        char v72 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        std::string::size_type v15 = std::string::append(&v65, "'.");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        std::string::size_type v70 = v15->__r_.__value_.__r.__words[2];
        long long v69 = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a3, &v71, 307, &v69);
        if (SHIBYTE(v70) < 0) {
          operator delete((void *)v69);
        }
        if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v65.__r_.__value_.__l.__data_);
        }
        if (v72) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v72);
        }
        return;
      }
      long long v7 = (void *)*((void *)this + 31);
      if (v7)
      {
        int v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v7, v6 + 16);
        if (v8)
        {
          uint64_t v9 = *((void *)v8 + 5);
          uint64_t v10 = (*(uint64_t (**)(uint64_t))(**((void **)v6 + 5) + 32))(*((void *)v6 + 5));
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 72))(v9, v10) & 1) == 0) {
            break;
          }
        }
      }
      uint64_t v6 = *(unsigned __int8 **)v6;
      if (!v6) {
        goto LABEL_7;
      }
    }
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v65);
    long long v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Attribute '", 11);
    int v18 = (char)v6[39];
    if (v18 >= 0) {
      uint64_t v19 = (uint64_t)(v6 + 16);
    }
    else {
      uint64_t v19 = *((void *)v6 + 2);
    }
    if (v18 >= 0) {
      uint64_t v20 = v6[39];
    }
    else {
      uint64_t v20 = *((void *)v6 + 3);
    }
    char v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
    std::string::size_type v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"' has incorrect type for operator '", 35);
    uint64_t v23 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
    int v24 = *(char *)(v23 + 23);
    if (v24 >= 0) {
      uint64_t v25 = v23;
    }
    else {
      uint64_t v25 = *(void *)v23;
    }
    if (v24 >= 0) {
      uint64_t v26 = *(unsigned __int8 *)(v23 + 23);
    }
    else {
      uint64_t v26 = *(void *)(v23 + 8);
    }
    uint64_t v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v25, v26);
    uint64_t v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"'. Expected ", 12);
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if ((v64 & 0x80u) == 0) {
      uint64_t v30 = v63;
    }
    else {
      uint64_t v30 = (void **)v63[0];
    }
    if ((v64 & 0x80u) == 0) {
      uint64_t v31 = v64;
    }
    else {
      uint64_t v31 = (uint64_t)v63[1];
    }
    uint64_t v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v30, v31);
    uint64_t v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"; got ", 6);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 56))(__p, v10);
    if ((v62 & 0x80u) == 0) {
      uint64_t v34 = __p;
    }
    else {
      uint64_t v34 = (void **)__p[0];
    }
    if ((v62 & 0x80u) == 0) {
      uint64_t v35 = v62;
    }
    else {
      uint64_t v35 = (uint64_t)__p[1];
    }
    unint64_t v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)v34, v35);
    char v73 = 46;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)&v73, 1);
    if ((char)v62 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v64 < 0) {
      operator delete(v63[0]);
    }
    long long v37 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
    uint64_t v38 = (std::__shared_weak_count *)v37[1];
    uint64_t v59 = *v37;
    std::string v60 = v38;
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::stringbuf::str();
    MIL::ValidationResult::ValidationResult(a3, &v59, 306, &v57);
    if (v58 < 0) {
      operator delete(v57);
    }
    int v39 = v60;
    if (!v60) {
      goto LABEL_57;
    }
LABEL_56:
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    goto LABEL_57;
  }
LABEL_7:
  uint64_t v11 = *((void *)this + 31);
  if (!v11 || (unint64_t v12 = *(unsigned __int8 **)(v11 + 16)) == 0)
  {
LABEL_12:
    MIL::ValidationResult::ValidationResult(a3);
    return;
  }
  while (((*(uint64_t (**)(uint64_t))(**((void **)v12 + 5) + 40))(*((void *)v12 + 5)) & 1) != 0
       || MIL::IRObject::TryGetAttribute((uint64_t)a2, v12 + 16))
  {
    unint64_t v12 = *(unsigned __int8 **)v12;
    if (!v12) {
      goto LABEL_12;
    }
  }
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v65);
  uint64_t v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v65, (uint64_t)"Required attribute '", 20);
  int v41 = (char)v12[39];
  if (v41 >= 0) {
    uint64_t v42 = (uint64_t)(v12 + 16);
  }
  else {
    uint64_t v42 = *((void *)v12 + 2);
  }
  if (v41 >= 0) {
    uint64_t v43 = v12[39];
  }
  else {
    uint64_t v43 = *((void *)v12 + 3);
  }
  int v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
  uint64_t v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"' missing for operator '", 24);
  uint64_t v46 = (*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  int v47 = *(char *)(v46 + 23);
  if (v47 >= 0) {
    uint64_t v48 = v46;
  }
  else {
    uint64_t v48 = *(void *)v46;
  }
  if (v47 >= 0) {
    uint64_t v49 = *(unsigned __int8 *)(v46 + 23);
  }
  else {
    uint64_t v49 = *(void *)(v46 + 8);
  }
  long long v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v48, v49);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"'.", 2);
  std::string::size_type v51 = (uint64_t *)MIL::IRObject::GetLocationPtr(a2);
  long long v52 = (std::__shared_weak_count *)v51[1];
  uint64_t v55 = *v51;
  std::string v56 = v52;
  if (v52) {
    atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::stringbuf::str();
  MIL::ValidationResult::ValidationResult(a3, &v55, 321, &v53);
  if (v54 < 0) {
    operator delete(v53);
  }
  int v39 = v56;
  if (v56) {
    goto LABEL_56;
  }
LABEL_57:
  v65.__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
  *(std::string::size_type *)((char *)v65.__r_.__value_.__r.__words + *(void *)(v65.__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v65.__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
  if (v67 < 0) {
    operator delete(v66);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x21056C620](&v68);
}

void sub_20F36AFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  std::ostringstream::~ostringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void IROperatorImpl::ValidateInputs(void *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X2>, MIL::ValidationResult *a4@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  int v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, (unsigned __int8 *)__p);
  uint64_t v9 = v8;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__r_.__value_.__l.__data_);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = (std::__shared_weak_count *)a2[1];
      uint64_t v132 = *a2;
      v133 = v10;
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::basic_string[abi:ne180100]<0>(v130, "Operation parameter names must be non-empty.");
      MIL::ValidationResult::ValidationResult(a4, &v132, 316, v130);
      if (v131 < 0) {
        operator delete(v130[0]);
      }
      uint64_t v11 = v133;
      if (v133) {
LABEL_8:
      }
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      return;
    }
  }
  else if (v8)
  {
    goto LABEL_3;
  }
  uint64_t v12 = a1[11];
  if (v12 && (long long v13 = *(unsigned __int8 **)(v12 + 16)) != 0)
  {
    while (1)
    {
      long long v14 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a3, v13 + 16);
      if (v14)
      {
        memset(&v125, 0, sizeof(v125));
        std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(&v125, *((void **)v14 + 5), *((void **)v14 + 6), (uint64_t)(*((void *)v14 + 6) - *((void *)v14 + 5)) >> 4);
        char v15 = (*(uint64_t (**)(uint64_t))(**((void **)v13 + 5) + 56))(*((void *)v13 + 5));
        std::string::size_type size = v125.__r_.__value_.__l.__size_;
        long long v17 = (MIL::IRTypedArgument **)v125.__r_.__value_.__r.__words[0];
        if (v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0] == 16) {
          char v18 = 1;
        }
        else {
          char v18 = v15;
        }
        if (v18)
        {
          while (1)
          {
            if (v17 == (MIL::IRTypedArgument **)size)
            {
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
              std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              goto LABEL_33;
            }
            Isuint64_t ValueType = MIL::IRTypedArgument::IsValueType(*v17);
            uint64_t v20 = *(unsigned int (**)(void))(**((void **)v13 + 5) + 24);
            if (IsValueType)
            {
              if (v20())
              {
                std::string v79 = (std::__shared_weak_count *)a2[1];
                uint64_t v116 = *a2;
                v117 = v79;
                if (v79) {
                  atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                std::operator+<char>();
                uint64_t v80 = std::string::append(__p, "' must be const");
                long long v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
                std::string::size_type v115 = v80->__r_.__value_.__r.__words[2];
                long long v114 = v81;
                v80->__r_.__value_.__l.__size_ = 0;
                v80->__r_.__value_.__r.__words[2] = 0;
                v80->__r_.__value_.__r.__words[0] = 0;
                MIL::ValidationResult::ValidationResult(a4, &v116, 302, &v114);
                if (SHIBYTE(v115) < 0) {
                  operator delete((void *)v114);
                }
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p[0].__r_.__value_.__l.__data_);
                }
                uint64_t v55 = v117;
                if (v117) {
                  goto LABEL_136;
                }
                goto LABEL_137;
              }
              uint64_t ValueType = MIL::IRTypedArgument::GetValueType((MIL::IRTypedArgument::IRTypedArgumentImpl **)*v17);
            }
            else
            {
              if (v20())
              {
                uint64_t Value = MIL::IRTypedArgument::GetValue((MIL::IRTypedArgument::IRTypedArgumentImpl **)*v17);
                uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)Value + 32))(Value);
                uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v23 + 24))(v23);
                if (v24)
                {
                  uint64_t v25 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 96))(v24);
                  uint64_t v26 = *v25;
                  uint64_t v27 = v25[1];
                  while (v26 != v27)
                  {
                    if (!(*(uint64_t (**)(void))(**(void **)v26 + 16))())
                    {
                      long long v52 = (std::__shared_weak_count *)a2[1];
                      uint64_t v112 = *a2;
                      v113 = v52;
                      if (v52) {
                        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      std::operator+<char>();
                      std::string v53 = std::string::append(__p, "' must be constant");
                      long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
                      std::string::size_type v111 = v53->__r_.__value_.__r.__words[2];
                      long long v110 = v54;
                      v53->__r_.__value_.__l.__size_ = 0;
                      v53->__r_.__value_.__r.__words[2] = 0;
                      v53->__r_.__value_.__r.__words[0] = 0;
                      MIL::ValidationResult::ValidationResult(a4, &v112, 302, &v110);
                      if (SHIBYTE(v111) < 0) {
                        operator delete((void *)v110);
                      }
                      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(__p[0].__r_.__value_.__l.__data_);
                      }
                      uint64_t v55 = v113;
                      if (v113) {
                        goto LABEL_136;
                      }
                      goto LABEL_137;
                    }
                    v26 += 8;
                  }
                }
              }
              uint64_t v28 = MIL::IRTypedArgument::GetValue((MIL::IRTypedArgument::IRTypedArgumentImpl **)*v17);
              uint64_t ValueType = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 32))(v28);
            }
            uint64_t v29 = ValueType;
            if (((*(uint64_t (**)(uint64_t, uint64_t))(**((void **)v13 + 5) + 72))(*((void *)v13 + 5), ValueType) & 1) == 0)
            {
              std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
              std::string v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Param '", 7);
              int v57 = (char)v13[39];
              if (v57 >= 0) {
                uint64_t v58 = (uint64_t)(v13 + 16);
              }
              else {
                uint64_t v58 = *((void *)v13 + 2);
              }
              if (v57 >= 0) {
                uint64_t v59 = v13[39];
              }
              else {
                uint64_t v59 = *((void *)v13 + 3);
              }
              std::string v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
              std::string v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"' has incorrect type for operator '", 35);
              uint64_t v64 = a1[1];
              v63 = a1 + 1;
              uint64_t v62 = v64;
              int v65 = *((char *)v63 + 23);
              if (v65 >= 0) {
                uint64_t v66 = (uint64_t)v63;
              }
              else {
                uint64_t v66 = v62;
              }
              if (v65 >= 0) {
                uint64_t v67 = *((unsigned __int8 *)v63 + 23);
              }
              else {
                uint64_t v67 = v63[1];
              }
              uint64_t v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v66, v67);
              long long v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"'. Expected ", 12);
              uint64_t v70 = (*(uint64_t (**)(uint64_t))(**((void **)v13 + 5) + 16))(*((void *)v13 + 5));
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v71 = &v120;
              }
              else {
                uint64_t v71 = (std::string *)v120.__r_.__value_.__r.__words[0];
              }
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v72 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v72 = v120.__r_.__value_.__l.__size_;
              }
              char v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)v71, v72);
              v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"; got ",
                      6);
              (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v29 + 56))(&v119, v29);
              if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string v75 = &v119;
              }
              else {
                std::string v75 = (std::string *)v119.__r_.__value_.__r.__words[0];
              }
              if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v76 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v76 = v119.__r_.__value_.__l.__size_;
              }
              char v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
              v118.__r_.__value_.__s.__data_[0] = 46;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)&v118, 1);
              if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v119.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v120.__r_.__value_.__l.__data_);
              }
              uint64_t v78 = (std::__shared_weak_count *)a2[1];
              uint64_t v104 = *a2;
              v105 = v78;
              if (v78) {
                atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              std::stringbuf::str();
              MIL::ValidationResult::ValidationResult(a4, &v104, 304, &v102);
              if (v103 < 0) {
                operator delete(v102);
              }
              if (v105) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v105);
              }
              __p[0].__r_.__value_.__r.__words[0] = *MEMORY[0x263F8C2C8];
              *(std::string::size_type *)((char *)__p[0].__r_.__value_.__r.__words
                                        + *(void *)(__p[0].__r_.__value_.__r.__words[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
              __p[0].__r_.__value_.__l.__size_ = MEMORY[0x263F8C318] + 16;
              if (v108 < 0) {
                operator delete(v107);
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x21056C620](&v109);
              goto LABEL_137;
            }
            v17 += 2;
          }
        }
        std::string v82 = (std::__shared_weak_count *)a2[1];
        uint64_t v123 = *a2;
        v124 = v82;
        if (v82) {
          atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::operator+<char>();
        std::string v83 = std::string::append(&v119, "' has ");
        long long v84 = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
        v120.__r_.__value_.__r.__words[2] = v83->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v84;
        v83->__r_.__value_.__l.__size_ = 0;
        v83->__r_.__value_.__r.__words[2] = 0;
        v83->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v118, (uint64_t)(v125.__r_.__value_.__l.__size_ - v125.__r_.__value_.__r.__words[0]) >> 4);
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v85 = &v118;
        }
        else {
          std::string v85 = (std::string *)v118.__r_.__value_.__r.__words[0];
        }
        if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v86 = HIBYTE(v118.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v86 = v118.__r_.__value_.__l.__size_;
        }
        std::string v87 = std::string::append(&v120, (const std::string::value_type *)v85, v86);
        long long v88 = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        __p[0].__r_.__value_.__r.__words[2] = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        std::string v89 = std::string::append(__p, " args bound to it, but is not declared variadic. Non-variadic params must have exactly 1 arg binding.");
        long long v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
        std::string::size_type v122 = v89->__r_.__value_.__r.__words[2];
        long long v121 = v90;
        v89->__r_.__value_.__l.__size_ = 0;
        v89->__r_.__value_.__r.__words[2] = 0;
        v89->__r_.__value_.__r.__words[0] = 0;
        MIL::ValidationResult::ValidationResult(a4, &v123, 320, &v121);
        if (SHIBYTE(v122) < 0) {
          operator delete((void *)v121);
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v118.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v120.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v119.__r_.__value_.__l.__data_);
        }
        uint64_t v55 = v124;
        if (v124) {
LABEL_136:
        }
          std::__shared_weak_count::__release_shared[abi:ne180100](v55);
LABEL_137:
        __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v125;
        std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        return;
      }
      if (((*(uint64_t (**)(uint64_t))(**((void **)v13 + 5) + 40))(*((void *)v13 + 5)) & 1) == 0) {
        break;
      }
LABEL_33:
      long long v13 = *(unsigned __int8 **)v13;
      if (!v13) {
        goto LABEL_34;
      }
    }
    v91 = (std::__shared_weak_count *)a2[1];
    uint64_t v128 = *a2;
    v129 = v91;
    if (v91) {
      atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::operator+<char>();
    int v92 = std::string::append(__p, "' is missing");
    long long v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    std::string::size_type v127 = v92->__r_.__value_.__r.__words[2];
    long long v126 = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    MIL::ValidationResult::ValidationResult(a4, &v128, 317, &v126);
    if (SHIBYTE(v127) < 0) {
      operator delete((void *)v126);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    uint64_t v11 = v129;
    if (v129) {
      goto LABEL_8;
    }
  }
  else
  {
LABEL_34:
    unint64_t v30 = a3[3];
    if (v30 >= a1[4] && v30 <= a1[5])
    {
      MIL::ValidationResult::ValidationResult(a4);
    }
    else
    {
      std::operator+<char>();
      uint64_t v31 = std::string::append(&v100, "' number of inputs must be within the range (inclusive): ");
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v99, a1[4]);
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v33 = &v99;
      }
      else {
        uint64_t v33 = (std::string *)v99.__r_.__value_.__r.__words[0];
      }
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v34 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v34 = v99.__r_.__value_.__l.__size_;
      }
      uint64_t v35 = std::string::append(&v118, (const std::string::value_type *)v33, v34);
      long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
      v119.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v36;
      v35->__r_.__value_.__l.__size_ = 0;
      v35->__r_.__value_.__r.__words[2] = 0;
      v35->__r_.__value_.__r.__words[0] = 0;
      long long v37 = std::string::append(&v119, " : ");
      long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
      v120.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v38;
      v37->__r_.__value_.__l.__size_ = 0;
      v37->__r_.__value_.__r.__words[2] = 0;
      v37->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v98, a1[5]);
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v39 = &v98;
      }
      else {
        int v39 = (std::string *)v98.__r_.__value_.__r.__words[0];
      }
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v40 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v40 = v98.__r_.__value_.__l.__size_;
      }
      int v41 = std::string::append(&v120, (const std::string::value_type *)v39, v40);
      long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v125.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v125.__r_.__value_.__l.__data_ = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      uint64_t v43 = std::string::append(&v125, ". Provided ");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      __p[0].__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v97, a3[3]);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v45 = &v97;
      }
      else {
        uint64_t v45 = (std::string *)v97.__r_.__value_.__r.__words[0];
      }
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v46 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v46 = v97.__r_.__value_.__l.__size_;
      }
      int v47 = std::string::append(__p, (const std::string::value_type *)v45, v46);
      uint64_t v48 = (std::string::value_type *)v47->__r_.__value_.__r.__words[0];
      std::string::size_type v49 = v47->__r_.__value_.__l.__size_;
      v101[0] = v47->__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v101 + 3) = *(_DWORD *)((char *)&v47->__r_.__value_.__r.__words[2] + 3);
      int v50 = SHIBYTE(v47->__r_.__value_.__r.__words[2]);
      v47->__r_.__value_.__l.__size_ = 0;
      v47->__r_.__value_.__r.__words[2] = 0;
      v47->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v125.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v120.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v119.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v118.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v100.__r_.__value_.__l.__data_);
      }
      std::string::size_type v51 = (std::__shared_weak_count *)a2[1];
      uint64_t v95 = *a2;
      v96 = v51;
      if (v51) {
        atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v50 < 0)
      {
        std::string::__init_copy_ctor_external(&v94, v48, v49);
      }
      else
      {
        v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
        v94.__r_.__value_.__l.__size_ = v49;
        LODWORD(v94.__r_.__value_.__r.__words[2]) = v101[0];
        *(_DWORD *)((char *)&v94.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v101 + 3);
        *((unsigned char *)&v94.__r_.__value_.__s + 23) = v50;
      }
      MIL::ValidationResult::ValidationResult(a4, &v95, 314, &v94);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v94.__r_.__value_.__l.__data_);
      }
      if (v96) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v96);
      }
      if (v50 < 0) {
        operator delete(v48);
      }
    }
  }
}

void sub_20F36BC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v38 - 153) < 0) {
    operator delete(*(void **)(v38 - 176));
  }
  if (a38 < 0) {
    operator delete(__p);
  }
  std::string::size_type v40 = *(std::__shared_weak_count **)(v38 - 144);
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::FormatTypeSet(uint64_t a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  LOBYTE(__p[0]) = 123;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
  uint64_t v2 = *(uint64_t ***)(a1 + 16);
  if (v2)
  {
    char v3 = 1;
    do
    {
      if ((v3 & 1) == 0)
      {
        LOBYTE(__p[0]) = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
      }
      LOBYTE(__p[0]) = 32;
      uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)__p, 1);
      (*(void (**)(void **__return_ptr))(*v2[2] + 56))(__p);
      if ((v9 & 0x80u) == 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      if ((v9 & 0x80u) == 0) {
        uint64_t v6 = v9;
      }
      else {
        uint64_t v6 = (uint64_t)__p[1];
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v5, v6);
      if ((char)v9 < 0) {
        operator delete(__p[0]);
      }
      char v3 = 0;
      uint64_t v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" }", 2);
  std::stringbuf::str();
  v10[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v10[1] = MEMORY[0x263F8C318] + 16;
  if (v11 < 0) {
    operator delete((void *)v10[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x21056C620](&v12);
}

void sub_20F36C17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void *std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__init_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20F36C21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::shared_ptr<MIL::IRTypedArgument>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::shared_ptr<MIL::IRTypedArgument>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      char v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

std::string *MIL::MILResult::MILResult(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 8);
  std::string::size_type v3 = *(void *)(a2 + 16);
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26C25A170;
  a1->__r_.__value_.__l.__size_ = v4;
  a1->__r_.__value_.__r.__words[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1 + 1;
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    a1[1].__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_20F36C40C(_Unwind_Exception *exception_object)
{
  std::string::size_type v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **anonymous namespace'::GetInputNames(uint64_t a1, uint64_t a2)
{
  std::string::size_type v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 160))(a1);
  uint64_t v5 = v4 + 1;
  long long v6 = (void *)*v4;
  if ((void *)*v4 != v4 + 1)
  {
    do
    {
      long long v7 = (MIL::IRArgument **)v6[7];
      char v8 = (MIL::IRArgument **)v6[8];
      while (v7 != v8)
      {
        if ((*(unsigned int (**)(void))(*(void *)*v7 + 16))())
        {
          uint64_t Name = (unsigned __int8 *)MIL::IRArgument::GetName(*v7);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a2, Name, (uint64_t)Name);
        }
        v7 += 2;
      }
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          char v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          long long v6 = v11;
        }
        while (!v12);
      }
      long long v6 = v11;
    }
    while (v11 != v5);
  }
  uint64_t result = (uint64_t **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 208))(a1);
  uint64_t v14 = **result;
  uint64_t v15 = (*result)[1];
  while (v14 != v15)
  {
    uint64_t result = (uint64_t **)(*(uint64_t (**)(void))(**(void **)v14 + 56))();
    long long v16 = (uint64_t *)**result;
    long long v17 = (uint64_t *)(*result)[1];
    while (v16 != v17)
    {
      uint64_t v18 = *v16;
      v16 += 2;
    }
    v14 += 16;
  }
  return result;
}

uint64_t std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a2 != a3)
  {
    uint64_t v5 = a2;
    do
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1, v5, (uint64_t)v5);
      v5 += 24;
    }
    while (v5 != a3);
  }
  return a1;
}

void sub_20F36C60C(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<std::string ()(MIL::IROperation const&)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<std::string ()(MIL::IROperation const&)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::string ()(MIL::IROperation const&)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  std::__shared_weak_count *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20F36CA98(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  std::__function::__value_func<void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::operator=[abi:ne180100](a1);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      a1[3] = a1;
      (*(void (**)(void, void *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      a1[3] = v4;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    a1[3] = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::function<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20F36CF1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::function<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v9 = a7;
  uint64_t v7 = *(void *)(a1 + 24);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *))(*(void *)v7 + 48))(v7, a2, a3, a4, a5, a6, &v9);
}

uint64_t std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::reverse_iterator<std::shared_ptr<MIL::IRTypedArgument>*>,std::reverse_iterator<std::shared_ptr<MIL::IRTypedArgument>*>,std::reverse_iterator<std::shared_ptr<MIL::IRTypedArgument>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::reverse_iterator<std::shared_ptr<MIL::IRTypedArgument>*>,std::reverse_iterator<std::shared_ptr<MIL::IRTypedArgument>*>,std::reverse_iterator<std::shared_ptr<MIL::IRTypedArgument>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  void v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::reverse_iterator<std::shared_ptr<MIL::IRTypedArgument>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::reverse_iterator<std::shared_ptr<MIL::IRTypedArgument>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::__shared_ptr_pointer<MIL::IRTypedArgument  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IRTypedArgument  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTypedArgument  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::string::size_type i = *v14; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F36D3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F36D498(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<MIL::IRArgument>>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::vector<std::shared_ptr<MIL::IRTypedArgument>>::__assign_with_size[abi:ne180100]<std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  unint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100]((void *)a1, v12);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v20, a2, v15, v9);
    unint64_t v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRTypedArgument>>,std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*,std::shared_ptr<MIL::IRTypedArgument>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument> const*,std::shared_ptr<MIL::IRArgument>*>((uint64_t)&v21, a2, a3, v9);
  uint64_t v17 = v16;
  uint64_t v18 = *(void *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      BOOL v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v17;
}

void sub_20F36D64C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F36D654(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::function<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20F36D9C8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const> const*,std::shared_ptr<MIL::IRValue const>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::shared_ptr<MIL::IRValue const>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::shared_ptr<MIL::IRValue const>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::function<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

uint64_t std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20F36DE08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

__n128 IRParameterImpl::IRParameterImpl(uint64_t a1, __n128 *a2, char a3, char a4, char a5)
{
  *(void *)a1 = &unk_26C252970;
  __n128 result = *a2;
  *(__n128 *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  *(unsigned char *)(a1 + 24) = a3;
  *(unsigned char *)(a1 + 25) = a4;
  *(unsigned char *)(a1 + 26) = a5;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  if (!*(void *)(a1 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "validTypeSet cannot be null");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_20F36DED4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<std::unordered_set<MIL::IRValueType const*>,std::allocator<std::unordered_set<MIL::IRValueType const*>>,std::initializer_list<MIL::IRValueType const*> &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x40uLL);
  __n128 result = std::__shared_ptr_emplace<std::unordered_set<MIL::IRValueType const*>>::__shared_ptr_emplace[abi:ne180100]<std::initializer_list<MIL::IRValueType const*> &,std::allocator<std::unordered_set<MIL::IRValueType const*>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20F36DF50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::unordered_set<MIL::IRValueType const*>>::__shared_ptr_emplace[abi:ne180100]<std::initializer_list<MIL::IRValueType const*> &,std::allocator<std::unordered_set<MIL::IRValueType const*>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C252BF0;
  std::unordered_set<MIL::IRValueType const*>::unordered_set((uint64_t)(a1 + 3), *(void **)a2, *(void *)(a2 + 8));
  return a1;
}

void sub_20F36DFB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::unordered_set<MIL::IRValueType const*>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C252BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_set<MIL::IRValueType const*>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C252BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<std::unordered_set<MIL::IRValueType const*>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(a1 + 24);
}

uint64_t std::unordered_set<MIL::IRValueType const*>::unordered_set(uint64_t a1, void *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 8 * a3;
    do
    {
      std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::__emplace_unique_key_args<MIL::IRValueType const*,MIL::IRValueType const* const&>(a1, a2, a2);
      ++a2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_20F36E0AC(_Unwind_Exception *a1)
{
  std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::__emplace_unique_key_args<MIL::IRValueType const*,MIL::IRValueType const* const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (std::string::size_type i = *v11; i; std::string::size_type i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  std::string::size_type i = operator new(0x18uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  char v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    void *i = *v21;
LABEL_38:
    *char v21 = i;
    goto LABEL_39;
  }
  void *i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    char v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F36E300(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<MIL::IRValueType const*,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,std::allocator<MIL::IRValueType const*>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::string ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(MIL::IROperation &,std::shared_ptr<MIL::IRValue const>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::vector<MIL::IRValueType const*> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRTypedArgument>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::vector<MIL::IRValueType const*>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const>,std::unordered_map<std::string,std::vector<std::shared_ptr<MIL::IRValue const>>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>> const&,std::vector<std::shared_ptr<MIL::IRBlock>> const&,int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::vector<std::shared_ptr<MIL::IRValue const>> ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t IROperatorImpl::IROperatorImpl(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11)
{
  *(void *)a1 = &unk_26C252A50;
  long long v12 = *a2;
  *(void *)(a1 + 24) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v12;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 32) = a3;
  *(void *)(a1 + 40) = a4;
  *(void *)(a1 + 4std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a5;
  *(void *)(a1 + 56) = a6;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = *(_OWORD *)a7;
  *(void *)a7 = 0;
  *(void *)(a7 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a8;
  *(void *)a8 = 0;
  *(void *)(a8 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  std::__function::__value_func<MIL::ValidationResult ()(MIL::IROperation const&)>::__value_func[abi:ne180100](a1 + 120, a10);
  std::__function::__value_func<std::shared_ptr<MIL::IRValue const> ()(MIL::IROperation const&)>::__value_func[abi:ne180100](a1 + 152, a11);
  *(void *)(a1 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 28std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 24std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 240) = 0;
  uint64_t v13 = *a9;
  *a9 = 0;
  *(void *)(a1 + 32std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v13;
  *(void *)(a1 + 360) = 0;
  return a1;
}

void *std::allocate_shared[abi:ne180100]<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>,std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>,std::initializer_list<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>> &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x40uLL);
  __n128 result = std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::__shared_ptr_emplace[abi:ne180100]<std::initializer_list<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>> &,std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20F36E910(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::__shared_ptr_emplace[abi:ne180100]<std::initializer_list<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>>> &,std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C252C40;
  std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>::unordered_map((uint64_t)(a1 + 3), *(unsigned __int8 **)a2, *(void *)(a2 + 8));
  return a1;
}

void sub_20F36E974(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C252C40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C252C40;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 24);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IRParameter>>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 40 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRParameter>> const&>(a1, a2, (long long *)a2);
      a2 += 40;
      v5 -= 40;
    }
    while (v5);
  }
  return a1;
}

void sub_20F36EA70(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IRParameter>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *unint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F36ECF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRParameter>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IRParameter>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  __n128 result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F36ED68(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRParameter>>,std::allocator<std::vector<std::shared_ptr<MIL::IRParameter>>>,std::initializer_list<std::shared_ptr<MIL::IRParameter>> &,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  __n128 result = std::__shared_ptr_emplace<std::vector<std::shared_ptr<MIL::IRParameter>>>::__shared_ptr_emplace[abi:ne180100]<std::initializer_list<std::shared_ptr<MIL::IRParameter>> &,std::allocator<std::vector<std::shared_ptr<MIL::IRParameter>>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20F36EDC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<std::vector<std::shared_ptr<MIL::IRParameter>>>::__shared_ptr_emplace[abi:ne180100]<std::initializer_list<std::shared_ptr<MIL::IRParameter>> &,std::allocator<std::vector<std::shared_ptr<MIL::IRParameter>>>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C252C90;
  std::allocator<std::vector<std::shared_ptr<MIL::IRParameter>>>::construct[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRParameter>>,std::initializer_list<std::shared_ptr<MIL::IRParameter>> &>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_20F36EE38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<MIL::IRParameter>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C252C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<MIL::IRParameter>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C252C90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<std::vector<std::shared_ptr<MIL::IRParameter>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::allocator<std::vector<std::shared_ptr<MIL::IRParameter>>>::construct[abi:ne180100]<std::vector<std::shared_ptr<MIL::IRParameter>>,std::initializer_list<std::shared_ptr<MIL::IRParameter>> &>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = *(void **)a3;
  unint64_t v4 = *(void *)(a3 + 8);
  a2[2] = 0;
  uint64_t v5 = (uint64_t)(a2 + 2);
  *a2 = 0;
  a2[1] = 0;
  if (v4)
  {
    std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](a2, v4);
    a2[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::shared_ptr<MIL::IRParameter> const*,std::shared_ptr<MIL::IRParameter> const*,std::shared_ptr<MIL::IRParameter>*>(v5, v3, &v3[2 * v4], (void *)a2[1]);
  }
}

void sub_20F36EF64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v10;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::shared_ptr<MIL::IRParameter> const*,std::shared_ptr<MIL::IRParameter> const*,std::shared_ptr<MIL::IRParameter>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  void v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::shared_ptr<MIL::IRParameter>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRParameter>>,std::shared_ptr<MIL::IRParameter>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRNamedValueType>>,std::shared_ptr<MIL::IRNamedValueType>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t OUTLINED_FUNCTION_0(uint64_t a1)
{
  return *(void *)a1;
}

void MIL::IROpset::~IROpset(MIL::IROpset *this)
{
  *(void *)this = &unk_26C252CE0;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IROpsetImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

void MIL::IROpset::RegisterOp(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[1];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  unint64_t v6 = (const void *)v4;
  uint64_t v7 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    char v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v12 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = v5;
  char v8 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v8, v6, (size_t)v7);
  *((unsigned char *)v7 + (void)vstd::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  MIL::IROpsetImpl::RegisterOp(v3, (uint64_t)__dst, a2);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_20F36F1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IROpsetImpl::RegisterOp(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)a3 + 16))();
  if (*(char *)(v6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v34, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    v34.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::string&,std::shared_ptr<MIL::IROperator const>>(a1, (unsigned __int8 *)&v34, (long long *)&v34, a3);
  if (!v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint8x8_t v11 = std::string::append(&v30, "' in opset '");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = *(char *)(a2 + 23);
    if (v13 >= 0) {
      float v14 = (const std::string::value_type *)a2;
    }
    else {
      float v14 = *(const std::string::value_type **)a2;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(a2 + 8);
    }
    float v16 = std::string::append(&v31, v14, v15);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    BOOL v18 = std::string::append(&v32, "'.");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v33);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>(a1 + 80, (unsigned __int8 *)&v34, (long long *)&v34, (long long *)&v34);
  if (!v9)
  {
    unint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    size_t v21 = std::string::append(&v30, "' in opset '");
    long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    int v23 = *(char *)(a2 + 23);
    if (v23 >= 0) {
      unint64_t v24 = (const std::string::value_type *)a2;
    }
    else {
      unint64_t v24 = *(const std::string::value_type **)a2;
    }
    if (v23 >= 0) {
      std::string::size_type v25 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v25 = *(void *)(a2 + 8);
    }
    uint64_t v26 = std::string::append(&v31, v24, v25);
    long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    uint64_t v28 = std::string::append(&v32, "'.");
    long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v20, &v33);
    __cxa_throw(v20, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_20F36F45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v36 & 1) == 0)
    {
LABEL_12:
      if (*(char *)(v37 - 41) < 0) {
        operator delete(*(void **)(v37 - 64));
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v35);
  goto LABEL_12;
}

uint64_t MIL::IROpset::GetOperator(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (const void *)v4;
  long long v7 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    char v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v14 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v14) = v5;
  char v8 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v8, v6, (size_t)v7);
  *((unsigned char *)v7 + (void)vstd::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  uint64_t Operator = MIL::IROpsetImpl::GetOperator(v3, (uint64_t)__dst, a2);
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return Operator;
}

void sub_20F36F620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IROpsetImpl::GetOperator(void *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t result = MIL::IROpsetImpl::TryGetOperator(a1, a3);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v15, "' has been registered in opset '");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(a2 + 8);
    }
    uint8x8_t v11 = std::string::append(&v16, v9, v10);
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    int v13 = std::string::append(&v17, "'.");
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v18.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v18);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F36F75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v30 - 41) < 0) {
    operator delete(*(void **)(v30 - 64));
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v29 & 1) == 0) {
LABEL_12:
    }
      _Unwind_Resume(a1);
  }
  else if (!v29)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v28);
  goto LABEL_12;
}

unsigned __int8 *MIL::IROpset::TryGetOperatorSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  return MIL::IROpsetImpl::TryGetOperatorSharedPtr(*(void **)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::IROpsetImpl::TryGetOperatorSharedPtr@<X0>(void *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, a2);
  if (!result)
  {
    uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1 + 5, a2);
    if (!result)
    {
      *a3 = 0;
      a3[1] = 0;
      return result;
    }
    uint64_t v7 = *((void *)result + 8);
    if (!v7) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(long long **__return_ptr))(*(void *)v7 + 48))(&v10);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IROperator>>((uint64_t)a1, a2, (long long *)a2, (uint64_t *)&v10);
    int v8 = v10;
    std::string::size_type v10 = 0;
    if (v8) {
      (*(void (**)(long long *))(*(void *)v8 + 8))(v8);
    }
    std::string::size_type v10 = (long long *)a2;
    uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a2, (uint64_t)&std::piecewise_construct, &v10);
  }
  uint64_t v9 = *((void *)result + 6);
  *a3 = *((void *)result + 5);
  a3[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_20F36F904(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IROpsetImpl::TryGetOperatorSharedPtr(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IROpset::TryGetOperator(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::IROpsetImpl::TryGetOperator(*(void **)(a1 + 8), a2);
}

uint64_t MIL::IROpsetImpl::TryGetOperator(void *a1, unsigned __int8 *a2)
{
  MIL::IROpsetImpl::TryGetOperatorSharedPtr(a1, a2, &v4);
  uint64_t v2 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2;
}

uint64_t MIL::IROpset::GetOperatorDescription(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (const void *)v4;
  uint64_t v7 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v14 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v14) = v5;
  int v8 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v8, v6, (size_t)v7);
  *((unsigned char *)v7 + (void)vstd::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  uint64_t Operator = MIL::IROpsetImpl::GetOperator(v3, (uint64_t)__dst, a2);
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return Operator;
}

void sub_20F36FA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IROpset::GetOperatorDescription(MIL::IROpset *this, const MIL::IROperation *a2)
{
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v4 = (*(uint64_t (**)(MIL::IROpset *))(*(void *)this + 16))(this);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (const void *)v4;
  uint64_t v7 = (void *)v5;
  if (v5 >= 0x17)
  {
    uint64_t v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v9 = v5 | 7;
    }
    uint64_t v10 = v9 + 1;
    int v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v15 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v15) = v5;
  int v8 = __dst;
  if (v5) {
LABEL_8:
  }
    memmove(v8, v6, (size_t)v7);
  *((unsigned char *)v7 + (void)vstd::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  uint8x8_t v11 = (unsigned __int8 *)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);
  uint64_t Operator = MIL::IROpsetImpl::GetOperator(v3, (uint64_t)__dst, v11);
  if (SHIBYTE(v15) < 0) {
    operator delete(__dst[0]);
  }
  return Operator;
}

void sub_20F36FBA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IROpset::TryGetOperatorDescription(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::IROpsetImpl::TryGetOperator(*(void **)(a1 + 8), a2);
}

uint64_t MIL::IROpset::TryGetOperatorDescription(MIL::IROpset *this, const MIL::IROperation *a2)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  uint64_t v3 = (unsigned __int8 *)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);

  return MIL::IROpsetImpl::TryGetOperator(v2, v3);
}

unsigned __int8 *MIL::IROpset::TryGetOperatorDescriptionSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  return MIL::IROpsetImpl::TryGetOperatorSharedPtr(*(void **)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::IROpset::TryGetOperatorDescriptionSharedPtr@<X0>(MIL::IROpset *this@<X0>, const MIL::IROperation *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (void *)*((void *)this + 1);
  unint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(const MIL::IROperation *))(*(void *)a2 + 56))(a2);

  return MIL::IROpsetImpl::TryGetOperatorSharedPtr(v4, v5, a3);
}

unsigned __int8 *MIL::IROpset::GetNamedOperatorMap(MIL::IROpset *this)
{
  uint64_t v1 = (unsigned __int8 *)*((void *)this + 1);
  MIL::IROpsetImpl::AlignData(v1);
  return v1;
}

uint64_t MIL::IROpset::GetReversedOperatorNamesMap@<X0>(MIL::IROpset *this@<X0>, uint64_t a2@<X8>)
{
  return std::unordered_map<std::string,std::string>::unordered_map(a2, *((void *)this + 1) + 80);
}

uint64_t MIL::IROpset::GetRawNamedOperatorMap(MIL::IROpset *this)
{
  return *((void *)this + 1);
}

uint64_t MIL::IROpset::GetNamedOperatorConstructorMap(MIL::IROpset *this)
{
  return *((void *)this + 1) + 40;
}

void MIL::IROpset::IROpset(MIL::IROpset *this)
{
  *((void *)this + 1) = 0;
  *(void *)this = &unk_26C252CE0;
  long long v7 = 0u;
  long long v8 = 0u;
  int v9 = 1065353216;
  long long v4 = 0u;
  long long v5 = 0u;
  int v6 = 1065353216;
  long long v1 = 0u;
  long long v2 = 0u;
  int v3 = 1065353216;
  std::make_unique[abi:ne180100]<MIL::IROpsetImpl,std::unordered_map<std::string,std::shared_ptr<MIL::IROperator const>> &,std::unordered_map<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> &,std::unordered_map<std::string,std::string> &>();
}

void sub_20F36FDB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table((uint64_t)va1);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v4 - 64);
  uint64_t v6 = *v3;
  uint64_t *v3 = 0;
  if (v6) {
    std::default_delete<MIL::IROpsetImpl>::operator()[abi:ne180100]((uint64_t)v3, v6);
  }
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IROpsetImpl,std::unordered_map<std::string,std::shared_ptr<MIL::IROperator const>> &,std::unordered_map<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> &,std::unordered_map<std::string,std::string> &>()
{
}

void sub_20F36FE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table((uint64_t)va);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va1);
  MEMORY[0x21056C700](v7, 0x10A0C4011E33DBCLL);
  _Unwind_Resume(a1);
}

void MIL::IROpset::IROpset(void *a1, uint64_t a2)
{
  *a1 = &unk_26C252CE0;
  a1[1] = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  int v22 = 1065353216;
  memset(v18, 0, sizeof(v18));
  int v19 = 1065353216;
  long long v2 = (long long *)(a2 + 16);
  while (1)
  {
    long long v2 = *(long long **)v2;
    if (!v2) {
      break;
    }
    int v3 = (long long *)(*(uint64_t (**)(uint64_t))(**((void **)v2 + 5) + 16))(*((void *)v2 + 5));
    std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(&v15, v3, v2 + 1);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>((uint64_t)v18, (unsigned __int8 *)&v15, (uint64_t)&v15);
    char v5 = v4;
    if (v17 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(**((void **)v2 + 5) + 16))(*((void *)v2 + 5));
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
      }
      else
      {
        long long v8 = *(_OWORD *)v7;
        v13.__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
        *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v8;
      }
      uint64_t v9 = std::string::insert(&v13, 0, "Duplicate operator name '");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      uint64_t v11 = std::string::append(&v14, ".");
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v15);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  std::make_unique[abi:ne180100]<MIL::IROpsetImpl,std::unordered_map<std::string,std::shared_ptr<MIL::IROperator const>> &,std::unordered_map<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> &,std::unordered_map<std::string,std::string> &>();
}

void sub_20F370118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a32);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table(v33 - 96);
  uint64_t v35 = *v32;
  uint64_t *v32 = 0;
  if (v35) {
    std::default_delete<MIL::IROpsetImpl>::operator()[abi:ne180100]((uint64_t)v32, v35);
  }
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::string>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void MIL::IROpset::IROpset(void *a1)
{
  a1[1] = 0;
  *a1 = &unk_26C252CE0;
  long long v1 = 0u;
  long long v2 = 0u;
  int v3 = 1065353216;
  std::make_unique[abi:ne180100]<MIL::IROpsetImpl,std::unordered_map<std::string,std::shared_ptr<MIL::IROperator const>> &,std::unordered_map<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> &,std::unordered_map<std::string,std::string> &>();
}

{
  *a1 = &unk_26C252CE0;
  a1[1] = 0;
  std::make_unique[abi:ne180100]<MIL::IROpsetImpl,std::unordered_map<std::string,std::shared_ptr<MIL::IROperator const>> &,std::unordered_map<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> &,std::unordered_map<std::string,std::string> &>();
}

void sub_20F3702BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va);
  uint64_t v5 = *v3;
  uint64_t *v3 = 0;
  if (v5) {
    std::default_delete<MIL::IROpsetImpl>::operator()[abi:ne180100]((uint64_t)v3, v5);
  }
  _Unwind_Resume(a1);
}

void sub_20F370378(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IROpsetImpl>::operator()[abi:ne180100]((uint64_t)v1, v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IROpset::MakeSupplementedOpset(uint64_t a1, uint64_t a2)
{
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)&v2, *(void *)(a2 + 8) + 80);
  operator new();
}

void sub_20F37054C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a30);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table(v31 - 128);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v31 - 88);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a15);
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table((uint64_t)&a20);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a25);
  MEMORY[0x21056C700](v30, 0x10B3C40E7C412B7);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a10);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::string&,std::shared_ptr<MIL::IROperator const>>(uint64_t a1, unsigned __int8 *a2, long long *a3, uint64_t a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    std::string v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (std::string::size_type i = *v15; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node_hash<std::string&,std::shared_ptr<MIL::IROperator const>>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20F370894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node_hash<std::string&,std::shared_ptr<MIL::IROperator const>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<std::string&,std::shared_ptr<MIL::IROperator const>,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_20F37091C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<std::string&,std::shared_ptr<MIL::IROperator const>,0>(std::string *this, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  return this;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>(uint64_t a1, unsigned __int8 *a2, long long *a3, long long *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    std::string v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (std::string::size_type i = *v15; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::string&,std::string&>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20F370C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::string&,std::string&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x40uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_20F370C90(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_20F370D24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IROperator>>(uint64_t a1, unsigned __int8 *a2, long long *a3, uint64_t *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    std::string v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (std::string::size_type i = *v15; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IROperator>>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  unint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *unint64_t v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20F371064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IROperator>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<std::string const&,std::unique_ptr<MIL::IROperator>,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_20F3710EC(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<MIL::IROperator const>>::pair[abi:ne180100]<std::string const&,std::unique_ptr<MIL::IROperator>,0>(std::string *this, long long *a2, uint64_t *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>((uint64_t *)&this[1], a3);
  return this;
}

void sub_20F371164(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<MIL::IROperator const>::shared_ptr[abi:ne180100]<MIL::IROperator,std::default_delete<MIL::IROperator>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::string *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IROperator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IROperator  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  long long v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::string::size_type i = *v14; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  size_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F371534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  long long v8 = operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3715D4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::IROpsetImpl::AlignData(unsigned __int8 *this)
{
  if (!this[120])
  {
    uint64_t v1 = (uint64_t)this;
    for (std::string::size_type i = (unsigned __int8 *)*((void *)this + 7); i; std::string::size_type i = *(unsigned __int8 **)i)
    {
      this = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)v1, i + 16);
      if (!this)
      {
        uint64_t v3 = *((void *)i + 8);
        if (!v3) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(unsigned __int8 **__return_ptr))(*(void *)v3 + 48))(&v4);
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IROperator>>(v1, i + 16, (long long *)i + 1, (uint64_t *)&v4);
        this = v4;
        unint64_t v4 = 0;
        if (this) {
          this = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(void *)this + 8))(this);
        }
      }
    }
    *(unsigned char *)(v1 + 120) = 1;
  }
  return this;
}

void sub_20F3716C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IROpsetImpl::TryGetOperatorSharedPtr(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::unordered_map<std::string,std::string>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_20F371744(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::string> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F3719C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::pair<std::string const,std::string> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::string>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F371A40(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  long long v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_20F371AD4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::default_delete<MIL::IROpsetImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a2 + 80);
    std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table(a2 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2);
    JUMPOUT(0x21056C700);
  }
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100]<true,0>(std::string *this, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  long long v6 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return this;
}

void sub_20F371C4C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      unint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,0>(uint64_t a1)
{
  std::__function::__value_func<std::unique_ptr<MIL::IROperator> ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::__function::__value_func<std::unique_ptr<MIL::IROperator> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::unordered_map<std::string,std::shared_ptr<MIL::IROperator const>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IROperator const>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_20F371E1C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<MIL::IROperator const>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  long long v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IROperator const>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F3720A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IROperator const>>>>::__construct_node_hash<std::pair<std::string const,std::shared_ptr<MIL::IROperator const>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x38uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::shared_ptr<MIL::IRValue const>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F372118(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> const&>(a1, i + 16, (long long *)i + 1);
  return a1;
}

void sub_20F372190(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> const&>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__construct_node_hash<std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F372414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>>>::__construct_node_hash<std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_20F37248C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::__function::__value_func<std::unique_ptr<MIL::IROperator> ()(void)>::__value_func[abi:ne180100]((uint64_t)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_20F372500(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<std::unique_ptr<MIL::IROperator> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  long long v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<std::unique_ptr<MIL::IROperator> ()(void)>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t MIL::IROpsetImpl::IROpsetImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(v7 + 40, a3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 80, a4);
  *(unsigned char *)(a1 + 120) = 0;
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::string>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = (char *)operator new(0x40uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(void *)float v16 = 0;
  *((void *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((void *)v16 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v16 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  char v27 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v3);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10) {
          v24 %= v10;
        }
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3728F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void anonymous namespace'::SupplementedOpset::~SupplementedOpset(void **this)
{
  *this = &unk_26C252D78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  *this = &unk_26C252CE0;
  uint64_t v2 = (uint64_t)this[1];
  this[1] = 0;
  if (v2) {
    std::default_delete<MIL::IROpsetImpl>::operator()[abi:ne180100]((uint64_t)(this + 1), v2);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  *this = &unk_26C252D78;
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  *this = &unk_26C252CE0;
  uint64_t v2 = (uint64_t)this[1];
  this[1] = 0;
  if (v2) {
    std::default_delete<MIL::IROpsetImpl>::operator()[abi:ne180100]((uint64_t)(this + 1), v2);
  }

  JUMPOUT(0x21056C700);
}

uint64_t anonymous namespace'::SupplementedOpset::GetName(_anonymous_namespace_::SupplementedOpset *this)
{
  if (*((char *)this + 39) < 0) {
    return *((void *)this + 2);
  }
  else {
    return (uint64_t)this + 16;
  }
}

BOOL MIL::IsValidIRPixelFormatType(int a1)
{
  return a1 != 20;
}

uint64_t MIL::IsValidIRPixelFormatTypeString(unsigned __int8 *a1)
{
  return 1;
}

void sub_20F372A78(void *a1)
{
}

uint64_t MIL::StringToIRPixelFormatType(unsigned __int8 *a1)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  std::string::basic_string[abi:ne180100]<0>(&v11, "FMT_OneComponent8");
  int v12 = 1;
  std::string::basic_string[abi:ne180100]<0>(v13, "FMT_OneComponent16Half");
  int v14 = 2;
  std::string::basic_string[abi:ne180100]<0>(v15, "FMT_OneComponent32Float");
  int v16 = 3;
  std::string::basic_string[abi:ne180100]<0>(v17, "FMT_TwoComponent8");
  int v18 = 4;
  std::string::basic_string[abi:ne180100]<0>(v19, "FMT_TwoComponent16Half");
  int v20 = 6;
  std::string::basic_string[abi:ne180100]<0>(v21, "FMT_TwoComponent32Float");
  int v22 = 5;
  std::string::basic_string[abi:ne180100]<0>(v23, "FMT_32ARGB");
  int v24 = 11;
  std::string::basic_string[abi:ne180100]<0>(v25, "FMT_32BGRA");
  int v26 = 12;
  std::string::basic_string[abi:ne180100]<0>(v27, "FMT_32RGBA");
  int v28 = 13;
  std::string::basic_string[abi:ne180100]<0>(v29, "FMT_64RGBAHalf");
  int v30 = 14;
  std::string::basic_string[abi:ne180100]<0>(v31, "FMT_DisparityFloat16");
  int v32 = 15;
  std::string::basic_string[abi:ne180100]<0>(v33, "FMT_DepthFloat16");
  int v34 = 17;
  std::string::basic_string[abi:ne180100]<0>(v35, "any");
  int v36 = 20;
  std::string::basic_string[abi:ne180100]<0>(v37, "FMT_420YpCbCr8BiPlanarVideoRange");
  int v38 = 21;
  std::string::basic_string[abi:ne180100]<0>(v39, "FMT_420YpCbCr8BiPlanarFullRange");
  int v40 = 22;
  std::string::basic_string[abi:ne180100]<0>(v41, "FMT_420YpCbCr10BiPlanarVideoRange");
  int v42 = 23;
  std::string::basic_string[abi:ne180100]<0>(v43, "FMT_420YpCbCr10BiPlanarFullRange");
  int v44 = 24;
  std::string::basic_string[abi:ne180100]<0>(v45, "FMT_420YpCbCr10PackedBiPlanarVideoRange");
  int v46 = 25;
  std::string::basic_string[abi:ne180100]<0>(v47, "FMT_420YpCbCr10PackedBiPlanarFullRange");
  int v48 = 26;
  std::string::basic_string[abi:ne180100]<0>(v49, "FMT_420YpCbCr10PackedBiPlanarWideRange");
  int v50 = 27;
  std::string::basic_string[abi:ne180100]<0>(v51, "FMT_444YpCbCr8BiPlanarVideoRange");
  int v52 = 28;
  std::string::basic_string[abi:ne180100]<0>(v53, "FMT_444YpCbCr8BiPlanarFullRange");
  int v54 = 29;
  std::string::basic_string[abi:ne180100]<0>(v55, "FMT_AGX_OneComponent16");
  int v56 = 41;
  std::string::basic_string[abi:ne180100]<0>(v57, "FMT_AGX_OneComponent16Half");
  int v58 = 42;
  std::string::basic_string[abi:ne180100]<0>(v59, "FMT_Lossy75_OneComponent16Half");
  int v60 = 43;
  std::string::basic_string[abi:ne180100]<0>(v61, "FMT_Lossy62_OneComponent16Half");
  int v62 = 44;
  std::string::basic_string[abi:ne180100]<0>(v63, "FMT_Lossy50_OneComponent16Half");
  int v64 = 45;
  std::string::basic_string[abi:ne180100]<0>(v65, "FMT_AGX_32BGRA");
  int v66 = 51;
  std::string::basic_string[abi:ne180100]<0>(v67, "FMT_Lossy75_32BGRA");
  int v68 = 52;
  std::string::basic_string[abi:ne180100]<0>(v69, "FMT_Lossy62_32BGRA");
  int v70 = 53;
  std::string::basic_string[abi:ne180100]<0>(v71, "FMT_Lossy50_32BGRA");
  int v72 = 54;
  std::string::basic_string[abi:ne180100]<0>(v73, "FMT_AGX_64RGBAHalf");
  int v74 = 55;
  std::string::basic_string[abi:ne180100]<0>(v75, "FMT_Lossy75_64RGBAHalf");
  int v76 = 56;
  std::string::basic_string[abi:ne180100]<0>(v77, "FMT_Lossy62_64RGBAHalf");
  int v78 = 57;
  std::string::basic_string[abi:ne180100]<0>(v79, "FMT_Lossy50_64RGBAHalf");
  int v80 = 58;
  std::string::basic_string[abi:ne180100]<0>(v81, "FMT_Lossless_420YpCbCr8BiPlanarVideoRange");
  int v82 = 70;
  std::string::basic_string[abi:ne180100]<0>(v83, "FMT_Lossless_420YpCbCr8BiPlanarFullRange");
  int v84 = 71;
  std::string::basic_string[abi:ne180100]<0>(v85, "FMT_12RLSB_12G12BMSB");
  int v86 = 90;
  std::string::basic_string[abi:ne180100]<0>(v87, "FMT_OneComponent12LSB");
  int v88 = 91;
  std::string::basic_string[abi:ne180100]<0>(v89, "FMT_MultiSlice_Lossless_OneComponent16Half");
  int v90 = 100;
  std::unordered_map<std::string,MIL::IRPixelFormatType>::unordered_map((uint64_t)v10, (unsigned __int8 *)&v11, 40);
  uint64_t v2 = 160;
  do
  {
    if (SHIBYTE(v10[v2 + 3]) < 0) {
      operator delete((void *)v10[v2 + 1]);
    }
    v2 -= 4;
  }
  while (v2 * 8);
  unint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v10, a1);
  if (!v3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v7 = std::string::append(&v9, " does not map to a pixel format type.");
    long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v11);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  uint64_t v4 = *((unsigned int *)v3 + 10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v10);
  return v4;
}

void sub_20F373080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a14 < 0)
  {
    operator delete(a9);
    if ((v26 & 1) == 0)
    {
LABEL_8:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v26)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v25);
  goto LABEL_8;
}

void sub_20F3731D8()
{
}

void *MIL::IRPixelFormatTypeToString@<X0>(unsigned int a1@<W0>, void *a2@<X8>)
{
  unint64_t v3 = "FMT_OneComponent8";
  switch(a1)
  {
    case 1u:
      break;
    case 2u:
      unint64_t v3 = "FMT_OneComponent16Half";
      break;
    case 3u:
      unint64_t v3 = "FMT_OneComponent32Float";
      break;
    case 4u:
      unint64_t v3 = "FMT_TwoComponent8";
      break;
    case 5u:
      unint64_t v3 = "FMT_TwoComponent32Float";
      break;
    case 6u:
      unint64_t v3 = "FMT_TwoComponent16Half";
      break;
    case 0xBu:
      unint64_t v3 = "FMT_32ARGB";
      break;
    case 0xCu:
      unint64_t v3 = "FMT_32BGRA";
      break;
    case 0xDu:
      unint64_t v3 = "FMT_32RGBA";
      break;
    case 0xEu:
      unint64_t v3 = "FMT_64RGBAHalf";
      break;
    case 0xFu:
      unint64_t v3 = "FMT_DisparityFloat16";
      break;
    case 0x11u:
      unint64_t v3 = "FMT_DepthFloat16";
      break;
    case 0x14u:
      unint64_t v3 = "any";
      break;
    case 0x15u:
      unint64_t v3 = "FMT_420YpCbCr8BiPlanarVideoRange";
      break;
    case 0x16u:
      unint64_t v3 = "FMT_420YpCbCr8BiPlanarFullRange";
      break;
    case 0x17u:
      unint64_t v3 = "FMT_420YpCbCr10BiPlanarVideoRange";
      break;
    case 0x18u:
      unint64_t v3 = "FMT_420YpCbCr10BiPlanarFullRange";
      break;
    case 0x19u:
      unint64_t v3 = "FMT_420YpCbCr10PackedBiPlanarVideoRange";
      break;
    case 0x1Au:
      unint64_t v3 = "FMT_420YpCbCr10PackedBiPlanarFullRange";
      break;
    case 0x1Bu:
      unint64_t v3 = "FMT_420YpCbCr10PackedBiPlanarWideRange";
      break;
    case 0x1Cu:
      unint64_t v3 = "FMT_444YpCbCr8BiPlanarVideoRange";
      break;
    case 0x1Du:
      unint64_t v3 = "FMT_444YpCbCr8BiPlanarFullRange";
      break;
    case 0x28u:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported format: Count");
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    case 0x29u:
      unint64_t v3 = "FMT_AGX_OneComponent16";
      break;
    case 0x2Au:
      unint64_t v3 = "FMT_AGX_OneComponent16Half";
      break;
    case 0x2Bu:
      unint64_t v3 = "FMT_Lossy75_OneComponent16Half";
      break;
    case 0x2Cu:
      unint64_t v3 = "FMT_Lossy62_OneComponent16Half";
      break;
    case 0x2Du:
      unint64_t v3 = "FMT_Lossy50_OneComponent16Half";
      break;
    case 0x33u:
      unint64_t v3 = "FMT_AGX_32BGRA";
      break;
    case 0x34u:
      unint64_t v3 = "FMT_Lossy75_32BGRA";
      break;
    case 0x35u:
      unint64_t v3 = "FMT_Lossy62_32BGRA";
      break;
    case 0x36u:
      unint64_t v3 = "FMT_Lossy50_32BGRA";
      break;
    case 0x37u:
      unint64_t v3 = "FMT_AGX_64RGBAHalf";
      break;
    case 0x38u:
      unint64_t v3 = "FMT_Lossy75_64RGBAHalf";
      break;
    case 0x39u:
      unint64_t v3 = "FMT_Lossy62_64RGBAHalf";
      break;
    case 0x3Au:
      unint64_t v3 = "FMT_Lossy50_64RGBAHalf";
      break;
    case 0x46u:
      unint64_t v3 = "FMT_Lossless_420YpCbCr8BiPlanarVideoRange";
      break;
    case 0x47u:
      unint64_t v3 = "FMT_Lossless_420YpCbCr8BiPlanarFullRange";
      break;
    case 0x5Au:
      unint64_t v3 = "FMT_12RLSB_12G12BMSB";
      break;
    case 0x5Bu:
      unint64_t v3 = "FMT_OneComponent12LSB";
      break;
    case 0x64u:
      unint64_t v3 = "FMT_MultiSlice_Lossless_OneComponent16Half";
      break;
    default:
      long long v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::to_string(&v9, a1);
      uint64_t v7 = std::string::insert(&v9, 0, "Unsupported format: ");
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      std::logic_error::logic_error(v6, &v10);
      v6->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v6, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }

  return std::string::basic_string[abi:ne180100]<0>(a2, v3);
}

void sub_20F3734F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t MIL::GetNumPlanesForFormat(int a1)
{
  if ((a1 - 21) < 9) {
    return 2;
  }
  uint64_t result = 1;
  if (a1 > 89)
  {
    if (a1 != 90) {
      return result;
    }
    return 2;
  }
  if ((a1 - 70) < 2) {
    return 2;
  }
  if (a1 == 20 || a1 == 40)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported pixel format type.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return result;
}

void sub_20F373788(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::GetChannelDimForFormat(int a1, unsigned int a2)
{
  uint64_t result = MIL::SupportsMultiSlice(a1);
  if (result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Channel dim for multislice is defined via numSlices.");
LABEL_15:
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  switch(a1)
  {
    case 1:
    case 2:
    case 3:
    case 15:
    case 17:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 91:
    case 100:
      if (a2)
      {
        float v17 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        unsigned int v18 = a1;
        BOOL v19 = v17;
        MIL::IRPixelFormatTypeToString(v18, &v51);
        int v20 = std::string::insert(&v51, 0, "Plane index exceeds number of planes of ");
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        int v22 = std::string::append(&v52, ": ");
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v50, a2);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v24 = &v50;
        }
        else {
          int v24 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v50.__r_.__value_.__l.__size_;
        }
        int v26 = std::string::append(&v53, (const std::string::value_type *)v24, size);
        long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v19, &v54);
        v19->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v19, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      return 1;
    case 4:
    case 5:
    case 6:
      if (a2)
      {
        int v39 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        unsigned int v40 = a1;
        int v41 = v39;
        MIL::IRPixelFormatTypeToString(v40, &v51);
        int v42 = std::string::insert(&v51, 0, "Plane index exceeds number of planes of ");
        long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        int v44 = std::string::append(&v52, ": ");
        long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v50, a2);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v46 = &v50;
        }
        else {
          int v46 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v47 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v47 = v50.__r_.__value_.__l.__size_;
        }
        int v48 = std::string::append(&v53, (const std::string::value_type *)v46, v47);
        long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v41, &v54);
        v41->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v41, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      return 2;
    case 11:
    case 12:
    case 13:
    case 14:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
      if (a2)
      {
        long long v6 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        unsigned int v7 = a1;
        long long v8 = v6;
        MIL::IRPixelFormatTypeToString(v7, &v51);
        std::string v9 = std::string::insert(&v51, 0, "Plane index exceeds number of planes of ");
        long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v10;
        v9->__r_.__value_.__l.__size_ = 0;
        v9->__r_.__value_.__r.__words[2] = 0;
        v9->__r_.__value_.__r.__words[0] = 0;
        std::string v11 = std::string::append(&v52, ": ");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v50, a2);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v13 = &v50;
        }
        else {
          unint64_t v13 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v14 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v14 = v50.__r_.__value_.__l.__size_;
        }
        unint64_t v15 = std::string::append(&v53, (const std::string::value_type *)v13, v14);
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v8, &v54);
        v8->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v8, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      return 4;
    case 20:
    case 40:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Unsupported pixel format type.");
      goto LABEL_15;
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 70:
    case 71:
    case 90:
      if (a2 >= 2)
      {
        int v28 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        unsigned int v29 = a1;
        int v30 = v28;
        MIL::IRPixelFormatTypeToString(v29, &v51);
        uint64_t v31 = std::string::insert(&v51, 0, "Plane index exceeds number of planes of ");
        long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        uint64_t v33 = std::string::append(&v52, ": ");
        long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v50, a2);
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v35 = &v50;
        }
        else {
          uint64_t v35 = (std::string *)v50.__r_.__value_.__r.__words[0];
        }
        if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v36 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v36 = v50.__r_.__value_.__l.__size_;
        }
        uint64_t v37 = std::string::append(&v53, (const std::string::value_type *)v35, v36);
        long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v38;
        v37->__r_.__value_.__l.__size_ = 0;
        v37->__r_.__value_.__r.__words[2] = 0;
        v37->__r_.__value_.__r.__words[0] = 0;
        std::logic_error::logic_error(v30, &v54);
        v30->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(v30, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      if (a2) {
        return 2;
      }
      else {
        return 1;
      }
    default:
      return result;
  }
}

void sub_20F373CC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v35 - 41) < 0) {
    operator delete(*(void **)(v35 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v34 & 1) == 0) {
LABEL_14:
    }
      _Unwind_Resume(a1);
  }
  else if (!v34)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

uint64_t std::unordered_map<std::string,MIL::IRPixelFormatType>::unordered_map(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 32 * a3;
    do
    {
      std::__hash_table<std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRPixelFormatType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRPixelFormatType> const&>(a1, a2, (uint64_t)a2);
      a2 += 32;
      v5 -= 32;
    }
    while (v5);
  }
  return a1;
}

void sub_20F373FB8(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRPixelFormatType>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRPixelFormatType> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unsigned int v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRPixelFormatType>>>::__construct_node_hash<std::pair<std::string const,MIL::IRPixelFormatType> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  int v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *int v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20F374228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRPixelFormatType>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRPixelFormatType>>>::__construct_node_hash<std::pair<std::string const,MIL::IRPixelFormatType> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x30uLL);
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  unint64_t v9 = (std::string *)(v8 + 16);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v8 + 10) = *(_DWORD *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3742DC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void MIL::IRProgram::~IRProgram(MIL::IRProgram *this)
{
  MIL::IRCachedScope::~IRCachedScope((MIL::IRProgram *)((char *)this + 64));

  MIL::IRObject::~IRObject(this);
}

void *MIL::IRProgram::IRProgram(void *a1, long long *a2, uint64_t *a3)
{
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  MIL::IRObject::IRObject((uint64_t)a1, (uint64_t)&v5, a3);
  if (*((void *)&v5 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
  }
  MIL::IRCachedScope::IRCachedScope((MIL::IRCachedScope *)(a1 + 8));
  *a1 = &unk_26C252DB8;
  a1[8] = &unk_26C252E40;
  return a1;
}

void sub_20F3743D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  MIL::IRObject::~IRObject(v10);
  _Unwind_Resume(a1);
}

void MIL::IRProgram::Make(long long *a1, long long *a2)
{
  long long v6 = *a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  long long v5 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  long long v2 = 0u;
  long long v3 = 0u;
  int v4 = 1065353216;
  MIL::IRProgram::Make();
}

void sub_20F374474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  BOOL v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

void MIL::IRProgram::Make()
{
}

void sub_20F374554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x10E1C4016CA2BE9);
  _Unwind_Resume(a1);
}

_anonymous_namespace_::IRProgramImpl **std::unique_ptr<anonymous namespace'::IRProgramImpl>::~unique_ptr[abi:ne180100](_anonymous_namespace_::IRProgramImpl **a1)
{
  long long v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    MEMORY[0x21056C700]();
  }
  return a1;
}

uint64_t MIL::IRProgram::GetFunction(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v3 = std::string::append(&v5, "' does not exist.");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v6.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v6);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  return result;
}

void sub_20F3746CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void MIL::IRProgram::ToString(MIL::IRProgram *this)
{
}

void sub_20F3747CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRProgram::ToString(a10);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::IRProgramImpl::~IRProgramImpl(_anonymous_namespace_::IRProgramImpl *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 176);
  long long v2 = (std::__shared_weak_count *)*((void *)this + 21);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MIL::IRCachedScope::~IRCachedScope((_anonymous_namespace_::IRProgramImpl *)((char *)this + 64));

  MIL::IRObject::~IRObject(this);
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

void non-virtual thunk to'anonymous namespace'::IRProgramImpl::~IRProgramImpl(_anonymous_namespace_::IRProgramImpl *this)
{
}

{
  uint64_t vars8;

  JUMPOUT(0x21056C700);
}

uint64_t anonymous namespace'::IRProgramImpl::IRProgramImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  long long v9 = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  MIL::IRProgram::IRProgram((void *)a1, &v9, a5);
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
  *(void *)a1 = &unk_26C252EE0;
  *(void *)(a1 + 64) = &unk_26C252F70;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a2;
  *(void *)a2 = 0;
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_DWORD *)(a1 + 20std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1065353216;
  return a1;
}

void sub_20F37490C(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v3);
  std::string v5 = (std::__shared_weak_count *)*((void *)v1 + 21);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MIL::IRCachedScope::~IRCachedScope(v2);
  MIL::IRObject::~IRObject(v1);
  _Unwind_Resume(a1);
}

void *anonymous namespace'::IRProgramImpl::SetFunctions(uint64_t a1, uint64_t a2)
{
  v3[4] = *MEMORY[0x263EF8340];
  v3[0] = &unk_26C252FF0;
  v3[1] = a1;
  v3[2] = a2;
  void v3[3] = v3;
  MIL::IRCachedScope::InvalidateAndCall(a1 + 64, (uint64_t)v3);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v3);
}

void sub_20F3749D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL anonymous namespace'::IRProgramImpl::EqualsImpl(_anonymous_namespace_::IRProgramImpl *this, const MIL::IRObject *lpsrc)
{
  if (!v3 || *((void *)this + 25) != v3[25]) {
    return 0;
  }
  long long v4 = v3 + 22;
  std::string v5 = (char *)this + 192;
  do
  {
    std::string v5 = *(char **)v5;
    BOOL v6 = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v4, (unsigned __int8 *)v5 + 16);
    if (!v7) {
      break;
    }
  }
  while ((MIL::IRObject::Equals(*((MIL::IRObject **)v5 + 5), *((const MIL::IRObject **)v7 + 5)) & 1) != 0);
  return v6;
}

void anonymous namespace'::IRProgramImpl::Copy(_anonymous_namespace_::IRProgramImpl *this)
{
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
}

void sub_20F374B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IRProgramImpl::GetContext(_anonymous_namespace_::IRProgramImpl *this)
{
  return *((void *)this + 20);
}

uint64_t anonymous namespace'::IRProgramImpl::GetContextSharedPtr@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 168);
  *a2 = *(void *)(this + 160);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t anonymous namespace'::IRProgramImpl::TryGetFunction(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 176), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)v2 + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

unsigned __int8 *anonymous namespace'::IRProgramImpl::TryGetFunctionSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 176), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t anonymous namespace'::IRProgramImpl::GetFunctions(_anonymous_namespace_::IRProgramImpl *this)
{
  return (uint64_t)this + 176;
}

void anonymous namespace'::IRProgramImpl::WithFunctions(MIL::IRObject *a1)
{
  MIL::IRObject::GetLocationPtr(a1);
  uint64_t Attributes = MIL::IRObject::GetAttributes(a1);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v3, Attributes);
}

void sub_20F374CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void anonymous namespace'::IRProgramImpl::WithRenames(MIL::IRObject *this)
{
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  for (std::string::size_type i = (unsigned __int8 *)*((void *)this + 24); i; std::string::size_type i = *(unsigned __int8 **)i)
  {
    (*(void (**)(uint64_t *__return_ptr))(**((void **)i + 5) + 224))(v5);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRFunction>>((uint64_t)v6, i + 16, (long long *)i + 1, v5);
    uint64_t v3 = v5[0];
    v5[0] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  MIL::IRObject::GetLocationPtr(this);
  uint64_t Attributes = MIL::IRObject::GetAttributes(this);
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v5, Attributes);
}

void sub_20F374DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t anonymous namespace'::IRProgramImpl::Convert(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 160) + 48))(*(void *)(a1 + 160), a1, a2);
}

uint64_t anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(_anonymous_namespace_::IRProgramImpl *this)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned int v3 = 1;
  uint64_t v4 = &unk_26C253070;
  uint64_t v5 = &v3;
  int v7 = &v4;
  MIL::Util::Walk((uint64_t)this, (uint64_t)&v4);
  std::__function::__value_func<BOOL ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](&v4);
  uint64_t v4 = &unk_26C253100;
  uint64_t v5 = (unsigned int *)this;
  BOOL v6 = &v3;
  int v7 = &v4;
  MIL::Util::Walk((uint64_t)this, (uint64_t)&v4);
  std::__function::__value_func<BOOL ()(MIL::IRFunction const&)>::~__value_func[abi:ne180100](&v4);
  uint64_t v4 = &unk_26C253190;
  uint64_t v5 = (unsigned int *)this;
  BOOL v6 = &v3;
  int v7 = &v4;
  MIL::Util::Walk((uint64_t)this, (uint64_t)&v4);
  std::__function::__value_func<BOOL ()(MIL::IRBlock const&)>::~__value_func[abi:ne180100](&v4);
  return v3;
}

void sub_20F374F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(MIL::IRBlock const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::IRProgramImpl::BuildScopeCache(_anonymous_namespace_::IRProgramImpl *this)
{
  long long v4 = 0u;
  long long v5 = 0u;
  int v6 = 1065353216;
  long long v1 = 0u;
  long long v2 = 0u;
  int v3 = 1065353216;
  MIL::IRMutableScope::Make();
}

void sub_20F37500C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void std::__function::__func<anonymous namespace'::IRProgramImpl::SetFunctions(std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&)::{lambda(void)#1},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&>,void ()(void)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRProgramImpl::SetFunctions(std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&)::{lambda(void)#1},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&>,void ()(void)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x18uLL);
  *(void *)long long v2 = &unk_26C252FF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRProgramImpl::SetFunctions(std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&)::{lambda(void)#1},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C252FF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

void std::__function::__func<anonymous namespace'::IRProgramImpl::SetFunctions(std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&)::{lambda(void)#1},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__move_assign(v1 + 176, *(uint64_t **)(a1 + 16));
  for (std::string::size_type i = *(uint64_t ***)(v1 + 192); i; std::string::size_type i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[5] + 184))(i[5], v1);
}

uint64_t std::__function::__func<anonymous namespace'::IRProgramImpl::SetFunctions(std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&)::{lambda(void)#1},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRProgramImpl::SetFunctions(std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&)::{lambda(void)#1},std::allocator<std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>> &&>,void ()(void)>::target_type()
{
}

void std::make_unique[abi:ne180100]<anonymous namespace'::IRProgramImpl,std::shared_ptr<MIL::MILContext> const&,std::shared_ptr<MIL::Location const> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRFunction>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

void sub_20F375298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  MEMORY[0x21056C700](v12, 0x10E1C4016CA2BE9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IRFunction>>(uint64_t a1, unsigned __int8 *a2, long long *a3, uint64_t *a4)
{
  long long v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    unint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (std::string::size_type i = *v15; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRFunction>>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *int v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20F375548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRFunction>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IRFunction>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  __n128 result = std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>::pair[abi:ne180100]<std::string const&,std::unique_ptr<MIL::IRFunction>,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_20F3755D0(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<MIL::IRFunction>>::pair[abi:ne180100]<std::string const&,std::unique_ptr<MIL::IRFunction>,0>(std::string *this, long long *a2, uint64_t *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::shared_ptr<MIL::IRFunction>::shared_ptr[abi:ne180100]<MIL::IRFunction,std::default_delete<MIL::IRFunction>,void>((uint64_t *)&this[1], a3);
  return this;
}

void sub_20F375648(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1}>,BOOL ()(MIL::IROperation const&)>::~__func()
{
}

void *std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1}>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C253070;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1}>,BOOL ()(MIL::IROperation const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C253070;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1}>,BOOL ()(MIL::IROperation const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 232))(a2);
  if (v3)
  {
    unint64_t v4 = *(int **)(a1 + 8);
    int v5 = *v4;
    if (*v4 <= 3) {
      int v5 = 3;
    }
    int *v4 = v5;
  }
  return v3 == 0;
}

uint64_t std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1}>,BOOL ()(MIL::IROperation const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IROperation const&)#1}>,BOOL ()(MIL::IROperation const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(MIL::IROperation const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1}>,BOOL ()(MIL::IRFunction const&)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1}>,BOOL ()(MIL::IRFunction const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C253100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1}>,BOOL ()(MIL::IRFunction const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C253100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1}>,BOOL ()(MIL::IRFunction const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(int **)(a1 + 16);
  int v5 = *v4;
  if (*v4 <= v3) {
    int v5 = v3;
  }
  int *v4 = v5;
  return 1;
}

uint64_t std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1}>,BOOL ()(MIL::IRFunction const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRFunction const&)#1}>,BOOL ()(MIL::IRFunction const&)>::target_type()
{
}

uint64_t anonymous namespace'::IRProgramImpl::MinimumRequiredSyntaxForScope(_anonymous_namespace_::IRProgramImpl *this, const MIL::IRCachedScope *a2)
{
  uint64_t v2 = *(uint64_t ***)((*(uint64_t (**)(_anonymous_namespace_::IRProgramImpl *, const MIL::IRCachedScope *))(*(void *)this + 32))(this, a2)+ 16);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = 1;
  do
  {
    if (MIL::IRValueType::TryCastAsStateType(v2[5]))
    {
      uint64_t v3 = 4;
    }
    else
    {
      unint64_t v4 = MIL::IRValueType::TryCastAsMemoryLayoutType(v2[5]);
      if (v4)
      {
        int v5 = v4;
        if (MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v4)
          || MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(v5)
          || MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v5))
        {
          if ((int)v3 <= 3) {
            uint64_t v3 = 3;
          }
          else {
            uint64_t v3 = v3;
          }
        }
      }
    }
    uint64_t v2 = (uint64_t **)*v2;
  }
  while (v2);
  return v3;
}

void *std::__function::__value_func<BOOL ()(MIL::IRFunction const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1}>,BOOL ()(MIL::IRBlock const&)>::~__func()
{
}

__n128 std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1}>,BOOL ()(MIL::IRBlock const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26C253190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

__n128 std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1}>,BOOL ()(MIL::IRBlock const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C253190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1}>,BOOL ()(MIL::IRBlock const&)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(int **)(a1 + 16);
  int v5 = *v4;
  if (*v4 <= v3) {
    int v5 = v3;
  }
  int *v4 = v5;
  return 1;
}

uint64_t std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1}>,BOOL ()(MIL::IRBlock const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1},std::allocator<anonymous namespace'::IRProgramImpl::GetMinimumRequiredSyntaxVersion(void)::{lambda(MIL::IRBlock const&)#1}>,BOOL ()(MIL::IRBlock const&)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(MIL::IRBlock const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *MIL::IRScope::IRScope(MIL::IRScope *this)
{
  __n128 result = MIL::IRValueQueryable::IRValueQueryable(this);
  void *result = &unk_26C253220;
  return result;
}

void MIL::IRCachedScope::~IRCachedScope(MIL::IRCachedScope *this)
{
  *(void *)this = &unk_26C253280;
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  MIL::IRValueQueryable::~IRValueQueryable(this);
}

double MIL::IRCachedScope::IRCachedScope(MIL::IRCachedScope *this)
{
  uint64_t v1 = MIL::IRValueQueryable::IRValueQueryable(this);
  void *v1 = &unk_26C253280;
  v1[1] = 0;
  v1[2] = 0;
  uint64_t v1[3] = 850045863;
  double result = 0.0;
  *((_OWORD *)v1 + 2) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  v1[10] = 0;
  *((unsigned char *)v1 + 8std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 1;
  return result;
}

void MIL::IRCachedScope::DisableCache(MIL::IRCachedScope *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  int v3 = (std::__shared_weak_count *)*((void *)this + 2);
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  atomic_store(0, (unsigned __int8 *)this + 88);

  std::mutex::unlock(v2);
}

uint64_t MIL::IRCachedScope::IsCacheEnabled(MIL::IRCachedScope *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)this + 88);
  uint64_t v4 = v3 & 1;
  std::mutex::unlock(v2);
  return v4;
}

void MIL::IRCachedScope::InvalidateAndCall(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  int v5 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);

  std::mutex::unlock(v4);
}

void sub_20F375E58(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRCachedScope::GetParent(MIL::IRCachedScope *this)
{
  MIL::IRCachedScope::GetScope(this, &v3);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 72))(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_20F375ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRCachedScope::GetScope(MIL::IRCachedScope *this@<X0>, void *a2@<X8>)
{
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 88);
  if ((v4 & 1) == 0)
  {
    int v5 = (std::mutex *)((char *)this + 24);
    std::mutex::lock((std::mutex *)((char *)this + 24));
    (*(void (**)(uint64_t *__return_ptr, MIL::IRCachedScope *))(*(void *)this + 80))(&v13, this);
    std::shared_ptr<MIL::IRScope const>::operator=[abi:ne180100]<MIL::IRScope const,std::default_delete<MIL::IRScope const>,void>((void *)this + 1, &v13);
LABEL_3:
    uint64_t v6 = v13;
    uint64_t v13 = 0;
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    uint64_t v7 = *((void *)this + 2);
    *a2 = *((void *)this + 1);
    a2[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    std::mutex::unlock(v5);
    return;
  }
  uint64_t v9 = (uint64_t *)((char *)this + 8);
  uint64_t v8 = *((void *)this + 1);
  if (!v8)
  {
    int v5 = (std::mutex *)((char *)this + 24);
    std::mutex::lock((std::mutex *)((char *)this + 24));
    unsigned __int8 v10 = atomic_load((unsigned __int8 *)this + 88);
    if ((v10 & 1) == 0)
    {
      (*(void (**)(uint64_t *__return_ptr, MIL::IRCachedScope *))(*(void *)this + 80))(&v13, this);
      std::shared_ptr<MIL::IRScope const>::operator=[abi:ne180100]<MIL::IRScope const,std::default_delete<MIL::IRScope const>,void>((void *)this + 1, &v13);
      goto LABEL_3;
    }
    if (!*v9)
    {
      (*(void (**)(uint64_t *__return_ptr, MIL::IRCachedScope *))(*(void *)this + 80))(&v13, this);
      std::shared_ptr<MIL::IRScope const>::operator=[abi:ne180100]<MIL::IRScope const,std::default_delete<MIL::IRScope const>,void>((void *)this + 1, &v13);
      uint64_t v11 = v13;
      uint64_t v13 = 0;
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
      }
    }
    std::mutex::unlock((std::mutex *)((char *)this + 24));
    uint64_t v8 = *v9;
  }
  uint64_t v12 = *((void *)this + 2);
  *a2 = v8;
  a2[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_20F3760B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRCachedScope::GetScope(a10);
  }
  std::mutex::unlock(v10);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRCachedScope::GetType(MIL::IRCachedScope *a1, uint64_t a2, uint64_t a3)
{
  MIL::IRCachedScope::GetScope(a1, &v7);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, a2, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v5;
}

void sub_20F376194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRCachedScope::TryGetType(MIL::IRCachedScope *a1, uint64_t a2, uint64_t a3)
{
  MIL::IRCachedScope::GetScope(a1, &v7);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a2, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v5;
}

void sub_20F376224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRCachedScope::GetTypes(MIL::IRCachedScope *this)
{
  MIL::IRCachedScope::GetScope(this, &v3);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_20F3762A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRCachedScope::GetValue(MIL::IRCachedScope *a1, uint64_t a2, uint64_t a3)
{
  MIL::IRCachedScope::GetScope(a1, &v7);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 40))(v7, a2, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v5;
}

void sub_20F376334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRCachedScope::TryGetValue(MIL::IRCachedScope *a1, uint64_t a2, uint64_t a3)
{
  MIL::IRCachedScope::GetScope(a1, &v7);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2, a3);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v5;
}

void sub_20F3763C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRCachedScope::TryGetValueSharedPtr(MIL::IRCachedScope *a1, uint64_t a2, uint64_t a3)
{
  MIL::IRCachedScope::GetScope(a1, &v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 56))(v6, a2, a3);
  uint64_t v5 = v7;
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_20F37647C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRCachedScope::GetValues(MIL::IRCachedScope *this)
{
  MIL::IRCachedScope::GetScope(this, &v3);
  uint64_t v1 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 64))(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return v1;
}

void sub_20F3764FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<MIL::IRScope const>::operator=[abi:ne180100]<MIL::IRScope const,std::default_delete<MIL::IRScope const>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRScope const>::shared_ptr[abi:ne180100]<MIL::IRScope const,std::default_delete<MIL::IRScope const>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *MIL::IRMutableScope::IRMutableScope(MIL::IRMutableScope *this)
{
  double result = MIL::IRValueQueryable::IRValueQueryable(this);
  void *result = &unk_26C2532E8;
  return result;
}

void MIL::IRMutableScope::Make()
{
}

{
  operator new();
}

void sub_20F37660C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10E1C40EC1D54C1);
  _Unwind_Resume(a1);
}

void sub_20F376690(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10E1C40EC1D54C1);
  _Unwind_Resume(a1);
}

void MIL::IRMutableScope::Make(MIL::IRMutableScope *this)
{
}

void sub_20F376740(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10E1C40EC1D54C1);
  _Unwind_Resume(a1);
}

MIL::IRValueQueryable *std::default_delete<anonymous namespace'::IRScopeImpl>::operator()[abi:ne180100](MIL::IRValueQueryable *result)
{
  if (result)
  {
    uint64_t v1 = result;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)result + 56);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v1 + 16);
    MIL::IRValueQueryable::~IRValueQueryable(v1);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void anonymous namespace'::IRScopeImpl::~IRScopeImpl(_anonymous_namespace_::IRScopeImpl *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 16);

  MIL::IRValueQueryable::~IRValueQueryable(this);
}

{
  uint64_t vars8;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 56);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 16);
  MIL::IRValueQueryable::~IRValueQueryable(this);

  JUMPOUT(0x21056C700);
}

uint64_t *std::shared_ptr<MIL::IRScope const>::shared_ptr[abi:ne180100]<MIL::IRScope const,std::default_delete<MIL::IRScope const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  void *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IRScope const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::IRScope const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRScope const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *anonymous namespace'::IRScopeImpl::IRScopeImpl(void *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8 = MIL::IRValueQueryable::IRValueQueryable(a1);
  void *v8 = &unk_26C253418;
  v8[1] = a2;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v8 + 2), a3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(a1 + 7), a4);
  return a1;
}

uint64_t anonymous namespace'::IRScopeImpl::GetType(uint64_t a1, unsigned __int8 *a2, char a3)
{
  if (!result)
  {
    exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x20uLL);
    MIL::UnknownLocation::Make(exception);
  }
  return result;
}

void sub_20F376B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  int v26 = *(std::__shared_weak_count **)(v24 - 40);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a22)
  {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
    if ((v23 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if (!v23)
  {
LABEL_12:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v22);
  goto LABEL_12;
}

uint64_t anonymous namespace'::IRScopeImpl::TryGetType(uint64_t a1, unsigned __int8 *a2, char a3)
{
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 16), a2);
  if (v5)
  {
    if ((a3 & 1) != 0 || *(void *)(a1 + 8)) {
      return *((void *)v5 + 5);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t result = *(void *)(a1 + 8);
    if (result)
    {
      uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 24);
      return v7();
    }
  }
  return result;
}

uint64_t anonymous namespace'::IRScopeImpl::GetTypes(_anonymous_namespace_::IRScopeImpl *this)
{
  return (uint64_t)this + 16;
}

uint64_t anonymous namespace'::IRScopeImpl::GetValue(uint64_t a1, unsigned __int8 *a2, char a3)
{
  if (!result)
  {
    exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x20uLL);
    MIL::UnknownLocation::Make(exception);
  }
  return result;
}

void sub_20F376D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  int v26 = *(std::__shared_weak_count **)(v24 - 40);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a22)
  {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
    if ((v23 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if (!v23)
  {
LABEL_12:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v22);
  goto LABEL_12;
}

uint64_t anonymous namespace'::IRScopeImpl::TryGetValue(uint64_t a1, unsigned __int8 *a2, char a3)
{
  uint64_t v3 = v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v3;
}

unsigned __int8 *anonymous namespace'::IRScopeImpl::TryGetValueSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 56), a2);
  if (result)
  {
    if ((a3 & 1) != 0 || *(void *)(a1 + 8))
    {
      uint64_t v8 = *((void *)result + 6);
      *a4 = *((void *)result + 5);
      a4[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      return result;
    }
LABEL_10:
    *a4 = 0;
    a4[1] = 0;
    return result;
  }
  uint64_t result = *(unsigned __int8 **)(a1 + 8);
  if (!result) {
    goto LABEL_10;
  }
  uint64_t v9 = *(uint64_t (**)(void))(*(void *)result + 56);

  return (unsigned __int8 *)v9();
}

uint64_t anonymous namespace'::IRScopeImpl::GetValues(_anonymous_namespace_::IRScopeImpl *this)
{
  return (uint64_t)this + 56;
}

uint64_t anonymous namespace'::IRScopeImpl::GetParent(_anonymous_namespace_::IRScopeImpl *this)
{
  return *((void *)this + 1);
}

BOOL anonymous namespace'::IRScopeImpl::SetType(uint64_t a1, unsigned __int8 *a2, uint64_t a3, char a4)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 16), a2);
  if (v8 && (a4 & 1) == 0)
  {
    exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x20uLL);
    MIL::UnknownLocation::Make(exception);
  }
  BOOL v9 = v8 == 0;
  v12.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  *((void *)std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, a2, (uint64_t)&std::piecewise_construct, (long long **)&v12)+ 5) = a3;
  return v9;
}

void sub_20F3770AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  int v26 = *(std::__shared_weak_count **)(v24 - 40);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (a22)
  {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
    if ((v23 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if (!v23)
  {
LABEL_12:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v22);
  goto LABEL_12;
}

BOOL anonymous namespace'::IRScopeImpl::SetValue(uint64_t a1, unsigned __int8 *a2, long long *a3, char a4)
{
  uint64_t v7 = a1 + 56;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 56), a2);
  if (v8 && (a4 & 1) == 0)
  {
    exception = (MIL::UnknownLocation *)__cxa_allocate_exception(0x20uLL);
    MIL::UnknownLocation::Make(exception);
  }
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  BOOL v9 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v7, a2, (uint64_t)&std::piecewise_construct, (long long **)&v14);
  long long v10 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 6);
  *(_OWORD *)(v9 + 40) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v8 == 0;
}

void sub_20F3772E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a22)
  {
    (*(void (**)(uint64_t))(*(void *)a22 + 8))(a22);
    if ((v25 & 1) == 0) {
      goto LABEL_12;
    }
  }
  else if (!v25)
  {
LABEL_12:
    _Unwind_Resume(exception_object);
  }
  __cxa_free_exception(v24);
  goto LABEL_12;
}

void anonymous namespace'::IRScopeImpl::WithRenames(uint64_t a1, uint64_t *a2)
{
  std::unordered_map<std::string,MIL::IRValueType const*>::unordered_map((uint64_t)v16, a1 + 16);
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      long long v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v16, (unsigned __int8 *)v4);
      if (v6)
      {
        uint64_t v7 = *((void *)v6 + 5);
        v15[0] = (long long *)(v4 + 24);
        *((void *)std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v16, (unsigned __int8 *)(v4 + 24), (uint64_t)&std::piecewise_construct, v15)+ 5) = v7;
        std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__erase_unique<std::string>(v16, (unsigned __int8 *)v4);
      }
      v4 += 48;
    }
    while (v4 != v5);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v15, a1 + 56);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      long long v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(v15, (unsigned __int8 *)v8);
      if (v10)
      {
        unint64_t v17 = (long long *)(v8 + 24);
        uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v15, (unsigned __int8 *)(v8 + 24), (uint64_t)&std::piecewise_construct, &v17);
        uint64_t v13 = *((void *)v10 + 5);
        uint64_t v12 = *((void *)v10 + 6);
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        }
        std::string v14 = (std::__shared_weak_count *)*((void *)v11 + 6);
        *((void *)v11 + 5) = v13;
        *((void *)v11 + 6) = v12;
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>(v15, (unsigned __int8 *)v8);
      }
      v8 += 48;
    }
    while (v8 != v9);
  }
  operator new();
}

void sub_20F377554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IRScopeImpl::SetParent(uint64_t this, const MIL::IRScope *a2)
{
  *(void *)(this + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a2;
  return this;
}

unsigned __int8 *anonymous namespace'::IRScopeImpl::RemoveTypeAndValue(uint64_t a1, unsigned __int8 *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__erase_unique<std::string>((void *)(a1 + 16), a2);

  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__erase_unique<std::string>((void *)(a1 + 56), a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    std::string v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (std::string::size_type i = *v14; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v26[0];
  ++*v8;
  return i;
}

void sub_20F377870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F377924(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,MIL::IRValueType const*>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (std::string::size_type i = *(unsigned __int8 **)(a2 + 16); i; std::string::size_type i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_20F3779A0(_Unwind_Exception *a1)
{
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    unint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (std::string::size_type i = *v13; i; std::string::size_type i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__construct_node_hash<std::pair<std::string const,MIL::IRValueType const*> const&>(a1, v9, a3, (uint64_t)v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10) {
          v23 %= v10;
        }
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  std::string::size_type i = (unsigned __int8 *)v25[0];
  ++*v7;
  return i;
}

void sub_20F377C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__construct_node_hash<std::pair<std::string const,MIL::IRValueType const*> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x30uLL);
  *(void *)(a4 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(void *)a4 = v8;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  v8[5] = *(void *)(a3 + 24);
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F377CC8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, a2, (uint64_t)&__p);
  uint64_t v3 = (void **)__p;
  std::string __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void std::__shared_ptr_pointer<anonymous namespace'::IRScopeImpl  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

MIL::IRValueQueryable *std::__shared_ptr_pointer<anonymous namespace'::IRScopeImpl  *>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<anonymous namespace'::IRScopeImpl  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *MIL::IRValue::IRValue(void *this)
{
  *this = &unk_26C253518;
  return this;
}

uint64_t MIL::IRValue::TryAsTensor(MIL::IRValue *this)
{
  return 0;
}

uint64_t MIL::IRValue::AsTensor(MIL::IRValue *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRValue *))(*(void *)this + 40))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t MIL::IRValue::TryAsList(MIL::IRValue *this)
{
  return 0;
}

uint64_t MIL::IRValue::AsList(MIL::IRValue *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRValue *))(*(void *)this + 48))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t MIL::IRValue::TryAsTuple(MIL::IRValue *this)
{
  return 0;
}

uint64_t MIL::IRValue::AsTuple(MIL::IRValue *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRValue *))(*(void *)this + 56))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t MIL::IRValue::TryAsDictionary(MIL::IRValue *this)
{
  return 0;
}

uint64_t MIL::IRValue::AsDictionary(MIL::IRValue *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRValue *))(*(void *)this + 64))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t anonymous namespace'::TryGetScalarHelper<BOOL>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<BOOL>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<unsigned char>(void *lpsrc)
{
  if (lpsrc
  {
    return MIL::IRTypedTensorValue<BOOL>::TryGetScalarValue((uint64_t)v2);
  }
  else
  {
    if (!result) {
  }
    }
  return result;
}

uint64_t anonymous namespace'::TryGetScalarHelper<unsigned short>(void *lpsrc)
{
  if (lpsrc
  {
    return MIL::IRTypedTensorValue<unsigned short>::TryGetScalarValue((uint64_t)v2);
  }
  else
  {
    if (!result) {
  }
    }
  return result;
}

uint64_t anonymous namespace'::TryGetScalarHelper<unsigned int>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<unsigned int>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<unsigned long long>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<unsigned long long>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<signed char>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<signed char>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<short>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<short>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<int>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<int>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<long long>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<long long>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<MIL::Fp8E5M2>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<MIL::Fp8E5M2>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<MIL::Fp8E4M3FN>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<MIL::Bf16>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<MIL::Bf16>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<MIL::Fp16>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<MIL::Fp16>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<float>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<float>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<double>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<double>::TryGetScalarValue((uint64_t)v1);
}

uint64_t anonymous namespace'::TryGetScalarHelper<std::string>(const void *a1)
{
  if (!a1) {
    return 0;
  }
  if (!v1) {
    return 0;
  }

  return MIL::IRTypedTensorValue<std::string>::TryGetScalarValue((uint64_t)v1);
}

uint64_t MIL::IRValue::GetScalar<BOOL>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *Scalar;
}

uint64_t MIL::IRValue::GetScalar<unsigned char>(void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *Scalar;
}

uint64_t MIL::IRValue::GetScalar<unsigned short>(void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *Scalar;
}

uint64_t MIL::IRValue::GetScalar<unsigned int>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *Scalar;
}

uint64_t MIL::IRValue::GetScalar<unsigned long long>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *(void *)Scalar;
}

uint64_t MIL::IRValue::GetScalar<signed char>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *Scalar;
}

uint64_t MIL::IRValue::GetScalar<short>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *Scalar;
}

uint64_t MIL::IRValue::GetScalar<int>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *Scalar;
}

uint64_t MIL::IRValue::GetScalar<long long>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *(void *)Scalar;
}

uint64_t MIL::IRValue::GetScalar<MIL::Fp8E5M2>(const void *a1)
{
  if (!v1)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *v1;
}

uint64_t MIL::IRValue::GetScalar<MIL::Fp8E4M3FN>(const void *a1)
{
  if (!v1)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *v1;
}

uint64_t MIL::IRValue::GetScalar<MIL::Bf16>(const void *a1)
{
  if (!v1)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *v1;
}

uint64_t MIL::IRValue::GetScalar<MIL::Fp16>(const void *a1)
{
  if (!v1)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *v1;
}

float MIL::IRValue::GetScalar<float>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *(float *)Scalar;
}

double MIL::IRValue::GetScalar<double>(const void *a1)
{
  if (!Scalar)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v4 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v4, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return *(double *)Scalar;
}

void MIL::IRValue::GetScalar<std::string>(const void *a1@<X0>, std::string *a2@<X8>)
{
  if (!v3)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v8 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v8, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  if (*(char *)(v3 + 23) < 0)
  {
    uint64_t v5 = *(const std::string::value_type **)v3;
    std::string::size_type v6 = *(void *)(v3 + 8);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void *MIL::IRTensorValue::IRTensorValue(void *this)
{
  *this = &unk_26C253578;
  return this;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<BOOL>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<unsigned char>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if (v3) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

void anonymous namespace'::TryGetDataViewHelper<unsigned char>(void *lpsrc@<X0>, uint64_t a2@<X8>)
{
  if (!lpsrc
  {
    if (v39[0])
    {
      uint64_t v8 = v40;
      unint64_t v9 = v41;
LABEL_9:
      uint64_t v11 = ((v9 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v9 & 1);
      BOOL v10 = v11 == 0;
LABEL_10:
      if (v10) {
        uint64_t v8 = 0;
      }
      *(unsigned char *)a2 = 1;
LABEL_23:
      *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v8;
      *(void *)(a2 + 16) = v11;
      return;
    }
    if (v36[0])
    {
      uint64_t v8 = v37;
      unint64_t v12 = v38;
LABEL_15:
      uint64_t v13 = v12 >> 3;
      BOOL v14 = (v12 & 7) == 0;
      goto LABEL_18;
    }
    if (v33[0])
    {
      uint64_t v8 = v34;
      uint64_t v13 = (v35 >> 2) & 0x1FFFFFFFFFFFFFFFLL;
      BOOL v14 = (v35 & 3) == 0;
    }
    else
    {
      if (v30[0])
      {
        uint64_t v8 = v31;
        unint64_t v12 = 3 * v32;
        goto LABEL_15;
      }
      if (v27[0])
      {
        uint64_t v8 = v28;
        unint64_t v9 = v29;
        goto LABEL_9;
      }
      if (!v24[0])
      {
        if (v21[0])
        {
          uint64_t v8 = v22;
          uint64_t v11 = v23;
        }
        else
        {
          if (v18[0])
          {
            uint64_t v8 = v19;
            uint64_t v11 = v20;
          }
          else
          {
            if (!v15[0])
            {
              *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
              *(void *)(a2 + 16) = 0;
              *(unsigned char *)a2 = 0;
              return;
            }
            uint64_t v8 = v16;
            uint64_t v11 = v17;
          }
        }
        BOOL v10 = v11 == 0;
        goto LABEL_10;
      }
      uint64_t v8 = v25;
      uint64_t v13 = ((unint64_t)(3 * v26) >> 2) & 0x1FFFFFFFFFFFFFFFLL;
      BOOL v14 = ((6 * v26) & 6) == 0;
    }
LABEL_18:
    if (v14) {
      uint64_t v11 = v13;
    }
    else {
      uint64_t v11 = v13 + 1;
    }
    *(unsigned char *)a2 = 1;
    if (!v11) {
      uint64_t v8 = 0;
    }
    goto LABEL_23;
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(v4[2]);
  *(unsigned char *)a2 = 1;
  if (v6) {
    uint64_t v7 = View;
  }
  else {
    uint64_t v7 = 0;
  }
  *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
  *(void *)(a2 + 16) = v6;
}

uint64_t anonymous namespace'::TryGetDataViewHelper<unsigned short>@<X0>(uint64_t *lpsrc@<X0>, uint64_t a2@<X8>)
{
  if (lpsrc
  {
    uint64_t result = MIL::IRValueContiguousData<unsigned short>::GetView(v4[2]);
    *(unsigned char *)a2 = 1;
    if ((v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      uint64_t v7 = result;
    }
    else {
      uint64_t v7 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v7;
    *(void *)(a2 + 16) = v6 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    if (v14[0])
    {
      uint64_t v8 = v15;
      uint64_t v9 = v16;
    }
    else
    {
      if (!v11[0])
      {
        *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
        *(void *)(a2 + 16) = 0;
        *(unsigned char *)a2 = 0;
        return result;
      }
      uint64_t v8 = v12;
      uint64_t v9 = v13;
    }
    uint64_t v10 = v9 & 0x7FFFFFFFFFFFFFFFLL;
    if (!v10) {
      uint64_t v8 = 0;
    }
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v8;
    *(void *)(a2 + 16) = v10;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<unsigned int>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<unsigned int>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<unsigned long long>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<unsigned long long>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x1FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<signed char>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<signed char>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if (v3) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<short>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<short>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<int>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<int>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<long long>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<long long>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x1FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<MIL::Fp8E5M2>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if (v3) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<MIL::Fp8E4M3FN>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if (v3) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<MIL::Bf16>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<MIL::Bf16>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<MIL::Fp16>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<MIL::Fp16>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<float>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<float>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x3FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<double>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<double>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((v3 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v3 & 0x1FFFFFFFFFFFFFFFLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

uint64_t *anonymous namespace'::TryGetDataViewHelper<std::string>@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  if (result
  {
    uint64_t result = (uint64_t *)MIL::IRValueContiguousData<std::string>::GetView(result[2]);
    *(unsigned char *)a2 = 1;
    if ((unint64_t)(24 * v3) >= 0x18) {
      long long v4 = result;
    }
    else {
      long long v4 = 0;
    }
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = 24 * v3 / 0x18uLL;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
  return result;
}

void anonymous namespace'::TryGetDataViewHelper<MIL::Int4>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1
  {
    MIL::IRTypedTensorValue<MIL::Int4>::GetValues((uint64_t)v3);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
}

void anonymous namespace'::TryGetDataViewHelper<MIL::UInt6>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1
  {
    MIL::IRTypedTensorValue<MIL::UInt6>::GetValues((uint64_t)v3);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
}

void anonymous namespace'::TryGetDataViewHelper<MIL::UInt4>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1
  {
    MIL::IRTypedTensorValue<MIL::UInt4>::GetValues((uint64_t)v3);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
}

void anonymous namespace'::TryGetDataViewHelper<MIL::UInt3>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1
  {
    MIL::IRTypedTensorValue<MIL::UInt3>::GetValues((uint64_t)v3);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
}

void anonymous namespace'::TryGetDataViewHelper<MIL::UInt2>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1
  {
    MIL::IRTypedTensorValue<MIL::UInt2>::GetValues((uint64_t)v3);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
}

void anonymous namespace'::TryGetDataViewHelper<MIL::UInt1>(const void *a1@<X0>, uint64_t a2@<X8>)
{
  if (a1
  {
    MIL::IRTypedTensorValue<MIL::UInt1>::GetValues((uint64_t)v3);
    *(unsigned char *)a2 = 1;
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = v4;
    *(void *)(a2 + 16) = v5;
  }
  else
  {
    *(void *)(a2 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)a2 = 0;
  }
}

uint64_t MIL::IRTensorValue::GetDataView<BOOL>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<unsigned char>(void *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<unsigned short>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<unsigned int>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<unsigned long long>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<signed char>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<short>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<int>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<long long>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::Bf16>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::Fp16>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<float>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<double>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<std::string>(uint64_t *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::Int4>(const void *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::UInt6>(const void *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::UInt4>(const void *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::UInt3>(const void *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::UInt2>(const void *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

uint64_t MIL::IRTensorValue::GetDataView<MIL::UInt1>(const void *a1)
{
  if (!v4[0])
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return v5;
}

void MIL::IRTypedTensorValue<MIL::Int4>::GetValues(uint64_t a1)
{
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char const,true>(View, v4, v5);
}

void MIL::Util::CastToBitSpan<MIL::Int4 const,unsigned char const,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(4 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
}

void sub_20F37A368(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTypedTensorValue<MIL::UInt6>::GetValues(uint64_t a1)
{
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char const,true>(View, v4, v5);
}

void MIL::Util::CastToBitSpan<MIL::UInt6 const,unsigned char const,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(6 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
}

void sub_20F37A478(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTypedTensorValue<MIL::UInt4>::GetValues(uint64_t a1)
{
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char const,true>(View, v4, v5);
}

void MIL::Util::CastToBitSpan<MIL::UInt4 const,unsigned char const,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(4 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
}

void sub_20F37A584(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTypedTensorValue<MIL::UInt3>::GetValues(uint64_t a1)
{
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char const,true>(View, v4, v5);
}

void MIL::Util::CastToBitSpan<MIL::UInt3 const,unsigned char const,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(3 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
}

void sub_20F37A690(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTypedTensorValue<MIL::UInt2>::GetValues(uint64_t a1)
{
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char const,true>(View, v4, v5);
}

void MIL::Util::CastToBitSpan<MIL::UInt2 const,unsigned char const,true>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != vcvtpd_u64_f64((double)(unint64_t)(2 * a3) * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
}

void sub_20F37A79C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTypedTensorValue<MIL::UInt1>::GetValues(uint64_t a1)
{
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  uint64_t v4 = v3;
  unint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));

  MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char const,true>(View, v4, v5);
}

void MIL::Util::CastToBitSpan<MIL::UInt1 const,unsigned char const,true>(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 != vcvtpd_u64_f64((double)a3 * 0.125))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "BitSpanCast to sub-byte type span has invalid number of elements. Sub-byte span with NumElements requires exactly Span<uint8_t>.Size() bytes.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
}

void sub_20F37A8A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::GetHash(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return GetHashForSubByte<MIL::Int4>(a1, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47)));
}

uint64_t GetHashForSubByte<MIL::Int4>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v12 = a2;
  MIL::IRTypedTensorValue<MIL::Int4>::GetValues(a1);
  v10[0] = v4;
  v10[1] = v3;
  if (v3)
  {
    uint64_t v5 = v3;
    for (unint64_t i = 0; i != v5; ++i)
    {
      char v9 = MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(v10, i);
      uint64_t v7 = (unint64_t *)std::hash<MIL::Int4>::operator()((uint64_t)&v11, &v9);
      MIL::Util::HashCombine(&v12, v7);
    }
    return v12;
  }
  return v2;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::GetHash(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return GetHashForSubByte<MIL::UInt6>(a1, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47)));
}

uint64_t GetHashForSubByte<MIL::UInt6>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v12 = a2;
  MIL::IRTypedTensorValue<MIL::UInt6>::GetValues(a1);
  v10[0] = v4;
  v10[1] = v3;
  if (v3)
  {
    uint64_t v5 = v3;
    for (unint64_t i = 0; i != v5; ++i)
    {
      unsigned __int8 v9 = MIL::Util::Span<MIL::UInt6 const,18446744073709551615ul>::ValueAt(v10, i);
      uint64_t v7 = (unint64_t *)std::hash<MIL::UInt6>::operator()((uint64_t)&v11, &v9);
      MIL::Util::HashCombine(&v12, v7);
    }
    return v12;
  }
  return v2;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::GetHash(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return GetHashForSubByte<MIL::UInt4>(a1, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47)));
}

uint64_t GetHashForSubByte<MIL::UInt4>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v12 = a2;
  MIL::IRTypedTensorValue<MIL::UInt4>::GetValues(a1);
  v10[0] = v4;
  v10[1] = v3;
  if (v3)
  {
    uint64_t v5 = v3;
    for (unint64_t i = 0; i != v5; ++i)
    {
      unsigned __int8 v9 = MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(v10, i);
      uint64_t v7 = (unint64_t *)std::hash<MIL::UInt4>::operator()((uint64_t)&v11, &v9);
      MIL::Util::HashCombine(&v12, v7);
    }
    return v12;
  }
  return v2;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::GetHash(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return GetHashForSubByte<MIL::UInt3>(a1, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47)));
}

uint64_t GetHashForSubByte<MIL::UInt3>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v12 = a2;
  MIL::IRTypedTensorValue<MIL::UInt3>::GetValues(a1);
  v10[0] = v4;
  v10[1] = v3;
  if (v3)
  {
    uint64_t v5 = v3;
    for (unint64_t i = 0; i != v5; ++i)
    {
      unsigned __int8 v9 = MIL::Util::Span<MIL::UInt3 const,18446744073709551615ul>::ValueAt(v10, i);
      uint64_t v7 = (unint64_t *)std::hash<MIL::UInt3>::operator()((uint64_t)&v11, &v9);
      MIL::Util::HashCombine(&v12, v7);
    }
    return v12;
  }
  return v2;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::GetHash(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return GetHashForSubByte<MIL::UInt2>(a1, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47)));
}

uint64_t GetHashForSubByte<MIL::UInt2>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v12 = a2;
  MIL::IRTypedTensorValue<MIL::UInt2>::GetValues(a1);
  v10[0] = v4;
  v10[1] = v3;
  if (v3)
  {
    uint64_t v5 = v3;
    for (unint64_t i = 0; i != v5; ++i)
    {
      unsigned __int8 v9 = MIL::Util::Span<MIL::UInt2 const,18446744073709551615ul>::ValueAt(v10, i);
      uint64_t v7 = (unint64_t *)std::hash<MIL::UInt2>::operator()((uint64_t)&v11, &v9);
      MIL::Util::HashCombine(&v12, v7);
    }
    return v12;
  }
  return v2;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::GetHash(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  unint64_t v2 = HIDWORD(v1);
  unint64_t v3 = 0x9DDFEA08EB382D69 * (((8 * v1) + 8) ^ HIDWORD(v1));
  return GetHashForSubByte<MIL::UInt1>(a1, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v3 >> 47) ^ v3)) >> 47)));
}

uint64_t GetHashForSubByte<MIL::UInt1>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v12 = a2;
  MIL::IRTypedTensorValue<MIL::UInt1>::GetValues(a1);
  v10[0] = v4;
  v10[1] = v3;
  if (v3)
  {
    uint64_t v5 = v3;
    for (unint64_t i = 0; i != v5; ++i)
    {
      unsigned __int8 v9 = MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(v10, i);
      uint64_t v7 = (unint64_t *)std::hash<MIL::UInt1>::operator()((uint64_t)&v11, &v9);
      MIL::Util::HashCombine(&v12, v7);
    }
    return v12;
  }
  return v2;
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::TryGetScalarValue()
{
  return 0;
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  MIL::IRTypedTensorValue<MIL::Int4>::GetValues(a1);
  if (((v3 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v3 & 1)) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0;
  }
  MIL::Int4::Int4((MIL::Int4 *)&v8, *v4 & 0xF);
  return v8;
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned __int8 v8 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v8, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  MIL::IRTypedTensorValue<MIL::UInt6>::GetValues(a1);
  if (((6 * v3) & 6) != 0) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == (unint64_t)(6 * v3) >> 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  MIL::UInt6::UInt6((MIL::UInt6 *)&v9, *v5 & 0x3F);
  return v9;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  MIL::IRTypedTensorValue<MIL::UInt4>::GetValues(a1);
  if (((v3 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v3 & 1)) {
    uint64_t v4 = v2;
  }
  else {
    uint64_t v4 = 0;
  }
  MIL::UInt4::UInt4((MIL::UInt4 *)&v8, *v4 & 0xF);
  return v8;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned __int8 v8 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v8, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  MIL::IRTypedTensorValue<MIL::UInt3>::GetValues(a1);
  if (((3 * v3) & 7) != 0) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == (unint64_t)(3 * v3) >> 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  MIL::UInt3::UInt3((MIL::UInt3 *)&v9, *v5 & 7);
  return v9;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned __int8 v8 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v8, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  MIL::IRTypedTensorValue<MIL::UInt2>::GetValues(a1);
  if ((v3 & 3) != 0) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (((v3 >> 2) & 0x1FFFFFFFFFFFFFFFLL) == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  MIL::UInt2::UInt2((MIL::UInt2 *)&v9, *v5 & 3);
  return v9;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned __int8 v8 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v8, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  MIL::IRTypedTensorValue<MIL::UInt1>::GetValues(a1);
  if ((v3 & 7) != 0) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4 == v3 >> 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  MIL::UInt1::UInt1((MIL::UInt1 *)&v9, *v5 & 1);
  return v9;
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<BOOL>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<BOOL>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F37B270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253618;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F37B38C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F37B494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37B57C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37B660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<BOOL>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(a1[2]);
  unint64_t v7 = v6;
  unsigned __int8 v8 = v6 ? (unsigned __int8 *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(v4 + 16));
  char v11 = v10 ? (unsigned __int8 *)v9 : 0;
  if (v7 != v10) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F37B8CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<BOOL>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<BOOL>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<BOOL>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(v1);
  if (v7) {
    unsigned __int8 v8 = (unsigned __int8 *)View;
  }
  else {
    unsigned __int8 v8 = 0;
  }
  if (v7)
  {
    uint64_t v9 = v7;
    do
    {
      unsigned int v10 = *v8++;
      MIL::Util::HashCombine(&v12, (unint64_t *)v10);
      --v9;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<BOOL>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<BOOL>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<BOOL>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(a1 + 16));
  if (v3) {
    unint64_t v4 = (unsigned __int8 *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<BOOL>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<BOOL>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<BOOL>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F37BAF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<BOOL>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t MIL::IRTypedTensorValue<BOOL>::GetStorage(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void MIL::IRTypedTensorValue<BOOL>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F37BBF8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<BOOL>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<BOOL>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<BOOL>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<std::string>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<std::string>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<std::string>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F37BE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<std::string>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<std::string>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C2536F8;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F37BFB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F37C0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<std::string>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37C1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<std::string>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37C284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<std::string>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<std::string>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (a1[1] != *(void *)(result + 8)) {
      return 0;
    }
    uint64_t View = MIL::IRValueContiguousData<std::string>::GetView(a1[2]);
    unint64_t v7 = 24 * v6 / 0x18uLL;
    uint64_t v8 = (unint64_t)(24 * v6) >= 0x18 ? View : 0;
    uint64_t v9 = MIL::IRValueContiguousData<std::string>::GetView(*(void *)(v4 + 16));
    uint64_t v11 = (unint64_t)(24 * v10) >= 0x18 ? v9 : 0;
    if (v7 != 24 * v10 / 0x18uLL) {
      return 0;
    }
    (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_35:
        if (v22) {
          return 0;
        }
        return CompareValues<std::string>(v8, v7, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareValues<std::string>(v8, v7, v11);
  }
  return result;
}

void sub_20F37C4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<std::string>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<std::string>::GetView(*(void *)(a1 + 16));
  if ((unint64_t)(24 * v2) < 0x18) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<std::string>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

BOOL CompareValues<std::string>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    BOOL v6 = 0;
    for (i = 0; i != a2; BOOL v6 = ++i >= a2)
    {
      uint64_t v8 = (unsigned __int8 *)(a1 + 24 * i);
      uint64_t v9 = (unsigned __int8 **)(a3 + 24 * i);
      uint64_t v10 = v8[23];
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = (unsigned __int8 *)v8[23];
      }
      else {
        uint64_t v11 = (unsigned __int8 *)*((void *)v8 + 1);
      }
      unsigned __int8 v12 = (unsigned __int8 *)*((unsigned __int8 *)v9 + 23);
      int v13 = (char)v12;
      if ((char)v12 < 0) {
        unsigned __int8 v12 = v9[1];
      }
      if (v11 != v12) {
        break;
      }
      if (v13 >= 0) {
        unint64_t v14 = (unsigned __int8 *)(a3 + 24 * i);
      }
      else {
        unint64_t v14 = *v9;
      }
      if ((v10 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v8, v14, *((void *)v8 + 1))) {
          return v6;
        }
      }
      else if (v8[23])
      {
        while (*v8 == *v14)
        {
          ++v8;
          ++v14;
          if (!--v10) {
            goto LABEL_18;
          }
        }
        return v6;
      }
LABEL_18:
      ;
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

unint64_t MIL::IRTypedTensorValue<std::string>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v13 = v5;
  uint64_t View = MIL::IRValueContiguousData<std::string>::GetView(v1);
  if ((unint64_t)(24 * v7) >= 0x18) {
    uint64_t v8 = View;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((unint64_t)(24 * v7) >= 0x18)
  {
    unint64_t v9 = 24 * (24 * v7 / 0x18uLL);
    do
    {
      uint64_t v10 = (unint64_t *)std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v12, v8);
      MIL::Util::HashCombine(&v13, v10);
      v8 += 24;
      v9 -= 24;
    }
    while (v9);
    return v13;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<std::string>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<std::string>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<std::string>::GetView(*(void *)(a1 + 16));
  if ((unint64_t)(24 * v3) < 0x18) {
    return 0;
  }
  return result;
}

void MIL::IRTypedTensorValue<std::string>::GetScalarValue(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v11, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<std::string>::GetView(*(void *)(a1 + 16));
  if ((unint64_t)(24 * v5) >= 0x18) {
    uint64_t v6 = View;
  }
  else {
    uint64_t v6 = 0;
  }
  if (*(char *)(v6 + 23) < 0)
  {
    uint64_t v8 = *(const std::string::value_type **)v6;
    std::string::size_type v9 = *(void *)(v6 + 8);
    std::string::__init_copy_ctor_external(a2, v8, v9);
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v7;
  }
}

uint64_t MIL::IRTypedTensorValue<std::string>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<std::string>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<std::string>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F37C878(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<std::string>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<std::string>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F37C974(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<std::string>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<std::string>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<std::string>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::Bf16>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::Bf16>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F37CC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Bf16>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::Bf16>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C2537B0;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F37CD2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F37CE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Bf16>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37CF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Bf16>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37D000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Bf16>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<MIL::Bf16>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (unsigned __int16 *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<MIL::Bf16>::GetView(*(void *)(v4 + 16));
  uint64_t v11 = (v10 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (unsigned __int16 *)v9 : 0;
  if (v7 != (v10 & 0x7FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F37D268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Bf16>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<MIL::Bf16>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<MIL::Bf16>::GetView(v1);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v8 = (unsigned __int16 *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 2 * v7;
    do
    {
      unsigned int v10 = *v8++;
      MIL::Util::HashCombine(&v12, (unint64_t *)v10);
      v9 -= 2;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<MIL::Bf16>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<MIL::Bf16>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v4 = (unsigned __int16 *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F37D488(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::Bf16>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F37D584(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Bf16>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::Fp16>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::Fp16>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F37D820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp16>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::Fp16>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253868;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F37D93C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F37DA44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp16>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37DB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp16>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37DC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp16>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<MIL::Fp16>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (unsigned __int16 *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<MIL::Fp16>::GetView(*(void *)(v4 + 16));
  uint64_t v11 = (v10 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (unsigned __int16 *)v9 : 0;
  if (v7 != (v10 & 0x7FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F37DE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp16>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<MIL::Fp16>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<MIL::Fp16>::GetView(v1);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v8 = (unsigned __int16 *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 2 * v7;
    do
    {
      unsigned int v10 = *v8++;
      MIL::Util::HashCombine(&v12, (unint64_t *)v10);
      v9 -= 2;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp16>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<MIL::Fp16>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v4 = (unsigned __int16 *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F37E098(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::Fp16>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F37E194(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp16>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::Fp8E5M2>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::Fp8E5M2>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F37E430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp8E5M2>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::Fp8E5M2>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253920;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F37E54C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F37E654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp8E5M2>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37E73C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp8E5M2>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37E820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp8E5M2>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (a1[1] != *(void *)(result + 8)) {
      return 0;
    }
    uint64_t View = MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(a1[2]);
    unint64_t v7 = v6;
    uint64_t v8 = v6 ? View : 0;
    uint64_t v9 = MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(*(void *)(v4 + 16));
    uint64_t v11 = v10 ? v9 : 0;
    if (v7 != v10) {
      return 0;
    }
    (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_35:
        if (v22) {
          return 0;
        }
        return CompareValues<MIL::Fp8E5M2>(v8, v7, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareValues<MIL::Fp8E5M2>(v8, v7, v11);
  }
  return result;
}

void sub_20F37EA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(*(void *)(a1 + 16));
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

BOOL CompareValues<MIL::Fp8E5M2>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    BOOL v6 = 0;
    for (i = 0; i != a2; BOOL v6 = i >= a2)
    {
      uint64_t v8 = (unsigned char *)(a3 + i);
      if (((*(unsigned char *)(a1 + i) & 0x7F) != 0 || (*v8 & 0x7F) != 0)
        && (MIL::Fp8E5M2::IsNaN((MIL::Fp8E5M2 *)(a1 + i)) && MIL::Fp8E5M2::IsNaN((MIL::Fp8E5M2 *)(a3 + i))
         || *(unsigned __int8 *)(a1 + i) != *v8))
      {
        break;
      }
      ++i;
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

unint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(v1);
  if (v7) {
    uint64_t v8 = (unsigned __int8 *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7)
  {
    uint64_t v9 = v7;
    do
    {
      unsigned int v10 = *v8++;
      MIL::Util::HashCombine(&v12, (unint64_t *)v10);
      --v9;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(*(void *)(a1 + 16));
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(*(void *)(a1 + 16));
  if (v3) {
    unint64_t v4 = (unsigned __int8 *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F37ED48(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::Fp8E5M2>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F37EE44(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E5M2>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F37F0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C2539D8;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F37F1FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F37F304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37F3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F37F4D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (a1[1] != *(void *)(result + 8)) {
      return 0;
    }
    uint64_t View = MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(a1[2]);
    unint64_t v7 = v6;
    uint64_t v8 = v6 ? View : 0;
    uint64_t v9 = MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(*(void *)(v4 + 16));
    uint64_t v11 = v10 ? v9 : 0;
    if (v7 != v10) {
      return 0;
    }
    (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_35:
        if (v22) {
          return 0;
        }
        return CompareValues<MIL::Fp8E4M3FN>(v8, v7, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_35;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareValues<MIL::Fp8E4M3FN>(v8, v7, v11);
  }
  return result;
}

void sub_20F37F718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(*(void *)(a1 + 16));
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

BOOL CompareValues<MIL::Fp8E4M3FN>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2)
  {
    BOOL v6 = 0;
    for (i = 0; i != a2; BOOL v6 = i >= a2)
    {
      uint64_t v8 = (unsigned char *)(a3 + i);
      if (((*(unsigned char *)(a1 + i) & 0x7F) != 0 || (*v8 & 0x7F) != 0)
        && (MIL::Fp8E4M3FN::IsNaN((MIL::Fp8E4M3FN *)(a1 + i)) && MIL::Fp8E4M3FN::IsNaN((MIL::Fp8E4M3FN *)(a3 + i))
         || *(unsigned __int8 *)(a1 + i) != *v8))
      {
        break;
      }
      ++i;
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

unint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(v1);
  if (v7) {
    uint64_t v8 = (unsigned __int8 *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7)
  {
    uint64_t v9 = v7;
    do
    {
      unsigned int v10 = *v8++;
      MIL::Util::HashCombine(&v12, (unint64_t *)v10);
      --v9;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(*(void *)(a1 + 16));
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(*(void *)(a1 + 16));
  if (v3) {
    unint64_t v4 = (unsigned __int8 *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F37F9F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F37FAF4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Fp8E4M3FN>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<float>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<float>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<float>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F37FD90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<float>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<float>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253A90;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F37FEAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F37FFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<float>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F38009C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<float>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F380180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<float>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<float>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<float>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v8 = (v6 & 0x3FFFFFFFFFFFFFFFLL) != 0 ? (float *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<float>::GetView(*(void *)(v4 + 16));
  uint64_t v11 = (v10 & 0x3FFFFFFFFFFFFFFFLL) != 0 ? (float *)v9 : 0;
  if (v7 != (v10 & 0x3FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    float v26 = v8[v24];
    float v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F3803E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<float>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<float>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x3FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<float>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<float>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v14 = v5;
  uint64_t View = MIL::IRValueContiguousData<float>::GetView(v1);
  if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v8 = (float *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 4 * v7;
    do
    {
      float v10 = *v8++;
      uint64_t v11 = (unint64_t *)LODWORD(v10);
      if (v10 == 0.0) {
        unsigned __int8 v12 = 0;
      }
      else {
        unsigned __int8 v12 = v11;
      }
      MIL::Util::HashCombine(&v14, v12);
      v9 -= 4;
    }
    while (v9);
    return v14;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<float>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<float>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<float>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x3FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

float MIL::IRTypedTensorValue<float>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<float>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v4 = View;
  }
  else {
    uint64_t v4 = 0;
  }
  return *(float *)v4;
}

uint64_t MIL::IRTypedTensorValue<float>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<float>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<float>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F380614(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<float>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<float>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F380710(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<float>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<float>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<float>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<double>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<double>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<double>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F3809AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<double>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<double>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253B48;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F380AC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F380BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<double>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F380CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<double>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F380D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<double>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<double>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<double>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v8 = (v6 & 0x1FFFFFFFFFFFFFFFLL) != 0 ? (double *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<double>::GetView(*(void *)(v4 + 16));
  uint64_t v11 = (v10 & 0x1FFFFFFFFFFFFFFFLL) != 0 ? (double *)v9 : 0;
  if (v7 != (v10 & 0x1FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    double v26 = v8[v24];
    double v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F381004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<double>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<double>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<double>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<double>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v14 = v5;
  uint64_t View = MIL::IRValueContiguousData<double>::GetView(v1);
  if ((v7 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v8 = (double *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v7 & 0x1FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 8 * v7;
    do
    {
      double v10 = *v8++;
      double v11 = v10;
      if (v10 == 0.0) {
        unsigned __int8 v12 = 0;
      }
      else {
        unsigned __int8 v12 = *(unint64_t **)&v11;
      }
      MIL::Util::HashCombine(&v14, v12);
      v9 -= 8;
    }
    while (v9);
    return v14;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<double>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<double>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<double>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

double MIL::IRTypedTensorValue<double>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<double>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v4 = View;
  }
  else {
    uint64_t v4 = 0;
  }
  return *(double *)v4;
}

uint64_t MIL::IRTypedTensorValue<double>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<double>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<double>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F381230(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<double>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<double>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F38132C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<double>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<double>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<double>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::Int4>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::Int4>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F381574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::Int4>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253C00;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 13)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F381690(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F381798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F381880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F381964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::Equals(uint64_t a1, void *lpsrc)
{
  if ((void *)a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(a1 + 8) != *(void *)(result + 8)) {
      return 0;
    }
    MIL::IRTypedTensorValue<MIL::Int4>::GetValues(a1);
    uint64_t v6 = v5;
    unint64_t v8 = v7;
    MIL::IRTypedTensorValue<MIL::Int4>::GetValues(v4);
    if (v8 != v10) {
      return 0;
    }
    double v11 = v9;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_29:
        if (v22) {
          return 0;
        }
        return CompareSubByteValues<MIL::Int4>(v6, v8, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareSubByteValues<MIL::Int4>(v6, v8, v11);
  }
  return result;
}

void sub_20F381BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F381C58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::Int4>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F381D54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::Int4>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<signed char>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<signed char>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<signed char>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F381FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<signed char>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<signed char>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253CB8;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F38210C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F382214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<signed char>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3822FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<signed char>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3823E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<signed char>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<signed char>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<signed char>::GetView(a1[2]);
  unint64_t v7 = v6;
  unint64_t v8 = v6 ? (unsigned __int8 *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<signed char>::GetView(*(void *)(v4 + 16));
  double v11 = v10 ? (unsigned __int8 *)v9 : 0;
  if (v7 != v10) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F38264C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<signed char>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<signed char>::GetView(*(void *)(a1 + 16));
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<signed char>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<signed char>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<signed char>::GetView(v1);
  if (v7) {
    unint64_t v8 = (char *)View;
  }
  else {
    unint64_t v8 = 0;
  }
  if (v7)
  {
    uint64_t v9 = v7;
    do
    {
      uint64_t v10 = (unint64_t *)*v8++;
      MIL::Util::HashCombine(&v12, v10);
      --v9;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<signed char>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<signed char>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<signed char>::GetView(*(void *)(a1 + 16));
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<signed char>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<signed char>::GetView(*(void *)(a1 + 16));
  if (v3) {
    unint64_t v4 = (char *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<signed char>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<signed char>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<signed char>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F382874(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<signed char>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<signed char>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F382970(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<signed char>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<signed char>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<signed char>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<short>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<short>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<short>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F382C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<short>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<short>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253D70;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F382D28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F382E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<short>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F382F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<short>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F382FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<short>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<short>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<short>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (unsigned __int16 *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<short>::GetView(*(void *)(v4 + 16));
  double v11 = (v10 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (unsigned __int16 *)v9 : 0;
  if (v7 != (v10 & 0x7FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F383264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<short>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<short>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<short>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<short>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<short>::GetView(v1);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v8 = (__int16 *)View;
  }
  else {
    unint64_t v8 = 0;
  }
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 2 * v7;
    do
    {
      uint64_t v10 = (unint64_t *)*v8++;
      MIL::Util::HashCombine(&v12, v10);
      v9 -= 2;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<short>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<short>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<short>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<short>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<short>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v4 = (__int16 *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<short>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<short>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<short>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F383484(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<short>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<short>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F383580(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<short>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<short>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<short>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<int>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<int>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<int>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F38381C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<int>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<int>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253E28;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F383938(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F383A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<int>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F383B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<int>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F383C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<int>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<int>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<int>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x3FFFFFFFFFFFFFFFLL;
  unint64_t v8 = (v6 & 0x3FFFFFFFFFFFFFFFLL) != 0 ? (_DWORD *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<int>::GetView(*(void *)(v4 + 16));
  double v11 = (v10 & 0x3FFFFFFFFFFFFFFFLL) != 0 ? (_DWORD *)v9 : 0;
  if (v7 != (v10 & 0x3FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F383E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<int>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<int>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x3FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<int>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<int>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<int>::GetView(v1);
  if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v8 = (int *)View;
  }
  else {
    unint64_t v8 = 0;
  }
  if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 4 * v7;
    do
    {
      uint64_t v10 = (unint64_t *)*v8++;
      MIL::Util::HashCombine(&v12, v10);
      v9 -= 4;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<int>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<int>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<int>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x3FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<int>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<int>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v4 = (unsigned int *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<int>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<int>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<int>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F384094(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<int>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<int>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F384190(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<int>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<int>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<int>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<long long>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<long long>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<long long>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F38442C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<long long>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<long long>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253EE0;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F384548(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F384650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<long long>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F384738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<long long>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F38481C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<long long>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<long long>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<long long>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x1FFFFFFFFFFFFFFFLL;
  unint64_t v8 = (v6 & 0x1FFFFFFFFFFFFFFFLL) != 0 ? (void *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<long long>::GetView(*(void *)(v4 + 16));
  double v11 = (v10 & 0x1FFFFFFFFFFFFFFFLL) != 0 ? (void *)v9 : 0;
  if (v7 != (v10 & 0x1FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    uint64_t v26 = v8[v24];
    uint64_t v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F384A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<long long>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<long long>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<long long>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<long long>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<long long>::GetView(v1);
  if ((v7 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v8 = (unint64_t **)View;
  }
  else {
    unint64_t v8 = 0;
  }
  if ((v7 & 0x1FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *v8++;
      MIL::Util::HashCombine(&v12, v10);
      v9 -= 8;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<long long>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<long long>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<long long>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<long long>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<long long>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v4 = View;
  }
  else {
    uint64_t v4 = 0;
  }
  return *(void *)v4;
}

uint64_t MIL::IRTypedTensorValue<long long>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<long long>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<long long>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F384CA4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<long long>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<long long>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F384DA0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<long long>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<long long>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<long long>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::UInt1>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::UInt1>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F384FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::UInt1>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C253F98;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 21)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F385104(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F38520C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3852F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3853D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::Equals(uint64_t a1, void *lpsrc)
{
  if ((void *)a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(a1 + 8) != *(void *)(result + 8)) {
      return 0;
    }
    MIL::IRTypedTensorValue<MIL::UInt1>::GetValues(a1);
    uint64_t v6 = v5;
    unint64_t v8 = v7;
    MIL::IRTypedTensorValue<MIL::UInt1>::GetValues(v4);
    if (v8 != v10) {
      return 0;
    }
    double v11 = v9;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_29:
        if (v22) {
          return 0;
        }
        return CompareSubByteValues<MIL::UInt1>(v6, v8, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareSubByteValues<MIL::UInt1>(v6, v8, v11);
  }
  return result;
}

void sub_20F385618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3856CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::UInt1>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F3857C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt1>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::UInt2>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::UInt2>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F385A10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::UInt2>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C254050;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 19)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F385B2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F385C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F385D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F385E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::Equals(uint64_t a1, void *lpsrc)
{
  if ((void *)a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(a1 + 8) != *(void *)(result + 8)) {
      return 0;
    }
    MIL::IRTypedTensorValue<MIL::UInt2>::GetValues(a1);
    uint64_t v6 = v5;
    unint64_t v8 = v7;
    MIL::IRTypedTensorValue<MIL::UInt2>::GetValues(v4);
    if (v8 != v10) {
      return 0;
    }
    double v11 = v9;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_29:
        if (v22) {
          return 0;
        }
        return CompareSubByteValues<MIL::UInt2>(v6, v8, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareSubByteValues<MIL::UInt2>(v6, v8, v11);
  }
  return result;
}

void sub_20F386040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3860F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::UInt2>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F3861F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt2>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::UInt3>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::UInt3>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F386438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::UInt3>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C254108;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F386554(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F38665C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F386744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F386828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::Equals(uint64_t a1, void *lpsrc)
{
  if ((void *)a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(a1 + 8) != *(void *)(result + 8)) {
      return 0;
    }
    MIL::IRTypedTensorValue<MIL::UInt3>::GetValues(a1);
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    MIL::IRTypedTensorValue<MIL::UInt3>::GetValues(v4);
    if (v8 != v10) {
      return 0;
    }
    double v11 = v9;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_29:
        if (v22) {
          return 0;
        }
        return CompareSubByteValues<MIL::UInt3>(v6, v8, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareSubByteValues<MIL::UInt3>(v6, v8, v11);
  }
  return result;
}

void sub_20F386A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F386B1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::UInt3>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F386C18(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt3>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::UInt4>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::UInt4>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F386E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::UInt4>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C2541C0;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 20)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F386F7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F387084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F38716C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F387250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::Equals(uint64_t a1, void *lpsrc)
{
  if ((void *)a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(a1 + 8) != *(void *)(result + 8)) {
      return 0;
    }
    MIL::IRTypedTensorValue<MIL::UInt4>::GetValues(a1);
    uint64_t v6 = v5;
    unint64_t v8 = v7;
    MIL::IRTypedTensorValue<MIL::UInt4>::GetValues(v4);
    if (v8 != v10) {
      return 0;
    }
    double v11 = v9;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_29:
        if (v22) {
          return 0;
        }
        return CompareSubByteValues<MIL::UInt4>(v6, v8, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareSubByteValues<MIL::UInt4>(v6, v8, v11);
  }
  return result;
}

void sub_20F387490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F387544(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::UInt4>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F387640(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt4>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<MIL::UInt6>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<MIL::UInt6>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F387888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<MIL::UInt6>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C254278;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 23)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F3879A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F387AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F387B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F387C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::Equals(uint64_t a1, void *lpsrc)
{
  if ((void *)a1 == lpsrc) {
    return 1;
  }
  if (result)
  {
    uint64_t v4 = result;
    if (*(void *)(a1 + 8) != *(void *)(result + 8)) {
      return 0;
    }
    MIL::IRTypedTensorValue<MIL::UInt6>::GetValues(a1);
    uint64_t v6 = v5;
    uint64_t v8 = v7;
    MIL::IRTypedTensorValue<MIL::UInt6>::GetValues(v4);
    if (v8 != v10) {
      return 0;
    }
    double v11 = v9;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 16) + 40))(&__s1);
    (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
    unsigned __int8 v12 = v28;
    if ((v28 & 0x80u) == 0) {
      size_t v13 = v28;
    }
    else {
      size_t v13 = __n;
    }
    unint64_t v14 = v25;
    int v15 = (char)v25;
    if ((v25 & 0x80u) != 0) {
      unint64_t v14 = (unint64_t)__p[1];
    }
    if (v13 == v14)
    {
      if ((v25 & 0x80u) == 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      if ((char)v28 < 0)
      {
        BOOL v22 = memcmp(__s1, v16, __n) != 0;
      }
      else if (v28)
      {
        uint64_t v17 = v28 - 1;
        p_s1 = &__s1;
        do
        {
          int v20 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v19 = v20;
          int v21 = *(unsigned __int8 *)v16;
          uint64_t v16 = (void **)((char *)v16 + 1);
          BOOL v22 = v19 != v21;
        }
        while (v19 == v21 && v17-- != 0);
      }
      else
      {
        BOOL v22 = 0;
      }
    }
    else
    {
      BOOL v22 = 1;
    }
    if (v15 < 0)
    {
      operator delete(__p[0]);
      if ((v28 & 0x80) == 0)
      {
LABEL_29:
        if (v22) {
          return 0;
        }
        return CompareSubByteValues<MIL::UInt6>(v6, v8, v11);
      }
    }
    else if ((v12 & 0x80) == 0)
    {
      goto LABEL_29;
    }
    operator delete(__s1);
    if (v22) {
      return 0;
    }
    return CompareSubByteValues<MIL::UInt6>(v6, v8, v11);
  }
  return result;
}

void sub_20F387EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F387F6C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<MIL::UInt6>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F388068(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<MIL::UInt6>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<unsigned char>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<unsigned char>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F3882B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<unsigned char>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C254330;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 14)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F3883CC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F3884D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3885BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3886A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<BOOL>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(a1[2]);
  unint64_t v7 = v6;
  uint64_t v8 = v6 ? (unsigned __int8 *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<unsigned char>::GetView(*(void *)(v4 + 16));
  double v11 = v10 ? (unsigned __int8 *)v9 : 0;
  if (v7 != v10) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F38890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<unsigned char>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<unsigned char>::GetView(v1);
  if (v7) {
    uint64_t v8 = (unsigned __int8 *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v7)
  {
    uint64_t v9 = v7;
    do
    {
      unsigned int v10 = *v8++;
      MIL::Util::HashCombine(&v12, (unint64_t *)v10);
      --v9;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F388A64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<unsigned char>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F388B60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<unsigned char>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<unsigned short>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<unsigned short>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F388DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned short>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<unsigned short>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C2543E8;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F388F18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F389020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned short>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F389108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned short>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3891EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned short>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned short>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  uint64_t v8 = (v6 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (unsigned __int16 *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<unsigned short>::GetView(*(void *)(v4 + 16));
  double v11 = (v10 & 0x7FFFFFFFFFFFFFFFLL) != 0 ? (unsigned __int16 *)v9 : 0;
  if (v7 != (v10 & 0x7FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F389454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<unsigned short>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<unsigned short>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<unsigned short>::GetView(v1);
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v8 = (unsigned __int16 *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 2 * v7;
    do
    {
      unsigned int v10 = *v8++;
      MIL::Util::HashCombine(&v12, (unint64_t *)v10);
      v9 -= 2;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<unsigned short>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned short>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v4 = (unsigned __int16 *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F389674(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<unsigned short>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F389770(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<unsigned short>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<unsigned int>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<unsigned int>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F389A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned int>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<unsigned int>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C2544A0;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 16)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F389B28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F389C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned int>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F389D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned int>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F389DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned int>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned int>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x3FFFFFFFFFFFFFFFLL;
  uint64_t v8 = (v6 & 0x3FFFFFFFFFFFFFFFLL) != 0 ? (_DWORD *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<unsigned int>::GetView(*(void *)(v4 + 16));
  double v11 = (v10 & 0x3FFFFFFFFFFFFFFFLL) != 0 ? (_DWORD *)v9 : 0;
  if (v7 != (v10 & 0x3FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    int v26 = v8[v24];
    int v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F38A064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<unsigned int>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x3FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<unsigned int>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<unsigned int>::GetView(v1);
  if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v8 = (unsigned int *)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v7 & 0x3FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 4 * v7;
    do
    {
      unsigned int v10 = *v8++;
      MIL::Util::HashCombine(&v12, (unint64_t *)v10);
      v9 -= 4;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<unsigned int>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x3FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned int>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x3FFFFFFFFFFFFFFFLL) != 0) {
    unint64_t v4 = (unsigned int *)View;
  }
  else {
    unint64_t v4 = 0;
  }
  return *v4;
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F38A284(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<unsigned int>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F38A380(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<unsigned int>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void MIL::IRTypedTensorValue<unsigned long long>::~IRTypedTensorValue(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  JUMPOUT(0x21056C700);
}

void MIL::IRTypedTensorValue<unsigned long long>::IRTypedTensorValue()
{
}

{
  operator new();
}

{
  operator new();
}

{
  operator new();
}

void sub_20F38A61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned long long>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTypedTensorValue<unsigned long long>::IRTypedTensorValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C254558;
  a1[1] = a2;
  uint64_t v4 = *a3;
  *a3 = 0;
  a1[2] = v4;
  uint64_t v5 = a1[1];
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    goto LABEL_6;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 88))(v5) != 17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
LABEL_6:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F38A738(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(void *)(v1 + 16);
  *(void *)(v1 + 16) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void sub_20F38A840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned long long>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F38A928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned long long>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

void sub_20F38AA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MIL::IRTypedTensorValue<unsigned long long>::IRTypedTensorValue();
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::Equals(void *a1, void *lpsrc)
{
  if (a1 == lpsrc) {
    return 1;
  }
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (a1[1] != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned long long>::GetView(a1[2]);
  unint64_t v7 = v6 & 0x1FFFFFFFFFFFFFFFLL;
  uint64_t v8 = (v6 & 0x1FFFFFFFFFFFFFFFLL) != 0 ? (void *)View : 0;
  uint64_t v9 = MIL::IRValueContiguousData<unsigned long long>::GetView(*(void *)(v4 + 16));
  double v11 = (v10 & 0x1FFFFFFFFFFFFFFFLL) != 0 ? (void *)v9 : 0;
  if (v7 != (v10 & 0x1FFFFFFFFFFFFFFFLL)) {
    return 0;
  }
  (*(void (**)(void **__return_ptr))(*(void *)a1[2] + 40))(&__s1);
  (*(void (**)(void **__return_ptr))(**(void **)(v4 + 16) + 40))(__p);
  unsigned __int8 v12 = v32;
  if ((v32 & 0x80u) == 0) {
    size_t v13 = v32;
  }
  else {
    size_t v13 = __n;
  }
  unint64_t v14 = v29;
  int v15 = (char)v29;
  if ((v29 & 0x80u) != 0) {
    unint64_t v14 = (unint64_t)__p[1];
  }
  if (v13 == v14)
  {
    if ((v29 & 0x80u) == 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    if ((char)v32 < 0)
    {
      BOOL v22 = memcmp(__s1, v16, __n) != 0;
    }
    else if (v32)
    {
      uint64_t v17 = v32 - 1;
      p_s1 = &__s1;
      do
      {
        int v20 = *(unsigned __int8 *)p_s1;
        p_s1 = (void **)((char *)p_s1 + 1);
        int v19 = v20;
        int v21 = *(unsigned __int8 *)v16;
        uint64_t v16 = (void **)((char *)v16 + 1);
        BOOL v22 = v19 != v21;
      }
      while (v19 == v21 && v17-- != 0);
    }
    else
    {
      BOOL v22 = 0;
    }
  }
  else
  {
    BOOL v22 = 1;
  }
  if (v15 < 0)
  {
    operator delete(__p[0]);
    if ((v32 & 0x80) == 0)
    {
LABEL_34:
      if (v22) {
        return 0;
      }
      goto LABEL_38;
    }
  }
  else if ((v12 & 0x80) == 0)
  {
    goto LABEL_34;
  }
  operator delete(__s1);
  if (v22) {
    return 0;
  }
LABEL_38:
  if (!v7) {
    return 1;
  }
  if (*v8 != *v11) {
    return 0;
  }
  uint64_t v24 = 1;
  do
  {
    unint64_t v25 = v24;
    if (v7 == v24) {
      break;
    }
    uint64_t v26 = v8[v24];
    uint64_t v27 = v11[v24++];
  }
  while (v26 == v27);
  return v25 >= v7;
}

void sub_20F38AC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::GetValues(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<unsigned long long>::GetView(*(void *)(a1 + 16));
  if ((v2 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::GetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))();
}

unint64_t MIL::IRTypedTensorValue<unsigned long long>::GetHash(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  unint64_t v3 = HIDWORD(v2);
  unint64_t v4 = 0x9DDFEA08EB382D69 * (((8 * v2) + 8) ^ HIDWORD(v2));
  unint64_t v5 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v4 >> 47) ^ v4)) >> 47));
  unint64_t v12 = v5;
  uint64_t View = MIL::IRValueContiguousData<unsigned long long>::GetView(v1);
  if ((v7 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v8 = (unint64_t **)View;
  }
  else {
    uint64_t v8 = 0;
  }
  if ((v7 & 0x1FFFFFFFFFFFFFFFLL) != 0)
  {
    uint64_t v9 = 8 * v7;
    do
    {
      uint64_t v10 = *v8++;
      MIL::Util::HashCombine(&v12, v10);
      v9 -= 8;
    }
    while (v9);
    return v12;
  }
  return v5;
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::GetType(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::TryGetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8))) {
    return 0;
  }
  uint64_t result = MIL::IRValueContiguousData<unsigned long long>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x1FFFFFFFFFFFFFFFLL) == 0) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::GetScalarValue(uint64_t a1)
{
  if (!MIL::IRTensorValueType::IsScalar(*(MIL::IRTensorValueType **)(a1 + 8)))
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v7 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v7, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  uint64_t View = MIL::IRValueContiguousData<unsigned long long>::GetView(*(void *)(a1 + 16));
  if ((v3 & 0x1FFFFFFFFFFFFFFFLL) != 0) {
    uint64_t v4 = View;
  }
  else {
    uint64_t v4 = 0;
  }
  return *(void *)v4;
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::UsesFileStorage(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::IsFileStorage(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::TryGetFileProperties(uint64_t a1)
{
  return MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::GetFileProperties(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(*(void *)(a1 + 16));
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "file properties not available for in-memory tensors");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F38AE94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::UsesUnownedMemory(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

void MIL::IRTypedTensorValue<unsigned long long>::ToString(MIL::Text::SerializerOptions *a1)
{
}

void sub_20F38AF90(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::UsesEncryptedFileStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 24))();
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::UsesConstexprOutput(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 32))();
}

uint64_t MIL::IRTypedTensorValue<unsigned long long>::TryGetConstExprOutputName(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))();
}

void MIL::IRTupleValue::~IRTupleValue(MIL::IRTupleValue *this)
{
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  unint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x21056C700](this, 0xE1C406427F484);
}

void *MIL::IRTupleValue::IRTupleValue(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_26C254610;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  *((_OWORD *)a1 + 1) = *(_OWORD *)a3;
  a1[4] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = (void *)(*(uint64_t (**)(void))(*(void *)a1[1] + 64))(a1[1]);
  if ((uint64_t)(v4[1] - *v4) >> 3 != (uint64_t)(a1[3] - a1[2]) >> 4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v34 = (void *)(*(uint64_t (**)(void))(*(void *)a1[1] + 64))(a1[1]);
    std::to_string(&v50, (uint64_t)(v34[1] - *v34) >> 3);
    unint64_t v35 = std::string::insert(&v50, 0, "Cannot create a tuple value with ");
    long long v36 = *(_OWORD *)&v35->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v35->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v36;
    v35->__r_.__value_.__l.__size_ = 0;
    v35->__r_.__value_.__r.__words[2] = 0;
    v35->__r_.__value_.__r.__words[0] = 0;
    uint64_t v37 = std::string::append(&v51, " types from ");
    long long v38 = *(_OWORD *)&v37->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v37->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v38;
    v37->__r_.__value_.__l.__size_ = 0;
    v37->__r_.__value_.__r.__words[2] = 0;
    v37->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v49, (uint64_t)(a1[3] - a1[2]) >> 4);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v39 = &v49;
    }
    else {
      int v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v49.__r_.__value_.__l.__size_;
    }
    unint64_t v41 = std::string::append(&v52, (const std::string::value_type *)v39, size);
    long long v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v41->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v42;
    v41->__r_.__value_.__l.__size_ = 0;
    v41->__r_.__value_.__r.__words[2] = 0;
    v41->__r_.__value_.__r.__words[0] = 0;
    long long v43 = std::string::append(&v53, " values.");
    long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v54.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v54);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v5 = 0;
  for (unint64_t i = 0; ; ++i)
  {
    uint64_t v7 = (void *)(*(uint64_t (**)(void))(*(void *)a1[1] + 64))(a1[1]);
    uint64_t v8 = v7[1] - *v7;
    uint64_t v9 = a1[1];
    if (i >= v8 >> 3) {
      break;
    }
    uint64_t v10 = *(MIL **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v9 + 64))(v9) + 8 * i);
    uint64_t v11 = a1[2];
    if (a1[3] == v11) {
      uint64_t v11 = 0;
    }
    unint64_t v12 = (const MIL::IRValueType *)(*(uint64_t (**)(void))(**(void **)(v11 + v5) + 32))(*(void *)(v11 + v5));
    if ((MIL::IsEqualOrStrongerType(v10, v12, v13) & 1) == 0)
    {
      unint64_t v15 = i;
      uint64_t v16 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      (*(void (**)(std::string *__return_ptr))(*(void *)a1[1] + 56))(&v49);
      uint64_t v17 = std::string::insert(&v49, 0, "Cannot create a tuple of type ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      int v19 = std::string::append(&v50, " from value at index ");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v51.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v48, v15);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v21 = &v48;
      }
      else {
        int v21 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v22 = HIBYTE(v48.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v22 = v48.__r_.__value_.__l.__size_;
      }
      uint64_t v23 = std::string::append(&v51, (const std::string::value_type *)v21, v22);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v52.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      unint64_t v25 = std::string::append(&v52, " of incompatible type ");
      long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v53.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      uint64_t v27 = a1[2];
      if (a1[3] == v27) {
        uint64_t v27 = 0;
      }
      uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(v27 + v5) + 32))(*(void *)(v27 + v5));
      (*(void (**)(void *__return_ptr))(*(void *)v28 + 56))(v46);
      if ((v47 & 0x80u) == 0) {
        unsigned __int8 v29 = (const std::string::value_type *)v46;
      }
      else {
        unsigned __int8 v29 = (const std::string::value_type *)v46[0];
      }
      if ((v47 & 0x80u) == 0) {
        std::string::size_type v30 = v47;
      }
      else {
        std::string::size_type v30 = v46[1];
      }
      uint64_t v31 = std::string::append(&v53, v29, v30);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v54.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v16, &v54);
      __cxa_throw(v16, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    v5 += 16;
  }
  if (!v9)
  {
    long long v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Type cannot be null");
    __cxa_throw(v45, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F38B614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (*(char *)(v50 - 73) < 0) {
    operator delete(*(void **)(v50 - 96));
  }
  if (*(char *)(v50 - 105) < 0) {
    operator delete(*(void **)(v50 - 128));
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v48 & 1) == 0)
    {
LABEL_16:
      *(void *)(v50 - 96) = v49;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 96));
      _Unwind_Resume(a1);
    }
  }
  else if (!v48)
  {
    goto LABEL_16;
  }
  __cxa_free_exception(v47);
  goto LABEL_16;
}

uint64_t MIL::IRTupleValue::GetType(MIL::IRTupleValue *this)
{
  return *((void *)this + 1);
}

uint64_t MIL::IRTupleValue::GetValues(MIL::IRTupleValue *this)
{
  if (*((void *)this + 3) == *((void *)this + 2)) {
    return 0;
  }
  else {
    return *((void *)this + 2);
  }
}

uint64_t MIL::IRTupleValue::Equals(MIL::IRTupleValue *this, const MIL::IRValue *a2)
{
  if (this == a2) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 56))(a2);
  if (!result) {
    return result;
  }
  uint64_t v4 = result;
  if (*((void *)this + 1) != *(void *)(result + 8)) {
    return 0;
  }
  uint64_t v5 = *((void *)this + 2);
  if (*((void *)this + 3) == v5) {
    return 1;
  }
  uint64_t v6 = 0;
  unint64_t v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(v4 + 16);
    if (v7 >= (*(void *)(v4 + 24) - v8) >> 4) {
      std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v5 + v6) + 16))(*(void *)(v5 + v6), *(void *)(v8 + v6));
    if ((result & 1) == 0) {
      break;
    }
    ++v7;
    uint64_t v5 = *((void *)this + 2);
    v6 += 16;
  }
  while (v7 < (*((void *)this + 3) - v5) >> 4);
  return result;
}

uint64_t MIL::IRTupleValue::GetHash(MIL::IRTupleValue *this)
{
  uint64_t v6 = 0;
  uint64_t v1 = (uint64_t *)*((void *)this + 2);
  unint64_t v2 = (uint64_t *)*((void *)this + 3);
  if (v1 == v2) {
    return 0;
  }
  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    MIL::Util::HashCombine(&v6, v4);
  }
  while (v1 != v2);
  return v6;
}

void MIL::IRTupleValue::ToString(MIL::IRTupleValue *this)
{
}

void sub_20F38BA64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRListValue::~IRListValue(MIL::IRListValue *this)
{
  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v1;

  uint64_t v1 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  unint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x21056C700](this, 0xE1C406427F484);
}

uint64_t MIL::IRListValue::IRListValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = &unk_26C254670;
  *(void *)(a1 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = a2;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(void *)(a1 + 32) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__variant_detail::__dtor<std::__variant_detail::__traits<std::string,std::shared_ptr<MIL::IRValue const>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Type cannot be null");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4) != (v6 - v5) >> 4)
  {
    std::string::size_type v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    unint64_t v31 = (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8));
    std::to_string(&v41, v31);
    long long v32 = std::string::insert(&v41, 0, "Cannot create a list of length");
    long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v42.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    uint64_t v34 = std::string::append(&v42, " from a value list of length ");
    long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v35;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v40, (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4);
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v36 = &v40;
    }
    else {
      long long v36 = (std::string *)v40.__r_.__value_.__r.__words[0];
    }
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v40.__r_.__value_.__l.__size_;
    }
    long long v38 = std::string::append(&v43, (const std::string::value_type *)v36, size);
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v30, &v44);
    __cxa_throw(v30, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v7 = MIL::IRValueType::AsListType(*(MIL::IRValueType **)(a1 + 8));
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24) - v9;
  if (v10) {
    uint64_t v11 = *(void *)(a1 + 16);
  }
  else {
    uint64_t v11 = 0;
  }
  if (v10)
  {
    unint64_t v12 = (MIL *)v8;
    uint64_t v13 = v11 + v10;
    do
    {
      unint64_t v14 = (const MIL::IRValueType *)(*(uint64_t (**)(void))(**(void **)v9 + 32))();
      if ((MIL::IsEqualOrStrongerType(v12, v14, v15) & 1) == 0)
      {
        uint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        long long v18 = v12;
        int v19 = v17;
        (*(void (**)(std::string *__return_ptr, MIL *))(*(void *)v18 + 56))(&v41, v18);
        long long v20 = std::string::insert(&v41, 0, "Cannot initialize list value of element type ");
        long long v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        std::string::size_type v22 = std::string::append(&v42, " from value with incompatible element type ");
        long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v23;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        uint64_t v24 = (*(uint64_t (**)(void))(**(void **)v9 + 32))();
        (*(void (**)(std::string *__return_ptr))(*(void *)v24 + 56))(&v40);
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unint64_t v25 = &v40;
        }
        else {
          unint64_t v25 = (std::string *)v40.__r_.__value_.__r.__words[0];
        }
        if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v26 = HIBYTE(v40.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v26 = v40.__r_.__value_.__l.__size_;
        }
        uint64_t v27 = std::string::append(&v43, (const std::string::value_type *)v25, v26);
        long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
        v44.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v28;
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(v19, &v44);
        __cxa_throw(v19, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      v9 += 16;
    }
    while (v9 != v13);
  }
  return a1;
}

void sub_20F38BF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 57) < 0) {
    operator delete(*(void **)(v36 - 80));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      *(void *)(v36 - 80) = v34;
      std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v36 - 80));
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v33);
  goto LABEL_14;
}

uint64_t MIL::IRListValue::GetValues(MIL::IRListValue *this)
{
  if (*((void *)this + 3) == *((void *)this + 2)) {
    return 0;
  }
  else {
    return *((void *)this + 2);
  }
}

uint64_t MIL::IRListValue::GetType(MIL::IRListValue *this)
{
  return *((void *)this + 1);
}

uint64_t MIL::IRListValue::GetElementType(MIL::IRValueType **this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)MIL::IRValueType::AsListType(this[1]) + 64);

  return v1();
}

uint64_t MIL::IRListValue::Equals(MIL::IRListValue *this, const MIL::IRValue *a2)
{
  if (this == a2) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 48))(a2);
  if (result)
  {
    uint64_t v4 = result;
    if (*((void *)this + 1) == *(void *)(result + 8)
      && (uint64_t v5 = *((void *)this + 2),
          uint64_t v6 = *((void *)this + 3),
          v6 - v5 == *(void *)(result + 24) - *(void *)(result + 16)))
    {
      if (v6 == v5)
      {
        return 1;
      }
      else
      {
        uint64_t v7 = 0;
        unint64_t v8 = 0;
        do
        {
          uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v5 + v7) + 16))(*(void *)(v5 + v7), *(void *)(*(void *)(v4 + 16) + v7));
          if ((result & 1) == 0) {
            break;
          }
          ++v8;
          uint64_t v5 = *((void *)this + 2);
          v7 += 16;
        }
        while (v8 < (*((void *)this + 3) - v5) >> 4);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MIL::IRListValue::GetHash(MIL::IRListValue *this)
{
  uint64_t v6 = 0;
  uint64_t v1 = (uint64_t *)*((void *)this + 2);
  unint64_t v2 = (uint64_t *)*((void *)this + 3);
  if (v1 == v2) {
    return 0;
  }
  do
  {
    uint64_t v3 = *v1;
    v1 += 2;
    uint64_t v4 = (unint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 24))(v3);
    MIL::Util::HashCombine(&v6, v4);
  }
  while (v1 != v2);
  return v6;
}

void MIL::IRListValue::ToString(MIL::IRListValue *this)
{
}

void sub_20F38C300(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRDictionaryValue::~IRDictionaryValue(MIL::IRDictionaryValue *this)
{
}

{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8);

  JUMPOUT(0x21056C700);
}

BOOL MIL::IRDictionaryValue::Equals(MIL::IRDictionaryValue *this, const MIL::IRValue *a2)
{
  if (this == a2) {
    return 1;
  }
  uint64_t v3 = (*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 64))(a2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (*(uint64_t (**)(void))(**((void **)this + 6) + 64))(*((void *)this + 6));
  uint64_t v6 = (*(uint64_t (**)(void))(**((void **)this + 6) + 72))(*((void *)this + 6));
  if (v5 != (*(uint64_t (**)(void))(**(void **)(v4 + 48) + 64))(*(void *)(v4 + 48))
    || v6 != (*(uint64_t (**)(void))(**(void **)(v4 + 48) + 72))(*(void *)(v4 + 48))
    || *((void *)this + 4) != *(void *)(v4 + 32))
  {
    return 0;
  }
  uint64_t v7 = (const MIL::IRValue **)((char *)this + 24);
  do
  {
    uint64_t v7 = (const MIL::IRValue **)*v7;
    BOOL v8 = v7 == 0;
    if (!v7) {
      break;
    }
    MIL::IRDictionaryValue::TryGetValueForKey((MIL::IRDictionaryValue *)v4, v7[2], &v11);
    if (!v11)
    {
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      return 0;
    }
    char v9 = (*(uint64_t (**)(const MIL::IRValue *))(*(void *)v7[4] + 16))(v7[4]);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  while ((v9 & 1) != 0);
  return v8;
}

void sub_20F38C5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRDictionaryValue::TryGetValueForKey(MIL::IRDictionaryValue *this@<X0>, const MIL::IRValue *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (void *)*((void *)this + 3);
  if (v4)
  {
    while (1)
    {
      uint64_t v6 = (std::__shared_weak_count *)v4[3];
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v7 = (std::__shared_weak_count *)v4[5];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      char v8 = (*(uint64_t (**)(const MIL::IRValue *))(*(void *)a2 + 16))(a2);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      if (v8) {
        break;
      }
      uint64_t v4 = (void *)*v4;
      if (!v4) {
        goto LABEL_12;
      }
    }
    uint64_t v9 = v4[5];
    *a3 = v4[4];
    a3[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
}

void sub_20F38C6B0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>::~pair((uint64_t)&a9);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    *uint64_t v9 = 0;
    v9[1] = 0;
    __cxa_end_catch();
    JUMPOUT(0x20F38C694);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRDictionaryValue::GetHash(MIL::IRDictionaryValue *this)
{
  uint64_t v5 = 0;
  uint64_t v1 = (uint64_t **)*((void *)this + 3);
  if (!v1) {
    return 0;
  }
  do
  {
    unint64_t v2 = (unint64_t *)(*(uint64_t (**)(uint64_t *))(*v1[2] + 24))(v1[2]);
    MIL::Util::HashCombine(&v5, v2);
    uint64_t v3 = (unint64_t *)(*(uint64_t (**)(uint64_t *))(*v1[4] + 24))(v1[4]);
    MIL::Util::HashCombine(&v5, v3);
    uint64_t v1 = (uint64_t **)*v1;
  }
  while (v1);
  return v5;
}

uint64_t MIL::IRDictionaryValue::GetType(MIL::IRDictionaryValue *this)
{
  return *((void *)this + 6);
}

void MIL::IRDictionaryValue::GetValueForKey(MIL::IRDictionaryValue *this@<X0>, const MIL::IRValue *a2@<X1>, void *a3@<X8>)
{
  MIL::IRDictionaryValue::TryGetValueForKey(this, a2, a3);
  if (!*a3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Requested key not present in IRDictionaryValue.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_20F38C804(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRDictionaryValue::Size(MIL::IRDictionaryValue *this)
{
  return *((void *)this + 4);
}

uint64_t MIL::IRDictionaryValue::begin(MIL::IRDictionaryValue *this)
{
  return *((void *)this + 3);
}

uint64_t MIL::IRDictionaryValue::end(MIL::IRDictionaryValue *this)
{
  return 0;
}

void MIL::IRDictionaryValue::ToString(MIL::IRDictionaryValue *this)
{
}

void sub_20F38C904(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRDictionaryValue::IRDictionaryValue(void *a1, uint64_t a2, uint64_t *a3)
{
  *a1 = &unk_26C2546D0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(a1 + 1), a3);
  a1[6] = a2;
  uint64_t v5 = a1 + 3;
  while (1)
  {
    uint64_t v5 = (void *)*v5;
    if (!v5) {
      break;
    }
    uint64_t v6 = (MIL *)(*(uint64_t (**)(void))(*(void *)a1[6] + 64))(a1[6]);
    uint64_t v7 = (const MIL::IRValueType *)(*(uint64_t (**)(void))(*(void *)v5[2] + 32))(v5[2]);
    if ((MIL::IsEqualOrStrongerType(v6, v7, v8) & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      uint64_t v25 = (*(uint64_t (**)(void))(*(void *)a1[6] + 64))(a1[6]);
      (*(void (**)(std::string *__return_ptr))(*(void *)v25 + 56))(&v38);
      std::string::size_type v26 = std::string::insert(&v38, 0, "Cannot initialize dict key of type ");
      long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      long long v28 = std::string::append(&v39, " from value with incompatible type ");
      long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v29;
      v28->__r_.__value_.__l.__size_ = 0;
      v28->__r_.__value_.__r.__words[2] = 0;
      v28->__r_.__value_.__r.__words[0] = 0;
      uint64_t v30 = (*(uint64_t (**)(void))(*(void *)v5[2] + 32))(v5[2]);
      (*(void (**)(const std::string::value_type **__return_ptr))(*(void *)v30 + 56))(&v35);
      if ((v37 & 0x80u) == 0) {
        unint64_t v31 = (const std::string::value_type *)&v35;
      }
      else {
        unint64_t v31 = v35;
      }
      if ((v37 & 0x80u) == 0) {
        std::string::size_type v32 = v37;
      }
      else {
        std::string::size_type v32 = v36;
      }
      long long v33 = std::string::append(&v40, v31, v32);
      long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v33->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v34;
      v33->__r_.__value_.__l.__size_ = 0;
      v33->__r_.__value_.__r.__words[2] = 0;
      v33->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(exception, &v41);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v9 = (MIL *)(*(uint64_t (**)(void))(*(void *)a1[6] + 72))(a1[6]);
    uint64_t v10 = (const MIL::IRValueType *)(*(uint64_t (**)(void))(*(void *)v5[4] + 32))(v5[4]);
    if ((MIL::IsEqualOrStrongerType(v9, v10, v11) & 1) == 0)
    {
      unint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      uint64_t v13 = (*(uint64_t (**)(void))(*(void *)a1[6] + 72))(a1[6]);
      (*(void (**)(std::string *__return_ptr))(*(void *)v13 + 56))(&v38);
      unint64_t v14 = std::string::insert(&v38, 0, "Cannot initialize dict value of type ");
      long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      uint64_t v16 = std::string::append(&v39, " from value with incompatible type ");
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      uint64_t v18 = (*(uint64_t (**)(void))(*(void *)v5[4] + 32))(v5[4]);
      (*(void (**)(const std::string::value_type **__return_ptr))(*(void *)v18 + 56))(&v35);
      if ((v37 & 0x80u) == 0) {
        int v19 = (const std::string::value_type *)&v35;
      }
      else {
        int v19 = v35;
      }
      if ((v37 & 0x80u) == 0) {
        std::string::size_type v20 = v37;
      }
      else {
        std::string::size_type v20 = v36;
      }
      long long v21 = std::string::append(&v40, v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      std::runtime_error::runtime_error(v12, &v41);
      __cxa_throw(v12, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
  }
  return a1;
}

void sub_20F38CD78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (*(char *)(v36 - 41) < 0) {
    operator delete(*(void **)(v36 - 64));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0)
  {
    operator delete(a15);
    if ((v35 & 1) == 0)
    {
LABEL_14:
      std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v33);
      _Unwind_Resume(a1);
    }
  }
  else if (!v35)
  {
    goto LABEL_14;
  }
  __cxa_free_exception(v34);
  goto LABEL_14;
}

uint64_t MIL::Util::Span<MIL::Int4 const,18446744073709551615ul>::ValueAt(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  unsigned int v2 = ((15 << ((4 * a2) & 4)) & *(unsigned __int8 *)(*a1 + ((a2 >> 1) & 0x1FFFFFFFFFFFFFFFLL))) >> ((4 * a2) & 4);
  if ((v2 & 8) != 0) {
    LOBYTE(v2) = v2 | 0xF0;
  }
  MIL::Int4::Int4((MIL::Int4 *)&v5, v2);
  return v5;
}

void sub_20F38CF00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::UInt6 const,18446744073709551615ul>::ValueAt(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  unint64_t v2 = (6 * a2) & 6;
  uint64_t v3 = (unsigned __int8 *)(*a1 + ((6 * a2) >> 3));
  unsigned int v4 = ((63 << v2) & *v3) >> v2;
  if (v2 >= 3)
  {
    uint64_t v5 = ((_BYTE)v2 + 13) & 0x10;
    int32x4_t v6 = (int32x4_t)xmmword_20F90EB80;
    int32x4_t v7 = (int32x4_t)xmmword_20F90EB90;
    int32x4_t v8 = (int32x4_t)xmmword_20F90EBA0;
    int32x4_t v9 = (int32x4_t)xmmword_20F90EBB0;
    int64x2_t v10 = (int64x2_t)xmmword_20F90EBC0;
    int64x2_t v11 = (int64x2_t)xmmword_20F90EBD0;
    int64x2_t v12 = (int64x2_t)xmmword_20F90EBE0;
    int64x2_t v13 = (int64x2_t)xmmword_20F90EBF0;
    int64x2_t v14 = (int64x2_t)xmmword_20F90EC00;
    int64x2_t v15 = (int64x2_t)xmmword_20F90EC10;
    int64x2_t v16 = (int64x2_t)xmmword_20F90EC20;
    int8x16_t v17 = 0uLL;
    int64x2_t v18 = (int64x2_t)xmmword_20F90EC30;
    v19.i64[0] = 0x100000001;
    v19.i64[1] = 0x100000001;
    uint64x2_t v20 = (uint64x2_t)vdupq_n_s64(v2 - 3);
    v21.i64[0] = 0x1000000010;
    v21.i64[1] = 0x1000000010;
    int64x2_t v22 = vdupq_n_s64(0x10uLL);
    do
    {
      int8x16_t v23 = v17;
      uint64x2_t v24 = (uint64x2_t)v10;
      uint64x2_t v25 = (uint64x2_t)v11;
      uint64x2_t v26 = (uint64x2_t)v12;
      uint64x2_t v27 = (uint64x2_t)v13;
      uint64x2_t v28 = (uint64x2_t)v14;
      uint64x2_t v29 = (uint64x2_t)v15;
      int8x16_t v17 = vorrq_s8(v17, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vshlq_u32(v19, (uint32x4_t)v9), (int16x8_t)vshlq_u32(v19, (uint32x4_t)v8)), (int8x16_t)vuzp1q_s16((int16x8_t)vshlq_u32(v19, (uint32x4_t)v7), (int16x8_t)vshlq_u32(v19, (uint32x4_t)v6))));
      uint64x2_t v30 = (uint64x2_t)v16;
      int64x2_t v15 = vaddq_s64(v15, v22);
      uint64x2_t v31 = (uint64x2_t)v18;
      int64x2_t v16 = vaddq_s64(v16, v22);
      int64x2_t v18 = vaddq_s64(v18, v22);
      int64x2_t v14 = vaddq_s64(v14, v22);
      int64x2_t v13 = vaddq_s64(v13, v22);
      int64x2_t v12 = vaddq_s64(v12, v22);
      int64x2_t v11 = vaddq_s64(v11, v22);
      int64x2_t v10 = vaddq_s64(v10, v22);
      int32x4_t v9 = vaddq_s32(v9, v21);
      int32x4_t v8 = vaddq_s32(v8, v21);
      int32x4_t v7 = vaddq_s32(v7, v21);
      int32x4_t v6 = vaddq_s32(v6, v21);
      v5 -= 16;
    }
    while (v5);
    int8x16_t v32 = vbslq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v31, v20), (int32x4_t)vcgtq_u64(v30, v20)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v29, v20), (int32x4_t)vcgtq_u64(v28, v20))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v27, v20), (int32x4_t)vcgtq_u64(v26, v20)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_u64(v25, v20), (int32x4_t)vcgtq_u64(v24, v20)))), v23, v17);
    *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    v4 |= ((v32.i32[0] | v32.i32[1] | ((unint64_t)(v32.i64[0] | HIDWORD(v32.i64[0])) >> 16) | ((v32.i32[0] | v32.i32[1] | ((unint64_t)(v32.i64[0] | HIDWORD(v32.i64[0])) >> 16)) >> 8)) & v3[1]) << (8 - v2);
  }
  MIL::UInt6::UInt6((MIL::UInt6 *)&v35, v4);
  return v35;
}

void sub_20F38D134(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::UInt4 const,18446744073709551615ul>::ValueAt(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  MIL::UInt4::UInt4((MIL::UInt4 *)&v4, ((15 << ((4 * a2) & 4)) & *(unsigned __int8 *)(*a1 + ((a2 >> 1) & 0x1FFFFFFFFFFFFFFFLL))) >> ((4 * a2) & 4));
  return v4;
}

void sub_20F38D1E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::UInt3 const,18446744073709551615ul>::ValueAt(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  unint64_t v2 = (3 * a2) & 7;
  uint64_t v3 = (unsigned __int8 *)(*a1 + ((3 * a2) >> 3));
  unsigned int v4 = ((7 << v2) & *v3) >> v2;
  if (v2 >= 6)
  {
    uint64_t v5 = v2 - ((3 * (_BYTE)a2) & 1) - 4;
    int32x2_t v6 = (int32x2_t)0x100000000;
    int8x8_t v7 = 0;
    uint64x2_t v8 = (uint64x2_t)vdupq_n_s64(v2 - 6);
    int64x2_t v9 = (int64x2_t)xmmword_20F90EC30;
    int64x2_t v10 = vdupq_n_s64(2uLL);
    do
    {
      int8x8_t v11 = v7;
      uint64x2_t v12 = (uint64x2_t)v9;
      int8x8_t v7 = vorr_s8(v7, (int8x8_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)v6));
      int64x2_t v9 = vaddq_s64(v9, v10);
      int32x2_t v6 = vadd_s32(v6, (int32x2_t)0x200000002);
      v5 -= 2;
    }
    while (v5);
    int8x8_t v13 = vbsl_s8((int8x8_t)vmovn_s64((int64x2_t)vcgtq_u64(v12, v8)), v11, v7);
    v4 |= ((v13.i32[0] | v13.i32[1]) & v3[1]) << (8 - v2);
  }
  MIL::UInt3::UInt3((MIL::UInt3 *)&v16, v4);
  return v16;
}

void sub_20F38D31C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::UInt2 const,18446744073709551615ul>::ValueAt(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  MIL::UInt2::UInt2((MIL::UInt2 *)&v4, ((3 << ((2 * a2) & 6)) & *(unsigned __int8 *)(*a1 + ((a2 >> 2) & 0x1FFFFFFFFFFFFFFFLL))) >> ((2 * a2) & 6));
  return v4;
}

void sub_20F38D3C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::Util::Span<MIL::UInt1 const,18446744073709551615ul>::ValueAt(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "index out of bounds.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  MIL::UInt1::UInt1((MIL::UInt1 *)&v4, ((1 << (a2 & 7)) & *(unsigned __int8 *)(*a1 + (a2 >> 3))) >> (a2 & 7));
  return v4;
}

void sub_20F38D470(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL CompareSubByteValues<MIL::Int4>(unsigned __int8 *a1, unint64_t a2, unsigned __int8 *a3)
{
  char v4 = a2;
  uint64_t v6 = (a2 >> 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v6)
  {
    int8x8_t v7 = a1;
    uint64x2_t v8 = a3;
    uint64_t v9 = (a2 >> 1) & 0x1FFFFFFFFFFFFFFFLL;
    while (!MIL::operator!=(v7, v8))
    {
      ++v8;
      ++v7;
      if (!--v9) {
        goto LABEL_5;
      }
    }
    return 0;
  }
  else
  {
LABEL_5:
    unint64_t v10 = 0;
    unint64_t v11 = v4 & 1;
    do
    {
      BOOL result = v10 >= v11;
      if (v10 >= v11) {
        break;
      }
      unint64_t v10 = 1;
    }
    while (((a3[v6] ^ a1[v6]) & 0xF) == 0);
  }
  return result;
}

BOOL CompareSubByteValues<MIL::UInt1>(unsigned __int8 *a1, unint64_t a2, unsigned __int8 *a3)
{
  char v4 = a2;
  unint64_t v6 = a2 >> 3;
  if (a2 >= 8)
  {
    if (v6 <= 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = a2 >> 3;
    }
    uint64x2_t v8 = a1;
    uint64_t v9 = a3;
    while (!MIL::operator!=(v8, v9))
    {
      ++v9;
      ++v8;
      if (!--v7) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  unint64_t v10 = v4 & 7;
  if ((v4 & 7) == 0) {
    return 1;
  }
  unsigned int v11 = a3[v6] ^ a1[v6];
  if (v11) {
    return 0;
  }
  uint64_t v12 = 1;
  do
  {
    unint64_t v13 = v12;
    if (v10 == v12) {
      break;
    }
    ++v12;
  }
  while (((v11 >> v13) & 1) == 0);
  return v13 >= v10;
}

BOOL CompareSubByteValues<MIL::UInt2>(unsigned __int8 *a1, unint64_t a2, unsigned __int8 *a3)
{
  char v4 = a2;
  uint64_t v6 = (a2 >> 2) & 0x1FFFFFFFFFFFFFFFLL;
  if (v6)
  {
    uint64_t v7 = a1;
    uint64x2_t v8 = a3;
    uint64_t v9 = (a2 >> 2) & 0x1FFFFFFFFFFFFFFFLL;
    while (!MIL::operator!=(v7, v8))
    {
      ++v8;
      ++v7;
      if (!--v9) {
        goto LABEL_5;
      }
    }
    return 0;
  }
LABEL_5:
  unint64_t v10 = v4 & 3;
  if ((v4 & 3) == 0) {
    return 1;
  }
  unsigned int v11 = a3[v6] ^ a1[v6];
  if ((v11 & 3) != 0) {
    return 0;
  }
  int v13 = 2;
  uint64_t v14 = 1;
  do
  {
    unint64_t v15 = v14;
    if (v10 == v14) {
      break;
    }
    ++v14;
    unsigned int v16 = v11 >> v13;
    v13 += 2;
  }
  while ((v16 & 3) == 0);
  return v15 >= v10;
}

BOOL CompareSubByteValues<MIL::UInt3>(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3)
{
  char v5 = 3 * a2;
  unint64_t v6 = (unint64_t)(3 * a2) >> 3;
  if ((unint64_t)(3 * a2) >= 8)
  {
    if (v6 <= 1) {
      unint64_t v7 = 1;
    }
    else {
      unint64_t v7 = (unint64_t)(3 * a2) >> 3;
    }
    uint64x2_t v8 = a1;
    uint64_t v9 = a3;
    while (!MIL::operator!=(v8, v9))
    {
      ++v9;
      ++v8;
      if (!--v7) {
        goto LABEL_8;
      }
    }
    return 0;
  }
LABEL_8:
  if ((v5 & 7u) < 3) {
    return 1;
  }
  unint64_t v11 = (v5 & 7u) / 3;
  unsigned int v12 = a3[v6] ^ a1[v6];
  if (v11 <= 1) {
    uint64_t v13 = 1;
  }
  else {
    uint64_t v13 = (v5 & 7u) / 3;
  }
  if ((v12 & 7) != 0) {
    return 0;
  }
  int v14 = 3;
  uint64_t v15 = 1;
  do
  {
    unint64_t v16 = v15;
    if (v13 == v15) {
      break;
    }
    ++v15;
    unsigned int v17 = v12 >> v14;
    v14 += 3;
  }
  while ((v17 & 7) == 0);
  return v16 >= v11;
}

BOOL CompareSubByteValues<MIL::UInt4>(unsigned __int8 *a1, unint64_t a2, unsigned __int8 *a3)
{
  char v4 = a2;
  uint64_t v6 = (a2 >> 1) & 0x1FFFFFFFFFFFFFFFLL;
  if (v6)
  {
    unint64_t v7 = a1;
    uint64x2_t v8 = a3;
    uint64_t v9 = (a2 >> 1) & 0x1FFFFFFFFFFFFFFFLL;
    while (!MIL::operator!=(v7, v8))
    {
      ++v8;
      ++v7;
      if (!--v9) {
        goto LABEL_5;
      }
    }
    return 0;
  }
  else
  {
LABEL_5:
    unint64_t v10 = 0;
    unint64_t v11 = v4 & 1;
    do
    {
      BOOL result = v10 >= v11;
      if (v10 >= v11) {
        break;
      }
      unint64_t v10 = 1;
    }
    while (((a3[v6] ^ a1[v6]) & 0xF) == 0);
  }
  return result;
}

BOOL CompareSubByteValues<MIL::UInt6>(unsigned __int8 *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5 = (6 * a2) & 6;
  unint64_t v6 = ((unint64_t)(3 * a2) >> 2) & 0x1FFFFFFFFFFFFFFFLL;
  BOOL v7 = v5 == 6;
  if ((unint64_t)(6 * a2) < 8)
  {
LABEL_8:
    if (v5 == 6) {
      BOOL v7 = ((a3[v6] ^ a1[v6]) & 0x3F) != 0;
    }
    return !v7;
  }
  else
  {
    if (v6 <= 1) {
      unint64_t v8 = 1;
    }
    else {
      unint64_t v8 = ((unint64_t)(3 * a2) >> 2) & 0x1FFFFFFFFFFFFFFFLL;
    }
    uint64_t v9 = a1;
    unint64_t v10 = a3;
    while (!MIL::operator!=(v9, v10))
    {
      ++v10;
      ++v9;
      if (!--v8) {
        goto LABEL_8;
      }
    }
    return 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    unint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>,0>(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

uint64_t std::pair<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>::~pair(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<BOOL>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254778;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<BOOL>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)BOOL result = &unk_26C254778;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<BOOL>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254778;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<BOOL>::IsFileStorage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t MIL::IRValueContiguousData<BOOL>::TryGetFileProperties(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

uint64_t MIL::IRValueContiguousData<BOOL>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<BOOL>::GetView(uint64_t a1)
{
  unint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

unint64_t MIL::IRValueContiguousData<BOOL>::OnDataReady(uint64_t a1, uint64_t a2, uint64_t a3)
{
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return result;
}

uint64_t MIL::IRValueContiguousData<BOOL>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<BOOL>::GetView(a1);
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<BOOL>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<BOOL>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<BOOL>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<BOOL>::TryGetConstExprOutputName()
{
  return 0;
}

unint64_t MIL::anonymous namespace'::ValidateType(uint64_t a1, uint64_t a2)
{
  if (!(*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1)) {
    goto LABEL_4;
  }
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
  unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 88))(v4);
  if (v5 > 0x19) {
    goto LABEL_22;
  }
  if (((1 << v5) & 0x303DEFC) != 0)
  {
LABEL_4:
    unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
    if (result == a2) {
      return result;
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Tensor storage and type have different number of elements");
LABEL_21:
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (((1 << v5) & 0xF82000) == 0)
  {
LABEL_22:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid data type in IsSubByteSizedDataType");
    goto LABEL_21;
  }
  unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result)
  {
    uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    switch((*(unsigned int (**)(uint64_t))(*(void *)v7 + 88))(v7))
    {
      case 0xDu:
      case 0x14u:
        unint64_t v8 = 2 * a2;
        unint64_t v9 = v8 - 1;
        goto LABEL_17;
      case 0x13u:
        unint64_t v8 = 4 * a2;
        unint64_t v9 = v8 - 3;
        goto LABEL_17;
      case 0x15u:
        unint64_t v8 = 8 * a2;
        unint64_t v9 = v8 - 7;
        goto LABEL_17;
      case 0x16u:
        unint64_t v10 = 8 * a2;
        unint64_t v8 = 8 * a2 / 3uLL;
        unint64_t v11 = v8 - 3;
        BOOL v12 = v10 >= 9;
        goto LABEL_14;
      case 0x17u:
        unint64_t v13 = 8 * a2;
        unint64_t v8 = 8 * a2 / 6uLL;
        unint64_t v11 = v8 - 2;
        BOOL v12 = v13 >= 0xC;
LABEL_14:
        if (v12) {
          unint64_t v9 = v11;
        }
        else {
          unint64_t v9 = 0;
        }
LABEL_17:
        unint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
        if (result <= v8 && result >= v9) {
          return result;
        }
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Sub Byte tensor storage and type have different number of elements");
        break;
      default:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Cannot validate tensor storage for unknown sub-byte-sized data");
        goto LABEL_21;
    }
    goto LABEL_21;
  }
  return result;
}

void sub_20F38DEFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueContiguousData<std::string>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2547C8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<std::string>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)unint64_t result = &unk_26C2547C8;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<std::string>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C2547C8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<std::string>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<std::string>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<std::string>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<std::string>::GetView(a1);
  if (!(24 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<std::string>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<std::string>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<std::string>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<std::string>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254818;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254818;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254818;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Bf16>::GetView(a1);
  if (!(2 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::Bf16>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::Bf16>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254868;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254868;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254868;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp16>::GetView(a1);
  if (!(2 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::Fp16>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::Fp16>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2548B8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C2548B8;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C2548B8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetView(a1);
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::Fp8E5M2>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E5M2>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254908;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254908;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254908;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetView(a1);
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::Fp8E4M3FN>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<float>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254958;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<float>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254958;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<float>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254958;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<float>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<float>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<float>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<float>::GetView(a1);
  if (!(4 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<float>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<float>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<float>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<float>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<double>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2549A8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<double>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C2549A8;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<double>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C2549A8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<double>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<double>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<double>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<double>::GetView(a1);
  if (!(8 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<double>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<double>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<double>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<double>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2549F8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C2549F8;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C2549F8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::Int4>::GetView(a1);
  if (!(((v2 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v2 & 1))) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::Int4>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::Int4>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<signed char>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254A48;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<signed char>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254A48;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<signed char>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254A48;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<signed char>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<signed char>::GetView(uint64_t a1)
{
  unint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<signed char>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<signed char>::GetView(a1);
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<signed char>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<signed char>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<signed char>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<signed char>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<short>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254A98;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<short>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254A98;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<short>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254A98;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<short>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<short>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<short>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<short>::GetView(a1);
  if (!(2 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<short>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<short>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<short>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<short>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<int>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254AE8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<int>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254AE8;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<int>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254AE8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<int>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<int>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<int>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<int>::GetView(a1);
  if (!(4 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<int>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<int>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<int>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<int>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<long long>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254B38;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<long long>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254B38;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<long long>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254B38;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<long long>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<long long>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<long long>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<long long>::GetView(a1);
  if (!(8 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<long long>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<long long>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<long long>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<long long>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254B88;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254B88;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254B88;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::UInt1>::GetView(a1);
  if ((v2 & 7) != 0) {
    uint64_t v3 = (v2 >> 3) + 1;
  }
  else {
    uint64_t v3 = v2 >> 3;
  }
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::UInt1>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::UInt1>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254BD8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254BD8;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254BD8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::GetView(uint64_t a1)
{
  unint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::UInt2>::GetView(a1);
  if ((v2 & 3) != 0) {
    uint64_t v3 = ((v2 >> 2) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  }
  else {
    uint64_t v3 = (v2 >> 2) & 0x1FFFFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::UInt2>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::UInt2>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254C28;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254C28;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254C28;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::GetView(uint64_t a1)
{
  unint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::UInt3>::GetView(a1);
  if (((3 * v2) & 7) != 0) {
    unint64_t v3 = ((unint64_t)(3 * v2) >> 3) + 1;
  }
  else {
    unint64_t v3 = (unint64_t)(3 * v2) >> 3;
  }
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::UInt3>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::UInt3>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254C78;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254C78;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254C78;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::UInt4>::GetView(a1);
  if (!(((v2 >> 1) & 0x1FFFFFFFFFFFFFFFLL) + (v2 & 1))) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::UInt4>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::UInt4>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254CC8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254CC8;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254CC8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::GetView(uint64_t a1)
{
  unint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<MIL::UInt6>::GetView(a1);
  if (((6 * v2) & 6) != 0) {
    unint64_t v3 = (((unint64_t)(3 * v2) >> 2) & 0x1FFFFFFFFFFFFFFFLL) + 1;
  }
  else {
    unint64_t v3 = ((unint64_t)(3 * v2) >> 2) & 0x1FFFFFFFFFFFFFFFLL;
  }
  if (!v3) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<MIL::UInt6>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<MIL::UInt6>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned char>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254D18;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<unsigned char>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254D18;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<unsigned char>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254D18;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<unsigned char>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned char>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<unsigned char>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<unsigned char>::GetView(a1);
  if (!v2) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<unsigned char>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned char>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<unsigned char>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<unsigned char>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned short>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254D68;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<unsigned short>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254D68;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<unsigned short>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254D68;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<unsigned short>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned short>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<unsigned short>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<unsigned short>::GetView(a1);
  if (!(2 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<unsigned short>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned short>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<unsigned short>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<unsigned short>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned int>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254DB8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<unsigned int>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254DB8;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<unsigned int>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254DB8;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<unsigned int>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned int>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<unsigned int>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<unsigned int>::GetView(a1);
  if (!(4 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<unsigned int>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned int>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<unsigned int>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<unsigned int>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::~IRValueContiguousData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254E08;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::IRValueContiguousData(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = &unk_26C254E08;
  *(unsigned char *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(result + 56) = 0;
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::IRValueContiguousData(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a1 = &unk_26C254E08;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  return a1;
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::IsUnownedMemory()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::GetView(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 56);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  unsigned __int8 v5 = atomic_load(v2);
  if ((v5 & 1) == 0)
  {
    atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  }
  return v4;
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::GetByteView(uint64_t a1)
{
  uint64_t result = MIL::IRValueContiguousData<unsigned long long>::GetView(a1);
  if (!(8 * v2)) {
    return 0;
  }
  return result;
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::UsesEncryptedFileStorage()
{
  return 0;
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::IsConstexprOutput()
{
  return 0;
}

void *MIL::IRValueContiguousData<unsigned long long>::GetConstExprOutputName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t MIL::IRValueContiguousData<unsigned long long>::TryGetConstExprOutputName()
{
  return 0;
}

uint64_t MIL::IRValueVectorData<unsigned char>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254E58;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254D18;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<unsigned char>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<unsigned char>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<unsigned char>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C254E58;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F390454(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<unsigned char>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<unsigned short>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254EA8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254D68;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<unsigned short>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<unsigned short>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<unsigned short>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C254EA8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F390614(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<unsigned short>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<unsigned int>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254EF8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254DB8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<unsigned int>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<unsigned int>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<unsigned int>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C254EF8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3907D8(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<unsigned int>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<unsigned long long>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254F48;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254E08;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<unsigned long long>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<unsigned long long>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<unsigned long long>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C254F48;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F39099C(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<unsigned long long>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<signed char>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254F98;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254A48;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<signed char>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<signed char>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<signed char>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C254F98;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F390B5C(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<signed char>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<short>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254FE8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254A98;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<short>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<short>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<short>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C254FE8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F390D1C(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<short>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<int>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255038;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254AE8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<int>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<int>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<int>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255038;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F390EE0(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<int>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<long long>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255088;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254B38;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<long long>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<long long>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<long long>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255088;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3910A4(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<long long>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<MIL::Bf16>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2550D8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254818;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<MIL::Bf16>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<MIL::Bf16>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<MIL::Bf16>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C2550D8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F391268(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<MIL::Bf16>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<MIL::Fp16>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255128;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254868;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<MIL::Fp16>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<MIL::Fp16>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<MIL::Fp16>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255128;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F39142C(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<MIL::Fp16>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<MIL::Fp8E4M3FN>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255178;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254908;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<MIL::Fp8E4M3FN>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<MIL::Fp8E4M3FN>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<MIL::Fp8E4M3FN>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255178;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3915EC(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<MIL::Fp8E4M3FN>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<MIL::Fp8E5M2>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2551C8;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C2548B8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<MIL::Fp8E5M2>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<MIL::Fp8E5M2>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<MIL::Fp8E5M2>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C2551C8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3917A8(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<MIL::Fp8E5M2>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<float>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255218;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C254958;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<float>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<float>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<float>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255218;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F391968(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<float>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<double>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255268;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)a1 = &unk_26C2549A8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<double>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<double>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<double>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255268;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F391B2C(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = v4;
  uint64_t v7 = *v5;
  if (*v5)
  {
    *(void *)(v1 + 80) = v7;
    operator delete(v7);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueVectorData<double>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueVectorData<std::string>::~IRValueVectorData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2552B8;
  uint64_t v3 = (void **)(a1 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)a1 = &unk_26C2547C8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueVectorData<std::string>::~IRValueVectorData(uint64_t a1)
{
  MIL::IRValueVectorData<std::string>::~IRValueVectorData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueVectorData<std::string>::IRValueVectorData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C2552B8;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F391CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  unint64_t v13 = v12;
  a10 = v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  *(void *)uint64_t v10 = &unk_26C2547C8;
  if (*(unsigned char *)(v10 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueVectorData<std::string>::GetViewImpl(uint64_t a1)
{
  if (*(void *)(a1 + 80) == *(void *)(a1 + 72)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 72);
  }
}

uint64_t MIL::IRValueUnownedData<BOOL>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254778;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<BOOL>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254778;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<BOOL>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255308;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F391E98(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254778;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<BOOL>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<BOOL>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<std::string>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2547C8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<std::string>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2547C8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<std::string>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255358;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F392020(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C2547C8;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<std::string>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<std::string>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::Bf16>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254818;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::Bf16>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254818;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::Bf16>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C2553A8;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3921A8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254818;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::Bf16>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::Bf16>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp16>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254868;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::Fp16>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254868;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp16>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C2553F8;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F392330(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254868;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp16>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::Fp16>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp8E5M2>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2548B8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::Fp8E5M2>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2548B8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp8E5M2>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255448;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3924B8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C2548B8;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp8E5M2>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::Fp8E5M2>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp8E4M3FN>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254908;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::Fp8E4M3FN>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254908;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp8E4M3FN>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255498;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F392640(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254908;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::Fp8E4M3FN>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::Fp8E4M3FN>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<float>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254958;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<float>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254958;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<float>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C2554E8;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3927C8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254958;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<float>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<float>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<double>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2549A8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<double>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2549A8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<double>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255538;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F392950(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C2549A8;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<double>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<double>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::Int4>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2549F8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::Int4>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2549F8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::Int4>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255588;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F392AD8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C2549F8;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::Int4>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::Int4>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<signed char>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254A48;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<signed char>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254A48;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<signed char>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C2555D8;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F392C60(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254A48;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<signed char>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<signed char>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<short>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254A98;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<short>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254A98;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<short>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255628;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F392DE8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254A98;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<short>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<short>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<int>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254AE8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<int>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254AE8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<int>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255678;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F392F70(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254AE8;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<int>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<int>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<long long>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254B38;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<long long>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254B38;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<long long>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C2556C8;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3930F8(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254B38;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<long long>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<long long>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt1>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254B88;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::UInt1>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254B88;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt1>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255718;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F393280(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254B88;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt1>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::UInt1>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt2>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254BD8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::UInt2>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254BD8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt2>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255768;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F393408(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254BD8;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt2>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::UInt2>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt3>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254C28;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::UInt3>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254C28;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt3>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C2557B8;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F393590(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254C28;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt3>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::UInt3>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt4>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254C78;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::UInt4>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254C78;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt4>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255808;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F393718(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254C78;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt4>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::UInt4>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt6>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254CC8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<MIL::UInt6>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254CC8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt6>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255858;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F3938A0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254CC8;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<MIL::UInt6>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<MIL::UInt6>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<unsigned char>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254D18;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<unsigned char>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254D18;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<unsigned char>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C2558A8;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F393A28(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254D18;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<unsigned char>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<unsigned char>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<unsigned short>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254D68;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<unsigned short>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254D68;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<unsigned short>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C2558F8;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F393BB0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254D68;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<unsigned short>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<unsigned short>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<unsigned int>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254DB8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<unsigned int>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254DB8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<unsigned int>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255948;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F393D38(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254DB8;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<unsigned int>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<unsigned int>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueUnownedData<unsigned long long>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254E08;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueUnownedData<unsigned long long>::~IRValueUnownedData(uint64_t a1)
{
  *(void *)a1 = &unk_26C254E08;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueUnownedData<unsigned long long>::IRValueUnownedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)(a1 + 72) = a3;
  *(void *)a1 = &unk_26C255998;
  *(void *)(a1 + 80) = a4;
  atomic_store(1u, (unsigned __int8 *)(a1 + 56));
  return a1;
}

void sub_20F393EC0(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = &unk_26C254E08;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueUnownedData<unsigned long long>::IsUnownedMemory()
{
  return 1;
}

uint64_t MIL::IRValueUnownedData<unsigned long long>::GetViewImpl(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t MIL::IRValueLegacyStorageData<float>::~IRValueLegacyStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2559E8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254958;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueLegacyStorageData<float>::~IRValueLegacyStorageData(uint64_t a1)
{
  MIL::IRValueLegacyStorageData<float>::~IRValueLegacyStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueLegacyStorageData<float>::IRValueLegacyStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = &unk_26C254958;
  uint64_t v7 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C2559E8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "identifier");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v8;
  UnknownLocationImpl::~UnknownLocationImpl(*(UnknownLocationImpl **)(a1 + 72));
  uint64_t v10 = v9;
  std::string::basic_string[abi:ne180100]<0>(v30, "path");
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v7, (unsigned __int8 *)v30);
  if (!v11) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v11 + 5), &__p);
  uint64_t v12 = v10[23];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v10[23];
  }
  else {
    uint64_t v13 = *((void *)v10 + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v13 != size)
  {
    BOOL v24 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_28;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80) != 0)
  {
    BOOL v24 = memcmp(*(const void **)v10, p_p, *((void *)v10 + 1)) == 0;
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_28;
  }
  if (!v10[23])
  {
    BOOL v24 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_28:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v17 = v12 - 1;
  do
  {
    int v19 = *v10++;
    int v18 = v19;
    int v21 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v20 = v21;
    BOOL v23 = v17-- != 0;
    BOOL v24 = v18 == v20;
  }
  while (v18 == v20 && v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
LABEL_22:
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (!v24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v28 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v29 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_36;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v28 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v29 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_36:
    __cxa_throw(exception, v29, v28);
  }
  UnknownLocationImpl::~UnknownLocationImpl(*(UnknownLocationImpl **)(a1 + 72));
  return a1;
}

void sub_20F394234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  uint64x2_t v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::anonymous namespace'::ValidateAndExtractProperty<unsigned long long>(unsigned __int8 *a1, void *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, a1);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v7);
    exception->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x263F8C370] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  uint64_t v3 = MIL::IRValue::TryGetScalar<unsigned long long>(*((void *)v2 + 5));
  if (!v3)
  {
    unint64_t v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(v6, &v7);
    __cxa_throw(v6, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return *(void *)v3;
}

void sub_20F3943C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::anonymous namespace'::EnsureFileExists(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  uint64_t result = stat(a1, &v4);
  if (result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    std::runtime_error::runtime_error(exception, &v3);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3944A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void MIL::IRValueLegacyStorageData<float>::GetFilename(uint64_t a1)
{
}

uint64_t MIL::IRValueLegacyStorageData<float>::GetIdentifier(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t MIL::IRValueLegacyStorageData<float>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::LegacyStorageReader::IsEncrypted(*(MIL::Blob::MMapFileReader ***)(a1 + 72));
}

unint64_t MIL::IRValueLegacyStorageData<float>::GetViewImpl(uint64_t a1)
{
  return MIL::Blob::LegacyStorageReader::GetDataView<float>(*(MIL::Blob::MMapFileReader ***)(a1 + 72), *(void *)(a1 + 88));
}

uint64_t MIL::IRValueLegacyStorageData<MIL::Fp16>::~IRValueLegacyStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255A38;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254868;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueLegacyStorageData<MIL::Fp16>::~IRValueLegacyStorageData(uint64_t a1)
{
  MIL::IRValueLegacyStorageData<MIL::Fp16>::~IRValueLegacyStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueLegacyStorageData<MIL::Fp16>::IRValueLegacyStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  *(void *)a1 = &unk_26C254868;
  std::string v7 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255A38;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "identifier");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v8;
  UnknownLocationImpl::~UnknownLocationImpl(*(UnknownLocationImpl **)(a1 + 72));
  uint64_t v10 = v9;
  std::string::basic_string[abi:ne180100]<0>(v30, "path");
  uint64_t v11 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v7, (unsigned __int8 *)v30);
  if (!v11) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v11 + 5), &__p);
  uint64_t v12 = v10[23];
  if ((v12 & 0x80u) == 0) {
    uint64_t v13 = v10[23];
  }
  else {
    uint64_t v13 = *((void *)v10 + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v15 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v13 != size)
  {
    BOOL v24 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_28;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80) != 0)
  {
    BOOL v24 = memcmp(*(const void **)v10, p_p, *((void *)v10 + 1)) == 0;
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_28;
  }
  if (!v10[23])
  {
    BOOL v24 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_28:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v17 = v12 - 1;
  do
  {
    int v19 = *v10++;
    int v18 = v19;
    int v21 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v20 = v21;
    BOOL v23 = v17-- != 0;
    BOOL v24 = v18 == v20;
  }
  while (v18 == v20 && v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_28;
  }
LABEL_22:
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  if (!v24)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v28 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v29 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_36;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v28 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v29 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_36:
    __cxa_throw(exception, v29, v28);
  }
  UnknownLocationImpl::~UnknownLocationImpl(*(UnknownLocationImpl **)(a1 + 72));
  return a1;
}

void sub_20F394828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  uint64x2_t v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueLegacyStorageData<MIL::Fp16>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::LegacyStorageReader::IsEncrypted(*(MIL::Blob::MMapFileReader ***)(a1 + 72));
}

unint64_t MIL::IRValueLegacyStorageData<MIL::Fp16>::GetViewImpl(uint64_t a1)
{
  return MIL::Blob::LegacyStorageReader::GetDataView<MIL::Fp16>(*(MIL::Blob::MMapFileReader ***)(a1 + 72), *(void *)(a1 + 88));
}

uint64_t MIL::IRValueStorageData<MIL::Int4>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255A88;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C2549F8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<MIL::Int4>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<MIL::Int4>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<MIL::Int4>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C2549F8;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255A88;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F394BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Int4>::GetFilename(uint64_t a1)
{
  return MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<MIL::Int4>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

void MIL::IRValueStorageData<MIL::Int4>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  MIL::Blob::StorageReader::GetDataView<MIL::Int4>(v2, v1);
}

void sub_20F394CEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<signed char>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255AD8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254A48;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<signed char>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<signed char>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<signed char>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254A48;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255AD8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F395034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<signed char>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<signed char>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<signed char>(v2, v1);
}

void sub_20F39512C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<unsigned char>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255B28;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254D18;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<unsigned char>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<unsigned char>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<unsigned char>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254D18;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255B28;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F395474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<unsigned char>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<float>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255B78;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254958;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<float>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<float>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<float>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254958;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255B78;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F395828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<float>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<float>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<float>(v2, v1);
}

void sub_20F395920(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Fp16>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255BC8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254868;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<MIL::Fp16>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<MIL::Fp16>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<MIL::Fp16>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254868;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255BC8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F395C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Fp16>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<MIL::Fp16>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<MIL::Fp16>(v2, v1);
}

void sub_20F395D60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Fp8E4M3FN>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255C18;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254908;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<MIL::Fp8E4M3FN>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<MIL::Fp8E4M3FN>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<MIL::Fp8E4M3FN>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254908;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255C18;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F3960A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Fp8E4M3FN>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<MIL::Fp8E4M3FN>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<MIL::Fp8E4M3FN>(v2, v1);
}

void sub_20F3961A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Fp8E5M2>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255C68;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C2548B8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<MIL::Fp8E5M2>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<MIL::Fp8E5M2>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<MIL::Fp8E5M2>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C2548B8;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255C68;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F3964E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Fp8E5M2>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<MIL::Fp8E5M2>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<MIL::Fp8E5M2>(v2, v1);
}

void sub_20F3965E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Bf16>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255CB8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254818;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<MIL::Bf16>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<MIL::Bf16>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<MIL::Bf16>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254818;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255CB8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F396928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::Bf16>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<MIL::Bf16>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<MIL::Bf16>(v2, v1);
}

void sub_20F396A20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<short>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255D08;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254A98;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<short>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<short>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<short>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254A98;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255D08;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F396D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<short>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<short>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<short>(v2, v1);
}

void sub_20F396E60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::UInt1>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255D58;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254B88;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<MIL::UInt1>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<MIL::UInt1>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<MIL::UInt1>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254B88;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255D58;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F3971A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::UInt1>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

void MIL::IRValueStorageData<MIL::UInt1>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  MIL::Blob::StorageReader::GetDataView<MIL::UInt1>(v2, v1);
}

void sub_20F3972A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::UInt2>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255DA8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254BD8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<MIL::UInt2>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<MIL::UInt2>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<MIL::UInt2>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254BD8;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255DA8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F3975E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::UInt2>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

void MIL::IRValueStorageData<MIL::UInt2>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  MIL::Blob::StorageReader::GetDataView<MIL::UInt2>(v2, v1);
}

void sub_20F3976E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::UInt4>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255DF8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254C78;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<MIL::UInt4>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<MIL::UInt4>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<MIL::UInt4>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254C78;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255DF8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F397A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<MIL::UInt4>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

void MIL::IRValueStorageData<MIL::UInt4>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  MIL::Blob::StorageReader::GetDataView<MIL::UInt4>(v2, v1);
}

void sub_20F397B20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<unsigned short>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255E48;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254D68;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<unsigned short>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<unsigned short>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<unsigned short>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254D68;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255E48;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F397E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<unsigned short>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<unsigned short>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<unsigned short>(v2, v1);
}

void sub_20F397F60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<int>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255E98;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254AE8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<int>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<int>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<int>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254AE8;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255E98;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F3982A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<int>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<int>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<int>(v2, v1);
}

void sub_20F3983A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<unsigned int>::~IRValueStorageData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255EE8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  *(void *)a1 = &unk_26C254DB8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueStorageData<unsigned int>::~IRValueStorageData(uint64_t a1)
{
  MIL::IRValueStorageData<unsigned int>::~IRValueStorageData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueStorageData<unsigned int>::IRValueStorageData(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, char a5)
{
  *(void *)a1 = &unk_26C254DB8;
  unint64_t v9 = (void *)(a1 + 8);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 8, a3);
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255EE8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "offset");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v10;
  *(unsigned char *)(a1 + 96) = a5;
  Filename = (unsigned __int8 *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  std::string::basic_string[abi:ne180100]<0>(v31, "path");
  uint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(v9, (unsigned __int8 *)v31);
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &__p);
  uint64_t v13 = Filename[23];
  if ((v13 & 0x80u) == 0) {
    uint64_t v14 = Filename[23];
  }
  else {
    uint64_t v14 = *((void *)Filename + 1);
  }
  std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v16 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  if (v14 != size)
  {
    BOOL v25 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((v13 & 0x80) != 0)
  {
    BOOL v25 = memcmp(*(const void **)Filename, p_p, *((void *)Filename + 1)) == 0;
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_30;
  }
  if (!Filename[23])
  {
    BOOL v25 = 1;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_22;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_22;
  }
  uint64_t v18 = v13 - 1;
  do
  {
    int v20 = *Filename++;
    int v19 = v20;
    int v22 = p_p->__r_.__value_.__s.__data_[0];
    p_p = (std::string *)((char *)p_p + 1);
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    BOOL v25 = v19 == v21;
  }
  while (v19 == v21 && v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_30;
  }
LABEL_22:
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (!v25)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C048];
    std::logic_error::logic_error(exception, "Storage and properties have different filenames.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1E0];
    goto LABEL_38;
  }
  if (*(void *)(a1 + 32) != 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    uint64x2_t v29 = (void (*)(void *))MEMORY[0x263F8C070];
    std::runtime_error::runtime_error((std::runtime_error *)exception, "Too many file properties provided.");
    uint64x2_t v30 = (struct type_info *)MEMORY[0x263F8C1F0];
LABEL_38:
    __cxa_throw(exception, v30, v29);
  }
  if (!*(unsigned char *)(a1 + 96))
  {
    uint64x2_t v26 = (const char *)MIL::Blob::StorageReader::GetFilename(*(MIL::Blob::StorageReader **)(a1 + 72));
  }
  return a1;
}

void sub_20F3986E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v23);
  BOOL v25 = *(std::__shared_weak_count **)(v20 + 80);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  *(void *)uint64_t v20 = v22;
  if (*(unsigned char *)(v20 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueStorageData<unsigned int>::UsesEncryptedFileStorage(uint64_t a1)
{
  return MIL::Blob::StorageReader::IsEncrypted(*(MIL::Blob::StorageReader **)(a1 + 72));
}

uint64_t MIL::IRValueStorageData<unsigned int>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  uint64_t v1 = *(void *)(a1 + 88);
  uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);

  return MIL::Blob::StorageReader::GetDataView<unsigned int>(v2, v1);
}

void sub_20F3987E0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRValueConstExprOutputData<signed char>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255F38;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  std::string v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254A48;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<signed char>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<signed char>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<signed char>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255F38;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F398978(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 72) + 32))(&v4);
  long long v2 = v4;
  long long v4 = 0uLL;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v2;
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    if (*((void *)&v4 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
    }
  }
}

uint64_t MIL::IRValueConstExprOutputData<signed char>::GetViewImpl(uint64_t a1)
{
  long long v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    long long v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<signed char>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<signed char>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<signed char>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<signed char>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<unsigned char>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255F88;
  long long v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254D18;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<unsigned char>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<unsigned char>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned char>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255F88;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F398C28(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned char>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(void **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<unsigned char>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned char>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<unsigned char>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<unsigned char>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<float>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C255FD8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254958;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<float>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<float>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<float>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C255FD8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F398E5C(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<float>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<float>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<float>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<float>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<float>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<double>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C256028;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C2549A8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<double>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<double>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<double>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C256028;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F399090(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<double>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<double>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<double>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<double>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<double>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp16>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C256078;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254868;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<MIL::Fp16>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<MIL::Fp16>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp16>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C256078;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F3992C4(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp16>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<MIL::Fp16>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp16>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<MIL::Fp16>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp16>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2560C8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254908;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C2560C8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F3994F8(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<MIL::Fp8E4M3FN>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C256118;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C2548B8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C256118;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F39972C(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<MIL::Fp8E5M2>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Bf16>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C256168;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254818;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<MIL::Bf16>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<MIL::Bf16>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Bf16>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C256168;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F399960(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Bf16>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<MIL::Bf16>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Bf16>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<MIL::Bf16>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<MIL::Bf16>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<short>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2561B8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254A98;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<short>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<short>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<short>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C2561B8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F399B94(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<short>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<short>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<short>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<short>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<short>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<unsigned short>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C256208;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254D68;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<unsigned short>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<unsigned short>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned short>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C256208;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F399DC8(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned short>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<unsigned short>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned short>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<unsigned short>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<unsigned short>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<int>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C256258;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254AE8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<int>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<int>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<int>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C256258;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F399FFC(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<int>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<int>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<int>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<int>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<int>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<unsigned int>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2562A8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254DB8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<unsigned int>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<unsigned int>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned int>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C2562A8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F39A230(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned int>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<unsigned int>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned int>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<unsigned int>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<unsigned int>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<long long>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C2562F8;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254B38;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<long long>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<long long>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<long long>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C2562F8;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F39A464(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<long long>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<long long>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<long long>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<long long>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<long long>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<unsigned long long>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C256348;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C254E08;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<unsigned long long>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<unsigned long long>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned long long>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C256348;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F39A698(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned long long>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<unsigned long long>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<unsigned long long>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<unsigned long long>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<unsigned long long>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

uint64_t MIL::IRValueConstExprOutputData<std::string>::~IRValueConstExprOutputData(uint64_t a1)
{
  *(void *)a1 = &unk_26C256398;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  *(void *)a1 = &unk_26C2547C8;
  if (*(unsigned char *)(a1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 8);
  }
  return a1;
}

void MIL::IRValueConstExprOutputData<std::string>::~IRValueConstExprOutputData(uint64_t a1)
{
  MIL::IRValueConstExprOutputData<std::string>::~IRValueConstExprOutputData(a1);

  JUMPOUT(0x21056C700);
}

uint64_t MIL::IRValueConstExprOutputData<std::string>::IRValueConstExprOutputData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  *(unsigned char *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = a2;
  *(void *)a1 = &unk_26C256398;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  unint64_t v6 = (std::string *)(a1 + 96);
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a5, *((void *)a5 + 1));
  }
  else
  {
    long long v7 = *a5;
    v6->__r_.__value_.__r.__words[2] = *((void *)a5 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  return a1;
}

void sub_20F39A8CC(_Unwind_Exception *exception_object)
{
  unsigned __int8 v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)uint64_t v1 = v3;
  if (*(unsigned char *)(v1 + 48)) {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueConstExprOutputData<std::string>::GetViewImpl(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 120);
  if (!v2)
  {
    MIL::IRValueConstExprOutputData<signed char>::EvaluateConstExpr(a1);
    uint64_t v2 = *(uint64_t **)(a1 + 120);
  }

  return MIL::IRTensorValue::GetDataView<std::string>(v2);
}

uint64_t MIL::IRValueConstExprOutputData<std::string>::IsConstexprOutput()
{
  return 1;
}

void MIL::IRValueConstExprOutputData<std::string>::GetConstExprOutputName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(a1 + 96), *(void *)(a1 + 104));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 96);
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 112);
  }
}

uint64_t MIL::IRValueConstExprOutputData<std::string>::TryGetConstExprOutputName(uint64_t a1)
{
  return a1 + 96;
}

void MIL::IRValueStorageData<unsigned char>::GetViewImpl(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This program was parsed specifying ignoreWeightFile, cannot fetch the data value.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  switch(MIL::Blob::StorageReader::GetDataType(*(MIL::Blob::StorageReader::Impl ***)(a1 + 72), *(void *)(a1 + 88)))
  {
    case 8u:
      MIL::Blob::StorageReader::GetDataView<MIL::Int4>(*(MIL::Blob::StorageReader::Impl ***)(a1 + 72), *(void *)(a1 + 88));
      break;
    case 9u:
      MIL::Blob::StorageReader::GetDataView<MIL::UInt1>(*(MIL::Blob::StorageReader::Impl ***)(a1 + 72), *(void *)(a1 + 88));
      break;
    case 0xAu:
      MIL::Blob::StorageReader::GetDataView<MIL::UInt2>(*(MIL::Blob::StorageReader::Impl ***)(a1 + 72), *(void *)(a1 + 88));
      break;
    case 0xBu:
      MIL::Blob::StorageReader::GetDataView<MIL::UInt4>(*(MIL::Blob::StorageReader::Impl ***)(a1 + 72), *(void *)(a1 + 88));
      break;
    case 0xCu:
      MIL::Blob::StorageReader::GetDataView<MIL::UInt3>(*(MIL::Blob::StorageReader::Impl ***)(a1 + 72), *(void *)(a1 + 88));
      break;
    case 0xDu:
      MIL::Blob::StorageReader::GetDataView<MIL::UInt6>(*(MIL::Blob::StorageReader::Impl ***)(a1 + 72), *(void *)(a1 + 88));
      break;
    default:
      uint64_t v2 = *(MIL::Blob::StorageReader::Impl ***)(a1 + 72);
      uint64_t v3 = *(void *)(a1 + 88);
      MIL::Blob::StorageReader::GetDataView<unsigned char>(v2, v3);
      break;
  }
}

void sub_20F39AADC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *MIL::IRValueQueryable::IRValueQueryable(void *this)
{
  *this = &unk_26C256BC0;
  return this;
}

void *MIL::IRDimension::IRDimension(void *this)
{
  *this = &unk_26C256C28;
  return this;
}

uint64_t MIL::IRDimension::AsConstant(MIL::IRDimension *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRDimension *))(*(void *)this + 16))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t MIL::IRDimension::TryAsConstant(MIL::IRDimension *this)
{
  return 0;
}

uint64_t MIL::IRDimension::AsUnknown(MIL::IRDimension *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRDimension *))(*(void *)this + 24))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t MIL::IRDimension::TryAsUnknown(MIL::IRDimension *this)
{
  return 0;
}

uint64_t MIL::IRDimension::IsVariadic(MIL::IRDimension *this)
{
  return 0;
}

void MIL::IRConstantDimension::ToString(MIL::IRConstantDimension *this)
{
}

void sub_20F39AD04(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRConstantDimension::IRConstantDimension(void *this)
{
  *this = &unk_26C256C68;
  return this;
}

void MIL::IRConstantDimension::Make(MIL::IRConstantDimension *this)
{
}

void MIL::IRUnknownDimension::~IRUnknownDimension(MIL::IRUnknownDimension *this)
{
}

void *MIL::IRUnknownDimension::IRUnknownDimension(void *this)
{
  *this = &unk_26C256CB0;
  return this;
}

{
  *this = &unk_26C256CB0;
  return this;
}

void MIL::IRUnknownDimension::Make(MIL::IRUnknownDimension *this)
{
}

void MIL::IRUnknownDimension::ToString(MIL::IRUnknownDimension *this)
{
}

void sub_20F39AF5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRProperty::~IRProperty(MIL::IRProperty *this)
{
}

void *MIL::IRProperty::IRProperty(void *this)
{
  *this = &unk_26C256CF0;
  return this;
}

{
  *this = &unk_26C256CF0;
  return this;
}

void *MIL::IRProperty::AsConstant(MIL::IRProperty *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void *MIL::IRProperty::TryAsConstant(void *this)
{
  if (this) {
  return this;
  }
}

void *MIL::IRProperty::AsUnknown(MIL::IRProperty *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void *MIL::IRProperty::TryAsUnknown(void *this)
{
  if (this) {
  return this;
  }
}

void MIL::IRProperty::ToString(MIL::IRProperty *this)
{
  if (this)
  {
    if (v2)
    {
      MIL::IRConstantProperty::ToString(v2);
    }
    if (v3)
    {
      MIL::IRUnknownProperty::ToString(v3);
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Property type is not supported.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F39B2AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRConstantProperty::ToString(MIL::IRConstantProperty *this)
{
}

void sub_20F39B424(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  uint64_t v4 = *(void *)(v2 - 40);
  *(void *)(v2 - 40) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void MIL::IRUnknownProperty::ToString(MIL::IRUnknownProperty *this)
{
}

void sub_20F39B558(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRConstantPropertyImpl::GetScalarDataType(MIL::IRConstantPropertyImpl *this)
{
  uint64_t v1 = *((int *)this + 2);
  if (v1 >= 3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Found no property storage for this property.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return dword_20F910310[v1];
}

void sub_20F39B614(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRConstantPropertyImpl::GetValue<long long>(_DWORD *a1)
{
  if (!a1 || a1[2])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Requested datatype int64_t is unexpected here.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return *(void *)a1;
}

void sub_20F39B68C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRConstantPropertyImpl::GetValue<unsigned char>(_DWORD *a1)
{
  if (!a1 || a1[2] != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Requested datatype uint8_t is unexpected here.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return *(void *)a1;
}

void sub_20F39B708(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRConstantPropertyImpl::GetValue<unsigned long long>(_DWORD *a1)
{
  if (!a1 || a1[2] != 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Requested datatype uint64_t is unexpected here.");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return *(void *)a1;
}

void sub_20F39B784(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *MIL::IRConstantProperty::IRConstantProperty(void *this)
{
  *this = &unk_26C256D20;
  this[1] = 0;
  return this;
}

{
  *this = &unk_26C256D20;
  this[1] = 0;
  return this;
}

void MIL::IRConstantProperty::~IRConstantProperty(MIL::IRConstantPropertyImpl **this)
{
  *this = (MIL::IRConstantPropertyImpl *)&unk_26C256D20;
  std::unique_ptr<MIL::IRConstantPropertyImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  *this = (MIL::IRConstantPropertyImpl *)&unk_26C256D20;
  std::unique_ptr<MIL::IRConstantPropertyImpl>::reset[abi:ne180100](this + 1, 0);
}

{
  uint64_t vars8;

  *this = (MIL::IRConstantPropertyImpl *)&unk_26C256D20;
  std::unique_ptr<MIL::IRConstantPropertyImpl>::reset[abi:ne180100](this + 1, 0);

  JUMPOUT(0x21056C700);
}

void *MIL::IRConstantProperty::IRConstantProperty(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C256D20;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C256D20;
  result[1] = v2;
  return result;
}

void MIL::IRConstantProperty::Make<long long>()
{
}

{
  while (1)
    ;
}

void sub_20F39B9D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<MIL::IRConstantPropertyImpl>::reset[abi:ne180100]((MIL::IRConstantPropertyImpl **)va, 0);
  _Unwind_Resume(a1);
}

void MIL::IRConstantProperty::Make<unsigned char>()
{
}

{
  while (1)
    ;
}

void sub_20F39BAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<MIL::IRConstantPropertyImpl>::reset[abi:ne180100]((MIL::IRConstantPropertyImpl **)va, 0);
  _Unwind_Resume(a1);
}

void MIL::IRConstantProperty::Make<unsigned long long>()
{
}

{
  while (1)
    ;
}

void sub_20F39BBB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<MIL::IRConstantPropertyImpl>::reset[abi:ne180100]((MIL::IRConstantPropertyImpl **)va, 0);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRConstantProperty::GetScalarDataType(MIL::IRConstantPropertyImpl **this)
{
  return MIL::IRConstantPropertyImpl::GetScalarDataType(this[1]);
}

uint64_t MIL::IRConstantProperty::GetInt64ScalarValue(MIL::IRConstantProperty *this)
{
  return *(void *)MIL::IRConstantPropertyImpl::GetValue<long long>(*((_DWORD **)this + 1));
}

uint64_t MIL::IRConstantProperty::GetUInt8ScalarValue(MIL::IRConstantProperty *this)
{
  return *(unsigned __int8 *)MIL::IRConstantPropertyImpl::GetValue<unsigned char>(*((_DWORD **)this + 1));
}

uint64_t MIL::IRConstantProperty::GetUInt64ScalarValue(MIL::IRConstantProperty *this)
{
  return *(void *)MIL::IRConstantPropertyImpl::GetValue<unsigned long long>(*((_DWORD **)this + 1));
}

void *MIL::IRUnknownProperty::IRUnknownProperty(void *this)
{
  *this = &unk_26C256D40;
  this[1] = 0;
  return this;
}

{
  *this = &unk_26C256D40;
  this[1] = 0;
  return this;
}

void MIL::IRUnknownProperty::~IRUnknownProperty(MIL::IRUnknownProperty *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C256D40;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x1000C4077774924);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C256D40;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x1000C4077774924);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C256D40;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x1000C4077774924);
  }

  JUMPOUT(0x21056C700);
}

void *MIL::IRUnknownProperty::IRUnknownProperty(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C256D40;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C256D40;
  result[1] = v2;
  return result;
}

void MIL::IRUnknownProperty::Make(MIL::IRUnknownProperty *this)
{
}

void sub_20F39BE9C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRUnknownProperty::IsVariadic(MIL::IRUnknownProperty *this)
{
  return **((unsigned __int8 **)this + 1);
}

void *MIL::IRValueType::IRValueType(void *this)
{
  *this = &unk_26C256D60;
  return this;
}

uint64_t MIL::IRValueType::TryAsTensorType(MIL::IRValueType *this)
{
  return 0;
}

uint64_t MIL::IRValueType::AsTensorType(MIL::IRValueType *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)this + 24))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t MIL::IRValueType::TryAsListType(MIL::IRValueType *this)
{
  return 0;
}

uint64_t MIL::IRValueType::AsListType(MIL::IRValueType *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)this + 32))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t MIL::IRValueType::TryAsTupleType(MIL::IRValueType *this)
{
  return 0;
}

uint64_t MIL::IRValueType::AsTupleType(MIL::IRValueType *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)this + 40))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

uint64_t MIL::IRValueType::TryAsDictionaryType(MIL::IRValueType *this)
{
  return 0;
}

uint64_t MIL::IRValueType::AsDictionaryType(MIL::IRValueType *this)
{
  uint64_t result = (*(uint64_t (**)(MIL::IRValueType *))(*(void *)this + 48))(this);
  if (!result)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void *MIL::IRValueType::TryCastAsMemoryLayoutType(void *this)
{
  if (this) {
  return this;
  }
}

void *MIL::IRValueType::AsMemoryLayoutType(MIL::IRValueType *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void *MIL::IRValueType::TryCastAsStateType(void *this)
{
  if (this) {
  return this;
  }
}

void *MIL::IRValueType::AsStateType(MIL::IRValueType *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void *MIL::IRTensorValueType::IRTensorValueType(void *this)
{
  *this = &unk_26C256DC0;
  return this;
}

void MIL::IRTensorValueType::ToString(MIL::IRTensorValueType *this)
{
}

void sub_20F39C330(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::Make()
{
}

void sub_20F39C424(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 24);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MEMORY[0x21056C700](v1, 0x10A1C40CDCF1773);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeWithShape()
{
  long long v0 = 0u;
  long long v1 = 0u;
  int v2 = 1065353216;
  MIL::IRTensorValueType::MakeWithShape();
}

{
  operator new();
}

void sub_20F39C4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20F39C55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::Make(MIL::IRConstantDimension *a1, uint64_t a2, MIL::MILContext ***a3)
{
  std::string __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  std::vector<std::string const*>::reserve(&__p, a3[1] - *a3);
  unsigned __int8 v5 = *a3;
  unint64_t v6 = a3[1];
  if (*a3 != v6)
  {
    do
    {
      uint64_t v7 = MIL::IRConstantDimension::Make(a1, *v5);
      uint64_t v8 = v7;
      unint64_t v9 = v20;
      if (v20 >= v21)
      {
        uint64_t v11 = ((char *)v20 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v11 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v12 = ((char *)v21 - (unsigned char *)__p) >> 2;
        if (v12 <= v11 + 1) {
          unint64_t v12 = v11 + 1;
        }
        if ((unint64_t)((char *)v21 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v21, v13);
        }
        else {
          uint64_t v14 = 0;
        }
        int v15 = (uint64_t *)&v14[8 * v11];
        *int v15 = v8;
        uint64_t v10 = v15 + 1;
        uint64_t v17 = (char *)__p;
        int v16 = (char *)v20;
        if (v20 != __p)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *--int v15 = v18;
          }
          while (v16 != v17);
          int v16 = (char *)__p;
        }
        std::string __p = v15;
        uint64_t v20 = v10;
        uint64_t v21 = (uint64_t *)&v14[8 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        uint64_t *v20 = v7;
        uint64_t v10 = v9 + 1;
      }
      uint64_t v20 = v10;
      ++v5;
    }
    while (v5 != v6);
  }
  MIL::IRTensorValueType::MakeWithShape();
}

void sub_20F39C6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeScalar()
{
}

void sub_20F39C758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeBFloat16Value()
{
}

void sub_20F39C7CC(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeBFloat16Value(uint64_t a1, float **a2)
{
  uint64_t v3 = (MIL::Bf16 *)std::vector<MIL::Bf16>::vector(&__p, a2[1] - *a2);
  unsigned __int8 v5 = *a2;
  uint64_t v4 = a2[1];
  if (v5 != v4)
  {
    unint64_t v6 = __p;
    do
    {
      uint64_t v3 = (MIL::Bf16 *)MIL::Bf16::FromFloat(v3, *v5);
      *v6++ = (_WORD)v3;
      ++v5;
    }
    while (v5 != v4);
  }
  MIL::IRTensorValueType::MakeBFloat16Value();
}

void sub_20F39C88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeFloat8E5M2Value(uint64_t a1, float **a2)
{
  uint64_t v3 = (MIL::Fp8E5M2 *)std::vector<MIL::Fp8E5M2>::vector(&__p, a2[1] - *a2);
  unsigned __int8 v5 = *a2;
  uint64_t v4 = a2[1];
  if (v5 != v4)
  {
    unint64_t v6 = __p;
    do
    {
      uint64_t v3 = (MIL::Fp8E5M2 *)MIL::Fp8E5M2::FromFloat(v3, *v5);
      *v6++ = (_BYTE)v3;
      ++v5;
    }
    while (v5 != v4);
  }
  MIL::IRTensorValueType::MakeFloat8E5M2Value();
}

void sub_20F39C948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeFloat8E5M2Value()
{
}

void sub_20F39C9C4(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat8E4M3FNValue(uint64_t a1, float **a2)
{
  uint64_t v3 = (MIL::Fp8E4M3FN *)std::vector<MIL::Fp8E4M3FN>::vector(&__p, a2[1] - *a2);
  unsigned __int8 v5 = *a2;
  uint64_t v4 = a2[1];
  if (v5 != v4)
  {
    unint64_t v6 = __p;
    do
    {
      uint64_t v3 = (MIL::Fp8E4M3FN *)MIL::Fp8E4M3FN::FromFloat(v3, *v5);
      *v6++ = (_BYTE)v3;
      ++v5;
    }
    while (v5 != v4);
  }
  MIL::IRTensorValueType::MakeFloat8E4M3FNValue();
}

void sub_20F39CA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeFloat8E4M3FNValue()
{
}

void sub_20F39CB00(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat16Value()
{
}

void sub_20F39CB80(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat16Value(uint64_t a1, float **a2)
{
  uint64_t v3 = (MIL::Fp16 *)std::vector<MIL::Fp16>::vector(&__p, a2[1] - *a2);
  unsigned __int8 v5 = *a2;
  uint64_t v4 = a2[1];
  if (v5 != v4)
  {
    unint64_t v6 = __p;
    do
    {
      uint64_t v3 = (MIL::Fp16 *)MIL::Fp16::FromFloat(v3, *v5);
      *v6++ = (_WORD)v3;
      ++v5;
    }
    while (v5 != v4);
  }
  MIL::IRTensorValueType::MakeFloat16Value();
}

void sub_20F39CC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeFloat32Value()
{
}

void sub_20F39CCBC(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat64Value()
{
}

void sub_20F39CD3C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeBoolValue()
{
}

void sub_20F39CDBC(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeBoolValue(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  size_t v2 = *(void *)(a2 + 8);
  memset(__p, 0, sizeof(__p));
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(__p, v3, 0, &v3[v2 >> 6], v2 & 0x3F, v2);
  operator new();
}

void sub_20F39CE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  MEMORY[0x21056C700](v11, 0xE1C40243CB742);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt4Value()
{
}

void sub_20F39CF10(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt6Value()
{
}

void sub_20F39CF90(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt4Value()
{
}

void sub_20F39D010(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt3Value()
{
}

void sub_20F39D090(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt2Value()
{
}

void sub_20F39D110(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt1Value()
{
}

void sub_20F39D190(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt8Value()
{
}

void sub_20F39D210(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt16Value()
{
}

void sub_20F39D290(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt32Value()
{
}

void sub_20F39D310(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt64Value()
{
}

void sub_20F39D390(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt8Value()
{
}

void sub_20F39D410(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt16Value()
{
}

void sub_20F39D490(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt32Value()
{
}

void sub_20F39D510(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt64Value()
{
}

void sub_20F39D590(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeStringValue()
{
}

void sub_20F39D610(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeBoolValueWithUnownedMemory()
{
}

void sub_20F39D6A4(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt8ValueWithUnownedMemory()
{
}

void sub_20F39D734(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt16ValueWithUnownedMemory()
{
}

void sub_20F39D7C4(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt32ValueWithUnownedMemory()
{
}

void sub_20F39D854(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt64ValueWithUnownedMemory()
{
}

void sub_20F39D8E4(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt4ValueWithUnownedMemory(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1) == 13) {
    operator new();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F39D9E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt6ValueWithUnownedMemory(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1) == 23) {
    operator new();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F39DB08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt4ValueWithUnownedMemory(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1) == 20) {
    operator new();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F39DC1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt3ValueWithUnownedMemory(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1) == 22) {
    operator new();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F39DD38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt2ValueWithUnownedMemory(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1) == 19) {
    operator new();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F39DE50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeUInt1ValueWithUnownedMemory(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 88))(a1) == 21) {
    operator new();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "Cannot initialize tensor value from value with wrong type.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F39DF68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt8ValueWithUnownedMemory()
{
}

void sub_20F39E008(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt16ValueWithUnownedMemory()
{
}

void sub_20F39E098(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt32ValueWithUnownedMemory()
{
}

void sub_20F39E128(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeInt64ValueWithUnownedMemory()
{
}

void sub_20F39E1B8(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeStringValueWithUnownedMemory()
{
}

void sub_20F39E248(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat8E5M2ValueWithUnownedMemory()
{
}

void sub_20F39E2D8(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat8E4M3FNValueWithUnownedMemory()
{
}

void sub_20F39E368(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeBFloat16ValueWithUnownedMemory()
{
}

void sub_20F39E3F8(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat16ValueWithUnownedMemory()
{
}

void sub_20F39E488(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat32ValueWithUnownedMemory()
{
}

void sub_20F39E518(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat64ValueWithUnownedMemory()
{
}

void sub_20F39E5A8(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C40243CB742);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorValueType::MakeValueFromFileProperties(std::string::size_type a1, const void *a2, void *a3)
{
  return MIL::IRTensorValueType::MakeValueFromFileProperties(a1, a2, a3, 0);
}

uint64_t MIL::IRTensorValueType::MakeValueFromFileProperties(std::string::size_type a1, const void *a2, void *a3, char a4)
{
  char v101 = a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, "type");
  uint64_t v7 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a3, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "File type property missing");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v7 + 5), &v100);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v100.__r_.__value_.__l.__size_ != 8)
    {
      if (v100.__r_.__value_.__l.__size_ == 14
        && *(void *)v100.__r_.__value_.__l.__data_ == 0x4C4259434147454CLL
        && *(void *)(v100.__r_.__value_.__r.__words[0] + 6) == 0x454C4946424F4C42)
      {
        goto LABEL_12;
      }
LABEL_34:
      uint64_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::operator+<char>();
      std::runtime_error::runtime_error(v17, &__p);
      __cxa_throw(v17, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    unint64_t v13 = (std::string *)v100.__r_.__value_.__r.__words[0];
LABEL_27:
    if (v13->__r_.__value_.__r.__words[0] == 0x454C4946424F4C42)
    {
      int v14 = (*(uint64_t (**)(std::string::size_type))(*(void *)a1 + 88))(a1);
      __p.__r_.__value_.__r.__words[0] = a1;
    }
    goto LABEL_34;
  }
  if (HIBYTE(v100.__r_.__value_.__r.__words[2]) == 8)
  {
    unint64_t v13 = &v100;
    goto LABEL_27;
  }
  if (HIBYTE(v100.__r_.__value_.__r.__words[2]) != 14) {
    goto LABEL_34;
  }
  if (v100.__r_.__value_.__r.__words[0] != 0x4C4259434147454CLL
    || *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 6) != 0x454C4946424F4C42)
  {
    goto LABEL_34;
  }
LABEL_12:
  uint64_t result = (*(uint64_t (**)(std::string::size_type))(*(void *)a1 + 88))(a1);
  switch((int)result)
  {
    case 3:
      MIL::IRDataTypeToString(3, &__p);
      std::string v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = __p.__r_.__value_.__l.__size_;
      }
      std::string v54 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, size + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v54 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v54, p_p, size);
      }
      strcpy((char *)v54 + size, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v52, &v103);
      __cxa_throw(v52, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 4:
      std::string::basic_string[abi:ne180100]<0>(&v103, "path");
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a3, (unsigned __int8 *)&v103);
      if (v10)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v10 + 5), &__p);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if (v11)
        {
          MIL::MILContextImpl::GetOrCreateLegacyStorageReader((uint64_t)v11, (unsigned __int8 *)&__p, (std::string::size_type *)&v102);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 5:
      std::string::basic_string[abi:ne180100]<0>(&v103, "path");
      int v15 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a3, (unsigned __int8 *)&v103);
      if (v15)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v15 + 5), &__p);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        if (v16)
        {
          MIL::MILContextImpl::GetOrCreateLegacyStorageReader((uint64_t)v16, (unsigned __int8 *)&__p, (std::string::size_type *)&v102);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 6:
      MIL::IRDataTypeToString(6, &__p);
      int v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v57 = __p.__r_.__value_.__l.__size_;
      }
      int v58 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v57 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v58 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v57)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &__p;
        }
        else {
          uint64_t v59 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v58, v59, v57);
      }
      strcpy((char *)v58 + v57, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v56, &v103);
      __cxa_throw(v56, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 7:
      MIL::IRDataTypeToString(7, &__p);
      int v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v61 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v61 = __p.__r_.__value_.__l.__size_;
      }
      int v62 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v61 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v62 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v61)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v63 = &__p;
        }
        else {
          v63 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v62, v63, v61);
      }
      strcpy((char *)v62 + v61, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v60, &v103);
      __cxa_throw(v60, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 8:
      __break(1u);
      return result;
    case 9:
      MIL::IRDataTypeToString(9, &__p);
      int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v65 = __p.__r_.__value_.__l.__size_;
      }
      int v66 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v65 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v66 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v65)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v67 = &__p;
        }
        else {
          uint64_t v67 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v66, v67, v65);
      }
      strcpy((char *)v66 + v65, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v64, &v103);
      __cxa_throw(v64, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 10:
      MIL::IRDataTypeToString(10, &__p);
      int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v69 = __p.__r_.__value_.__l.__size_;
      }
      int v70 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v69 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v70 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v69)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v71 = &__p;
        }
        else {
          uint64_t v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v70, v71, v69);
      }
      strcpy((char *)v70 + v69, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v68, &v103);
      __cxa_throw(v68, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 11:
      MIL::IRDataTypeToString(11, &__p);
      int v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v73 = __p.__r_.__value_.__l.__size_;
      }
      int v74 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v73 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v74 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v73)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v75 = &__p;
        }
        else {
          std::string v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v74, v75, v73);
      }
      strcpy((char *)v74 + v73, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v72, &v103);
      __cxa_throw(v72, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 12:
      MIL::IRDataTypeToString(12, &__p);
      int v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v77 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v77 = __p.__r_.__value_.__l.__size_;
      }
      int v78 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v77 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v78 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v77)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v79 = &__p;
        }
        else {
          std::string v79 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v78, v79, v77);
      }
      strcpy((char *)v78 + v77, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v76, &v103);
      __cxa_throw(v76, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 13:
      MIL::IRDataTypeToString(13, &__p);
      int v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v81 = __p.__r_.__value_.__l.__size_;
      }
      int v82 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v81 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v82 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v81)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v83 = &__p;
        }
        else {
          std::string v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v82, v83, v81);
      }
      strcpy((char *)v82 + v81, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v80, &v103);
      __cxa_throw(v80, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 14:
      MIL::IRDataTypeToString(14, &__p);
      int v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v85 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v85 = __p.__r_.__value_.__l.__size_;
      }
      int v86 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v85 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v86 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v85)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v87 = &__p;
        }
        else {
          std::string v87 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v86, v87, v85);
      }
      strcpy((char *)v86 + v85, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v84, &v103);
      __cxa_throw(v84, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 15:
      MIL::IRDataTypeToString(15, &__p);
      int v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v89 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v89 = __p.__r_.__value_.__l.__size_;
      }
      int v90 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v89 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v90 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v89)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v91 = &__p;
        }
        else {
          uint64_t v91 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v90, v91, v89);
      }
      strcpy((char *)v90 + v89, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v88, &v103);
      __cxa_throw(v88, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 16:
      MIL::IRDataTypeToString(16, &__p);
      int v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v93 = __p.__r_.__value_.__l.__size_;
      }
      std::string v94 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v93 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v94 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v93)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v95 = &__p;
        }
        else {
          uint64_t v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v94, v95, v93);
      }
      strcpy((char *)v94 + v93, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v92, &v103);
      __cxa_throw(v92, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 17:
      MIL::IRDataTypeToString(17, &__p);
      v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v97 = __p.__r_.__value_.__l.__size_;
      }
      std::string v98 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v97 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v98 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v97)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v99 = &__p;
        }
        else {
          std::string v99 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v98, v99, v97);
      }
      strcpy((char *)v98 + v97, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v96, &v103);
      __cxa_throw(v96, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 18:
      int v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v19, "cannot dispatch on type");
      __cxa_throw(v19, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 19:
      MIL::IRDataTypeToString(19, &__p);
      uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v21 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v22 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v21 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v22 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v21)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v23 = &__p;
        }
        else {
          BOOL v23 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v22, v23, v21);
      }
      strcpy((char *)v22 + v21, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v20, &v103);
      __cxa_throw(v20, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 20:
      MIL::IRDataTypeToString(20, &__p);
      BOOL v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v25 = __p.__r_.__value_.__l.__size_;
      }
      uint64x2_t v26 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v25 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64x2_t v26 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v25)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64x2_t v27 = &__p;
        }
        else {
          uint64x2_t v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v26, v27, v25);
      }
      strcpy((char *)v26 + v25, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v24, &v103);
      __cxa_throw(v24, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 21:
      MIL::IRDataTypeToString(21, &__p);
      uint64x2_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v29 = __p.__r_.__value_.__l.__size_;
      }
      uint64x2_t v30 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v29 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64x2_t v30 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v29)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v31 = &__p;
        }
        else {
          char v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v30, v31, v29);
      }
      strcpy((char *)v30 + v29, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v28, &v103);
      __cxa_throw(v28, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 22:
      MIL::IRDataTypeToString(22, &__p);
      char v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v33 = __p.__r_.__value_.__l.__size_;
      }
      long long v34 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v33 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        long long v34 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v33)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v35 = &__p;
        }
        else {
          unsigned __int8 v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v34, v35, v33);
      }
      strcpy((char *)v34 + v33, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v32, &v103);
      __cxa_throw(v32, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 23:
      MIL::IRDataTypeToString(23, &__p);
      uint64_t v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v37 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v37 = __p.__r_.__value_.__l.__size_;
      }
      std::string v38 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v37 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v38 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v37)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v39 = &__p;
        }
        else {
          std::string v39 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v38, v39, v37);
      }
      strcpy((char *)v38 + v37, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v36, &v103);
      __cxa_throw(v36, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 24:
      MIL::IRDataTypeToString(24, &__p);
      std::string v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v41 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v41 = __p.__r_.__value_.__l.__size_;
      }
      std::string v42 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v41 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v42 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v41)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v43 = &__p;
        }
        else {
          std::string v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v42, v43, v41);
      }
      strcpy((char *)v42 + v41, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v40, &v103);
      __cxa_throw(v40, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 25:
      MIL::IRDataTypeToString(25, &__p);
      std::string v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v45 = __p.__r_.__value_.__l.__size_;
      }
      int v46 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v45 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v46 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v45)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v47 = &__p;
        }
        else {
          unsigned __int8 v47 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v46, v47, v45);
      }
      strcpy((char *)v46 + v45, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v44, &v103);
      __cxa_throw(v44, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    default:
      MIL::IRDataTypeToString(2, &__p);
      int v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v49 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v49 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v50 = &v103;
      std::string::basic_string[abi:ne180100]((uint64_t)&v103, v49 + 58);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v50 = (std::string *)v103.__r_.__value_.__r.__words[0];
      }
      if (v49)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v51 = &__p;
        }
        else {
          std::string v51 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        memmove(v50, v51, v49);
      }
      strcpy((char *)v50 + v49, " is not a supported data type for legacy blob file values.");
      std::runtime_error::runtime_error(v48, &v103);
      __cxa_throw(v48, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
}

void sub_20F39FBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a23 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
    {
LABEL_6:
      if (a29 < 0) {
        operator delete(a24);
      }
      if (a14 < 0) {
        operator delete(a9);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void MIL::Util::DispatchToCppType<std::unique_ptr<MIL::IRTensorValue const>,anonymous namespace'::MakeValueHelper_Blob,MIL::IRTensorValueType const*,MIL::MILContext &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>,BOOL &>(int a1, uint64_t a2, const void *a3, void *a4)
{
  switch(a1)
  {
    case 3:
      MIL::IRDataTypeToString(3, &v63);
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t size = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t size = v63.__r_.__value_.__l.__size_;
      }
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (size)
      {
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v47 = &v63;
        }
        else {
          unsigned __int8 v47 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        memmove(p_p, v47, size);
      }
      strcpy((char *)p_p + size, " is not a supported data type for blob file values.");
      std::runtime_error::runtime_error(exception, &__p);
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 4:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v6)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v6 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v7)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v7, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 5:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      unint64_t v12 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v12)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v12 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v13)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v13, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 6:
      MIL::IRDataTypeToString(6, &v63);
      int v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v49 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v49 = v63.__r_.__value_.__l.__size_;
      }
      uint64_t v50 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v49 + 51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v49)
      {
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v51 = &v63;
        }
        else {
          std::string v51 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        memmove(v50, v51, v49);
      }
      strcpy((char *)v50 + v49, " is not a supported data type for blob file values.");
      std::runtime_error::runtime_error(v48, &__p);
      __cxa_throw(v48, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 7:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      int v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v14)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v14 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v15)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v15, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 8:
      __break(1u);
      break;
    case 9:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      uint64x2_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v26)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v26 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v27)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v27, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 10:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      uint64_t v18 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v18)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v18 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v19)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v19, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 11:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      int v16 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v16)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v16 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v17)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v17, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 12:
      MIL::IRDataTypeToString(12, &v63);
      std::string v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v53 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v53 = v63.__r_.__value_.__l.__size_;
      }
      std::string v54 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v53 + 51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v53)
      {
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v55 = &v63;
        }
        else {
          uint64_t v55 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        memmove(v54, v55, v53);
      }
      strcpy((char *)v54 + v53, " is not a supported data type for blob file values.");
      std::runtime_error::runtime_error(v52, &__p);
      __cxa_throw(v52, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 13:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      uint64x2_t v28 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v28)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v28 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v29)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v29, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 14:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      int v30 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v30)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v30 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v31)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v31, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 15:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      char v32 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v32)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v32 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v33)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v33, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 16:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      uint64_t v20 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v20)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v20 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v21)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v21, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 17:
      MIL::IRDataTypeToString(17, &v63);
      int v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v57 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v57 = v63.__r_.__value_.__l.__size_;
      }
      int v58 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v57 + 51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v57)
      {
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v59 = &v63;
        }
        else {
          uint64_t v59 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        memmove(v58, v59, v57);
      }
      strcpy((char *)v58 + v57, " is not a supported data type for blob file values.");
      std::runtime_error::runtime_error(v56, &__p);
      __cxa_throw(v56, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 18:
      break;
    case 19:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      uint64_t v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v22)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v22 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v23)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v23, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 20:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      uint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v8)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v8 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v9)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v9, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 21:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      std::string v38 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v38)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v38 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v39)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v39, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 22:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      uint64_t v10 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v10)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v10 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v11)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v11, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 23:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      BOOL v24 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v24)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v24 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v25)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v25, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 24:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      long long v34 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v34)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v34 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v35)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v35, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    case 25:
      std::string::basic_string[abi:ne180100]<0>(&__p, "path");
      uint64_t v36 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a4, (unsigned __int8 *)&__p);
      if (v36)
      {
        MIL::IRValue::GetScalar<std::string>(*((const void **)v36 + 5), &v63);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v37)
        {
          MIL::MILContextImpl::GetOrCreateStorageReader((uint64_t)v37, (unsigned __int8 *)&v63, (std::string::size_type *)&v61);
          operator new();
        }
        __cxa_bad_cast();
      }
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    default:
      MIL::IRDataTypeToString(2, &v63);
      std::string v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v41 = HIBYTE(v63.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v41 = v63.__r_.__value_.__l.__size_;
      }
      std::string v42 = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v41 + 51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string v42 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v41)
      {
        if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string v43 = &v63;
        }
        else {
          std::string v43 = (std::string *)v63.__r_.__value_.__r.__words[0];
        }
        memmove(v42, v43, v41);
      }
      strcpy((char *)v42 + v41, " is not a supported data type for blob file values.");
      std::runtime_error::runtime_error(v40, &__p);
      __cxa_throw(v40, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  int v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v60, "cannot dispatch on type");
  __cxa_throw(v60, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3A1980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeValueFromLegacyBlobFile()
{
  long long v0 = 0u;
  long long v1 = 0u;
  int v2 = 1065353216;
  MIL::IRTensorValueType::MakeScalar();
}

void sub_20F3A2274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
}

void MIL::IRTensorValueType::MakeStringValue(_anonymous_namespace_ *a1, const MIL::IRTensorValueType *a2)
{
  *(void *)&long long v9 = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v8 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  uint64_t v4 = 0;
  v5[0] = 0;
  uint64_t v3 = 0;
  v5[1] = &v3;
  char v6 = 0;
  uint64_t v3 = (std::string *)operator new(0x18uLL);
  uint64_t v4 = v3;
  v5[0] = v3 + 1;
  uint64_t v4 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)v5, (long long *)__p, &v9, v3);
  MIL::IRTensorValueType::MakeStringValue();
}

void sub_20F3A24A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRTensorValue const,std::default_delete<MIL::IRTensorValue const>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void MIL::IRTensorValueType::MakeUInt64Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  *(void *)operator new(8uLL) = a2;
  MIL::IRTensorValueType::MakeUInt64Value();
}

void sub_20F3A25A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeValueFromBlobFile()
{
}

{
  long long v0;
  long long v1;
  int v2;

  long long v0 = 0u;
  long long v1 = 0u;
  int v2 = 1065353216;
  MIL::IRTensorValueType::MakeScalar();
}

void sub_20F3A2878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
}

uint64_t MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t v7 = v3;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(a1, &v7, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  uint64_t result = v7;
  uint64_t v7 = 0;
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
  }
  return result;
}

void sub_20F3A2A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    (*(void (**)(uint64_t))(*(void *)a15 + 8))(a15);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::shared_ptr<MIL::AbstractConstExpr const>::shared_ptr[abi:ne180100]<MIL::AbstractConstExpr const,std::default_delete<MIL::AbstractConstExpr const>,void>((uint64_t *)&v7, a2);
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  uint64_t v9 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v8 = a1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v7 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
  }
}

void sub_20F3A2B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTensorValueType::MakeValueFromConstExprEvaluation(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v10 = a3;
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 88))(a1);
  uint64_t v9 = a1;
}

uint64_t MIL::Util::DispatchToCppType<std::unique_ptr<MIL::IRTensorValue const>,anonymous namespace'::MakeValueHelper_ConstExpr,MIL::IRTensorValueType const*,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>(uint64_t result, uint64_t *a2, long long *a3, uint64_t *a4, uint64_t a5)
{
  switch((int)result)
  {
    case 3:
      uint64_t v23 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v24 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v23;
      uint64_t v52 = v24;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<std::string>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string&>();
    case 4:
      uint64_t v25 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v26 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v25;
      uint64_t v52 = v26;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<MIL::Fp16>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 5:
      uint64_t v27 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v28 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v27;
      uint64_t v52 = v28;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<float>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 6:
      uint64_t v15 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v16 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v15;
      uint64_t v52 = v16;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<double>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 7:
      uint64_t v37 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v38 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v37;
      uint64_t v52 = v38;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<MIL::Bf16>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 8:
      __break(1u);
      return result;
    case 9:
      uint64_t v29 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v30 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v29;
      uint64_t v52 = v30;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<signed char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 10:
      uint64_t v17 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v18 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v17;
      uint64_t v52 = v18;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<short>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 11:
      uint64_t v31 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v32 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v31;
      uint64_t v52 = v32;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<int>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 12:
      uint64_t v7 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v8 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v7;
      uint64_t v52 = v8;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<long long>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 13:
      uint64_t v33 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v34 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v33;
      uint64_t v52 = v34;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 14:
      uint64_t v9 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v10 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v9;
      uint64_t v52 = v10;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 15:
      uint64_t v11 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v12 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v11;
      uint64_t v52 = v12;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned short>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 16:
      uint64_t v35 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v36 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v35;
      uint64_t v52 = v36;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned int>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 17:
      uint64_t v39 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v40 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v39;
      uint64_t v52 = v40;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned long long>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 18:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "cannot dispatch on type");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    case 19:
      uint64_t v19 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v20 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v19;
      uint64_t v52 = v20;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 20:
      uint64_t v41 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v42 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v41;
      uint64_t v52 = v42;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 21:
      uint64_t v13 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v14 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v13;
      uint64_t v52 = v14;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 22:
      uint64_t v45 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v46 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v45;
      uint64_t v52 = v46;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 23:
      uint64_t v43 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v44 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v43;
      uint64_t v52 = v44;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 24:
      uint64_t v47 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v48 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v47;
      uint64_t v52 = v48;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    case 25:
      uint64_t v21 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v22 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v21;
      uint64_t v52 = v22;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
    default:
      uint64_t v5 = *a2;
      long long v51 = *a3;
      *(void *)a3 = 0;
      *((void *)a3 + 1) = 0;
      uint64_t v6 = *a4;
      if (*(char *)(a5 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
      }
      else {
        std::string __p = *(std::string *)a5;
      }
      uint64_t v53 = v5;
      uint64_t v52 = v6;
      std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>();
  }
}

void sub_20F3A3F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeFloat8E5M2Value(_anonymous_namespace_ *a1, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeFloat8E5M2Value();
}

void sub_20F3A47F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *anonymous namespace'::ValidateScalarType(_anonymous_namespace_ *this, const MIL::IRTensorValueType *a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(_anonymous_namespace_ *, const MIL::IRTensorValueType *))(*(void *)this + 96))(this, a2);
  if (*result != result[1])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create scalar tensor value from non-scalar type.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3A4890(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTensorValueType::MakeFloat8E4M3FNValue(_anonymous_namespace_ *a1, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeFloat8E4M3FNValue();
}

void sub_20F3A4914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeBFloat16Value(_anonymous_namespace_ *a1, const MIL::IRTensorValueType *a2)
{
  __int16 v2 = (__int16)a2;
  *(_WORD *)operator new(2uLL) = v2;
  MIL::IRTensorValueType::MakeBFloat16Value();
}

void sub_20F3A49A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeFloat16Value(_anonymous_namespace_ *a1, const MIL::IRTensorValueType *a2)
{
  __int16 v2 = (__int16)a2;
  *(_WORD *)operator new(2uLL) = v2;
  MIL::IRTensorValueType::MakeFloat16Value();
}

void sub_20F3A4A2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeFloat32Value(MIL::IRTensorValueType *this, float a2, const MIL::IRTensorValueType *a3)
{
  *(float *)operator new(4uLL) = a2;
  MIL::IRTensorValueType::MakeFloat32Value();
}

void sub_20F3A4AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeFloat64Value(MIL::IRTensorValueType *this, double a2, const MIL::IRTensorValueType *a3)
{
  *(double *)operator new(8uLL) = a2;
  MIL::IRTensorValueType::MakeFloat64Value();
}

void sub_20F3A4B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeBoolValue(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeBoolValue();
}

void sub_20F3A4BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeInt4Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeInt4Value();
}

void sub_20F3A4C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeUInt6Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeUInt6Value();
}

void sub_20F3A4CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeUInt4Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeUInt4Value();
}

void sub_20F3A4D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeUInt3Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeUInt3Value();
}

void sub_20F3A4E00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeUInt2Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeUInt2Value();
}

void sub_20F3A4E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeUInt1Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeUInt1Value();
}

void sub_20F3A4F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeUInt8Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeUInt8Value();
}

void sub_20F3A4FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeUInt16Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  __int16 v2 = (__int16)a2;
  *(_WORD *)operator new(2uLL) = v2;
  MIL::IRTensorValueType::MakeUInt16Value();
}

void sub_20F3A5030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeUInt32Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  int v2 = (int)a2;
  *(_DWORD *)operator new(4uLL) = v2;
  MIL::IRTensorValueType::MakeUInt32Value();
}

void sub_20F3A50BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeInt8Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  char v2 = (char)a2;
  *(unsigned char *)operator new(1uLL) = v2;
  MIL::IRTensorValueType::MakeInt8Value();
}

void sub_20F3A5148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeInt16Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  __int16 v2 = (__int16)a2;
  *(_WORD *)operator new(2uLL) = v2;
  MIL::IRTensorValueType::MakeInt16Value();
}

void sub_20F3A51D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeInt32Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  int v2 = (int)a2;
  *(_DWORD *)operator new(4uLL) = v2;
  MIL::IRTensorValueType::MakeInt32Value();
}

void sub_20F3A5260(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRTensorValueType::MakeInt64Value(MIL::IRTensorValueType *this, const MIL::IRTensorValueType *a2)
{
  *(void *)operator new(8uLL) = a2;
  MIL::IRTensorValueType::MakeInt64Value();
}

void sub_20F3A52EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTensorValueType::GetAttribute(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 64))(a1);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Attribute does not exist.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  return result;
}

void sub_20F3A5384(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorValueType::GetNumElements(MIL::IRTensorValueType *this)
{
  long long v1 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)this + 96))(this);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = 1;
  while (v2 != v3)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)v2 + 16))();
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::range_error::range_error[abi:ne180100](exception, "Cannot determine number of elements in tensor with unknown dimension.");
      __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
    }
    v4 *= (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    v2 += 8;
  }
  return v4;
}

void sub_20F3A5488(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL MIL::IRTensorValueType::IsScalar(MIL::IRTensorValueType *this)
{
  long long v1 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)this + 96))(this);
  return *v1 == v1[1];
}

uint64_t MIL::IRTensorValueType::Rank(MIL::IRTensorValueType *this)
{
  if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)this + 104))(this)) {
    return -1;
  }
  uint64_t v2 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)this + 96))(this);
  return (uint64_t)(v2[1] - *v2) >> 3;
}

void *MIL::IRListValueType::IRListValueType(void *this)
{
  *this = &unk_26C256E40;
  return this;
}

uint64_t MIL::IRListValueType::Make(MIL::IRListValueType *this, MIL::MILContext *a2, const MIL::IRValueType *a3)
{
  uint64_t v5 = (const MIL::IRValueType *)MIL::IRConstantDimension::Make(this, a3);

  return MIL::IRListValueType::MakeWithDimension(this, a2, v5, v6);
}

void MIL::IRListValueType::Make(MIL::IRListValueType *this, const MIL::IRValueType *a2, const MIL::IRDimension *a3)
{
}

void MIL::IRListValueType::MakeValue()
{
}

void sub_20F3A56A0(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C406427F484);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRListValueType::GetNumElements(MIL::IRListValueType *this)
{
  uint64_t v1 = (*(uint64_t (**)(MIL::IRListValueType *))(*(void *)this + 72))(this);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "Cannot determine number of elements in list with unknown length.");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  uint64_t v3 = *(uint64_t (**)(void))(*(void *)v2 + 48);

  return v3();
}

void sub_20F3A5798(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRListValueType::ToString(MIL::IRListValueType *this)
{
}

void sub_20F3A586C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRTupleValueType::IRTupleValueType(void *this)
{
  *this = &unk_26C256EA0;
  return this;
}

void MIL::IRTupleValueType::Make()
{
}

void MIL::IRTupleValueType::MakeValue()
{
}

void sub_20F3A59AC(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0xE1C406427F484);
  _Unwind_Resume(a1);
}

void MIL::IRTupleValueType::GetNumElements(MIL::IRTupleValueType *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, "Cannot determine number of elements in a tuple.");
  __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
}

void sub_20F3A5A1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTupleValueType::ToString(MIL::IRTupleValueType *this)
{
}

void sub_20F3A5AF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRValueMapHasher::operator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(**(void **)a2 + 24))();
}

uint64_t MIL::IRValueMapEq::operator()(uint64_t a1, void *a2, void *a3)
{
  return (*(unsigned int (**)(void, void))(*(void *)*a2 + 16))(*a2, *a3);
}

void *MIL::IRDictionaryValueType::IRDictionaryValueType(void *this)
{
  *this = &unk_26C256EF8;
  return this;
}

void MIL::IRDictionaryValueType::Make(MIL::IRDictionaryValueType *this, const MIL::IRValueType *a2, const MIL::IRValueType *a3)
{
}

void MIL::IRDictionaryValueType::GetNumElements(MIL::IRDictionaryValueType *this)
{
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::range_error::range_error[abi:ne180100](exception, "Cannot determine number of elements in a dictionary.");
  __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
}

void sub_20F3A5CAC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRDictionaryValueType::ToString(MIL::IRDictionaryValueType *this)
{
}

void sub_20F3A5D80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRDictionaryValueType::MakeValue()
{
}

void sub_20F3A5E2C(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10E1C402C2AC9EFLL);
  _Unwind_Resume(a1);
}

void MIL::IRNamedValueType::~IRNamedValueType(void **this)
{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

{
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

__n128 MIL::IRNamedValueType::IRNamedValueType(__n128 *a1, __n128 *a2, unint64_t a3)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u64[1] = a3;
  return result;
}

{
  __n128 result;

  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  a1[1].n128_u64[1] = a3;
  return result;
}

void MIL::IRNamedValueType::Make()
{
}

BOOL MIL::IRNamedValueType::Equals(MIL::IRNamedValueType *this, const MIL::IRNamedValueType *a2)
{
  uint64_t v2 = *((unsigned __int8 *)this + 23);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *((unsigned __int8 *)this + 23);
  }
  else {
    uint64_t v3 = *((void *)this + 1);
  }
  uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = a2;
  if (v5 < 0) {
    a2 = *(const MIL::IRNamedValueType **)a2;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)this, a2, *((void *)this + 1))) {
      return *((void *)this + 3) == *((void *)v6 + 3);
    }
    return 0;
  }
  if (*((unsigned char *)this + 23))
  {
    for (unint64_t i = this; *(unsigned __int8 *)i == *(unsigned __int8 *)a2; unint64_t i = (MIL::IRNamedValueType *)((char *)i + 1))
    {
      a2 = (const MIL::IRNamedValueType *)((char *)a2 + 1);
      if (!--v2) {
        return *((void *)this + 3) == *((void *)v6 + 3);
      }
    }
    return 0;
  }
  return *((void *)this + 3) == *((void *)v6 + 3);
}

uint64_t MIL::IRNamedValueType::GetType(MIL::IRNamedValueType *this)
{
  return *((void *)this + 3);
}

__n128 MIL::IRNamedValueType::SetName(uint64_t a1, __n128 *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  __n128 result = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  *(__n128 *)a1 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

uint64_t MIL::IRNamedValueType::SetType(uint64_t this, const MIL::IRValueType *a2)
{
  *(void *)(this + 24) = a2;
  return this;
}

void MIL::IRNamedValueType::ToString(MIL::IRNamedValueType *this)
{
}

void sub_20F3A6184(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::IRMemoryLayoutValueType::IRMemoryLayoutValueType(void *this)
{
  *this = &unk_26C256F58;
  return this;
}

void *MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(void *this)
{
  if (this) {
  return this;
  }
}

void *MIL::IRMemoryLayoutValueType::AsTensorBufferType(MIL::IRMemoryLayoutValueType *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void *MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(void *this)
{
  if (this) {
  return this;
  }
}

void *MIL::IRMemoryLayoutValueType::AsPixelBufferType(MIL::IRMemoryLayoutValueType *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void *MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(void *this)
{
  if (this) {
  return this;
  }
}

void *MIL::IRMemoryLayoutValueType::AsCircularBufferType(MIL::IRMemoryLayoutValueType *this)
{
  if (!this
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v3 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v3, MEMORY[0x263F8C210], MEMORY[0x263F8C168]);
  }
  return result;
}

void MIL::IRTensorBufferValueType::~IRTensorBufferValueType(MIL::IRTensorBufferValueType *this)
{
  *(void *)this = &unk_26C256FC0;
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRTensorBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  void *v2;
  void *v3;

  *(void *)this = &unk_26C256FC0;
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRTensorBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_26C256FC0;
  uint64_t v3 = (void *)*((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRTensorBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }

  JUMPOUT(0x21056C700);
}

void *MIL::IRTensorBufferValueType::IRTensorBufferValueType(void *this)
{
  *this = &unk_26C256FC0;
  this[1] = 0;
  return this;
}

{
  *this = &unk_26C256FC0;
  this[1] = 0;
  return this;
}

void *MIL::IRTensorBufferValueType::IRTensorBufferValueType(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C256FC0;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  void *result = &unk_26C256FC0;
  result[1] = v2;
  return result;
}

uint64_t MIL::IRTensorBufferValueType::MakeUsingDefaultStrides(MIL::IRConstantDimension *a1, int a2, uint64_t *a3)
{
  size_t v6 = (a3[1] - *a3) >> 3;
  MIL::MakeDefaultStrides(a3, (uint64_t *)v13);
  char v11 = 1;
  std::vector<unsigned char>::vector(__p, v6, &v11);
  memset(v9, 0, sizeof(v9));
  int v10 = 1065353216;
  uint64_t v7 = MIL::IRTensorBufferValueType::Make(a1, a2, a3, (uint64_t *)v13, (uint64_t *)__p, (uint64_t *)v9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v9);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  return v7;
}

void sub_20F3A66C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(void *)(v16 - 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::Make(MIL::IRConstantDimension *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  std::vector<MIL::IRDimension const*>::vector(v25, (a3[1] - *a3) >> 3);
  std::vector<MIL::IRProperty const*>::vector(v24, (a4[1] - *a4) >> 3);
  std::vector<MIL::IRProperty const*>::vector(__p, a5[1] - *a5);
  uint64_t v12 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = MIL::IRConstantDimension::Make(a1, *(MIL::MILContext **)(v12 + 8 * v13));
      *((void *)v25[0] + v13++) = v14;
      uint64_t v12 = *a3;
    }
    while (v13 < (a3[1] - *a3) >> 3);
  }
  uint64_t v15 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v16 = 0;
    do
    {
      Int64uint64_t Scalar = MIL::IRConstantProperty::MakeInt64Scalar(a1, *(MIL::MILContext **)(v15 + 8 * v16));
      *((void *)v24[0] + v16++) = Int64Scalar;
      uint64_t v15 = *a4;
    }
    while (v16 < (a4[1] - *a4) >> 3);
  }
  uint64_t v18 = *a5;
  if (a5[1] != *a5)
  {
    unint64_t v19 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)*(unsigned __int8 *)(v18 + v19));
      *((void *)__p[0] + v19++) = UInt8Scalar;
      uint64_t v18 = *a5;
    }
    while (v19 < a5[1] - *a5);
  }
  uint64_t v21 = MIL::IRTensorBufferValueType::MakeWithShape(a1, a2, (uint64_t)v25, (uint64_t)v24, (uint64_t)__p, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return v21;
}

void sub_20F3A688C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTensorBufferValueType::MakeUsingDefaultStrides(MIL::IRConstantDimension *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  MIL::MakeDefaultStrides(a3, a4, (uint64_t *)__p);
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  uint64_t v8 = MIL::IRTensorBufferValueType::Make(a1, a2, a3, (uint64_t *)__p, a4, (uint64_t *)v10);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v8;
}

void sub_20F3A697C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::Make(MIL::IRConstantDimension *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  size_t v8 = (a3[1] - *a3) >> 3;
  char v13 = 1;
  std::vector<unsigned char>::vector(__p, v8, &v13);
  memset(v11, 0, sizeof(v11));
  int v12 = 1065353216;
  uint64_t v9 = MIL::IRTensorBufferValueType::Make(a1, a2, a3, a4, (uint64_t *)__p, (uint64_t *)v11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_20F3A6A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  int v12 = (char *)operator new(0x30uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)int v12 = &unk_26C2575D0;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a3;
  *((void *)v12 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v21 = v12 + 24;
  uint64_t v22 = (std::__shared_weak_count *)v12;
  char v13 = (char *)operator new(0x30uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)char v13 = &unk_26C257620;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)a4;
  *((void *)v13 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unint64_t v19 = v13 + 24;
  uint64_t v20 = (std::__shared_weak_count *)v13;
  uint64_t v14 = (char *)operator new(0x30uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_26C257620;
  *(_OWORD *)(v14 + 24) = *(_OWORD *)a5;
  *((void *)v14 + 5) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v17 = v14 + 24;
  uint64_t v18 = (std::__shared_weak_count *)v14;
  uint64_t v15 = MIL::IRTensorBufferValueType::MakeWithShape(a1, a2, (uint64_t *)&v21, (uint64_t *)&v19, (uint64_t *)&v17, a6);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return v15;
}

void sub_20F3A6BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithRowAlignment(MIL::IRConstantDimension *a1, int a2, uint64_t *a3, MIL::MILContext *a4)
{
  size_t v8 = (a3[1] - *a3) >> 3;
  char v13 = 1;
  std::vector<unsigned char>::vector(__p, v8, &v13);
  memset(v11, 0, sizeof(v11));
  int v12 = 1065353216;
  uint64_t v9 = MIL::IRTensorBufferValueType::MakeWithRowAlignment(a1, a2, a3, a4, (uint64_t *)__p, (uint64_t *)v11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_20F3A6CD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithRowAlignment(MIL::IRConstantDimension *a1, int a2, uint64_t *a3, MIL::MILContext *a4, uint64_t *a5, uint64_t *a6)
{
  std::vector<MIL::IRDimension const*>::vector(v22, (a3[1] - *a3) >> 3);
  std::vector<MIL::IRProperty const*>::vector(__p, a5[1] - *a5);
  uint64_t v12 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = MIL::IRConstantDimension::Make(a1, *(MIL::MILContext **)(v12 + 8 * v13));
      *((void *)v22[0] + v13++) = v14;
      uint64_t v12 = *a3;
    }
    while (v13 < (a3[1] - *a3) >> 3);
  }
  uint64_t v15 = *a5;
  if (a5[1] != *a5)
  {
    unint64_t v16 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)*(unsigned __int8 *)(v15 + v16));
      *((void *)__p[0] + v16++) = UInt8Scalar;
      uint64_t v15 = *a5;
    }
    while (v16 < a5[1] - *a5);
  }
  UInt64uint64_t Scalar = MIL::IRConstantProperty::MakeUInt64Scalar(a1, a4);
  uint64_t v19 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, a2, (uint64_t)v22, UInt64Scalar, (uint64_t)__p, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v22[0])
  {
    v22[1] = v22[0];
    operator delete(v22[0]);
  }
  return v19;
}

void sub_20F3A6E34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v12 = (char *)operator new(0x30uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_26C2575D0;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a3;
  *((void *)v12 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v18 = v12 + 24;
  uint64_t v19 = (std::__shared_weak_count *)v12;
  unint64_t v13 = (char *)operator new(0x30uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)unint64_t v13 = &unk_26C257620;
  *(_OWORD *)(v13 + 24) = *(_OWORD *)a5;
  *((void *)v13 + 5) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a5 + 16) = 0;
  unint64_t v16 = v13 + 24;
  uint64_t v17 = (std::__shared_weak_count *)v13;
  uint64_t v14 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, a2, (uint64_t *)&v18, a4, (uint64_t *)&v16, a6);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  return v14;
}

void sub_20F3A6F94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShapeUsingDefaultStrides(MIL::IRConstantProperty *a1, int a2, uint64_t *a3)
{
  std::vector<MIL::IRProperty const*>::vector(v13, (a3[1] - *a3) >> 3);
  if (a3[1] != *a3)
  {
    unint64_t v6 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)1);
      *((void *)v13[0] + v6++) = UInt8Scalar;
    }
    while (v6 < (a3[1] - *a3) >> 3);
  }
  MIL::MakeDefaultStrides(a1, a3, __p);
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  uint64_t v8 = MIL::IRTensorBufferValueType::MakeWithShape(a1, a2, (uint64_t)a3, (uint64_t)__p, (uint64_t)v13, (uint64_t *)v10);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  return v8;
}

void sub_20F3A70B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v18 = *(void **)(v16 - 56);
  if (v18)
  {
    *(void *)(v16 - 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v18;
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShapeUsingDefaultStrides(MIL::IRConstantProperty *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  MIL::MakeDefaultStrides(a1, a3, a4, __p);
  memset(v10, 0, sizeof(v10));
  int v11 = 1065353216;
  uint64_t v8 = MIL::IRTensorBufferValueType::MakeWithShape(a1, a2, (uint64_t)a3, (uint64_t)__p, (uint64_t)a4, (uint64_t *)v10);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v10);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v8;
}

void sub_20F3A718C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShape(MIL::IRConstantProperty *a1, int a2, void *a3, uint64_t a4)
{
  std::vector<MIL::IRProperty const*>::vector(__p, (uint64_t)(a3[1] - *a3) >> 3);
  if (a3[1] != *a3)
  {
    unint64_t v8 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)1);
      *((void *)__p[0] + v8++) = UInt8Scalar;
    }
    while (v8 < (uint64_t)(a3[1] - *a3) >> 3);
  }
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  uint64_t v10 = MIL::IRTensorBufferValueType::MakeWithShape(a1, a2, (uint64_t)a3, a4, (uint64_t)__p, (uint64_t *)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_20F3A728C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(MIL::IRConstantProperty *a1, int a2, void *a3, uint64_t a4)
{
  std::vector<MIL::IRProperty const*>::vector(__p, (uint64_t)(a3[1] - *a3) >> 3);
  if (a3[1] != *a3)
  {
    unint64_t v8 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)1);
      *((void *)__p[0] + v8++) = UInt8Scalar;
    }
    while (v8 < (uint64_t)(a3[1] - *a3) >> 3);
  }
  memset(v12, 0, sizeof(v12));
  int v13 = 1065353216;
  uint64_t v10 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, a2, (uint64_t)a3, a4, (uint64_t)__p, (uint64_t *)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v12);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_20F3A7394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShapeUsingDefaultStrides(MIL::IRConstantProperty *a1, int a2, uint64_t **a3)
{
  std::vector<MIL::IRProperty const*>::vector(&v24, ((*a3)[1] - **a3) >> 3);
  unint64_t v6 = *a3;
  if ((*a3)[1] != **a3)
  {
    unint64_t v7 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)1);
      *(void *)(v24 + 8 * v7++) = UInt8Scalar;
      unint64_t v6 = *a3;
    }
    while (v7 < ((*a3)[1] - **a3) >> 3);
  }
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  uint64_t v22 = v6;
  uint64_t v23 = v9;
  if (v9)
  {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v6 = *a3;
  }
  MIL::MakeDefaultStrides(a1, v6, __p);
  uint64_t v10 = (char *)operator new(0x30uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C257620;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)__p;
  *((void *)v10 + 5) = v19;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v19 = 0;
  uint64_t v20 = v10 + 24;
  uint64_t v21 = (std::__shared_weak_count *)v10;
  int v11 = (char *)operator new(0x30uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)int v11 = &unk_26C257620;
  *(_OWORD *)(v11 + 24) = v24;
  *((void *)v11 + 5) = v25;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  uint64_t v16 = v11 + 24;
  uint64_t v17 = (std::__shared_weak_count *)v11;
  memset(v14, 0, sizeof(v14));
  int v15 = 1065353216;
  uint64_t v12 = MIL::IRTensorBufferValueType::MakeWithShape(a1, a2, (uint64_t *)&v22, (uint64_t *)&v20, (uint64_t *)&v16, (uint64_t *)v14);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v14);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if ((void)v24)
  {
    *((void *)&v24 + 1) = v24;
    operator delete((void *)v24);
  }
  return v12;
}

void sub_20F3A758C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  long long v24 = *(std::__shared_weak_count **)(v22 - 72);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  uint64_t v25 = *(void **)(v22 - 64);
  if (v25)
  {
    *(void *)(v22 - 56) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShapeUsingDefaultStrides(MIL::IRConstantProperty *a1, int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = *(uint64_t **)a3;
  unint64_t v8 = *(std::__shared_weak_count **)(a3 + 8);
  uint64_t v21 = *(uint64_t **)a3;
  uint64_t v22 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    unint64_t v7 = *(uint64_t **)a3;
  }
  MIL::MakeDefaultStrides(a1, v7, *(uint64_t **)a4, __p);
  uint64_t v9 = (char *)operator new(0x30uLL);
  *((void *)v9 + 1) = 0;
  *((void *)v9 + 2) = 0;
  *(_OWORD *)(v9 + 24) = *(_OWORD *)__p;
  *(void *)uint64_t v9 = &unk_26C257620;
  *((void *)v9 + 5) = v18;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v18 = 0;
  uint64_t v19 = v9 + 24;
  uint64_t v20 = (std::__shared_weak_count *)v9;
  uint64_t v10 = *(std::__shared_weak_count **)(a4 + 8);
  int v15 = *(uint64_t **)a4;
  uint64_t v16 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  memset(v13, 0, sizeof(v13));
  int v14 = 1065353216;
  uint64_t v11 = MIL::IRTensorBufferValueType::MakeWithShape(a1, a2, (uint64_t *)&v21, (uint64_t *)&v19, (uint64_t *)&v15, (uint64_t *)v13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v13);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  return v11;
}

void sub_20F3A773C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 56);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v18 - 40);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShape(MIL::IRConstantProperty *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  std::vector<MIL::IRProperty const*>::vector(&v24, (uint64_t)(*(void *)(*a3 + 8) - *(void *)*a3) >> 3);
  uint64_t v8 = *a3;
  if (*(void *)(*a3 + 8) != *(void *)*a3)
  {
    unint64_t v9 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)1);
      *(void *)(v24 + 8 * v9++) = UInt8Scalar;
      uint64_t v8 = *a3;
    }
    while (v9 < (uint64_t)(*(void *)(*a3 + 8) - *(void *)*a3) >> 3);
  }
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v22 = v8;
  uint64_t v23 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v20 = *a4;
  uint64_t v21 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v13 = (char *)operator new(0x30uLL);
  *((void *)v13 + 1) = 0;
  *((void *)v13 + 2) = 0;
  *(void *)int v13 = &unk_26C257620;
  *(_OWORD *)(v13 + 24) = v24;
  *((void *)v13 + 5) = v25;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  uint64_t v18 = v13 + 24;
  uint64_t v19 = (std::__shared_weak_count *)v13;
  memset(v16, 0, sizeof(v16));
  int v17 = 1065353216;
  uint64_t v14 = MIL::IRTensorBufferValueType::MakeWithShape(a1, a2, &v22, &v20, (uint64_t *)&v18, (uint64_t *)v16);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v16);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if ((void)v24)
  {
    *((void *)&v24 + 1) = v24;
    operator delete((void *)v24);
  }
  return v14;
}

void sub_20F3A7918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  uint64_t v22 = *(void **)(v20 - 80);
  if (v22)
  {
    *(void *)(v20 - 72) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(MIL::IRConstantProperty *a1, int a2, uint64_t *a3, uint64_t a4)
{
  std::vector<MIL::IRProperty const*>::vector(__p, (uint64_t)(*(void *)(*a3 + 8) - *(void *)*a3) >> 3);
  uint64_t v8 = *a3;
  if (*(void *)(*a3 + 8) != *(void *)*a3)
  {
    unint64_t v9 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)1);
      *((void *)__p[0] + v9++) = UInt8Scalar;
      uint64_t v8 = *a3;
    }
    while (v9 < (uint64_t)(*(void *)(*a3 + 8) - *(void *)*a3) >> 3);
  }
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v19 = v8;
  uint64_t v20 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (char *)operator new(0x30uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_26C257620;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)__p;
  *((void *)v12 + 5) = v22;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v22 = 0;
  int v17 = v12 + 24;
  uint64_t v18 = (std::__shared_weak_count *)v12;
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  uint64_t v13 = MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(a1, a2, &v19, a4, (uint64_t *)&v17, (uint64_t *)v15);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v15);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v13;
}

void sub_20F3A7AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void MIL::IRTensorBufferValueType::Make()
{
}

{
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,MIL::IRProperty const*&,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
}

void sub_20F3A7BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<MIL::IRTensorBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

void sub_20F3A7CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v12, v11);
  MEMORY[0x21056C700](v10, 0x10E0C404C31E7C6);
  _Unwind_Resume(a1);
}

void sub_20F3A7D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<MIL::IRTensorBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,MIL::IRProperty const*&,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

void sub_20F3A7EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v12, v11);
  MEMORY[0x21056C700](v10, 0x10E0C404C31E7C6);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeScalar(MIL::IRConstantProperty *a1, int a2)
{
  std::string __p = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  uint64_t v2 = MIL::IRTensorBufferValueType::MakeWithShapeUsingDefaultStrides(a1, a2, (uint64_t *)&__p);
  if (__p)
  {
    int v5 = __p;
    operator delete(__p);
  }
  return v2;
}

void sub_20F3A7F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTensorBufferValueType::GetDataType(MIL::IRTensorBufferValueType *this)
{
  return **((unsigned int **)this + 1);
}

uint64_t MIL::IRTensorBufferValueType::GetShape(MIL::IRTensorBufferValueType *this)
{
  return *(void *)(*((void *)this + 1) + 8);
}

uint64_t MIL::IRTensorBufferValueType::GetStrides(MIL::IRTensorBufferValueTypeImpl **this)
{
  return MIL::IRTensorBufferValueTypeImpl::GetStrides(this[1]);
}

uint64_t MIL::IRTensorBufferValueTypeImpl::GetStrides(MIL::IRTensorBufferValueTypeImpl *this)
{
  uint64_t result = *((void *)this + 4);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Strides is not set for this tensor_buffer.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3A7FDC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::TryGetStrides(MIL::IRTensorBufferValueType *this)
{
  return *(void *)(*((void *)this + 1) + 32);
}

uint64_t MIL::IRTensorBufferValueType::GetRowAlignmentInBytes(MIL::IRTensorBufferValueTypeImpl **this)
{
  return MIL::IRTensorBufferValueTypeImpl::GetRowAlignmentInBytes(this[1]);
}

uint64_t MIL::IRTensorBufferValueTypeImpl::GetRowAlignmentInBytes(MIL::IRTensorBufferValueTypeImpl *this)
{
  uint64_t result = *((void *)this + 6);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Row-alignment is not set for this tensor_buffer.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3A8060(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(MIL::IRTensorBufferValueType *this)
{
  return *(void *)(*((void *)this + 1) + 48);
}

uint64_t MIL::IRTensorBufferValueType::GetInterleaveFactors(MIL::IRTensorBufferValueType *this)
{
  return *(void *)(*((void *)this + 1) + 56);
}

uint64_t MIL::IRTensorBufferValueType::GetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::IRTensorBufferValueTypeImpl::GetAttribute(*(void *)(a1 + 8), a2);
}

uint64_t MIL::IRTensorBufferValueTypeImpl::GetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = MIL::IRTensorBufferValueTypeImpl::TryGetAttribute(a1, a2);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Attribute does not exist.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  return result;
}

void sub_20F3A80F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::TryGetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::IRTensorBufferValueTypeImpl::TryGetAttribute(*(void *)(a1 + 8), a2);
}

uint64_t MIL::IRTensorBufferValueTypeImpl::TryGetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 72), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)v2 + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

unsigned __int8 *MIL::IRTensorBufferValueType::TryGetAttributeSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 72), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t MIL::IRTensorBufferValueType::GetAttributes(MIL::IRTensorBufferValueType *this)
{
  return *((void *)this + 1) + 72;
}

BOOL MIL::IRTensorBufferValueType::IsScalar(MIL::IRTensorBufferValueType *this)
{
  return **(void **)(*((void *)this + 1) + 8) == *(void *)(*(void *)(*((void *)this + 1) + 8) + 8);
}

uint64_t MIL::IRTensorBufferValueType::GetRank(MIL::IRTensorBufferValueType *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(unsigned char *)(v1 + 24)) {
    return (uint64_t)(*(void *)(*(void *)(v1 + 8) + 8) - **(void **)(v1 + 8)) >> 3;
  }
  else {
    return -1;
  }
}

uint64_t MIL::IRTensorBufferValueType::IsFixedRank(MIL::IRTensorBufferValueType *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 24);
}

uint64_t MIL::IRTensorBufferValueType::GetNumElements(MIL::IRTensorBufferValueType *this)
{
  uint64_t v1 = *(uint64_t **)(*((void *)this + 1) + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = 1;
  while (v2 != v3)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)v2 + 16))();
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::range_error::range_error[abi:ne180100](exception, "Cannot determine number of elements in memory layout with unknown dimension.");
      __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
    }
    v4 *= (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    v2 += 8;
  }
  return v4;
}

void sub_20F3A82D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTensorBufferValueType::ToString(MIL::IRTensorBufferValueType *this)
{
}

void sub_20F3A83A8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRPixelBufferValueType::~IRPixelBufferValueType(MIL::IRPixelBufferValueType *this)
{
  *(void *)this = &unk_26C257010;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRPixelBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26C257010;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRPixelBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26C257010;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRPixelBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }

  JUMPOUT(0x21056C700);
}

void *MIL::IRPixelBufferValueType::IRPixelBufferValueType(void *this)
{
  *this = &unk_26C257010;
  this[1] = 0;
  return this;
}

{
  *this = &unk_26C257010;
  this[1] = 0;
  return this;
}

void *MIL::IRPixelBufferValueType::IRPixelBufferValueType(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  unsigned __int8 *result = &unk_26C257010;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  unsigned __int8 *result = &unk_26C257010;
  result[1] = v2;
  return result;
}

uint64_t MIL::IRPixelBufferValueType::Make(MIL::IRConstantDimension *a1, int a2, uint64_t *a3)
{
  std::vector<MIL::IRDimension const*>::vector(__p, (a3[1] - *a3) >> 3);
  uint64_t v6 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = MIL::IRConstantDimension::Make(a1, *(MIL::MILContext **)(v6 + 8 * v7));
      *((void *)__p[0] + v7++) = v8;
      uint64_t v6 = *a3;
    }
    while (v7 < (a3[1] - *a3) >> 3);
  }
  uint64_t v9 = MIL::IRPixelBufferValueType::MakeWithShape(a1, a2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v9;
}

void sub_20F3A8644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t a3)
{
  uint64_t v6 = (char *)operator new(0x30uLL);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = &unk_26C2575D0;
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((void *)v6 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  v9[0] = (uint64_t)(v6 + 24);
  v9[1] = (uint64_t)v6;
  uint64_t v7 = MIL::IRPixelBufferValueType::MakeWithShape(a1, a2, v9);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v6);
  return v7;
}

void sub_20F3A8708(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::Make(MIL::IRConstantDimension *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::vector<MIL::IRDimension const*>::vector(v19, (a3[1] - *a3) >> 3);
  std::vector<MIL::IRProperty const*>::vector(__p, (a4[1] - *a4) >> 3);
  uint64_t v10 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = MIL::IRConstantDimension::Make(a1, *(MIL::MILContext **)(v10 + 8 * v11));
      *((void *)v19[0] + v11++) = v12;
      uint64_t v10 = *a3;
    }
    while (v11 < (a3[1] - *a3) >> 3);
  }
  uint64_t v13 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v14 = 0;
    do
    {
      Int64uint64_t Scalar = MIL::IRConstantProperty::MakeInt64Scalar(a1, *(MIL::MILContext **)(v13 + 8 * v14));
      *((void *)__p[0] + v14++) = Int64Scalar;
      uint64_t v13 = *a4;
    }
    while (v14 < (a4[1] - *a4) >> 3);
  }
  uint64_t v16 = MIL::IRPixelBufferValueType::MakeWithShape(a1, a2, (uint64_t)v19, (uint64_t)__p, a5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v19[0])
  {
    v19[1] = v19[0];
    operator delete(v19[0]);
  }
  return v16;
}

void sub_20F3A883C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = (char *)operator new(0x30uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C2575D0;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *((void *)v10 + 5) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v18 = v10 + 24;
  uint64_t v19 = (std::__shared_weak_count *)v10;
  unint64_t v11 = (char *)operator new(0x30uLL);
  *((void *)v11 + 1) = 0;
  *((void *)v11 + 2) = 0;
  *(void *)unint64_t v11 = &unk_26C257620;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)a4;
  *((void *)v11 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v16 = v11 + 24;
  int v17 = (std::__shared_weak_count *)v11;
  uint64_t v14 = 0;
  int v15 = 0;
  uint64_t v12 = MIL::IRPixelBufferValueType::MakeWithShape(a1, a2, (uint64_t *)&v18, (uint64_t *)&v16, &v14, a5);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  return v12;
}

void sub_20F3A89A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithBytesPerRowNumSlices(MIL::IRConstantDimension *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  std::vector<MIL::IRDimension const*>::vector(v25, (a3[1] - *a3) >> 3);
  std::vector<MIL::IRProperty const*>::vector(v24, (a4[1] - *a4) >> 3);
  uint64_t v12 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v13 = 0;
    do
    {
      uint64_t v14 = MIL::IRConstantDimension::Make(a1, *(MIL::MILContext **)(v12 + 8 * v13));
      *((void *)v25[0] + v13++) = v14;
      uint64_t v12 = *a3;
    }
    while (v13 < (a3[1] - *a3) >> 3);
  }
  uint64_t v15 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v16 = 0;
    do
    {
      Int64uint64_t Scalar = MIL::IRConstantProperty::MakeInt64Scalar(a1, *(MIL::MILContext **)(v15 + 8 * v16));
      *((void *)v24[0] + v16++) = Int64Scalar;
      uint64_t v15 = *a4;
    }
    while (v16 < (a4[1] - *a4) >> 3);
  }
  std::vector<MIL::IRProperty const*>::vector(__p, (a5[1] - *a5) >> 3);
  uint64_t v18 = *a5;
  if (a5[1] != *a5)
  {
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = MIL::IRConstantProperty::MakeInt64Scalar(a1, *(MIL::MILContext **)(v18 + 8 * v19));
      *((void *)__p[0] + v19++) = v20;
      uint64_t v18 = *a5;
    }
    while (v19 < (a5[1] - *a5) >> 3);
  }
  uint64_t v21 = MIL::IRPixelBufferValueType::MakeWithShapeBytesPerRowNumSlices(a1, a2, (long long *)v25, (std::__shared_weak_count_vtbl **)v24, (std::__shared_weak_count_vtbl **)__p, a6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
  return v21;
}

void sub_20F3A8B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShapeBytesPerRowNumSlices(const void *a1, int a2, long long *a3, std::__shared_weak_count_vtbl **a4, std::__shared_weak_count_vtbl **a5, uint64_t *a6)
{
  uint64_t v12 = (char *)operator new(0x30uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_26C2575D0;
  long long v13 = *a3;
  *((void *)v12 + 5) = *((void *)a3 + 2);
  uint64_t v29 = (std::__shared_weak_count *)v12;
  *(_OWORD *)(v12 + 24) = v13;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  uint64_t v28 = v12 + 24;
  uint64_t v15 = *a4;
  uint64_t v14 = (uint64_t)a4[1];
  if ((std::__shared_weak_count_vtbl *)v14 == *a4)
  {
    uint64_t v26 = 0;
    uint64_t v27 = 0;
  }
  else
  {
    unint64_t v16 = (std::__shared_weak_count *)operator new(0x30uLL);
    v16->__shared_owners_ = 0;
    v16->__shared_weak_owners_ = 0;
    v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C257620;
    v16[1].__vftable = v15;
    uint64_t v17 = (uint64_t)a4[2];
    v16[1].__shared_owners_ = v14;
    v16[1].__shared_weak_owners_ = v17;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    uint64_t v26 = v16 + 1;
    uint64_t v27 = v16;
  }
  unint64_t v19 = *a5;
  uint64_t v18 = (uint64_t)a5[1];
  if ((std::__shared_weak_count_vtbl *)v18 == *a5)
  {
    long long v24 = 0;
    uint64_t v25 = 0;
  }
  else
  {
    uint64_t v20 = (std::__shared_weak_count *)operator new(0x30uLL);
    v20->__shared_owners_ = 0;
    v20->__shared_weak_owners_ = 0;
    v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C257620;
    v20[1].__vftable = v19;
    uint64_t v21 = (uint64_t)a5[2];
    v20[1].__shared_owners_ = v18;
    v20[1].__shared_weak_owners_ = v21;
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    long long v24 = v20 + 1;
    uint64_t v25 = v20;
  }
  uint64_t v22 = MIL::IRPixelBufferValueType::MakeWithShape(a1, a2, (uint64_t *)&v28, (uint64_t *)&v26, (uint64_t *)&v24, a6);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  return v22;
}

void sub_20F3A8D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t *a3)
{
  uint64_t v3 = (std::__shared_weak_count *)a3[1];
  uint64_t v10 = *a3;
  unint64_t v11 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  memset(v6, 0, sizeof(v6));
  int v7 = 1065353216;
  uint64_t v4 = MIL::IRPixelBufferValueType::MakeWithShape(a1, a2, &v10, &v8, (uint64_t *)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v6);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v4;
}

void sub_20F3A8E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a9);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  uint64_t v18 = *(std::__shared_weak_count **)(v16 - 24);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShape(const void *a1, int a2, long long *a3, uint64_t *a4)
{
  uint64_t v8 = (char *)operator new(0x30uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = &unk_26C2575D0;
  long long v9 = *a3;
  *((void *)v8 + 5) = *((void *)a3 + 2);
  long long v13 = (std::__shared_weak_count *)v8;
  *(_OWORD *)(v8 + 24) = v9;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  uint64_t v12 = v8 + 24;
  uint64_t v10 = MIL::IRPixelBufferValueType::MakeWithShape(a1, a2, (uint64_t *)&v12, a4);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v10;
}

void sub_20F3A8EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShapeNumSlices(const void *a1, int a2, long long *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10 = (char *)operator new(0x30uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = &unk_26C2575D0;
  long long v11 = *a3;
  *((void *)v10 + 5) = *((void *)a3 + 2);
  uint64_t v20 = (std::__shared_weak_count *)v10;
  *(_OWORD *)(v10 + 24) = v11;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  uint64_t v18 = 0;
  unint64_t v19 = v10 + 24;
  uint64_t v17 = 0;
  uint64_t v12 = (char *)operator new(0x30uLL);
  *((void *)v12 + 1) = 0;
  *((void *)v12 + 2) = 0;
  *(void *)uint64_t v12 = &unk_26C257620;
  *(_OWORD *)(v12 + 24) = *(_OWORD *)a4;
  *((void *)v12 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  uint64_t v15 = v12 + 24;
  uint64_t v16 = (std::__shared_weak_count *)v12;
  uint64_t v13 = MIL::IRPixelBufferValueType::MakeWithShape(a1, a2, (uint64_t *)&v19, &v17, (uint64_t *)&v15, a5);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  return v13;
}

void sub_20F3A9038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRPixelBufferValueType::Make(int a1, void *a2, void *a3)
{
  uint64_t v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  v5[0] = 0;
  v5[1] = 0;
  MIL::IRPixelBufferValueType::Make(a1, (uint64_t)v7, v6, v5);
}

void sub_20F3A9118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v11, v10);
  _Unwind_Resume(a1);
}

void MIL::IRPixelBufferValueType::Make(int a1, uint64_t a2, void *a3, uint64_t *a4)
{
  int v6 = a1;
  uint64_t v5 = 0;
  uint64_t v4 = *a4;
  if (*a3)
  {
    if (v4) {
      std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
    }
    std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::nullopt_t const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
  }
  if (v4) {
    std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::nullopt_t const&,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
  }
  std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::nullopt_t const&,std::nullopt_t const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
}

void sub_20F3A923C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    std::default_delete<MIL::IRPixelBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::nullopt_t const&,std::nullopt_t const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

{
  std::__shared_weak_count **v0;
  uint64_t v1;
  int v2;
  std::__shared_weak_count *v3;

  OUTLINED_FUNCTION_1();
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  if (*v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v0);
  }
}

void sub_20F3A9358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a11)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
  }
  std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::nullopt_t const&,std::nullopt_t const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
  MEMORY[0x21056C700](v11, 0x10A2C40EFD47E9ALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::nullopt_t const&,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

void sub_20F3A94A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a11)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
  }
  std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::nullopt_t const&,std::nullopt_t const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
  MEMORY[0x21056C700](v11, 0x10A2C40EFD47E9ALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::nullopt_t const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

{
  std::__shared_weak_count **v0;
  std::__shared_weak_count **v1;
  int v2;

  OUTLINED_FUNCTION_1();
  if (v2 && *v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v1);
  }
  if (*v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*v0);
  }
}

void sub_20F3A95FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a11)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
  }
  std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::nullopt_t const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
  MEMORY[0x21056C700](v11, 0x10A2C40EFD47E9ALL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

void sub_20F3A9770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (a11)
  {
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
  }
  std::make_unique[abi:ne180100]<MIL::IRPixelBufferValueTypeImpl,MIL::IRPixelFormatType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::nullopt_t const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
  MEMORY[0x21056C700](v11, 0x10A2C40EFD47E9ALL);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::GetPixelFormatType(MIL::IRPixelBufferValueType *this)
{
  return **((unsigned int **)this + 1);
}

uint64_t MIL::IRPixelBufferValueType::GetShape(MIL::IRPixelBufferValueType *this)
{
  return *(void *)(*((void *)this + 1) + 8);
}

uint64_t MIL::IRPixelBufferValueType::GetRank(MIL::IRPixelBufferValueType *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(unsigned char *)(v1 + 24)) {
    return (uint64_t)(*(void *)(*(void *)(v1 + 8) + 8) - **(void **)(v1 + 8)) >> 3;
  }
  else {
    return -1;
  }
}

uint64_t MIL::IRPixelBufferValueType::IsFixedRank(MIL::IRPixelBufferValueType *this)
{
  return *(unsigned __int8 *)(*((void *)this + 1) + 24);
}

uint64_t MIL::IRPixelBufferValueType::GetBytesPerRow(MIL::IRPixelBufferValueTypeImpl **this)
{
  return MIL::IRPixelBufferValueTypeImpl::GetBytesPerRow(this[1]);
}

uint64_t MIL::IRPixelBufferValueTypeImpl::GetBytesPerRow(MIL::IRPixelBufferValueTypeImpl *this)
{
  if (!*((unsigned char *)this + 48) || (uint64_t result = *((void *)this + 4)) == 0)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "BytesPerRow is not set for this pixel buffer.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  return result;
}

void sub_20F3A9870(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::TryGetBytesPerRow(MIL::IRPixelBufferValueType *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(unsigned char *)(v1 + 48)) {
    return *(void *)(v1 + 32);
  }
  else {
    return 0;
  }
}

uint64_t MIL::IRPixelBufferValueType::GetNumSlices(MIL::IRPixelBufferValueTypeImpl **this)
{
  return MIL::IRPixelBufferValueTypeImpl::GetNumSlices(this[1]);
}

uint64_t MIL::IRPixelBufferValueTypeImpl::GetNumSlices(MIL::IRPixelBufferValueTypeImpl *this)
{
  if (!*((unsigned char *)this + 72) || (uint64_t result = *((void *)this + 7)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "NumSlices is not set for this pixel buffer.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3A990C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::TryGetNumSlices(MIL::IRPixelBufferValueType *this)
{
  uint64_t v1 = *((void *)this + 1);
  if (*(unsigned char *)(v1 + 72)) {
    return *(void *)(v1 + 56);
  }
  else {
    return 0;
  }
}

uint64_t MIL::IRPixelBufferValueType::GetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::IRPixelBufferValueTypeImpl::GetAttribute(*(void *)(a1 + 8), a2);
}

uint64_t MIL::IRPixelBufferValueTypeImpl::GetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = MIL::IRPixelBufferValueTypeImpl::TryGetAttribute(a1, a2);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Attribute does not exist.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  return result;
}

void sub_20F3A99A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::TryGetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::IRPixelBufferValueTypeImpl::TryGetAttribute(*(void *)(a1 + 8), a2);
}

uint64_t MIL::IRPixelBufferValueTypeImpl::TryGetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 80), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)v2 + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

unsigned __int8 *MIL::IRPixelBufferValueType::TryGetAttributeSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)(a1 + 8) + 80), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t MIL::IRPixelBufferValueType::GetAttributes(MIL::IRPixelBufferValueType *this)
{
  return *((void *)this + 1) + 80;
}

uint64_t MIL::IRPixelBufferValueType::GetNumPlanes(MIL::IRPixelBufferValueType *this)
{
  return MIL::GetNumPlanesForFormat(**((_DWORD **)this + 1));
}

uint64_t MIL::IRPixelBufferValueType::GetNumElements(MIL::IRPixelBufferValueType *this)
{
  if (MIL::GetNumPlanesForFormat(**((_DWORD **)this + 1)) != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Number of elements cannot be computed for multi-planar images yet.");
    long long v9 = (struct type_info *)off_26412C1F0;
    uint64_t v10 = (void (*)(void *))MEMORY[0x263F8C080];
LABEL_8:
    __cxa_throw(exception, v9, v10);
  }
  uint64_t v2 = *(uint64_t **)(*((void *)this + 1) + 8);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = 1;
  while (v3 != v4)
  {
    uint64_t v6 = (*(uint64_t (**)(void))(**(void **)v3 + 16))();
    if (!v6)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::range_error::range_error[abi:ne180100]((std::runtime_error *)exception, "Cannot determine number of elements in memory layout with unknown dimension.");
      long long v9 = (struct type_info *)off_26412C1D0;
      uint64_t v10 = (void (*)(void *))MEMORY[0x263F8C050];
      goto LABEL_8;
    }
    v5 *= (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
    v3 += 8;
  }
  return v5;
}

void sub_20F3A9B8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRPixelBufferValueType::ToString(MIL::IRPixelBufferValueType *this)
{
}

void sub_20F3A9C64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void MIL::IRCircularBufferValueType::~IRCircularBufferValueType(MIL::IRCircularBufferValueType *this)
{
  *(void *)this = &unk_26C257060;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRCircularBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_26C257060;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRCircularBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }
}

{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t vars8;

  *(void *)this = &unk_26C257060;
  uint64_t v3 = *((void *)this + 1);
  uint64_t v1 = (void *)((char *)this + 8);
  uint64_t v2 = v3;
  void *v1 = 0;
  if (v3) {
    std::default_delete<MIL::IRCircularBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v1, v2);
  }

  JUMPOUT(0x21056C700);
}

void *MIL::IRCircularBufferValueType::IRCircularBufferValueType(void *this)
{
  *this = &unk_26C257060;
  this[1] = 0;
  return this;
}

{
  *this = &unk_26C257060;
  this[1] = 0;
  return this;
}

void *MIL::IRCircularBufferValueType::IRCircularBufferValueType(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  unsigned __int8 *result = &unk_26C257060;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  unsigned __int8 *result = &unk_26C257060;
  result[1] = v2;
  return result;
}

void MIL::IRCircularBufferValueType::Make()
{
}

void sub_20F3A9ED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = a10;
  a10 = 0;
  if (v11) {
    std::default_delete<MIL::IRCircularBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)&a10, v11);
  }
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<MIL::IRCircularBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,MIL::IRProperty const*&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>()
{
}

void sub_20F3AA040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::make_unique[abi:ne180100]<MIL::IRCircularBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,MIL::IRProperty const*&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v13, v12, v11);
  MEMORY[0x21056C700](v10, 0x60C40CD5974ACLL);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRCircularBufferValueType::Make(MIL::IRConstantDimension *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, unsigned int a6, MIL::MILContext *a7, uint64_t *a8)
{
  std::vector<MIL::IRDimension const*>::vector(v31, (a3[1] - *a3) >> 3);
  std::vector<MIL::IRProperty const*>::vector(v30, (a4[1] - *a4) >> 3);
  std::vector<MIL::IRProperty const*>::vector(__p, a5[1] - *a5);
  uint64_t v16 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v17 = 0;
    do
    {
      uint64_t v18 = MIL::IRConstantDimension::Make(a1, *(MIL::MILContext **)(v16 + 8 * v17));
      *((void *)v31[0] + v17++) = v18;
      uint64_t v16 = *a3;
    }
    while (v17 < (a3[1] - *a3) >> 3);
  }
  uint64_t v19 = *a4;
  if (a4[1] != *a4)
  {
    unint64_t v20 = 0;
    do
    {
      Int64uint64_t Scalar = MIL::IRConstantProperty::MakeInt64Scalar(a1, *(MIL::MILContext **)(v19 + 8 * v20));
      *((void *)v30[0] + v20++) = Int64Scalar;
      uint64_t v19 = *a4;
    }
    while (v20 < (a4[1] - *a4) >> 3);
  }
  uint64_t v22 = *a5;
  if (a5[1] != *a5)
  {
    unint64_t v23 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)*(unsigned __int8 *)(v22 + v23));
      *((void *)__p[0] + v23++) = UInt8Scalar;
      uint64_t v22 = *a5;
    }
    while (v23 < a5[1] - *a5);
  }
  uint64_t v25 = (void *)MIL::IRConstantProperty::MakeInt64Scalar(a1, (MIL::MILContext *)a6);
  uint64_t v26 = (void (__cdecl *)(std::__shared_weak_count *__hidden))MIL::IRConstantDimension::Make(a1, a7);
  uint64_t v27 = MIL::IRCircularBufferValueType::MakeWithShape(a1, a2, (uint64_t)v31, (uint64_t)v30, (uint64_t)__p, v25, v26, a8);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v30[0])
  {
    v30[1] = v30[0];
    operator delete(v30[0]);
  }
  if (v31[0])
  {
    v31[1] = v31[0];
    operator delete(v31[0]);
  }
  return v27;
}

void sub_20F3AA23C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRCircularBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (__cdecl *a7)(std::__shared_weak_count *__hidden this), uint64_t *a8)
{
  uint64_t v16 = (std::__shared_weak_count *)operator new(0x30uLL);
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2575D0;
  v16[1].std::__shared_count = *(std::__shared_count *)a3;
  v16[1].__shared_weak_owners_ = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v25 = v16 + 1;
  uint64_t v26 = v16;
  unint64_t v17 = (char *)operator new(0x30uLL);
  *((void *)v17 + 1) = 0;
  *((void *)v17 + 2) = 0;
  *(void *)unint64_t v17 = &unk_26C257620;
  *(_OWORD *)(v17 + 24) = *(_OWORD *)a4;
  *((void *)v17 + 5) = *(void *)(a4 + 16);
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  unint64_t v23 = v17 + 24;
  long long v24 = (std::__shared_weak_count *)v17;
  uint64_t v18 = (char *)operator new(0x30uLL);
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = &unk_26C257620;
  *(_OWORD *)(v18 + 24) = *(_OWORD *)a5;
  *((void *)v18 + 5) = *(void *)(a5 + 16);
  *(void *)a5 = 0;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a5 + 16) = 0;
  uint64_t v21 = v18 + 24;
  uint64_t v22 = (std::__shared_weak_count *)v18;
  uint64_t v19 = MIL::IRCircularBufferValueType::MakeWithShape(a1, a2, &v25, (uint64_t *)&v23, (uint64_t *)&v21, a6, a7, a8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  return v19;
}

void sub_20F3AA428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRCircularBufferValueType::GetDataType(MIL::IRCircularBufferValueType *this)
{
  return **(unsigned int **)(*((void *)this + 1) + 24);
}

uint64_t MIL::IRCircularBufferValueType::GetShape(MIL::IRCircularBufferValueType *this)
{
  return *(void *)(*(void *)(*((void *)this + 1) + 24) + 8);
}

uint64_t MIL::IRCircularBufferValueType::GetSliceShape(MIL::IRCircularBufferValueType *this)
{
  return **((void **)this + 1);
}

uint64_t MIL::IRCircularBufferValueType::GetStrides(MIL::IRCircularBufferValueType *this)
{
  return MIL::IRTensorBufferValueTypeImpl::GetStrides(*(MIL::IRTensorBufferValueTypeImpl **)(*((void *)this + 1) + 24));
}

uint64_t MIL::IRCircularBufferValueType::IsSliceFixedRank(uint64_t ***this)
{
}

uint64_t anonymous namespace'::IsShapeFixedRank(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = 1;
  while (v1 != v2)
  {
    int v4 = (*(uint64_t (**)(void))(**(void **)v1 + 32))() ^ 1;
    if ((v4 & 1) == 0 && (v3 & 1) == 0)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "A shape may contain only one variadic dimension.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t v3 = v4 & v3;
    v1 += 8;
  }
  return v3;
}

void sub_20F3AA564(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRCircularBufferValueType::IsFixedRank(MIL::IRCircularBufferValueType *this)
{
}

uint64_t MIL::IRCircularBufferValueType::GetInterleaveFactors(MIL::IRCircularBufferValueType *this)
{
  return *(void *)(*(void *)(*((void *)this + 1) + 24) + 56);
}

uint64_t MIL::IRCircularBufferValueType::GetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::IRCircularBufferValueTypeImpl::GetAttribute(*(void *)(a1 + 8), a2);
}

uint64_t MIL::IRCircularBufferValueTypeImpl::GetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = MIL::IRCircularBufferValueTypeImpl::TryGetAttribute(a1, a2);
  if (!result)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::out_of_range::out_of_range[abi:ne180100](exception, "Attribute does not exist.");
    __cxa_throw(exception, (struct type_info *)off_26412C1E0, MEMORY[0x263F8C068]);
  }
  return result;
}

void sub_20F3AA5FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRCircularBufferValueType::TryGetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  return MIL::IRCircularBufferValueTypeImpl::TryGetAttribute(*(void *)(a1 + 8), a2);
}

uint64_t MIL::IRCircularBufferValueTypeImpl::TryGetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)(a1 + 24) + 72), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)v2 + 5);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

unsigned __int8 *MIL::IRCircularBufferValueType::TryGetAttributeSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  return MIL::IRCircularBufferValueTypeImpl::TryGetAttributeSharedPtr(*(void *)(a1 + 8), a2, a3);
}

unsigned __int8 *MIL::IRCircularBufferValueTypeImpl::TryGetAttributeSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)(a1 + 24) + 72), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t MIL::IRCircularBufferValueType::GetAttributes(MIL::IRCircularBufferValueType *this)
{
  return *(void *)(*((void *)this + 1) + 24) + 72;
}

uint64_t MIL::IRCircularBufferValueType::GetWrapDim(MIL::IRCircularBufferValueType *this)
{
  return *(void *)(*((void *)this + 1) + 16);
}

uint64_t MIL::IRCircularBufferValueType::GetNumElements(MIL::IRCircularBufferValueType *this)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(*((void *)this + 1) + 24) + 8);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = 1;
  while (v2 != v3)
  {
    uint64_t v5 = (*(uint64_t (**)(void))(**(void **)v2 + 16))();
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::range_error::range_error[abi:ne180100](exception, "Cannot determine number of elements in memory layout with unknown dimension.");
      __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
    }
    v4 *= (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
    v2 += 8;
  }
  return v4;
}

void sub_20F3AA7B4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRCircularBufferValueType::ToString(MIL::IRCircularBufferValueType *this)
{
}

void sub_20F3AA888(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRCircularBufferValueType::GetRank(MIL::IRCircularBufferValueType *this)
{
  uint64_t v1 = (void *)*((void *)this + 1);
  uint64_t v2 = *(uint64_t **)(v1[3] + 8);
  uint64_t v3 = v2[1] - *v2;
  if (!v3) {
    uint64_t v3 = *(void *)(*v1 + 8) - *(void *)*v1;
  }
  uint64_t v4 = v3 >> 3;
    return v4;
  else {
    return -1;
  }
}

void MIL::IRStateValueType::~IRStateValueType(MIL::IRStateValueType *this)
{
  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C2570B0;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x60C4044C4A2DFLL);
  }
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C2570B0;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x60C4044C4A2DFLL);
  }
}

{
  uint64_t v2;
  uint64_t vars8;

  uint64_t v2 = *((void *)this + 1);
  *(void *)this = &unk_26C2570B0;
  *((void *)this + 1) = 0;
  if (v2) {
    MEMORY[0x21056C700](v2, 0x60C4044C4A2DFLL);
  }

  JUMPOUT(0x21056C700);
}

void *MIL::IRStateValueType::IRStateValueType(void *this)
{
  *this = &unk_26C2570B0;
  this[1] = 0;
  return this;
}

{
  *this = &unk_26C2570B0;
  this[1] = 0;
  return this;
}

void *MIL::IRStateValueType::IRStateValueType(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  unsigned __int8 *result = &unk_26C2570B0;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  unsigned __int8 *result = &unk_26C2570B0;
  result[1] = v2;
  return result;
}

void MIL::IRStateValueType::Make(MIL::IRStateValueType *this, const MIL::IRValueType *a2)
{
}

void sub_20F3AAB74(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x60C4044C4A2DFLL);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRStateValueType::GetWrappedType(MIL::IRStateValueType *this)
{
  return **((void **)this + 1);
}

uint64_t MIL::IRStateValueType::GetNumElements(MIL::IRStateValueType *this)
{
  return (*(uint64_t (**)(void))(***((void ***)this + 1) + 16))();
}

void MIL::IRStateValueType::ToString(MIL::IRStateValueType *this)
{
}

void sub_20F3AAC94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

void anonymous namespace'::IRConstantDimensionImpl::~IRConstantDimensionImpl(_anonymous_namespace_::IRConstantDimensionImpl *this)
{
}

uint64_t anonymous namespace'::IRConstantDimensionImpl::GetSize(_anonymous_namespace_::IRConstantDimensionImpl *this)
{
  return *((void *)this + 1);
}

void anonymous namespace'::IRUnknownDimensionImpl::~IRUnknownDimensionImpl(_anonymous_namespace_::IRUnknownDimensionImpl *this)
{
}

uint64_t anonymous namespace'::IRUnknownDimensionImpl::IsVariadic(_anonymous_namespace_::IRUnknownDimensionImpl *this)
{
  return *((unsigned __int8 *)this + 8);
}

void anonymous namespace'::IRUnknownDimensionImpl::ToString(_anonymous_namespace_::IRUnknownDimensionImpl *this)
{
}

void sub_20F3AADB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 40);
  *(void *)(v1 - 40) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  _Unwind_Resume(exception_object);
}

MIL::IRConstantPropertyImpl *std::unique_ptr<MIL::IRConstantPropertyImpl>::reset[abi:ne180100](MIL::IRConstantPropertyImpl **a1, MIL::IRConstantPropertyImpl *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IRConstantPropertyImpl::~IRConstantPropertyImpl(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void MIL::IRConstantPropertyImpl::~IRConstantPropertyImpl(MIL::IRConstantPropertyImpl *this)
{
  uint64_t v2 = *((unsigned int *)this + 2);
  if (v2 != -1) {
    ((void (*)(char *, MIL::IRConstantPropertyImpl *))off_26C2572D8[v2])(&v3, this);
  }
  *((_DWORD *)this + 2) = -1;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN12_GLOBAL__N_115PropertyStorageIxEENS_14default_deleteISB_EEEENS8_INSA_IhEENSC_ISF_EEEENS8_INSA_IyEENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSE_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN12_GLOBAL__N_115PropertyStorageIxEENS_14default_deleteISB_EEEENS8_INSA_IhEENSC_ISF_EEEENS8_INSA_IyEENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSE_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm2EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10unique_ptrIN12_GLOBAL__N_115PropertyStorageIxEENS_14default_deleteISB_EEEENS8_INSA_IhEENSC_ISF_EEEENS8_INSA_IyEENSC_ISI_EEEEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSM_1EJSE_SH_SK_EEEEEEDcSO_DpT0_(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  *a2 = 0;
  if (result) {
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t anonymous namespace'::IRTensorValueTypeImpl::GetShape(_anonymous_namespace_::IRTensorValueTypeImpl *this)
{
  return *((void *)this + 2);
}

void anonymous namespace'::IRTensorValueTypeImpl::~IRTensorValueTypeImpl(_anonymous_namespace_::IRTensorValueTypeImpl *this)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 32);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 32);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  JUMPOUT(0x21056C700);
}

uint64_t anonymous namespace'::IRTensorValueTypeImpl::TryGetAttribute(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 32), a2);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = *((void *)v2 + 5);
  char v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return v4;
}

unsigned __int8 *anonymous namespace'::IRTensorValueTypeImpl::TryGetAttributeSharedPtr@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 32), a2);
  if (result)
  {
    uint64_t v5 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t anonymous namespace'::IRTensorValueTypeImpl::GetAttributes(_anonymous_namespace_::IRTensorValueTypeImpl *this)
{
  return (uint64_t)this + 32;
}

uint64_t anonymous namespace'::IRTensorValueTypeImpl::GetDataType(_anonymous_namespace_::IRTensorValueTypeImpl *this)
{
  return *((unsigned int *)this + 2);
}

uint64_t anonymous namespace'::IRTensorValueTypeImpl::IsFixedRank(_anonymous_namespace_::IRTensorValueTypeImpl *this)
{
  return *((unsigned __int8 *)this + 72);
}

void std::shared_ptr<std::vector<MIL::IRDimension const*>>::shared_ptr[abi:ne180100]<std::vector<MIL::IRDimension const*>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20F3AB0D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<std::vector<MIL::IRDimension const*>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *,std::shared_ptr<std::vector<MIL::IRDimension const*>>::__shared_ptr_default_delete<std::vector<MIL::IRDimension const*>,std::vector<MIL::IRDimension const*>>,std::allocator<std::vector<MIL::IRDimension const*>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *,std::shared_ptr<std::vector<MIL::IRDimension const*>>::__shared_ptr_default_delete<std::vector<MIL::IRDimension const*>,std::vector<MIL::IRDimension const*>>,std::allocator<std::vector<MIL::IRDimension const*>>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::vector<MIL::IRDimension const*> *,std::shared_ptr<std::vector<MIL::IRDimension const*>>::__shared_ptr_default_delete<std::vector<MIL::IRDimension const*>,std::vector<MIL::IRDimension const*>>,std::allocator<std::vector<MIL::IRDimension const*>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<std::vector<MIL::IRDimension const*>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x21056C700);
  }
}

void *std::vector<MIL::Bf16>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_20F3AB234(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::Fp8E5M2>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_20F3AB2A8(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::Fp8E4M3FN>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    uint64_t v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_20F3AB31C(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::Fp16>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<MIL::Fp16>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_20F3AB394(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(void *result, void *a2, int a3, void *a4, int a5, size_t __sz)
{
  if (__sz)
  {
    uint64_t v10 = (uint64_t)result;
    std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    return (void *)std::vector<unsigned char>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(v10, a2, a3, a4, a5);
  }
  return result;
}

void sub_20F3AB41C(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<unsigned char>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,true,0ul>,std::__bit_iterator<std::vector<BOOL>,true,0ul>>(uint64_t result, void *a2, int a3, void *a4, int a5)
{
  uint64_t v5 = *(unsigned char **)(result + 8);
  while (a2 != a4 || a3 != a5)
  {
    *v5++ = (*a2 >> a3) & 1;
    a2 += a3 == 63;
    if (a3 == 63) {
      a3 = 0;
    }
    else {
      ++a3;
    }
  }
  *(void *)(result + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v5;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v17 = operator new(0x38uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  void *v17 = 0;
  v17[1] = v10;
  uint64_t v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)uint64_t v18 = 0;
  v17[5] = 0;
  v17[6] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_20F3AB70C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::shared_ptr<MIL::AbstractConstExpr const>::shared_ptr[abi:ne180100]<MIL::AbstractConstExpr const,std::default_delete<MIL::AbstractConstExpr const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unsigned __int8 *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::AbstractConstExpr const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<MIL::AbstractConstExpr const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::AbstractConstExpr const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AB92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<std::string>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string&>()
{
}

void sub_20F3ABA4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<MIL::Bf16>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3ABB6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<MIL::Fp16>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3ABC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<MIL::Fp8E5M2>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3ABDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<MIL::Fp8E4M3FN>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3ABECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<float>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3ABFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<double>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AC10C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<signed char>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AC22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<short>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AC34C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<int>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AC46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<long long>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AC58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned short>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AC6AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned int>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AC7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<MIL::IRValueConstExprOutputData<unsigned long long>,MIL::IRTensorValueType const*&,std::shared_ptr<MIL::AbstractConstExpr const>,unsigned long &,std::string &>()
{
}

void sub_20F3AC8EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  MEMORY[0x21056C700](v17, 0x10F3C4093C008B8);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  unint64_t v4 = this;
  unint64_t v11 = this;
  uint8x8_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  uint64_t v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        unint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint8x8_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_20F3AC9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void anonymous namespace'::IRListValueTypeImpl::~IRListValueTypeImpl(_anonymous_namespace_::IRListValueTypeImpl *this)
{
}

uint64_t anonymous namespace'::IRListValueTypeImpl::GetElementType(_anonymous_namespace_::IRListValueTypeImpl *this)
{
  return *((void *)this + 1);
}

uint64_t anonymous namespace'::IRListValueTypeImpl::GetLength(_anonymous_namespace_::IRListValueTypeImpl *this)
{
  return *((void *)this + 2);
}

void anonymous namespace'::IRTupleValueTypeImpl::~IRTupleValueTypeImpl(_anonymous_namespace_::IRTupleValueTypeImpl *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

{
  std::__shared_weak_count *v1;
  uint64_t vars8;

  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t anonymous namespace'::IRTupleValueTypeImpl::GetTypes(_anonymous_namespace_::IRTupleValueTypeImpl *this)
{
  return *((void *)this + 1);
}

void anonymous namespace'::IRDictionaryValueTypeImpl::~IRDictionaryValueTypeImpl(_anonymous_namespace_::IRDictionaryValueTypeImpl *this)
{
}

uint64_t anonymous namespace'::IRDictionaryValueTypeImpl::GetKeyType(_anonymous_namespace_::IRDictionaryValueTypeImpl *this)
{
  return *((void *)this + 1);
}

uint64_t anonymous namespace'::IRDictionaryValueTypeImpl::GetValueType(_anonymous_namespace_::IRDictionaryValueTypeImpl *this)
{
  return *((void *)this + 2);
}

void std::default_delete<MIL::IRTensorBufferValueTypeImpl>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(a2 + 9));
    char v3 = (std::__shared_weak_count *)a2[8];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    unint64_t v4 = (std::__shared_weak_count *)a2[5];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)a2[2];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    JUMPOUT(0x21056C700);
  }
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (unsigned char *)a1[1];
    long long v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_20F3ACBA8(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<MIL::IRDimension const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20F3ACC20(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::vector<MIL::IRDimension const*>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2575D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<MIL::IRDimension const*>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2575D0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<std::vector<MIL::IRDimension const*>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<MIL::IRProperty const*>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C257620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<MIL::IRProperty const*>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C257620;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<std::vector<MIL::IRProperty const*>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t MIL::IRTensorBufferValueTypeImpl::IRTensorBufferValueTypeImpl(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a5;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)a6;
  *(void *)a6 = 0;
  *(void *)(a6 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 72, a7);
  uint8x8_t v12 = *(void **)(a1 + 32);
  unint64_t v13 = *(const void **)(a1 + 48);
  if (v12)
  {
    if (v13)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Strides and row-alignment cannot be specified simulataneously for tensor_buffers.");
    }
    else
    {
      if (*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8) == v12[1] - *v12) {
        goto LABEL_4;
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Length of shape and strides must be equal.");
    }
LABEL_32:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  if (v13
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Row-alignment-in-bytes cannot be a variadic unknown property for tensor_buffers.");
    goto LABEL_32;
  }
LABEL_4:
  unint64_t v14 = (uint64_t)(*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8)) >> 3;
  uint64_t v15 = *(const void ****)(a1 + 56);
  unint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  uint64_t v18 = (char *)v17 - (char *)*v15;
  if (v14 != v18 >> 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Length of shape and interleaveFactors must be equal.");
    goto LABEL_32;
  }
  if (v18 != 8 {
    || (long long v19 = *v16) == 0
  }
  {
    if (v17 == v16)
    {
      unint64_t v27 = 1;
    }
    else
    {
      uint64_t v20 = 0;
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      do
      {
        float v21 = v16[v20];
        if (!v21
        {
          char v30 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v30, "Interleave factors should be scalars.");
          v30->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
          __cxa_throw(v30, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
        }
        ++v20;
      }
      while (v14 != v20);
      unint64_t v22 = 0;
      uint64_t v23 = 0;
      do
      {
        unint64_t v24 = (_DWORD **)MIL::IRProperty::AsConstant((MIL::IRProperty *)v16[v22]);
        if (*(unsigned char *)MIL::IRConstantPropertyImpl::GetValue<unsigned char>(v24[1]) == 1) {
          ++v23;
        }
        ++v22;
        uint64_t v25 = *(void *)(a1 + 56);
        unint64_t v16 = *(const void ***)v25;
        uint64_t v26 = *(void *)(v25 + 8) - *(void *)v25;
      }
      while (v22 < v26 >> 3);
      unint64_t v14 = v26 >> 3;
      unint64_t v27 = v23 + 1;
    }
    if (v27 < v14)
    {
      uint64_t v31 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v31, "Found multiple interleave factors that are not 1.");
      v31->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(v31, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
  }
  return a1;
}

void sub_20F3AD168(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v2);
  size_t v5 = (std::__shared_weak_count *)v1[8];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)v1[5];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  long long v7 = (std::__shared_weak_count *)v1[2];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::IRPixelBufferValueTypeImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a2 + 80);
    if (*(unsigned char *)(a2 + 72))
    {
      char v3 = *(std::__shared_weak_count **)(a2 + 64);
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
    }
    if (*(unsigned char *)(a2 + 48))
    {
      unint64_t v4 = *(std::__shared_weak_count **)(a2 + 40);
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
    }
    size_t v5 = *(std::__shared_weak_count **)(a2 + 16);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    JUMPOUT(0x21056C700);
  }
}

uint64_t MIL::IRPixelBufferValueTypeImpl::IRPixelBufferValueTypeImpl(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  *(_DWORD *)a1 = a2;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  if (*(unsigned char *)(a4 + 16))
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
    *(void *)a4 = 0;
    *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
    *(unsigned char *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1;
  }
  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  if (*(unsigned char *)(a5 + 16))
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)a5;
    *(void *)a5 = 0;
    *(void *)(a5 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
    *(unsigned char *)(a1 + 72) = 1;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 80, a6);
  if (*(_DWORD *)a1 != 20 && !MIL::IsValidIRPixelFormatType(*(_DWORD *)a1))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unsupported pixel format type.");
    goto LABEL_32;
  }
  if (!*(unsigned char *)(a1 + 24))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Pixel buffers must have known rank.");
    goto LABEL_32;
  }
  if (*(void *)(*(void *)(a1 + 8) + 8) - **(void **)(a1 + 8) != 16)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Length of shape must be 2 (height, width).");
    goto LABEL_32;
  }
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(_DWORD *)a1 != 20)
    {
      unint64_t v11 = *(uint64_t **)(a1 + 32);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      if (MIL::GetNumPlanesForFormat(*(_DWORD *)a1) != (v12 - v13) >> 3)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "Length of bytesPerRow must be equal to the number of planes in formatType.");
        goto LABEL_32;
      }
    }
  }
  if (!*(unsigned char *)(a1 + 72)) {
    return a1;
  }
  if (*(_DWORD *)a1 != 20)
  {
    unint64_t v14 = *(uint64_t **)(a1 + 56);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    if (MIL::GetNumPlanesForFormat(*(_DWORD *)a1) != (v15 - v16) >> 3)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "Length of numSlices must be equal to the number of planes in formatType.");
LABEL_32:
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
  }
  uint64_t v17 = *(MIL::IRProperty ****)(a1 + 56);
  uint64_t v18 = *v17;
  long long v19 = v17[1];
  if (*v17 != v19)
  {
    do
    {
      uint64_t v20 = *v18;
      if (*v18)
      {
        {
          float v21 = (_DWORD **)MIL::IRProperty::AsConstant(v20);
          if (*(void *)MIL::IRConstantPropertyImpl::GetValue<long long>(v21[1]) != 1
            && !MIL::SupportsMultiSlice(*(_DWORD *)a1))
          {
            uint64_t v25 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            MIL::IRPixelFormatTypeToString(a2, &v31);
            uint64_t v26 = std::string::insert(&v31, 0, "Given pixel format type ");
            long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
            v32.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v27;
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            uint64_t v28 = std::string::append(&v32, " does not support multislice.");
            long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
            v33.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v29;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            std::logic_error::logic_error(v25, &v33);
            v25->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
            __cxa_throw(v25, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
          }
        }
        {
          if (MIL::SupportsMultiSlice(*(_DWORD *)a1))
          {
            unint64_t v22 = (_DWORD **)MIL::IRProperty::AsConstant(v20);
            if (*(uint64_t *)MIL::IRConstantPropertyImpl::GetValue<long long>(v22[1]) <= 1)
            {
              unint64_t v24 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v24, "Multislice pixel format requires numSlices > 1.");
              v24->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
              __cxa_throw(v24, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
            }
          }
        }
      }
      ++v18;
    }
    while (v18 != v19);
  }
  return a1;
}

void sub_20F3AD69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  __cxa_free_exception(v30);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v29);
  if (*(unsigned char *)(v28 + 72))
  {
    std::string v32 = *(std::__shared_weak_count **)(v28 + 64);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
  }
  if (*(unsigned char *)(v28 + 48))
  {
    std::string v33 = *(std::__shared_weak_count **)(v28 + 40);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v28 + 16);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::IRCircularBufferValueTypeImpl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    char v3 = (void *)(a2 + 24);
    unint64_t v4 = *(void **)(a2 + 24);
    void *v3 = 0;
    if (v4) {
      std::default_delete<MIL::IRTensorBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v3, v4);
    }
    size_t v5 = *(std::__shared_weak_count **)(a2 + 8);
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    JUMPOUT(0x21056C700);
  }
}

void MIL::IRCircularBufferValueTypeImpl::IRCircularBufferValueTypeImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_OWORD *)a1 = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a1 + 16) = a7;
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>();
}

void sub_20F3ADB70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v3);
  size_t v5 = (void *)*v2;
  void *v2 = 0;
  if (v5) {
    std::default_delete<MIL::IRTensorBufferValueTypeImpl>::operator()[abi:ne180100]((uint64_t)v2, v5);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

const void **MIL::IRStateValueTypeImpl::IRStateValueTypeImpl(const void **this, const MIL::IRValueType *a2)
{
  *this = a2;
  if (!(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 24))(a2) {
    && (!*this
  }
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Trying to wrap an unsupported type (only tensors and memory layouts are supported).");
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  return this;
}

void sub_20F3ADCA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTypeStore<unsigned long long,MIL::IRConstantDimension const>::Get<unsigned long long>(uint64_t a1, MIL::IRConstantDimension *a2)
{
  uint64_t v6 = a2;
  char v3 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long,decltype(nullptr)>(a1, (unint64_t *)&v6, &v6);
  if (v4) {
    MIL::IRConstantDimension::Make(a2);
  }
  return v3[3];
}

uint64_t MIL::IRTypeStore<long long,MIL::IRConstantProperty const>::Get<long long>(uint64_t a1, unint64_t a2)
{
  v5[0] = a2;
  v5[1] = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::__emplace_unique_key_args<long long,long long,decltype(nullptr)>(a1, v5, v5);
  if (v3) {
    MIL::IRConstantProperty::Make<long long>();
  }
  return v2[3];
}

uint64_t MIL::IRTypeStore<unsigned char,MIL::IRConstantProperty const>::Get<unsigned char>(uint64_t a1, unsigned __int8 a2)
{
  v5[1] = a2;
  v5[0] = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned char,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::unique_ptr<MIL::IRConstantProperty const>>>>::__emplace_unique_key_args<unsigned char,unsigned char,decltype(nullptr)>(a1, v5, v5);
  if (v3) {
    MIL::IRConstantProperty::Make<unsigned char>();
  }
  return v2[3];
}

uint64_t MIL::IRTypeStore<unsigned long long,MIL::IRConstantProperty const>::Get<unsigned long long>(uint64_t a1, unint64_t a2)
{
  v5[0] = a2;
  v5[1] = a2;
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long,decltype(nullptr)>(a1, v5, v5);
  if (v3) {
    MIL::IRConstantProperty::Make<unsigned long long>();
  }
  return v2[3];
}

uint64_t MIL::IRTypeStore<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRTensorValueType const>::Get<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)&v16, a4);
  LODWORD(v21[0]) = a2;
  long long v7 = (std::__shared_weak_count *)a3[1];
  v21[1] = *a3;
  unint64_t v22 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = v16;
  unint64_t v9 = v17;
  uint64_t v16 = 0;
  unint64_t v17 = 0;
  v23[0] = v8;
  v23[1] = v9;
  v24[0] = v18;
  v24[1] = v19;
  int v25 = v20;
  if (v19)
  {
    unint64_t v10 = *(void *)(v18 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v10 >= v9) {
        v10 %= v9;
      }
    }
    else
    {
      v10 &= v9 - 1;
    }
    *(void *)(v8 + 8 * v10) = v24;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
  }
  unint64_t v11 = std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>>>::__emplace_unique_key_args<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,decltype(nullptr)>(a1, (int *)v21, (uint64_t)v21);
  char v13 = v12;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v23);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v16);
  if (v13)
  {
    uint64_t v14 = a3[1];
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTensorValueType::Make();
  }
  return v11[10];
}

void sub_20F3AE178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::~tuple(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(uint64_t a1, int *a2)
{
  uint64_t v8 = 0;
  char v3 = (unint64_t ***)*((void *)a2 + 1);
  char v4 = *v3;
  size_t v5 = v3[1];
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    MIL::Util::HashCombine(&v8, v6);
  }
  MIL::Util::HashCombine(&v8, (unint64_t *)*a2);
}

uint64_t anonymous namespace'::HashCombineForAttr(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v2 = *(uint64_t ***)(a1 + 16);
  if (v2)
  {
    do
    {
      char v3 = (unint64_t *)std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&v6, (uint64_t)(v2 + 2));
      MIL::Util::HashCombine(&v7, v3);
      char v4 = (unint64_t *)(*(uint64_t (**)(uint64_t *))(*v2[5] + 24))(v2[5]);
      MIL::Util::HashCombine(&v7, v4);
      uint64_t v2 = (uint64_t **)*v2;
    }
    while (v2);
    return v7;
  }
  return a2;
}

BOOL std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  size_t v7 = *(void *)(v5 + 8) - *(void *)v5;
  if (v7 != *(void *)(v6 + 8) - *(void *)v6 || memcmp(*(const void **)v5, *(const void **)v6, v7)) {
    return 0;
  }
}

BOOL anonymous namespace'::CompareAttr(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  char v3 = (unsigned __int8 *)(a1 + 16);
  do
  {
    char v3 = *(unsigned __int8 **)v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, v3 + 16);
    if (!v5) {
      break;
    }
  }
  while (((*(uint64_t (**)(void, uint64_t))(**((void **)v5 + 5) + 16))(*((void *)v5 + 5), *((void *)v3 + 5)) & 1) != 0);
  return v4;
}

uint64_t MIL::IRTypeStore<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,MIL::IRListValueType const>::Get<MIL::IRValueType const*,MIL::IRDimension const*>(uint64_t a1, MIL::IRListValueType *a2, const MIL::IRValueType *a3)
{
  *(void *)&long long v9 = a2;
  *((void *)&v9 + 1) = a3;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>>>::__emplace_unique_key_args<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,decltype(nullptr)>(a1, (uint64_t *)&v9, &v9);
  if (v7) {
    MIL::IRListValueType::Make(a2, a3, v5);
  }
  return v6[4];
}

uint64_t std::hash<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (unint64_t *)a2[1];
  uint64_t v5 = v3;
  MIL::Util::HashCombine(&v5, v2);
  return v5;
}

const void **MIL::IRTypeStore<std::shared_ptr<std::vector<MIL::IRValueType const*>>,MIL::IRTupleValueType const>::Get<std::shared_ptr<std::vector<MIL::IRValueType const*>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 8);
  long long v9 = *(unint64_t ****)a2;
  unint64_t v10 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v4 = std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::__emplace_unique_key_args<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::shared_ptr<std::vector<MIL::IRValueType const*>>,decltype(nullptr)>(a1, &v9, (uint64_t)&v9);
  char v6 = v5;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::IRTupleValueType::Make();
  }
  return v4[4];
}

void sub_20F3AE60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>::operator()(uint64_t a1, unint64_t ****a2)
{
  uint64_t v6 = 0;
  uint64_t v2 = **a2;
  uint64_t v3 = (*a2)[1];
  if (v2 == v3) {
    return 0;
  }
  do
  {
    BOOL v4 = *v2++;
    MIL::Util::HashCombine(&v6, v4);
  }
  while (v2 != v3);
  return v6;
}

BOOL std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>::operator()(uint64_t a1, const void ***a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  BOOL v4 = **a2;
  size_t v5 = (unsigned char *)(*a2)[1] - v4;
  return v5 == *(void *)(v3 + 8) - *(void *)v3 && memcmp(v4, *(const void **)v3, v5) == 0;
}

uint64_t MIL::IRTypeStore<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,MIL::IRDictionaryValueType const>::Get<MIL::IRValueType const*,MIL::IRValueType const*>(uint64_t a1, MIL::IRDictionaryValueType *a2, const MIL::IRValueType *a3)
{
  *(void *)&long long v9 = a2;
  *((void *)&v9 + 1) = a3;
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::__emplace_unique_key_args<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,decltype(nullptr)>(a1, (uint64_t *)&v9, &v9);
  if (v7) {
    MIL::IRDictionaryValueType::Make(a2, a3, v5);
  }
  return v6[4];
}

uint64_t MIL::IRTypeStore<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRTensorBufferValueType const>::Get<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  char v13 = (std::__shared_weak_count *)a3[1];
  uint64_t v25 = *a3;
  uint64_t v26 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v23 = *a4;
  unint64_t v24 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a6[1];
  uint64_t v21 = *a6;
  unint64_t v22 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v20, a7);
  int v33 = a2;
  uint64_t v32 = a5;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5EEEEJN3MIL10IRDataTypeENS_10shared_ptrINS_6vectorIPKNS3_11IRDimensionENS_9allocatorIS9_EEEEEENS5_INS6_IPKNS3_10IRPropertyENSA_ISG_EEEEEESG_SJ_NS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENSA_IcEEEENS5_IKNS3_7IRValueEEENS_4hashISP_EENS_8equal_toISP_EENSA_INS_4pairIKSP_SS_EEEEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5EEJS4_SD_SJ_SG_SJ_S11_EJEJEJRS4_RSD_RSJ_RSG_S16_S11_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS19_IJDpT2_EEEDpOT3_((uint64_t)v27, &v33, &v25, &v23, &v32, &v21, v20);
  uint64_t v32 = 0;
  uint64_t v16 = std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>>>::__emplace_unique_key_args<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,decltype(nullptr)>(a1, v27, (uint64_t)v27);
  char v18 = v17;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v31);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v20);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v18)
  {
    *a3 = 0;
    a3[1] = 0;
    *a4 = 0;
    a4[1] = 0;
    *a6 = 0;
    a6[1] = 0;
    MIL::IRTensorBufferValueType::Make();
  }
  return v16[15];
}

void sub_20F3AE9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::~tuple(void *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(a1 + 8));
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  BOOL v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

uint64_t std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(uint64_t a1, int *a2)
{
  uint64_t v17 = 0;
  MIL::Util::HashCombine(&v17, (unint64_t *)*a2);
  uint64_t v3 = (unint64_t ***)*((void *)a2 + 1);
  BOOL v4 = *v3;
  size_t v5 = v3[1];
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    MIL::Util::HashCombine(&v17, v6);
  }
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a2 + 4);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    long long v9 = (unint64_t ***)*((void *)a2 + 3);
    unint64_t v10 = *v9;
    unint64_t v11 = v9[1];
    while (v10 != v11)
      MIL::Util::HashCombine(&v17, *v10++);
  }
  else
  {
    MIL::Util::HashCombine(&v17, 0);
  }
  MIL::Util::HashCombine(&v17, *((unint64_t **)a2 + 5));
  char v12 = (unint64_t ***)*((void *)a2 + 6);
  char v13 = *v12;
  uint64_t v14 = v12[1];
  while (v13 != v14)
    MIL::Util::HashCombine(&v17, *v13++);
  uint64_t v17 = v15;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v15;
}

void sub_20F3AEB94(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  size_t v7 = *(void *)(v5 + 8) - *(void *)v5;
  if (v7 != *(void *)(v6 + 8) - *(void *)v6) {
    return 0;
  }
  if (memcmp(*(const void **)v5, *(const void **)v6, v7)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a3 + 48);
  size_t v10 = *(void *)(v8 + 8) - *(void *)v8;
  if (v10 != *(void *)(v9 + 8) - *(void *)v9
    || memcmp(*(const void **)v8, *(const void **)v9, v10)
    || *(void *)(a2 + 40) != *(void *)(a3 + 40))
  {
    return 0;
  }
  uint64_t v11 = *(void *)(a2 + 24);
  char v12 = *(std::__shared_weak_count **)(a2 + 32);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(std::__shared_weak_count **)(a3 + 32);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v15 = 0;
  if ((v11 != 0) == (v13 != 0))
  {
    if (!v11
      || !v13
      || (size_t v16 = *(void *)(v11 + 8) - *(void *)v11, v16 == *(void *)(v13 + 8) - *(void *)v13)
      && !memcmp(*(const void **)v11, *(const void **)v13, v16))
    {
      BOOL v15 = 1;
    }
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (!v15) {
    return 0;
  }
}

BOOL std::operator!=[abi:ne180100]<MIL::IRProperty const*,std::allocator<MIL::IRProperty const*>>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(const void **)a1;
  size_t v4 = *(void *)(a1 + 8) - (void)v2;
  uint64_t v5 = *(const void **)a2;
  return v4 != *(void *)(a2 + 8) - (void)v5 || memcmp(v2, v5, v4) != 0;
}

uint64_t MIL::IRTypeStore<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRPixelBufferValueType const>::Get<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v28 = *a3;
  uint64_t v29 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v26 = *a4;
  long long v27 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (std::__shared_weak_count *)a5[1];
  uint64_t v24 = *a5;
  uint64_t v25 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v23, a6);
  LODWORD(v22) = a2;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJN3MIL17IRPixelFormatTypeENS_10shared_ptrINS_6vectorIPKNS3_11IRDimensionENS_9allocatorIS9_EEEEEENS5_INS6_IPKNS3_10IRPropertyENSA_ISG_EEEEEESJ_NS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENSA_IcEEEENS5_IKNS3_7IRValueEEENS_4hashISP_EENS_8equal_toISP_EENSA_INS_4pairIKSP_SS_EEEEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJS4_SD_SJ_SJ_S11_EJEJEJRS4_RSD_RSJ_S16_S11_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS18_IJDpT2_EEEDpOT3_((uint64_t)v30, &v22, &v28, &v26, &v24, v23);
  uint64_t v22 = 0;
  uint64_t v14 = std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>>>::__emplace_unique_key_args<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,decltype(nullptr)>(a1, v30, (uint64_t)v30);
  char v16 = v15;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v34);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v23);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v16)
  {
    long long v17 = *(_OWORD *)a3;
    *a3 = 0;
    a3[1] = 0;
    long long v20 = *(_OWORD *)a4;
    long long v21 = v17;
    *a4 = 0;
    a4[1] = 0;
    long long v19 = *(_OWORD *)a5;
    *a5 = 0;
    a5[1] = 0;
    MIL::IRPixelBufferValueType::Make(a2, (uint64_t)&v21, &v20, (uint64_t *)&v19);
  }
  return v14[14];
}

void sub_20F3AEF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void *std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::~tuple(void *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(a1 + 7));
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

uint64_t std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(uint64_t a1, void *a2)
{
  uint64_t v19 = 0;
  MIL::Util::HashCombine(&v19, (unint64_t *)*(unsigned int *)a2);
  uint64_t v3 = (unint64_t ***)a2[1];
  size_t v4 = *v3;
  uint64_t v5 = v3[1];
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    MIL::Util::HashCombine(&v19, v6);
  }
  uint64_t v7 = a2[3];
  uint64_t v8 = (std::__shared_weak_count *)a2[4];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    uint64_t v9 = (unint64_t ***)a2[3];
    size_t v10 = *v9;
    uint64_t v11 = v9[1];
    while (v10 != v11)
      MIL::Util::HashCombine(&v19, *v10++);
  }
  else
  {
    MIL::Util::HashCombine(&v19, 0);
  }
  uint64_t v12 = a2[5];
  uint64_t v13 = (std::__shared_weak_count *)a2[6];
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12)
  {
    uint64_t v14 = (unint64_t ***)a2[5];
    char v15 = *v14;
    char v16 = v14[1];
    while (v15 != v16)
      MIL::Util::HashCombine(&v19, *v15++);
  }
  else
  {
    MIL::Util::HashCombine(&v19, 0);
  }
  uint64_t v19 = v17;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v17;
}

void sub_20F3AF164(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  size_t v7 = *(void *)(v5 + 8) - *(void *)v5;
  if (v7 != *(void *)(v6 + 8) - *(void *)v6 || memcmp(*(const void **)v5, *(const void **)v6, v7)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(std::__shared_weak_count **)(a2 + 32);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(void *)(a3 + 24);
  uint64_t v11 = *(std::__shared_weak_count **)(a3 + 32);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((v8 != 0) != (v10 != 0)
    || v8
    && v10
    && ((size_t v12 = *(void *)(v8 + 8) - *(void *)v8, v12 != *(void *)(v10 + 8) - *(void *)v10)
     || memcmp(*(const void **)v8, *(const void **)v10, v12)))
  {
    int v13 = 0;
    if (!v11) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  int v13 = 1;
  if (v11) {
LABEL_14:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_15:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (!v13) {
    return 0;
  }
  uint64_t v14 = *(void *)(a2 + 40);
  char v15 = *(std::__shared_weak_count **)(a2 + 48);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(void *)(a3 + 40);
  uint64_t v17 = *(std::__shared_weak_count **)(a3 + 48);
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v18 = (v14 != 0) == (v16 != 0)
     && (!v14
      || !v16
      || !std::operator!=[abi:ne180100]<MIL::IRProperty const*,std::allocator<MIL::IRProperty const*>>(v14, v16));
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (!v18) {
    return 0;
  }
}

void sub_20F3AF340(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRTypeStore<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRCircularBufferValueType const>::Get<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  char v15 = (std::__shared_weak_count *)a3[1];
  uint64_t v30 = *a3;
  uint64_t v31 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)a4[1];
  uint64_t v28 = *a4;
  uint64_t v29 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v17 = (std::__shared_weak_count *)a5[1];
  uint64_t v26 = *a5;
  long long v27 = v17;
  if (v17) {
    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v18 = (std::__shared_weak_count *)a6[1];
  uint64_t v24 = *a6;
  uint64_t v25 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>::unordered_map((uint64_t)v23, a8);
  v39[0] = a2;
  uint64_t v38 = a7;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6EEEEJN3MIL10IRDataTypeENS_10shared_ptrINS_6vectorIPKNS3_11IRDimensionENS_9allocatorIS9_EEEEEESD_NS5_INS6_IPKNS3_10IRPropertyENSA_ISG_EEEEEESJ_SG_NS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENSA_IcEEEENS5_IKNS3_7IRValueEEENS_4hashISP_EENS_8equal_toISP_EENSA_INS_4pairIKSP_SS_EEEEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6EEJS4_SD_SD_SJ_SJ_SG_S11_EJEJEJRS4_RSD_S15_RSJ_S16_RSG_S11_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS19_IJDpT2_EEEDpOT3_((uint64_t)v32, v39, &v30, &v28, &v26, &v24, &v38, v23);
  uint64_t v38 = 0;
  uint64_t v19 = std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>>>::__emplace_unique_key_args<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,decltype(nullptr)>(a1, v32, (uint64_t)v32);
  char v21 = v20;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&v37);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v23);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v21)
  {
    *a3 = 0;
    a3[1] = 0;
    *a4 = 0;
    a4[1] = 0;
    *a5 = 0;
    a5[1] = 0;
    *a6 = 0;
    a6[1] = 0;
    MIL::IRCircularBufferValueType::Make();
  }
  return v19[17];
}

void sub_20F3AF5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::make_unique[abi:ne180100]<MIL::IRCircularBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,MIL::IRProperty const*&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v10, v11, v12);
  _Unwind_Resume(a1);
}

void *std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::~tuple(void *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(a1 + 10));
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a1;
}

uint64_t std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(uint64_t a1, int *a2)
{
  uint64_t v20 = 0;
  MIL::Util::HashCombine(&v20, (unint64_t *)*a2);
  uint64_t v3 = (unint64_t ***)*((void *)a2 + 1);
  size_t v4 = *v3;
  uint64_t v5 = v3[1];
  while (v4 != v5)
  {
    uint64_t v6 = *v4++;
    MIL::Util::HashCombine(&v20, v6);
  }
  size_t v7 = (unint64_t ***)*((void *)a2 + 3);
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  while (v8 != v9)
  {
    uint64_t v10 = *v8++;
    MIL::Util::HashCombine(&v20, v10);
  }
  uint64_t v11 = (unint64_t ***)*((void *)a2 + 5);
  size_t v12 = *v11;
  int v13 = v11[1];
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    MIL::Util::HashCombine(&v20, v14);
  }
  char v15 = (unint64_t ***)*((void *)a2 + 7);
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  while (v16 != v17)
  {
    BOOL v18 = *v16++;
    MIL::Util::HashCombine(&v20, v18);
  }
  MIL::Util::HashCombine(&v20, *((unint64_t **)a2 + 9));
}

BOOL std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_DWORD *)a2 != *(_DWORD *)a3) {
    return 0;
  }
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a3 + 8);
  size_t v7 = *(void *)(v5 + 8) - *(void *)v5;
  if (v7 != *(void *)(v6 + 8) - *(void *)v6) {
    return 0;
  }
  if (memcmp(*(const void **)v5, *(const void **)v6, v7)) {
    return 0;
  }
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(a3 + 24);
  size_t v10 = *(void *)(v8 + 8) - *(void *)v8;
  if (v10 != *(void *)(v9 + 8) - *(void *)v9) {
    return 0;
  }
  if (memcmp(*(const void **)v8, *(const void **)v9, v10)) {
    return 0;
  }
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a3 + 40);
  size_t v13 = *(void *)(v11 + 8) - *(void *)v11;
  if (v13 != *(void *)(v12 + 8) - *(void *)v12) {
    return 0;
  }
  if (memcmp(*(const void **)v11, *(const void **)v12, v13)) {
    return 0;
  }
  uint64_t v14 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a3 + 56);
  size_t v16 = *(void *)(v14 + 8) - *(void *)v14;
  if (v16 != *(void *)(v15 + 8) - *(void *)v15
    || memcmp(*(const void **)v14, *(const void **)v15, v16)
    || *(void *)(a2 + 72) != *(void *)(a3 + 72))
  {
    return 0;
  }
}

uint64_t MIL::IRTypeStore<MIL::IRValueType const*,MIL::IRStateValueType const>::Get<MIL::IRValueType const*>(uint64_t a1, MIL::IRStateValueType *a2)
{
  uint64_t v6 = a2;
  size_t v4 = std::__hash_table<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::__unordered_map_hasher<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,true>,std::__unordered_map_equal<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::equal_to<MIL::IRValueType const*>,std::hash<MIL::IRValueType const*>,true>,std::allocator<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>>>::__emplace_unique_key_args<MIL::IRValueType const*,MIL::IRValueType const*,decltype(nullptr)>(a1, &v6, &v6);
  if ((_BYTE)v3) {
    MIL::IRStateValueType::Make(a2, v3);
  }
  return v4[3];
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5EEEEJN3MIL10IRDataTypeENS_10shared_ptrINS_6vectorIPKNS3_11IRDimensionENS_9allocatorIS9_EEEEEENS5_INS6_IPKNS3_10IRPropertyENSA_ISG_EEEEEESG_SJ_NS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENSA_IcEEEENS5_IKNS3_7IRValueEEENS_4hashISP_EENS_8equal_toISP_EENSA_INS_4pairIKSP_SS_EEEEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5EEJS4_SD_SJ_SG_SJ_S11_EJEJEJRS4_RSD_RSJ_RSG_S16_S11_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS19_IJDpT2_EEEDpOT3_(uint64_t a1, _DWORD *a2, void *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7)
{
  *(_DWORD *)a1 = *a2;
  uint64_t v8 = a3[1];
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *a3;
  *(void *)(a1 + 16) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a4[1];
  *(void *)(a1 + 24) = *a4;
  *(void *)(a1 + 32) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *a6;
  uint64_t v10 = a6[1];
  *(void *)(a1 + 40) = *a5;
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v11;
  *(void *)(a1 + 56) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 64, a7);
  return a1;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJN3MIL17IRPixelFormatTypeENS_10shared_ptrINS_6vectorIPKNS3_11IRDimensionENS_9allocatorIS9_EEEEEENS5_INS6_IPKNS3_10IRPropertyENSA_ISG_EEEEEESJ_NS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENSA_IcEEEENS5_IKNS3_7IRValueEEENS_4hashISP_EENS_8equal_toISP_EENSA_INS_4pairIKSP_SS_EEEEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJS4_SD_SJ_SJ_S11_EJEJEJRS4_RSD_RSJ_S16_S11_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS18_IJDpT2_EEEDpOT3_(uint64_t a1, _DWORD *a2, void *a3, void *a4, void *a5, uint64_t *a6)
{
  *(_DWORD *)a1 = *a2;
  uint64_t v7 = a3[1];
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *a3;
  *(void *)(a1 + 16) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = a4[1];
  *(void *)(a1 + 24) = *a4;
  *(void *)(a1 + 32) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a5[1];
  *(void *)(a1 + 40) = *a5;
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 56, a6);
  return a1;
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4ELm5ELm6EEEEJN3MIL10IRDataTypeENS_10shared_ptrINS_6vectorIPKNS3_11IRDimensionENS_9allocatorIS9_EEEEEESD_NS5_INS6_IPKNS3_10IRPropertyENSA_ISG_EEEEEESJ_SG_NS_13unordered_mapINS_12basic_stringIcNS_11char_traitsIcEENSA_IcEEEENS5_IKNS3_7IRValueEEENS_4hashISP_EENS_8equal_toISP_EENSA_INS_4pairIKSP_SS_EEEEEEEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4ELm5ELm6EEJS4_SD_SD_SJ_SJ_SG_S11_EJEJEJRS4_RSD_S15_RSJ_S16_RSG_S11_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENS19_IJDpT2_EEEDpOT3_(uint64_t a1, _DWORD *a2, void *a3, void *a4, void *a5, void *a6, void *a7, uint64_t *a8)
{
  *(_DWORD *)a1 = *a2;
  uint64_t v9 = a3[1];
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *a3;
  *(void *)(a1 + 16) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a4[1];
  *(void *)(a1 + 24) = *a4;
  *(void *)(a1 + 32) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = a5[1];
  *(void *)(a1 + 40) = *a5;
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = a6[1];
  *(void *)(a1 + 56) = *a6;
  *(void *)(a1 + 64) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *a7;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 80, a8);
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long,decltype(nullptr)>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  void *i = *v12;
  *uint64_t v12 = i;
  *(void *)(v19 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3AFD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[3];
    std::string __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::__emplace_unique_key_args<long long,long long,decltype(nullptr)>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  void *i = *v12;
  *uint64_t v12 = i;
  *(void *)(v19 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3B0014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[3];
    std::string __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void *std::__hash_table<std::__hash_value_type<unsigned char,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned char,std::__hash_value_type<unsigned char,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned char>,std::equal_to<unsigned char>,true>,std::__unordered_map_equal<unsigned char,std::__hash_value_type<unsigned char,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned char>,std::hash<unsigned char>,true>,std::allocator<std::__hash_value_type<unsigned char,std::unique_ptr<MIL::IRConstantProperty const>>>>::__emplace_unique_key_args<unsigned char,unsigned char,decltype(nullptr)>(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((unsigned __int8 *)v10 + 16) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  uint64_t v10 = operator new(0x20uLL);
  void *v10 = 0;
  v10[1] = v6;
  *((unsigned char *)v10 + 16) = *a3;
  v10[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *v10 = *v20;
LABEL_38:
    void *v20 = v10;
    goto LABEL_39;
  }
  void *v10 = *v12;
  *uint64_t v12 = v10;
  *(void *)(v19 + 8 * v3) = v12;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_20F3B02E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::__emplace_unique_key_args<unsigned long long,unsigned long long,decltype(nullptr)>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v12 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v6;
  i[2] = *a3;
  i[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    void *i = *v20;
LABEL_38:
    void *v20 = i;
    goto LABEL_39;
  }
  void *i = *v12;
  *uint64_t v12 = i;
  *(void *)(v19 + 8 * v3) = v12;
  if (*i)
  {
    unint64_t v21 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3B052C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<long long,std::unique_ptr<MIL::IRConstantProperty const>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>>>::__emplace_unique_key_args<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,decltype(nullptr)>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v7 = std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            LOBYTE(v7) = std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(v7, (uint64_t)(v13 + 2), (uint64_t)a2);
            if (v7) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  BOOL v15 = (char *)operator new(0x58uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *(void *)BOOL v15 = 0;
  *((void *)v15 + 1) = v8;
  *((_DWORD *)v15 + 4) = *(_DWORD *)a3;
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(a3 + 8);
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v15 + 40), (uint64_t *)(a3 + 24));
  *((void *)v15 + 10) = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *uint64_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  float v13 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v13;
}

void sub_20F3B07C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRTensorValueType const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRTensorValueType const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a1 + 24);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>>>::__emplace_unique_key_args<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,decltype(nullptr)>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v8 = *a2;
  unint64_t v7 = (unint64_t *)a2[1];
  v27[0] = v8;
  MIL::Util::HashCombine(v27, v7);
  unint64_t v9 = v27[0];
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v27[0];
      if (v27[0] >= v10) {
        unint64_t v3 = v27[0] % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v27[0];
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v27[0])
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = (void *)(a1 + 16);
  unint64_t i = operator new(0x28uLL);
  v27[1] = a1 + 16;
  void *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = 0;
  char v28 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *i = *v24;
LABEL_42:
    *uint64_t v24 = i;
    goto LABEL_43;
  }
  void *i = *v16;
  *float v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3B0AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[4];
    __p[4] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

const void ***std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::__emplace_unique_key_args<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::shared_ptr<std::vector<MIL::IRValueType const*>>,decltype(nullptr)>(uint64_t a1, unint64_t ****a2, uint64_t a3)
{
  unint64_t v7 = std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>::operator()(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(const void *****)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (const void ***)*i)
      {
        unint64_t v14 = (unint64_t)i[1];
        if (v14 == v8)
        {
          LOBYTE(v7) = std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>::operator()(v7, i + 2, (uint64_t *)a2);
          if (v7) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9) {
              v14 %= v9;
            }
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  BOOL v15 = operator new(0x28uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *BOOL v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  v15[4] = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  unint64_t i = (const void ***)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_20F3B0DFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<std::vector<MIL::IRValueType const*>> const,std::unique_ptr<MIL::IRTupleValueType const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<std::vector<MIL::IRValueType const*>> const,std::unique_ptr<MIL::IRTupleValueType const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::__emplace_unique_key_args<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,decltype(nullptr)>(uint64_t a1, uint64_t *a2, _OWORD *a3)
{
  uint64_t v8 = *a2;
  unint64_t v7 = (unint64_t *)a2[1];
  v27[0] = v8;
  MIL::Util::HashCombine(v27, v7);
  unint64_t v9 = v27[0];
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v27[0];
      if (v27[0] >= v10) {
        unint64_t v3 = v27[0] % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v27[0];
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      for (unint64_t i = *v12; i; unint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v27[0])
        {
          if (i[2] == *a2 && i[3] == a2[1]) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v3) {
            break;
          }
        }
      }
    }
  }
  float v16 = (void *)(a1 + 16);
  unint64_t i = operator new(0x28uLL);
  v27[1] = a1 + 16;
  void *i = 0;
  i[1] = v9;
  *((_OWORD *)i + 1) = *a3;
  i[4] = 0;
  char v28 = 1;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    BOOL v19 = 1;
    if (v10 >= 3) {
      BOOL v19 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v10);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v3);
  if (v24)
  {
    void *i = *v24;
LABEL_42:
    *uint64_t v24 = i;
    goto LABEL_43;
  }
  void *i = *v16;
  *float v16 = i;
  *(void *)(v23 + 8 * v3) = v16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10) {
        v25 %= v10;
      }
    }
    else
    {
      v25 &= v10 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_42;
  }
LABEL_43:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3B112C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,std::unique_ptr<MIL::IRListValueType const>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>>>::__emplace_unique_key_args<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,decltype(nullptr)>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v7 = std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            LOBYTE(v7) = std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(v7, (uint64_t)(v13 + 2), (uint64_t)a2);
            if (v7) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  BOOL v15 = operator new(0x80uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *BOOL v15 = 0;
  v15[1] = v8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::__tuple_impl((uint64_t)(v15 + 2), a3);
  v15[15] = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  float v13 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v13;
}

void sub_20F3B13AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul>,MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 48);
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 56) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 64, (uint64_t *)(a2 + 64));
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRTensorBufferValueType const>>,0>(v2 + 2);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRTensorBufferValueType const>>,0>(void *a1)
{
  uint64_t v2 = a1[13];
  a1[13] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(a1 + 8));
  unint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void *std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>>>::__emplace_unique_key_args<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,decltype(nullptr)>(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v7 = std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            LOBYTE(v7) = std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(v7, (uint64_t)(v13 + 2), (uint64_t)a2);
            if (v7) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  BOOL v15 = operator new(0x78uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *BOOL v15 = 0;
  v15[1] = v8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::__tuple_impl((uint64_t)(v15 + 2), a3);
  v15[14] = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  float v13 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v13;
}

void sub_20F3B1778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul>,MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 56, (uint64_t *)(a2 + 56));
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRPixelBufferValueType const>>,0>(v2 + 2);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRPixelBufferValueType const>>,0>(void *a1)
{
  uint64_t v2 = a1[12];
  a1[12] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(a1 + 7));
  unint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void *std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>>>::__emplace_unique_key_args<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,decltype(nullptr)>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v7 = std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(a1, a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      float v13 = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v8)
          {
            LOBYTE(v7) = std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>::operator()(v7, (uint64_t)(v13 + 2), (uint64_t)a2);
            if (v7) {
              return v13;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9) {
                v14 %= v9;
              }
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v3) {
              break;
            }
          }
          float v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  BOOL v15 = operator new(0x90uLL);
  v25[0] = v15;
  v25[1] = a1 + 16;
  *BOOL v15 = 0;
  v15[1] = v8;
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::__tuple_impl((uint64_t)(v15 + 2), a3);
  v15[17] = 0;
  char v26 = 1;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    *size_t v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  float v13 = (void *)v25[0];
  v25[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return v13;
}

void sub_20F3B1B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul,4ul,5ul,6ul>,MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table(a1 + 80, (uint64_t *)(a2 + 80));
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRCircularBufferValueType const>>,0>(v2 + 2);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRCircularBufferValueType const>>,0>(void *a1)
{
  uint64_t v2 = a1[15];
  a1[15] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)(a1 + 10));
  unint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  size_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void *std::__hash_table<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::__unordered_map_hasher<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,true>,std::__unordered_map_equal<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::equal_to<MIL::IRValueType const*>,std::hash<MIL::IRValueType const*>,true>,std::allocator<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>>>::__emplace_unique_key_args<MIL::IRValueType const*,MIL::IRValueType const*,decltype(nullptr)>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t v14 = (void *)(a1 + 16);
  unint64_t i = operator new(0x20uLL);
  void *i = 0;
  i[1] = v8;
  i[2] = *a3;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    BOOL v17 = 1;
    if (v9 >= 3) {
      BOOL v17 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v9);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v20);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v3);
  if (v22)
  {
    void *i = *v22;
LABEL_38:
    *size_t v22 = i;
    goto LABEL_39;
  }
  void *i = *v14;
  void *v14 = i;
  *(void *)(v21 + 8 * v3) = v14;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9) {
        v23 %= v9;
      }
    }
    else
    {
      v23 &= v9 - 1;
    }
    size_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20F3B1F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,void *>>>::operator()[abi:ne180100](v11, v10);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,void *>>>::operator()[abi:ne180100](uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p[3];
    std::string __p[3] = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t MIL::IsEqualOrStrongerType(MIL *this, const MIL::IRValueType *a2, const MIL::IRValueType *a3)
{
  if (this == a2) {
    return 1;
  }
  uint64_t v3 = a2;
  size_t v4 = this;
  while (1)
  {
    uint64_t v5 = (*(uint64_t (**)(MIL *))(*(void *)v4 + 24))(v4);
    if (v5)
    {
      uint64_t v16 = v5;
      uint64_t HasEqualOrStrongerShape = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)v3 + 24))(v3);
      if (!HasEqualOrStrongerShape) {
        return HasEqualOrStrongerShape;
      }
      if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 88))(v16) == 18
        || (int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 88))(v16),
            v17 == (*(unsigned int (**)(uint64_t))(*(void *)HasEqualOrStrongerShape + 88))(HasEqualOrStrongerShape)))
      {
        uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 96))(v16);
        uint64_t v71 = 0;
        uint64_t v72 = 0;
        int v70 = 0;
        std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v70, *(const void **)v18, *(void *)(v18 + 8), (uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3);
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)HasEqualOrStrongerShape + 96))(HasEqualOrStrongerShape);
        uint64_t v67 = 0;
        int v68 = 0;
        uint64_t v69 = 0;
        std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v67, *(const void **)v19, *(void *)(v19 + 8), (uint64_t)(*(void *)(v19 + 8) - *(void *)v19) >> 3);
        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 104))(v16);
        int v64 = 0;
        size_t v65 = 0;
        uint64_t v66 = 0;
        std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v64, v70, (uint64_t)v71, (v71 - (unsigned char *)v70) >> 3);
        int v21 = (*(uint64_t (**)(uint64_t))(*(void *)HasEqualOrStrongerShape + 104))(HasEqualOrStrongerShape);
        std::string __p = 0;
        int v62 = 0;
        uint64_t v63 = 0;
        std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, v67, (uint64_t)v68, (v68 - (unsigned char *)v67) >> 3);
        if (__p)
        {
          int v62 = __p;
          operator delete(__p);
        }
        if (v64)
        {
          size_t v65 = v64;
          operator delete(v64);
        }
        if (v67)
        {
          int v68 = v67;
          operator delete(v67);
        }
        if (v70)
        {
          uint64_t v71 = v70;
          operator delete(v70);
        }
        return HasEqualOrStrongerShape;
      }
      return 0;
    }
    uint64_t v6 = (*(uint64_t (**)(MIL *))(*(void *)v4 + 32))(v4);
    if (!v6) {
      break;
    }
    uint64_t v7 = v6;
    uint64_t HasEqualOrStrongerShape = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)v3 + 32))(v3);
    if (!HasEqualOrStrongerShape) {
      return HasEqualOrStrongerShape;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 72))(v7);
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)HasEqualOrStrongerShape + 72))(HasEqualOrStrongerShape);
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12);
      if (!v13) {
        return 0;
      }
      uint64_t v14 = v13;
      uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 48))(v11);
      if (v15 != (*(uint64_t (**)(uint64_t))(*(void *)v14 + 48))(v14)) {
        return 0;
      }
    }
    size_t v4 = (MIL *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 64))(v7);
    uint64_t v3 = (const MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)HasEqualOrStrongerShape + 64))(HasEqualOrStrongerShape);
    if (v4 == v3) {
      return 1;
    }
  }
  uint64_t v22 = (*(uint64_t (**)(MIL *))(*(void *)v4 + 40))(v4);
  if (!v22)
  {
    uint64_t v35 = (*(uint64_t (**)(MIL *))(*(void *)v4 + 48))(v4);
    if (v35)
    {
      uint64_t v36 = (_anonymous_namespace_ *)v35;
      uint64_t v37 = (const MIL::IRDictionaryValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)v3 + 48))(v3);
      if (v37)
      {
      }
      return 0;
    }
    uint64_t v40 = MIL::IRValueType::TryCastAsMemoryLayoutType(v4);
    if (!v40) {
      goto LABEL_54;
    }
    uint64_t v41 = v40;
    uint64_t v42 = (_anonymous_namespace_ *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v40);
    uint64_t v43 = (_anonymous_namespace_ *)MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v41);
    if (v42)
    {
      uint64_t v44 = MIL::IRValueType::TryCastAsMemoryLayoutType(v3);
      if (v44)
      {
        uint64_t v45 = (const MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v44);
        if (v45)
        {
        }
      }
      return 0;
    }
    uint64_t v47 = v43;
    if (v43)
    {
      uint64_t v48 = MIL::IRValueType::TryCastAsMemoryLayoutType(v3);
      if (v48)
      {
        size_t v49 = (const MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v48);
        if (v49)
        {
        }
      }
      return 0;
    }
    long long v51 = (_anonymous_namespace_ *)MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(v41);
    if (v51)
    {
      uint64_t v52 = v51;
      uint64_t v53 = MIL::IRValueType::TryCastAsMemoryLayoutType(v3);
      if (v53)
      {
        std::string v54 = (const MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(v53);
        if (v54)
        {
        }
      }
    }
    else
    {
LABEL_54:
      int v56 = (_anonymous_namespace_ *)MIL::IRValueType::TryCastAsStateType(v4);
      if (!v56)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Unsupported MIL type for comparison.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      size_t v57 = v56;
      int v58 = (const MIL::IRStateValueType *)MIL::IRValueType::TryCastAsStateType(v3);
      if (v58)
      {
      }
    }
    return 0;
  }
  uint64_t v23 = v22;
  uint64_t v24 = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)v3 + 40))(v3);
  if (!v24) {
    return 0;
  }
  uint64_t v25 = v24;
  char v26 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 64))(v23);
  uint64_t v27 = v26[1] - *v26;
  char v28 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 64))(v25);
  if (v27 != v28[1] - *v28) {
    return 0;
  }
  uint64_t v29 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 64))(v23);
  if (v29[1] == *v29) {
    return 1;
  }
  unint64_t v30 = 0;
  do
  {
    uint64_t v31 = *(MIL **)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 64))(v23) + 8 * v30);
    uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 64))(v25);
    uint64_t HasEqualOrStrongerShape = MIL::IsEqualOrStrongerType(v31, *(const MIL::IRValueType **)(*v32 + 8 * v30), v33);
    if ((HasEqualOrStrongerShape & 1) == 0) {
      break;
    }
    ++v30;
    uint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 64))(v23);
  }
  while (v30 < (uint64_t)(v34[1] - *v34) >> 3);
  return HasEqualOrStrongerShape;
}

void sub_20F3B27FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  __cxa_free_exception(v19);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IsEqualOrStrongerDictType(_anonymous_namespace_ *this, const MIL::IRDictionaryValueType *a2, const MIL::IRDictionaryValueType *a3)
{
  uint64_t v5 = (MIL *)(*(uint64_t (**)(_anonymous_namespace_ *, const MIL::IRDictionaryValueType *, const MIL::IRDictionaryValueType *))(*(void *)this + 64))(this, a2, a3);
  uint64_t v6 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(void *)a2 + 64))(a2);
  uint64_t result = MIL::IsEqualOrStrongerType(v5, v6, v7);
  if (result)
  {
    uint64_t v9 = (MIL *)(*(uint64_t (**)(_anonymous_namespace_ *))(*(void *)this + 72))(this);
    uint64_t v10 = (const MIL::IRValueType *)(*(uint64_t (**)(const MIL::IRDictionaryValueType *))(*(void *)a2 + 72))(a2);
    return MIL::IsEqualOrStrongerType(v9, v10, v11);
  }
  return result;
}

uint64_t anonymous namespace'::IsEqualOrStrongerTensorBufferType(_anonymous_namespace_ *this, const MIL::IRTensorBufferValueType *a2, const MIL::IRTensorBufferValueType *a3)
{
  if (MIL::IRTensorBufferValueType::GetDataType(this) != 18)
  {
    Datauint64_t Type = MIL::IRTensorBufferValueType::GetDataType(this);
    if (DataType != MIL::IRTensorBufferValueType::GetDataType(a2)) {
      return 0;
    }
  }
  if (!result) {
    return result;
  }
  BOOL v8 = MIL::IRTensorBufferValueType::TryGetStrides(a2) == 0;
  if (v8 == (MIL::IRTensorBufferValueType::TryGetStrides(this) != 0)) {
    return 0;
  }
  if (MIL::IRTensorBufferValueType::TryGetStrides(a2) && MIL::IRTensorBufferValueType::TryGetStrides(this))
  {
    uint64_t Strides = MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)this);
    int v21 = 0;
    uint64_t v22 = 0;
    int v20 = 0;
    std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v20, *(const void **)Strides, *(void *)(Strides + 8), (uint64_t)(*(void *)(Strides + 8) - *(void *)Strides) >> 3);
    uint64_t v10 = MIL::IRTensorBufferValueType::GetStrides((MIL::IRTensorBufferValueTypeImpl **)a2);
    std::string __p = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&__p, *(const void **)v10, *(void *)(v10 + 8), (uint64_t)(*(void *)(v10 + 8) - *(void *)v10) >> 3);
    if (__p)
    {
      uint64_t v18 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      int v21 = v20;
      operator delete(v20);
    }
    if (!IsEqualOrStrongerPropertiesVec) {
      return 0;
    }
  }
  BOOL v12 = MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(a2) == 0;
  if (v12 == (MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(this) != 0)) {
    return 0;
  }
  if (!MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(a2)) {
    return 1;
  }
  if (!MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(this)) {
    return 1;
  }
  uint64_t RowAlignmentInBytes = MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(this);
  uint64_t v14 = MIL::IRTensorBufferValueType::TryGetRowAlignmentInBytes(a2);
  uint64_t v15 = operator new(8uLL);
  *uint64_t v15 = RowAlignmentInBytes;
  int v21 = v15 + 1;
  uint64_t v22 = v15 + 1;
  int v20 = v15;
  uint64_t v16 = operator new(8uLL);
  *uint64_t v16 = v14;
  uint64_t v18 = v16 + 1;
  uint64_t v19 = v16 + 1;
  std::string __p = v16;
  operator delete(v16);
  operator delete(v15);
  return (v14 & 1) != 0;
}

void sub_20F3B2B60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  uint64_t v15 = v14;
  operator delete(v15);
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::IsEqualOrStrongerPixelBufferType(_anonymous_namespace_ *this, const MIL::IRPixelBufferValueType *a2, const MIL::IRPixelBufferValueType *a3)
{
  if (MIL::IRPixelBufferValueType::GetPixelFormatType(this) != 20)
  {
    PixelFormatuint64_t Type = MIL::IRPixelBufferValueType::GetPixelFormatType(this);
    if (PixelFormatType != MIL::IRPixelBufferValueType::GetPixelFormatType(a2)) {
      return 0;
    }
  }
  uint64_t Shape = MIL::IRPixelBufferValueType::GetShape(this);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v18 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v18, *(const void **)Shape, *(void *)(Shape + 8), (uint64_t)(*(void *)(Shape + 8) - *(void *)Shape) >> 3);
  uint64_t v7 = MIL::IRPixelBufferValueType::GetShape(a2);
  std::string __p = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v7, *(void *)(v7 + 8), (uint64_t)(*(void *)(v7 + 8) - *(void *)v7) >> 3);
  if (__p)
  {
    uint64_t v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    uint64_t v19 = v18;
    operator delete(v18);
  }
  if (!HasEqualOrStrongerShape) {
    return 0;
  }
  uint64_t BytesPerRow = MIL::IRPixelBufferValueType::TryGetBytesPerRow(this);
  uint64_t v11 = (void ***)MIL::IRPixelBufferValueType::TryGetBytesPerRow(a2);
  if (!BytesPerRow)
  {
    if (v11) {
      return 0;
    }
  }
  if (BytesPerRow && v11) {
  if (!BytesPerRow)
  }
    return 1;
  if (v11) {
    return 1;
  }
  uint64_t v13 = *(void ***)BytesPerRow;
  if (*(void *)(BytesPerRow + 8) == *(void *)BytesPerRow) {
    return 1;
  }
  unint64_t v14 = 0;
  while (1)
  {
    uint64_t result = (uint64_t)MIL::IRProperty::TryAsUnknown(v13[v14]);
    if (!result) {
      break;
    }
    if ((MIL::IRUnknownProperty::IsVariadic((MIL::IRUnknownProperty *)result) & 1) == 0) {
      return 0;
    }
    ++v14;
    uint64_t v13 = *(void ***)BytesPerRow;
    if (v14 >= (uint64_t)(*(void *)(BytesPerRow + 8) - *(void *)BytesPerRow) >> 3) {
      return 1;
    }
  }
  return result;
}

void sub_20F3B2D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL anonymous namespace'::IsEqualOrStrongerCircularBufferType(_anonymous_namespace_ *this, const MIL::IRCircularBufferValueType *a2, const MIL::IRCircularBufferValueType *a3)
{
  if (MIL::IRCircularBufferValueType::GetDataType(this) != 18)
  {
    Datauint64_t Type = MIL::IRCircularBufferValueType::GetDataType(this);
    if (DataType != MIL::IRCircularBufferValueType::GetDataType(a2)) {
      return 0;
    }
  }
  WrapDim = (void *)MIL::IRCircularBufferValueType::GetWrapDim(this);
  if (!MIL::IRProperty::TryAsUnknown(WrapDim))
  {
    uint64_t v11 = (void *)MIL::IRCircularBufferValueType::GetWrapDim(a2);
    if (MIL::IRProperty::TryAsUnknown(v11)) {
      return 0;
    }
    BOOL v12 = (void *)MIL::IRCircularBufferValueType::GetWrapDim(this);
    uint64_t v13 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(v12);
    Int64Scalaruint64_t Value = MIL::IRConstantProperty::GetInt64ScalarValue(v13);
    uint64_t v15 = (void *)MIL::IRCircularBufferValueType::GetWrapDim(a2);
    uint64_t v16 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(v15);
    if (Int64ScalarValue != MIL::IRConstantProperty::GetInt64ScalarValue(v16)) {
      return 0;
    }
  }
    return 0;
  uint64_t Strides = MIL::IRCircularBufferValueType::GetStrides(this);
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  int v21 = 0;
  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&v21, *(const void **)Strides, *(void *)(Strides + 8), (uint64_t)(*(void *)(Strides + 8) - *(void *)Strides) >> 3);
  uint64_t v9 = MIL::IRCircularBufferValueType::GetStrides(a2);
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(&__p, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  if (v21)
  {
    uint64_t v22 = v21;
    operator delete(v21);
  }
  return IsEqualOrStrongerPropertiesVec;
}

void sub_20F3B2E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::IsEqualOrStrongerStateType(_anonymous_namespace_ *this, const MIL::IRStateValueType *a2, const MIL::IRStateValueType *a3)
{
  Wrappeduint64_t Type = (MIL *)MIL::IRStateValueType::GetWrappedType(this);
  uint64_t v5 = (const MIL::IRValueType *)MIL::IRStateValueType::GetWrappedType(a2);

  return MIL::IsEqualOrStrongerType(WrappedType, v5, v6);
}

const MIL::IRValueType *MIL::GetStrongestCompatibleType(MIL *this, MIL::MILContext *a2, const MIL::IRValueType *a3, const MIL::IRValueType *a4)
{
  uint64_t v5 = a2;
  if ((MIL::IsEqualOrStrongerType(a2, a3, a3) & 1) == 0)
  {
    if (MIL::IsEqualOrStrongerType(a3, v5, v7)) {
      return a3;
    }
    BOOL v8 = (MIL::IRTensorValueType *)(*(uint64_t (**)(const MIL::IRValueType *))(*(void *)v5 + 24))(v5);
    uint64_t v9 = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a3 + 24))(a3);
    if (v8) {
      BOOL v10 = v9 == 0;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10) {
      return 0;
    }
    uint64_t v11 = (MIL::IRTensorValueType *)v9;
    if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v8 + 104))(v8)) {
      return 0;
    }
    if (!(*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v11 + 104))(v11)) {
      return 0;
    }
    uint64_t v12 = MIL::IRTensorValueType::Rank(v8);
    if (v12 != MIL::IRTensorValueType::Rank(v11)) {
      return 0;
    }
    int v13 = (*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 88))(v8);
    if (v13 != (*(unsigned int (**)(MIL::IRTensorValueType *))(*(void *)v11 + 88))(v11)) {
      return 0;
    }
    unint64_t v14 = (uint64_t *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v8 + 96))(v8);
    uint64_t v15 = (void *)(*(uint64_t (**)(MIL::IRTensorValueType *))(*(void *)v11 + 96))(v11);
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    std::string __p = 0;
    std::vector<std::string const*>::reserve(&__p, (v14[1] - *v14) >> 3);
    uint64_t v16 = *v14;
    if (v14[1] == *v14)
    {
LABEL_49:
      (*(void (**)(MIL::IRTensorValueType *))(*(void *)v8 + 88))(v8);
      MIL::IRTensorValueType::MakeWithShape();
    }
    unint64_t v17 = 0;
    while (1)
    {
      uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(v16 + 8 * v17) + 16))(*(void *)(v16 + 8 * v17));
      uint64_t v19 = (*(uint64_t (**)(void))(**(void **)(*v15 + 8 * v17) + 16))(*(void *)(*v15 + 8 * v17));
      uint64_t v20 = v19;
      if (v18) {
        BOOL v21 = v19 == 0;
      }
      else {
        BOOL v21 = 1;
      }
      if (v21
        || (uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 48))(v18),
            v22 != (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20)))
      {
        uint64_t v18 = MIL::IRUnknownDimension::Make(this, 0);
        uint64_t v23 = v39;
        if (v39 >= (uint64_t *)v40)
        {
          uint64_t v29 = ((char *)v39 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v29 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v30 = (v40 - (unsigned char *)__p) >> 2;
          if (v30 <= v29 + 1) {
            unint64_t v30 = v29 + 1;
          }
          if ((unint64_t)(v40 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v30;
          }
          if (v26) {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v40, v26);
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v31 = (uint64_t *)&v27[8 * v29];
          *uint64_t v31 = v18;
          char v28 = v31 + 1;
          int v33 = (char *)__p;
          uint64_t v32 = (char *)v39;
          if (v39 != __p)
          {
            do
            {
              uint64_t v34 = *((void *)v32 - 1);
              v32 -= 8;
              *--uint64_t v31 = v34;
            }
            while (v32 != v33);
LABEL_45:
            uint64_t v32 = (char *)__p;
          }
LABEL_46:
          std::string __p = v31;
          uint64_t v39 = v28;
          uint64_t v40 = &v27[8 * v26];
          if (v32) {
            operator delete(v32);
          }
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v23 = v39;
        if (v39 >= (uint64_t *)v40)
        {
          uint64_t v24 = ((char *)v39 - (unsigned char *)__p) >> 3;
          if ((unint64_t)(v24 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v25 = (v40 - (unsigned char *)__p) >> 2;
          if (v25 <= v24 + 1) {
            unint64_t v25 = v24 + 1;
          }
          if ((unint64_t)(v40 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26) {
            uint64_t v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v40, v26);
          }
          else {
            uint64_t v27 = 0;
          }
          uint64_t v31 = (uint64_t *)&v27[8 * v24];
          *uint64_t v31 = v18;
          char v28 = v31 + 1;
          uint64_t v35 = (char *)__p;
          uint64_t v32 = (char *)v39;
          if (v39 != __p)
          {
            do
            {
              uint64_t v36 = *((void *)v32 - 1);
              v32 -= 8;
              *--uint64_t v31 = v36;
            }
            while (v32 != v35);
            goto LABEL_45;
          }
          goto LABEL_46;
        }
      }
      uint64_t *v23 = v18;
      char v28 = v23 + 1;
LABEL_48:
      uint64_t v39 = v28;
      ++v17;
      uint64_t v16 = *v14;
      if (v17 >= (v14[1] - *v14) >> 3) {
        goto LABEL_49;
      }
    }
  }
  return v5;
}

void sub_20F3B33B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::GetTensorShapeWithDimensionsAllKnown(MIL *this@<X0>, const MIL::IRTensorValueType *a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t v4 = (uint64_t *)(*(uint64_t (**)(MIL *, const MIL::IRTensorValueType *))(*(void *)this + 96))(this, a2);
  std::vector<unsigned long long>::reserve((void **)a3, (v4[1] - *v4) >> 3);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    do
    {
      uint64_t v7 = (*(uint64_t (**)(void))(**(void **)v5 + 16))();
      if (!v7)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, "IRTensorValueType contains unknown dimension.");
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
        __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
      }
      uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      uint64_t v9 = v8;
      uint64_t v11 = *(uint64_t **)(a3 + 8);
      unint64_t v10 = *(void *)(a3 + 16);
      if ((unint64_t)v11 >= v10)
      {
        int v13 = *(uint64_t **)a3;
        uint64_t v14 = ((uint64_t)v11 - *(void *)a3) >> 3;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 2 > v15) {
          unint64_t v15 = v16 >> 2;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a3 + 16, v17);
          int v13 = *(uint64_t **)a3;
          uint64_t v11 = *(uint64_t **)(a3 + 8);
        }
        else
        {
          uint64_t v18 = 0;
        }
        uint64_t v19 = (uint64_t *)&v18[8 * v14];
        *uint64_t v19 = v9;
        uint64_t v12 = v19 + 1;
        while (v11 != v13)
        {
          uint64_t v20 = *--v11;
          *--uint64_t v19 = v20;
        }
        *(void *)a3 = v19;
        *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v12;
        *(void *)(a3 + 16) = &v18[8 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        uint64_t *v11 = v8;
        uint64_t v12 = v11 + 1;
      }
      *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v12;
      v5 += 8;
    }
    while (v5 != v6);
  }
}

void sub_20F3B35DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  size_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    unint64_t v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t *MIL::MakeDefaultStrides@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = a3;
  uint64_t v6 = a1[1];
  unint64_t v7 = (v6 - *a1) >> 3;
  uint64_t v8 = (unsigned __int8 *)*a2;
  uint64_t v9 = (unsigned __int8 *)a2[1];
  if ((unsigned __int8 *)v7 != &v9[-*a2])
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Length of shape and interleaveFactors must be equal.");
    goto LABEL_19;
  }
  if (*a1 == v6)
  {
    uint64_t *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  else
  {
    if (v9 != v8)
    {
      if (v7 <= 1) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = (v6 - *a1) >> 3;
      }
      unsigned int v11 = 1;
      while (1)
      {
        unsigned int v13 = *v8++;
        unsigned int v12 = v13;
        if (v13 != 1)
        {
          BOOL v14 = v11 == 1;
          unsigned int v11 = v12;
          if (!v14) {
            break;
          }
        }
        if (!--v10) {
          goto LABEL_15;
        }
      }
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Found multiple interleave factors that are not 1.");
LABEL_19:
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    unsigned int v11 = 1;
LABEL_15:
    uint64_t result = std::vector<long long>::vector(result, v7);
    uint64_t v15 = *result;
    uint64_t v16 = result[1] - *result;
    uint64_t v17 = v16 >> 3;
    *(void *)(*result + 8 * ((v16 >> 3) - 1)) = v11;
    if (v16 >> 3 != 1)
    {
      uint64_t v18 = *(void *)(v16 + v15 - 8);
      uint64_t v19 = v15 - 16;
      uint64_t v20 = *a1 - 8;
      uint64_t v21 = *a2 - 1;
      do
      {
        v18 += v18 * ((*(void *)(v20 + 8 * v17) - 1) / *(unsigned __int8 *)(v21 + v17));
        *(void *)(v19 + 8 * v17--) = v18;
      }
      while (v17 != 1);
    }
  }
  return result;
}

void sub_20F3B3810(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::MakeDefaultStrides(void *a1@<X0>, uint64_t *a2@<X8>)
{
  size_t v4 = (uint64_t)(a1[1] - *a1) >> 3;
  char v5 = 1;
  std::vector<unsigned char>::vector(__p, v4, &v5);
  MIL::MakeDefaultStrides(a1, __p, a2);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20F3B3894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::MakeDefaultStrides(MIL::IRConstantProperty *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  std::vector<unsigned long long>::vector(v21, (a2[1] - *a2) >> 3);
  std::vector<unsigned char>::vector(__p, (a3[1] - *a3) >> 3);
  uint64_t v8 = *a2;
  if (a2[1] != *a2)
  {
    unint64_t v9 = 0;
    do
    {
      uint64_t v10 = MIL::IRDimension::AsConstant(*(MIL::IRDimension **)(v8 + 8 * v9));
      uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 48))(v10);
      *((void *)v21[0] + v9++) = v11;
      uint64_t v8 = *a2;
    }
    while (v9 < (a2[1] - *a2) >> 3);
  }
  uint64_t v12 = *a3;
  if (a3[1] != *a3)
  {
    unint64_t v13 = 0;
    do
    {
      BOOL v14 = (MIL::IRConstantProperty *)MIL::IRProperty::AsConstant(*(MIL::IRProperty **)(v12 + 8 * v13));
      UInt8Scalaruint64_t Value = MIL::IRConstantProperty::GetUInt8ScalarValue(v14);
      *((unsigned char *)__p[0] + v13++) = UInt8ScalarValue;
      uint64_t v12 = *a3;
    }
    while (v13 < (a3[1] - *a3) >> 3);
  }
  MIL::MakeDefaultStrides(v21, __p, (uint64_t *)&v18);
  std::vector<MIL::IRProperty const*>::vector(a4, v19 - v18);
  uint64_t v16 = v19;
  if (v19 != v18)
  {
    unint64_t v17 = 0;
    uint64_t v16 = v18;
    do
    {
      *(void *)(*a4 + 8 * v17) = MIL::IRConstantProperty::MakeInt64Scalar(a1, v16[v17]);
      ++v17;
      uint64_t v16 = v18;
    }
    while (v17 < v19 - v18);
  }
  if (v16)
  {
    uint64_t v19 = v16;
    operator delete(v16);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
}

void sub_20F3B3A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void MIL::MakeDefaultStrides(MIL::IRConstantProperty *a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  std::vector<MIL::IRProperty const*>::vector(__p, (a2[1] - *a2) >> 3);
  if (a2[1] != *a2)
  {
    unint64_t v6 = 0;
    do
    {
      UInt8uint64_t Scalar = MIL::IRConstantProperty::MakeUInt8Scalar(a1, (MIL::MILContext *)1);
      *((void *)__p[0] + v6++) = UInt8Scalar;
    }
    while (v6 < (a2[1] - *a2) >> 3);
  }
  MIL::MakeDefaultStrides(a1, a2, (uint64_t *)__p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_20F3B3B4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL MIL::IsTensor(MIL *this, const MIL::IRValueType *a2)
{
  return (*(uint64_t (**)(MIL *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2) != 0;
}

void *MIL::IsTensorBuffer(MIL *this, const MIL::IRValueType *a2)
{
  uint64_t result = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  if (result)
  {
    size_t v4 = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
    return (void *)(MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v4) != 0);
  }
  return result;
}

void *MIL::IsPixelBuffer(MIL *this, const MIL::IRValueType *a2)
{
  uint64_t result = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  if (result)
  {
    size_t v4 = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
    return (void *)(MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v4) != 0);
  }
  return result;
}

void *MIL::IsCircularBuffer(MIL *this, const MIL::IRValueType *a2)
{
  uint64_t result = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
  if (result)
  {
    size_t v4 = MIL::IRValueType::TryCastAsMemoryLayoutType(this);
    return (void *)(MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(v4) != 0);
  }
  return result;
}

uint64_t anonymous namespace'::HasEqualOrStrongerShape(int a1, uint64_t *a2, int a3, void *a4)
{
  char v7 = a1;
  if (a1)
  {
    uint64_t result = 0;
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
    if (v10 - *a2 != a4[1] - *a4 || (a3 & 1) == 0) {
      return result;
    }
    goto LABEL_15;
  }
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (((v12 - *a2) >> 3) - 1 > (unint64_t)((uint64_t)(a4[1] - *a4) >> 3)) {
    return 0;
  }
  if (v12 != v11)
  {
    unint64_t v13 = 0;
    while ((*(uint64_t (**)(void))(**(void **)(v11 + 8 * v13) + 24))(*(void *)(v11 + 8 * v13)))
    {
      ++v13;
      uint64_t v11 = *a2;
      uint64_t v14 = a2[1] - *a2;
      if (v13 >= v14 >> 3)
      {
        unint64_t v15 = (v14 >> 3) - 1;
        return v15 <= ((uint64_t)(a4[1] - *a4) >> 3) - (unint64_t)(a3 ^ 1u);
      }
    }
    uint64_t v9 = *a2;
    uint64_t v10 = a2[1];
LABEL_15:
    if (v10 != v9)
    {
      unint64_t v16 = 0;
      while (((*(uint64_t (**)(void))(**(void **)(v9 + 8 * v16) + 32))(*(void *)(v9 + 8 * v16)) & 1) == 0)
      {
        uint64_t v17 = *(void *)(*a2 + 8 * v16);
        uint64_t v18 = *(void *)(*a4 + 8 * v16);
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 16))(v17);
        if (v19)
        {
          uint64_t v20 = v19;
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v18 + 16))(v18);
          if (!result) {
            return result;
          }
          uint64_t v21 = result;
          uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 48))(v20);
          if (v22 != (*(uint64_t (**)(uint64_t))(*(void *)v21 + 48))(v21)) {
            return 0;
          }
        }
        else if (((*(uint64_t (**)(uint64_t))(*(void *)v17 + 32))(v17) & 1) == 0 {
               && ((*(uint64_t (**)(uint64_t))(*(void *)v18 + 32))(v18) & 1) != 0)
        }
        {
          return 0;
        }
        ++v16;
        uint64_t v9 = *a2;
        if (v16 >= (a2[1] - *a2) >> 3) {
          break;
        }
      }
    }
    if ((v7 & 1) == 0)
    {
      uint64_t v23 = *a2;
      uint64_t v24 = a2[1] - *a2;
      if ((unint64_t)v24 >= 9)
      {
        unint64_t v25 = v24 >> 3;
        uint64_t v26 = -1;
        unint64_t v27 = 1;
        while (((*(uint64_t (**)(void))(**(void **)(v23 + 8 * (v25 + v26)) + 32))(*(void *)(v23 + 8 * (v25 + v26))) & 1) == 0)
        {
          uint64_t v28 = *(void *)(*a2 + 8 * (v26 + ((unint64_t)(a2[1] - *a2) >> 3)));
          uint64_t v29 = *(void *)(*a4 + 8 * (v26 + ((a4[1] - *a4) >> 3)));
          uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v28 + 16))(v28);
          if (v30)
          {
            uint64_t v31 = v30;
            uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 16))(v29);
            if (!result) {
              return result;
            }
            uint64_t v32 = result;
            uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 48))(v31);
            if (v33 != (*(uint64_t (**)(uint64_t))(*(void *)v32 + 48))(v32)) {
              return 0;
            }
          }
          else if (((*(uint64_t (**)(uint64_t))(*(void *)v28 + 32))(v28) & 1) == 0 {
                 && ((*(uint64_t (**)(uint64_t))(*(void *)v29 + 32))(v29) & 1) != 0)
          }
          {
            return 0;
          }
          ++v27;
          uint64_t v23 = *a2;
          unint64_t v25 = (a2[1] - *a2) >> 3;
          --v26;
          uint64_t result = 1;
          if (v27 >= v25) {
            return result;
          }
        }
      }
    }
    return 1;
  }
  unint64_t v15 = -1;
  return v15 <= ((uint64_t)(a4[1] - *a4) >> 3) - (unint64_t)(a3 ^ 1u);
}

uint64_t anonymous namespace'::HasEqualOrStrongerShape(_anonymous_namespace_ *this, const MIL::IRValueType *a2, const MIL::IRValueType *a3)
{
  if ((*(uint64_t (**)(_anonymous_namespace_ *, const MIL::IRValueType *, const MIL::IRValueType *))(*(void *)this + 24))(this, a2, a3)&& (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 24))(a2))
  {
    uint64_t v6 = MIL::IRValueType::AsTensorType(this);
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 104))(v6);
    uint64_t v8 = MIL::IRValueType::AsTensorType(this);
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
    memset(v91, 0, sizeof(v91));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v91, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 3);
    uint64_t v10 = MIL::IRValueType::AsTensorType(a2);
    int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 104))(v10);
    uint64_t v12 = MIL::IRValueType::AsTensorType(a2);
    uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 96))(v12);
    int v88 = 0;
    size_t v89 = 0;
    uint64_t v90 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v88, *(const void **)v13, *(void *)(v13 + 8), (uint64_t)(*(void *)(v13 + 8) - *(void *)v13) >> 3);
    if (v88)
    {
      size_t v89 = v88;
      operator delete(v88);
    }
    unint64_t v15 = (void *)v91[0];
    if (v91[0])
    {
      unint64_t v16 = v91;
LABEL_31:
      v16[1] = (uint64_t)v15;
      operator delete(v15);
    }
  }
  else if (MIL::IsTensorBuffer(this, v5) && MIL::IsTensorBuffer(a2, v17))
  {
    uint64_t v18 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
    uint64_t v19 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v18);
    int IsFixedRank = MIL::IRTensorBufferValueType::IsFixedRank(v19);
    uint64_t v21 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
    uint64_t v22 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v21);
    uint64_t Shape = MIL::IRTensorBufferValueType::GetShape(v22);
    memset(v87, 0, sizeof(v87));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v87, *(const void **)Shape, *(void *)(Shape + 8), (uint64_t)(*(void *)(Shape + 8) - *(void *)Shape) >> 3);
    uint64_t v24 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    unint64_t v25 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v24);
    int v26 = MIL::IRTensorBufferValueType::IsFixedRank(v25);
    unint64_t v27 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    uint64_t v28 = (MIL::IRTensorBufferValueType *)MIL::IRMemoryLayoutValueType::AsTensorBufferType(v27);
    uint64_t v29 = MIL::IRTensorBufferValueType::GetShape(v28);
    std::string __p = 0;
    size_t v85 = 0;
    uint64_t v86 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&__p, *(const void **)v29, *(void *)(v29 + 8), (uint64_t)(*(void *)(v29 + 8) - *(void *)v29) >> 3);
    if (__p)
    {
      size_t v85 = __p;
      operator delete(__p);
    }
    unint64_t v15 = (void *)v87[0];
    if (v87[0])
    {
      unint64_t v16 = v87;
      goto LABEL_31;
    }
  }
  else if (MIL::IsPixelBuffer(this, v17) && MIL::IsPixelBuffer(a2, v30))
  {
    uint64_t v31 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
    uint64_t v32 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v31);
    int v33 = MIL::IRPixelBufferValueType::IsFixedRank(v32);
    uint64_t v34 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
    uint64_t v35 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v34);
    uint64_t v36 = MIL::IRPixelBufferValueType::GetShape(v35);
    memset(v83, 0, sizeof(v83));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v83, *(const void **)v36, *(void *)(v36 + 8), (uint64_t)(*(void *)(v36 + 8) - *(void *)v36) >> 3);
    uint64_t v37 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    uint64_t v38 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v37);
    int v39 = MIL::IRPixelBufferValueType::IsFixedRank(v38);
    uint64_t v40 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    uint64_t v41 = (MIL::IRPixelBufferValueType *)MIL::IRMemoryLayoutValueType::AsPixelBufferType(v40);
    uint64_t v42 = MIL::IRPixelBufferValueType::GetShape(v41);
    int v80 = 0;
    size_t v81 = 0;
    uint64_t v82 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v80, *(const void **)v42, *(void *)(v42 + 8), (uint64_t)(*(void *)(v42 + 8) - *(void *)v42) >> 3);
    if (v80)
    {
      size_t v81 = v80;
      operator delete(v80);
    }
    unint64_t v15 = (void *)v83[0];
    if (v83[0])
    {
      unint64_t v16 = v83;
      goto LABEL_31;
    }
  }
  else
  {
    if (!MIL::IsCircularBuffer(this, v30) || !MIL::IsCircularBuffer(a2, v43))
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "HasEqualOrStrongerShape called with unsupported type.");
      __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
    }
    uint64_t v44 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
    uint64_t v45 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v44);
    int v46 = MIL::IRCircularBufferValueType::IsFixedRank(v45);
    uint64_t v47 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
    uint64_t v48 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v47);
    uint64_t v49 = MIL::IRCircularBufferValueType::GetShape(v48);
    memset(v79, 0, sizeof(v79));
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(v79, *(const void **)v49, *(void *)(v49 + 8), (uint64_t)(*(void *)(v49 + 8) - *(void *)v49) >> 3);
    uint64_t v50 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    long long v51 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v50);
    int v52 = MIL::IRCircularBufferValueType::IsFixedRank(v51);
    uint64_t v53 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
    std::string v54 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v53);
    uint64_t v55 = MIL::IRCircularBufferValueType::GetShape(v54);
    int v76 = 0;
    size_t v77 = 0;
    uint64_t v78 = 0;
    std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v76, *(const void **)v55, *(void *)(v55 + 8), (uint64_t)(*(void *)(v55 + 8) - *(void *)v55) >> 3);
    {
      int v56 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
      size_t v57 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v56);
      int v58 = MIL::IRCircularBufferValueType::IsFixedRank(v57);
      uint64_t v59 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(this);
      int v60 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v59);
      Sliceuint64_t Shape = MIL::IRCircularBufferValueType::GetSliceShape(v60);
      size_t v73 = 0;
      int v74 = 0;
      uint64_t v75 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v73, *(const void **)SliceShape, *(void *)(SliceShape + 8), (uint64_t)(*(void *)(SliceShape + 8) - *(void *)SliceShape) >> 3);
      int v62 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
      uint64_t v63 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v62);
      int v64 = MIL::IRCircularBufferValueType::IsFixedRank(v63);
      size_t v65 = (MIL::IRMemoryLayoutValueType *)MIL::IRValueType::AsMemoryLayoutType(a2);
      uint64_t v66 = (MIL::IRCircularBufferValueType *)MIL::IRMemoryLayoutValueType::AsCircularBufferType(v65);
      uint64_t v67 = MIL::IRCircularBufferValueType::GetSliceShape(v66);
      int v70 = 0;
      uint64_t v71 = 0;
      uint64_t v72 = 0;
      std::vector<MIL::IRDimension const*>::__init_with_size[abi:ne180100]<MIL::IRDimension const**,MIL::IRDimension const**>(&v70, *(const void **)v67, *(void *)(v67 + 8), (uint64_t)(*(void *)(v67 + 8) - *(void *)v67) >> 3);
      if (v70)
      {
        uint64_t v71 = v70;
        operator delete(v70);
      }
      if (v73)
      {
        int v74 = v73;
        operator delete(v73);
      }
    }
    else
    {
      uint64_t HasEqualOrStrongerShape = 0;
    }
    if (v76)
    {
      size_t v77 = v76;
      operator delete(v76);
    }
    unint64_t v15 = v79[0];
    if (v79[0])
    {
      unint64_t v16 = (uint64_t *)v79;
      goto LABEL_31;
    }
  }
  return HasEqualOrStrongerShape;
}

void sub_20F3B45C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  _Unwind_Resume(exception_object);
}

BOOL anonymous namespace'::IsEqualOrStrongerPropertiesVec(void ***a1, void ***a2)
{
  size_t v4 = *a1;
  char v5 = a1[1];
  int v6 = 1;
  while (v4 != v5)
  {
    int v7 = (MIL::IRUnknownProperty *)MIL::IRProperty::TryAsUnknown(*v4);
    if (v7)
    {
      int v8 = MIL::IRUnknownProperty::IsVariadic(v7) ^ 1;
      if (((v8 | v6) & 1) == 0)
      {
LABEL_41:
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "A property vector may contain only one variadic property.");
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      v6 &= v8;
    }
    ++v4;
  }
  uint64_t v9 = *a2;
  uint64_t v10 = a2[1];
  int v11 = 1;
  while (v9 != v10)
  {
    uint64_t v12 = (MIL::IRUnknownProperty *)MIL::IRProperty::TryAsUnknown(*v9);
    if (v12)
    {
      int v13 = MIL::IRUnknownProperty::IsVariadic(v12) ^ 1;
      if (((v13 | v11) & 1) == 0) {
        goto LABEL_41;
      }
      v11 &= v13;
    }
    ++v9;
  }
  if (v6)
  {
    uint64_t v14 = *a1;
    unint64_t v15 = a1[1];
    if ((((char *)v15 - (char *)*a1 == (char *)a2[1] - (char *)*a2) & v11) != 0)
    {
LABEL_26:
      if (v15 != v14)
      {
        unint64_t v22 = 0;
        do
        {
          uint64_t v23 = (MIL::IRUnknownProperty *)MIL::IRProperty::TryAsUnknown(v14[v22]);
          if (v23 && (MIL::IRUnknownProperty::IsVariadic(v23) & 1) != 0) {
            break;
          }
          ++v22;
          uint64_t v14 = *a1;
        }
        while (v22 < a1[1] - *a1);
      }
      if ((v6 & 1) == 0)
      {
        uint64_t v24 = *a1;
        uint64_t v25 = (char *)a1[1] - (char *)*a1;
        if ((unint64_t)v25 >= 9)
        {
          unint64_t v26 = v25 >> 3;
          uint64_t v27 = -1;
          unint64_t v28 = 1;
          while (1)
          {
            uint64_t v29 = (MIL::IRUnknownProperty *)MIL::IRProperty::TryAsUnknown(*(&v24[v26] + v27));
            if (v29)
            {
              if (MIL::IRUnknownProperty::IsVariadic(v29)) {
                break;
              }
            }
            ++v28;
            uint64_t v24 = *a1;
            unint64_t v26 = a1[1] - *a1;
            --v27;
            BOOL result = 1;
            if (v28 >= v26) {
              return result;
            }
          }
        }
      }
      return 1;
    }
    return 0;
  }
  unint64_t v16 = *a1;
  uint64_t v17 = a1[1];
  if (v17 - *a1 - 1 > (unint64_t)(a2[1] - *a2)) {
    return 0;
  }
  if (v17 != v16)
  {
    unint64_t v19 = 0;
    while (MIL::IRProperty::TryAsUnknown(v16[v19]))
    {
      ++v19;
      unint64_t v16 = *a1;
      uint64_t v20 = (char *)a1[1] - (char *)*a1;
      if (v19 >= v20 >> 3)
      {
        unint64_t v21 = (v20 >> 3) - 1;
        return v21 <= a2[1] - *a2 - (unint64_t)((v11 & 1) == 0);
      }
    }
    uint64_t v14 = *a1;
    unint64_t v15 = a1[1];
    goto LABEL_26;
  }
  unint64_t v21 = -1;
  return v21 <= a2[1] - *a2 - (unint64_t)((v11 & 1) == 0);
}

void sub_20F3B4938(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<MIL::IRProperty const*>::__init_with_size[abi:ne180100]<MIL::IRProperty const**,MIL::IRProperty const**>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    BOOL result = std::vector<unsigned long long>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20F3B49B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::IsEqualOrStrongerPropertiesVec(std::vector<MIL::IRProperty const*> const&,std::vector<MIL::IRProperty const*> const&)::$_1::operator()(void *a1, void *a2)
{
  size_t v4 = (MIL::IRConstantPropertyImpl **)MIL::IRProperty::TryAsConstant(a1);
  if (!v4)
  {
    int v11 = (MIL::IRUnknownProperty *)MIL::IRProperty::TryAsUnknown(a1);
    if (!v11) {
      return 1;
    }
    if (MIL::IRUnknownProperty::IsVariadic(v11)) {
      return 1;
    }
    uint64_t v12 = (MIL::IRUnknownProperty *)MIL::IRProperty::TryAsUnknown(a2);
    return !v12 || (MIL::IRUnknownProperty::IsVariadic(v12) & 1) == 0;
  }
  char v5 = v4;
  uint64_t result = (uint64_t)MIL::IRProperty::TryAsConstant(a2);
  if (!result) {
    return result;
  }
  uint64_t v7 = (MIL::IRConstantPropertyImpl **)result;
  int ScalarDataType = MIL::IRConstantProperty::GetScalarDataType(v5);
  if (ScalarDataType != MIL::IRConstantProperty::GetScalarDataType(v7)) {
    return 0;
  }
  if (MIL::IRConstantProperty::GetScalarDataType(v5) == 12)
  {
    Int64Scalaruint64_t Value = MIL::IRConstantProperty::GetInt64ScalarValue((MIL::IRConstantProperty *)v5);
    UInt64Scalaruint64_t Value = MIL::IRConstantProperty::GetInt64ScalarValue((MIL::IRConstantProperty *)v7);
    return Int64ScalarValue == UInt64ScalarValue;
  }
  if (MIL::IRConstantProperty::GetScalarDataType(v5) == 14)
  {
    UInt8Scalaruint64_t Value = MIL::IRConstantProperty::GetUInt8ScalarValue((MIL::IRConstantProperty *)v5);
    return UInt8ScalarValue == MIL::IRConstantProperty::GetUInt8ScalarValue((MIL::IRConstantProperty *)v7);
  }
  if (MIL::IRConstantProperty::GetScalarDataType(v5) != 17) {
    return 1;
  }
  Int64Scalaruint64_t Value = MIL::IRConstantProperty::GetUInt64ScalarValue((MIL::IRConstantProperty *)v5);
  UInt64Scalaruint64_t Value = MIL::IRConstantProperty::GetUInt64ScalarValue((MIL::IRConstantProperty *)v7);
  return Int64ScalarValue == UInt64ScalarValue;
}

void *std::vector<long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20F3B4B48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned long long>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned long long>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20F3B4BC0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::vector(void *a1, size_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    size_t v4 = (char *)a1[1];
    char v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_20F3B4C34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void OperationNameLocationImpl::~OperationNameLocationImpl(void **this)
{
  *this = &unk_26C257670;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  *this = &unk_26C257670;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C257670;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x21056C700);
}

void MIL::OperationNameLocation::Make()
{
}

void TextFileLocationImpl::~TextFileLocationImpl(void **this)
{
  *this = &unk_26C2576A8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  *this = &unk_26C2576A8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  *this = &unk_26C2576A8;
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }

  JUMPOUT(0x21056C700);
}

void MIL::TextFileLocation::Make()
{
}

void UnknownLocationImpl::~UnknownLocationImpl(UnknownLocationImpl *this)
{
}

void MIL::UnknownLocation::Make(MIL::UnknownLocation *this)
{
}

void *MIL::Location::Location(void *this)
{
  *this = &unk_26C2576F0;
  return this;
}

uint64_t MIL::Location::operator!=(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) ^ 1;
}

void MIL::Location::GetDescription(MIL::Location *this@<X0>, std::string *a2@<X8>)
{
  if (!this) {
    goto LABEL_14;
  }
  if (v4)
  {
    OperationNameLocationImpl::GetDescriptionImpl(v4, a2);
    return;
  }
  if (v5)
  {
    TextFileLocationImpl::GetDescriptionImpl(v5, a2);
    return;
  }
  {
LABEL_14:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unknown Location type.");
    __cxa_throw(exception, MEMORY[0x263F8C1E0], MEMORY[0x263F8C048]);
  }

  std::string::basic_string[abi:ne180100]<0>(a2, "unknown location");
}

void sub_20F3B51D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void OperationNameLocationImpl::GetDescriptionImpl(OperationNameLocationImpl *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (*(uint64_t (**)(OperationNameLocationImpl *))(*(void *)this + 32))(this);
  if (*(char *)(v3 + 23) < 0)
  {
    char v5 = *(const std::string::value_type **)v3;
    std::string::size_type v6 = *(void *)(v3 + 8);
    std::string::__init_copy_ctor_external(a2, v5, v6);
  }
  else
  {
    long long v4 = *(_OWORD *)v3;
    a2->__r_.__value_.__r.__words[2] = *(void *)(v3 + 16);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v4;
  }
}

void TextFileLocationImpl::GetDescriptionImpl(TextFileLocationImpl *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = (*(uint64_t (**)(TextFileLocationImpl *))(*(void *)this + 40))(this);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v4 + 8);
  }
  if (v5)
  {
    uint64_t v6 = (*(uint64_t (**)(TextFileLocationImpl *))(*(void *)this + 40))(this);
    if (*(char *)(v6 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
    }
    else
    {
      long long v7 = *(_OWORD *)v6;
      v22.__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
      *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "(unknown)");
  }
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v22.__r_.__value_.__l.__data_, 58, (uint64_t)&v19);
  unint64_t v8 = (*(uint64_t (**)(TextFileLocationImpl *))(*(void *)this + 48))(this);
  std::to_string(&v18, v8);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v9 = &v18;
  }
  else {
    uint64_t v9 = (std::string *)v18.__r_.__value_.__r.__words[0];
  }
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v18.__r_.__value_.__l.__size_;
  }
  int v11 = std::string::append(&v19, (const std::string::value_type *)v9, size);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v20, 58);
  std::string v21 = v20;
  memset(&v20, 0, sizeof(v20));
  unint64_t v13 = (*(uint64_t (**)(TextFileLocationImpl *))(*(void *)this + 32))(this);
  std::to_string(&v17, v13);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v14 = &v17;
  }
  else {
    uint64_t v14 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v15 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v15 = v17.__r_.__value_.__l.__size_;
  }
  unint64_t v16 = std::string::append(&v21, (const std::string::value_type *)v14, v15);
  *a2 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
}

void sub_20F3B54AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 73) < 0) {
    operator delete(*(void **)(v33 - 96));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(exception_object);
}

uint64_t OperationNameLocationImpl::operator==(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
    uint64_t v7 = v5[23];
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v5[23];
    }
    else {
      uint64_t v8 = *((void *)v5 + 1);
    }
    uint64_t v9 = *(unsigned __int8 *)(v6 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(v6 + 8);
    }
    if (v8 == v9)
    {
      if (v10 >= 0) {
        int v11 = (unsigned __int8 *)v6;
      }
      else {
        int v11 = *(unsigned __int8 **)v6;
      }
      if ((v7 & 0x80) != 0)
      {
        return memcmp(*(const void **)v5, v11, *((void *)v5 + 1)) == 0;
      }
      else if (v5[23])
      {
        uint64_t v12 = v7 - 1;
        do
        {
          int v14 = *v5++;
          int v13 = v14;
          int v16 = *v11++;
          int v15 = v16;
          BOOL v18 = v12-- != 0;
          uint64_t result = v13 == v15;
        }
        while (v13 == v15 && v18);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void OperationNameLocationImpl::GetReportString(OperationNameLocationImpl *this@<X0>, std::string *a2@<X8>)
{
  OperationNameLocationImpl::GetDescriptionImpl(this, &v4);
  uint64_t v3 = std::string::insert(&v4, 0, "in operation ");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_20F3B56FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t OperationNameLocationImpl::GetName(OperationNameLocationImpl *this)
{
  return (uint64_t)this + 8;
}

uint64_t TextFileLocationImpl::operator==(uint64_t a1, void *lpsrc)
{
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
    if (v5 != (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4)) {
      return 0;
    }
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
    if (v6 != (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4)) {
      return 0;
    }
    uint64_t v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 40))(v4);
    uint64_t v9 = v7[23];
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v7[23];
    }
    else {
      uint64_t v10 = *((void *)v7 + 1);
    }
    uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(v8 + 8);
    }
    if (v10 == v11)
    {
      if (v12 >= 0) {
        int v13 = (unsigned __int8 *)v8;
      }
      else {
        int v13 = *(unsigned __int8 **)v8;
      }
      if ((v9 & 0x80) != 0)
      {
        return memcmp(*(const void **)v7, v13, *((void *)v7 + 1)) == 0;
      }
      else if (v7[23])
      {
        uint64_t v14 = v9 - 1;
        do
        {
          int v16 = *v7++;
          int v15 = v16;
          int v18 = *v13++;
          int v17 = v18;
          BOOL v20 = v14-- != 0;
          uint64_t result = v15 == v17;
        }
        while (v15 == v17 && v20);
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void TextFileLocationImpl::GetReportString(TextFileLocationImpl *this@<X0>, std::string *a2@<X8>)
{
  TextFileLocationImpl::GetDescriptionImpl(this, &v4);
  uint64_t v3 = std::string::insert(&v4, 0, "at ");
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_20F3B599C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t TextFileLocationImpl::GetColumn(TextFileLocationImpl *this)
{
  return *((void *)this + 5);
}

uint64_t TextFileLocationImpl::GetFile(TextFileLocationImpl *this)
{
  return (uint64_t)this + 8;
}

uint64_t TextFileLocationImpl::GetLine(TextFileLocationImpl *this)
{
  return *((void *)this + 4);
}

BOOL UnknownLocationImpl::operator==(int a1, void *lpsrc)
{
}

void *UnknownLocationImpl::GetReportString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "at unknown location");
}

void MIL::MILContextImpl::~MILContextImpl(MIL::MILContextImpl *this)
{
  uint64_t v2 = *((void *)this + 80);
  *((void *)this + 80) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 79);
  *((void *)this + 79) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = *((void *)this + 78);
  *((void *)this + 7std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  uint64_t v5 = *((void *)this + 77);
  *((void *)this + 77) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table((uint64_t)this + 568);
  std::__hash_table<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::__unordered_map_hasher<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,true>,std::__unordered_map_equal<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::equal_to<MIL::IRValueType const*>,std::hash<MIL::IRValueType const*>,true>,std::allocator<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>>>::~__hash_table((uint64_t)this + 528);
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>>>::~__hash_table((uint64_t)this + 488);
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>>>::~__hash_table((uint64_t)this + 448);
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>>>::~__hash_table((uint64_t)this + 408);
  std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::~__hash_table((uint64_t)this + 368);
  std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::~__hash_table((uint64_t)this + 328);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::~__hash_table((uint64_t)this + 288);
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>>>::~__hash_table((uint64_t)this + 248);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::~__hash_table((uint64_t)this + 208);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::~__hash_table((uint64_t)this + 168);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8);
}

{
  uint64_t vars8;

  MIL::MILContextImpl::~MILContextImpl(this);

  JUMPOUT(0x21056C700);
}

void MIL::MILContextImpl::GetAllOpsetNames(MIL::MILContextImpl *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::vector<std::string>::reserve(a2, *((void *)this + 74));
  uint64_t v4 = (void *)*((void *)this + 73);
  if (v4)
  {
    std::__split_buffer<std::string>::pointer end = (long long *)a2->__end_;
    do
    {
      uint64_t v6 = (long long *)(v4 + 2);
      if ((std::string *)end >= a2->__end_cap_.__value_)
      {
        std::__split_buffer<std::string>::pointer end = (long long *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        std::__split_buffer<std::string>::pointer end = (long long *)((char *)end + 24);
      }
      a2->__end_ = (std::vector<std::string>::pointer)end;
      uint64_t v4 = (void *)*v4;
    }
    while (v4);
  }
  else
  {
    std::__split_buffer<std::string>::pointer end = (long long *)a2->__end_;
  }
  unint64_t v7 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3));
  if (end == (long long *)a2->__begin_) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)a2->__begin_, end, (uint64_t)v9, v8, 1);
}

void sub_20F3B5CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::MILContextImpl::RegisterOpset(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IROpset const>>(a1 + 568, a2, (uint64_t)a2, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v6 = std::string::append(&v8, "'.");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3B5DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

unsigned __int8 *MIL::MILContextImpl::TryGetOpset(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 568), a2);
  if (result) {
    return (unsigned __int8 *)*((void *)result + 5);
  }
  return result;
}

unsigned __int8 *MIL::MILContextImpl::GetOrCreateLegacyStorageReader@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string::size_type *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 8), a2);
  if (result)
  {
    std::string::size_type v7 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<MIL::Blob::LegacyStorageReader,std::allocator<MIL::Blob::LegacyStorageReader>,std::string const&,void>((uint64_t)a2, a3);
    return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&>(v5, a2, (long long *)a2, a3);
  }
  return result;
}

void sub_20F3B5EC8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MIL::MILContextImpl::GetOrCreateStorageReader@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string::size_type *a3@<X8>)
{
  uint64_t v5 = a1 + 48;
  uint64_t result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>((void *)(a1 + 48), a2);
  if (result)
  {
    std::string::size_type v7 = *((void *)result + 6);
    *a3 = *((void *)result + 5);
    a3[1] = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    std::allocate_shared[abi:ne180100]<MIL::Blob::StorageReader,std::allocator<MIL::Blob::StorageReader>,std::string const&,void>((uint64_t)a2, a3);
    return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::Blob::StorageReader>&>(v5, a2, (long long *)a2, a3);
  }
  return result;
}

void sub_20F3B5F64(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL MIL::MILContextImpl::TypeIsRegistered(MIL::MILContextImpl *this, const MIL::IRValueType *a2)
{
  uint64_t v4 = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 24))(a2);
  if (v4)
  {
    for (unint64_t i = (void *)*((void *)this + 33); i; unint64_t i = (void *)*i)
    {
      if (i[10] == v4) {
        break;
      }
    }
    return i != 0;
  }
  uint64_t v6 = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 32))(a2);
  if (!v6)
  {
    uint64_t v7 = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 40))(a2);
    if (v7)
    {
      std::string v8 = (void *)*((void *)this + 38);
      if (v8)
      {
        while (v8[4] != v7)
        {
          unint64_t i = 0;
          std::string v8 = (void *)*v8;
          if (!v8) {
            return i != 0;
          }
        }
LABEL_43:
        unint64_t i = v8;
        return i != 0;
      }
    }
    else
    {
      uint64_t v9 = (*(uint64_t (**)(const MIL::IRValueType *))(*(void *)a2 + 48))(a2);
      if (!v9)
      {
        uint64_t v10 = MIL::IRValueType::TryCastAsMemoryLayoutType(a2);
        if (v10)
        {
          uint64_t v11 = v10;
          int v12 = MIL::IRMemoryLayoutValueType::TryAsTensorBufferType(v10);
          if (v12)
          {
            std::string v8 = (void *)*((void *)this + 53);
            if (v8)
            {
              while ((void *)v8[15] != v12)
              {
                unint64_t i = 0;
                std::string v8 = (void *)*v8;
                if (!v8) {
                  return i != 0;
                }
              }
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          int v13 = MIL::IRMemoryLayoutValueType::TryAsPixelBufferType(v11);
          if (v13)
          {
            std::string v8 = (void *)*((void *)this + 58);
            if (v8)
            {
              while ((void *)v8[14] != v13)
              {
                unint64_t i = 0;
                std::string v8 = (void *)*v8;
                if (!v8) {
                  return i != 0;
                }
              }
              goto LABEL_43;
            }
            goto LABEL_42;
          }
          uint64_t v14 = MIL::IRMemoryLayoutValueType::TryAsCircularBufferType(v11);
          if (v14)
          {
            std::string v8 = (void *)*((void *)this + 63);
            if (v8)
            {
              while ((void *)v8[17] != v14)
              {
                unint64_t i = 0;
                std::string v8 = (void *)*v8;
                if (!v8) {
                  return i != 0;
                }
              }
              goto LABEL_43;
            }
            goto LABEL_42;
          }
        }
        int v15 = MIL::IRValueType::TryCastAsStateType(a2);
        if (!v15)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Unknown type for TypeIsRegistered.");
          __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
        }
        std::string v8 = (void *)*((void *)this + 68);
        if (v8)
        {
          while ((void *)v8[3] != v15)
          {
            unint64_t i = 0;
            std::string v8 = (void *)*v8;
            if (!v8) {
              return i != 0;
            }
          }
          goto LABEL_43;
        }
        goto LABEL_42;
      }
      std::string v8 = (void *)*((void *)this + 48);
      if (v8)
      {
        while (v8[4] != v9)
        {
          unint64_t i = 0;
          std::string v8 = (void *)*v8;
          if (!v8) {
            return i != 0;
          }
        }
        goto LABEL_43;
      }
    }
LABEL_42:
    unint64_t i = 0;
    return i != 0;
  }
  for (unint64_t i = (void *)*((void *)this + 43); i; unint64_t i = (void *)*i)
  {
    if (i[4] == v6) {
      break;
    }
  }
  return i != 0;
}

void sub_20F3B61F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *MIL::MILContext::MILContext(void *this)
{
  *this = &unk_26C2578A0;
  return this;
}

uint64_t MIL::MILContext::GetOpset(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    uint64_t v3 = std::string::append(&v5, "' not does not exist.");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v6.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v6.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v6);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}

void sub_20F3B630C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0) {
LABEL_8:
    }
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void *MIL::MILContextImpl::RegisterOpConversion(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(a1 + 608);
  std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100]((uint64_t)v8, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v6 + 16))(v6, a2, a3, v8);
  return std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::~__value_func[abi:ne180100](v8);
}

void sub_20F3B6418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::MILContextImpl::ConvertProgram(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 608) + 32))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 608) + 24))();
}

uint64_t MIL::MILContextImpl::TryConvertProgram(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 608) + 48))();
}

{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 608) + 40))();
}

uint64_t MIL::MILContextImpl::CanConvertProgram(MIL::MILContextImpl *this, const MIL::IRProgram *a2)
{
  return (*(uint64_t (**)(void, const MIL::IRProgram *))(**((void **)this + 76) + 56))(*((void *)this + 76), a2);
}

void MIL::MILContext::Make(MIL::MILContext *this)
{
}

void sub_20F3B6544(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10E1C40E5EB867ELL);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRConstantDimension::Make(MIL::IRConstantDimension *this, MIL::MILContext *a2)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (uint64_t)v3 + 88;

  return MIL::IRTypeStore<unsigned long long,MIL::IRConstantDimension const>::Get<unsigned long long>(v4, a2);
}

uint64_t MIL::IRUnknownDimension::Make(MIL::IRUnknownDimension *this, MIL::MILContext *a2)
{
  int v2 = (int)a2;
  if (!v2)
  {
    if (v3)
    {
      uint64_t v4 = v3 + 616;
      return *(void *)v4;
    }
LABEL_7:
    __cxa_bad_cast();
  }
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t v4 = v3 + 624;
  return *(void *)v4;
}

uint64_t MIL::IRConstantProperty::MakeInt64Scalar(MIL::IRConstantProperty *this, MIL::MILContext *a2)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (uint64_t)v3 + 128;

  return MIL::IRTypeStore<long long,MIL::IRConstantProperty const>::Get<long long>(v4, (unint64_t)a2);
}

uint64_t MIL::IRConstantProperty::MakeUInt8Scalar(MIL::IRConstantProperty *this, MIL::MILContext *a2)
{
  unsigned __int8 v2 = a2;
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (uint64_t)v3 + 168;

  return MIL::IRTypeStore<unsigned char,MIL::IRConstantProperty const>::Get<unsigned char>(v4, v2);
}

uint64_t MIL::IRConstantProperty::MakeUInt64Scalar(MIL::IRConstantProperty *this, MIL::MILContext *a2)
{
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (uint64_t)v3 + 208;

  return MIL::IRTypeStore<unsigned long long,MIL::IRConstantProperty const>::Get<unsigned long long>(v4, (unint64_t)a2);
}

uint64_t MIL::IRUnknownProperty::Make(MIL::IRUnknownProperty *this, MIL::MILContext *a2)
{
  int v2 = (int)a2;
  if (!v2)
  {
    if (v3)
    {
      uint64_t v4 = v3 + 632;
      return *(void *)v4;
    }
LABEL_7:
    __cxa_bad_cast();
  }
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t v4 = v3 + 640;
  return *(void *)v4;
}

uint64_t MIL::IRTensorValueType::MakeWithShape(const void *a1, int a2, void *a3)
{
  memset(v5, 0, sizeof(v5));
  int v6 = 1065353216;
  uint64_t v3 = MIL::IRTensorValueType::MakeWithShape(a1, a2, a3, (uint64_t *)v5);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v5);
  return v3;
}

void sub_20F3B68B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::IRTensorValueType::MakeWithShape(const void *a1, int a2, void *a3, uint64_t *a4)
{
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = (uint64_t)v7 + 248;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)v11, a4);
  uint64_t v9 = MIL::IRTypeStore<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRTensorValueType const>::Get<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>> const&,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v8, a2, a3, (uint64_t)v11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v11);
  return v9;
}

void sub_20F3B697C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRListValueType::MakeWithDimension(MIL::IRListValueType *this, MIL::MILContext *a2, const MIL::IRValueType *a3, const MIL::IRDimension *a4)
{
  if ((*(unsigned int (**)(const MIL::IRValueType *))(*(void *)a3 + 32))(a3))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Cannot create a list with a variadic length.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = (uint64_t)v7 + 328;

  return MIL::IRTypeStore<std::pair<MIL::IRValueType const*,MIL::IRDimension const*>,MIL::IRListValueType const>::Get<MIL::IRValueType const*,MIL::IRDimension const*>(v8, a2, a3);
}

void sub_20F3B6A8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::IRTupleValueType::Make(const void *a1)
{
  {
    operator new();
  }
  __cxa_bad_cast();
}

void sub_20F3B6B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::IRDictionaryValueType::Make(MIL::IRDictionaryValueType *this, MIL::MILContext *a2, const MIL::IRValueType *a3, const MIL::IRValueType *a4)
{
  if (!v6) {
    __cxa_bad_cast();
  }
  uint64_t v7 = (uint64_t)v6 + 368;

  return MIL::IRTypeStore<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,MIL::IRDictionaryValueType const>::Get<MIL::IRValueType const*,MIL::IRValueType const*>(v7, a2, a3);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (!v11) {
    __cxa_bad_cast();
  }
  int v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v23 = *a3;
  uint64_t v24 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (uint64_t)v11 + 408;
  uint64_t v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v21 = *a4;
  int v22 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = (std::__shared_weak_count *)a5[1];
  uint64_t v19 = *a5;
  BOOL v20 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)v18, a6);
  uint64_t v16 = MIL::IRTypeStore<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRTensorBufferValueType const>::Get<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v13, a2, &v23, &v21, 0, &v19, (uint64_t)v18);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v18);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  return v16;
}

void sub_20F3B6D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v17, v16);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment(const void *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v12 = (uint64_t)v11 + 408;
  uint64_t v13 = (std::__shared_weak_count *)a3[1];
  uint64_t v22 = *a3;
  uint64_t v23 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v14 = (std::__shared_weak_count *)a5[1];
  uint64_t v18 = *a5;
  uint64_t v19 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)v17, a6);
  uint64_t v15 = MIL::IRTypeStore<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRTensorBufferValueType const>::Get<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v12, a2, &v22, &v20, a4, &v18, (uint64_t)v17);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v17);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  return v15;
}

void sub_20F3B6EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, std::__shared_weak_count *);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment((uint64_t)va1, v2);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t *a3, uint64_t *a4)
{
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = (uint64_t)v7 + 448;
  uint64_t v9 = (std::__shared_weak_count *)a3[1];
  uint64_t v17 = *a3;
  uint64_t v18 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)v12, a4);
  uint64_t v10 = MIL::IRTypeStore<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRPixelBufferValueType const>::Get<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v8, a2, &v17, &v15, &v13, (uint64_t)v12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v12);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return v10;
}

void sub_20F3B6FF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, std::__shared_weak_count *);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)va);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  MIL::IRTensorBufferValueType::MakeWithShapeAndRowAlignment((uint64_t)va1, v2);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  if (!v9) {
    __cxa_bad_cast();
  }
  uint64_t v10 = (uint64_t)v9 + 448;
  uint64_t v11 = (std::__shared_weak_count *)a3[1];
  uint64_t v20 = *a3;
  uint64_t v21 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)a4[1];
  uint64_t v18 = *a4;
  uint64_t v19 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)v15, a5);
  uint64_t v13 = MIL::IRTypeStore<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRPixelBufferValueType const>::Get<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v10, a2, &v20, &v18, &v16, (uint64_t)v15);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v15);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  return v13;
}

void sub_20F3B7150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v17, v16);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRPixelBufferValueType::MakeWithShape(const void *a1, int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  if (!v11) {
    __cxa_bad_cast();
  }
  uint64_t v12 = (std::__shared_weak_count *)a3[1];
  uint64_t v23 = *a3;
  uint64_t v24 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (uint64_t)v11 + 448;
  uint64_t v14 = (std::__shared_weak_count *)a4[1];
  uint64_t v21 = *a4;
  uint64_t v22 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a5[1];
  uint64_t v19 = *a5;
  uint64_t v20 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)v18, a6);
  uint64_t v16 = MIL::IRTypeStore<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRPixelBufferValueType const>::Get<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v13, a2, &v23, &v21, &v19, (uint64_t)v18);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v18);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  return v16;
}

void sub_20F3B72C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a10);
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  std::make_unique[abi:ne180100]<MIL::IRTensorBufferValueTypeImpl,MIL::IRDataType &,std::shared_ptr<std::vector<MIL::IRDimension const*>> &,std::shared_ptr<std::vector<MIL::IRProperty const*>> &,decltype(nullptr),std::shared_ptr<std::vector<MIL::IRProperty const*>> &,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v17, v16);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRCircularBufferValueType::MakeWithShape(const void *a1, int a2, std::__shared_weak_count **a3, uint64_t *a4, uint64_t *a5, void *a6, void (__cdecl *a7)(std::__shared_weak_count *__hidden this), uint64_t *a8)
{
  uint64_t v15 = (std::__shared_weak_count *)operator new(0x30uLL);
  v15[1].__vftable = 0;
  uint64_t v16 = (std::__shared_weak_count_vtbl **)&v15[1];
  v15->__shared_owners_ = 0;
  v15->__shared_weak_owners_ = 0;
  v15->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2575D0;
  v15[1].__shared_owners_ = 0;
  v15[1].__shared_weak_owners_ = 0;
  uint64_t v17 = (MIL::IRConstantProperty *)MIL::IRProperty::TryAsConstant(a6);
  uint64_t v50 = (uint64_t)a6;
  uint64_t v48 = a5;
  uint64_t v49 = a8;
  uint64_t v18 = *a3;
  uint64_t v19 = (*a3)->__vftable;
  if ((std::__shared_weak_count_vtbl *)(*a3)->__shared_owners_ != v19)
  {
    uint64_t v20 = v17;
    unint64_t v21 = 0;
    do
    {
      if (v20)
      {
        if (v21 == MIL::IRConstantProperty::GetInt64ScalarValue(v20))
        {
          shared_owners = (void *)v15[1].__shared_owners_;
          unint64_t shared_weak_owners = v15[1].__shared_weak_owners_;
          if ((unint64_t)shared_owners >= shared_weak_owners)
          {
            uint64_t v32 = ((char *)shared_owners - (char *)*v16) >> 3;
            if ((unint64_t)(v32 + 1) >> 61) {
LABEL_55:
            }
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            uint64_t v33 = shared_weak_owners - (void)*v16;
            uint64_t v34 = v33 >> 2;
            if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
              uint64_t v34 = v32 + 1;
            }
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v34;
            }
            if (v30) {
              uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v15[1].__shared_weak_owners_, v30);
            }
            else {
              uint64_t v31 = 0;
            }
            uint64_t v35 = (std::__shared_weak_count_vtbl *)&v31[8 * v32];
            v35->~__shared_weak_count = a7;
            uint64_t v24 = &v35->~__shared_weak_count_0;
            int v39 = v15[1].__vftable;
            uint64_t v36 = (std::__shared_weak_count_vtbl *)v15[1].__shared_owners_;
            if (v36 != v39)
            {
              do
              {
                on_zero_shared_weak = v36[-1].__on_zero_shared_weak;
                uint64_t v36 = (std::__shared_weak_count_vtbl *)((char *)v36 - 8);
                v35[-1].__on_zero_shared_weak = on_zero_shared_weak;
                uint64_t v35 = (std::__shared_weak_count_vtbl *)((char *)v35 - 8);
              }
              while (v36 != v39);
              goto LABEL_34;
            }
            goto LABEL_35;
          }
          void *shared_owners = a7;
          uint64_t v24 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(shared_owners + 1);
          goto LABEL_37;
        }
        uint64_t v18 = *a3;
        uint64_t v19 = (*a3)->__vftable;
      }
      if (v21 >= (v18->__shared_owners_ - (uint64_t)v19) >> 3) {
        std::vector<MIL::IRDimension const*>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v26 = (void *)v15[1].__shared_owners_;
      unint64_t v25 = v15[1].__shared_weak_owners_;
      if ((unint64_t)v26 >= v25)
      {
        uint64_t v27 = ((char *)v26 - (char *)*v16) >> 3;
        if ((unint64_t)(v27 + 1) >> 61) {
          goto LABEL_55;
        }
        uint64_t v28 = v25 - (void)*v16;
        uint64_t v29 = v28 >> 2;
        if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
          uint64_t v29 = v27 + 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30) {
          uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v15[1].__shared_weak_owners_, v30);
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v35 = (std::__shared_weak_count_vtbl *)&v31[8 * v27];
        v35->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))*((void *)&v19->~__shared_weak_count
                                                                                          + v21);
        uint64_t v24 = &v35->~__shared_weak_count_0;
        uint64_t v37 = v15[1].__vftable;
        uint64_t v36 = (std::__shared_weak_count_vtbl *)v15[1].__shared_owners_;
        if (v36 != v37)
        {
          do
          {
            uint64_t v38 = v36[-1].__on_zero_shared_weak;
            uint64_t v36 = (std::__shared_weak_count_vtbl *)((char *)v36 - 8);
            v35[-1].__on_zero_shared_weak = v38;
            uint64_t v35 = (std::__shared_weak_count_vtbl *)((char *)v35 - 8);
          }
          while (v36 != v37);
LABEL_34:
          uint64_t v36 = *v16;
        }
LABEL_35:
        v15[1].__vftable = v35;
        v15[1].__shared_owners_ = (uint64_t)v24;
        v15[1].__shared_weak_owners_ = (uint64_t)&v31[8 * v30];
        if (v36) {
          operator delete(v36);
        }
        goto LABEL_37;
      }
      void *v26 = *((void *)&v19->~__shared_weak_count + v21);
      uint64_t v24 = (void (__cdecl **)(std::__shared_weak_count *__hidden))(v26 + 1);
LABEL_37:
      v15[1].__shared_owners_ = (uint64_t)v24;
      ++v21;
      uint64_t v18 = *a3;
      uint64_t v19 = (*a3)->__vftable;
    }
    while (v21 < ((*a3)->__shared_owners_ - (uint64_t)v19) >> 3);
  }
  if (!v41) {
    __cxa_bad_cast();
  }
  uint64_t v59 = v15 + 1;
  int v60 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v42 = a3[1];
  size_t v57 = &v18->__vftable;
  int v58 = v42;
  if (v42) {
    atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v43 = (uint64_t)v41 + 488;
  uint64_t v44 = (std::__shared_weak_count *)a4[1];
  uint64_t v55 = *a4;
  int v56 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v45 = (std::__shared_weak_count *)v48[1];
  uint64_t v53 = *v48;
  std::string v54 = v45;
  if (v45) {
    atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)v52, v49);
  uint64_t v46 = MIL::IRTypeStore<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,MIL::IRCircularBufferValueType const>::Get<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>(v43, a2, (uint64_t *)&v59, (uint64_t *)&v57, &v55, &v53, v50, (uint64_t)v52);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)v52);
  if (v54) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v54);
  }
  if (v56) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  return v46;
}

void sub_20F3B7680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25)
{
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a15);
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v26 - 96);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  _Unwind_Resume(a1);
}

uint64_t MIL::IRStateValueType::Make(MIL::IRStateValueType *this, MIL::MILContext *a2, const MIL::IRValueType *a3)
{
  if (!v4) {
    __cxa_bad_cast();
  }
  uint64_t v5 = (uint64_t)v4 + 528;

  return MIL::IRTypeStore<MIL::IRValueType const*,MIL::IRStateValueType const>::Get<MIL::IRValueType const*>(v5, a2);
}

uint64_t std::__hash_table<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::__unordered_map_hasher<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,true>,std::__unordered_map_equal<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::equal_to<MIL::IRValueType const*>,std::hash<MIL::IRValueType const*>,true>,std::allocator<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::__unordered_map_hasher<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,true>,std::__unordered_map_equal<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::equal_to<MIL::IRValueType const*>,std::hash<MIL::IRValueType const*>,true>,std::allocator<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::__unordered_map_hasher<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,true>,std::__unordered_map_equal<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::equal_to<MIL::IRValueType const*>,std::hash<MIL::IRValueType const*>,true>,std::allocator<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRCircularBufferValueType const>>,0>(v2 + 2);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRPixelBufferValueType const>>,0>(v2 + 2);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRTensorBufferValueType const>>,0>(v2 + 2);
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[4];
      v2[4] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<std::vector<MIL::IRValueType const*>> const,std::unique_ptr<MIL::IRTupleValueType const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>> const,std::unique_ptr<MIL::IRTensorValueType const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    int v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IROpset const>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IROpset const>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, char a5)
{
LABEL_1:
  uint64_t v11 = (long long *)((char *)a2 - 24);
  uint64_t v12 = (const void **)a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = (uint64_t)v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)a2 - 3, v12))
          {
            uint64_t v31 = v12[2];
            long long v29 = *(_OWORD *)v12;
            long long v27 = *v11;
            _OWORD v12[2] = (const void *)*((void *)a2 - 1);
            *(_OWORD *)uint64_t v12 = v27;
            long long *v11 = v29;
            *((void *)a2 - 1) = v31;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v12 + 3, (const void **)a2 - 3, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)((char *)a2 - 24), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, v12 + 3, v12 + 6, (long long *)(v12 + 9), (long long *)((char *)a2 - 24), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 575) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (const void **)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>((uint64_t)v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[3 * (v16 >> 1)];
    if ((unint64_t)v15 >= 0xC01)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, &v12[3 * (v16 >> 1)], (const void **)a2 - 3, a3);
      uint64_t v19 = 3 * v17;
      uint64_t v20 = &v12[3 * v17 - 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12 + 3, v20, (const void **)a2 - 6, a3);
      unint64_t v21 = v12 + 6;
      uint64_t v22 = &v12[v19 + 3];
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v21, v22, (const void **)a2 - 9, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v20, v18, v22, a3);
      unint64_t v30 = *(const void **)(a1 + 16);
      long long v28 = *(_OWORD *)a1;
      long long v23 = *(_OWORD *)v18;
      *(void *)(a1 + 16) = v18[2];
      *(_OWORD *)a1 = v23;
      _OWORD v18[2] = v30;
      *(_OWORD *)uint64_t v18 = v28;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(&v12[3 * (v16 >> 1)], v12, (const void **)a2 - 3, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a1 - 24), (const void **)a1))
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((const void **)a1, (unint64_t)a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v24 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>((long long *)a1, (const void **)a2, a3);
    if ((v25 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v26 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v24, a3);
    uint64_t v12 = (const void **)(v24 + 24);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v24 + 24, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (long long *)v24;
      if (v26) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v26)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, v24, a3, -v14, a5 & 1);
      uint64_t v12 = (const void **)(v24 + 24);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((uint64_t)v12, (const void **)a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, (const void **)a2, a3);
  }
}

  uint64_t v11 = a2 - 1;
  uint64_t v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = (char *)a2 - (char *)v12;
    unint64_t v16 = a2 - v12;
    if (!(!v6 & v5))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if (std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)(a2 - 1), (uint64_t)v12))
          {
            long long v23 = *v12;
            *uint64_t v12 = *v11;
            long long *v11 = v23;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v12, v12 + 1, v12 + 2, v12 + 3, a2 - 1, a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 383) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *,std::string_view *>(v12, a2, a2, a3);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    uint64_t v18 = &v12[v16 >> 1];
    if ((unint64_t)v15 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v12, &v12[v16 >> 1], a2 - 1, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v12 + 1, v18 - 1, a2 - 2, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v12 + 2, &v12[v17 + 1], a2 - 3, a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v18 - 1, v18, &v12[v17 + 1], a3);
      uint64_t v22 = *v12;
      *uint64_t v12 = *v18;
      *uint64_t v18 = v22;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(&v12[v16 >> 1], v12, a2 - 1, a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if ((std::__less<void,void>::operator()[abi:ne180100]<std::string_view,std::string_view>(a3, (uint64_t)(v12 - 1), (uint64_t)v12) & 1) == 0)
    {
      uint64_t v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string_view *,std::__less<void,void> &>(v12, a2, a3);
      goto LABEL_18;
    }
LABEL_13:
    uint64_t v19 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string_view *,std::__less<void,void> &>(v12, (unint64_t)a2, a3);
    if ((v20 & 1) == 0) {
      goto LABEL_16;
    }
    unint64_t v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v12, v19, a3);
    uint64_t v12 = v19 + 1;
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>(v19 + 1, a2, a3))
    {
      a4 = -v14;
      a2 = v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v21)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *,false>(a1, v19, a3, -v14, a5 & 1);
      uint64_t v12 = v19 + 1;
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>((uint64_t)v12, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string_view *>((uint64_t)v12, a2, a3);
  }
}

  uint64_t v10 = a2 - 1;
  unint64_t j = a1;
  while (1)
  {
    a1 = j;
    uint64_t v12 = (uint64_t)a2 - j;
    uint64_t v13 = (uint64_t)((uint64_t)a2 - j) >> 4;
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v43 = a2 - 1;
          uint64_t v44 = *((void *)a2 - 2);
          if (v44 < *(void *)j || *(void *)j >= v44 && *((void *)a2 - 1) < *(void *)(j + 8))
          {
            uint64_t v109 = *(_OWORD *)j;
            *(_OWORD *)unint64_t j = *v43;
            const MIL::IRValueType *v43 = v109;
          }
          break;
        case 3uLL:
          break;
        case 4uLL:
          break;
        case 5uLL:
          uint64_t v45 = (long long *)(j + 16);
          uint64_t v46 = (long long *)(j + 32);
          uint64_t v47 = (long long *)(j + 48);
          uint64_t v48 = a2 - 1;
          uint64_t v49 = *((void *)a2 - 2);
          uint64_t v50 = *(void *)(j + 48);
          if (v49 < v50 || v50 >= v49 && *((void *)a2 - 1) < *(void *)(j + 56))
          {
            long long v51 = *v47;
            *uint64_t v47 = *v48;
            *uint64_t v48 = v51;
            int v52 = *(void *)(j + 48);
            uint64_t v53 = *(void *)(j + 32);
            if (v52 < v53 || v53 >= v52 && *(void *)(j + 56) < *(void *)(j + 40))
            {
              std::string v54 = *v46;
              *uint64_t v46 = *v47;
              *uint64_t v47 = v54;
              uint64_t v55 = *(void *)(j + 32);
              int v56 = *(void *)(j + 16);
              if (v55 < v56 || v56 >= v55 && *(void *)(j + 40) < *(void *)(j + 24))
              {
                size_t v57 = *v45;
                *uint64_t v45 = *v46;
                *uint64_t v46 = v57;
                int v58 = *(void *)(j + 16);
                if (v58 < *(void *)j || *(void *)j >= v58 && *(void *)(j + 24) < *(void *)(j + 8))
                {
                  long long v110 = *(_OWORD *)j;
                  *(_OWORD *)unint64_t j = *v45;
                  *uint64_t v45 = v110;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 383)
    {
      uint64_t v59 = (long long *)(j + 16);
      long long v61 = (long long *)j == a2 || v59 == a2;
      if (a4)
      {
        if (v61) {
          return;
        }
        int v62 = 0;
        uint64_t v63 = (_OWORD *)j;
        while (2)
        {
          int v64 = (unint64_t *)v63;
          uint64_t v63 = v59;
          size_t v65 = v64[2];
          if (v65 < *v64)
          {
            uint64_t v66 = v64[3];
            goto LABEL_108;
          }
          if (*v64 >= v65)
          {
            uint64_t v66 = v64[3];
            if (v66 < v64[1])
            {
LABEL_108:
              MIL::IRCircularBufferValueType *v63 = *(_OWORD *)v64;
              uint64_t v67 = (void *)j;
              if (v64 != (unint64_t *)j)
              {
                int v68 = v62;
                while (1)
                {
                  uint64_t v69 = (_OWORD *)(j + v68);
                  int v70 = *(void *)(j + v68 - 16);
                  if (v65 >= v70)
                  {
                    if (v70 < v65)
                    {
                      uint64_t v67 = (void *)(j + v68);
                      goto LABEL_120;
                    }
                    if (v66 >= *((void *)v69 - 1)) {
                      break;
                    }
                  }
                  v64 -= 2;
                  *uint64_t v69 = *(_OWORD *)(j + v68 - 16);
                  v68 -= 16;
                  if (!v68)
                  {
                    uint64_t v67 = (void *)j;
                    goto LABEL_120;
                  }
                }
                uint64_t v67 = v64;
              }
LABEL_120:
              *uint64_t v67 = v65;
              v67[1] = v66;
            }
          }
          uint64_t v59 = v63 + 1;
          v62 += 16;
          if (v63 + 1 == a2) {
            return;
          }
          continue;
        }
      }
      if (v61) {
        return;
      }
      while (2)
      {
        std::string v100 = (unint64_t *)a1;
        a1 = (unint64_t)v59;
        char v101 = v100[2];
        if (v101 >= *v100)
        {
          if (*v100 >= v101)
          {
            long long v102 = v100[3];
            if (v102 < v100[1]) {
              goto LABEL_182;
            }
          }
        }
        else
        {
          long long v102 = v100[3];
          do
          {
            do
            {
LABEL_182:
              std::string v103 = v100;
              *((_OWORD *)v100 + 1) = *(_OWORD *)v100;
              v105 = *(v100 - 2);
              v100 -= 2;
              uint64_t v104 = v105;
            }
            while (v101 < v105);
          }
          while (v104 >= v101 && v102 < *(v103 - 1));
          *std::string v103 = v101;
          v103[1] = v102;
        }
        uint64_t v59 = (long long *)(a1 + 16);
        if ((long long *)(a1 + 16) == a2) {
          return;
        }
        continue;
      }
    }
    if (!a3) {
      break;
    }
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = (unint64_t *)(j + 16 * (v13 >> 1));
    if ((unint64_t)v12 >= 0x801)
    {
      v106 = *(_OWORD *)a1;
      *(_OWORD *)a1 = *(_OWORD *)v15;
      *(_OWORD *)uint64_t v15 = v106;
    }
    else
    {
    }
    --a3;
    unint64_t v16 = *(void *)a1;
    if ((a4 & 1) != 0
      || (unint64_t v17 = *(void *)(a1 - 16), v17 < v16)
      || (uint64_t v18 = *(void *)(a1 + 8), v16 >= v17) && *(void *)(a1 - 8) < v18)
    {
      uint64_t v19 = 0;
      uint64_t v20 = *(void *)(a1 + 8);
      while (1)
      {
        unint64_t v21 = *(void *)(a1 + v19 + 16);
        if (v21 >= v16 && (v16 < v21 || *(void *)(a1 + v19 + 24) >= v20)) {
          break;
        }
        v19 += 16;
      }
      uint64_t v22 = a1 + v19 + 16;
      if (v19)
      {
        long long v23 = *(void *)v10;
        for (unint64_t i = a2 - 1; v23 >= v16 && (v16 < v23 || *((void *)i + 1) >= v20); --i)
        {
          char v25 = *((void *)i - 2);
          long long v23 = v25;
        }
      }
      else
      {
        unint64_t i = a2;
        if (v22 < (unint64_t)a2)
        {
          BOOL v26 = *(void *)v10;
          unint64_t i = a2 - 1;
          if (*(void *)v10 >= v16)
          {
            unint64_t i = a2 - 1;
            do
            {
              if (v16 >= v26)
              {
                if (v22 >= (unint64_t)i || *((void *)i + 1) < v20) {
                  break;
                }
              }
              else if (v22 >= (unint64_t)i)
              {
                break;
              }
              long long v27 = *((void *)i-- - 2);
              BOOL v26 = v27;
            }
            while (v27 >= v16);
          }
        }
      }
      unint64_t j = v22;
      if (v22 < (unint64_t)i)
      {
        long long v28 = (unint64_t)i;
        do
        {
          v107 = *(_OWORD *)j;
          *(_OWORD *)unint64_t j = *(_OWORD *)v28;
          *(_OWORD *)long long v28 = v107;
          do
          {
            do
            {
              unint64_t v30 = *(void *)(j + 16);
              j += 16;
              long long v29 = v30;
            }
            while (v30 < v16);
          }
          while (v16 >= v29 && *(void *)(j + 8) < v20);
          do
          {
            uint64_t v32 = *(void *)(v28 - 16);
            v28 -= 16;
            uint64_t v31 = v32;
          }
          while (v32 >= v16 && (v16 < v31 || *(void *)(v28 + 8) >= v20));
        }
        while (j < v28);
      }
      if (j - 16 != a1) {
        *(_OWORD *)a1 = *(_OWORD *)(j - 16);
      }
      *(void *)(j - 16) = v16;
      *(void *)(j - std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v20;
      if (v22 < (unint64_t)i) {
        goto LABEL_48;
      }
      {
        a2 = (long long *)(j - 16);
        if (v33) {
          return;
        }
        goto LABEL_1;
      }
      if (!v33)
      {
LABEL_48:
        a4 = 0;
      }
    }
    else
    {
      uint64_t v34 = *(void *)v10;
      if (v16 >= *(void *)v10 && (v34 < v16 || v18 >= *((void *)a2 - 1)))
      {
        for (unint64_t j = a1 + 16;
              j < (unint64_t)a2 && v16 >= *(void *)j && (*(void *)j < v16 || v18 >= *(void *)(j + 8));
      }
      else
      {
        unint64_t j = a1;
        do
        {
          uint64_t v36 = *(void *)(j + 16);
          j += 16;
          uint64_t v35 = v36;
        }
        while (v16 >= v36 && (v35 < v16 || v18 >= *(void *)(j + 8)));
      }
      k = a2;
      if (j < (unint64_t)a2)
      {
        for (k = a2 - 1; v16 < v34 || v34 >= v16 && v18 < *((void *)k + 1); --k)
        {
          uint64_t v38 = *((void *)k - 2);
          uint64_t v34 = v38;
        }
      }
      while (j < (unint64_t)k)
      {
        char v108 = *(_OWORD *)j;
        *(_OWORD *)unint64_t j = *k;
        *k = v108;
        do
        {
          uint64_t v40 = *(void *)(j + 16);
          j += 16;
          int v39 = v40;
        }
        while (v16 >= v40 && (v39 < v16 || v18 >= *(void *)(j + 8)));
        do
        {
          do
          {
            uint64_t v42 = *((void *)k-- - 2);
            uint64_t v41 = v42;
          }
          while (v16 < v42);
        }
        while (v41 >= v16 && v18 < *((void *)k + 1));
      }
      uint64_t v4 = j - 16 >= a1;
      char v5 = j - 16 == a1;
      if (j - 16 != a1) {
        *(_OWORD *)a1 = *(_OWORD *)(j - 16);
      }
      a4 = 0;
      *(void *)(j - 16) = v16;
      *(void *)(j - std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v18;
    }
  }
  if ((long long *)j != a2)
  {
    uint64_t v71 = (v13 - 2) >> 1;
    uint64_t v72 = v71;
    do
    {
      size_t v73 = v72;
      if (v71 >= v72)
      {
        int v74 = (2 * v72) | 1;
        uint64_t v75 = (unint64_t *)(j + 16 * v74);
        if (2 * v73 + 2 < (uint64_t)v13)
        {
          int v76 = v75[2];
          if (*v75 < v76 || v76 >= *v75 && v75[1] < v75[3])
          {
            v75 += 2;
            int v74 = 2 * v73 + 2;
          }
        }
        size_t v77 = (unint64_t *)(j + 16 * v73);
        uint64_t v78 = *v77;
        if (*v75 >= *v77)
        {
          std::string v79 = *(void *)(j + 16 * v73 + 8);
          if (v78 < *v75 || v75[1] >= v79)
          {
            *(_OWORD *)size_t v77 = *(_OWORD *)v75;
            if (v71 >= v74)
            {
              while (1)
              {
                size_t v81 = 2 * v74;
                int v74 = (2 * v74) | 1;
                int v80 = (unint64_t *)(j + 16 * v74);
                uint64_t v82 = v81 + 2;
                if (v82 < (uint64_t)v13)
                {
                  std::string v83 = v80[2];
                  if (*v80 < v83 || v83 >= *v80 && v80[1] < v80[3])
                  {
                    v80 += 2;
                    int v74 = v82;
                  }
                }
                if (*v80 < v78 || v78 >= *v80 && v80[1] < v79) {
                  break;
                }
                *(_OWORD *)uint64_t v75 = *(_OWORD *)v80;
                uint64_t v75 = v80;
                if (v71 < v74) {
                  goto LABEL_136;
                }
              }
            }
            int v80 = v75;
LABEL_136:
            *int v80 = v78;
            v80[1] = v79;
          }
        }
      }
      uint64_t v72 = v73 - 1;
    }
    while (v73);
    int v84 = (unint64_t)v12 >> 4;
    while (2)
    {
      size_t v85 = 0;
      std::string::size_type v111 = *(_OWORD *)j;
      uint64_t v86 = (long long *)j;
      do
      {
        std::string v87 = v86;
        v86 += v85 + 1;
        int v88 = 2 * v85;
        size_t v85 = (2 * v85) | 1;
        size_t v89 = v88 + 2;
        if (v89 < v84)
        {
          uint64_t v90 = *((void *)v86 + 2);
          if (*(void *)v86 < v90 || v90 >= *(void *)v86 && *((void *)v86 + 1) < *((void *)v86 + 3))
          {
            ++v86;
            size_t v85 = v89;
          }
        }
        *std::string v87 = *v86;
      }
      while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
      if (v86 == --a2)
      {
        *uint64_t v86 = v111;
        goto LABEL_170;
      }
      *uint64_t v86 = *a2;
      *a2 = v111;
      uint64_t v91 = (uint64_t)v86 - j + 16;
      if (v91 >= 17)
      {
        int v92 = ((unint64_t)v91 >> 4) - 2;
        size_t v93 = v92 >> 1;
        std::string v94 = (unint64_t *)(j + 16 * (v92 >> 1));
        uint64_t v95 = *(void *)v86;
        if (*v94 < *(void *)v86)
        {
          v96 = *((void *)v86 + 1);
          goto LABEL_163;
        }
        if (v95 >= *v94)
        {
          v96 = *((void *)v86 + 1);
          if (v94[1] < v96)
          {
LABEL_163:
            *uint64_t v86 = *(_OWORD *)v94;
            if (v92 >= 2)
            {
              while (1)
              {
                std::string v98 = v93 - 1;
                size_t v93 = (v93 - 1) >> 1;
                size_t v97 = (unint64_t *)(j + 16 * v93);
                if (*v97 >= v95 && (v95 < *v97 || v97[1] >= v96)) {
                  break;
                }
                *(_OWORD *)std::string v94 = *(_OWORD *)v97;
                std::string v94 = (unint64_t *)(j + 16 * v93);
                if (v98 <= 1) {
                  goto LABEL_169;
                }
              }
            }
            size_t v97 = v94;
LABEL_169:
            *size_t v97 = v95;
            v97[1] = v96;
          }
        }
      }
LABEL_170:
      if (v84-- <= 2) {
        return;
      }
      continue;
    }
  }
}

  uint64_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    uint64_t v15 = ((char *)a2 - (char *)v11) >> 4;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v22 = (long long *)(a2 - 2);
          long long v23 = *(a2 - 2);
          if (v23 < *v11 || *v11 >= v23 && *(a2 - 1) < v11[1])
          {
            char v25 = *(_OWORD *)v11;
            *(_OWORD *)uint64_t v11 = *v22;
            *uint64_t v22 = v25;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((long long *)v11, v11 + 2, (long long *)a2 - 1);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((uint64_t)v11, v11 + 2, (uint64_t)(v11 + 4), (uint64_t)(a2 - 2));
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((__n128 *)v11, v11 + 2, (__n128 *)v11 + 2, (__n128 *)v11 + 3, (__n128 *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 383) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    unint64_t v17 = &v11[2 * (v15 >> 1)];
    if ((unint64_t)v14 >= 0x801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((long long *)v11, &v11[2 * (v15 >> 1)], (long long *)a2 - 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((long long *)v11 + 1, v17 - 2, (long long *)a2 - 2);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((long long *)v11 + 2, &v11[2 * v16 + 2], (long long *)a2 - 3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((long long *)v17 - 1, v17, (long long *)&v11[2 * v16 + 2]);
      unint64_t v24 = *(_OWORD *)v11;
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v17;
      *(_OWORD *)unint64_t v17 = v24;
      if (a5) {
        goto LABEL_15;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((long long *)&v11[2 * (v15 >> 1)], v11, (long long *)a2 - 1);
      if (a5) {
        goto LABEL_15;
      }
    }
    uint64_t v18 = *(v11 - 2);
    if (v18 >= *v11 && (*v11 < v18 || *(v11 - 1) >= v11[1]))
    {
      uint64_t v11 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,std::__less<void,void> &>(v11, (unint64_t)a2);
      goto LABEL_20;
    }
LABEL_15:
    uint64_t v19 = (long long *)std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,std::__less<void,void> &>(v11, (unint64_t)a2);
    if ((v20 & 1) == 0) {
      goto LABEL_18;
    }
    unint64_t v21 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((uint64_t)v11, v19);
    uint64_t v11 = (unint64_t *)(v19 + 1);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>((uint64_t)(v19 + 1), (long long *)a2))
    {
      a4 = -v13;
      a2 = (unint64_t *)v19;
      if (v21) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_18:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *,false>(a1, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (unint64_t *)(v19 + 1);
LABEL_20:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(v11, a2);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,MIL::Transform::ProgramTransformer::ProgramTransformerImpl::InsertionPosition *>(v11, a2);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, uint64_t a3)
{
  if ((const void **)a1 != a2)
  {
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    uint64_t v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      uint64_t v9 = 0;
      uint64_t v10 = (const void **)a1;
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v11))
        {
          long long v17 = *(_OWORD *)v10;
          uint64_t v18 = v10[2];
          v10[1] = 0;
          _OWORD v10[2] = 0;
          void *v10 = 0;
          uint64_t v12 = v9;
          do
          {
            uint64_t v13 = a1 + v12;
            uint64_t v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0) {
              operator delete(*v14);
            }
            *(_OWORD *)uint64_t v14 = *(_OWORD *)v13;
            *(void *)(a1 + v12 + 40) = *(void *)(v13 + 16);
            *(unsigned char *)(v13 + 23) = 0;
            *(unsigned char *)uint64_t v13 = 0;
            if (!v12)
            {
              uint64_t v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v17, (const void **)(v12 + a1)));
          int v15 = *(char *)(a1 + v12 + 47);
          uint64_t v16 = a1 + v12 + 24;
          if (v15 < 0) {
            operator delete(*(void **)v16);
          }
LABEL_13:
          *(_OWORD *)uint64_t v16 = v17;
          *(void *)(v16 + 16) = v18;
        }
        uint64_t v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    char v6 = a1;
    uint64_t v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      uint64_t v9 = a1 - 3;
      do
      {
        uint64_t v10 = v6;
        char v6 = v7;
        if (std::less<std::string>::operator()[abi:ne180100](a3, v7, v10))
        {
          long long v16 = *(_OWORD *)v6;
          long long v17 = v6[2];
          v6[1] = 0;
          void v6[2] = 0;
          *char v6 = 0;
          uint64_t v11 = v9;
          do
          {
            uint64_t v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0) {
              operator delete(*v12);
            }
            *(_OWORD *)uint64_t v12 = *(_OWORD *)(v11 + 3);
            unsigned char v11[8] = v11[5];
            *((unsigned char *)v11 + 47) = 0;
            *((unsigned char *)v11 + 24) = 0;
            BOOL v13 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          int v14 = *((char *)v11 + 71);
          int v15 = v11 + 6;
          if (v14 < 0) {
            operator delete((void *)*v15);
          }
          *(_OWORD *)int v15 = v16;
          _OWORD v15[2] = v17;
        }
        uint64_t v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a4, a2, a1);
  uint64_t result = std::less<std::string>::operator()[abi:ne180100](a4, a3, a2);
  if (!v8)
  {
    if (!result) {
      return result;
    }
    BOOL v13 = a2[2];
    long long v14 = *(_OWORD *)a2;
    int v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a2, a1)) {
      return 1;
    }
    long long v16 = a1[2];
    long long v17 = *(_OWORD *)a1;
    uint64_t v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!result)
  {
    uint64_t v19 = a1[2];
    long long v20 = *(_OWORD *)a1;
    unint64_t v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!std::less<std::string>::operator()[abi:ne180100](a4, a3, a2)) {
      return 1;
    }
    uint64_t v22 = a2[2];
    long long v23 = *(_OWORD *)a2;
    unint64_t v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  uint64_t v10 = a1[2];
  long long v11 = *(_OWORD *)a1;
  uint64_t v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  long long v16 = *(_OWORD *)a1;
  long long v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    char v6 = a1;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
  }
  else
  {
    uint64_t v7 = a1 + 3;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      BOOL v8 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v7);
      uint64_t v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *(_OWORD *)v6;
    uint64_t v19 = v6[2];
    long long v18 = v9;
    long long v10 = *(_OWORD *)v4;
    void v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)char v6 = v10;
    long long v11 = v18;
    *(void *)(v4 + 16) = v19;
    *(_OWORD *)unint64_t v4 = v11;
    do
      v6 += 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v16, (const void **)v4));
  }
  uint64_t v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0) {
      operator delete(*v12);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete((void *)*a1);
    }
    long long v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((unsigned char *)v6 - 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
  }
  long long v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)uint64_t v12 = v14;
  return v6;
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::string *,std::__less<void,void> &>(long long *a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  long long v17 = *a1;
  uint64_t v18 = *((void *)a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  do
    v6 += 24;
  while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  unint64_t v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2) {
        break;
      }
      a2 -= 3;
    }
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!std::less<std::string>::operator()[abi:ne180100](a3, a2, (const void **)&v17));
  }
  unint64_t v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    long long v9 = a2;
    do
    {
      long long v19 = *(_OWORD *)v8;
      long long v10 = v19;
      long long v20 = *(const void **)(v8 + 16);
      long long v11 = v20;
      uint64_t v12 = v9[2];
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
      *(void *)(v8 + 16) = v12;
      uint64_t v9[2] = v11;
      *(_OWORD *)long long v9 = v10;
      do
        v8 += 24;
      while (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!std::less<std::string>::operator()[abi:ne180100](a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  long long v13 = (void **)(v8 - 24);
  if ((long long *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0) {
      operator delete(*v13);
    }
  }
  else
  {
    if (*((char *)a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v14 = *(_OWORD *)v13;
    *((void *)a1 + 2) = *(void *)(v8 - 8);
    *a1 = v14;
    *(unsigned char *)(v8 - 1) = 0;
    *(unsigned char *)(v8 - 24) = 0;
  }
  long long v15 = v17;
  *(void *)(v8 - std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v18;
  *(_OWORD *)long long v13 = v15;
  return v8 - 24;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v8 = a2 - 24;
      if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)(a2 - 24), (const void **)a1))
      {
        uint64_t v9 = *(void *)(a1 + 16);
        long long v10 = *(_OWORD *)a1;
        uint64_t v11 = *(void *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(void *)(a1 + 16) = v11;
        *(_OWORD *)uint64_t v8 = v10;
        *(void *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (long long *)(a1 + 72), (long long *)(a2 - 24), a3);
      return 1;
    default:
      uint64_t v12 = (const void **)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      uint64_t v13 = a1 + 72;
      if (a1 + 72 == a2) {
        return 1;
      }
      uint64_t v14 = 0;
      int v15 = 0;
      break;
  }
  while (1)
  {
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v13, v12))
    {
      long long v22 = *(_OWORD *)v13;
      uint64_t v23 = *(void *)(v13 + 16);
      *(void *)(v13 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)uint64_t v13 = 0;
      uint64_t v16 = v14;
      do
      {
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0) {
          operator delete(*v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 48);
        *(void *)(a1 + v16 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(v17 + 64);
        *(unsigned char *)(v17 + 71) = 0;
        *(unsigned char *)(v17 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
        if (v16 == -48)
        {
          uint64_t v21 = a1;
          goto LABEL_15;
        }
        BOOL v19 = std::less<std::string>::operator()[abi:ne180100](a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      int v20 = *(char *)(a1 + v16 + 95);
      uint64_t v21 = a1 + v16 + 72;
      if (v20 < 0) {
        operator delete(*(void **)v21);
      }
LABEL_15:
      *(_OWORD *)uint64_t v21 = v22;
      *(void *)(v21 + 16) = v23;
      if (++v15 == 8) {
        return v13 + 24 == a2;
      }
    }
    uint64_t v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, uint64_t a5)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((const void **)a1, a2, a3, a5);
  if (std::less<std::string>::operator()[abi:ne180100](a5, (const void **)a4, a3))
  {
    uint64_t v11 = a3[2];
    long long v12 = *(_OWORD *)a3;
    uint64_t v13 = (const void *)*((void *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((void *)a4 + 2) = v11;
    if (std::less<std::string>::operator()[abi:ne180100](a5, a3, a2))
    {
      uint64_t v14 = a2[2];
      long long v15 = *(_OWORD *)a2;
      uint64_t v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (std::less<std::string>::operator()[abi:ne180100](a5, a2, (const void **)a1))
      {
        uint64_t v17 = *(const void **)(a1 + 16);
        __n128 result = *(__n128 *)a1;
        uint64_t v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(void *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, const void **a2, const void **a3, long long *a4, long long *a5, uint64_t a6)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a2, a3, a4, a6);
  if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a5, (const void **)a4))
  {
    uint64_t v13 = *((void *)a4 + 2);
    long long v14 = *a4;
    uint64_t v15 = *((void *)a5 + 2);
    *a4 = *a5;
    *((void *)a4 + 2) = v15;
    *a5 = v14;
    *((void *)a5 + 2) = v13;
    if (std::less<std::string>::operator()[abi:ne180100](a6, (const void **)a4, a3))
    {
      uint64_t v16 = a3[2];
      long long v17 = *(_OWORD *)a3;
      uint64_t v18 = (const void *)*((void *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((void *)a4 + 2) = v16;
      if (std::less<std::string>::operator()[abi:ne180100](a6, a3, a2))
      {
        BOOL v19 = a2[2];
        long long v20 = *(_OWORD *)a2;
        uint64_t v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (std::less<std::string>::operator()[abi:ne180100](a6, a2, (const void **)a1))
        {
          long long v22 = *(const void **)(a1 + 16);
          __n128 result = *(__n128 *)a1;
          uint64_t v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(void *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

long long *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,std::string *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  if ((long long *)a1 != a2)
  {
    uint64_t v8 = (uint64_t)a2 - a1;
    uint64_t v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      long long v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, v12);
        long long v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = a2;
    if (a2 != a3)
    {
      long long v14 = a2;
      do
      {
        if (std::less<std::string>::operator()[abi:ne180100](a4, (const void **)v14, (const void **)a1))
        {
          uint64_t v15 = *((void *)v14 + 2);
          long long v16 = *v14;
          uint64_t v17 = *(void *)(a1 + 16);
          long long *v14 = *(_OWORD *)a1;
          *((void *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(void *)(a1 + 16) = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v9, (__n128 *)a1);
        }
        long long v14 = (long long *)((char *)v14 + 24);
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 25)
    {
      int64_t v18 = v8 / 0x18uLL;
      BOOL v19 = (long long *)((char *)a2 - 24);
      do
      {
        uint64_t v20 = *(void *)a1;
        *(void *)long long v28 = *(void *)(a1 + 8);
        *(void *)&v28[7] = *(void *)(a1 + 15);
        char v21 = *(unsigned char *)(a1 + 23);
        *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, a4, v18);
        uint64_t v23 = v22;
        int v24 = *(char *)(v22 + 23);
        if (v19 == (long long *)v22)
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          *(void *)uint64_t v23 = v20;
          *(void *)(v23 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)v28;
          *(void *)(v23 + 15) = *(void *)&v28[7];
          *(unsigned char *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0) {
            operator delete(*(void **)v22);
          }
          long long v25 = *v19;
          *(void *)(v23 + 16) = *((void *)v19 + 2);
          *(_OWORD *)uint64_t v23 = v25;
          *(void *)BOOL v19 = v20;
          *((void *)v19 + 1) = *(void *)v28;
          *(void *)((char *)v19 + 15) = *(void *)&v28[7];
          *((unsigned char *)v19 + 23) = v21;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        BOOL v19 = (long long *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_20F3B8ED8(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  unint64_t v6 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v22 = v4;
    uint64_t v23 = v5;
    unint64_t v7 = a4;
    uint64_t v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      uint64_t v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      uint64_t v13 = a1 + 24 * v12;
      uint64_t v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3
        && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        uint64_t v12 = v14;
      }
      if (!std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)v7))
      {
        __n128 v20 = *v7;
        unint64_t v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          long long v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0) {
            operator delete((void *)v7->n128_u64[0]);
          }
          __n128 v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(void *)(v13 + 16);
          *unint64_t v7 = v17;
          *(unsigned char *)(v13 + 23) = 0;
          *(unsigned char *)uint64_t v13 = 0;
          if (v9 < v12) {
            break;
          }
          uint64_t v18 = (2 * v12) | 1;
          uint64_t v13 = a1 + 24 * v18;
          uint64_t v19 = 2 * v12 + 2;
          if (v19 < a3
            && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            uint64_t v18 = v19;
          }
          unint64_t v7 = v16;
          uint64_t v12 = v18;
          if (std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0) {
              operator delete((void *)v16->n128_u64[0]);
            }
            break;
          }
        }
        __n128 result = v20;
        v16[1].n128_u64[0] = v21;
        *long long v16 = result;
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 24 * v6 + 24;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3
      && std::less<std::string>::operator()[abi:ne180100](a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      uint64_t v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v12 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = *(void *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(unsigned char *)(v9 + 23) = 0;
    *(unsigned char *)uint64_t v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v16 = v4;
    uint64_t v17 = v5;
    unint64_t v8 = (unint64_t)(a4 - 2) >> 1;
    uint64_t v9 = (long long *)(a1 + 24 * v8);
    uint64_t v10 = (long long *)(a2 - 24);
    if (std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      long long v14 = *v10;
      uint64_t v15 = *((void *)v10 + 2);
      *((void *)v10 + 1) = 0;
      *((void *)v10 + 2) = 0;
      *(void *)uint64_t v10 = 0;
      while (1)
      {
        long long v12 = v9;
        if (*((char *)v10 + 23) < 0) {
          operator delete(*(void **)v10);
        }
        long long v13 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        long long *v10 = v13;
        *((unsigned char *)v9 + 23) = 0;
        *(unsigned char *)uint64_t v9 = 0;
        if (!v8) {
          break;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (long long *)(a1 + 24 * v8);
        uint64_t v10 = v12;
        if (!std::less<std::string>::operator()[abi:ne180100](a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          break;
        }
      }
      double result = *(double *)&v14;
      *long long v12 = v14;
      *((void *)v12 + 2) = v15;
    }
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::__emplace_unique_key_args<std::string,std::string const&,std::unique_ptr<MIL::IROpset const>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (unint64_t i = *v15; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IROpset const>>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *int v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20F3B94E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::__construct_node_hash<std::string const&,std::unique_ptr<MIL::IROpset const>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = operator new(0x30uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  void *v10 = 0;
  v10[1] = a2;
  unint64_t v11 = (std::string *)(v10 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v10[4] = *(void *)(a3 + 16);
  }
  uint64_t v12 = *a4;
  *a4 = 0;
  void v10[5] = v12;
  *(unsigned char *)(a5 + 16) = 1;
}

void sub_20F3B9588(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<MIL::IROpset const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

void *std::allocate_shared[abi:ne180100]<MIL::Blob::LegacyStorageReader,std::allocator<MIL::Blob::LegacyStorageReader>,std::string const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x68uLL);
  double result = std::__shared_ptr_emplace<MIL::Blob::LegacyStorageReader>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<MIL::Blob::LegacyStorageReader>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20F3B9640(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MIL::Blob::LegacyStorageReader>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<MIL::Blob::LegacyStorageReader>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C257998;
  std::allocator<MIL::Blob::LegacyStorageReader>::construct[abi:ne180100]<MIL::Blob::LegacyStorageReader,std::string const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_20F3B96B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Blob::LegacyStorageReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C257998;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Blob::LegacyStorageReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C257998;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<MIL::Blob::LegacyStorageReader>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<MIL::Blob::LegacyStorageReader>::construct[abi:ne180100]<MIL::Blob::LegacyStorageReader,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  MIL::Blob::LegacyStorageReader::LegacyStorageReader(a2, (long long *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20F3B97B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&>(uint64_t a1, unsigned __int8 *a2, long long *a3, std::string::size_type *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (unint64_t i = *v15; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>>>::__construct_node_hash<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *int v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20F3B9A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::LegacyStorageReader>>>>::__construct_node_hash<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, std::string::size_type *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  double result = std::pair<std::string const,std::shared_ptr<MIL::Blob::LegacyStorageReader>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_20F3B9AC8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,std::shared_ptr<MIL::Blob::LegacyStorageReader>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&,0>(std::string *this, long long *a2, std::string::size_type *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void *std::allocate_shared[abi:ne180100]<MIL::Blob::StorageReader,std::allocator<MIL::Blob::StorageReader>,std::string const&,void>@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  unint64_t v4 = operator new(0x20uLL);
  double result = std::__shared_ptr_emplace<MIL::Blob::StorageReader>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<MIL::Blob::StorageReader>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_20F3B9B94(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<MIL::Blob::StorageReader>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<MIL::Blob::StorageReader>,0>(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26C2579E8;
  std::allocator<MIL::Blob::StorageReader>::construct[abi:ne180100]<MIL::Blob::StorageReader,std::string const&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_20F3B9C04(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<MIL::Blob::StorageReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2579E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<MIL::Blob::StorageReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C2579E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_emplace<MIL::Blob::StorageReader>::__on_zero_shared(uint64_t a1)
{
}

void std::allocator<MIL::Blob::StorageReader>::construct[abi:ne180100]<MIL::Blob::StorageReader,std::string const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  MIL::Blob::StorageReader::StorageReader(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20F3B9D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<MIL::Blob::StorageReader>&>(uint64_t a1, unsigned __int8 *a2, long long *a3, std::string::size_type *a4)
{
  uint64_t v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (unint64_t i = *v15; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>>>::__construct_node_hash<std::string const&,std::shared_ptr<MIL::Blob::StorageReader>&>(a1, v11, a3, a4, (uint64_t)v27);
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    BOOL v20 = 1;
    if (v12 >= 3) {
      BOOL v20 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v12);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v21;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v23);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  int v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *(void *)v27[0] = *v24;
    *int v24 = v27[0];
  }
  else
  {
    *(void *)v27[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v27[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v27[0])
    {
      unint64_t v25 = *(void *)(*(void *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12) {
          v25 %= v12;
        }
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v25) = v27[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_20F3B9F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::Blob::StorageReader>>>>::__construct_node_hash<std::string const&,std::shared_ptr<MIL::Blob::StorageReader>&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, std::string::size_type *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = a1 + 16;
  unint64_t v10 = (char *)operator new(0x38uLL);
  *(void *)a5 = v10;
  *(void *)(a5 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(unsigned char *)(a5 + 16) = 0;
  *(void *)unint64_t v10 = 0;
  *((void *)v10 + 1) = a2;
  double result = std::pair<std::string const,std::shared_ptr<MIL::Blob::LegacyStorageReader>>::pair[abi:ne180100]<std::string const&,std::shared_ptr<MIL::Blob::LegacyStorageReader>&,0>((std::string *)(v10 + 16), a3, a4);
  *(unsigned char *)(a5 + 16) = 1;
  return result;
}

void sub_20F3BA01C(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(MIL::Transform::ProgramTransformer &)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void MIL::MILContextImpl::MILContextImpl(MIL::MILContextImpl *this)
{
  *(void *)this = &unk_26C257930;
  *(_OWORD *)((char *)this + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *(_OWORD *)((char *)this + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *((_DWORD *)this + 30) = 1065353216;
  *((_OWORD *)this + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *(_OWORD *)((char *)this + 16std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *(_OWORD *)((char *)this + 24std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 60) = 1065353216;
  *(_OWORD *)((char *)this + 264) = 0u;
  *((_DWORD *)this + 70) = 1065353216;
  *((_OWORD *)this + 1std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 19) = 0u;
  *((_DWORD *)this + 80) = 1065353216;
  *(_OWORD *)((char *)this + 32std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *((_DWORD *)this + 90) = 1065353216;
  *((_OWORD *)this + 23) = 0u;
  *((_OWORD *)this + 24) = 0u;
  *((_DWORD *)this + 100) = 1065353216;
  *(_OWORD *)((char *)this + 40std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *((_DWORD *)this + 110) = 1065353216;
  *((_OWORD *)this + 2std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *(_OWORD *)((char *)this + 48std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *((_DWORD *)this + 120) = 1065353216;
  *(_OWORD *)((char *)this + 504) = 0u;
  *((_DWORD *)this + 130) = 1065353216;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_DWORD *)this + 140) = 1065353216;
  *(_OWORD *)((char *)this + 56std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *((_DWORD *)this + 150) = 1065353216;
  MIL::Conversion::OpConversion::Make(this);
}

void sub_20F3BA2F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v28 = *v26;
  uint64_t *v26 = 0;
  if (v28) {
    MIL::MILContextImpl::MILContextImpl(v28);
  }
  uint64_t v29 = *v24;
  *int v24 = 0;
  if (v29) {
    (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
  }
  uint64_t v30 = *v22;
  *unint64_t v22 = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  uint64_t v31 = *v21;
  *unint64_t v21 = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unique_ptr<MIL::IROpset const>>>>::~__hash_table(v23 + 320);
  std::__hash_table<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::__unordered_map_hasher<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::hash<MIL::IRValueType const*>,std::equal_to<MIL::IRValueType const*>,true>,std::__unordered_map_equal<MIL::IRValueType const*,std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>,std::equal_to<MIL::IRValueType const*>,std::hash<MIL::IRValueType const*>,true>,std::allocator<std::__hash_value_type<MIL::IRValueType const*,std::unique_ptr<MIL::IRStateValueType const>>>>::~__hash_table(a10);
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRCircularBufferValueType const>>>>::~__hash_table(v20);
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>,std::equal_to<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRPixelFormatType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRPixelBufferValueType const>>>>::~__hash_table(v19);
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*>>,std::shared_ptr<std::vector<MIL::IRProperty const*>>,MIL::IRProperty const*,std::shared_ptr<std::vector<MIL::IRProperty const*>>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorBufferValueType const>>>>::~__hash_table(v18);
  std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::~__hash_table(a11);
  std::__hash_table<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::__unordered_map_hasher<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::__unordered_map_equal<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>,std::equal_to<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,std::hash<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>>,true>,std::allocator<std::__hash_value_type<std::pair<MIL::IRValueType const*,MIL::IRValueType const*>,std::unique_ptr<MIL::IRDictionaryValueType const>>>>::~__hash_table(v25);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::__unordered_map_hasher<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::__unordered_map_equal<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>,std::equal_to<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,std::hash<std::shared_ptr<std::vector<MIL::IRValueType const*>>>,true>,std::allocator<std::__hash_value_type<std::shared_ptr<std::vector<MIL::IRValueType const*>>,std::unique_ptr<MIL::IRTupleValueType const>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::__unordered_map_hasher<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::__unordered_map_equal<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>,std::equal_to<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,std::hash<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>>,true>,std::allocator<std::__hash_value_type<std::tuple<MIL::IRDataType,std::shared_ptr<std::vector<MIL::IRDimension const*> const>,std::unordered_map<std::string,std::shared_ptr<MIL::IRValue const>>>,std::unique_ptr<MIL::IRTensorValueType const>>>>::~__hash_table(v23);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::~__hash_table(a13);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::~__hash_table(a14);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantProperty const>>>>::~__hash_table(a15);
  std::__hash_table<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::unique_ptr<MIL::IRConstantDimension const>>>>::~__hash_table(a16);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a17);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(a18);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::vector<MIL::IRValueType const*>>::shared_ptr[abi:ne180100]<std::vector<MIL::IRValueType const*>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20F3BA4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<std::vector<MIL::IRDimension const*>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<MIL::IRValueType const*> *,std::shared_ptr<std::vector<MIL::IRValueType const*>>::__shared_ptr_default_delete<std::vector<MIL::IRValueType const*>,std::vector<MIL::IRValueType const*>>,std::allocator<std::vector<MIL::IRValueType const*>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

void std::__shared_ptr_pointer<std::vector<MIL::IRValueType const*> *,std::shared_ptr<std::vector<MIL::IRValueType const*>>::__shared_ptr_default_delete<std::vector<MIL::IRValueType const*>,std::vector<MIL::IRValueType const*>>,std::allocator<std::vector<MIL::IRValueType const*>>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::vector<MIL::IRValueType const*> *,std::shared_ptr<std::vector<MIL::IRValueType const*>>::__shared_ptr_default_delete<std::vector<MIL::IRValueType const*>,std::vector<MIL::IRValueType const*>>,std::allocator<std::vector<MIL::IRValueType const*>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void MIL::Attributes::BlobFileMutabilityInfo::~BlobFileMutabilityInfo(MIL::Attributes::BlobFileMutabilityInfo *this)
{
}

{
  std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

void *MIL::Attributes::BlobFileMutabilityInfo::BlobFileMutabilityInfo(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  std::string *result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  std::string *result = v2;
  return result;
}

void MIL::Attributes::BlobFileMutabilityInfo::Make(MIL::Attributes::BlobFileMutabilityInfo *this)
{
}

void sub_20F3BA644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void MIL::Attributes::BlobFileMutabilityInfo::Make(MIL::Attributes::BlobFileMutabilityInfo *this, const MIL::IRValue *a2)
{
  memset(v19, 0, sizeof(v19));
  int v20 = 1065353216;
  uint64_t v2 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(this);
  v18[0] = MIL::IRTupleValue::GetValues(v2);
  v18[1] = v3;
  uint64_t v4 = (const void **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v18, 0);
  MIL::IRValue::GetScalar<std::string>(*v4, &v17);
  std::string::size_type size = HIBYTE(v17.__r_.__value_.__r.__words[2]);
  if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v17.__r_.__value_.__l.__size_;
  }
  if (size == 5)
  {
    std::string::size_type v6 = &v17;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    int data = (int)v6->__r_.__value_.__l.__data_;
    int v8 = v6->__r_.__value_.__s.__data_[4];
    if (data == 1752457552 && v8 == 115)
    {
      uint64_t v10 = (MIL::IRValue **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v18, 1uLL);
      unint64_t v11 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(*v10);
      memset(v24, 0, sizeof(v24));
      int v25 = 1065353216;
      for (uint64_t i = MIL::IRDictionaryValue::begin(v11); i != MIL::IRDictionaryValue::end(v11); uint64_t i = *(void *)i)
      {
        MIL::IRValue::GetScalar<std::string>(*(const void **)(i + 16), &__p);
        MIL::IRValue::GetScalar<std::string>(*(const void **)(i + 32), &__str);
        p_p = &__p;
        uint8x8_t v13 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v24, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
        std::string::operator=((std::string *)(v13 + 40), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign((uint64_t)v19, (uint64_t *)v24);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v24);
      operator new();
    }
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::operator+<char>();
  uint64_t v15 = std::string::append(&__p, "'.");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  *(void *)&v24[16] = *((void *)&v15->__r_.__value_.__l + 2);
  *(_OWORD *)int v24 = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::runtime_error::runtime_error(exception, (const std::string *)v24);
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3BA92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (*(char *)(v37 - 73) < 0) {
    operator delete(*(void **)(v37 - 96));
  }
  if (a35 < 0)
  {
    operator delete(__p);
    if ((v36 & 1) == 0)
    {
LABEL_8:
      if (a15 < 0) {
        operator delete(a10);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a18);
      _Unwind_Resume(a1);
    }
  }
  else if (!v36)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v35);
  goto LABEL_8;
}

uint64_t MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(void *a1, unint64_t a2)
{
  if (a1[1] <= a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::range_error::range_error[abi:ne180100](exception, "index out of bounds");
    __cxa_throw(exception, (struct type_info *)off_26412C1D0, MEMORY[0x263F8C050]);
  }
  return *a1 + 16 * a2;
}

void sub_20F3BAA80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void MIL::Attributes::BlobFileMutabilityInfo::Make(MIL::Attributes::BlobFileMutabilityInfo *this, const MIL::IRProgram *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "BlobFileMutabilityInfo");
  Attribute = (MIL::Attributes::BlobFileMutabilityInfo *)MIL::IRObject::TryGetAttribute((uint64_t)this, (unsigned __int8 *)__p);
  long long v5 = Attribute;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v5) {
    MIL::Attributes::BlobFileMutabilityInfo::Make(v5, v4);
  }
  MIL::Attributes::BlobFileMutabilityInfo::Make(Attribute);
}

void sub_20F3BAB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::BlobFileMutabilityInfo::GetValue(MIL::Attributes::BlobFileMutabilityInfo *this, MIL::MILContext *a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  MIL::IRTensorValueType::MakeScalar();
}

void sub_20F3BAF84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, MIL::IRDictionaryValue *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34)
{
  std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100](&a10, 0);
  uint64_t v36 = v34 - 88;
  uint64_t v37 = a26;
  a26 = 0;
  if (v37) {
    (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  for (; v36 != v34 - 104; v36 -= 16)
  {
    uint64_t v38 = *(std::__shared_weak_count **)(v36 - 8);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
  }
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a34);
  _Unwind_Resume(a1);
}

std::string *MIL::Attributes::BlobFileMutabilityInfo::AddPath(uint64_t *a1, long long *a2, const std::string *a3)
{
  uint64_t v4 = *a1;
  char v7 = a2;
  long long v5 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v4, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  return std::string::operator=((std::string *)(v5 + 40), a3);
}

void MIL::Attributes::BlobFileMutabilityInfo::GetPath(void **a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
}

void MIL::Attributes::BlobFileMutabilityInfo::Impl::GetPath(void *a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a1, a2);
  if (v4)
  {
    if ((char)v4[63] < 0)
    {
      std::string::size_type v6 = (const std::string::value_type *)*((void *)v4 + 5);
      std::string::size_type v7 = *((void *)v4 + 6);
      std::string::__init_copy_ctor_external(a3, v6, v7);
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 40);
      a3->__r_.__value_.__r.__words[2] = *((void *)v4 + 7);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

uint64_t MIL::Attributes::BlobFileMutabilityInfo::GetAllPaths(MIL::Attributes::BlobFileMutabilityInfo *this)
{
  return *(void *)this;
}

unsigned __int8 *MIL::Attributes::BlobFileMutabilityInfo::RemovePath(void **a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(*a1, a2);
}

void MIL::Attributes::BlobFileMutabilityInfo::Clear(MIL::Attributes::BlobFileMutabilityInfo *this)
{
}

void MIL::Attributes::BlobFileMutabilityInfo::ReplaceModelPaths(uint64_t a1, void *a2)
{
  for (uint64_t i = *(uint64_t **)(*(void *)a1 + 16); i; uint64_t i = (uint64_t *)*i)
    MIL::Util::ReplaceModelPaths((std::string *)(i + 5), a2);
}

uint64_t MIL::Attributes::BlobFileMutabilityInfo::ApplyModelPath(uint64_t result, uint64_t a2, void *a3)
{
  for (uint64_t i = *(void **)(*(void *)result + 16); i; uint64_t i = (void *)*i)
    double result = MIL::Util::ApplyModelPath((uint64_t)(i + 5), a2, a3);
  return result;
}

void MIL::Attributes::BlobFileMutabilityInfo::Replace(MIL::Attributes::BlobFileMutabilityInfo *this, MIL::IRProgram *a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = (*(uint64_t (**)(MIL::IRProgram *))(*(void *)a2 + 40))(a2);
  if (*(void *)(v4 + 24))
  {
    std::string::size_type v6 = (MIL::MILContext *)v5;
    std::string::basic_string[abi:ne180100]<0>(&__p, "BlobFileMutabilityInfo");
    MIL::Attributes::BlobFileMutabilityInfo::GetValue(this, v6);
  }
  std::string::basic_string[abi:ne180100]<0>(v8, "BlobFileMutabilityInfo");
  MIL::IRObject::RemoveAttribute((uint64_t)a2, (unsigned __int8 *)v8);
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_20F3BB45C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::BlobFileMutabilityInfo::Rewrite(MIL::Attributes::BlobFileMutabilityInfo *this@<X0>, const MIL::IRProgram *a2@<X1>, MIL::IRProgram **a3@<X8>)
{
}

void sub_20F3BB50C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MIL::Attributes::BlobFileMutabilityInfo::Rewrite(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Attributes::BlobFileMutabilityInfo::operator==(uint64_t *a1, void **a2)
{
  return std::operator==[abi:ne180100]<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>(*a1, *a2);
}

std::string *MIL::Attributes::BlobFileMutabilityInfo::UpdateMutabilityPaths(std::string **a1, uint64_t a2, std::string *a3)
{
  return MIL::Attributes::BlobFileMutabilityInfo::Impl::UpdateMutabilityPaths(*a1, a2, a3);
}

std::string *MIL::Attributes::BlobFileMutabilityInfo::Impl::UpdateMutabilityPaths(std::string *result, uint64_t a2, std::string *__str)
{
  uint64_t v3 = (uint64_t *)result->__r_.__value_.__r.__words[2];
  if (v3)
  {
    while (1)
    {
      uint64_t v6 = *((unsigned __int8 *)v3 + 63);
      if ((v6 & 0x80u) == 0) {
        uint64_t v7 = *((unsigned __int8 *)v3 + 63);
      }
      else {
        uint64_t v7 = v3[6];
      }
      uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
      int v9 = (char)v8;
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *(void *)(a2 + 8);
      }
      if (v7 != v8) {
        goto LABEL_19;
      }
      uint64_t v10 = v9 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v6 & 0x80) == 0) {
        break;
      }
      double result = (std::string *)memcmp((const void *)v3[5], v10, v3[6]);
      if (!result) {
        goto LABEL_18;
      }
LABEL_19:
      uint64_t v3 = (uint64_t *)*v3;
      if (!v3) {
        return result;
      }
    }
    if (*((unsigned char *)v3 + 63))
    {
      unint64_t v11 = (unsigned __int8 *)(v3 + 5);
      while (*v11 == *v10)
      {
        ++v11;
        ++v10;
        if (!--v6) {
          goto LABEL_18;
        }
      }
      goto LABEL_19;
    }
LABEL_18:
    double result = std::string::operator=((std::string *)(v3 + 5), __str);
    goto LABEL_19;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3BB884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  void v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3BB928(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  double result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t std::operator==[abi:ne180100]<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2) {
    return 1;
  }
  do
  {
    unint64_t v4 = (const void **)(v2 + 2);
    uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v2 + 16);
    if (!result) {
      break;
    }
    uint64_t v6 = result;
    uint64_t v7 = *((unsigned __int8 *)v2 + 39);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v8 = v2[3];
    }
    uint64_t v9 = *(unsigned __int8 *)(result + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(result + 24);
    }
    if (v8 != v9) {
      return 0;
    }
    if (v10 >= 0) {
      long long v11 = (unsigned __int8 *)(result + 16);
    }
    else {
      long long v11 = *(unsigned __int8 **)(result + 16);
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v4, v11, v2[3])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v11)
      {
        unint64_t v4 = (const void **)((char *)v4 + 1);
        ++v11;
        if (!--v7) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    uint64_t v12 = *((unsigned __int8 *)v2 + 63);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *((unsigned __int8 *)v2 + 63);
    }
    else {
      uint64_t v13 = v2[6];
    }
    uint64_t v14 = *(unsigned __int8 *)(v6 + 63);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v6 + 48);
    }
    if (v13 != v14) {
      return 0;
    }
    unint64_t v16 = (const void **)(v2 + 5);
    BOOL v19 = *(unsigned __int8 **)(v6 + 40);
    float v18 = (unsigned __int8 *)(v6 + 40);
    float v17 = v19;
    if (v15 >= 0) {
      unint64_t v20 = v18;
    }
    else {
      unint64_t v20 = v17;
    }
    if ((v12 & 0x80) != 0)
    {
      if (memcmp(*v16, v20, v2[6])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 63))
    {
      while (*(unsigned __int8 *)v16 == *v20)
      {
        unint64_t v16 = (const void **)((char *)v16 + 1);
        ++v20;
        if (!--v12) {
          goto LABEL_34;
        }
      }
      return 0;
    }
LABEL_34:
    uint64_t v2 = (uint64_t *)*v2;
    uint64_t result = 1;
  }
  while (v2);
  return result;
}

uint64_t std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::__emplace_unique_key_args<std::shared_ptr<MIL::IRValue const>,std::piecewise_construct_t const&,std::tuple<std::shared_ptr<MIL::IRValue const>&&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = MIL::IRValueMapHasher::operator()(a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void **)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      int v15 = (void *)*v14;
      if (*v14)
      {
        do
        {
          unint64_t v16 = v15[1];
          if (v16 == v10)
          {
            if (MIL::IRValueMapEq::operator()(a1 + 32, v15 + 2, a2)) {
              return v15;
            }
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11) {
                v16 %= v11;
              }
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4) {
              break;
            }
          }
          int v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  float v17 = operator new(0x30uLL);
  v28[0] = v17;
  v28[1] = a1 + 16;
  void *v17 = 0;
  v17[1] = v10;
  float v18 = *a4;
  *((_OWORD *)v17 + 1) = **a4;
  *float v18 = 0;
  v18[1] = 0;
  v17[4] = 0;
  v17[5] = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    BOOL v21 = 1;
    if (v11 >= 3) {
      BOOL v21 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v11);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  int v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *int v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  int v15 = (void *)v28[0];
  v28[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return v15;
}

void sub_20F3BBEC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::shared_ptr<MIL::IRValue const> const,std::shared_ptr<MIL::IRValue const>>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

MIL::IRDictionaryValue *std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100](MIL::IRDictionaryValue **a1, MIL::IRDictionaryValue *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

MIL::IRDictionaryValue *std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(MIL::IRDictionaryValue **)(a1 + 24);
  if (result)
  {
    MIL::IRDictionaryValue::~IRDictionaryValue(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRDictionaryValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

MIL::IRTupleValue *std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100](MIL::IRTupleValue **a1, MIL::IRTupleValue *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IRTupleValue::~IRTupleValue(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

void std::__shared_ptr_pointer<MIL::IRTupleValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

MIL::IRTupleValue *std::__shared_ptr_pointer<MIL::IRTupleValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(MIL::IRTupleValue **)(a1 + 24);
  if (result)
  {
    MIL::IRTupleValue::~IRTupleValue(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRTupleValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void *MIL::Attributes::ModelInfoToString@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = 0;
  unint64_t v4 = (int *)off_26412C4A8;
  {
    v3 += 6;
    if (v3 == 30) {
      goto LABEL_6;
    }
  }
LABEL_6:
  size_t v5 = *((void *)v4 + 2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = (const void *)*((void *)v4 + 1);
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    unint64_t v9 = operator new(v7 + 1);
    a2[1] = v5;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((unsigned char *)a2 + 23) = v5;
    if (!v5) {
      goto LABEL_14;
    }
  }
  uint64_t result = memmove(a2, v6, v5);
LABEL_14:
  *((unsigned char *)a2 + v5) = 0;
  return result;
}

void MIL::Attributes::BuildInfo::~BuildInfo(MIL::Attributes::BuildInfo *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<MIL::Attributes::BuildInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<MIL::Attributes::BuildInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void *MIL::Attributes::BuildInfo::BuildInfo(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  MIL::IRTupleValue *result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  MIL::IRTupleValue *result = v2;
  return result;
}

void MIL::Attributes::BuildInfo::Make(MIL::Attributes::BuildInfo *this)
{
}

void sub_20F3BC350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<MIL::Attributes::BuildInfo::Impl>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void MIL::Attributes::BuildInfo::Make(MIL::Attributes::BuildInfo *this, const MIL::IRProgram *a2)
{
  BYTE7(v39) = 9;
  strcpy((char *)__p, "buildInfo");
  Attribute = (MIL::Attributes::BuildInfo *)MIL::IRObject::TryGetAttribute((uint64_t)this, (unsigned __int8 *)__p);
  uint64_t v3 = Attribute;
  if (SBYTE7(v39) < 0)
  {
    operator delete(__p[0]);
    if (!v3) {
      goto LABEL_47;
    }
  }
  else if (!Attribute)
  {
LABEL_47:
    MIL::Attributes::BuildInfo::Make(Attribute);
  }
  Attribute = (MIL::Attributes::BuildInfo *)(*(uint64_t (**)(MIL::Attributes::BuildInfo *))(*(void *)v3 + 64))(v3);
  if (!Attribute) {
    goto LABEL_47;
  }
  unint64_t v4 = Attribute;
  *(_DWORD *)((char *)v43 + 3) = 0;
  v43[0] = 0;
  *(_DWORD *)((char *)v42 + 3) = 0;
  v42[0] = 0;
  memset(v41, 0, 7);
  *(_OWORD *)std::string __p = 0u;
  long long v39 = 0u;
  int v40 = 1065353216;
  uint64_t v5 = MIL::IRDictionaryValue::begin(Attribute);
  uint64_t v6 = MIL::IRDictionaryValue::end(v4);
  if (v5 == v6)
  {
    std::string::size_type v23 = 0;
    char v27 = 0;
    std::string::size_type v25 = 0;
    size_t v24 = 0;
    char v26 = 0;
    std::string::size_type __sz = 0;
    unint64_t v22 = 0;
    char v21 = 0;
    std::string::size_type v8 = 0;
LABEL_51:
    v37.__r_.__value_.__r.__words[0] = v23;
    v37.__r_.__value_.__l.__size_ = v8;
    LODWORD(v37.__r_.__value_.__r.__words[2]) = v43[0];
    *(_DWORD *)((char *)&v37.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v43 + 3);
    *((unsigned char *)&v37.__r_.__value_.__s + 23) = v21;
    if (v26 < 0) {
      goto LABEL_54;
    }
    goto LABEL_52;
  }
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  char v30 = 0;
  std::string::size_type v28 = 0;
  char v29 = 0;
  char v34 = 0;
  std::string::size_type __sz = 0;
  char v7 = 0;
  std::string::size_type v8 = 0;
  while (1)
  {
    MIL::IRValue::GetScalar<std::string>(*(const void **)(v5 + 16), &v37);
    MIL::IRValue::GetScalar<std::string>(*(const void **)(v5 + 32), &v36);
    std::string::size_type size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v37.__r_.__value_.__l.__size_;
    }
    if (size == 11)
    {
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v15 = &v37;
      }
      else {
        int v15 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      std::string::size_type v16 = v15->__r_.__value_.__r.__words[0];
      uint64_t v17 = *(std::string::size_type *)((char *)v15->__r_.__value_.__r.__words + 3);
      if (v16 == 0x776F2D6C65646F6DLL && v17 == 0x72656E776F2D6C65)
      {
        if (v34 < 0) {
          operator delete(v32);
        }
        std::string::size_type __sz = v36.__r_.__value_.__l.__size_;
        uint64_t v32 = (void *)v36.__r_.__value_.__r.__words[0];
        v42[0] = v36.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v42 + 3) = *(_DWORD *)((char *)&v36.__r_.__value_.__r.__words[2] + 3);
        char v34 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        goto LABEL_37;
      }
    }
    else if (size == 10)
    {
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v10 = &v37;
      }
      else {
        uint64_t v10 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      if (v10->__r_.__value_.__r.__words[0] == 0x616E2D6C65646F6DLL
        && LOWORD(v10->__r_.__value_.__r.__words[1]) == 25965)
      {
        if (v7 < 0) {
          operator delete(v33);
        }
        std::string::size_type v8 = v36.__r_.__value_.__l.__size_;
        uint64_t v33 = (void *)v36.__r_.__value_.__r.__words[0];
        v43[0] = v36.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v43 + 3) = *(_DWORD *)((char *)&v36.__r_.__value_.__r.__words[2] + 3);
        char v7 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        goto LABEL_37;
      }
      std::string::size_type v12 = v10->__r_.__value_.__r.__words[0];
      int v13 = LOWORD(v10->__r_.__value_.__r.__words[1]);
      if (v12 == 0x61702D6C65646F6DLL && v13 == 26740)
      {
        if (v30 < 0) {
          operator delete(v29);
        }
        std::string::size_type v28 = v36.__r_.__value_.__l.__size_;
        char v29 = (void *)v36.__r_.__value_.__r.__words[0];
        v41[0] = v36.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v41 + 3) = *(_DWORD *)((char *)&v36.__r_.__value_.__r.__words[2] + 3);
        char v30 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
        goto LABEL_37;
      }
    }
    v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
    float v19 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v37, (uint64_t)&std::piecewise_construct, (long long **)&v35);
    float v20 = (void **)(v19 + 40);
    if ((char)v19[63] < 0) {
      operator delete(*v20);
    }
    *(std::string *)float v20 = v36;
LABEL_37:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    uint64_t v5 = *(void *)v5;
    if (v5 == v6)
    {
      char v21 = v7;
      if ((v7 & 0x80) == 0)
      {
        unint64_t v22 = (const std::string::value_type *)v32;
        std::string::size_type v23 = (std::string::size_type)v33;
        std::string::size_type v25 = v28;
        size_t v24 = (const std::string::value_type *)v29;
        char v26 = v34;
        char v27 = v30;
        goto LABEL_51;
      }
      unint64_t v22 = (const std::string::value_type *)v32;
      size_t v24 = (const std::string::value_type *)v29;
      char v26 = v34;
      char v27 = v30;
      std::string::__init_copy_ctor_external(&v37, (const std::string::value_type *)v33, v8);
      std::string::size_type v25 = v28;
      if (v34 < 0)
      {
LABEL_54:
        std::string::__init_copy_ctor_external(&v36, v22, __sz);
LABEL_55:
        if (v27 < 0)
        {
          std::string::__init_copy_ctor_external(&v35, v24, v25);
        }
        else
        {
          v35.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
          v35.__r_.__value_.__l.__size_ = v25;
          LODWORD(v35.__r_.__value_.__r.__words[2]) = v41[0];
          *(_DWORD *)((char *)&v35.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v41 + 3);
          *((unsigned char *)&v35.__r_.__value_.__s + 23) = v27;
        }
        operator new();
      }
LABEL_52:
      v36.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      v36.__r_.__value_.__l.__size_ = __sz;
      LODWORD(v36.__r_.__value_.__r.__words[2]) = v42[0];
      *(_DWORD *)((char *)&v36.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v42 + 3);
      *((unsigned char *)&v36.__r_.__value_.__s + 23) = v26;
      goto LABEL_55;
    }
  }
}

void sub_20F3BC8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, char a13, uint64_t a14, void *a15, void *a16, int a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a38);
  if (a13 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a15);
  }
  if (v43 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void MIL::Attributes::BuildInfo::GetModelName(MIL::Attributes::BuildInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(long long **)this;
  if (*(char *)(*(void *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

__n128 MIL::Attributes::BuildInfo::SetModelName(uint64_t *a1, __n128 *a2)
{
  uint64_t v3 = *a1;
  if (*(char *)(*a1 + 23) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void MIL::Attributes::BuildInfo::GetModelOwner(MIL::Attributes::BuildInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 24), *(void *)(v2 + 32));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 24);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 40);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

__n128 MIL::Attributes::BuildInfo::SetModelOwner(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void *)a1 + 24;
  if (*(char *)(*(void *)a1 + 47) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void MIL::Attributes::BuildInfo::GetModelPath(MIL::Attributes::BuildInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 71) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 48), *(void *)(v2 + 56));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 48);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 64);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

__n128 MIL::Attributes::BuildInfo::SetModelPath(uint64_t a1, __n128 *a2)
{
  uint64_t v3 = *(void *)a1 + 48;
  if (*(char *)(*(void *)a1 + 71) < 0) {
    operator delete(*(void **)v3);
  }
  __n128 result = *a2;
  *(void *)(v3 + 16) = a2[1].n128_u64[0];
  *(__n128 *)uint64_t v3 = result;
  a2[1].n128_u8[7] = 0;
  a2->n128_u8[0] = 0;
  return result;
}

void MIL::Attributes::BuildInfo::GetVersion(uint64_t *a1@<X0>, std::string *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *a1;
  std::string v5 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  MIL::Attributes::BuildInfo::Impl::TryGetValue(v4, (unsigned __int8 *)&__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
}

void sub_20F3BCBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::BuildInfo::Impl::TryGetValue(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(a1 + 96), a2);
  if (v4)
  {
    if ((char)v4[63] < 0)
    {
      uint64_t v6 = (const std::string::value_type *)*((void *)v4 + 5);
      std::string::size_type v7 = *((void *)v4 + 6);
      std::string::__init_copy_ctor_external(a3, v6, v7);
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 40);
      a3->__r_.__value_.__r.__words[2] = *((void *)v4 + 7);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v5;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
}

void anonymous namespace'::GetVersionKey(std::string *a1@<X0>, std::string *a2@<X8>)
{
  char v5 = 8;
  strcpy(__s, "-version");
  uint64_t v3 = std::string::append(a1, __s, 8uLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (v5 < 0) {
    operator delete(*(void **)__s);
  }
}

void sub_20F3BCD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::BuildInfo::SetVersion(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v12 = *(std::string *)a2;
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = *a1;
  *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  std::string v9 = v13;
  uint64_t v8 = *(void *)(a3 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a3;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  MIL::Attributes::BuildInfo::Impl::SetValue(v6, (const void **)v10, (long long *)&v9, (__n128 *)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
}

void sub_20F3BCE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

__n128 MIL::Attributes::BuildInfo::Impl::SetValue(uint64_t a1, const void **a2, long long *a3, __n128 *a4)
{
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(a1 + 72), a2, (uint64_t)a2);
  uint64_t v10 = a3;
  std::string::size_type v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 96, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, &v10);
  uint64_t v8 = v7 + 40;
  if ((char)v7[63] < 0) {
    operator delete(*(void **)v8);
  }
  __n128 result = *a4;
  *((void *)v8 + 2) = a4[1].n128_u64[0];
  *(__n128 *)uint64_t v8 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

void MIL::Attributes::BuildInfo::GetToolNames(MIL::Attributes::BuildInfo *this@<X0>, std::vector<std::string> *a2@<X8>)
{
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v10, (const void ***)(*(void *)this + 72));
  std::vector<std::string>::reserve(a2, (std::vector<std::string>::size_type)v11[1]);
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v10, v11[0]);
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v10, (const void ***)(*(void *)this + 72));
  uint64_t v4 = v10;
  if (v10 != v11)
  {
    unint64_t end = (unint64_t)a2->__end_;
    do
    {
      uint64_t v6 = (long long *)(v4 + 4);
      if ((std::string *)end >= a2->__end_cap_.__value_)
      {
        unint64_t end = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a2, v6);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v6);
        end += 24;
      }
      a2->__end_ = (std::vector<std::string>::pointer)end;
      std::string::size_type v7 = v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (char **)v7;
          std::string::size_type v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (char **)v4[2];
          BOOL v9 = *v8 == (char *)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != v11);
  }
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy((uint64_t)&v10, v11[0]);
}

void sub_20F3BD000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void MIL::Attributes::BuildInfo::GetComponentVersions(std::string **a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string v7 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(*a1, (uint64_t)&v8, (uint64_t)v6);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v5, (uint64_t)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_20F3BD0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a14);
  if (*(char *)(v14 - 17) < 0) {
    operator delete(*(void **)(v14 - 40));
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::GetComponentVersionKeyPrefix(std::string *a1@<X0>, std::string *a2@<X8>)
{
  char v5 = 11;
  strcpy(__s, "-component-");
  uint64_t v3 = std::string::append(a1, __s, 0xBuLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (v5 < 0) {
    operator delete(*(void **)__s);
  }
}

void sub_20F3BD1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching@<X0>(std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26C257B70;
  v4[1] = a2;
  v4[3] = v4;
  MIL::Attributes::BuildInfo::Impl::TryGetValues(a1, (uint64_t)v4, a3);
  return std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](v4);
}

void sub_20F3BD258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void anonymous namespace'::StripPrefixFromKeys(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  for (uint64_t i = *(uint64_t **)(a1 + 16); i; uint64_t i = (uint64_t *)*i)
  {
    if (*(char *)(a2 + 23) >= 0) {
      std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v6 = *(void *)(a2 + 8);
    }
    std::string::basic_string(&v8, (const std::string *)(i + 2), v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v9);
    BOOL v9 = &v8;
    std::string v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a3, (unsigned __int8 *)&v8, (uint64_t)&std::piecewise_construct, (long long **)&v9);
    std::string::operator=((std::string *)(v7 + 40), (const std::string *)(i + 5));
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20F3BD334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void MIL::Attributes::BuildInfo::SetComponentVersion(uint64_t *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  void v25[2] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    BOOL v9 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v9 = *(const std::string::value_type **)a3;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a3 + 8);
  }
  uint64_t v11 = std::string::append(&v24, v9, v10);
  std::string v12 = (void *)v11->__r_.__value_.__r.__words[0];
  v25[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = *a1;
  *(_OWORD *)char v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  float v18 = v12;
  *(void *)float v19 = v25[0];
  *(void *)&v19[7] = *(void *)((char *)v25 + 7);
  char v20 = v13;
  long long v15 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  *(_OWORD *)std::string __p = v15;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  MIL::Attributes::BuildInfo::Impl::SetValue(v14, (const void **)v21, (long long *)&v18, (__n128 *)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v18);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
}

void sub_20F3BD4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void MIL::Attributes::BuildInfo::GetPrivateCustomInformation(std::string **a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string v7 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(*a1, (uint64_t)&v8, (uint64_t)v6);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v5, (uint64_t)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_20F3BD608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a14);
  if (*(char *)(v14 - 17) < 0) {
    operator delete(*(void **)(v14 - 40));
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::GetPrivateCustomInfoKeyPrefix(std::string *a1@<X0>, std::string *a2@<X8>)
{
  char v5 = 9;
  strcpy(__s, "-private-");
  uint64_t v3 = std::string::append(a1, __s, 9uLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (v5 < 0) {
    operator delete(*(void **)__s);
  }
}

void sub_20F3BD6D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::BuildInfo::SetPrivateCustomInformation(uint64_t *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  void v25[2] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    BOOL v9 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v9 = *(const std::string::value_type **)a3;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a3 + 8);
  }
  uint64_t v11 = std::string::append(&v24, v9, v10);
  std::string v12 = (void *)v11->__r_.__value_.__r.__words[0];
  v25[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = *a1;
  *(_OWORD *)char v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  float v18 = v12;
  *(void *)float v19 = v25[0];
  *(void *)&v19[7] = *(void *)((char *)v25 + 7);
  char v20 = v13;
  long long v15 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  *(_OWORD *)std::string __p = v15;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  MIL::Attributes::BuildInfo::Impl::SetValue(v14, (const void **)v21, (long long *)&v18, (__n128 *)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v18);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
}

void sub_20F3BD880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void MIL::Attributes::BuildInfo::GetPublicCustomInformation(std::string **a1@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  std::string v7 = *a2;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(*a1, (uint64_t)&v8, (uint64_t)v6);
  std::unordered_map<std::string,std::string>::unordered_map((uint64_t)v5, (uint64_t)v6);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v5);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_20F3BD99C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a14);
  if (*(char *)(v14 - 17) < 0) {
    operator delete(*(void **)(v14 - 40));
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::GetPublicCustomInfoKeyPrefix(std::string *a1@<X0>, std::string *a2@<X8>)
{
  char v5 = 6;
  strcpy(__s, "-misc-");
  uint64_t v3 = std::string::append(a1, __s, 6uLL);
  *a2 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (v5 < 0) {
    operator delete(*(void **)__s);
  }
}

void sub_20F3BDA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::BuildInfo::SetPublicCustomInformation(uint64_t *a1, uint64_t a2, uint64_t a3, long long *a4)
{
  void v25[2] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v23 = *(std::string *)a2;
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    BOOL v9 = (const std::string::value_type *)a3;
  }
  else {
    BOOL v9 = *(const std::string::value_type **)a3;
  }
  if (v8 >= 0) {
    std::string::size_type v10 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    std::string::size_type v10 = *(void *)(a3 + 8);
  }
  uint64_t v11 = std::string::append(&v24, v9, v10);
  std::string v12 = (void *)v11->__r_.__value_.__r.__words[0];
  v25[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v25 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = *a1;
  *(_OWORD *)char v21 = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  float v18 = v12;
  *(void *)float v19 = v25[0];
  *(void *)&v19[7] = *(void *)((char *)v25 + 7);
  char v20 = v13;
  long long v15 = *a4;
  uint64_t v17 = *((void *)a4 + 2);
  *(_OWORD *)std::string __p = v15;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  MIL::Attributes::BuildInfo::Impl::SetValue(v14, (const void **)v21, (long long *)&v18, (__n128 *)__p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0) {
    operator delete(v18);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
}

void sub_20F3BDC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void MIL::Attributes::BuildInfo::GetPrivateInformation(MIL::Attributes::BuildInfo *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  *((unsigned char *)&v6.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v6, "[[:alpha:]-]+");
  v1.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v6;
  std::string::insert(&v6, v1, 94);
  std::string v7 = v6;
  memset(&v6, 0, sizeof(v6));
  std::string::value_type __s[23] = 9;
  strcpy(__s, "-private-");
  uint64_t v2 = std::string::append(&v7, __s, 9uLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v9 = v2->__r_.__value_.__r.__words[2];
  long long v8 = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v4, (uint64_t)&v8, 32);
}

void sub_20F3BDE14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v28 - 64));
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
  _Unwind_Resume(a1);
}

std::string *MIL::Attributes::BuildInfo::Impl::TryGetValues@<X0>(std::string *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  for (uint64_t i = (uint64_t *)result[4].__r_.__value_.__r.__words[2]; i; uint64_t i = (uint64_t *)*i)
  {
    uint64_t v6 = *(void *)(a2 + 24);
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    __n128 result = (std::string *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v6 + 48))(v6, i + 2);
    if (result)
    {
      long long v8 = (long long *)(i + 2);
      std::string v7 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)i + 16, (uint64_t)&std::piecewise_construct, &v8);
      __n128 result = std::string::operator=((std::string *)(v7 + 40), (const std::string *)(i + 5));
    }
  }
  return result;
}

void sub_20F3BDF54(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)locale);
  }

  std::locale::~locale(this);
}

void MIL::Attributes::BuildInfo::GetPublicInformation(MIL::Attributes::BuildInfo *this)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *((unsigned char *)&v10.__r_.__value_.__s + 23) = 13;
  strcpy((char *)&v10, "[[:alpha:]-]+");
  v1.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v10;
  std::string::insert(&v10, v1, 94);
  v4[0] = v10;
  memset(&v10, 0, sizeof(v10));
  char v9 = 11;
  strcpy(__s, "-component-");
  uint64_t v2 = std::string::append(v4, __s, 0xBuLL);
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  std::string::size_type v6 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string __p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(v7, (uint64_t)__p, 32);
}

void sub_20F3BE370(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::locale a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::locale a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v41 - 96));
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex((std::locale *)&a9);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a20);
  std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&a28);
  _Unwind_Resume(a1);
}

void sub_20F3BE46C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 - 105) < 0) {
    operator delete(*(void **)(v25 - 128));
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (*(char *)(v25 - 73) < 0) {
    operator delete(*(void **)(v25 - 96));
  }
  JUMPOUT(0x20F3BE464);
}

void MIL::Attributes::BuildInfo::SetField(uint64_t *a1, void *a2, uint64_t a3)
{
  switch(a2)
  {
    case 3:
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v16 = *(std::string *)a3;
      }
      uint64_t v6 = *a1;
      uint64_t v7 = *a1 + 48;
      if (*(char *)(v6 + 71) < 0) {
        operator delete(*(void **)v7);
      }
      *(_OWORD *)uint64_t v7 = *(_OWORD *)&v16.__r_.__value_.__l.__data_;
      std::string::size_type v8 = v16.__r_.__value_.__r.__words[2];
      goto LABEL_20;
    case 2:
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v15 = *(std::string *)a3;
      }
      uint64_t v9 = *a1;
      uint64_t v7 = *a1 + 24;
      if (*(char *)(v9 + 47) < 0) {
        operator delete(*(void **)v7);
      }
      *(_OWORD *)uint64_t v7 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
      std::string::size_type v8 = v15.__r_.__value_.__r.__words[2];
LABEL_20:
      *(void *)(v7 + 16) = v8;
      return;
    case 1:
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string v17 = *(std::string *)a3;
      }
      uint64_t v10 = *a1;
      if (*(char *)(v10 + 23) < 0) {
        operator delete(*(void **)v10);
      }
      long long v11 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
      *(void *)(v10 + 16) = *((void *)&v17.__r_.__value_.__l + 2);
      *(_OWORD *)uint64_t v10 = v11;
      break;
    default:
      uint64_t v5 = *a1;
      MIL::Attributes::ModelInfoToString(a2, v13);
      if (*(char *)(a3 + 23) < 0) {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
      }
      else {
        std::string __p = *(std::string *)a3;
      }
      MIL::Attributes::BuildInfo::Impl::SetValue(v5, (long long *)v13, (__n128 *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v14 < 0) {
        operator delete(v13[0]);
      }
      break;
  }
}

void sub_20F3BE664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 MIL::Attributes::BuildInfo::Impl::SetValue(uint64_t a1, long long *a2, __n128 *a3)
{
  uint64_t v7 = a2;
  uint64_t v4 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1 + 96, (unsigned __int8 *)a2, (uint64_t)&std::piecewise_construct, &v7);
  uint64_t v5 = v4 + 40;
  if ((char)v4[63] < 0) {
    operator delete(*(void **)v5);
  }
  __n128 result = *a3;
  *((void *)v5 + 2) = a3[1].n128_u64[0];
  *(__n128 *)uint64_t v5 = result;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return result;
}

void MIL::Attributes::BuildInfo::GetField(uint64_t *a1@<X0>, void *a2@<X1>, std::string *a3@<X8>)
{
  switch(a2)
  {
    case 3:
      uint64_t v7 = *a1;
      if (*(char *)(*a1 + 71) < 0)
      {
        uint64_t v5 = *(const std::string::value_type **)(v7 + 48);
        std::string::size_type v6 = *(void *)(v7 + 56);
        goto LABEL_16;
      }
      uint64_t v4 = v7 + 48;
LABEL_10:
      long long v9 = *(_OWORD *)v4;
      a3->__r_.__value_.__r.__words[2] = *(void *)(v4 + 16);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v9;
      return;
    case 2:
      uint64_t v8 = *a1;
      if (*(char *)(*a1 + 47) < 0)
      {
        uint64_t v5 = *(const std::string::value_type **)(v8 + 24);
        std::string::size_type v6 = *(void *)(v8 + 32);
        goto LABEL_16;
      }
      uint64_t v4 = v8 + 24;
      goto LABEL_10;
    case 1:
      uint64_t v4 = *a1;
      if (*(char *)(*a1 + 23) < 0)
      {
        uint64_t v5 = *(const std::string::value_type **)v4;
        std::string::size_type v6 = *(void *)(v4 + 8);
LABEL_16:
        std::string::__init_copy_ctor_external(a3, v5, v6);
        return;
      }
      goto LABEL_10;
  }
  uint64_t v10 = *a1;
  MIL::Attributes::ModelInfoToString(a2, __p);
  MIL::Attributes::BuildInfo::Impl::TryGetValue(v10, (unsigned __int8 *)__p, a3);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3BE7F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::BuildInfo::Replace(MIL::Attributes::BuildInfo *this, MIL::IRProgram *a2)
{
  (*(void (**)(uint64_t *__return_ptr, MIL::IRProgram *))(*(void *)a2 + 48))(&v2, a2);
  MIL::IRTensorValueType::MakeScalar();
}

void sub_20F3BF034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v57 - 144);
  std::unique_ptr<MIL::IRDictionaryValue const>::reset[abi:ne180100]((MIL::IRDictionaryValue **)(v57 - 104), 0);
  uint64_t v59 = *(std::__shared_weak_count **)(v57 - 88);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRDictionaryValue const,std::default_delete<MIL::IRDictionaryValue const>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRDictionaryValue const,std::default_delete<MIL::IRDictionaryValue const>,void>((uint64_t *)&v6, a2);
  long long v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void MIL::Attributes::BuildInfo::Rewrite(MIL::Attributes::BuildInfo *this@<X0>, const MIL::IRProgram *a2@<X1>, MIL::IRProgram **a3@<X8>)
{
}

void sub_20F3BF3FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MIL::Attributes::BlobFileMutabilityInfo::Rewrite(v3);
  }
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (void **)std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  long long v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    long long v6 = operator new(0x38uLL);
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_20F3BF4EC(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    long long v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      __n128 result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          uint64_t v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = (const void **)v8;
        }
        while (!v9);
      }
      long long v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  long long v6 = (uint64_t **)std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::unique_ptr<MIL::IRBlock>>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::string>::__construct_node<std::string const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  long long v6 = (char *)operator new(0x38uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v7->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
  }
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20F3BF698(_Unwind_Exception *a1)
{
  void *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,MIL::IRValueType const*>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1},std::allocator<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1}>,BOOL ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1},std::allocator<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1}>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C257B70;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1},std::allocator<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1}>,BOOL ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C257B70;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1},std::allocator<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1}>,BOOL ()(std::string const&)>::operator()(uint64_t a1, char **a2)
{
  return std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1} &,std::string const&>((char ***)(a1 + 8), a2);
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1},std::allocator<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1}>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1},std::allocator<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1}>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<MIL::Attributes::BuildInfo::Impl::TryGetValuesMatching(std::string const&)::{lambda(std::string const&)#1} &,std::string const&>(char ***a1, char **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (char *)*((unsigned __int8 *)a2 + 23);
  if ((char)v3 >= 0) {
    long long v4 = (char *)a2;
  }
  else {
    long long v4 = *a2;
  }
  int v5 = *((char *)v2 + 23);
  if (v5 >= 0) {
    long long v6 = *a1;
  }
  else {
    long long v6 = (char **)*v2;
  }
  if (v5 >= 0) {
    int64_t v7 = *((unsigned __int8 *)v2 + 23);
  }
  else {
    int64_t v7 = (int64_t)v2[1];
  }
  if (!v7) {
    return 1;
  }
  if ((char)v3 < 0) {
    uint64_t v3 = a2[1];
  }
  uint64_t v8 = &v3[(void)v4];
  if ((uint64_t)v3 >= v7)
  {
    int v12 = *(char *)v6;
    char v13 = v4;
    do
    {
      char v14 = &v3[-v7];
      if (v14 == (char *)-1) {
        break;
      }
      std::string v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
      if (!v15) {
        break;
      }
      uint64_t v9 = v15;
      if (!memcmp(v15, v6, v7)) {
        return v9 != v8 && v9 == v4;
      }
      char v13 = v9 + 1;
      uint64_t v3 = (char *)(v8 - (v9 + 1));
    }
    while ((uint64_t)v3 >= v7);
  }
  uint64_t v9 = v8;
  return v9 != v8 && v9 == v4;
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(std::regex_traits<char> *a1, uint64_t a2, int a3)
{
  long long v4 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v4[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v4[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v4[1].__col_ + 4) = 0u;
  HIDWORD(v4[2].__ct_) = 0;
  std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>();
}

void sub_20F3BF8F0(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x21056C5A0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x263F8C130]);
  return this;
}

void sub_20F3BF95C(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>()
{
}

void sub_20F3BFB30(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3BFBA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  unint64_t end = a1->__end_;
  int64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == a2) {
    operator new();
  }
  while (v7 != (unsigned __int8 *)a3)
  {
    if (*v7 != 124) {
      return v7;
    }
    uint64_t v8 = a1->__end_;
    uint64_t v9 = v7 + 1;
    int64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(a1, v7 + 1, a3);
    if (v9 == v7) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v8);
  }
  return (unsigned __int8 *)a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  long long v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      long long v6 = v3;
      uint64_t v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(this, (char *)v3, v4);
    }
    while (v6 != v3);
    if (v6 != v4)
    {
      if (v6 + 1 != v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  unint64_t end = a1->__end_;
  int64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    uint64_t v9 = a1->__end_;
    uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(v8 + 1), a3);
    if (v8 + 1 == v10) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  unint64_t end = a1->__end_;
  int64_t v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  while (1)
  {
    long long v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  unint64_t end = a1->__end_;
  int64_t v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, __s, v8);
  while (1)
  {
    long long v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    uint64_t v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C01A4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20F3C024C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x21056C700);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_alternative<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  do
  {
    int v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(a1, (char *)a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    unint64_t end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(a1, (unsigned __int8 *)a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      if (v6 == 40 && a2 + 1 != a3 && a2[1] == 63 && a2 + 2 != a3)
      {
        int v7 = a2[2];
        if (v7 == 33)
        {
          std::regex_traits<char>::regex_traits(&v14.__traits_);
          memset(&v14.__flags_, 0, 40);
          v14.__flags_ = this->__flags_;
          uint64_t v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v14, v3 + 3, a3);
          unsigned int marked_count = v14.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v14, 1, this->__marked_count_);
          this->__marked_count_ += marked_count;
          if (v8 == a3 || *v8 != 41) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          }
          goto LABEL_27;
        }
        if (v7 == 61)
        {
          std::regex_traits<char>::regex_traits(&v14.__traits_);
          memset(&v14.__flags_, 0, 40);
          v14.__flags_ = this->__flags_;
          uint64_t v8 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<std::__wrap_iter<char const*>>(&v14, v3 + 3, a3);
          unsigned int v9 = v14.__marked_count_;
          std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v14, 0, this->__marked_count_);
          this->__marked_count_ += v9;
          if (v8 == a3 || *v8 != 41) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          }
LABEL_27:
          uint64_t v3 = v8 + 1;
          std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v14.__traits_.__loc_);
          return v3;
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v11 = a2[1];
    if (v11 == 66)
    {
      BOOL v12 = 1;
    }
    else
    {
      if (v11 != 98) {
        return v3;
      }
      BOOL v12 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v12);
    v3 += 2;
  }
  return v3;
}

void sub_20F3C090C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    int v6 = (char)*a2;
    if (v6 <= 62)
    {
      if (v6 != 40)
      {
        if (v6 == 46) {
          operator new();
        }
        if ((v6 - 42) >= 2) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
        }
LABEL_28:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
      }
      uint64_t v8 = a2 + 1;
      if (a2 + 1 != (unsigned __int8 *)a3)
      {
        if (a2 + 2 != (unsigned __int8 *)a3 && *v8 == 63 && a2[2] == 58)
        {
          ++this->__open_count_;
          unsigned int v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, a2 + 3, a3);
          if (v9 != a3 && *v9 == 41)
          {
            --this->__open_count_;
            return (unsigned __int8 *)(v9 + 1);
          }
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          unsigned int marked_count = this->__marked_count_;
          ++this->__open_count_;
          int v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<std::__wrap_iter<char const*>>(this, v8, a3);
          if (v11 != a3)
          {
            BOOL v12 = v11;
            if (*v11 == 41)
            {
              std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
              --this->__open_count_;
              return (unsigned __int8 *)(v12 + 1);
            }
          }
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    if (v6 > 91)
    {
      if (v6 == 92) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(this, a2, (unsigned __int8 *)a3);
      }
      if (v6 == 123) {
        goto LABEL_28;
      }
    }
    else
    {
      if (v6 == 91) {
        return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, (char *)a2, a3);
      }
      if (v6 == 63) {
        goto LABEL_28;
      }
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(this, a2, a3);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      char v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        char v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    char v13 = a2;
    if (v12 != 123) {
      return v13;
    }
    std::string v15 = a2 + 1;
    std::string v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(a1, a2 + 1, a3, (int *)&__max);
    if (v15 != v16)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            char v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              char v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              char v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            char v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        std::string v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          char v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            char v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        uint64_t v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(v10, v23, a3, &v27);
        if (v23 != v25 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            char v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                char v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            char v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    char v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  char v13 = a2;
  if (v12 == 43)
  {
    char v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      char v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return v13;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void sub_20F3C1050(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C10B8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C257E08;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C257E08;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_26C257E50;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26C257E50;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26C257E50;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x21056C700);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
    begin = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(a1 + 8);
  begin = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    std::string v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_20F3C1914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  this->__unmatched_.first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos) {
    this->__position_start_ = __f;
  }
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)std::string v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::vector<std::csub_match> __p = 0u;
    memset(v39, 0, 21);
    uint64_t v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    std::string v35 = a4;
    int v12 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 1std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = a2;
    *((void *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    uint64_t v13 = v42;
    *((void *)v42 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      uint64_t v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      int v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          std::vector<std::csub_match>::value_type v18 = (const char *)*((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            char v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v19 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (void *)v42 - 12);
          uint64_t v42 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)std::string v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          std::vector<std::csub_match>::value_type v22 = v42;
          if ((unint64_t)v42 >= v43)
          {
            uint64_t v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            _OWORD *v42 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 1std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v24;
            uint64_t v42 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          uint64_t v13 = v42;
          ++v14;
          if (v41 != v42) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(void *)std::string v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_20F3C1D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      uint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v4 = __sz >= v3;
  std::vector<std::csub_match>::size_type v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C2084(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C20DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::vector<std::csub_match>::pointer v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::vector<std::csub_match>::pointer v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 1std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v13;
  _OWORD v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_20F3C222C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
      *(void *)(v7 - 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (void *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      long long v15 = &v9[__n];
      std::vector<std::csub_match>::size_type v16 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v17 = __x->std::pair<const char *, const char *>;
        *(void *)&v9->matched = *(void *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    uint64_t v19 = &v18[__n];
    std::vector<std::csub_match>::size_type v20 = 24 * __n;
    std::pair<const char *, const char *> v21 = v18;
    do
    {
      std::pair<const char *, const char *> v22 = __x->std::pair<const char *, const char *>;
      v21[1].first = *(const char **)&__x->matched;
      *std::pair<const char *, const char *> v21 = v22;
      std::pair<const char *, const char *> v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    long long v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    std::vector<std::csub_match>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v26 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v18[-1].matched = *(void *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (char *)this->__begin_;
    unint64_t v9 = __n + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRBlock>>>((uint64_t)p_end_cap, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    long long v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    std::vector<std::csub_match>::size_type v16 = &v14[__n];
    std::vector<std::pair<unsigned long, const char *>>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20F3C2850(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_20F3C28C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(a1, a2 + 1, a3);
  if (v5 == result)
  {
    uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(a1, (char *)a2 + 1, (char *)a3);
    if (v5 == result)
    {
      uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (v5 == result) {
        return a2;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      long long v8 = v5;
      uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(a1, v5, a3, v7);
    }
    while (v8 != v5);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C2C74(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C2E38(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = *a2;
    unsigned int v5 = v4 - 48;
    if (v4 == 48)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return ++v3;
    }
    if ((v4 - 49) > 8) {
      return v3;
    }
    if (++v3 == a3)
    {
      uint64_t v3 = a3;
    }
    else
    {
      while (1)
      {
        int v6 = *v3;
        if ((v6 - 48) > 9) {
          break;
        }
        if (v5 >= 0x19999999) {
          goto LABEL_16;
        }
        ++v3;
        unsigned int v5 = v6 + 10 * v5 - 48;
        if (v3 == a3)
        {
          uint64_t v3 = a3;
          break;
        }
      }
      if (!v5) {
        goto LABEL_16;
      }
    }
    if (v5 <= a1->__marked_count_)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
      return v3;
    }
LABEL_16:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      char v6 = 0;
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_61;
        case 'r':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_61;
        case 't':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_61;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_66;
          }
          int v9 = BYTE1(this->__traits_.__loc_.__locale_);
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6) {
            goto LABEL_66;
          }
          int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_66;
          }
          int v10 = LOBYTE(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_24;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6) {
            goto LABEL_66;
          }
          char v11 = -87;
LABEL_24:
          char v6 = 16 * (v11 + v10);
LABEL_25:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_66;
          }
          int v12 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_30;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6) {
            goto LABEL_66;
          }
          char v13 = -87;
LABEL_30:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_66;
          }
          int v14 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38) {
            goto LABEL_35;
          }
          v14 |= 0x20u;
          if ((v14 - 97) >= 6) {
            goto LABEL_66;
          }
          char v15 = -87;
LABEL_35:
          std::string::value_type v16 = v15 + v14 + 16 * (v13 + v12 + v6);
          if (a4) {
            std::string::operator=(a4, v16);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        case 'v':
          if (a4)
          {
            uint64_t v7 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_52;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_47;
      }
      goto LABEL_61;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        uint64_t v7 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_52;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_61:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          uint64_t v7 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_52:
          std::string::operator=(v7, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_61;
      }
LABEL_47:
      if (LOBYTE(this->__traits_.__loc_.__locale_) != 95
        && ((locale_low & 0x80) != 0
         || (a1->__traits_.__ct_->__tab_[LOBYTE(this->__traits_.__loc_.__locale_)] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          uint64_t v7 = a4;
          goto LABEL_52;
        }
        goto LABEL_61;
      }
LABEL_66:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_66;
    }
    if (SBYTE1(this->__traits_.__loc_.__locale_) < 65) {
      goto LABEL_66;
    }
    unsigned int v17 = BYTE1(this->__traits_.__loc_.__locale_);
    if (v17 >= 0x5B && (v17 - 97) > 0x19u) {
      goto LABEL_66;
    }
    std::string::value_type v18 = v17 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v18);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v18);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_20F3C3404(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C346C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26C257EE0;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_20F3C3644(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  uint64_t v4 = (uint64_t)v1[1];
  if (v4) {
    std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C257EE0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C257EE0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C257F28;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C257F28;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C257FB8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C257FB8;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C258000;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26C258000;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      int v9 = *(unsigned __int8 **)(a2 + 16);
      uint64_t v10 = v6;
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v9++;
        if (v11 != v13) {
          break;
        }
        if (!--v10) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_20F3C4158(_Unwind_Exception *a1)
{
  MEMORY[0x21056C700](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v8[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          std::pair<const char *, const char *> v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v25[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned int v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  std::vector<std::csub_match>::size_type v20 = &v15[(void)v12];
  std::pair<const char *, const char *> v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v12;
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 16std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 17std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_20F3C450C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  void *v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x21056C700);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v37 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_221;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_58;
  }
  signed __int8 v6 = *current;
  unsigned __int8 v125 = *current;
  signed __int8 v7 = current[1];
  unsigned __int8 v126 = v7;
  if (this->__icase_)
  {
    unsigned __int8 v125 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    unsigned __int8 v126 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124) {
      goto LABEL_8;
    }
LABEL_58:
    BOOL negate = 0;
    uint64_t v37 = 1;
    goto LABEL_59;
  }
  size_t v38 = v123;
  operator delete(__p);
  if (!v38) {
    goto LABEL_58;
  }
LABEL_8:
  std::vector<std::pair<char, char>>::pointer begin = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    do
    {
      if (v125 == *(p_second - 1) && v126 == *p_second) {
        goto LABEL_218;
      }
      p_second += 2;
      --v11;
    }
    while (v11);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
  }
  else
  {
    std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v127);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
    char v15 = v124;
    int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
    if (v16)
    {
      uint64_t v17 = 0;
      unint64_t v18 = v16 / 48;
      char v113 = v124;
      if (v124 >= 0) {
        size_t v19 = v124;
      }
      else {
        size_t v19 = v123;
      }
      if (v124 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if (v18 <= 1) {
        uint64_t v21 = 1;
      }
      else {
        uint64_t v21 = v16 / 48;
      }
      BOOL v22 = 1;
      while (1)
      {
        int v23 = SHIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        if (v23 >= 0) {
          size_t size = HIBYTE(v14->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = v14->first.__r_.__value_.__l.__size_;
        }
        if (v23 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = v14;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v25 = (std::vector<std::pair<std::string, std::string>>::pointer)v14->first.__r_.__value_.__r.__words[0];
        }
        if (size >= v19) {
          size_t v26 = v19;
        }
        else {
          size_t v26 = size;
        }
        int v27 = memcmp(p_p, v25, v26);
        BOOL v28 = v19 >= size;
        if (v27) {
          BOOL v28 = v27 >= 0;
        }
        if (v28)
        {
          int v29 = SHIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          if (v29 >= 0) {
            size_t v30 = HIBYTE(v14->second.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v30 = v14->second.__r_.__value_.__l.__size_;
          }
          if (v29 >= 0) {
            int data = &v14->second;
          }
          else {
            int data = (std::string *)v14->second.__r_.__value_.__l.__data_;
          }
          if (v19 >= v30) {
            size_t v32 = v30;
          }
          else {
            size_t v32 = v19;
          }
          int v33 = memcmp(data, p_p, v32);
          BOOL v34 = v30 >= v19;
          if (v33) {
            BOOL v34 = v33 >= 0;
          }
          if (v34) {
            break;
          }
        }
        BOOL v22 = ++v17 < v18;
        ++v14;
        if (v21 == v17)
        {
          int v35 = 0;
          BOOL negate = 0;
          goto LABEL_162;
        }
      }
      BOOL negate = 1;
      int v35 = 5;
LABEL_162:
      p_traits = &this->__traits_;
      char v15 = v113;
    }
    else
    {
      BOOL v22 = 0;
      int v35 = 0;
      BOOL negate = 0;
    }
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v22) {
      goto LABEL_195;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_200;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  std::vector<std::string>::pointer v89 = this->__equivalences_.__begin_;
  uint64_t v90 = v124;
  int64_t v91 = (char *)this->__equivalences_.__end_ - (char *)v89;
  if (v91)
  {
    uint64_t v92 = 0;
    unint64_t v93 = v91 / 24;
    uint64_t v95 = __p;
    size_t v94 = v123;
    if (v124 >= 0) {
      size_t v96 = v124;
    }
    else {
      size_t v96 = v123;
    }
    if (v93 <= 1) {
      uint64_t v97 = 1;
    }
    else {
      uint64_t v97 = v91 / 24;
    }
    BOOL v98 = 1;
    while (1)
    {
      std::string v99 = &v89[v92];
      std::string::size_type v100 = HIBYTE(v99->__r_.__value_.__r.__words[2]);
      int v101 = (char)v100;
      if ((v100 & 0x80u) != 0) {
        std::string::size_type v100 = v99->__r_.__value_.__l.__size_;
      }
      if (v96 == v100)
      {
        if (v101 >= 0) {
          long long v102 = &v89[v92];
        }
        else {
          long long v102 = (std::string *)v99->__r_.__value_.__r.__words[0];
        }
        if ((v90 & 0x80) == 0)
        {
          if (v90)
          {
            std::string v103 = &__p;
            uint64_t v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != v102->__r_.__value_.__s.__data_[0]) {
                goto LABEL_188;
              }
              std::string v103 = (void **)((char *)v103 + 1);
              long long v102 = (std::string *)((char *)v102 + 1);
              --v104;
            }
            while (v104);
            BOOL negate = 1;
            int v35 = 5;
            goto LABEL_192;
          }
          BOOL negate = 1;
          if (v98) {
            goto LABEL_220;
          }
LABEL_200:
          if ((char)v125 < 0)
          {
            neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
            goto LABEL_213;
          }
          std::regex_traits<char>::char_class_type mask = this->__mask_;
          tab = this->__traits_.__ct_->__tab_;
          std::ctype_base::mask v108 = tab[v125];
          if ((v108 & mask) == 0 && (v125 != 95 || (mask & 0x80) == 0)
            || (char)v126 < 0
            || (tab[v126] & mask) == 0 && ((mask & 0x80) == 0 || v126 != 95))
          {
            neg_std::regex_traits<char>::char_class_type mask = this->__neg_mask_;
            if ((v108 & neg_mask) != 0 || v125 == 95 && (neg_mask & 0x80) != 0)
            {
LABEL_217:
              int v110 = negate;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((this->__traits_.__ct_->__tab_[v126] & neg_mask) != 0) {
                goto LABEL_217;
              }
              int v110 = 1;
              if (v126 == 95 && (neg_mask & 0x80) != 0) {
                goto LABEL_217;
              }
LABEL_219:
              BOOL negate = v110;
LABEL_220:
              uint64_t v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          int v110 = 1;
          goto LABEL_219;
        }
        unint64_t v118 = v93;
        uint64_t v121 = v90;
        int v105 = memcmp(v95, v102, v94);
        unint64_t v93 = v118;
        uint64_t v90 = v121;
        if (!v105) {
          break;
        }
      }
LABEL_188:
      BOOL v98 = ++v92 < v93;
      if (v92 == v97) {
        goto LABEL_191;
      }
    }
    int v35 = 5;
    BOOL negate = 1;
    goto LABEL_193;
  }
  BOOL v98 = 0;
LABEL_191:
  int v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0) {
LABEL_193:
  }
    operator delete(__p);
  if (!v98) {
    goto LABEL_200;
  }
LABEL_195:
  if (v35) {
    goto LABEL_220;
  }
  uint64_t v37 = 2;
LABEL_59:
  unsigned __int8 v39 = *a2->__current_;
  unsigned __int8 v125 = v39;
  if (this->__icase_)
  {
    unsigned __int8 v39 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v39);
    unsigned __int8 v125 = v39;
  }
  std::vector<char>::pointer v40 = this->__chars_.__begin_;
  unint64_t v41 = this->__chars_.__end_ - v40;
  if (v41)
  {
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    while (1)
    {
      int v42 = *v40++;
      if (v42 == v39) {
        break;
      }
      if (!--v41) {
        goto LABEL_66;
      }
    }
LABEL_77:
    BOOL negate = 1;
    goto LABEL_221;
  }
LABEL_66:
  std::regex_traits<char>::char_class_type v43 = this->__neg_mask_;
  if (v43 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v39 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v39] & v43) == 0) {
      int v44 = (v39 == 95) & (v43 >> 7);
    }
    else {
      LOBYTE(v44) = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v46 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v39, end - this->__neg_chars_.__begin_);
    uint64_t v47 = v46 ? v46 : end;
    if ((v44 & 1) == 0 && v47 == end) {
      goto LABEL_77;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
  if (v49 != v48)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126);
      std::vector<std::pair<std::string, std::string>>::pointer v49 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v48 = this->__ranges_.__end_;
    }
    else
    {
      char v124 = 1;
      LOWORD(__p) = v39;
    }
    int64_t v50 = (char *)v48 - (char *)v49;
    if (v50)
    {
      uint64_t v119 = v37;
      BOOL v116 = negate;
      uint64_t v51 = 0;
      unint64_t v52 = v50 / 48;
      char v114 = v124;
      if (v124 >= 0) {
        size_t v53 = v124;
      }
      else {
        size_t v53 = v123;
      }
      if (v124 >= 0) {
        std::string v54 = &__p;
      }
      else {
        std::string v54 = __p;
      }
      if (v52 <= 1) {
        uint64_t v55 = 1;
      }
      else {
        uint64_t v55 = v50 / 48;
      }
      BOOL v56 = 1;
      while (1)
      {
        int v57 = SHIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        if (v57 >= 0) {
          size_t v58 = HIBYTE(v49->first.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v58 = v49->first.__r_.__value_.__l.__size_;
        }
        if (v57 >= 0) {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = v49;
        }
        else {
          std::vector<std::pair<std::string, std::string>>::pointer v59 = (std::vector<std::pair<std::string, std::string>>::pointer)v49->first.__r_.__value_.__r.__words[0];
        }
        if (v58 >= v53) {
          size_t v60 = v53;
        }
        else {
          size_t v60 = v58;
        }
        int v61 = memcmp(v54, v59, v60);
        BOOL v62 = v53 >= v58;
        if (v61) {
          BOOL v62 = v61 >= 0;
        }
        if (v62)
        {
          int v63 = SHIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          if (v63 >= 0) {
            size_t v64 = HIBYTE(v49->second.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v64 = v49->second.__r_.__value_.__l.__size_;
          }
          if (v63 >= 0) {
            size_t v65 = &v49->second;
          }
          else {
            size_t v65 = (std::string *)v49->second.__r_.__value_.__l.__data_;
          }
          if (v53 >= v64) {
            size_t v66 = v64;
          }
          else {
            size_t v66 = v53;
          }
          int v67 = memcmp(v65, v54, v66);
          BOOL v68 = v64 >= v53;
          if (v67) {
            BOOL v68 = v67 >= 0;
          }
          if (v68) {
            break;
          }
        }
        BOOL v56 = ++v51 < v52;
        ++v49;
        if (v55 == v51)
        {
          BOOL negate = v116;
          goto LABEL_123;
        }
      }
      BOOL negate = 1;
LABEL_123:
      uint64_t v37 = v119;
      if ((v114 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    else
    {
      BOOL v56 = 0;
      if ((v124 & 0x80) == 0) {
        goto LABEL_125;
      }
    }
    operator delete(__p);
LABEL_125:
    if (v56) {
      goto LABEL_221;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_154;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  std::vector<std::string>::pointer v69 = this->__equivalences_.__begin_;
  uint64_t v70 = v124;
  int64_t v71 = (char *)this->__equivalences_.__end_ - (char *)v69;
  if (v71)
  {
    uint64_t v120 = v37;
    uint64_t v72 = 0;
    unint64_t v73 = v71 / 24;
    int v74 = __p;
    size_t v75 = v123;
    if (v124 >= 0) {
      size_t v76 = v124;
    }
    else {
      size_t v76 = v123;
    }
    if (v73 <= 1) {
      uint64_t v77 = 1;
    }
    else {
      uint64_t v77 = v71 / 24;
    }
    BOOL v78 = 1;
    while (1)
    {
      std::string v79 = &v69[v72];
      std::string::size_type v80 = HIBYTE(v79->__r_.__value_.__r.__words[2]);
      int v81 = (char)v80;
      if ((v80 & 0x80u) != 0) {
        std::string::size_type v80 = v79->__r_.__value_.__l.__size_;
      }
      if (v76 == v80)
      {
        if (v81 >= 0) {
          uint64_t v82 = &v69[v72];
        }
        else {
          uint64_t v82 = (std::string *)v79->__r_.__value_.__r.__words[0];
        }
        if ((v70 & 0x80) != 0)
        {
          BOOL v117 = negate;
          unint64_t v85 = v73;
          uint64_t v115 = v77;
          int v86 = memcmp(v74, v82, v75);
          uint64_t v77 = v115;
          unint64_t v73 = v85;
          BOOL negate = v117;
          if (!v86)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!v70)
          {
            BOOL negate = 1;
            uint64_t v37 = v120;
            if (!v78) {
              goto LABEL_154;
            }
            goto LABEL_221;
          }
          std::string v83 = &__p;
          uint64_t v84 = v70;
          while (*(unsigned __int8 *)v83 == v82->__r_.__value_.__s.__data_[0])
          {
            std::string v83 = (void **)((char *)v83 + 1);
            uint64_t v82 = (std::string *)((char *)v82 + 1);
            if (!--v84)
            {
              BOOL negate = 1;
              goto LABEL_149;
            }
          }
        }
      }
      BOOL v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        uint64_t v37 = v120;
        if ((v70 & 0x80) == 0) {
          goto LABEL_153;
        }
        goto LABEL_152;
      }
    }
  }
  BOOL v78 = 0;
  if (v124 < 0) {
LABEL_152:
  }
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0) {
      goto LABEL_221;
    }
    std::regex_traits<char>::char_class_type v87 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v125] & v87) == 0)
    {
      int v88 = (v87 >> 7) & 1;
      if (v125 != 95) {
        int v88 = 0;
      }
      if (v88 != 1) {
        goto LABEL_221;
      }
    }
    goto LABEL_77;
  }
LABEL_221:
  if (negate == this->__negate_)
  {
    first = 0;
    int v112 = -993;
  }
  else
  {
    a2->__current_ += v37;
    first = this->__first_;
    int v112 = -995;
  }
  a2->__do_ = v112;
  a2->__node_ = first;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  signed __int8 v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  std::vector<std::pair<std::string,std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3C5068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_20F3C5200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::string::__init_with_size[abi:ne180100]<char *,char *>(void *result, char *a2, char *a3, unint64_t a4)
{
  unint64_t v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    std::string v4[2] = v9 | 0x8000000000000000;
    void *v4 = result;
    unint64_t v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)unint64_t v4 = v10;
    unint64_t v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)unint64_t v4 = 0;
  return result;
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        char v10 = (unsigned char *)a4;
      }
      else {
        char v10 = *(unsigned char **)a4;
      }
      void v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3C53D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C5430(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      char v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_38;
    }
    if (v9 == 61)
    {
      char v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, a4);
LABEL_38:
      uint64_t v6 = (uint64_t)v10;
      char v21 = 0;
      goto LABEL_42;
    }
    goto LABEL_9;
  }
  size_t v19 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = v19;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = v19;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (uint64_t v17 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v17 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          int64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_40:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0], v16->__r_.__value_.__s.__data_[1]);
          goto LABEL_41;
        }
        int64_t v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_25;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      int64_t v16 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_40;
      }
LABEL_25:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v16->__r_.__value_.__s.__data_[0]);
    }
LABEL_41:
    char v21 = 1;
    unint64_t v4 = v14;
    goto LABEL_42;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v17 == 91 && *v4 == 46)
  {
    unint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = v18;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v17) = *v17;
    if (v17 == 92)
    {
      if (v11) {
        unint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        unint64_t v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v17) = *v17;
  }
  std::string::operator=(&v25, (std::string::value_type)v17);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v21 = 1;
LABEL_42:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v21) {
    return v4;
  }
  return (char *)v6;
}

void sub_20F3C5794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  uint64_t v6 = a3 - 2;
  unint64_t v7 = a2;
  uint64_t v8 = a2;
  for (i = a2; ; uint64_t v8 = i)
  {
    int v10 = *i++;
    if (v10 == 61 && *i == 93) {
      break;
    }
    if (a2 == v6) {
      goto LABEL_33;
    }
    ++v7;
    --v6;
  }
  if (v8 == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, a2, v7, (uint64_t)&v20);
  if (((char)v22 & 0x80000000) == 0)
  {
    uint64_t v11 = v22;
    if (v22)
    {
      int v12 = (char *)&v20;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v11 = v21;
  if (!v21) {
    goto LABEL_34;
  }
  int v12 = (char *)v20;
LABEL_14:
  std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(a1, v12, &v12[v11], (uint64_t)__p);
  unint64_t v13 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v13 = (unint64_t)__p[1];
  }
  if (v13)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v14 = v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v14 = v21;
    }
    if (v14 == 2)
    {
      int64_t v16 = (char *)&v20;
      if ((v22 & 0x80u) != 0) {
        int64_t v16 = (char *)v20;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v16, v16[1]);
    }
    else
    {
      if (v14 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v15 = (char *)&v20;
      if ((v22 & 0x80u) != 0) {
        int v15 = (char *)v20;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v15);
    }
  }
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v22 < 0) {
    operator delete(v20);
  }
  return v7 + 2;
}

void sub_20F3C59B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  unint64_t v7 = a2;
  for (i = a2; ; unint64_t v7 = i)
  {
    int v9 = *i++;
    if (v9 == 58 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_11;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v10 = std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(a1, a2, v6, *(_DWORD *)(a1 + 24) & 1);
  if (!v10) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v10;
  return v6 + 2;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  int v5 = a3 - 2;
  uint64_t v6 = a2;
  unint64_t v7 = a2;
  for (i = a2; ; unint64_t v7 = i)
  {
    int v9 = *i++;
    if (v9 == 46 && *i == 93) {
      break;
    }
    if (a2 == v5) {
      goto LABEL_15;
    }
    ++v6;
    --v5;
  }
  if (v7 == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(a1, a2, v6, (uint64_t)&v13);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v13;
  unint64_t v10 = v14;
  *(void *)(a4 + 16) = v14;
  unint64_t v11 = HIBYTE(v10);
  if ((v11 & 0x80u) != 0) {
    unint64_t v11 = *(void *)(a4 + 8);
  }
  if (v11 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return v6 + 2;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        unint64_t v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 16std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
    }
    std::string::value_type v9 = 0;
    unint64_t v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<std::__wrap_iter<char const*>>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        uint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      uint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        long long v13 = v3;
        if (v3[23] < 0) {
          long long v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        std::vector<std::csub_match>::size_type v20 = a2;
        if (a2[23] < 0) {
          std::vector<std::csub_match>::size_type v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        int v23 = a3;
        if (a3[23] < 0) {
          int v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<std::__wrap_iter<char *>>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)std::vector<char>::pointer v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      size_t v30 = a2;
      if (a2[23] < 0) {
        size_t v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      size_t v32 = v4;
      if (v4[23] < 0) {
        size_t v32 = *(unsigned char **)v4;
      }
      unsigned char *v32 = v31;
      int v33 = v3;
      if (v3[23] < 0) {
        int v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      int v35 = v3;
      if (v3[23] < 0) {
        int v35 = *(unsigned char **)v3;
      }
      *int v35 = v34;
    }
    *(_OWORD *)std::vector<char>::pointer v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_20F3C6294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        std::vector<char>::pointer v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MIL::Fp16>>(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  size_t v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 12std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v26;
  *(void *)(a1 + 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 12std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C6580(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::regex_traits<char>::__lookup_collatename<std::__wrap_iter<char const*>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_20F3C6754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<std::__wrap_iter<char *>>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a4;
      }
      else {
        uint64_t v10 = *(unsigned char **)a4;
      }
      void v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3C687C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C68DC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_20F3C69A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      uint64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned __int8 v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *unsigned __int8 v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unint64_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned __int8 v5 = __p;
  }
  else {
    unsigned __int8 v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3C6CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C6D08(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  char v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_20F3C70CC(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C71E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C7240(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x21056C700);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x21056C700);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26C2581C8;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    uint64_t v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(void *)(v7 - std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v5;
      *(void *)uint64_t v7 = v5;
      *(unsigned char *)(v7 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x21056C700);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(void *)(result + 8);
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  do
  {
    uint64_t v5 = a2;
    a2 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  }
  while (v5 != a2);
  return v5;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x21056C1E0](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_20F3C760C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  BOOL v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(a1, a2, a3);
  uint64_t v7 = v6;
  if (a2 == v6 && a2 != a3 && a2 + 1 != a3)
  {
    uint64_t v9 = (uint64_t)v6;
    if (*a2 == 92) {
      uint64_t v9 = (uint64_t)&a2[2 * (a2[1] == 40)];
    }
    if ((char *)v9 == a2)
    {
      if (*a2 == 92)
      {
        BOOL v12 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, a2[1]);
        uint64_t v13 = 2;
        if (!v12) {
          uint64_t v13 = 0;
        }
        return &a2[v13];
      }
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
      unsigned int marked_count = a1->__marked_count_;
      size_t v11 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_RE_expression<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (uint64_t)a3);
      if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      uint64_t v7 = v11 + 2;
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      uint64_t v13 = a2 + 2;
      int v25 = 0;
      unint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, a2 + 2, a3, &v25);
      if (v13 == v14) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        unint64_t v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          unint64_t v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<std::__wrap_iter<char const*>>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            unint64_t v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          unint64_t v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<std::__wrap_iter<char const*>>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)this, a2, a3);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x21056C700);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v7 != v6);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    BOOL v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<std::__wrap_iter<char const*>>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (uint64_t v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<std::__wrap_iter<char const*>>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<std::__wrap_iter<char const*>>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<std::__wrap_iter<char const*>>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    uint64_t v5 = (locale_low - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<std::__wrap_iter<char const*>>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = a2 + 1;
    if (v3 + 1 != a3 && *v3 == 92)
    {
      int v5 = *v4;
      char v6 = *v4;
      BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
      if (v7 && (v5 - 123) >= 3)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
        {
          return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<std::__wrap_iter<char const*>>((std::basic_regex<char> *)a1, v4, a3, 0);
        }
        else
        {
          BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
          uint64_t v10 = 2;
          if (!v9) {
            uint64_t v10 = 0;
          }
          v3 += v10;
        }
      }
      else
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
        v3 += 2;
      }
    }
  }
  return v3;
}

void *std::__function::__value_func<BOOL ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  unsigned int v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    size_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (unint64_t i = *v14; i; unint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v17 = operator new(0x40uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  void *v17 = 0;
  v17[1] = v10;
  size_t v18 = *a4;
  long long v19 = **a4;
  v17[4] = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)size_t v18 = 0;
  v17[6] = 0;
  v17[7] = 0;
  v17[5] = 0;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  unint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_20F3C83B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::default_delete<MIL::Attributes::BuildInfo::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a2 + 96);
    std::__tree<std::__value_type<std::string,MIL::IRValueType const*>,std::__map_value_compare<std::string,std::__value_type<std::string,MIL::IRValueType const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,MIL::IRValueType const*>>>::destroy(a2 + 72, *(char **)(a2 + 80));
    if (*(char *)(a2 + 71) < 0) {
      operator delete(*(void **)(a2 + 48));
    }
    if (*(char *)(a2 + 47) < 0) {
      operator delete(*(void **)(a2 + 24));
    }
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    JUMPOUT(0x21056C700);
  }
}

void std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::~__func()
{
}

void *std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_26C258318;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26C258318;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::operator()(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  uint64_t v3 = a2[23];
  uint64_t v4 = *((void *)a2 + 1);
  if ((v3 & 0x80u) != 0)
  {
    a2 = *(char **)a2;
    uint64_t v3 = v4;
  }
  uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v2, a2, &a2[v3], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return v5;
}

void sub_20F3C8574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPrivateInformation(void)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    unint64_t v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        std::vector<std::csub_match>::pointer begin = this->__matches_.__begin_;
        std::vector<std::csub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)int v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::match_results<const char *> __p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    unint64_t v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 8std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            int v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  int v44 = (void *)v41[1];
                  ++v41;
                  int v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)int v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v50;
}

void sub_20F3C8D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v54 = 0;
  char v55 = 0;
  v56[0] = 0;
  *(_DWORD *)uint64_t v51 = 0;
  memset(&v51[8], 0, 32);
  long long v52 = 0u;
  memset(v53, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::match_results<const char *> __p = 0uLL;
    memset(v49, 0, 21);
    char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    int v42 = a4;
    unint64_t v11 = v55;
    *((_DWORD *)v55 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 1std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = a2;
    *((void *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v55 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v43 = a3;
    int v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = (const char *)(a3 - a2);
    uint64_t v15 = v55;
    *((void *)v55 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = (const char *)*((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = &v20[-*((void *)v15 - 11)];
          unint64_t v29 = v44;
          if ((v27 & ((uint64_t)v44 >= (uint64_t)v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)uint64_t v51 = *(_OWORD *)v19;
            *(_OWORD *)&v51[16] = v30;
            if (v51 != v19)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v51[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v53, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v15 - 11);
            void v53[3] = v31;
            unint64_t v29 = v28;
          }
          char v32 = v55;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v54;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, v32);
            }
            char v55 = (_OWORD *)v33;
            char v12 = 1;
            int v44 = v14;
          }
          else
          {
            int v44 = v29;
            unint64_t v34 = v55 - 6;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
            char v55 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v55 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
          char v55 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *char v55 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            void v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 1std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v26;
            char v55 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      uint64_t v15 = v55;
    }
    while (v54 != v55);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = &v44[(void)a2];
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v52 != *(void *)&v51[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)&v51[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v51[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(void *)&v51[32])
  {
    *(void *)&long long v52 = *(void *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(void *)uint64_t v51 = &v54;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  return v6;
}

void sub_20F3C92C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a17);
  std::__state<char>::~__state(&a33);
  a33 = v33 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(v8 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(void *a1)
{
  uint64_t v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 8std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(a2 + 4std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(v7 - 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_20F910720);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v54);
    int v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  BOOL v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_20F3C98A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      char v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(void *a1, void *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        unint64_t v16 = 1;
      }
      else {
        unint64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      BOOL v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      int64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = (v7 - v4) >> 2;
      }
      uint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      unint64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        unint64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::match_results<const char *> __p = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>(v7, v11);
      unint64_t v43 = (char *)__p;
      int v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *> &>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::match_results<const char *> __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              int v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              uint64_t v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              unint64_t v43 = v22;
              int v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::match_results<const char *> __p = v36;
      unint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      int v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        int v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::match_results<const char *> __p = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &__p);
        unint64_t v34 = a1[2];
        std::match_results<const char *> __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::match_results<const char *> __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::match_results<const char *> __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_20F3CA0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      uint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = std::vector<std::string>::__vallocate[abi:ne180100](a1, v12);
    int64_t v15 = (char *)a1[1];
    uint64_t v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  void *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = std::vector<std::shared_ptr<MIL::IRNamedValueType>>::__vallocate[abi:ne180100](a1, v11);
    uint64_t v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

void std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::~__func()
{
}

__n128 std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26C258398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26C258398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = result;
  return result;
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::operator()(void *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = a1[1];
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  uint64_t v5 = a2[23];
  uint64_t v6 = *((void *)a2 + 1);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(char **)a2;
    uint64_t v5 = v6;
  }
  char v7 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v4, a2, &a2[v5], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v7) {
    return 1;
  }
  uint64_t v8 = a1[2];
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  uint64_t v9 = v2[23];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = v2;
  }
  else {
    uint64_t v10 = *(char **)v2;
  }
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = *((void *)v2 + 1);
  }
  char v11 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v8, v10, &v10[v9], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (v11) {
    return 1;
  }
  uint64_t v14 = a1[3];
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  uint64_t v15 = v2[23];
  if ((v15 & 0x80u) == 0) {
    long long v16 = v2;
  }
  else {
    long long v16 = *(char **)v2;
  }
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *((void *)v2 + 1);
  }
  uint64_t v12 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(v14, v16, &v16[v15], &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  return v12;
}

void sub_20F3CA7BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0,std::allocator<MIL::Attributes::BuildInfo::GetPublicInformation(void)::$_0>,BOOL ()(std::string const&)>::target_type()
{
}

uint64_t *std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRDictionaryValue const,std::default_delete<MIL::IRDictionaryValue const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  char *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void MIL::Attributes::FlexibleShapeInfo::~FlexibleShapeInfo(MIL::Attributes::FlexibleShapeInfo *this)
{
  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  *(void *)this = 0;
  if (v1) {
    std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void *MIL::Attributes::FlexibleShapeInfo::FlexibleShapeInfo(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  char *result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  char *result = v2;
  return result;
}

void MIL::Attributes::FlexibleShapeInfo::Make(MIL::Attributes::FlexibleShapeInfo *this)
{
}

void sub_20F3CA9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void MIL::Attributes::FlexibleShapeInfo::Make(MIL::Attributes::FlexibleShapeInfo *this, MIL::MILContext *a2, const MIL::IRFunction *a3)
{
  std::string::basic_string[abi:ne180100]<0>(v77, "FlexibleShapeInformation");
  Attribute = (MIL::Attributes::FlexibleShapeInfo *)MIL::IRObject::TryGetAttribute((uint64_t)a2, v77);
  uint64_t v5 = Attribute;
  if ((v77[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)v77);
    if (v5) {
      goto LABEL_3;
    }
  }
  else if (Attribute)
  {
LABEL_3:
    memset(v75, 0, sizeof(v75));
    int v76 = 1065353216;
    uint64_t v6 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(v5);
    Values = (MIL::IRValue **)MIL::IRTupleValue::GetValues(v6);
    if (!v8) {
LABEL_75:
    }
      operator new();
    size_t v65 = 0;
    size_t v66 = 0;
    int v67 = &Values[2 * v8];
    uint64_t v9 = &std::piecewise_construct;
    while (1)
    {
      BOOL v68 = Values;
      uint64_t v10 = (MIL::IRTupleValue *)MIL::IRValue::AsTuple(*Values);
      v74[0] = MIL::IRTupleValue::GetValues(v10);
      v74[1] = v11;
      uint64_t v12 = (const void **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v74, 0);
      MIL::IRValue::GetScalar<std::string>(*v12, &v73);
      std::string::size_type size = HIBYTE(v73.__r_.__value_.__r.__words[2]);
      if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v73.__r_.__value_.__l.__size_;
      }
      switch(size)
      {
        case 9uLL:
          long long v31 = &v73;
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            long long v31 = (std::string *)v73.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v32 = v31->__r_.__value_.__r.__words[0];
          int v33 = v31->__r_.__value_.__s.__data_[8];
          if (v32 != 0x6D694465676E6152 || v33 != 115)
          {
LABEL_77:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::operator+<char>();
            long long v63 = std::string::append((std::string *)__p, "'.");
            long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
            *(void *)&v77[16] = *((void *)&v63->__r_.__value_.__l + 2);
            *(_OWORD *)uint64_t v77 = v64;
            v63->__r_.__value_.__l.__size_ = 0;
            v63->__r_.__value_.__r.__words[2] = 0;
            v63->__r_.__value_.__r.__words[0] = 0;
            std::runtime_error::runtime_error(exception, (const std::string *)v77);
            __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
          }
          uint64_t v35 = (MIL::IRValue **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v74, 1uLL);
          uint64_t v36 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(*v35);
          memset(v77, 0, sizeof(v77));
          int v78 = 1065353216;
          uint64_t v37 = MIL::IRDictionaryValue::begin(v36);
          uint64_t v38 = MIL::IRDictionaryValue::end(v36);
          while (v37 != v38)
          {
            uint64_t v39 = (uint64_t)v9;
            MIL::IRValue::GetScalar<std::string>(*(const void **)(v37 + 16), (std::string *)__p);
            uint64_t v40 = (MIL::IRListValue *)MIL::IRValue::AsList(*(MIL::IRValue **)(v37 + 32));
            uint64_t v41 = MIL::IRListValue::GetValues(v40);
            memset(&v79, 0, sizeof(v79));
            if (v42)
            {
              unint64_t v43 = (MIL::IRValue **)v41;
              int v44 = (MIL::IRValue **)(v41 + 16 * v42);
              do
              {
                uint64_t v45 = (uint64_t *)MIL::IRValue::AsTensor(*v43);
                Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v45);
                uint64_t v48 = *Data;
                uint64_t v47 = Data[1];
                std::string::size_type v49 = v79.__r_.__value_.__l.__size_;
                if (v79.__r_.__value_.__l.__size_ >= v79.__r_.__value_.__r.__words[2])
                {
                  uint64_t v51 = (uint64_t)(v79.__r_.__value_.__l.__size_ - v79.__r_.__value_.__r.__words[0]) >> 3;
                  if ((unint64_t)(v51 + 1) >> 61) {
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v52 = (uint64_t)(v79.__r_.__value_.__r.__words[2] - v79.__r_.__value_.__r.__words[0]) >> 2;
                  if (v52 <= v51 + 1) {
                    unint64_t v52 = v51 + 1;
                  }
                  if (v79.__r_.__value_.__r.__words[2] - v79.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v53 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v53 = v52;
                  }
                  if (v53) {
                    long long v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v79.__r_.__value_.__r.__words[2], v53);
                  }
                  else {
                    long long v54 = 0;
                  }
                  long long v55 = &v54[8 * v51];
                  *(void *)long long v55 = v48 | (v47 << 32);
                  std::string::size_type v50 = (std::string::size_type)(v55 + 8);
                  BOOL v56 = (char *)v79.__r_.__value_.__l.__size_;
                  std::string::size_type v57 = v79.__r_.__value_.__r.__words[0];
                  if (v79.__r_.__value_.__l.__size_ != v79.__r_.__value_.__r.__words[0])
                  {
                    do
                    {
                      uint64_t v58 = *((void *)v56 - 1);
                      v56 -= 8;
                      *((void *)v55 - 1) = v58;
                      v55 -= 8;
                    }
                    while (v56 != (char *)v57);
                    BOOL v56 = (char *)v79.__r_.__value_.__r.__words[0];
                  }
                  v79.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
                  v79.__r_.__value_.__l.__size_ = v50;
                  v79.__r_.__value_.__r.__words[2] = (std::string::size_type)&v54[8 * v53];
                  if (v56) {
                    operator delete(v56);
                  }
                }
                else
                {
                  *(void *)v79.__r_.__value_.__l.__size_ = v48 | (v47 << 32);
                  std::string::size_type v50 = v49 + 8;
                }
                v79.__r_.__value_.__l.__size_ = v50;
                v43 += 2;
              }
              while (v43 != v44);
            }
            v80[0] = (long long *)__p;
            uint64_t v9 = (void *)v39;
            std::vector<std::pair<std::string, std::string>>::pointer v59 = std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v77, (unsigned __int8 *)__p, v39, v80);
            size_t v60 = (void *)*((void *)v59 + 5);
            if (v60)
            {
              *((void *)v59 + 6) = v60;
              operator delete(v60);
              *((void *)v59 + 5) = 0;
              *((void *)v59 + 6) = 0;
              *((void *)v59 + 7) = 0;
            }
            *(std::string *)(v59 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v79;
            if (SBYTE7(v71) < 0) {
              operator delete(__p[0]);
            }
            uint64_t v37 = *(void *)v37;
          }
          long long v61 = (std::__shared_weak_count *)operator new(0x40uLL);
          v61->__shared_owners_ = 0;
          v61->__shared_weak_owners_ = 0;
          v61->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258468;
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)&v61[1], (uint64_t *)v77);
          if (v65) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v65);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)v77);
          size_t v65 = v61;
          break;
        case 0x10uLL:
          uint64_t v21 = &v73;
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v21 = (std::string *)v73.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v23 = v21->__r_.__value_.__r.__words[0];
          std::string::size_type v22 = v21->__r_.__value_.__l.__size_;
          if (v23 != 0x746172656D756E45 || v22 != 0x7365706168536465) {
            goto LABEL_77;
          }
          long long v25 = (MIL::IRValue **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v74, 1uLL);
          uint64_t v26 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(*v25);
          *(_OWORD *)std::match_results<const char *> __p = 0u;
          long long v71 = 0u;
          int v72 = 1065353216;
          uint64_t v27 = MIL::IRDictionaryValue::begin(v26);
          uint64_t v28 = MIL::IRDictionaryValue::end(v26);
          while (v27 != v28)
          {
            MIL::IRValue::GetScalar<std::string>(*(const void **)(v27 + 16), &v79);
            uint64_t v29 = (MIL::MILContext *)MIL::IRValue::AsDictionary(*(MIL::IRValue **)(v27 + 32));
            v80[0] = (long long *)&v79;
            uint64_t v30 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t)__p, (unsigned __int8 *)&v79, (uint64_t)v9, v80);
            std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__move_assign((uint64_t)(v30 + 40), (uint64_t *)v77);
            std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)v77);
            if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v79.__r_.__value_.__l.__data_);
            }
            uint64_t v27 = *(void *)v27;
          }
          std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__move_assign((uint64_t)v75, (uint64_t *)__p);
          std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table((uint64_t)__p);
          break;
        case 0xDuLL:
          uint64_t v14 = &v73;
          if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v14 = (std::string *)v73.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v15 = v14->__r_.__value_.__r.__words[0];
          uint64_t v16 = *(std::string::size_type *)((char *)v14->__r_.__value_.__r.__words + 5);
          if (v15 != 0x53746C7561666544 || v16 != 0x736570616853746CLL) {
            goto LABEL_77;
          }
          int64_t v18 = (MIL::IRValue **)MIL::Util::Span<std::shared_ptr<MIL::IRValue const> const,18446744073709551615ul>::At(v74, 1uLL);
          unint64_t v19 = (MIL::MILContext *)MIL::IRValue::AsDictionary(*v18);
          unint64_t v20 = (std::__shared_weak_count *)operator new(0x40uLL);
          v20->__shared_owners_ = 0;
          v20->__shared_weak_owners_ = 0;
          v20->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258418;
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)&v20[1], (uint64_t *)v77);
          if (v66) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v66);
          }
          std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table((uint64_t)v77);
          size_t v66 = v20;
          break;
        default:
          goto LABEL_77;
      }
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v73.__r_.__value_.__l.__data_);
      }
      Values = v68 + 2;
      if (v68 + 2 == v67) {
        goto LABEL_75;
      }
    }
  }
  MIL::Attributes::FlexibleShapeInfo::Make(Attribute);
}

void sub_20F3CB090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,char a33)
{
  a17 = 0;
  std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100]((uint64_t)&a17, v33);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void anonymous namespace'::ParseParamShapes(_anonymous_namespace_ *this@<X0>, MIL::MILContext *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  uint64_t v6 = MIL::IRDictionaryValue::begin(a2);
  for (i = MIL::IRDictionaryValue::end(a2); v6 != i; uint64_t v6 = *(void *)v6)
  {
    MIL::IRValue::GetScalar<std::string>(*(const void **)(v6 + 16), &__p);
    uint64_t v8 = (uint64_t *)MIL::IRValue::AsTensor(*(MIL::IRValue **)(v6 + 32));
    Data = (unsigned int *)MIL::IRTensorValue::GetDataView<int>(v8);
    unint64_t v11 = v10;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    std::vector<std::string const*>::reserve((void **)&v29, v10);
    if (v11)
    {
      uint64_t v12 = &Data[v11];
      do
      {
        uint64_t v13 = (MIL::MILContext *)*Data;
        if ((v13 & 0x80000000) != 0) {
          uint64_t v14 = MIL::IRUnknownDimension::Make(this, 0);
        }
        else {
          uint64_t v14 = MIL::IRConstantDimension::Make(this, v13);
        }
        uint64_t v15 = v14;
        uint64_t v16 = *((void *)&v29 + 1);
        if (*((void *)&v29 + 1) >= (unint64_t)v30)
        {
          uint64_t v18 = (uint64_t)(*((void *)&v29 + 1) - v29) >> 3;
          if ((unint64_t)(v18 + 1) >> 61) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v19 = (uint64_t)&v30[-v29] >> 2;
          if (v19 <= v18 + 1) {
            unint64_t v19 = v18 + 1;
          }
          if ((unint64_t)&v30[-v29] >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v20 = v19;
          }
          if (v20) {
            uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned long long>>((uint64_t)&v30, v20);
          }
          else {
            uint64_t v21 = 0;
          }
          std::string::size_type v22 = (uint64_t *)&v21[8 * v18];
          *std::string::size_type v22 = v15;
          long long v17 = v22 + 1;
          std::string::size_type v23 = (char *)*((void *)&v29 + 1);
          long long v24 = (char *)v29;
          if (*((void *)&v29 + 1) != (void)v29)
          {
            do
            {
              uint64_t v25 = *((void *)v23 - 1);
              v23 -= 8;
              *--std::string::size_type v22 = v25;
            }
            while (v23 != v24);
            std::string::size_type v23 = (char *)v29;
          }
          *(void *)&long long v29 = v22;
          *((void *)&v29 + 1) = v17;
          uint64_t v30 = &v21[8 * v20];
          if (v23) {
            operator delete(v23);
          }
        }
        else
        {
          **((void **)&v29 + 1) = v14;
          long long v17 = (void *)(v16 + 8);
        }
        *((void *)&v29 + 1) = v17;
        ++Data;
      }
      while (Data != v12);
    }
    p_p = &__p;
    uint64_t v26 = std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (long long **)&p_p);
    uint64_t v27 = (void *)*((void *)v26 + 5);
    if (v27)
    {
      *((void *)v26 + 6) = v27;
      operator delete(v27);
      *((void *)v26 + 5) = 0;
      *((void *)v26 + 6) = 0;
      *((void *)v26 + 7) = 0;
    }
    *(_OWORD *)(v26 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = v29;
    *((void *)v26 + 7) = v30;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20F3CB444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t MIL::Attributes::FlexibleShapeInfo::GetEnumeratedShapes(MIL::Attributes::FlexibleShapeInfo *this)
{
  return *(void *)this + 16;
}

void MIL::Attributes::FlexibleShapeInfo::AddEnumeratedShapes(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v8 = __p;
  uint64_t v5 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v4 + 16, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (long long **)&v8);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__move_assign((uint64_t)(v5 + 40), a3);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3CB528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *MIL::Attributes::FlexibleShapeInfo::RemoveEnumeratedShapes(uint64_t a1, unsigned __int8 *a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__erase_unique<std::string>((void *)(*(void *)a1 + 16), a2);
}

void **MIL::Attributes::FlexibleShapeInfo::TryGetDefaultShapes@<X0>(void **this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = (*this)[1];
  *a2 = **this;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void MIL::Attributes::FlexibleShapeInfo::SetDefaultShapes(void **a1, uint64_t *a2)
{
}

void MIL::Attributes::FlexibleShapeInfo::Impl::SetDefaultShapes(void *a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x40uLL);
  v4[1] = 0;
  std::string v4[2] = 0;
  void *v4 = &unk_26C258418;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v4 + 3), a2);
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4 + 3;
  a1[1] = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void MIL::Attributes::FlexibleShapeInfo::RemoveDefaultShapes(MIL::Attributes::FlexibleShapeInfo *this)
{
  uint64_t v1 = *(void **)this;
  uint64_t v2 = *(std::__shared_weak_count **)(*(void *)this + 8);
  void *v1 = 0;
  v1[1] = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t MIL::Attributes::FlexibleShapeInfo::TryGetRangeShapes@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(*(void *)this + 64);
  *a2 = *(void *)(*(void *)this + 56);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void MIL::Attributes::FlexibleShapeInfo::SetRangeShapes(uint64_t *a1, uint64_t *a2)
{
}

void MIL::Attributes::FlexibleShapeInfo::Impl::SetRangeShapes(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = operator new(0x40uLL);
  v4[1] = 0;
  std::string v4[2] = 0;
  void *v4 = &unk_26C258468;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__hash_table((uint64_t)(v4 + 3), a2);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v4 + 3;
  *(void *)(a1 + 64) = v4;
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void MIL::Attributes::FlexibleShapeInfo::RemoveRangeShapes(MIL::Attributes::FlexibleShapeInfo *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *(std::__shared_weak_count **)(*(void *)this + 64);
  *(void *)(v1 + 56) = 0;
  *(void *)(v1 + 64) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void MIL::Attributes::FlexibleShapeInfo::Replace(uint64_t **this, MIL::MILContext *a2, MIL::IRFunction *a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v4 = *this;
  uint64_t v6 = **this;
  uint64_t v5 = (std::__shared_weak_count *)(*this)[1];
  uint64_t v12 = v5;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = *this;
  }
  uint64_t v8 = v4[7];
  uint64_t v7 = (std::__shared_weak_count *)v4[8];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v11 = v7;
  BOOL v9 = v6 && *(void *)(v6 + 24);
  if (v8 && *(void *)(v8 + 24) || (v4[5] ? (char v10 = 1) : (char v10 = v9), (v10 & 1) != 0)) {
    MIL::IRTensorValueType::MakeScalar();
  }
  std::string::basic_string[abi:ne180100]<0>(&v13, "FlexibleShapeInformation");
  MIL::IRObject::RemoveAttribute((uint64_t)a3, (unsigned __int8 *)&v13);
  if (SBYTE7(v14) < 0) {
    operator delete((void *)v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
}

void sub_20F3CCD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,MIL::IRTupleValue *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,MIL::IRTupleValue *a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  std::__split_buffer<std::shared_ptr<MIL::IRBlock>>::~__split_buffer((void **)(v55 - 144));
  *(void *)(v55 - 152) = &a39;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v55 - 152));
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100](&a26, 0);
  std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100](&a31, 0);
  std::unique_ptr<MIL::IRTupleValue const>::reset[abi:ne180100]((MIL::IRTupleValue **)&a38, 0);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a45);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v55 - 192);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

void anonymous namespace'::ShapeToTensorValue(MIL::IRConstantDimension *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v5 = operator new(8uLL);
  __p[0] = v5;
  *uint64_t v5 = (v3 - v4) >> 3;
  __p[1] = v5 + 1;
  __p[2] = v5 + 1;
  MIL::IRTensorValueType::Make(a1, 11, (MIL::MILContext ***)__p);
}

void sub_20F3CD788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::shared_ptr<MIL::IRValue const>::operator=[abi:ne180100]<MIL::IRListValue const,std::default_delete<MIL::IRListValue const>,void>(void *a1, uint64_t *a2)
{
  std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRListValue const,std::default_delete<MIL::IRListValue const>,void>((uint64_t *)&v6, a2);
  uint64_t v3 = (std::__shared_weak_count *)a1[1];
  long long v4 = v6;
  *(void *)&long long v6 = *a1;
  *((void *)&v6 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void MIL::Attributes::FlexibleShapeInfo::Rewrite(uint64_t **this@<X0>, MIL::MILContext *a2@<X1>, const MIL::IRFunction *a3@<X2>, MIL::IRFunction **a4@<X8>)
{
}

void sub_20F3CD870(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MIL::Attributes::BlobFileMutabilityInfo::Rewrite(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL MIL::Attributes::FlexibleShapeInfo::operator==(uint64_t **a1, uint64_t *a2)
{
  return MIL::Attributes::FlexibleShapeInfo::Impl::operator==(*a1, *a2);
}

BOOL MIL::Attributes::FlexibleShapeInfo::Impl::operator==(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)a2;
  if ((v4 == 0) != (v5 == 0)
    || v4
    && !std::operator==[abi:ne180100]<std::string,std::vector<MIL::IRDimension const*>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>>(v4, v5))
  {
    return 0;
  }
  uint64_t v6 = a1[7];
  uint64_t v7 = *(void **)(a2 + 56);
  if ((v6 == 0) != (v7 == 0)
    || v6
    && !std::operator==[abi:ne180100]<std::string,std::vector<std::pair<int,int>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<int,int>>>>>(v6, v7))
  {
    return 0;
  }

  return std::operator==[abi:ne180100]<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>((uint64_t)(a1 + 2), (void *)(a2 + 16));
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  std::string::size_type v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3CDBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  void v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3CDC64(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  float v17 = (char *)operator new(0x50uLL);
  v29[0] = v17;
  v29[1] = a1 + 16;
  *(void *)float v17 = 0;
  *((void *)v17 + 1) = v10;
  float v18 = *a4;
  long long v19 = **a4;
  *((void *)v17 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v17 + 1) = v19;
  *((void *)v18 + 1) = 0;
  *((void *)v18 + 2) = 0;
  *(void *)float v18 = 0;
  *(_OWORD *)(v17 + 4std::unique_ptr<MIL::Attributes::BlobFileMutabilityInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = 0u;
  *(_OWORD *)(v17 + 56) = 0u;
  *((_DWORD *)v17 + 1std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 1065353216;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    BOOL v22 = 1;
    if (v11 >= 3) {
      BOOL v22 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v11);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v25);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v4);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    void *v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v27 >= v11) {
          v27 %= v11;
        }
      }
      else
      {
        v27 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_20F3CDF18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    long long v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    void *v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20F3CE2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<std::pair<int,int>>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x40uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  void v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20F3CE354(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__erase_unique<std::string>(void *a1, unsigned __int8 *a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

void std::vector<int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    uint64_t v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unint64_t v9 = (unsigned int *)&v6[4 * v8];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    uint8x8_t v12 = v7;
    if (end != this->__begin_)
    {
      uint8x8_t v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--uint8x8_t v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

BOOL std::operator==[abi:ne180100]<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(a1 + 16);
  do
  {
    uint64_t v3 = (uint64_t *)*v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    int64_t v5 = (const void **)(v3 + 2);
    uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v3 + 16);
    if (!v6) {
      break;
    }
    uint64_t v7 = v6;
    uint64_t v8 = *((unsigned __int8 *)v3 + 39);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    }
    else {
      uint64_t v9 = v3[3];
    }
    uint64_t v10 = v6[39];
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)v6 + 3);
    }
    if (v9 != v10) {
      break;
    }
    if (v11 >= 0) {
      uint8x8_t v12 = v6 + 16;
    }
    else {
      uint8x8_t v12 = (unsigned __int8 *)*((void *)v6 + 2);
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v5, v12, v3[3])) {
        return v4;
      }
    }
    else if (*((unsigned char *)v3 + 39))
    {
      while (*(unsigned __int8 *)v5 == *v12)
      {
        int64_t v5 = (const void **)((char *)v5 + 1);
        ++v12;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_20:
    ;
  }
  while (std::operator==[abi:ne180100]<std::string,std::vector<MIL::IRDimension const*>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>>((uint64_t)(v3 + 5), (void *)v7 + 5));
  return v4;
}

BOOL std::operator==[abi:ne180100]<std::string,std::vector<MIL::IRDimension const*>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<MIL::IRDimension const*>>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v3 = (uint64_t *)(a1 + 16);
  do
  {
    uint64_t v3 = (uint64_t *)*v3;
    BOOL v4 = v3 == 0;
    if (!v3) {
      break;
    }
    int64_t v5 = (const void **)(v3 + 2);
    uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v3 + 16);
    if (!v6) {
      break;
    }
    uint64_t v7 = v6;
    uint64_t v8 = *((unsigned __int8 *)v3 + 39);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    }
    else {
      uint64_t v9 = v3[3];
    }
    uint64_t v10 = v6[39];
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)v6 + 3);
    }
    if (v9 != v10) {
      break;
    }
    if (v11 >= 0) {
      uint8x8_t v12 = v6 + 16;
    }
    else {
      uint8x8_t v12 = (unsigned __int8 *)*((void *)v6 + 2);
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v5, v12, v3[3])) {
        return v4;
      }
    }
    else if (*((unsigned char *)v3 + 39))
    {
      while (*(unsigned __int8 *)v5 == *v12)
      {
        int64_t v5 = (const void **)((char *)v5 + 1);
        ++v12;
        if (!--v8) {
          goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_20:
    unsigned int v13 = (const void *)v3[5];
    size_t v14 = v3[6] - (void)v13;
    uint64_t v15 = (const void *)*((void *)v7 + 5);
  }
  while (v14 == *((void *)v7 + 6) - (void)v15 && !memcmp(v13, v15, v14));
  return v4;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::vector<std::pair<int,int>>,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::vector<std::pair<int,int>>>>>(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 24) != a2[3]) {
    return 0;
  }
  uint64_t v2 = *(uint64_t **)(a1 + 16);
  if (!v2) {
    return 1;
  }
  do
  {
    BOOL v4 = (const void **)(v2 + 2);
    uint64_t result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)v2 + 16);
    if (!result) {
      break;
    }
    uint64_t v6 = result;
    uint64_t v7 = *((unsigned __int8 *)v2 + 39);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *((unsigned __int8 *)v2 + 39);
    }
    else {
      uint64_t v8 = v2[3];
    }
    uint64_t v9 = *(unsigned __int8 *)(result + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(result + 24);
    }
    if (v8 != v9) {
      return 0;
    }
    if (v10 >= 0) {
      int v11 = (unsigned __int8 *)(result + 16);
    }
    else {
      int v11 = *(unsigned __int8 **)(result + 16);
    }
    if ((v7 & 0x80) != 0)
    {
      if (memcmp(*v4, v11, v2[3])) {
        return 0;
      }
    }
    else if (*((unsigned char *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v11)
      {
        BOOL v4 = (const void **)((char *)v4 + 1);
        ++v11;
        if (!--v7) {
          goto LABEL_19;
        }
      }
      return 0;
    }
LABEL_19:
    unsigned int v13 = (char *)v2[5];
    uint8x8_t v12 = (char *)v2[6];
    size_t v14 = *(_DWORD **)(v6 + 40);
    if (v12 - v13 != *(void *)(v6 + 48) - (void)v14) {
      return 0;
    }
    while (v13 != v12)
    {
      if (*(_DWORD *)v13 != *v14 || *((_DWORD *)v13 + 1) != v14[1]) {
        return 0;
      }
      v13 += 8;
      v14 += 2;
    }
    uint64_t v2 = (uint64_t *)*v2;
    uint64_t result = 1;
  }
  while (v2);
  return result;
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258418;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258418;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(a1 + 24);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<std::pair<int,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<std::pair<int,int>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26C258468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

uint64_t std::__shared_ptr_emplace<std::unordered_map<std::string,std::vector<std::pair<int,int>>>>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::~__hash_table(a1 + 24);
}

void std::default_delete<MIL::Attributes::FlexibleShapeInfo::Impl>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(a2 + 64);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::~__hash_table(a2 + 16);
    BOOL v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    JUMPOUT(0x21056C700);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::clear(a1);
  uint64_t v4 = *a2;
  *a2 = 0;
  int64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v8 = a2[2];
  uint64_t v7 = a2 + 2;
  uint64_t v6 = v8;
  uint64_t v9 = *(v7 - 1);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v9;
  *(v7 - 1) = 0;
  uint64_t v10 = v7[1];
  *(void *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    unint64_t v11 = *(void *)(v6 + 8);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        v11 %= v12;
      }
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v11) = a1 + 16;
    *uint64_t v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<std::string,std::vector<MIL::IRDimension const*>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

uint64_t std::vector<std::shared_ptr<MIL::IRValue const>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::reverse_iterator<std::shared_ptr<MIL::IRValue const>*>,std::reverse_iterator<std::shared_ptr<MIL::IRValue const>*>,std::reverse_iterator<std::shared_ptr<MIL::IRValue const>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::reverse_iterator<std::shared_ptr<MIL::IRValue const>*>,std::reverse_iterator<std::shared_ptr<MIL::IRValue const>*>,std::reverse_iterator<std::shared_ptr<MIL::IRValue const>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  _OWORD v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::reverse_iterator<std::shared_ptr<MIL::IRValue const>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRValue const>>,std::reverse_iterator<std::shared_ptr<MIL::IRValue const>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MIL::IRBlock>>,std::reverse_iterator<std::shared_ptr<MIL::IRBlock>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

MIL::IRListValue *std::unique_ptr<MIL::IRListValue const>::reset[abi:ne180100](MIL::IRListValue **a1, MIL::IRListValue *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t *std::shared_ptr<MIL::IRValue const>::shared_ptr[abi:ne180100]<MIL::IRListValue const,std::default_delete<MIL::IRListValue const>,void>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  MIL::IRListValue *result = *a2;
  if (v2) {
    operator new();
  }
  result[1] = 0;
  *a2 = 0;
  return result;
}

void std::__shared_ptr_pointer<MIL::IRListValue const *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21056C700);
}

MIL::IRListValue *std::__shared_ptr_pointer<MIL::IRListValue const *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(MIL::IRListValue **)(a1 + 24);
  if (result)
  {
    MIL::IRListValue::~IRListValue(result);
    JUMPOUT(0x21056C700);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MIL::IRListValue const *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void MIL::Attributes::IOAliasInfo::~IOAliasInfo(MIL::Attributes::IOAliasInfo *this)
{
}

{
  std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0);
}

void *MIL::Attributes::IOAliasInfo::IOAliasInfo(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  MIL::IRListValue *result = v2;
  return result;
}

void MIL::Attributes::IOAliasInfo::Make(MIL::Attributes::IOAliasInfo *this)
{
}

void sub_20F3CEDE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void MIL::Attributes::IOAliasInfo::Make(MIL::Attributes::IOAliasInfo *this, MIL::MILContext *a2, const MIL::IRFunction *a3)
{
  BYTE7(v21) = 9;
  strcpy((char *)&v20, "IOAliases");
  Attribute = (MIL::Attributes::IOAliasInfo *)MIL::IRObject::TryGetAttribute((uint64_t)a2, (unsigned __int8 *)&v20);
  uint64_t v4 = Attribute;
  if (SBYTE7(v21) < 0)
  {
    operator delete((void *)v20);
    if (v4) {
      goto LABEL_3;
    }
  }
  else if (Attribute)
  {
LABEL_3:
    uint64_t v5 = (MIL::IRDictionaryValue *)MIL::IRValue::AsDictionary(v4);
    long long v20 = 0u;
    long long v21 = 0u;
    int v22 = 1065353216;
    memset(v18, 0, sizeof(v18));
    int v19 = 1065353216;
    uint64_t v6 = MIL::IRDictionaryValue::begin(v5);
    uint64_t v7 = MIL::IRDictionaryValue::end(v5);
    while (v6 != v7)
    {
      MIL::IRValue::GetScalar<std::string>(*(const void **)(v6 + 16), &v17);
      MIL::IRValue::GetScalar<std::string>(*(const void **)(v6 + 32), &__p);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>((uint64_t)&v20, (unsigned __int8 *)&v17, (long long *)&v17, (long long *)&__p);
      if (!v8)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        unint64_t v11 = std::string::append(&v14, "' aliased to multiple internal names.");
        long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v15.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        std::runtime_error::runtime_error(exception, &v15);
        __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>((uint64_t)v18, (unsigned __int8 *)&__p, (long long *)&__p, (long long *)&v17);
      if (!v9)
      {
        char v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::operator+<char>();
        std::runtime_error::runtime_error(v13, &v15);
        __cxa_throw(v13, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v17.__r_.__value_.__l.__data_);
      }
      uint64_t v6 = *(void *)v6;
    }
    operator new();
  }
  MIL::Attributes::IOAliasInfo::Make(Attribute);
}

void sub_20F3CF098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)&a29, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a35);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v35 - 96);
  _Unwind_Resume(a1);
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::SetAlias(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)*a1, a2))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    char v9 = std::string::append(&v14, "' already exists.");
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(exception, &v15);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(exception, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*a1 + 40), a3))
  {
    unint64_t v11 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    long long v12 = std::string::append(&v14, "' already exists.");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::logic_error::logic_error(v11, &v15);
    v11->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C3A0] + 16);
    __cxa_throw(v11, (struct type_info *)off_26412C1F0, MEMORY[0x263F8C080]);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>(*a1, a2, (long long *)a2, (long long *)a3);
  uint64_t v6 = *a1 + 40;

  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string,std::string>(v6, a3, (uint64_t)a3, (uint64_t)a2);
}

void sub_20F3CF35C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (v22) {
    __cxa_free_exception(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Attributes::IOAliasInfo::GetExternalToInternalNames(MIL::Attributes::IOAliasInfo *this)
{
  return *(void *)this;
}

uint64_t MIL::Attributes::IOAliasInfo::GetInternalToExternalNames(MIL::Attributes::IOAliasInfo *this)
{
  return *(void *)this + 40;
}

uint64_t MIL::Attributes::IOAliasInfo::TrySetAlias(uint64_t *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)*a1, a2)|| std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*a1 + 40), a3))
  {
    return 0;
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string&,std::string&>(*a1, a2, (long long *)a2, (long long *)a3);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string,std::string>(*a1 + 40, a3, (uint64_t)a3, (uint64_t)a2);
  return 1;
}

BOOL MIL::Attributes::IOAliasInfo::TryRemoveAlias(void **a1, unsigned __int8 *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::find<std::string>(*a1, a2);
  if (v3)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__erase_unique<std::string>(v2 + 5, v3 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<MIL::IRDimension const*>>>>::remove(v2, v3, (uint64_t)v5);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  }
  return v3 != 0;
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::GetExternalName(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)a1 + 40), a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 40;
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::TryGetExternalName(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>((void *)(*(void *)a1 + 40), a2);
  if (v2) {
    return v2 + 40;
  }
  else {
    return 0;
  }
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::GetInternalName(void **a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(*a1, a2);
  if (!v2) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  return v2 + 40;
}

unsigned __int8 *MIL::Attributes::IOAliasInfo::TryGetInternalName(void **a1, unsigned __int8 *a2)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(*a1, a2);
  if (v2) {
    return v2 + 40;
  }
  else {
    return 0;
  }
}

void MIL::Attributes::IOAliasInfo::Replace(MIL::Attributes::IOAliasInfo *this, MIL::MILContext *a2, MIL::IRFunction *a3)
{
  if (*(void *)(*(void *)this + 24))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v4 = 0u;
    int v5 = 1065353216;
    MIL::IRTensorValueType::MakeScalar();
  }
  BYTE7(v4) = 9;
  strcpy((char *)__p, "IOAliases");
  MIL::IRObject::RemoveAttribute((uint64_t)a3, (unsigned __int8 *)__p);
  if (SBYTE7(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_20F3CF8DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::IOAliasInfo::Rewrite(MIL::Attributes::IOAliasInfo *this@<X0>, MIL::MILContext *a2@<X1>, const MIL::IRFunction *a3@<X2>, MIL::IRFunction **a4@<X8>)
{
}

void sub_20F3CFA68(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *v1;
  uint64_t *v1 = 0;
  if (v3) {
    MIL::Attributes::BlobFileMutabilityInfo::Rewrite(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Attributes::IOAliasInfo::operator==(uint64_t *a1, void **a2)
{
  return std::operator==[abi:ne180100]<std::string,std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::pair<std::string const,std::string>>>(*a1, *a2);
}

uint64_t *std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  MIL::IRListValue *result = a2;
  if (v2)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2 + 40);
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
    JUMPOUT(0x21056C700);
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::string,std::string>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  char v9 = (void *)(a1 + 24);
  unint64_t v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    std::string v15 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      for (uint64_t i = *v15; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v17 = *((void *)i + 1);
        if (v17 == v11)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12) {
              v17 %= v12;
            }
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4) {
            break;
          }
        }
      }
    }
  }
  float v18 = (char *)operator new(0x40uLL);
  v28[0] = v18;
  v28[1] = a1 + 16;
  *(void *)float v18 = 0;
  *((void *)v18 + 1) = v11;
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((void *)v18 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(_OWORD *)(v18 + 4std::unique_ptr<MIL::Attributes::IOAliasInfo::Impl>::reset[abi:ne180100]((uint64_t *)this, 0) = *(_OWORD *)a4;
  *((void *)v18 + 7) = *(void *)(a4 + 16);
  *(void *)(a4 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = 0;
  char v29 = 1;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    BOOL v21 = 1;
    if (v12 >= 3) {
      BOOL v21 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v12);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MIL::IRValue const>>>>::__rehash<true>(a1, v24);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  size_t v25 = *(void **)(*(void *)a1 + 8 * v4);
  if (v25)
  {
    *(void *)v28[0] = *v25;
    *size_t v25 = v28[0];
  }
  else
  {
    *(void *)v28[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v28[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v28[0])
    {
      unint64_t v26 = *(void *)(*(void *)v28[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v26 >= v12) {
          v26 %= v12;
        }
      }
      else
      {
        v26 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v26) = v28[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v28[0];
  v28[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v28, 0);
  return i;
}

void sub_20F3CFD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::~TraceabilityInfo(void ***this)
{
  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<MIL::Attributes::TraceabilityInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

{
  void **v1;

  uint64_t v1 = *this;
  *this = 0;
  if (v1) {
    std::default_delete<MIL::Attributes::TraceabilityInfo::Impl>::operator()[abi:ne180100]((uint64_t)this, v1);
  }
}

void *MIL::Attributes::TraceabilityInfo::TraceabilityInfo(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  MIL::IRListValue *result = v2;
  return result;
}

{
  uint64_t v2;

  uint64_t v2 = *a2;
  *a2 = 0;
  MIL::IRListValue *result = v2;
  return result;
}

void MIL::Attributes::TraceabilityInfo::Make(MIL::Attributes::TraceabilityInfo *this)
{
}

void sub_20F3CFEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  std::default_delete<MIL::Attributes::TraceabilityInfo::Impl>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::Make(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2)) {
    MIL::IRTensorValueType::MakeScalar();
  }
  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(exception, "TraceabilityInfo is not a IRDictionaryType.");
  __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
}

void sub_20F3D01D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,std::__shared_weak_count *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  uint64_t v33 = *(void *)(v31 - 128);
  *(void *)(v31 - 12std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  if (v33) {
    (*(void (**)(uint64_t))(*(void *)v33 + 8))(v33);
  }
  uint64_t v34 = *(void *)(v31 - 96);
  *(void *)(v31 - 96) = 0;
  if (v34) {
    (*(void (**)(uint64_t))(*(void *)v34 + 8))(v34);
  }
  _Unwind_Resume(exception_object);
}

void sub_20F3D0310()
{
  if (*(char *)(v0 - 97) < 0) {
    operator delete(*(void **)(v0 - 120));
  }
  JUMPOUT(0x20F3D0308);
}

void anonymous namespace'::ExtractTraceabilityInfo(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v2 = *a1;
  if (v2)
  {
    unint64_t v4 = (MIL::IRListValue *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 48))(v2);
    int v5 = v4;
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Traceability scope_name and scope_type should be of ListValueType.");
      __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t Type = MIL::IRListValue::GetType(v4);
    uint64_t v7 = (MIL::IRValueType *)(*(uint64_t (**)(uint64_t))(*(void *)Type + 64))(Type);
    if (!(*(uint64_t (**)(MIL::IRValueType *))(*(void *)v7 + 24))(v7)
      || (uint64_t v8 = MIL::IRValueType::AsTensorType(v7),
          (*(unsigned int (**)(uint64_t))(*(void *)v8 + 88))(v8) != 3)
      || (char v9 = (MIL::IRTensorValueType *)MIL::IRValueType::AsTensorType(v7), !MIL::IRTensorValueType::IsScalar(v9)))
    {
      uint64_t v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, "Each element of traceability scope_name/scope_type list should be a IRTensorValueType of type scalar string.");
      __cxa_throw(v28, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
    }
    uint64_t Values = MIL::IRListValue::GetValues(v5);
    if (v11)
    {
      uint64_t v12 = Values;
      uint64_t v13 = Values + 16 * v11;
      while (1)
      {
        unint64_t v14 = *(const void **)v12;
        std::string v15 = *(std::__shared_weak_count **)(v12 + 8);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        MIL::IRValue::GetScalar<std::string>(v14, &__p);
        unint64_t v17 = *(void *)(a2 + 8);
        unint64_t v16 = *(void *)(a2 + 16);
        if (v17 < v16) {
          break;
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a2) >> 3);
        unint64_t v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a2) >> 3);
        if (2 * v21 > v20) {
          unint64_t v20 = 2 * v21;
        }
        if (v21 >= 0x555555555555555) {
          unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v22 = v20;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
        if (v22) {
          unint64_t v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v22);
        }
        else {
          unint64_t v23 = 0;
        }
        size_t v24 = v23 + v19;
        __v.__first_ = v23;
        __v.__begin_ = v24;
        __v.__end_cap_.__value_ = &v23[v22];
        long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v24->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v24 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
        uint64_t v26 = *(void *)(a2 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v27 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v26;
        if (v27 < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (!v15) {
            goto LABEL_25;
          }
LABEL_24:
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          goto LABEL_25;
        }
        if (v15) {
          goto LABEL_24;
        }
LABEL_25:
        v12 += 16;
        if (v12 == v13) {
          return;
        }
      }
      long long v18 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v17 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v17 = v18;
      *(void *)(a2 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v17 + 24;
      if (!v15) {
        goto LABEL_25;
      }
      goto LABEL_24;
    }
  }
}

void sub_20F3D0618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  __cxa_free_exception(v15);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::Make(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "TraceabilityInfo");
  Attribute = (MIL::Attributes::TraceabilityInfo *)MIL::IRObject::TryGetAttribute(v3, (unsigned __int8 *)__p);
  uint64_t v5 = (uint64_t)Attribute;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v5)
    {
LABEL_3:
      uint64_t v6 = *a1;
      uint64_t v7 = a1[1];
      v8[0] = v6;
      v8[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      MIL::Attributes::TraceabilityInfo::Make((uint64_t)v8, v5);
    }
  }
  else if (Attribute)
  {
    goto LABEL_3;
  }
  MIL::Attributes::TraceabilityInfo::Make(Attribute);
}

void sub_20F3D073C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void MIL::Attributes::TraceabilityInfo::GetValue(long long ***a1)
{
  uint64_t v2 = *a1;
  memset(&v5, 0, sizeof(v5));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v5, *v2, v2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v2[1] - (char *)*v2) >> 3));
  uint64_t v3 = *a1;
  memset(&v4, 0, sizeof(v4));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v4, v3[3], v3[4], 0xAAAAAAAAAAAAAAABLL * (((char *)v3[4] - (char *)v3[3]) >> 3));
  MIL::IRTensorValueType::MakeScalar();
}

void sub_20F3D0E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t **a24,uint64_t a25,MIL::IRListValue *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t *a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  if (a23) {
    (*(void (**)(uint64_t))(*(void *)a23 + 8))(a23);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  std::unique_ptr<MIL::IRListValue const>::reset[abi:ne180100](&a26, 0);
  std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table(v44 - 144);
  a24 = &a41;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a41 = &a44;
  std::vector<std::shared_ptr<MIL::IRBlock>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  a44 = v44 - 192;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a44 = v44 - 168;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::AddNames(std::vector<std::string> **a1, long long **a2)
{
  uint64_t v2 = *a1;
  memset(&v3, 0, sizeof(v3));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  if (v2 != (std::vector<std::string> *)&v3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2, (std::string *)v3.__r_.__value_.__l.__data_, (long long *)v3.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3.__r_.__value_.__l.__size_ - v3.__r_.__value_.__r.__words[0]) >> 3));
  }
  std::string v4 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_20F3D1100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::AddTypes(std::vector<std::string> **a1, long long **a2)
{
  uint64_t v2 = *a1;
  memset(&v3, 0, sizeof(v3));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  if (&v2[1] != (std::vector<std::string> *)&v3) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v2 + 1, (std::string *)v3.__r_.__value_.__l.__data_, (long long *)v3.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3.__r_.__value_.__l.__size_ - v3.__r_.__value_.__r.__words[0]) >> 3));
  }
  std::string v4 = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v4);
}

void sub_20F3D11A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

std::string *MIL::Attributes::TraceabilityInfo::GetNames@<X0>(long long ***this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *this;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *v2, v2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v2[1] - (char *)*v2) >> 3));
}

std::string *MIL::Attributes::TraceabilityInfo::GetTypes@<X0>(MIL::Attributes::TraceabilityInfo *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *(long long **)(v2 + 24), *(long long **)(v2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 32) - *(void *)(v2 + 24)) >> 3));
}

void MIL::Attributes::TraceabilityInfo::RemoveNames(uint64_t **this)
{
}

void MIL::Attributes::TraceabilityInfo::RemoveTypes(MIL::Attributes::TraceabilityInfo *this)
{
}

void MIL::Attributes::TraceabilityInfo::Clear(uint64_t **this)
{
  uint64_t v1 = *this;
  std::vector<std::string>::__clear[abi:ne180100](*this);

  std::vector<std::string>::__clear[abi:ne180100](v1 + 3);
}

void MIL::Attributes::TraceabilityInfo::Replace(long long ***a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  memset(&v14, 0, sizeof(v14));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v14, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
  uint64_t v7 = *a1;
  memset(&v13, 0, sizeof(v13));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v13, v7[3], v7[4], 0xAAAAAAAAAAAAAAABLL * (((char *)v7[4] - (char *)v7[3]) >> 3));
  if (v14.__r_.__value_.__r.__words[0] != v14.__r_.__value_.__l.__size_
    || v13.__r_.__value_.__r.__words[0] != v13.__r_.__value_.__l.__size_)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "TraceabilityInfo");
    uint64_t v8 = *(void *)(a2 + 8);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    MIL::Attributes::TraceabilityInfo::GetValue(a1);
  }
  uint64_t v9 = *a3;
  std::string::basic_string[abi:ne180100]<0>(v11, "TraceabilityInfo");
  MIL::IRObject::RemoveAttribute(v9, (unsigned __int8 *)v11);
  if (v12 < 0) {
    operator delete(v11[0]);
  }
  v11[0] = (MIL::IRDictionaryValue *)&v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v11);
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

void sub_20F3D144C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::string __p = &a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::string __p = (char *)(v25 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void MIL::Attributes::TraceabilityInfo::Rewrite(long long ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)a3 + 32))(&v11);
  uint64_t v7 = v11;
  *a4 = v11;
  if (v7) {
    operator new();
  }
  a4[1] = 0;
  uint64_t v8 = *a2;
  uint64_t v9 = (std::__shared_weak_count *)a2[1];
  v10[0] = v8;
  v10[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  MIL::Attributes::TraceabilityInfo::Replace(a1, (uint64_t)v10, a4);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_20F3D15D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12) {
    MIL::Pass::Run(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t MIL::Attributes::TraceabilityInfo::operator==(unsigned __int8 ***a1, uint64_t *a2)
{
  return MIL::Attributes::TraceabilityInfo::Impl::operator==(*a1, *a2);
}

uint64_t MIL::Attributes::TraceabilityInfo::Impl::operator==(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  std::string v3 = a1[1];
  std::string v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  while (v2 != v3)
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v13, v2, v4);
    if (!result) {
      return result;
    }
    v2 += 24;
    v4 += 24;
  }
  char v10 = a1 + 3;
  uint64_t v8 = a1[3];
  uint64_t v9 = v10[1];
  uint64_t v12 = a2 + 24;
  uint64_t v11 = *(unsigned __int8 **)(a2 + 24);
  if (v9 - v8 != *(void *)(v12 + 8) - (void)v11) {
    return 0;
  }
  if (v8 == v9) {
    return 1;
  }
  do
  {
    uint64_t result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v14, v8, v11);
    if (!result) {
      break;
    }
    v8 += 24;
    v11 += 24;
  }
  while (v8 != v9);
  return result;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  std::vector<unsigned int>::pointer begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    char v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  std::string v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_20F3D1854(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20F3D185C(_Unwind_Exception *a1)
{
  *(void *)(v1 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::default_delete<MIL::Attributes::TraceabilityInfo::Impl>::operator()[abi:ne180100](uint64_t a1, void **a2)
{
  if (a2)
  {
    std::string v4 = a2 + 3;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    std::string v4 = a2;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
    return MEMORY[0x21056C700](a2, 0x20C40A759441BLL);
  }
  return result;
}

void MIL::Blob::TryGetDataOffsetAndByteLength(const void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, "path");
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&__p);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  MIL::IRValue::GetScalar<std::string>(*((const void **)v6 + 5), &v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v7) {
    __cxa_bad_cast();
  }
  uint64_t v8 = (uint64_t)v7;
  std::string::basic_string[abi:ne180100]<0>(&v21, "type");
  uint64_t v9 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v21);
  MIL::IRValue::GetScalar<std::string>(*((const void **)v9 + 5), &__p);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (__p.__r_.__value_.__l.__size_ != 8)
    {
      if (__p.__r_.__value_.__l.__size_ != 14) {
        goto LABEL_26;
      }
      if (*(void *)__p.__r_.__value_.__l.__data_ != 0x4C4259434147454CLL
        || *(void *)(__p.__r_.__value_.__r.__words[0] + 6) != 0x454C4946424F4C42)
      {
        goto LABEL_26;
      }
LABEL_36:
      std::string::basic_string[abi:ne180100]<0>(&v21, "identifier");
      unint64_t v17 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v21);
      if (!v17) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      unint64_t v18 = MIL::IRValue::GetScalar<unsigned long long>(*((const void **)v17 + 5));
      if (v22 < 0) {
        operator delete((void *)v21);
      }
      MIL::MILContextImpl::GetOrCreateLegacyStorageReader(v8, (unsigned __int8 *)&v24, (std::string::size_type *)&v21);
      uint64_t FileDataOffsetAndByteLength = MIL::Blob::LegacyStorageReader::GetFileDataOffsetAndByteLength((MIL::Blob::LegacyStorageReader *)v21, v18);
      *(unsigned char *)a3 = 1;
      *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = FileDataOffsetAndByteLength;
      *(void *)(a3 + 16) = v20;
      goto LABEL_40;
    }
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 8)
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 14) {
        goto LABEL_26;
      }
      if (__p.__r_.__value_.__r.__words[0] != 0x4C4259434147454CLL
        || *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 6) != 0x454C4946424F4C42)
      {
        goto LABEL_26;
      }
      goto LABEL_36;
    }
    p_p = &__p;
  }
  if (p_p->__r_.__value_.__r.__words[0] != 0x454C4946424F4C42)
  {
LABEL_26:
    LOBYTE(v21) = 0;
    *(void *)((char *)&v21 + 4) = 0;
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
    *(void *)(a3 + 16) = 0;
    goto LABEL_27;
  }
  std::string::basic_string[abi:ne180100]<0>(&v21, "offset");
  char v13 = std::__hash_table<std::__hash_value_type<std::string,MIL::IRValueType const*>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MIL::IRValueType const*>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MIL::IRValueType const*>>>::find<std::string>(a2, (unsigned __int8 *)&v21);
  if (!v13) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  uint64_t v14 = MIL::IRValue::GetScalar<unsigned long long>(*((const void **)v13 + 5));
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  MIL::MILContextImpl::GetOrCreateStorageReader(v8, (unsigned __int8 *)&v24, (std::string::size_type *)&v21);
  uint64_t DataOffset = MIL::Blob::StorageReader::GetDataOffset((MIL::Blob::StorageReader::Impl **)v21, v14);
  uint64_t DataSize = MIL::Blob::StorageReader::GetDataSize((MIL::Blob::StorageReader::Impl **)v21, v14);
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = DataOffset;
  *(void *)(a3 + 16) = DataSize;
LABEL_40:
  if (*((void *)&v21 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
  }
LABEL_27:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
}

void sub_20F3D1C48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  __cxa_begin_catch(a1);
  *(unsigned char *)uint64_t v27 = 0;
  *(void *)(v27 + std::__hash_table<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,std::__unordered_map_hasher<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapHasher,MIL::IRValueMapEq,true>,std::__unordered_map_equal<std::shared_ptr<MIL::IRValue const>,std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>,MIL::IRValueMapEq,MIL::IRValueMapHasher,true>,std::allocator<std::__hash_value_type<std::shared_ptr<MIL::IRValue const>,std::shared_ptr<MIL::IRValue const>>>>::~__hash_table((uint64_t)this + 8) = 0;
  *(void *)(v27 + 16) = 0;
  __cxa_end_catch();
  JUMPOUT(0x20F3D1B10);
}

void MIL::Blob::FileWriter::~FileWriter(MIL::Blob::FileWriter *this)
{
  uint64_t v1 = (char *)this + 432;
  MEMORY[0x21056C330]((char *)this + 24);
  std::iostream::~basic_iostream();
  MEMORY[0x21056C620](v1);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  uint64_t v2 = a1 + 54;
  MEMORY[0x21056C330](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x21056C620](v2);
  return a1;
}

void (__cdecl ***MIL::Blob::FileWriter::FileWriter(void (__cdecl ***a1)(std::fstream *__hidden this), const std::string *a2, int a3))(std::fstream *__hidden this)
{
  a1[1] = 0;
  uint64_t v6 = (uint64_t *)(a1 + 3);
  *a1 = (void (__cdecl **)(std::fstream *__hidden))&unk_26C258660;
  a1[54] = (void (__cdecl **)(std::fstream *__hidden))&unk_26C258688;
  std::ios_base::init((std::ios_base *)(a1 + 54), a1 + 3);
  a1[71] = 0;
  *((_DWORD *)a1 + 144) = -1;
  MEMORY[0x21056C320](v6);
  if (a3) {
    std::ios_base::openmode v7 = 60;
  }
  else {
    std::ios_base::openmode v7 = 28;
  }
  std::fstream::open((std::fstream *)a1, a2, v7);
  uint64_t v8 = *a1;
  if ((*((unsigned char *)*(*a1 - 3) + (void)a1 + 32) & 5) != 0)
  {
    std::fstream::open((std::fstream *)a1, a2, 0x14u);
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
    }
    std::fstream::open((std::fstream *)a1, a2, v7);
    uint64_t v8 = *a1;
  }
  if ((*((unsigned char *)*(v8 - 3) + (void)a1 + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    unint64_t v11 = std::string::append(&v13, " file stream for writing");
    long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v14.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return a1;
}

void sub_20F3D20B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v23 & 1) == 0)
    {
LABEL_8:
      std::fstream::~fstream(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void std::fstream::open(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  uint64_t v4 = std::filebuf::open();
  std::string v5 = (std::ios_base *)((char *)this + *((void *)this->__sb_.__extbuf_ - 3));
  if (v4) {
    std::ios_base::iostate v6 = 0;
  }
  else {
    std::ios_base::iostate v6 = v5->__rdstate_ | 4;
  }

  std::ios_base::clear(v5, v6);
}

unint64_t MIL::Blob::FileWriter::GetNextAlignedOffset(MIL::Blob::FileWriter *this)
{
  std::istream::seekg();
  std::istream::tellg();
  return (v2 + 63) & 0xFFFFFFFFFFFFFFC0;
}

uint64_t MIL::Blob::FileWriter::GetFileSize(MIL::Blob::FileWriter *this)
{
  std::istream::seekg();
  std::istream::tellg();
  return v2;
}

unint64_t MIL::Blob::FileWriter::AppendData(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  std::istream::seekg();
  std::istream::tellg();
  uint64_t v2 = v10;
  std::string v3 = a1 + 2;
  MEMORY[0x21056C390](v8, a1 + 2);
  unint64_t v4 = (v2 + 63) & 0xFFFFFFFFFFFFFFC0;
  std::string v5 = (char *)v3 + *(void *)(*v3 - 24);
  if ((v5[32] & 5) == 0)
  {
    (*(void (**)(void *__return_ptr))(**((void **)v5 + 5) + 32))(v9);
    if (v10 == -1) {
      std::ios_base::clear((std::ios_base *)((char *)v3 + *(void *)(*v3 - 24)), *(_DWORD *)((char *)v3 + *(void *)(*v3 - 24) + 32) | 4);
    }
  }
  MEMORY[0x21056C3A0](v8);
  std::ostream::write();
  if (*(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "[MIL FileWriter]: Unknown error occured while writing data to the file.");
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return v4;
}

void sub_20F3D2458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t MIL::Blob::FileWriter::WriteData(void *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if ((a4 & 0x3F) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v22, a4);
    uint64_t v10 = std::string::insert(&v22, 0, "[MIL FileWriter]: Provided offset not aligned. offset=");
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    long long v12 = std::string::append(&v23, " alignment=");
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v21, 0x40uLL);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v14 = &v21;
    }
    else {
      std::string v14 = (std::string *)v21.__r_.__value_.__r.__words[0];
    }
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v21.__r_.__value_.__l.__size_;
    }
    unint64_t v16 = std::string::append(&v24, (const std::string::value_type *)v14, size);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    unint64_t v18 = std::string::append(&v25, ".");
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v26);
    __cxa_throw(exception, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  std::ios_base::iostate v6 = a1 + 2;
  MEMORY[0x21056C390](&v25, a1 + 2);
  std::ios_base::openmode v7 = (char *)v6 + *(void *)(*v6 - 24);
  if ((v7[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr))(**((void **)v7 + 5) + 32))(&v26);
    if (v27 == -1) {
      std::ios_base::clear((std::ios_base *)((char *)v6 + *(void *)(*v6 - 24)), *(_DWORD *)((char *)v6 + *(void *)(*v6 - 24) + 32) | 4);
    }
  }
  MEMORY[0x21056C3A0](&v25);
  uint64_t result = std::ostream::write();
  if (*(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32))
  {
    uint64_t v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "[MIL FileWriter]: Unknown error occured while writing data to the file.");
    __cxa_throw(v20, MEMORY[0x263F8C1F0], MEMORY[0x263F8C070]);
  }
  return result;
}